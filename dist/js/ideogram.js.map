{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/d3/build/d3.js","src/js/color.js","src/js/core.js","src/js/index.js","src/js/layouts/layout.js","src/js/model-adapter.js","src/js/ploidy.js","src/js/views/chromosome.js"],"names":[],"mappings":"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","file":"ideogram.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// https://d3js.org Version 4.1.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var version = \"4.1.1\";\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;\n          else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;\n          else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n\n  function ascendingComparator(f) {\n    return function(d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  var bisectLeft = ascendingBisect.left;\n\n  function descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function number(x) {\n    return x === null ? NaN : +x;\n  }\n\n  function variance(array, f) {\n    var n = array.length,\n        m = 0,\n        a,\n        d,\n        s = 0,\n        i = -1,\n        j = 0;\n\n    if (f == null) {\n      while (++i < n) {\n        if (!isNaN(a = number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    else {\n      while (++i < n) {\n        if (!isNaN(a = number(f(array[i], i, array)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    if (j > 1) return s / (j - 1);\n  }\n\n  function deviation(array, f) {\n    var v = variance(array, f);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  function extent(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b,\n        c;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    return [a, c];\n  }\n\n  var array = Array.prototype;\n\n  var slice = array.slice;\n  var map = array.map;\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function identity(x) {\n    return x;\n  }\n\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  var e10 = Math.sqrt(50);\n  var e5 = Math.sqrt(10);\n  var e2 = Math.sqrt(2);\n  function ticks(start, stop, count) {\n    var step = tickStep(start, stop, count);\n    return range(\n      Math.ceil(start / step) * step,\n      Math.floor(stop / step) * step + step / 2, // inclusive\n      step\n    );\n  }\n\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;\n    else if (error >= e5) step1 *= 5;\n    else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  function sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n  }\n\n  function histogram() {\n    var value = identity,\n        domain = extent,\n        threshold = sturges;\n\n    function histogram(data) {\n      var i,\n          n = data.length,\n          x,\n          values = new Array(n);\n\n      for (i = 0; i < n; ++i) {\n        values[i] = value(data[i], i, data);\n      }\n\n      var xz = domain(values),\n          x0 = xz[0],\n          x1 = xz[1],\n          tz = threshold(values, x0, x1);\n\n      // Convert number of thresholds into uniform thresholds.\n      if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);\n\n      // Remove any thresholds outside the domain.\n      var m = tz.length;\n      while (tz[0] <= x0) tz.shift(), --m;\n      while (tz[m - 1] >= x1) tz.pop(), --m;\n\n      var bins = new Array(m + 1),\n          bin;\n\n      // Initialize bins.\n      for (i = 0; i <= m; ++i) {\n        bin = bins[i] = [];\n        bin.x0 = i > 0 ? tz[i - 1] : x0;\n        bin.x1 = i < m ? tz[i] : x1;\n      }\n\n      // Assign data to bins by value, ignoring any outside the domain.\n      for (i = 0; i < n; ++i) {\n        x = values[i];\n        if (x0 <= x && x <= x1) {\n          bins[bisectRight(tz, x, 0, m)].push(data[i]);\n        }\n      }\n\n      return bins;\n    }\n\n    histogram.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n    };\n\n    histogram.domain = function(_) {\n      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n    };\n\n    histogram.thresholds = function(_) {\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n    };\n\n    return histogram;\n  }\n\n  function threshold(array, p, f) {\n    if (f == null) f = number;\n    if (!(n = array.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);\n    if (p >= 1) return +f(array[n - 1], n - 1, array);\n    var n,\n        h = (n - 1) * p,\n        i = Math.floor(h),\n        a = +f(array[i], i, array),\n        b = +f(array[i + 1], i + 1, array);\n    return a + (b - a) * (h - i);\n  }\n\n  function freedmanDiaconis(values, min, max) {\n    values = map.call(values, number).sort(ascending);\n    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function scott(values, min, max) {\n    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function max(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;\n    }\n\n    return a;\n  }\n\n  function mean(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1,\n        j = n;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;\n    }\n\n    if (j) return s / j;\n  }\n\n  function median(array, f) {\n    var numbers = [],\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);\n    }\n\n    return threshold(numbers.sort(ascending), 0.5);\n  }\n\n  function merge(arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n\n    return merged;\n  }\n\n  function min(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;\n    }\n\n    return a;\n  }\n\n  function pairs(array) {\n    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [p, p = array[++i]];\n    return pairs;\n  }\n\n  function permute(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  }\n\n  function scan(array, compare) {\n    if (!(n = array.length)) return;\n    var i = 0,\n        n,\n        j = 0,\n        xi,\n        xj = array[j];\n\n    if (!compare) compare = ascending;\n\n    while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;\n\n    if (compare(xj, xj) === 0) return j;\n  }\n\n  function shuffle(array, i0, i1) {\n    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n\n    return array;\n  }\n\n  function sum(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.\n    }\n\n    else {\n      while (++i < n) if (a = +f(array[i], i, array)) s += a;\n    }\n\n    return s;\n  }\n\n  function transpose(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  }\n\n  function length(d) {\n    return d.length;\n  }\n\n  function zip() {\n    return transpose(arguments);\n  }\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map$1.prototype = {\n    constructor: Map,\n    has: function(key) {\n      return (prefix + key) in this;\n    },\n    get: function(key) {\n      return this[prefix + key];\n    },\n    set: function(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function() {\n      for (var property in this) if (property[0] === prefix) delete this[property];\n    },\n    keys: function() {\n      var keys = [];\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n      return keys;\n    },\n    values: function() {\n      var values = [];\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n      return entries;\n    },\n    size: function() {\n      var size = 0;\n      for (var property in this) if (property[0] === prefix) ++size;\n      return size;\n    },\n    empty: function() {\n      for (var property in this) if (property[0] === prefix) return false;\n      return true;\n    },\n    each: function(f) {\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  };\n\n  function map$1(object, f) {\n    var map = new Map;\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n\n      if (f == null) while (++i < n) map.set(i, object[i]);\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\n    }\n\n    // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n\n    return map;\n  }\n\n  function nest() {\n    var keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) return rollup != null\n          ? rollup(array) : (sortValues != null\n          ? array.sort(sortValues)\n          : array);\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map$1(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function(values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array, sortKey = sortKeys[depth - 1];\n      if (rollup != null && depth >= keys.length) array = map.entries();\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n    }\n\n    return nest = {\n      object: function(array) { return apply(array, 0, createObject, setObject); },\n      map: function(array) { return apply(array, 0, createMap, setMap); },\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n      key: function(d) { keys.push(d); return nest; },\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n      sortValues: function(order) { sortValues = order; return nest; },\n      rollup: function(f) { rollup = f; return nest; }\n    };\n  }\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map$1();\n  }\n\n  function setMap(map, key, value) {\n    map.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map$1.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set;\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n      var i = -1, n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);\n      else while (++i < n) set.add(f(object[i], i, object));\n    }\n\n    return set;\n  }\n\n  function keys(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  }\n\n  function values(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  }\n\n  function entries(map) {\n    var entries = [];\n    for (var key in map) entries.push({key: key, value: map[key]});\n    return entries;\n  }\n\n  function uniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return Math.random() * max + min;\n    };\n  }\n\n  function normal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  function logNormal() {\n    var randomNormal = normal.apply(this, arguments);\n    return function() {\n      return Math.exp(randomNormal());\n    };\n  }\n\n  function irwinHall(n) {\n    return function() {\n      for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();\n      return sum;\n    };\n  }\n\n  function bates(n) {\n    var randomIrwinHall = irwinHall(n);\n    return function() {\n      return randomIrwinHall() / n;\n    };\n  }\n\n  function exponential(lambda) {\n    return function() {\n      return -Math.log(1 - Math.random()) / lambda;\n    };\n  }\n\n  function linear(t) {\n    return +t;\n  }\n\n  function quadIn(t) {\n    return t * t;\n  }\n\n  function quadOut(t) {\n    return t * (2 - t);\n  }\n\n  function quadInOut(t) {\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n  }\n\n  function cubicIn(t) {\n    return t * t * t;\n  }\n\n  function cubicOut(t) {\n    return --t * t * t + 1;\n  }\n\n  function easeCubicInOut(t) {\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n  }\n\n  var exponent = 3;\n\n  var polyIn = (function custom(e) {\n    e = +e;\n\n    function polyIn(t) {\n      return Math.pow(t, e);\n    }\n\n    polyIn.exponent = custom;\n\n    return polyIn;\n  })(exponent);\n\n  var polyOut = (function custom(e) {\n    e = +e;\n\n    function polyOut(t) {\n      return 1 - Math.pow(1 - t, e);\n    }\n\n    polyOut.exponent = custom;\n\n    return polyOut;\n  })(exponent);\n\n  var polyInOut = (function custom(e) {\n    e = +e;\n\n    function polyInOut(t) {\n      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n    }\n\n    polyInOut.exponent = custom;\n\n    return polyInOut;\n  })(exponent);\n\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  function sinIn(t) {\n    return 1 - Math.cos(t * halfPi);\n  }\n\n  function sinOut(t) {\n    return Math.sin(t * halfPi);\n  }\n\n  function sinInOut(t) {\n    return (1 - Math.cos(pi * t)) / 2;\n  }\n\n  function expIn(t) {\n    return Math.pow(2, 10 * t - 10);\n  }\n\n  function expOut(t) {\n    return 1 - Math.pow(2, -10 * t);\n  }\n\n  function expInOut(t) {\n    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\n  }\n\n  function circleIn(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n\n  function circleOut(t) {\n    return Math.sqrt(1 - --t * t);\n  }\n\n  function circleInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n  }\n\n  var b1 = 4 / 11;\n  var b2 = 6 / 11;\n  var b3 = 8 / 11;\n  var b4 = 3 / 4;\n  var b5 = 9 / 11;\n  var b6 = 10 / 11;\n  var b7 = 15 / 16;\n  var b8 = 21 / 22;\n  var b9 = 63 / 64;\n  var b0 = 1 / b1 / b1;\n  function bounceIn(t) {\n    return 1 - bounceOut(1 - t);\n  }\n\n  function bounceOut(t) {\n    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n  }\n\n  function bounceInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n  }\n\n  var overshoot = 1.70158;\n\n  var backIn = (function custom(s) {\n    s = +s;\n\n    function backIn(t) {\n      return t * t * ((s + 1) * t - s);\n    }\n\n    backIn.overshoot = custom;\n\n    return backIn;\n  })(overshoot);\n\n  var backOut = (function custom(s) {\n    s = +s;\n\n    function backOut(t) {\n      return --t * t * ((s + 1) * t + s) + 1;\n    }\n\n    backOut.overshoot = custom;\n\n    return backOut;\n  })(overshoot);\n\n  var backInOut = (function custom(s) {\n    s = +s;\n\n    function backInOut(t) {\n      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n    }\n\n    backInOut.overshoot = custom;\n\n    return backInOut;\n  })(overshoot);\n\n  var tau = 2 * Math.PI;\n  var amplitude = 1;\n  var period = 0.3;\n  var elasticIn = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticIn(t) {\n      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\n    }\n\n    elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n    elasticIn.period = function(p) { return custom(a, p); };\n\n    return elasticIn;\n  })(amplitude, period);\n\n  var elasticOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticOut(t) {\n      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\n    }\n\n    elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticOut.period = function(p) { return custom(a, p); };\n\n    return elasticOut;\n  })(amplitude, period);\n\n  var elasticInOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticInOut(t) {\n      return ((t = t * 2 - 1) < 0\n          ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\n          : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\n    }\n\n    elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticInOut.period = function(p) { return custom(a, p); };\n\n    return elasticInOut;\n  })(amplitude, period);\n\n  function area(polygon) {\n    var i = -1,\n        n = polygon.length,\n        a,\n        b = polygon[n - 1],\n        area = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n\n    return area / 2;\n  }\n\n  function centroid(polygon) {\n    var i = -1,\n        n = polygon.length,\n        x = 0,\n        y = 0,\n        a,\n        b = polygon[n - 1],\n        c,\n        k = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      k += c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n\n    return k *= 3, [x / k, y / k];\n  }\n\n  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n  // right, +y is up). Returns a positive value if ABC is counter-clockwise,\n  // negative if clockwise, and zero if the points are collinear.\n  function cross(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n\n  function lexicographicOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n\n  // Computes the upper convex hull per the monotone chain algorithm.\n  // Assumes points.length >= 3, is sorted by x, unique in y.\n  // Returns an array of indices into points in left-to-right order.\n  function computeUpperHullIndexes(points) {\n    var n = points.length,\n        indexes = [0, 1],\n        size = 2;\n\n    for (var i = 2; i < n; ++i) {\n      while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n      indexes[size++] = i;\n    }\n\n    return indexes.slice(0, size); // remove popped points\n  }\n\n  function hull(points) {\n    if ((n = points.length) < 3) return null;\n\n    var i,\n        n,\n        sortedPoints = new Array(n),\n        flippedPoints = new Array(n);\n\n    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n    sortedPoints.sort(lexicographicOrder);\n    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n    var upperIndexes = computeUpperHullIndexes(sortedPoints),\n        lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n    // Construct the hull polygon, removing possible duplicate endpoints.\n    var skipLeft = lowerIndexes[0] === upperIndexes[0],\n        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n        hull = [];\n\n    // Add upper hull in right-to-l order.\n    // Then add lower hull in left-to-right order.\n    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n    return hull;\n  }\n\n  function contains(polygon, point) {\n    var n = polygon.length,\n        p = polygon[n - 1],\n        x = point[0], y = point[1],\n        x0 = p[0], y0 = p[1],\n        x1, y1,\n        inside = false;\n\n    for (var i = 0; i < n; ++i) {\n      p = polygon[i], x1 = p[0], y1 = p[1];\n      if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n      x0 = x1, y0 = y1;\n    }\n\n    return inside;\n  }\n\n  function length$1(polygon) {\n    var i = -1,\n        n = polygon.length,\n        b = polygon[n - 1],\n        xa,\n        ya,\n        xb = b[0],\n        yb = b[1],\n        perimeter = 0;\n\n    while (++i < n) {\n      xa = xb;\n      ya = yb;\n      b = polygon[i];\n      xb = b[0];\n      yb = b[1];\n      xa -= xb;\n      ya -= yb;\n      perimeter += Math.sqrt(xa * xa + ya * ya);\n    }\n\n    return perimeter;\n  }\n\nvar   pi$1 = Math.PI;\nvar   tau$1 = 2 * pi$1;\n  var epsilon = 1e-6;\n  var tauEpsilon = tau$1 - epsilon;\n  function Path() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = [];\n  }\n\n  function path() {\n    return new Path;\n  }\n\n  Path.prototype = path.prototype = {\n    constructor: Path,\n    moveTo: function(x, y) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y);\n    },\n    closePath: function() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._.push(\"Z\");\n      }\n    },\n    lineTo: function(x, y) {\n      this._.push(\"L\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    quadraticCurveTo: function(x1, y1, x, y) {\n      this._.push(\"Q\", +x1, \",\", +y1, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      this._.push(\"C\", +x1, \",\", +y1, \",\", +x2, \",\", +y2, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    arcTo: function(x1, y1, x2, y2, r) {\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n      var x0 = this._x1,\n          y0 = this._y1,\n          x21 = x2 - x1,\n          y21 = y2 - y1,\n          x01 = x0 - x1,\n          y01 = y0 - y1,\n          l01_2 = x01 * x01 + y01 * y01;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x1,y1).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n      else if (!(l01_2 > epsilon));\n\n      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n      // Equivalently, is (x1,y1) coincident with (x2,y2)?\n      // Or, is the radius zero? Line to (x1,y1).\n      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n        this._.push(\n          \"L\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        var x20 = x2 - x0,\n            y20 = y2 - y0,\n            l21_2 = x21 * x21 + y21 * y21,\n            l20_2 = x20 * x20 + y20 * y20,\n            l21 = Math.sqrt(l21_2),\n            l01 = Math.sqrt(l01_2),\n            l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n            t01 = l / l01,\n            t21 = l / l21;\n\n        // If the start tangent is not coincident with (x0,y0), line to.\n        if (Math.abs(t01 - 1) > epsilon) {\n          this._.push(\n            \"L\", x1 + t01 * x01, \",\", y1 + t01 * y01\n          );\n        }\n\n        this._.push(\n          \"A\", r, \",\", r, \",0,0,\", +(y01 * x20 > x01 * y20), \",\", this._x1 = x1 + t21 * x21, \",\", this._y1 = y1 + t21 * y21\n        );\n      }\n    },\n    arc: function(x, y, r, a0, a1, ccw) {\n      x = +x, y = +y, r = +r;\n      var dx = r * Math.cos(a0),\n          dy = r * Math.sin(a0),\n          x0 = x + dx,\n          y0 = y + dy,\n          cw = 1 ^ ccw,\n          da = ccw ? a0 - a1 : a1 - a0;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x0,y0).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", x0, \",\", y0\n        );\n      }\n\n      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n        this._.push(\n          \"L\", x0, \",\", y0\n        );\n      }\n\n      // Is this arc empty? We’re done.\n      if (!r) return;\n\n      // Is this a complete circle? Draw two arcs to complete the circle.\n      if (da > tauEpsilon) {\n        this._.push(\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", x - dx, \",\", y - dy,\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", this._x1 = x0, \",\", this._y1 = y0\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        if (da < 0) da = da % tau$1 + tau$1;\n        this._.push(\n          \"A\", r, \",\", r, \",0,\", +(da >= pi$1), \",\", cw, \",\", this._x1 = x + r * Math.cos(a1), \",\", this._y1 = y + r * Math.sin(a1)\n        );\n      }\n    },\n    rect: function(x, y, w, h) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y, \"h\", +w, \"v\", +h, \"h\", -w, \"Z\");\n    },\n    toString: function() {\n      return this._.join(\"\");\n    }\n  };\n\n  function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  }\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {data: d},\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d, i, n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, inherit the existing extent.\n    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n        case 0: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n          break;\n        }\n        case 1: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n          break;\n        }\n        case 2: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n          break;\n        }\n        case 3: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n          break;\n        }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    }\n\n    // If the quadtree covers the point already, just return.\n    else return this;\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data() {\n    var data = [];\n    this.visit(function(node) {\n      if (!node.length) do data.push(node.data); while (node = node.next)\n    });\n    return data;\n  }\n\n  function tree_extent(_) {\n    return arguments.length\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node)\n          || (x1 = q.x0) > x3\n          || (y1 = q.y0) > y3\n          || (x2 = q.x1) < x0\n          || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(\n          new Quad(node[3], xm, ym, x2, y2),\n          new Quad(node[2], x1, ym, xm, y2),\n          new Quad(node[1], xm, y1, x2, ym),\n          new Quad(node[0], x1, y1, xm, ym)\n        );\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | (x >= xm)) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n        && !node.length) {\n      if (retainer) retainer[j] = node;\n      else this._root = node;\n    }\n\n    return this;\n  }\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n    return this;\n  }\n\n  function tree_root() {\n    return this._root;\n  }\n\n  function tree_size() {\n    var size = 0;\n    this.visit(function(node) {\n      if (!node.length) do ++size; while (node = node.next)\n    });\n    return size;\n  }\n\n  function tree_visit(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  }\n\n  function tree_visitAfter(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {data: leaf.data}, next = copy;\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function() {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{source: node, target: copy._root = new Array(4)}];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n          else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  var slice$1 = [].slice;\n\n  var noabort = {};\n\n  function Queue(size) {\n    if (!(size >= 1)) throw new Error;\n    this._size = size;\n    this._call =\n    this._error = null;\n    this._tasks = [];\n    this._data = [];\n    this._waiting =\n    this._active =\n    this._ended =\n    this._start = 0; // inside a synchronous task callback?\n  }\n\n  Queue.prototype = queue.prototype = {\n    constructor: Queue,\n    defer: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      if (this._error != null) return this;\n      var t = slice$1.call(arguments, 1);\n      t.push(callback);\n      ++this._waiting, this._tasks.push(t);\n      poke(this);\n      return this;\n    },\n    abort: function() {\n      if (this._error == null) abort(this, new Error(\"abort\"));\n      return this;\n    },\n    await: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = function(error, results) { callback.apply(null, [error].concat(results)); };\n      maybeNotify(this);\n      return this;\n    },\n    awaitAll: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = callback;\n      maybeNotify(this);\n      return this;\n    }\n  };\n\n  function poke(q) {\n    if (!q._start) try { start(q); } // let the current task complete\n    catch (e) { if (q._tasks[q._ended + q._active - 1]) abort(q, e); } // task errored synchronously\n  }\n\n  function start(q) {\n    while (q._start = q._waiting && q._active < q._size) {\n      var i = q._ended + q._active,\n          t = q._tasks[i],\n          j = t.length - 1,\n          c = t[j];\n      t[j] = end(q, i);\n      --q._waiting, ++q._active;\n      t = c.apply(null, t);\n      if (!q._tasks[i]) continue; // task finished synchronously\n      q._tasks[i] = t || noabort;\n    }\n  }\n\n  function end(q, i) {\n    return function(e, r) {\n      if (!q._tasks[i]) return; // ignore multiple callbacks\n      --q._active, ++q._ended;\n      q._tasks[i] = null;\n      if (q._error != null) return; // ignore secondary errors\n      if (e != null) {\n        abort(q, e);\n      } else {\n        q._data[i] = r;\n        if (q._waiting) poke(q);\n        else maybeNotify(q);\n      }\n    };\n  }\n\n  function abort(q, e) {\n    var i = q._tasks.length, t;\n    q._error = e; // ignore active callbacks\n    q._data = undefined; // allow gc\n    q._waiting = NaN; // prevent starting\n\n    while (--i >= 0) {\n      if (t = q._tasks[i]) {\n        q._tasks[i] = null;\n        if (t.abort) try { t.abort(); }\n        catch (e) { /* ignore */ }\n      }\n    }\n\n    q._active = NaN; // allow notification\n    maybeNotify(q);\n  }\n\n  function maybeNotify(q) {\n    if (!q._active && q._call) q._call(q._error, q._data);\n  }\n\n  function queue(concurrency) {\n    return new Queue(arguments.length ? +concurrency : Infinity);\n  }\n\n  function constant$1(x) {\n    return function constant() {\n      return x;\n    };\n  }\n\n  var epsilon$1 = 1e-12;\n  var pi$2 = Math.PI;\n  var halfPi$1 = pi$2 / 2;\n  var tau$2 = 2 * pi$2;\n\n  function arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n\n  function arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n\n  function arcStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function arcEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function arcPadAngle(d) {\n    return d && d.padAngle; // Note: optional!\n  }\n\n  function asin(x) {\n    return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);\n  }\n\n  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var x10 = x1 - x0, y10 = y1 - y0,\n        x32 = x3 - x2, y32 = y3 - y2,\n        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n    return [x0 + t * x10, y0 + t * y10];\n  }\n\n  // Compute perpendicular offset line of length rc.\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n    var x01 = x0 - x1,\n        y01 = y0 - y1,\n        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x11 = x0 + ox,\n        y11 = y0 + oy,\n        x10 = x1 + ox,\n        y10 = y1 + oy,\n        x00 = (x11 + x10) / 2,\n        y00 = (y11 + y10) / 2,\n        dx = x10 - x11,\n        dy = y10 - y11,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x11 * y10 - x10 * y11,\n        d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x00,\n        dy0 = cy0 - y00,\n        dx1 = cx1 - x00,\n        dy1 = cy1 - y00;\n\n    // Pick the closer of the two intersection points.\n    // TODO Is there a faster way to determine which intersection to use?\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n    return {\n      cx: cx0,\n      cy: cy0,\n      x01: -ox,\n      y01: -oy,\n      x11: cx0 * (r1 / r - 1),\n      y11: cy0 * (r1 / r - 1)\n    };\n  }\n\n  function arc() {\n    var innerRadius = arcInnerRadius,\n        outerRadius = arcOuterRadius,\n        cornerRadius = constant$1(0),\n        padRadius = null,\n        startAngle = arcStartAngle,\n        endAngle = arcEndAngle,\n        padAngle = arcPadAngle,\n        context = null;\n\n    function arc() {\n      var buffer,\n          r,\n          r0 = +innerRadius.apply(this, arguments),\n          r1 = +outerRadius.apply(this, arguments),\n          a0 = startAngle.apply(this, arguments) - halfPi$1,\n          a1 = endAngle.apply(this, arguments) - halfPi$1,\n          da = Math.abs(a1 - a0),\n          cw = a1 > a0;\n\n      if (!context) context = buffer = path();\n\n      // Ensure that the outer radius is always larger than the inner radius.\n      if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n      // Is it a point?\n      if (!(r1 > epsilon$1)) context.moveTo(0, 0);\n\n      // Or is it a circle or annulus?\n      else if (da > tau$2 - epsilon$1) {\n        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));\n        context.arc(0, 0, r1, a0, a1, !cw);\n        if (r0 > epsilon$1) {\n          context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));\n          context.arc(0, 0, r0, a1, a0, cw);\n        }\n      }\n\n      // Or is it a circular or annular sector?\n      else {\n        var a01 = a0,\n            a11 = a1,\n            a00 = a0,\n            a10 = a1,\n            da0 = da,\n            da1 = da,\n            ap = padAngle.apply(this, arguments) / 2,\n            rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),\n            rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n            rc0 = rc,\n            rc1 = rc,\n            t0,\n            t1;\n\n        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n        if (rp > epsilon$1) {\n          var p0 = asin(rp / r0 * Math.sin(ap)),\n              p1 = asin(rp / r1 * Math.sin(ap));\n          if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n          else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n          if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n          else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n        }\n\n        var x01 = r1 * Math.cos(a01),\n            y01 = r1 * Math.sin(a01),\n            x10 = r0 * Math.cos(a10),\n            y10 = r0 * Math.sin(a10);\n\n        // Apply rounded corners?\n        if (rc > epsilon$1) {\n          var x11 = r1 * Math.cos(a11),\n              y11 = r1 * Math.sin(a11),\n              x00 = r0 * Math.cos(a00),\n              y00 = r0 * Math.sin(a00);\n\n          // Restrict the corner radius according to the sector angle.\n          if (da < pi$2) {\n            var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n                ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),\n                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n          }\n        }\n\n        // Is the sector collapsed to a line?\n        if (!(da1 > epsilon$1)) context.moveTo(x01, y01);\n\n        // Does the sector’s outer ring have rounded corners?\n        else if (rc1 > epsilon$1) {\n          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n            context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the outer ring just a circular arc?\n        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n        // Is there no inner ring, and it’s a circular sector?\n        // Or perhaps it’s an annular sector collapsed due to padding?\n        if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);\n\n        // Does the sector’s inner ring (or point) have rounded corners?\n        else if (rc0 > epsilon$1) {\n          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n            context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the inner ring just a circular arc?\n        else context.arc(0, 0, r0, a10, a00, cw);\n      }\n\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;\n      return [Math.cos(a) * r, Math.sin(a) * r];\n    };\n\n    arc.innerRadius = function(_) {\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : innerRadius;\n    };\n\n    arc.outerRadius = function(_) {\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : outerRadius;\n    };\n\n    arc.cornerRadius = function(_) {\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : cornerRadius;\n    };\n\n    arc.padRadius = function(_) {\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), arc) : padRadius;\n    };\n\n    arc.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : startAngle;\n    };\n\n    arc.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : endAngle;\n    };\n\n    arc.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : padAngle;\n    };\n\n    arc.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n    };\n\n    return arc;\n  }\n\n  function Linear(context) {\n    this._context = context;\n  }\n\n  Linear.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: this._context.lineTo(x, y); break;\n      }\n    }\n  };\n\n  function curveLinear(context) {\n    return new Linear(context);\n  }\n\n  function x(p) {\n    return p[0];\n  }\n\n  function y(p) {\n    return p[1];\n  }\n\n  function line() {\n    var x$$ = x,\n        y$$ = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function line(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) output.lineStart();\n          else output.lineEnd();\n        }\n        if (defined0) output.point(+x$$(d, i, data), +y$$(d, i, data));\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    line.x = function(_) {\n      return arguments.length ? (x$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : x$$;\n    };\n\n    line.y = function(_) {\n      return arguments.length ? (y$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : y$$;\n    };\n\n    line.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), line) : defined;\n    };\n\n    line.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n    };\n\n    line.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n    };\n\n    return line;\n  }\n\n  function area$1() {\n    var x0 = x,\n        x1 = null,\n        y0 = constant$1(0),\n        y1 = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function area(data) {\n      var i,\n          j,\n          k,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer,\n          x0z = new Array(n),\n          y0z = new Array(n);\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) {\n            j = i;\n            output.areaStart();\n            output.lineStart();\n          } else {\n            output.lineEnd();\n            output.lineStart();\n            for (k = i - 1; k >= j; --k) {\n              output.point(x0z[k], y0z[k]);\n            }\n            output.lineEnd();\n            output.areaEnd();\n          }\n        }\n        if (defined0) {\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n        }\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    function arealine() {\n      return line().defined(defined).curve(curve).context(context);\n    }\n\n    area.x = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), x1 = null, area) : x0;\n    };\n\n    area.x0 = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : x0;\n    };\n\n    area.x1 = function(_) {\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : x1;\n    };\n\n    area.y = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), y1 = null, area) : y0;\n    };\n\n    area.y0 = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : y0;\n    };\n\n    area.y1 = function(_) {\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : y1;\n    };\n\n    area.lineX0 =\n    area.lineY0 = function() {\n      return arealine().x(x0).y(y0);\n    };\n\n    area.lineY1 = function() {\n      return arealine().x(x0).y(y1);\n    };\n\n    area.lineX1 = function() {\n      return arealine().x(x1).y(y0);\n    };\n\n    area.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), area) : defined;\n    };\n\n    area.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n    };\n\n    area.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n    };\n\n    return area;\n  }\n\n  function descending$1(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function identity$1(d) {\n    return d;\n  }\n\n  function pie() {\n    var value = identity$1,\n        sortValues = descending$1,\n        sort = null,\n        startAngle = constant$1(0),\n        endAngle = constant$1(tau$2),\n        padAngle = constant$1(0);\n\n    function pie(data) {\n      var i,\n          n = data.length,\n          j,\n          k,\n          sum = 0,\n          index = new Array(n),\n          arcs = new Array(n),\n          a0 = +startAngle.apply(this, arguments),\n          da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)),\n          a1,\n          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n          pa = p * (da < 0 ? -1 : 1),\n          v;\n\n      for (i = 0; i < n; ++i) {\n        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n          sum += v;\n        }\n      }\n\n      // Optionally sort the arcs by previously-computed values or by data.\n      if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n      else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n      // Compute the arcs! They are stored in the original data's order.\n      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n          data: data[j],\n          index: i,\n          value: v,\n          startAngle: a0,\n          endAngle: a1,\n          padAngle: p\n        };\n      }\n\n      return arcs;\n    }\n\n    pie.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), pie) : value;\n    };\n\n    pie.sortValues = function(_) {\n      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n    };\n\n    pie.sort = function(_) {\n      return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n    };\n\n    pie.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : startAngle;\n    };\n\n    pie.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : endAngle;\n    };\n\n    pie.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : padAngle;\n    };\n\n    return pie;\n  }\n\n  var curveRadialLinear = curveRadial(curveLinear);\n\n  function Radial(curve) {\n    this._curve = curve;\n  }\n\n  Radial.prototype = {\n    areaStart: function() {\n      this._curve.areaStart();\n    },\n    areaEnd: function() {\n      this._curve.areaEnd();\n    },\n    lineStart: function() {\n      this._curve.lineStart();\n    },\n    lineEnd: function() {\n      this._curve.lineEnd();\n    },\n    point: function(a, r) {\n      this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n    }\n  };\n\n  function curveRadial(curve) {\n\n    function radial(context) {\n      return new Radial(curve(context));\n    }\n\n    radial._curve = curve;\n\n    return radial;\n  }\n\n  function radialLine(l) {\n    var c = l.curve;\n\n    l.angle = l.x, delete l.x;\n    l.radius = l.y, delete l.y;\n\n    l.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return l;\n  }\n\n  function radialLine$1() {\n    return radialLine(line().curve(curveRadialLinear));\n  }\n\n  function radialArea() {\n    var a = area$1().curve(curveRadialLinear),\n        c = a.curve,\n        x0 = a.lineX0,\n        x1 = a.lineX1,\n        y0 = a.lineY0,\n        y1 = a.lineY1;\n\n    a.angle = a.x, delete a.x;\n    a.startAngle = a.x0, delete a.x0;\n    a.endAngle = a.x1, delete a.x1;\n    a.radius = a.y, delete a.y;\n    a.innerRadius = a.y0, delete a.y0;\n    a.outerRadius = a.y1, delete a.y1;\n    a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;\n    a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;\n    a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;\n    a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;\n\n    a.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return a;\n  }\n\n  var circle = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / pi$2);\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau$2);\n    }\n  };\n\n  var cross$1 = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / 5) / 2;\n      context.moveTo(-3 * r, -r);\n      context.lineTo(-r, -r);\n      context.lineTo(-r, -3 * r);\n      context.lineTo(r, -3 * r);\n      context.lineTo(r, -r);\n      context.lineTo(3 * r, -r);\n      context.lineTo(3 * r, r);\n      context.lineTo(r, r);\n      context.lineTo(r, 3 * r);\n      context.lineTo(-r, 3 * r);\n      context.lineTo(-r, r);\n      context.lineTo(-3 * r, r);\n      context.closePath();\n    }\n  };\n\n  var tan30 = Math.sqrt(1 / 3);\n  var tan30_2 = tan30 * 2;\n  var diamond = {\n    draw: function(context, size) {\n      var y = Math.sqrt(size / tan30_2),\n          x = y * tan30;\n      context.moveTo(0, -y);\n      context.lineTo(x, 0);\n      context.lineTo(0, y);\n      context.lineTo(-x, 0);\n      context.closePath();\n    }\n  };\n\n  var ka = 0.89081309152928522810;\n  var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);\n  var kx = Math.sin(tau$2 / 10) * kr;\n  var ky = -Math.cos(tau$2 / 10) * kr;\n  var star = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size * ka),\n          x = kx * r,\n          y = ky * r;\n      context.moveTo(0, -r);\n      context.lineTo(x, y);\n      for (var i = 1; i < 5; ++i) {\n        var a = tau$2 * i / 5,\n            c = Math.cos(a),\n            s = Math.sin(a);\n        context.lineTo(s * r, -c * r);\n        context.lineTo(c * x - s * y, s * x + c * y);\n      }\n      context.closePath();\n    }\n  };\n\n  var square = {\n    draw: function(context, size) {\n      var w = Math.sqrt(size),\n          x = -w / 2;\n      context.rect(x, x, w, w);\n    }\n  };\n\n  var sqrt3 = Math.sqrt(3);\n\n  var triangle = {\n    draw: function(context, size) {\n      var y = -Math.sqrt(size / (sqrt3 * 3));\n      context.moveTo(0, y * 2);\n      context.lineTo(-sqrt3 * y, -y);\n      context.lineTo(sqrt3 * y, -y);\n      context.closePath();\n    }\n  };\n\n  var c = -0.5;\n  var s = Math.sqrt(3) / 2;\n  var k = 1 / Math.sqrt(12);\n  var a = (k / 2 + 1) * 3;\n  var wye = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / a),\n          x0 = r / 2,\n          y0 = r * k,\n          x1 = x0,\n          y1 = r * k + r,\n          x2 = -x1,\n          y2 = y1;\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n      context.lineTo(x2, y2);\n      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n      context.closePath();\n    }\n  };\n\n  var symbols = [\n    circle,\n    cross$1,\n    diamond,\n    square,\n    star,\n    triangle,\n    wye\n  ];\n\n  function symbol() {\n    var type = constant$1(circle),\n        size = constant$1(64),\n        context = null;\n\n    function symbol() {\n      var buffer;\n      if (!context) context = buffer = path();\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    symbol.type = function(_) {\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$1(_), symbol) : type;\n    };\n\n    symbol.size = function(_) {\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$1(+_), symbol) : size;\n    };\n\n    symbol.context = function(_) {\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n    };\n\n    return symbol;\n  }\n\n  function noop() {}\n\n  function point(that, x, y) {\n    that._context.bezierCurveTo(\n      (2 * that._x0 + that._x1) / 3,\n      (2 * that._y0 + that._y1) / 3,\n      (that._x0 + 2 * that._x1) / 3,\n      (that._y0 + 2 * that._y1) / 3,\n      (that._x0 + 4 * that._x1 + x) / 6,\n      (that._y0 + 4 * that._y1 + y) / 6\n    );\n  }\n\n  function Basis(context) {\n    this._context = context;\n  }\n\n  Basis.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 3: point(this, this._x1, this._y1); // proceed\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basis(context) {\n    return new Basis(context);\n  }\n\n  function BasisClosed(context) {\n    this._context = context;\n  }\n\n  BasisClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x2, this._y2);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x2, this._y2);\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisClosed(context) {\n    return new BasisClosed(context);\n  }\n\n  function BasisOpen(context) {\n    this._context = context;\n  }\n\n  BasisOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n        case 3: this._point = 4; // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisOpen(context) {\n    return new BasisOpen(context);\n  }\n\n  function Bundle(context, beta) {\n    this._basis = new Basis(context);\n    this._beta = beta;\n  }\n\n  Bundle.prototype = {\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n      this._basis.lineStart();\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          j = x.length - 1;\n\n      if (j > 0) {\n        var x0 = x[0],\n            y0 = y[0],\n            dx = x[j] - x0,\n            dy = y[j] - y0,\n            i = -1,\n            t;\n\n        while (++i <= j) {\n          t = i / j;\n          this._basis.point(\n            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n          );\n        }\n      }\n\n      this._x = this._y = null;\n      this._basis.lineEnd();\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  var bundle = (function custom(beta) {\n\n    function bundle(context) {\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n    }\n\n    bundle.beta = function(beta) {\n      return custom(+beta);\n    };\n\n    return bundle;\n  })(0.85);\n\n  function point$1(that, x, y) {\n    that._context.bezierCurveTo(\n      that._x1 + that._k * (that._x2 - that._x0),\n      that._y1 + that._k * (that._y2 - that._y0),\n      that._x2 + that._k * (that._x1 - x),\n      that._y2 + that._k * (that._y1 - y),\n      that._x2,\n      that._y2\n    );\n  }\n\n  function Cardinal(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  Cardinal.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: point$1(this, this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n        case 2: this._point = 3; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinal = (function custom(tension) {\n\n    function cardinal(context) {\n      return new Cardinal(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalClosed(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalClosed = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalClosed(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalOpen(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalOpen = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalOpen(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function point$2(that, x, y) {\n    var x1 = that._x1,\n        y1 = that._y1,\n        x2 = that._x2,\n        y2 = that._y2;\n\n    if (that._l01_a > epsilon$1) {\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n    }\n\n    if (that._l23_a > epsilon$1) {\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n    }\n\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n  }\n\n  function CatmullRom(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRom.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: this.point(this, this._x2, this._y2); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRom = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomClosed(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomClosed = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomOpen(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomOpen = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function LinearClosed(context) {\n    this._context = context;\n  }\n\n  LinearClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._point) this._context.closePath();\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      if (this._point) this._context.lineTo(x, y);\n      else this._point = 1, this._context.moveTo(x, y);\n    }\n  };\n\n  function linearClosed(context) {\n    return new LinearClosed(context);\n  }\n\n  function sign(x) {\n    return x < 0 ? -1 : 1;\n  }\n\n  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n  // NOV(II), P. 443, 1990.\n  function slope3(that, x2, y2) {\n    var h0 = that._x1 - that._x0,\n        h1 = x2 - that._x1,\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n  }\n\n  // Calculate a one-sided slope.\n  function slope2(that, t) {\n    var h = that._x1 - that._x0;\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n  }\n\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n  function point$3(that, t0, t1) {\n    var x0 = that._x0,\n        y0 = that._y0,\n        x1 = that._x1,\n        y1 = that._y1,\n        dx = (x1 - x0) / 3;\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n  }\n\n  function MonotoneX(context) {\n    this._context = context;\n  }\n\n  MonotoneX.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 =\n      this._t0 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n        case 3: point$3(this, this._t0, slope2(this, this._t0)); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      var t1 = NaN;\n\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n        default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  }\n\n  function MonotoneY(context) {\n    this._context = new ReflectContext(context);\n  }\n\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n    MonotoneX.prototype.point.call(this, y, x);\n  };\n\n  function ReflectContext(context) {\n    this._context = context;\n  }\n\n  ReflectContext.prototype = {\n    moveTo: function(x, y) { this._context.moveTo(y, x); },\n    closePath: function() { this._context.closePath(); },\n    lineTo: function(x, y) { this._context.lineTo(y, x); },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n  };\n\n  function monotoneX(context) {\n    return new MonotoneX(context);\n  }\n\n  function monotoneY(context) {\n    return new MonotoneY(context);\n  }\n\n  function Natural(context) {\n    this._context = context;\n  }\n\n  Natural.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          n = x.length;\n\n      if (n) {\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n        if (n === 2) {\n          this._context.lineTo(x[1], y[1]);\n        } else {\n          var px = controlPoints(x),\n              py = controlPoints(y);\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n          }\n        }\n      }\n\n      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n      this._x = this._y = null;\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n  function controlPoints(x) {\n    var i,\n        n = x.length - 1,\n        m,\n        a = new Array(n),\n        b = new Array(n),\n        r = new Array(n);\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n    a[n - 1] = r[n - 1] / b[n - 1];\n    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n    b[n - 1] = (x[n] + a[n - 1]) / 2;\n    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n    return [a, b];\n  }\n\n  function natural(context) {\n    return new Natural(context);\n  }\n\n  function Step(context, t) {\n    this._context = context;\n    this._t = t;\n  }\n\n  Step.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = this._y = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: {\n          if (this._t <= 0) {\n            this._context.lineTo(this._x, y);\n            this._context.lineTo(x, y);\n          } else {\n            var x1 = this._x * (1 - this._t) + x * this._t;\n            this._context.lineTo(x1, this._y);\n            this._context.lineTo(x1, y);\n          }\n          break;\n        }\n      }\n      this._x = x, this._y = y;\n    }\n  };\n\n  function step(context) {\n    return new Step(context, 0.5);\n  }\n\n  function stepBefore(context) {\n    return new Step(context, 0);\n  }\n\n  function stepAfter(context) {\n    return new Step(context, 1);\n  }\n\n  var slice$2 = Array.prototype.slice;\n\n  function none(series, order) {\n    if (!((n = series.length) > 1)) return;\n    for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n      s0 = s1, s1 = series[order[i]];\n      for (var j = 0; j < m; ++j) {\n        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n      }\n    }\n  }\n\n  function none$1(series) {\n    var n = series.length, o = new Array(n);\n    while (--n >= 0) o[n] = n;\n    return o;\n  }\n\n  function stackValue(d, key) {\n    return d[key];\n  }\n\n  function stack() {\n    var keys = constant$1([]),\n        order = none$1,\n        offset = none,\n        value = stackValue;\n\n    function stack(data) {\n      var kz = keys.apply(this, arguments),\n          i,\n          m = data.length,\n          n = kz.length,\n          sz = new Array(n),\n          oz;\n\n      for (i = 0; i < n; ++i) {\n        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n          si[j] = sij = [0, +value(data[j], ki, j, data)];\n          sij.data = data[j];\n        }\n        si.key = ki;\n      }\n\n      for (i = 0, oz = order(sz); i < n; ++i) {\n        sz[oz[i]].index = i;\n      }\n\n      offset(sz, oz);\n      return sz;\n    }\n\n    stack.keys = function(_) {\n      return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : keys;\n    };\n\n    stack.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), stack) : value;\n    };\n\n    stack.order = function(_) {\n      return arguments.length ? (order = _ == null ? none$1 : typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : order;\n    };\n\n    stack.offset = function(_) {\n      return arguments.length ? (offset = _ == null ? none : _, stack) : offset;\n    };\n\n    return stack;\n  }\n\n  function expand(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\n      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\n    }\n    none(series, order);\n  }\n\n  function silhouette(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\n      s0[j][1] += s0[j][0] = -y / 2;\n    }\n    none(series, order);\n  }\n\n  function wiggle(series, order) {\n    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n        var si = series[order[i]],\n            sij0 = si[j][1] || 0,\n            sij1 = si[j - 1][1] || 0,\n            s3 = (sij0 - sij1) / 2;\n        for (var k = 0; k < i; ++k) {\n          var sk = series[order[k]],\n              skj0 = sk[j][1] || 0,\n              skj1 = sk[j - 1][1] || 0;\n          s3 += skj0 - skj1;\n        }\n        s1 += sij0, s2 += s3 * sij0;\n      }\n      s0[j - 1][1] += s0[j - 1][0] = y;\n      if (s1) y -= s2 / s1;\n    }\n    s0[j - 1][1] += s0[j - 1][0] = y;\n    none(series, order);\n  }\n\n  function ascending$1(series) {\n    var sums = series.map(sum$1);\n    return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });\n  }\n\n  function sum$1(series) {\n    var s = 0, i = -1, n = series.length, v;\n    while (++i < n) if (v = +series[i][1]) s += v;\n    return s;\n  }\n\n  function descending$2(series) {\n    return ascending$1(series).reverse();\n  }\n\n  function insideOut(series) {\n    var n = series.length,\n        i,\n        j,\n        sums = series.map(sum$1),\n        order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),\n        top = 0,\n        bottom = 0,\n        tops = [],\n        bottoms = [];\n\n    for (i = 0; i < n; ++i) {\n      j = order[i];\n      if (top < bottom) {\n        top += sums[j];\n        tops.push(j);\n      } else {\n        bottom += sums[j];\n        bottoms.push(j);\n      }\n    }\n\n    return bottoms.reverse().concat(tops);\n  }\n\n  function reverse(series) {\n    return none$1(series).reverse();\n  }\n\n  function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) prototype[key] = definition[key];\n    return prototype;\n  }\n\n  function Color() {}\n\n  var darker = 0.7;\n  var brighter = 1 / darker;\n\n  var reHex3 = /^#([0-9a-f]{3})$/;\n  var reHex6 = /^#([0-9a-f]{6})$/;\n  var reRgbInteger = /^rgb\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*\\)$/;\n  var reRgbPercent = /^rgb\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reRgbaInteger = /^rgba\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reRgbaPercent = /^rgba\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reHslPercent = /^hsl\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reHslaPercent = /^hsla\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n\n  define(Color, color, {\n    displayable: function() {\n      return this.rgb().displayable();\n    },\n    toString: function() {\n      return this.rgb() + \"\";\n    }\n  });\n\n  function color(format) {\n    var m;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n        : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n        : named.hasOwnProperty(format) ? rgbn(named[format])\n        : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n        : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb;\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n\n  function colorRgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Rgb, colorRgb, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function() {\n      return this;\n    },\n    displayable: function() {\n      return (0 <= this.r && this.r <= 255)\n          && (0 <= this.g && this.g <= 255)\n          && (0 <= this.b && this.b <= 255)\n          && (0 <= this.opacity && this.opacity <= 1);\n    },\n    toString: function() {\n      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"rgb(\" : \"rgba(\")\n          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n          + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;\n    else if (l <= 0 || l >= 1) h = s = NaN;\n    else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl;\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;\n      else if (g === max) h = (b - r) / s + 2;\n      else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n  }\n\n  function colorHsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, colorHsl, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(\n        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n        hsl2rgb(h, m1, m2),\n        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n        this.opacity\n      );\n    },\n    displayable: function() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n          && (0 <= this.l && this.l <= 1)\n          && (0 <= this.opacity && this.opacity <= 1);\n    }\n  }));\n\n  /* From FvD 13.37, CSS Color Module Level 3 */\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60\n        : h < 180 ? m2\n        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n        : m1) * 255;\n  }\n\n  var deg2rad = Math.PI / 180;\n  var rad2deg = 180 / Math.PI;\n\n  var Kn = 18;\n  var Xn = 0.950470;\n  var Yn = 1;\n  var Zn = 1.088830;\n  var t0 = 4 / 29;\n  var t1 = 6 / 29;\n  var t2 = 3 * t1 * t1;\n  var t3 = t1 * t1 * t1;\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) {\n      var h = o.h * deg2rad;\n      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n    }\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var b = rgb2xyz(o.r),\n        a = rgb2xyz(o.g),\n        l = rgb2xyz(o.b),\n        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n\n  function lab(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Lab, lab, extend(Color, {\n    brighter: function(k) {\n      return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function(k) {\n      return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function() {\n      var y = (this.l + 16) / 116,\n          x = isNaN(this.a) ? y : y + this.a / 500,\n          z = isNaN(this.b) ? y : y - this.b / 200;\n      y = Yn * lab2xyz(y);\n      x = Xn * lab2xyz(x);\n      z = Zn * lab2xyz(z);\n      return new Rgb(\n        xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n        xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n        xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n        this.opacity\n      );\n    }\n  }));\n\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n  }\n\n  function lab2xyz(t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n  }\n\n  function xyz2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n\n  function rgb2xyz(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    var h = Math.atan2(o.b, o.a) * rad2deg;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n\n  function colorHcl(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hcl, colorHcl, extend(Color, {\n    brighter: function(k) {\n      return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function(k) {\n      return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function() {\n      return labConvert(this).rgb();\n    }\n  }));\n\n  var A = -0.14861;\n  var B = +1.78277;\n  var C = -0.29227;\n  var D = -0.90649;\n  var E = +1.97294;\n  var ED = E * D;\n  var EB = E * B;\n  var BC_DA = B * C - D * A;\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n        bl = b - l,\n        k = (E * (g - l) - C * bl) / D,\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n\n  function cubehelix(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Cubehelix, cubehelix, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n          l = +this.l,\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n          cosh = Math.cos(h),\n          sinh = Math.sin(h);\n      return new Rgb(\n        255 * (l + a * (A * cosh + B * sinh)),\n        255 * (l + a * (C * cosh + D * sinh)),\n        255 * (l + a * (E * cosh)),\n        this.opacity\n      );\n    }\n  }));\n\n  function basis$1(t1, v0, v1, v2, v3) {\n    var t2 = t1 * t1, t3 = t2 * t1;\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n        + (4 - 6 * t2 + 3 * t3) * v1\n        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n        + t3 * v3) / 6;\n  }\n\n  function basis$2(values) {\n    var n = values.length - 1;\n    return function(t) {\n      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n          v1 = values[i],\n          v2 = values[i + 1],\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function basisClosed$1(values) {\n    var n = values.length;\n    return function(t) {\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n          v0 = values[(i + n - 1) % n],\n          v1 = values[i % n],\n          v2 = values[(i + 1) % n],\n          v3 = values[(i + 2) % n];\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function constant$2(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function linear$1(a, d) {\n    return function(t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential$1(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function hue(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function(a, b) {\n      return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);\n    };\n  }\n\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  var interpolateRgb = (function rgbGamma(y) {\n    var color = gamma(y);\n\n    function rgb(start, end) {\n      var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n          g = color(start.g, end.g),\n          b = color(start.b, end.b),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb.gamma = rgbGamma;\n\n    return rgb;\n  })(1);\n\n  function rgbSpline(spline) {\n    return function(colors) {\n      var n = colors.length,\n          r = new Array(n),\n          g = new Array(n),\n          b = new Array(n),\n          i, color;\n      for (i = 0; i < n; ++i) {\n        color = colorRgb(colors[i]);\n        r[i] = color.r || 0;\n        g[i] = color.g || 0;\n        b[i] = color.b || 0;\n      }\n      r = spline(r);\n      g = spline(g);\n      b = spline(b);\n      color.opacity = 1;\n      return function(t) {\n        color.r = r(t);\n        color.g = g(t);\n        color.b = b(t);\n        return color + \"\";\n      };\n    };\n  }\n\n  var rgbBasis = rgbSpline(basis$2);\n  var rgbBasisClosed = rgbSpline(basisClosed$1);\n\n  function array$1(a, b) {\n    var nb = b ? b.length : 0,\n        na = a ? Math.min(nb, a.length) : 0,\n        x = new Array(nb),\n        c = new Array(nb),\n        i;\n\n    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);\n    for (; i < nb; ++i) c[i] = b[i];\n\n    return function(t) {\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n\n  function date(a, b) {\n    var d = new Date;\n    return a = +a, b -= a, function(t) {\n      return d.setTime(a + b * t), d;\n    };\n  }\n\n  function interpolateNumber(a, b) {\n    return a = +a, b -= a, function(t) {\n      return a + b * t;\n    };\n  }\n\n  function object(a, b) {\n    var i = {},\n        c = {},\n        k;\n\n    if (a === null || typeof a !== \"object\") a = {};\n    if (b === null || typeof b !== \"object\") b = {};\n\n    for (k in b) {\n      if (k in a) {\n        i[k] = interpolate(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;\n  var reB = new RegExp(reA.source, \"g\");\n  function zero(b) {\n    return function() {\n      return b;\n    };\n  }\n\n  function one(b) {\n    return function(t) {\n      return b(t) + \"\";\n    };\n  }\n\n  function interpolateString(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n        am, // current match in a\n        bm, // current match in b\n        bs, // string preceding current number in b, if any\n        i = -1, // index in s\n        s = [], // string constants and placeholders\n        q = []; // number interpolators\n\n    // Coerce inputs to strings.\n    a = a + \"\", b = b + \"\";\n\n    // Interpolate pairs of numbers in a & b.\n    while ((am = reA.exec(a))\n        && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) { // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else { // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({i: i, x: interpolateNumber(am, bm)});\n      }\n      bi = reB.lastIndex;\n    }\n\n    // Add remains of b.\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n    return s.length < 2 ? (q[0]\n        ? one(q[0].x)\n        : zero(b))\n        : (b = q.length, function(t) {\n            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n            return s.join(\"\");\n          });\n  }\n\n  function interpolate(a, b) {\n    var t = typeof b, c;\n    return b == null || t === \"boolean\" ? constant$2(b)\n        : (t === \"number\" ? interpolateNumber\n        : t === \"string\" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)\n        : b instanceof color ? interpolateRgb\n        : b instanceof Date ? date\n        : Array.isArray(b) ? array$1\n        : isNaN(b) ? object\n        : interpolateNumber)(a, b);\n  }\n\n  function interpolateRound(a, b) {\n    return a = +a, b -= a, function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n\n  var degrees = 180 / Math.PI;\n\n  var identity$2 = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  function decompose(a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees,\n      skewX: Math.atan(skewX) * degrees,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var cssNode;\n  var cssRoot;\n  var cssView;\n  var svgNode;\n  function parseCss(value) {\n    if (value === \"none\") return identity$2;\n    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n    cssNode.style.transform = value;\n    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n    cssRoot.removeChild(cssNode);\n    value = value.slice(7, -1).split(\",\");\n    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n  }\n\n  function parseSvg(value) {\n    if (value == null) return identity$2;\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value);\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;\n    value = value.matrix;\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n        q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function(a, b) {\n      var s = [], // string constants and placeholders\n          q = []; // number interpolators\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n      return function(t) {\n        var i = -1, n = q.length, o;\n        while (++i < n) s[(o = q[i]).i] = o.x(t);\n        return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransform$1 = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransform$2 = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  var rho = Math.SQRT2;\n  var rho2 = 2;\n  var rho4 = 4;\n  var epsilon2 = 1e-12;\n  function cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n\n  function sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n\n  function tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function interpolateZoom(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      }\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      }\n    }\n\n    i.duration = S * 1000;\n\n    return i;\n  }\n\n  function hsl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n          s = nogamma(start.s, end.s),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hsl$1 = hsl(hue);\n  var hslLong = hsl(nogamma);\n\n  function lab$1(start, end) {\n    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\n        a = nogamma(start.a, end.a),\n        b = nogamma(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.l = l(t);\n      start.a = a(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  function hcl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n          c = nogamma(start.c, end.c),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.c = c(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hcl$1 = hcl(hue);\n  var hclLong = hcl(nogamma);\n\n  function cubehelix$1(hue) {\n    return (function cubehelixGamma(y) {\n      y = +y;\n\n      function cubehelix$$(start, end) {\n        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\n            s = nogamma(start.s, end.s),\n            l = nogamma(start.l, end.l),\n            opacity = nogamma(start.opacity, end.opacity);\n        return function(t) {\n          start.h = h(t);\n          start.s = s(t);\n          start.l = l(Math.pow(t, y));\n          start.opacity = opacity(t);\n          return start + \"\";\n        };\n      }\n\n      cubehelix$$.gamma = cubehelixGamma;\n\n      return cubehelix$$;\n    })(1);\n  }\n\n  var cubehelix$2 = cubehelix$1(hue);\n  var interpolateCubehelixLong = cubehelix$1(nogamma);\n\n  function quantize(interpolator, n) {\n    var samples = new Array(n);\n    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n    return samples;\n  }\n\n  var noop$1 = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set$1(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"]\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function(row, i) {\n      return f(object(row), i, columns);\n    };\n  }\n\n  // Compute unique columns in order of discovery.\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n\n    rows.forEach(function(row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n\n    return columns;\n  }\n\n  function dsv(delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n]\"),\n        delimiterCode = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert, columns, rows = parseRows(text, function(row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns;\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var EOL = {}, // sentinel value for end-of-line\n          EOF = {}, // sentinel value for end-of-file\n          rows = [], // output rows\n          N = text.length,\n          I = 0, // current character index\n          n = 0, // the current line number\n          t, // the current token\n          eol; // is the current token followed by EOL?\n\n      function token() {\n        if (I >= N) return EOF; // special case: end of file\n        if (eol) return eol = false, EOL; // special case: end of line\n\n        // special case: quotes\n        var j = I, c;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, \"\\\"\");\n        }\n\n        // common case: find next delimiter or newline\n        while (I < N) {\n          var k = 1;\n          c = text.charCodeAt(I++);\n          if (c === 10) eol = true; // \\n\n          else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \\r|\\r\\n\n          else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n\n        // special case: last token before EOF\n        return text.slice(j);\n      }\n\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n\n      return rows;\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n        return columns.map(function(column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(text) {\n      return text == null ? \"\"\n          : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\\\"/g, \"\\\"\\\"\") + \"\\\"\"\n          : text;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatRows: formatRows\n    };\n  }\n\n  var csv = dsv(\",\");\n\n  var csvParse = csv.parse;\n  var csvParseRows = csv.parseRows;\n  var csvFormat = csv.format;\n  var csvFormatRows = csv.formatRows;\n\n  var tsv = dsv(\"\\t\");\n\n  var tsvParse = tsv.parse;\n  var tsvParseRows = tsv.parseRows;\n  var tsvFormat = tsv.format;\n  var tsvFormatRows = tsv.formatRows;\n\n  function request(url, callback) {\n    var request,\n        event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n        mimeType,\n        headers = map$1(),\n        xhr = new XMLHttpRequest,\n        user = null,\n        password = null,\n        response,\n        responseType,\n        timeout = 0;\n\n    // If IE does not support CORS, use XDomainRequest.\n    if (typeof XDomainRequest !== \"undefined\"\n        && !(\"withCredentials\" in xhr)\n        && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n    \"onload\" in xhr\n        ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n        : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n    function respond(o) {\n      var status = xhr.status, result;\n      if (!status && hasResponse(xhr)\n          || status >= 200 && status < 300\n          || status === 304) {\n        if (response) {\n          try {\n            result = response.call(request, xhr);\n          } catch (e) {\n            event.call(\"error\", request, e);\n            return;\n          }\n        } else {\n          result = xhr;\n        }\n        event.call(\"load\", request, result);\n      } else {\n        event.call(\"error\", request, o);\n      }\n    }\n\n    xhr.onprogress = function(e) {\n      event.call(\"progress\", request, e);\n    };\n\n    request = {\n      header: function(name, value) {\n        name = (name + \"\").toLowerCase();\n        if (arguments.length < 2) return headers.get(name);\n        if (value == null) headers.remove(name);\n        else headers.set(name, value + \"\");\n        return request;\n      },\n\n      // If mimeType is non-null and no Accept header is set, a default is used.\n      mimeType: function(value) {\n        if (!arguments.length) return mimeType;\n        mimeType = value == null ? null : value + \"\";\n        return request;\n      },\n\n      // Specifies what type the response value should take;\n      // for instance, arraybuffer, blob, document, or text.\n      responseType: function(value) {\n        if (!arguments.length) return responseType;\n        responseType = value;\n        return request;\n      },\n\n      timeout: function(value) {\n        if (!arguments.length) return timeout;\n        timeout = +value;\n        return request;\n      },\n\n      user: function(value) {\n        return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n      },\n\n      password: function(value) {\n        return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n      },\n\n      // Specify how to convert the response content to a specific type;\n      // changes the callback value on \"load\" events.\n      response: function(value) {\n        response = value;\n        return request;\n      },\n\n      // Alias for send(\"GET\", …).\n      get: function(data, callback) {\n        return request.send(\"GET\", data, callback);\n      },\n\n      // Alias for send(\"POST\", …).\n      post: function(data, callback) {\n        return request.send(\"POST\", data, callback);\n      },\n\n      // If callback is non-null, it will be used for error and load events.\n      send: function(method, data, callback) {\n        xhr.open(method, url, true, user, password);\n        if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n        if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n        if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n        if (responseType != null) xhr.responseType = responseType;\n        if (timeout > 0) xhr.timeout = timeout;\n        if (callback == null && typeof data === \"function\") callback = data, data = null;\n        if (callback != null && callback.length === 1) callback = fixCallback(callback);\n        if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n        event.call(\"beforesend\", request, xhr);\n        xhr.send(data == null ? null : data);\n        return request;\n      },\n\n      abort: function() {\n        xhr.abort();\n        return request;\n      },\n\n      on: function() {\n        var value = event.on.apply(event, arguments);\n        return value === event ? request : value;\n      }\n    };\n\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return request.get(callback);\n    }\n\n    return request;\n  }\n\n  function fixCallback(callback) {\n    return function(error, xhr) {\n      callback(error == null ? xhr : null);\n    };\n  }\n\n  function hasResponse(xhr) {\n    var type = xhr.responseType;\n    return type && type !== \"text\"\n        ? xhr.response // null on error\n        : xhr.responseText; // \"\" on error\n  }\n\n  function type(defaultMimeType, response) {\n    return function(url, callback) {\n      var r = request(url).mimeType(defaultMimeType).response(response);\n      if (callback != null) {\n        if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n        return r.get(callback);\n      }\n      return r;\n    };\n  }\n\n  var html = type(\"text/html\", function(xhr) {\n    return document.createRange().createContextualFragment(xhr.responseText);\n  });\n\n  var json = type(\"application/json\", function(xhr) {\n    return JSON.parse(xhr.responseText);\n  });\n\n  var text = type(\"text/plain\", function(xhr) {\n    return xhr.responseText;\n  });\n\n  var xml = type(\"application/xml\", function(xhr) {\n    var xml = xhr.responseXML;\n    if (!xml) throw new Error(\"parse error\");\n    return xml;\n  });\n\n  function dsv$1(defaultMimeType, parse) {\n    return function(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var r = request(url).mimeType(defaultMimeType);\n      r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n      r.row(row);\n      return callback ? r.get(callback) : r;\n    };\n  }\n\n  function responseOf(parse, row) {\n    return function(request) {\n      return parse(request.responseText, row);\n    };\n  }\n\n  var csv$1 = dsv$1(\"text/csv\", csvParse);\n\n  var tsv$1 = dsv$1(\"text/tab-separated-values\", tsvParse);\n\n  var frame = 0;\n  var timeout = 0;\n  var interval = 0;\n  var pokeDelay = 1000;\n  var taskHead;\n  var taskTail;\n  var clockLast = 0;\n  var clockNow = 0;\n  var clockSkew = 0;\n  var clock = typeof performance === \"object\" && performance.now ? performance : Date;\n  var setFrame = typeof requestAnimationFrame === \"function\"\n          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n          : function(f) { setTimeout(f, 17); };\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call =\n    this._time =\n    this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;\n        else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer;\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead, e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake(time) {\n    clockNow = (clockLast = time || clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke$1() {\n    var now = clock.now(), delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0, t1 = taskHead, t2, time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow;\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, delay);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) interval = setInterval(poke$1, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function timeout$1(callback, delay, time) {\n    var t = new Timer;\n    delay = delay == null ? 0 : +delay;\n    t.restart(function(elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  }\n\n  function interval$1(callback, delay, time) {\n    var t = new Timer, total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  }\n\nvar   t0$1 = new Date;\nvar   t1$1 = new Date;\n  function newInterval(floori, offseti, count, field) {\n\n    function interval(date) {\n      return floori(date = new Date(+date)), date;\n    }\n\n    interval.floor = interval;\n\n    interval.ceil = function(date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n\n    interval.round = function(date) {\n      var d0 = interval(date),\n          d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n\n    interval.offset = function(date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n\n    interval.range = function(start, stop, step) {\n      var range = [];\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)\n      return range;\n    };\n\n    interval.filter = function(test) {\n      return newInterval(function(date) {\n        while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function(date, step) {\n        while (--step >= 0) while (offseti(date, 1), !test(date));\n      });\n    };\n\n    if (count) {\n      interval.count = function(start, end) {\n        t0$1.setTime(+start), t1$1.setTime(+end);\n        floori(t0$1), floori(t1$1);\n        return Math.floor(count(t0$1, t1$1));\n      };\n\n      interval.every = function(step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null\n            : !(step > 1) ? interval\n            : interval.filter(field\n                ? function(d) { return field(d) % step === 0; }\n                : function(d) { return interval.count(0, d) % step === 0; });\n      };\n    }\n\n    return interval;\n  }\n\n  var millisecond = newInterval(function() {\n    // noop\n  }, function(date, step) {\n    date.setTime(+date + step);\n  }, function(start, end) {\n    return end - start;\n  });\n\n  // An optimized implementation for this simple case.\n  millisecond.every = function(k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function(date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function(date, step) {\n      date.setTime(+date + step * k);\n    }, function(start, end) {\n      return (end - start) / k;\n    });\n  };\n\n  var milliseconds = millisecond.range;\n\n  var durationSecond = 1e3;\n  var durationMinute = 6e4;\n  var durationHour = 36e5;\n  var durationDay = 864e5;\n  var durationWeek = 6048e5;\n\n  var second = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationSecond) * durationSecond);\n  }, function(date, step) {\n    date.setTime(+date + step * durationSecond);\n  }, function(start, end) {\n    return (end - start) / durationSecond;\n  }, function(date) {\n    return date.getUTCSeconds();\n  });\n\n  var seconds = second.range;\n\n  var minute = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationMinute) * durationMinute);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getMinutes();\n  });\n\n  var minutes = minute.range;\n\n  var hour = newInterval(function(date) {\n    var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n    if (offset < 0) offset += durationHour;\n    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getHours();\n  });\n\n  var hours = hour.range;\n\n  var day = newInterval(function(date) {\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n\n  var days = day.range;\n\n  function weekday(i) {\n    return newInterval(function(date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function(start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n    });\n  }\n\n  var timeWeek = weekday(0);\n  var timeMonday = weekday(1);\n  var tuesday = weekday(2);\n  var wednesday = weekday(3);\n  var thursday = weekday(4);\n  var friday = weekday(5);\n  var saturday = weekday(6);\n\n  var sundays = timeWeek.range;\n  var mondays = timeMonday.range;\n  var tuesdays = tuesday.range;\n  var wednesdays = wednesday.range;\n  var thursdays = thursday.range;\n  var fridays = friday.range;\n  var saturdays = saturday.range;\n\n  var month = newInterval(function(date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function(start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function(date) {\n    return date.getMonth();\n  });\n\n  var months = month.range;\n\n  var year = newInterval(function(date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function(start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function(date) {\n    return date.getFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  year.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n\n  var years = year.range;\n\n  var utcMinute = newInterval(function(date) {\n    date.setUTCSeconds(0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getUTCMinutes();\n  });\n\n  var utcMinutes = utcMinute.range;\n\n  var utcHour = newInterval(function(date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getUTCHours();\n  });\n\n  var utcHours = utcHour.range;\n\n  var utcDay = newInterval(function(date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function(start, end) {\n    return (end - start) / durationDay;\n  }, function(date) {\n    return date.getUTCDate() - 1;\n  });\n\n  var utcDays = utcDay.range;\n\n  function utcWeekday(i) {\n    return newInterval(function(date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function(start, end) {\n      return (end - start) / durationWeek;\n    });\n  }\n\n  var utcWeek = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  var utcTuesday = utcWeekday(2);\n  var utcWednesday = utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  var utcFriday = utcWeekday(5);\n  var utcSaturday = utcWeekday(6);\n\n  var utcSundays = utcWeek.range;\n  var utcMondays = utcMonday.range;\n  var utcTuesdays = utcTuesday.range;\n  var utcWednesdays = utcWednesday.range;\n  var utcThursdays = utcThursday.range;\n  var utcFridays = utcFriday.range;\n  var utcSaturdays = utcSaturday.range;\n\n  var utcMonth = newInterval(function(date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function(start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function(date) {\n    return date.getUTCMonth();\n  });\n\n  var utcMonths = utcMonth.range;\n\n  var utcYear = newInterval(function(date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function(start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function(date) {\n    return date.getUTCFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  utcYear.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n\n  var utcYears = utcYear.range;\n\n  // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\n  function formatDecimal(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n    var i, coefficient = x.slice(0, i);\n\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [\n      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n      +x.slice(i + 1)\n    ];\n  }\n\n  function exponent$1(x) {\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n  }\n\n  function formatGroup(grouping, thousands) {\n    return function(value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = grouping[0],\n          length = 0;\n\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n\n      return t.reverse().join(thousands);\n    };\n  }\n\n  function formatDefault(x, p) {\n    x = x.toPrecision(p);\n\n    out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (x[i]) {\n        case \".\": i0 = i1 = i; break;\n        case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n        case \"e\": break out;\n        default: if (i0 > 0) i0 = 0; break;\n      }\n    }\n\n    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n  }\n\n  var prefixExponent;\n\n  function formatPrefixAuto(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1],\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n        n = coefficient.length;\n    return i === n ? coefficient\n        : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n        : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n        : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  }\n\n  function formatRounded(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n        : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  }\n\n  var formatTypes = {\n    \"\": formatDefault,\n    \"%\": function(x, p) { return (x * 100).toFixed(p); },\n    \"b\": function(x) { return Math.round(x).toString(2); },\n    \"c\": function(x) { return x + \"\"; },\n    \"d\": function(x) { return Math.round(x).toString(10); },\n    \"e\": function(x, p) { return x.toExponential(p); },\n    \"f\": function(x, p) { return x.toFixed(p); },\n    \"g\": function(x, p) { return x.toPrecision(p); },\n    \"o\": function(x) { return Math.round(x).toString(8); },\n    \"p\": function(x, p) { return formatRounded(x * 100, p); },\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n    \"x\": function(x) { return Math.round(x).toString(16); }\n  };\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\n  function formatSpecifier(specifier) {\n    return new FormatSpecifier(specifier);\n  }\n\n  function FormatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n    var match,\n        fill = match[1] || \" \",\n        align = match[2] || \">\",\n        sign = match[3] || \"-\",\n        symbol = match[4] || \"\",\n        zero = !!match[5],\n        width = match[6] && +match[6],\n        comma = !!match[7],\n        precision = match[8] && +match[8].slice(1),\n        type = match[9] || \"\";\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // Map invalid types to the default format.\n    else if (!formatTypes[type]) type = \"\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    this.fill = fill;\n    this.align = align;\n    this.sign = sign;\n    this.symbol = symbol;\n    this.zero = zero;\n    this.width = width;\n    this.comma = comma;\n    this.precision = precision;\n    this.type = type;\n  }\n\n  FormatSpecifier.prototype.toString = function() {\n    return this.fill\n        + this.align\n        + this.sign\n        + this.symbol\n        + (this.zero ? \"0\" : \"\")\n        + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n        + (this.comma ? \",\" : \"\")\n        + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n        + this.type;\n  };\n\n  var prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\n  function identity$3(x) {\n    return x;\n  }\n\n  function formatLocale(locale) {\n    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,\n        currency = locale.currency,\n        decimal = locale.decimal;\n\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n\n      var fill = specifier.fill,\n          align = specifier.align,\n          sign = specifier.sign,\n          symbol = specifier.symbol,\n          zero = specifier.zero,\n          width = specifier.width,\n          comma = specifier.comma,\n          precision = specifier.precision,\n          type = specifier.type;\n\n      // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n      var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n          suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? \"%\" : \"\";\n\n      // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n      var formatType = formatTypes[type],\n          maybeSuffix = !type || /[defgprs%]/.test(type);\n\n      // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n      precision = precision == null ? (type ? 6 : 12)\n          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n          : Math.max(0, Math.min(20, precision));\n\n      function format(value) {\n        var valuePrefix = prefix,\n            valueSuffix = suffix,\n            i, n, c;\n\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value;\n\n          // Convert negative to positive, and compute the prefix.\n          // Note that -0 is not less than 0, but 1 / -0 is!\n          var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);\n\n          // Perform the initial formatting.\n          value = formatType(value, precision);\n\n          // If the original value was negative, it may be rounded to zero during\n          // formatting; treat this as (positive) zero.\n          if (valueNegative) {\n            i = -1, n = value.length;\n            valueNegative = false;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), (48 < c && c < 58)\n                  || (type === \"x\" && 96 < c && c < 103)\n                  || (type === \"X\" && 64 < c && c < 71)) {\n                valueNegative = true;\n                break;\n              }\n            }\n          }\n\n          // Compute the prefix and suffix.\n          valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n          valueSuffix = valueSuffix + (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n          // Break the formatted value into the integer “value” part that can be\n          // grouped, and fractional or exponential “suffix” part that is not.\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        }\n\n        // If the fill character is not \"0\", grouping is applied before padding.\n        if (comma && !zero) value = group(value, Infinity);\n\n        // Compute the padding.\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n        // If the fill character is \"0\", grouping is applied after padding.\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n        // Reconstruct the final output based on the desired alignment.\n        switch (align) {\n          case \"<\": return valuePrefix + value + valueSuffix + padding;\n          case \"=\": return valuePrefix + padding + value + valueSuffix;\n          case \"^\": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n        }\n        return padding + valuePrefix + value + valueSuffix;\n      }\n\n      format.toString = function() {\n        return specifier + \"\";\n      };\n\n      return format;\n    }\n\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n          e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,\n          k = Math.pow(10, -e),\n          prefix = prefixes[8 + e / 3];\n      return function(value) {\n        return f(k * value) + prefix;\n      };\n    }\n\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  }\n\n  var locale;\n  exports.format;\n  exports.formatPrefix;\n\n  defaultLocale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"]\n  });\n\n  function defaultLocale(definition) {\n    locale = formatLocale(definition);\n    exports.format = locale.format;\n    exports.formatPrefix = locale.formatPrefix;\n    return locale;\n  }\n\n  function precisionFixed(step) {\n    return Math.max(0, -exponent$1(Math.abs(step)));\n  }\n\n  function precisionPrefix(step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));\n  }\n\n  function precisionRound(step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;\n  }\n\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n\n  function newYear(y) {\n    return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n  }\n\n  function formatLocale$1(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_weekdays = locale.days,\n        locale_shortWeekdays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n\n    var periodRe = formatRe(locale_periods),\n        periodLookup = formatLookup(locale_periods),\n        weekdayRe = formatRe(locale_weekdays),\n        weekdayLookup = formatLookup(locale_weekdays),\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n        monthRe = formatRe(locale_months),\n        monthLookup = formatLookup(locale_months),\n        shortMonthRe = formatRe(locale_shortMonths),\n        shortMonthLookup = formatLookup(locale_shortMonths);\n\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"S\": formatSeconds,\n      \"U\": formatWeekNumberSunday,\n      \"w\": formatWeekdayNumber,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"S\": formatUTCSeconds,\n      \"U\": formatUTCWeekNumberSunday,\n      \"w\": formatUTCWeekdayNumber,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"S\": parseSeconds,\n      \"U\": parseWeekNumberSunday,\n      \"w\": parseWeekdayNumber,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    };\n\n    // These recursive directive definitions must be deferred.\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n    function newFormat(specifier, formats) {\n      return function(date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            n = specifier.length,\n            c,\n            pad,\n            format;\n\n        if (!(date instanceof Date)) date = new Date(+date);\n\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n            else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n\n    function newParse(specifier, newDate) {\n      return function(string) {\n        var d = newYear(1900),\n            i = parseSpecifier(d, specifier, string += \"\", 0);\n        if (i != string.length) return null;\n\n        // The am-pm flag is 0 for AM, and 1 for PM.\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n        // Convert day-of-week and week-of-year to day-of-year.\n        if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          var day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n        }\n\n        // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        }\n\n        // Otherwise, all fields are in local time.\n        return newDate(d);\n      };\n    }\n\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n          n = specifier.length,\n          m = string.length,\n          c,\n          parse;\n\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n\n      return j;\n    }\n\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n\n    return {\n      format: function(specifier) {\n        var f = newFormat(specifier += \"\", formats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      parse: function(specifier) {\n        var p = newParse(specifier += \"\", localDate);\n        p.toString = function() { return specifier; };\n        return p;\n      },\n      utcFormat: function(specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      utcParse: function(specifier) {\n        var p = newParse(specifier, utcDate);\n        p.toString = function() { return specifier; };\n        return p;\n      }\n    };\n  }\n\n  var pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"};\n  var numberRe = /^\\s*\\d+/;\n  var percentRe = /^%/;\n  var requoteRe = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  function pad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n        string = (sign ? -value : value) + \"\",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function formatLookup(names) {\n    var map = {}, i = -1, n = names.length;\n    while (++i < n) map[names[i].toLowerCase()] = i;\n    return map;\n  }\n\n  function parseWeekdayNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?:\\:?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n\n  function formatDayOfMonth(d, p) {\n    return pad(d.getDate(), p, 2);\n  }\n\n  function formatHour24(d, p) {\n    return pad(d.getHours(), p, 2);\n  }\n\n  function formatHour12(d, p) {\n    return pad(d.getHours() % 12 || 12, p, 2);\n  }\n\n  function formatDayOfYear(d, p) {\n    return pad(1 + day.count(year(d), d), p, 3);\n  }\n\n  function formatMilliseconds(d, p) {\n    return pad(d.getMilliseconds(), p, 3);\n  }\n\n  function formatMonthNumber(d, p) {\n    return pad(d.getMonth() + 1, p, 2);\n  }\n\n  function formatMinutes(d, p) {\n    return pad(d.getMinutes(), p, 2);\n  }\n\n  function formatSeconds(d, p) {\n    return pad(d.getSeconds(), p, 2);\n  }\n\n  function formatWeekNumberSunday(d, p) {\n    return pad(timeWeek.count(year(d), d), p, 2);\n  }\n\n  function formatWeekdayNumber(d) {\n    return d.getDay();\n  }\n\n  function formatWeekNumberMonday(d, p) {\n    return pad(timeMonday.count(year(d), d), p, 2);\n  }\n\n  function formatYear(d, p) {\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatFullYear(d, p) {\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n        + pad(z / 60 | 0, \"0\", 2)\n        + pad(z % 60, \"0\", 2);\n  }\n\n  function formatUTCDayOfMonth(d, p) {\n    return pad(d.getUTCDate(), p, 2);\n  }\n\n  function formatUTCHour24(d, p) {\n    return pad(d.getUTCHours(), p, 2);\n  }\n\n  function formatUTCHour12(d, p) {\n    return pad(d.getUTCHours() % 12 || 12, p, 2);\n  }\n\n  function formatUTCDayOfYear(d, p) {\n    return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n  }\n\n  function formatUTCMilliseconds(d, p) {\n    return pad(d.getUTCMilliseconds(), p, 3);\n  }\n\n  function formatUTCMonthNumber(d, p) {\n    return pad(d.getUTCMonth() + 1, p, 2);\n  }\n\n  function formatUTCMinutes(d, p) {\n    return pad(d.getUTCMinutes(), p, 2);\n  }\n\n  function formatUTCSeconds(d, p) {\n    return pad(d.getUTCSeconds(), p, 2);\n  }\n\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad(utcWeek.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCWeekdayNumber(d) {\n    return d.getUTCDay();\n  }\n\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad(utcMonday.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCYear(d, p) {\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCFullYear(d, p) {\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n\n  var locale$1;\n  exports.timeFormat;\n  exports.timeParse;\n  exports.utcFormat;\n  exports.utcParse;\n\n  defaultLocale$1({\n    dateTime: \"%x, %X\",\n    date: \"%-m/%-d/%Y\",\n    time: \"%-I:%M:%S %p\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n\n  function defaultLocale$1(definition) {\n    locale$1 = formatLocale$1(definition);\n    exports.timeFormat = locale$1.format;\n    exports.timeParse = locale$1.parse;\n    exports.utcFormat = locale$1.utcFormat;\n    exports.utcParse = locale$1.utcParse;\n    return locale$1;\n  }\n\n  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\n  function formatIsoNative(date) {\n    return date.toISOString();\n  }\n\n  var formatIso = Date.prototype.toISOString\n      ? formatIsoNative\n      : exports.utcFormat(isoSpecifier);\n\n  function parseIsoNative(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  }\n\n  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n      ? parseIsoNative\n      : exports.utcParse(isoSpecifier);\n\n  var array$2 = Array.prototype;\n\n  var map$2 = array$2.map;\n  var slice$3 = array$2.slice;\n\n  var implicit = {name: \"implicit\"};\n\n  function ordinal(range) {\n    var index = map$1(),\n        domain = [],\n        unknown = implicit;\n\n    range = range == null ? [] : slice$3.call(range);\n\n    function scale(d) {\n      var key = d + \"\", i = index.get(key);\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n      return range[(i - 1) % range.length];\n    }\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = map$1();\n      var i = -1, n = _.length, d, key;\n      while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n      return scale;\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), scale) : range.slice();\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function() {\n      return ordinal()\n          .domain(domain)\n          .range(range)\n          .unknown(unknown);\n    };\n\n    return scale;\n  }\n\n  function band() {\n    var scale = ordinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range,\n        range$$ = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n\n    delete scale.unknown;\n\n    function rescale() {\n      var n = domain().length,\n          reverse = range$$[1] < range$$[0],\n          start = range$$[reverse - 0],\n          stop = range$$[1 - reverse];\n      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n      if (round) step = Math.floor(step);\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n      var values = range(n).map(function(i) { return start + step * i; });\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range$$ = [+_[0], +_[1]], rescale()) : range$$.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range$$ = [+_[0], +_[1]], round = true, rescale();\n    };\n\n    scale.bandwidth = function() {\n      return bandwidth;\n    };\n\n    scale.step = function() {\n      return step;\n    };\n\n    scale.round = function(_) {\n      return arguments.length ? (round = !!_, rescale()) : round;\n    };\n\n    scale.padding = function(_) {\n      return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingInner = function(_) {\n      return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingOuter = function(_) {\n      return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n    };\n\n    scale.align = function(_) {\n      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n    };\n\n    scale.copy = function() {\n      return band()\n          .domain(domain())\n          .range(range$$)\n          .round(round)\n          .paddingInner(paddingInner)\n          .paddingOuter(paddingOuter)\n          .align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    var copy = scale.copy;\n\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n    delete scale.paddingOuter;\n\n    scale.copy = function() {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point$4() {\n    return pointish(band().paddingInner(1));\n  }\n\n  function constant$3(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function number$1(x) {\n    return +x;\n  }\n\n  var unit = [0, 1];\n\n  function deinterpolate(a, b) {\n    return (b -= (a = +a))\n        ? function(x) { return (x - a) / b; }\n        : constant$3(b);\n  }\n\n  function deinterpolateClamp(deinterpolate) {\n    return function(a, b) {\n      var d = deinterpolate(a = +a, b = +b);\n      return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n    };\n  }\n\n  function reinterpolateClamp(reinterpolate) {\n    return function(a, b) {\n      var r = reinterpolate(a = +a, b = +b);\n      return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n    };\n  }\n\n  function bimap(domain, range, deinterpolate, reinterpolate) {\n    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n    if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n    else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n    return function(x) { return r0(d0(x)); };\n  }\n\n  function polymap(domain, range, deinterpolate, reinterpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n        d = new Array(j),\n        r = new Array(j),\n        i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n\n    while (++i < j) {\n      d[i] = deinterpolate(domain[i], domain[i + 1]);\n      r[i] = reinterpolate(range[i], range[i + 1]);\n    }\n\n    return function(x) {\n      var i = bisectRight(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n\n  function copy(source, target) {\n    return target\n        .domain(source.domain())\n        .range(source.range())\n        .interpolate(source.interpolate())\n        .clamp(source.clamp());\n  }\n\n  // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n  function continuous(deinterpolate$$, reinterpolate) {\n    var domain = unit,\n        range = unit,\n        interpolate$$ = interpolate,\n        clamp = false,\n        piecewise,\n        output,\n        input;\n\n    function rescale() {\n      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n\n    function scale(x) {\n      return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);\n    }\n\n    scale.invert = function(y) {\n      return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, rescale()) : clamp;\n    };\n\n    scale.interpolate = function(_) {\n      return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;\n    };\n\n    return rescale();\n  }\n\n  function tickFormat(domain, count, specifier) {\n    var start = domain[0],\n        stop = domain[domain.length - 1],\n        step = tickStep(start, stop, count == null ? 10 : count),\n        precision;\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\": {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n        return exports.formatPrefix(specifier, value);\n      }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\": {\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n        break;\n      }\n      case \"f\":\n      case \"%\": {\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n        break;\n      }\n    }\n    return exports.format(specifier);\n  }\n\n  function linearish(scale) {\n    var domain = scale.domain;\n\n    scale.ticks = function(count) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return tickFormat(domain(), count, specifier);\n    };\n\n    scale.nice = function(count) {\n      var d = domain(),\n          i = d.length - 1,\n          n = count == null ? 10 : count,\n          start = d[0],\n          stop = d[i],\n          step = tickStep(start, stop, n);\n\n      if (step) {\n        step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n        d[0] = Math.floor(start / step) * step;\n        d[i] = Math.ceil(stop / step) * step;\n        domain(d);\n      }\n\n      return scale;\n    };\n\n    return scale;\n  }\n\n  function linear$2() {\n    var scale = continuous(deinterpolate, interpolateNumber);\n\n    scale.copy = function() {\n      return copy(scale, linear$2());\n    };\n\n    return linearish(scale);\n  }\n\n  function identity$4() {\n    var domain = [0, 1];\n\n    function scale(x) {\n      return +x;\n    }\n\n    scale.invert = scale;\n\n    scale.domain = scale.range = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();\n    };\n\n    scale.copy = function() {\n      return identity$4().domain(domain);\n    };\n\n    return linearish(scale);\n  }\n\n  function nice(domain, interval) {\n    domain = domain.slice();\n\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        t;\n\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  }\n\n  function deinterpolate$1(a, b) {\n    return (b = Math.log(b / a))\n        ? function(x) { return Math.log(x / a) / b; }\n        : constant$3(b);\n  }\n\n  function reinterpolate(a, b) {\n    return a < 0\n        ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\n        : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\n  }\n\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n\n  function powp(base) {\n    return base === 10 ? pow10\n        : base === Math.E ? Math.exp\n        : function(x) { return Math.pow(base, x); };\n  }\n\n  function logp(base) {\n    return base === Math.E ? Math.log\n        : base === 10 && Math.log10\n        || base === 2 && Math.log2\n        || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n  }\n\n  function reflect(f) {\n    return function(x) {\n      return -f(-x);\n    };\n  }\n\n  function log() {\n    var scale = continuous(deinterpolate$1, reinterpolate).domain([1, 10]),\n        domain = scale.domain,\n        base = 10,\n        logs = logp(10),\n        pows = powp(10);\n\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n      if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n      return scale;\n    }\n\n    scale.base = function(_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.ticks = function(count) {\n      var d = domain(),\n          u = d[0],\n          v = d[d.length - 1],\n          r;\n\n      if (r = v < u) i = u, u = v, v = i;\n\n      var i = logs(u),\n          j = logs(v),\n          p,\n          k,\n          t,\n          n = count == null ? 10 : +count,\n          z = [];\n\n      if (!(base % 1) && j - i < n) {\n        i = Math.round(i) - 1, j = Math.round(j) + 1;\n        if (u > 0) for (; i < j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i < j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n      } else {\n        z = ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n\n      return r ? z.reverse() : z;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = exports.format(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n      return function(d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n\n    scale.nice = function() {\n      return domain(nice(domain(), {\n        floor: function(x) { return pows(Math.floor(logs(x))); },\n        ceil: function(x) { return pows(Math.ceil(logs(x))); }\n      }));\n    };\n\n    scale.copy = function() {\n      return copy(scale, log().base(base));\n    };\n\n    return scale;\n  }\n\n  function raise(x, exponent) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  }\n\n  function pow() {\n    var exponent = 1,\n        scale = continuous(deinterpolate, reinterpolate),\n        domain = scale.domain;\n\n    function deinterpolate(a, b) {\n      return (b = raise(b, exponent) - (a = raise(a, exponent)))\n          ? function(x) { return (raise(x, exponent) - a) / b; }\n          : constant$3(b);\n    }\n\n    function reinterpolate(a, b) {\n      b = raise(b, exponent) - (a = raise(a, exponent));\n      return function(t) { return raise(a + b * t, 1 / exponent); };\n    }\n\n    scale.exponent = function(_) {\n      return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n    };\n\n    scale.copy = function() {\n      return copy(scale, pow().exponent(exponent));\n    };\n\n    return linearish(scale);\n  }\n\n  function sqrt() {\n    return pow().exponent(0.5);\n  }\n\n  function quantile() {\n    var domain = [],\n        range = [],\n        thresholds = [];\n\n    function rescale() {\n      var i = 0, n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n      return scale;\n    }\n\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];\n    }\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [\n        i > 0 ? thresholds[i - 1] : domain[0],\n        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n      ];\n    };\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(ascending);\n      return rescale();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.quantiles = function() {\n      return thresholds.slice();\n    };\n\n    scale.copy = function() {\n      return quantile()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\n  function quantize$1() {\n    var x0 = 0,\n        x1 = 1,\n        n = 1,\n        domain = [0.5],\n        range = [0, 1];\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      return scale;\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN]\n          : i < 1 ? [x0, domain[0]]\n          : i >= n ? [domain[n - 1], x1]\n          : [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return quantize$1()\n          .domain([x0, x1])\n          .range(range);\n    };\n\n    return linearish(scale);\n  }\n\n  function threshold$1() {\n    var domain = [0.5],\n        range = [0, 1],\n        n = 1;\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return threshold$1()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\nvar   durationSecond$1 = 1000;\nvar   durationMinute$1 = durationSecond$1 * 60;\nvar   durationHour$1 = durationMinute$1 * 60;\nvar   durationDay$1 = durationHour$1 * 24;\nvar   durationWeek$1 = durationDay$1 * 7;\n  var durationMonth = durationDay$1 * 30;\n  var durationYear = durationDay$1 * 365;\n  function date$1(t) {\n    return new Date(t);\n  }\n\n  function number$2(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n    var scale = continuous(deinterpolate, interpolateNumber),\n        invert = scale.invert,\n        domain = scale.domain;\n\n    var formatMillisecond = format(\".%L\"),\n        formatSecond = format(\":%S\"),\n        formatMinute = format(\"%I:%M\"),\n        formatHour = format(\"%I %p\"),\n        formatDay = format(\"%a %d\"),\n        formatWeek = format(\"%b %d\"),\n        formatMonth = format(\"%B\"),\n        formatYear = format(\"%Y\");\n\n    var tickIntervals = [\n      [second,  1,      durationSecond$1],\n      [second,  5,  5 * durationSecond$1],\n      [second, 15, 15 * durationSecond$1],\n      [second, 30, 30 * durationSecond$1],\n      [minute,  1,      durationMinute$1],\n      [minute,  5,  5 * durationMinute$1],\n      [minute, 15, 15 * durationMinute$1],\n      [minute, 30, 30 * durationMinute$1],\n      [  hour,  1,      durationHour$1  ],\n      [  hour,  3,  3 * durationHour$1  ],\n      [  hour,  6,  6 * durationHour$1  ],\n      [  hour, 12, 12 * durationHour$1  ],\n      [   day,  1,      durationDay$1   ],\n      [   day,  2,  2 * durationDay$1   ],\n      [  week,  1,      durationWeek$1  ],\n      [ month,  1,      durationMonth ],\n      [ month,  3,  3 * durationMonth ],\n      [  year,  1,      durationYear  ]\n    ];\n\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond\n          : minute(date) < date ? formatSecond\n          : hour(date) < date ? formatMinute\n          : day(date) < date ? formatHour\n          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n          : year(date) < date ? formatMonth\n          : formatYear)(date);\n    }\n\n    function tickInterval(interval, start, stop, step) {\n      if (interval == null) interval = 10;\n\n      // If a desired tick count is specified, pick a reasonable tick interval\n      // based on the extent of the domain and a rough estimate of tick size.\n      // Otherwise, assume interval is already a time interval and use it.\n      if (typeof interval === \"number\") {\n        var target = Math.abs(stop - start) / interval,\n            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n        if (i === tickIntervals.length) {\n          step = tickStep(start / durationYear, stop / durationYear, interval);\n          interval = year;\n        } else if (i) {\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n          step = i[1];\n          interval = i[0];\n        } else {\n          step = tickStep(start, stop, interval);\n          interval = millisecond;\n        }\n      }\n\n      return step == null ? interval : interval.every(step);\n    }\n\n    scale.invert = function(y) {\n      return new Date(invert(y));\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);\n    };\n\n    scale.ticks = function(interval, step) {\n      var d = domain(),\n          t0 = d[0],\n          t1 = d[d.length - 1],\n          r = t1 < t0,\n          t;\n      if (r) t = t0, t0 = t1, t1 = t;\n      t = tickInterval(interval, t0, t1, step);\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n      return r ? t.reverse() : t;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return specifier == null ? tickFormat : format(specifier);\n    };\n\n    scale.nice = function(interval, step) {\n      var d = domain();\n      return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n          ? domain(nice(d, interval))\n          : scale;\n    };\n\n    scale.copy = function() {\n      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n    };\n\n    return scale;\n  }\n\n  function time() {\n    return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n  }\n\n  function utcTime() {\n    return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n  }\n\n  function colors(s) {\n    return s.match(/.{6}/g).map(function(x) {\n      return \"#\" + x;\n    });\n  }\n\n  var category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n\n  var category20b = colors(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\");\n\n  var category20c = colors(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\");\n\n  var category20 = colors(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\");\n\n  var cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n\n  var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var rainbow = cubehelix();\n\n  function rainbow$1(t) {\n    if (t < 0 || t > 1) t -= Math.floor(t);\n    var ts = Math.abs(t - 0.5);\n    rainbow.h = 360 * t - 100;\n    rainbow.s = 1.5 - 1.5 * ts;\n    rainbow.l = 0.8 - 0.9 * ts;\n    return rainbow + \"\";\n  }\n\n  function ramp(range) {\n    var n = range.length;\n    return function(t) {\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n    };\n  }\n\n  var viridis = ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\n  var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\n  var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\n  var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n\n  function sequential(interpolator) {\n    var x0 = 0,\n        x1 = 1,\n        clamp = false;\n\n    function scale(x) {\n      var t = (x - x0) / (x1 - x0);\n      return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function(_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    scale.copy = function() {\n      return sequential(interpolator).domain([x0, x1]).clamp(clamp);\n    };\n\n    return linearish(scale);\n  }\n\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n\n  function namespace(name) {\n    var prefix = name += \"\", i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n  }\n\n  function creatorInherit(name) {\n    return function() {\n      var document = this.ownerDocument,\n          uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml\n          ? document.createElement(name)\n          : document.createElementNS(uri, name);\n    };\n  }\n\n  function creatorFixed(fullname) {\n    return function() {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n\n  function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local\n        ? creatorFixed\n        : creatorInherit)(fullname);\n  }\n\n  var nextId = 0;\n\n  function local() {\n    return new Local;\n  }\n\n  function Local() {\n    this._ = \"@\" + (++nextId).toString(36);\n  }\n\n  Local.prototype = local.prototype = {\n    constructor: Local,\n    get: function(node) {\n      var id = this._;\n      while (!(id in node)) if (!(node = node.parentNode)) return;\n      return node[id];\n    },\n    set: function(node, value) {\n      return node[this._] = value;\n    },\n    remove: function(node) {\n      return this._ in node && delete node[this._];\n    },\n    toString: function() {\n      return this._;\n    }\n  };\n\n  var matcher = function(selector) {\n    return function() {\n      return this.matches(selector);\n    };\n  };\n\n  if (typeof document !== \"undefined\") {\n    var element = document.documentElement;\n    if (!element.matches) {\n      var vendorMatches = element.webkitMatchesSelector\n          || element.msMatchesSelector\n          || element.mozMatchesSelector\n          || element.oMatchesSelector;\n      matcher = function(selector) {\n        return function() {\n          return vendorMatches.call(this, selector);\n        };\n      };\n    }\n  }\n\n  var matcher$1 = matcher;\n\n  var filterEvents = {};\n\n  exports.event = null;\n\n  if (typeof document !== \"undefined\") {\n    var element$1 = document.documentElement;\n    if (!(\"onmouseenter\" in element$1)) {\n      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n    }\n  }\n\n  function filterContextListener(listener, index, group) {\n    listener = contextListener(listener, index, group);\n    return function(event) {\n      var related = event.relatedTarget;\n      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n        listener.call(this, event);\n      }\n    };\n  }\n\n  function contextListener(listener, index, group) {\n    return function(event1) {\n      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n      exports.event = event1;\n      try {\n        listener.call(this, this.__data__, index, group);\n      } finally {\n        exports.event = event0;\n      }\n    };\n  }\n\n  function parseTypenames$1(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return {type: t, name: name};\n    });\n  }\n\n  function onRemove(typename) {\n    return function() {\n      var on = this.__on;\n      if (!on) return;\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n        } else {\n          on[++i] = o;\n        }\n      }\n      if (++i) on.length = i;\n      else delete this.__on;\n    };\n  }\n\n  function onAdd(typename, value, capture) {\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n    return function(d, i, group) {\n      var on = this.__on, o, listener = wrap(value, i, group);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, capture);\n      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n      if (!on) this.__on = [o];\n      else on.push(o);\n    };\n  }\n\n  function selection_on(typename, value, capture) {\n    var typenames = parseTypenames$1(typename + \"\"), i, n = typenames.length, t;\n\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n\n    on = value ? onAdd : onRemove;\n    if (capture == null) capture = false;\n    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n    return this;\n  }\n\n  function customEvent(event1, listener, that, args) {\n    var event0 = exports.event;\n    event1.sourceEvent = exports.event;\n    exports.event = event1;\n    try {\n      return listener.apply(that, args);\n    } finally {\n      exports.event = event0;\n    }\n  }\n\n  function sourceEvent() {\n    var current = exports.event, source;\n    while (source = current.sourceEvent) current = source;\n    return current;\n  }\n\n  function point$5(node, event) {\n    var svg = node.ownerSVGElement || node;\n\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n\n    var rect = node.getBoundingClientRect();\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n  }\n\n  function mouse(node) {\n    var event = sourceEvent();\n    if (event.changedTouches) event = event.changedTouches[0];\n    return point$5(node, event);\n  }\n\n  function none$2() {}\n\n  function selector(selector) {\n    return selector == null ? none$2 : function() {\n      return this.querySelector(selector);\n    };\n  }\n\n  function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function empty() {\n    return [];\n  }\n\n  function selectorAll(selector) {\n    return selector == null ? empty : function() {\n      return this.querySelectorAll(selector);\n    };\n  }\n\n  function selection_selectAll(select) {\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, parents);\n  }\n\n  function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function sparse(update) {\n    return new Array(update.length);\n  }\n\n  function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  }\n\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n    querySelector: function(selector) { return this._parent.querySelector(selector); },\n    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n  };\n\n  function constant$4(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n        node,\n        groupLength = group.length,\n        dataLength = data.length;\n\n    // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Put any non-null nodes that don’t fit into exit.\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n        node,\n        nodeByKeyValue = {},\n        groupLength = group.length,\n        dataLength = data.length,\n        keyValues = new Array(groupLength),\n        keyValue;\n\n    // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n        if (keyValue in nodeByKeyValue) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue[keyValue] = node;\n        }\n      }\n    }\n\n    // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n      if (node = nodeByKeyValue[keyValue]) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[keyValue] = null;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Add any remaining nodes that were not bound to data to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function selection_data(value, key) {\n    if (!value) {\n      data = new Array(this.size()), j = -1;\n      this.each(function(d) { data[++j] = d; });\n      return data;\n    }\n\n    var bind = key ? bindKey : bindIndex,\n        parents = this._parents,\n        groups = this._groups;\n\n    if (typeof value !== \"function\") value = constant$4(value);\n\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n          group = groups[j],\n          groupLength = group.length,\n          data = value.call(parent, parent && parent.__data__, j, parents),\n          dataLength = data.length,\n          enterGroup = enter[j] = new Array(dataLength),\n          updateGroup = update[j] = new Array(dataLength),\n          exitGroup = exit[j] = new Array(groupLength);\n\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n      // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n          previous._next = next || null;\n        }\n      }\n    }\n\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  }\n\n  function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  }\n\n  function selection_merge(selection) {\n\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Selection(merges, this._parents);\n  }\n\n  function selection_order() {\n\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function selection_sort(compare) {\n    if (!compare) compare = ascending$2;\n\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n      sortgroup.sort(compareNode);\n    }\n\n    return new Selection(sortgroups, this._parents).order();\n  }\n\n  function ascending$2(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  }\n\n  function selection_nodes() {\n    var nodes = new Array(this.size()), i = -1;\n    this.each(function() { nodes[++i] = this; });\n    return nodes;\n  }\n\n  function selection_node() {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n\n    return null;\n  }\n\n  function selection_size() {\n    var size = 0;\n    this.each(function() { ++size; });\n    return size;\n  }\n\n  function selection_empty() {\n    return !this.node();\n  }\n\n  function selection_each(callback) {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n\n    return this;\n  }\n\n  function attrRemove(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, value) {\n    return function() {\n      this.setAttribute(name, value);\n    };\n  }\n\n  function attrConstantNS(fullname, value) {\n    return function() {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n\n  function attrFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);\n      else this.setAttribute(name, v);\n    };\n  }\n\n  function attrFunctionNS(fullname, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n      else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n\n  function selection_attr(name, value) {\n    var fullname = namespace(name);\n\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local\n          ? node.getAttributeNS(fullname.space, fullname.local)\n          : node.getAttribute(fullname);\n    }\n\n    return this.each((value == null\n        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS : attrFunction)\n        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n  }\n\n  function window(node) {\n    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n        || (node.document && node) // node is a Window\n        || node.defaultView; // node is a Document\n  }\n\n  function styleRemove(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, value, priority) {\n    return function() {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n\n  function styleFunction(name, value, priority) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);\n      else this.style.setProperty(name, v, priority);\n    };\n  }\n\n  function selection_style(name, value, priority) {\n    var node;\n    return arguments.length > 1\n        ? this.each((value == null\n              ? styleRemove : typeof value === \"function\"\n              ? styleFunction\n              : styleConstant)(name, value, priority == null ? \"\" : priority))\n        : window(node = this.node())\n            .getComputedStyle(node, null)\n            .getPropertyValue(name);\n  }\n\n  function propertyRemove(name) {\n    return function() {\n      delete this[name];\n    };\n  }\n\n  function propertyConstant(name, value) {\n    return function() {\n      this[name] = value;\n    };\n  }\n\n  function propertyFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];\n      else this[name] = v;\n    };\n  }\n\n  function selection_property(name, value) {\n    return arguments.length > 1\n        ? this.each((value == null\n            ? propertyRemove : typeof value === \"function\"\n            ? propertyFunction\n            : propertyConstant)(name, value))\n        : this.node()[name];\n  }\n\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n\n  ClassList.prototype = {\n    add: function(name) {\n      var i = this._names.indexOf(name);\n      if (i < 0) {\n        this._names.push(name);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function(name) {\n      var i = this._names.indexOf(name);\n      if (i >= 0) {\n        this._names.splice(i, 1);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n\n  function classedAdd(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.add(names[i]);\n  }\n\n  function classedRemove(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.remove(names[i]);\n  }\n\n  function classedTrue(names) {\n    return function() {\n      classedAdd(this, names);\n    };\n  }\n\n  function classedFalse(names) {\n    return function() {\n      classedRemove(this, names);\n    };\n  }\n\n  function classedFunction(names, value) {\n    return function() {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n\n  function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n      var list = classList(this.node()), i = -1, n = names.length;\n      while (++i < n) if (!list.contains(names[i])) return false;\n      return true;\n    }\n\n    return this.each((typeof value === \"function\"\n        ? classedFunction : value\n        ? classedTrue\n        : classedFalse)(names, value));\n  }\n\n  function textRemove() {\n    this.textContent = \"\";\n  }\n\n  function textConstant(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_text(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? textRemove : (typeof value === \"function\"\n            ? textFunction\n            : textConstant)(value))\n        : this.node().textContent;\n  }\n\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n\n  function htmlConstant(value) {\n    return function() {\n      this.innerHTML = value;\n    };\n  }\n\n  function htmlFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_html(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? htmlRemove : (typeof value === \"function\"\n            ? htmlFunction\n            : htmlConstant)(value))\n        : this.node().innerHTML;\n  }\n\n  function raise$1() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n\n  function selection_raise() {\n    return this.each(raise$1);\n  }\n\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  function selection_lower() {\n    return this.each(lower);\n  }\n\n  function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function() {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  }\n\n  function constantNull() {\n    return null;\n  }\n\n  function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function() {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  }\n\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n\n  function selection_remove() {\n    return this.each(remove);\n  }\n\n  function selection_datum(value) {\n    return arguments.length\n        ? this.property(\"__data__\", value)\n        : this.node().__data__;\n  }\n\n  function dispatchEvent(node, type, params) {\n    var window$$ = window(node),\n        event = window$$.CustomEvent;\n\n    if (event) {\n      event = new event(type, params);\n    } else {\n      event = window$$.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n      else event.initEvent(type, false, false);\n    }\n\n    node.dispatchEvent(event);\n  }\n\n  function dispatchConstant(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params);\n    };\n  }\n\n  function dispatchFunction(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n\n  function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\"\n        ? dispatchFunction\n        : dispatchConstant)(type, params));\n  }\n\n  var root = [null];\n\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n\n  Selection.prototype = selection.prototype = {\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    merge: selection_merge,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  };\n\n  function select(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n        : new Selection([[selector]], root);\n  }\n\n  function selectAll(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n        : new Selection([selector == null ? [] : selector], root);\n  }\n\n  function touch(node, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return point$5(node, touch);\n      }\n    }\n\n    return null;\n  }\n\n  function touches(node, touches) {\n    if (touches == null) touches = sourceEvent().touches;\n\n    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n      points[i] = point$5(node, touches[i]);\n    }\n\n    return points;\n  }\n\n  var emptyOn = dispatch(\"start\", \"end\", \"interrupt\");\n  var emptyTween = [];\n\n  var CREATED = 0;\n  var SCHEDULED = 1;\n  var STARTING = 2;\n  var STARTED = 3;\n  var ENDING = 4;\n  var ENDED = 5;\n\n  function schedule(node, name, id, index, group, timing) {\n    var schedules = node.__transition;\n    if (!schedules) node.__transition = {};\n    else if (id in schedules) return;\n    create(node, id, {\n      name: name,\n      index: index, // For context during callback.\n      group: group, // For context during callback.\n      on: emptyOn,\n      tween: emptyTween,\n      time: timing.time,\n      delay: timing.delay,\n      duration: timing.duration,\n      ease: timing.ease,\n      timer: null,\n      state: CREATED\n    });\n  }\n\n  function init(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function set$2(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function get$1(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id])) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function create(node, id, self) {\n    var schedules = node.__transition,\n        tween;\n\n    // Initialize the self timer when the transition is created.\n    // Note the actual delay is not known until the first callback!\n    schedules[id] = self;\n    self.timer = timer(schedule, 0, self.time);\n\n    // If the delay is greater than this first sleep, sleep some more;\n    // otherwise, start immediately.\n    function schedule(elapsed) {\n      self.state = SCHEDULED;\n      if (self.delay <= elapsed) start(elapsed - self.delay);\n      else self.timer.restart(start, self.delay, self.time);\n    }\n\n    function start(elapsed) {\n      var i, j, n, o;\n\n      for (i in schedules) {\n        o = schedules[i];\n        if (o.name !== self.name) continue;\n\n        // Interrupt the active transition, if any.\n        // Dispatch the interrupt event.\n        if (o.state === STARTED) {\n          o.state = ENDED;\n          o.timer.stop();\n          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n          delete schedules[i];\n        }\n\n        // Cancel any pre-empted transitions. No interrupt event is dispatched\n        // because the cancelled transitions never started. Note that this also\n        // removes this transition from the pending list!\n        else if (+i < id) {\n          o.state = ENDED;\n          o.timer.stop();\n          delete schedules[i];\n        }\n      }\n\n      // Defer the first tick to end of the current frame; see mbostock/d3#1576.\n      // Note the transition may be canceled after start and before the first tick!\n      // Note this must be scheduled before the start event; see d3/d3-transition#16!\n      // Assuming this is successful, subsequent callbacks go straight to tick.\n      timeout$1(function() {\n        if (self.state === STARTED) {\n          self.timer.restart(tick, self.delay, self.time);\n          tick(elapsed);\n        }\n      });\n\n      // Dispatch the start event.\n      // Note this must be done before the tween are initialized.\n      self.state = STARTING;\n      self.on.call(\"start\", node, node.__data__, self.index, self.group);\n      if (self.state !== STARTING) return; // interrupted\n      self.state = STARTED;\n\n      // Initialize the tween, deleting null tween.\n      tween = new Array(n = self.tween.length);\n      for (i = 0, j = -1; i < n; ++i) {\n        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n          tween[++j] = o;\n        }\n      }\n      tween.length = j + 1;\n    }\n\n    function tick(elapsed) {\n      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1),\n          i = -1,\n          n = tween.length;\n\n      while (++i < n) {\n        tween[i].call(null, t);\n      }\n\n      // Dispatch the end event.\n      if (self.state === ENDING) {\n        self.state = ENDED;\n        self.timer.stop();\n        self.on.call(\"end\", node, node.__data__, self.index, self.group);\n        for (i in schedules) if (+i !== id) return void delete schedules[id];\n        delete node.__transition;\n      }\n    }\n  }\n\n  function interrupt(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        active,\n        empty = true,\n        i;\n\n    if (!schedules) return;\n\n    name = name == null ? null : name + \"\";\n\n    for (i in schedules) {\n      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n      active = schedule.state === STARTED;\n      schedule.state = ENDED;\n      schedule.timer.stop();\n      if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\n      delete schedules[i];\n    }\n\n    if (empty) delete node.__transition;\n  }\n\n  function selection_interrupt(name) {\n    return this.each(function() {\n      interrupt(this, name);\n    });\n  }\n\n  function tweenRemove(id, name) {\n    var tween0, tween1;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = tween0 = tween;\n        for (var i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1 = tween1.slice();\n            tween1.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function tweenFunction(id, name, value) {\n    var tween0, tween1;\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = (tween0 = tween).slice();\n        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1[i] = t;\n            break;\n          }\n        }\n        if (i === n) tween1.push(t);\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function transition_tween(name, value) {\n    var id = this._id;\n\n    name += \"\";\n\n    if (arguments.length < 2) {\n      var tween = get$1(this.node(), id).tween;\n      for (var i = 0, n = tween.length, t; i < n; ++i) {\n        if ((t = tween[i]).name === name) {\n          return t.value;\n        }\n      }\n      return null;\n    }\n\n    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n  }\n\n  function tweenValue(transition, name, value) {\n    var id = transition._id;\n\n    transition.each(function() {\n      var schedule = set$2(this, id);\n      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n    });\n\n    return function(node) {\n      return get$1(node, id).value[name];\n    };\n  }\n\n  function interpolate$1(a, b) {\n    var c;\n    return (typeof b === \"number\" ? interpolateNumber\n        : b instanceof color ? interpolateRgb\n        : (c = color(b)) ? (b = c, interpolateRgb)\n        : interpolateString)(a, b);\n  }\n\n  function attrRemove$1(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS$1(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrConstantNS$1(fullname, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttribute(name);\n      value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function attrFunctionNS$1(fullname, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n      value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_attr(name, value) {\n    var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform$2 : interpolate$1;\n    return this.attrTween(name, typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)\n        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\n  }\n\n  function attrTweenNS(fullname, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttributeNS(fullname.space, fullname.local, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function attrTween(name, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttribute(name, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_attrTween(name, value) {\n    var key = \"attr.\" + name;\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    var fullname = namespace(name);\n    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n  }\n\n  function delayFunction(id, value) {\n    return function() {\n      init(this, id).delay = +value.apply(this, arguments);\n    };\n  }\n\n  function delayConstant(id, value) {\n    return value = +value, function() {\n      init(this, id).delay = value;\n    };\n  }\n\n  function transition_delay(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? delayFunction\n            : delayConstant)(id, value))\n        : get$1(this.node(), id).delay;\n  }\n\n  function durationFunction(id, value) {\n    return function() {\n      set$2(this, id).duration = +value.apply(this, arguments);\n    };\n  }\n\n  function durationConstant(id, value) {\n    return value = +value, function() {\n      set$2(this, id).duration = value;\n    };\n  }\n\n  function transition_duration(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? durationFunction\n            : durationConstant)(id, value))\n        : get$1(this.node(), id).duration;\n  }\n\n  function easeConstant(id, value) {\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      set$2(this, id).ease = value;\n    };\n  }\n\n  function transition_ease(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each(easeConstant(id, value))\n        : get$1(this.node(), id).ease;\n  }\n\n  function transition_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, this._name, this._id);\n  }\n\n  function transition_merge(transition) {\n    if (transition._id !== this._id) throw new Error;\n\n    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Transition(merges, this._parents, this._name, this._id);\n  }\n\n  function start$1(name) {\n    return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n      var i = t.indexOf(\".\");\n      if (i >= 0) t = t.slice(0, i);\n      return !t || t === \"start\";\n    });\n  }\n\n  function onFunction(id, name, listener) {\n    var on0, on1, sit = start$1(name) ? init : set$2;\n    return function() {\n      var schedule = sit(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n      schedule.on = on1;\n    };\n  }\n\n  function transition_on(name, listener) {\n    var id = this._id;\n\n    return arguments.length < 2\n        ? get$1(this.node(), id).on.on(name)\n        : this.each(onFunction(id, name, listener));\n  }\n\n  function removeFunction(id) {\n    return function() {\n      var parent = this.parentNode;\n      for (var i in this.__transition) if (+i !== id) return;\n      if (parent) parent.removeChild(this);\n    };\n  }\n\n  function transition_remove() {\n    return this.on(\"end.remove\", removeFunction(this._id));\n  }\n\n  function transition_select(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, name, id);\n  }\n\n  function transition_selectAll(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\n            if (child = children[k]) {\n              schedule(child, name, id, k, children, inherit);\n            }\n          }\n          subgroups.push(children);\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, parents, name, id);\n  }\n\n  var Selection$1 = selection.prototype.constructor;\n\n  function transition_selection() {\n    return new Selection$1(this._groups, this._parents);\n  }\n\n  function styleRemove$1(name, interpolate) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function styleRemoveEnd(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function styleFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = value(this);\n      if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_style(name, value, priority) {\n    var i = (name += \"\") === \"transform\" ? interpolateTransform$1 : interpolate$1;\n    return value == null ? this\n            .styleTween(name, styleRemove$1(name, i))\n            .on(\"end.style.\" + name, styleRemoveEnd(name))\n        : this.styleTween(name, typeof value === \"function\"\n            ? styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value))\n            : styleConstant$1(name, i, value), priority);\n  }\n\n  function styleTween(name, value, priority) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.style.setProperty(name, i(t), priority);\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_styleTween(name, value, priority) {\n    var key = \"style.\" + (name += \"\");\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n  }\n\n  function textConstant$1(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction$1(value) {\n    return function() {\n      var value1 = value(this);\n      this.textContent = value1 == null ? \"\" : value1;\n    };\n  }\n\n  function transition_text(value) {\n    return this.tween(\"text\", typeof value === \"function\"\n        ? textFunction$1(tweenValue(this, \"text\", value))\n        : textConstant$1(value == null ? \"\" : value + \"\"));\n  }\n\n  function transition_transition() {\n    var name = this._name,\n        id0 = this._id,\n        id1 = newId();\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          var inherit = get$1(node, id0);\n          schedule(node, name, id1, i, group, {\n            time: inherit.time + inherit.delay + inherit.duration,\n            delay: 0,\n            duration: inherit.duration,\n            ease: inherit.ease\n          });\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id1);\n  }\n\n  var id = 0;\n\n  function Transition(groups, parents, name, id) {\n    this._groups = groups;\n    this._parents = parents;\n    this._name = name;\n    this._id = id;\n  }\n\n  function transition(name) {\n    return selection().transition(name);\n  }\n\n  function newId() {\n    return ++id;\n  }\n\n  var selection_prototype = selection.prototype;\n\n  Transition.prototype = transition.prototype = {\n    constructor: Transition,\n    select: transition_select,\n    selectAll: transition_selectAll,\n    filter: transition_filter,\n    merge: transition_merge,\n    selection: transition_selection,\n    transition: transition_transition,\n    call: selection_prototype.call,\n    nodes: selection_prototype.nodes,\n    node: selection_prototype.node,\n    size: selection_prototype.size,\n    empty: selection_prototype.empty,\n    each: selection_prototype.each,\n    on: transition_on,\n    attr: transition_attr,\n    attrTween: transition_attrTween,\n    style: transition_style,\n    styleTween: transition_styleTween,\n    text: transition_text,\n    remove: transition_remove,\n    tween: transition_tween,\n    delay: transition_delay,\n    duration: transition_duration,\n    ease: transition_ease\n  };\n\n  var defaultTiming = {\n    time: null, // Set on use.\n    delay: 0,\n    duration: 250,\n    ease: easeCubicInOut\n  };\n\n  function inherit(node, id) {\n    var timing;\n    while (!(timing = node.__transition) || !(timing = timing[id])) {\n      if (!(node = node.parentNode)) {\n        return defaultTiming.time = now(), defaultTiming;\n      }\n    }\n    return timing;\n  }\n\n  function selection_transition(name) {\n    var id,\n        timing;\n\n    if (name instanceof Transition) {\n      id = name._id, name = name._name;\n    } else {\n      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n    }\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          schedule(node, name, id, i, group, timing || inherit(node, id));\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id);\n  }\n\n  selection.prototype.interrupt = selection_interrupt;\n  selection.prototype.transition = selection_transition;\n\n  var root$1 = [null];\n\n  function active(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        i;\n\n    if (schedules) {\n      name = name == null ? null : name + \"\";\n      for (i in schedules) {\n        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n          return new Transition([[node]], root$1, name, +i);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  var slice$4 = Array.prototype.slice;\n\n  function identity$5(x) {\n    return x;\n  }\n\n  var top = 1;\n  var right = 2;\n  var bottom = 3;\n  var left = 4;\nvar   epsilon$2 = 1e-6;\n  function translateX(scale0, scale1, d) {\n    var x = scale0(d);\n    return \"translate(\" + (isFinite(x) ? x : scale1(d)) + \",0)\";\n  }\n\n  function translateY(scale0, scale1, d) {\n    var y = scale0(d);\n    return \"translate(0,\" + (isFinite(y) ? y : scale1(d)) + \")\";\n  }\n\n  function center(scale) {\n    var width = scale.bandwidth() / 2;\n    return function(d) {\n      return scale(d) + width;\n    };\n  }\n\n  function entering() {\n    return !this.__axis;\n  }\n\n  function axis(orient, scale) {\n    var tickArguments = [],\n        tickValues = null,\n        tickFormat = null,\n        tickSizeInner = 6,\n        tickSizeOuter = 6,\n        tickPadding = 3;\n\n    function axis(context) {\n      var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n          format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,\n          spacing = Math.max(tickSizeInner, 0) + tickPadding,\n          transform = orient === top || orient === bottom ? translateX : translateY,\n          range = scale.range(),\n          range0 = range[0] + 0.5,\n          range1 = range[range.length - 1] + 0.5,\n          position = (scale.bandwidth ? center : identity$5)(scale.copy()),\n          selection = context.selection ? context.selection() : context,\n          path = selection.selectAll(\".domain\").data([null]),\n          tick = selection.selectAll(\".tick\").data(values, scale).order(),\n          tickExit = tick.exit(),\n          tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n          line = tick.select(\"line\"),\n          text = tick.select(\"text\"),\n          k = orient === top || orient === left ? -1 : 1,\n          x, y = orient === left || orient === right ? (x = \"x\", \"y\") : (x = \"y\", \"x\");\n\n      path = path.merge(path.enter().insert(\"path\", \".tick\")\n          .attr(\"class\", \"domain\")\n          .attr(\"stroke\", \"#000\"));\n\n      tick = tick.merge(tickEnter);\n\n      line = line.merge(tickEnter.append(\"line\")\n          .attr(\"stroke\", \"#000\")\n          .attr(x + \"2\", k * tickSizeInner)\n          .attr(y + \"1\", 0.5)\n          .attr(y + \"2\", 0.5));\n\n      text = text.merge(tickEnter.append(\"text\")\n          .attr(\"fill\", \"#000\")\n          .attr(x, k * spacing)\n          .attr(y, 0.5)\n          .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \".71em\" : \".32em\"));\n\n      if (context !== selection) {\n        path = path.transition(context);\n        tick = tick.transition(context);\n        line = line.transition(context);\n        text = text.transition(context);\n\n        tickExit = tickExit.transition(context)\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(position, this.parentNode.__axis || position, d); });\n\n        tickEnter\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(this.parentNode.__axis || position, position, d); });\n      }\n\n      tickExit.remove();\n\n      path\n          .attr(\"d\", orient === left || orient == right\n              ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter\n              : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\n\n      tick\n          .attr(\"opacity\", 1)\n          .attr(\"transform\", function(d) { return transform(position, position, d); });\n\n      line\n          .attr(x + \"2\", k * tickSizeInner);\n\n      text\n          .attr(x, k * spacing)\n          .text(format);\n\n      selection.filter(entering)\n          .attr(\"fill\", \"none\")\n          .attr(\"font-size\", 10)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n      selection\n          .each(function() { this.__axis = position; });\n    }\n\n    axis.scale = function(_) {\n      return arguments.length ? (scale = _, axis) : scale;\n    };\n\n    axis.ticks = function() {\n      return tickArguments = slice$4.call(arguments), axis;\n    };\n\n    axis.tickArguments = function(_) {\n      return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();\n    };\n\n    axis.tickValues = function(_) {\n      return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();\n    };\n\n    axis.tickFormat = function(_) {\n      return arguments.length ? (tickFormat = _, axis) : tickFormat;\n    };\n\n    axis.tickSize = function(_) {\n      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeInner = function(_) {\n      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeOuter = function(_) {\n      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n    };\n\n    axis.tickPadding = function(_) {\n      return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n    };\n\n    return axis;\n  }\n\n  function axisTop(scale) {\n    return axis(top, scale);\n  }\n\n  function axisRight(scale) {\n    return axis(right, scale);\n  }\n\n  function axisBottom(scale) {\n    return axis(bottom, scale);\n  }\n\n  function axisLeft(scale) {\n    return axis(left, scale);\n  }\n\n  function defaultSeparation(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n    while (children = node.children) node = children[0];\n    return node;\n  }\n\n  function leafRight(node) {\n    var children;\n    while (children = node.children) node = children[children.length - 1];\n    return node;\n  }\n\n  function cluster() {\n    var separation = defaultSeparation,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0;\n\n      // First walk, computing the initial x & y values.\n      root.eachAfter(function(node) {\n        var children = node.children;\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2;\n\n      // Second walk, normalizing x & y to the desired size.\n      return root.eachAfter(nodeSize ? function(node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function(x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n    };\n\n    cluster.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return cluster;\n  }\n\n  function node_each(callback) {\n    var node = this, current, next = [node], children, i, n;\n    do {\n      current = next.reverse(), next = [];\n      while (node = current.pop()) {\n        callback(node), children = node.children;\n        if (children) for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    } while (next.length);\n    return this;\n  }\n\n  function node_eachBefore(callback) {\n    var node = this, nodes = [node], children, i;\n    while (node = nodes.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n    return this;\n  }\n\n  function node_eachAfter(callback) {\n    var node = this, nodes = [node], next = [], children, i, n;\n    while (node = nodes.pop()) {\n      next.push(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n    while (node = next.pop()) {\n      callback(node);\n    }\n    return this;\n  }\n\n  function node_sum(value) {\n    return this.eachAfter(function(node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n      while (--i >= 0) sum += children[i].value;\n      node.value = sum;\n    });\n  }\n\n  function node_sort(compare) {\n    return this.eachBefore(function(node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path(end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n    var k = nodes.length;\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n    return nodes;\n  }\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n    return c;\n  }\n\n  function node_ancestors() {\n    var node = this, nodes = [node];\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n    return nodes;\n  }\n\n  function node_descendants() {\n    var nodes = [];\n    this.each(function(node) {\n      nodes.push(node);\n    });\n    return nodes;\n  }\n\n  function node_leaves() {\n    var leaves = [];\n    this.eachBefore(function(node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links() {\n    var root = this, links = [];\n    root.each(function(node) {\n      if (node !== root) { // Don’t include the root’s parent, if any.\n        links.push({source: node.parent, target: node});\n      }\n    });\n    return links;\n  }\n\n  function hierarchy(data, children) {\n    var root = new Node(data),\n        valued = +data.value && (root.value = data.value),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    if (children == null) children = defaultChildren;\n\n    while (node = nodes.pop()) {\n      if (valued) node.value = +node.data.value;\n      if ((childs = children(node.data)) && (n = childs.length)) {\n        node.children = new Array(n);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new Node(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function defaultChildren(d) {\n    return d.children;\n  }\n\n  function copyData(node) {\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n    do node.height = height;\n    while ((node = node.parent) && (node.height < ++height));\n  }\n\n  function Node(data) {\n    this.data = data;\n    this.depth =\n    this.height = 0;\n    this.parent = null;\n  }\n\n  Node.prototype = hierarchy.prototype = {\n    constructor: Node,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy\n  };\n\n  function Node$2(value) {\n    this._ = value;\n    this.next = null;\n  }\n\n  function shuffle$1(array) {\n    var i,\n        n = (array = array.slice()).length,\n        head = null,\n        node = head;\n\n    while (n) {\n      var next = new Node$2(array[n - 1]);\n      if (node) node = node.next = next;\n      else node = head = next;\n      array[i] = array[--n];\n    }\n\n    return {\n      head: head,\n      tail: node\n    };\n  }\n\n  function enclose(circles) {\n    return encloseN(shuffle$1(circles), []);\n  }\n\n  function encloses(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r - b.r;\n    return dr * dr + 1e-6 > dx * dx + dy * dy;\n  }\n\n  // Returns the smallest circle that contains circles L and intersects circles B.\n  function encloseN(L, B) {\n    var circle,\n        l0 = null,\n        l1 = L.head,\n        l2,\n        p1;\n\n    switch (B.length) {\n      case 1: circle = enclose1(B[0]); break;\n      case 2: circle = enclose2(B[0], B[1]); break;\n      case 3: circle = enclose3(B[0], B[1], B[2]); break;\n    }\n\n    while (l1) {\n      p1 = l1._, l2 = l1.next;\n      if (!circle || !encloses(circle, p1)) {\n\n        // Temporarily truncate L before l1.\n        if (l0) L.tail = l0, l0.next = null;\n        else L.head = L.tail = null;\n\n        B.push(p1);\n        circle = encloseN(L, B); // Note: reorders L!\n        B.pop();\n\n        // Move l1 to the front of L and reconnect the truncated list L.\n        if (L.head) l1.next = L.head, L.head = l1;\n        else l1.next = null, L.head = L.tail = l1;\n        l0 = L.tail, l0.next = l2;\n\n      } else {\n        l0 = l1;\n      }\n      l1 = l2;\n    }\n\n    L.tail = l0;\n    return circle;\n  }\n\n  function enclose1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function enclose2(a, b) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function enclose3(a, b, c) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x3 = c.x, y3 = c.y, r3 = c.r,\n        a2 = 2 * (x1 - x2),\n        b2 = 2 * (y1 - y2),\n        c2 = 2 * (r2 - r1),\n        d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,\n        a3 = 2 * (x1 - x3),\n        b3 = 2 * (y1 - y3),\n        c3 = 2 * (r3 - r1),\n        d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / ab - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / ab - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (xa * xb + ya * yb + r1),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);\n    return {\n      x: xa + xb * r + x1,\n      y: ya + yb * r + y1,\n      r: r\n    };\n  }\n\n  function place(a, b, c) {\n    var ax = a.x,\n        ay = a.y,\n        da = b.r + c.r,\n        db = a.r + c.r,\n        dx = b.x - ax,\n        dy = b.y - ay,\n        dc = dx * dx + dy * dy;\n    if (dc) {\n      var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = ax + x * dx + y * dy;\n      c.y = ay + x * dy - y * dx;\n    } else {\n      c.x = ax + db;\n      c.y = ay;\n    }\n  }\n\n  function intersects(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r + b.r;\n    return dr * dr > dx * dx + dy * dy;\n  }\n\n  function distance2(circle, x, y) {\n    var dx = circle.x - x,\n        dy = circle.y - y;\n    return dx * dx + dy * dy;\n  }\n\n  function Node$1(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = circles.length)) return 0;\n\n    var a, b, c, n;\n\n    // Place the first circle.\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r;\n\n    // Place the second circle.\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r;\n\n    // Place the third circle.\n    place(b, a, c = circles[2]);\n\n    // Initialize the weighted centroid.\n    var aa = a.r * a.r,\n        ba = b.r * b.r,\n        ca = c.r * c.r,\n        oa = aa + ba + ca,\n        ox = aa * a.x + ba * b.x + ca * c.x,\n        oy = aa * a.y + ba * b.y + ca * c.y,\n        cx, cy, i, j, k, sj, sk;\n\n    // Initialize the front-chain using the first three circles a, b and c.\n    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a;\n\n    // Attempt to place each remaining circle…\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n      // If there are only three elements in the front-chain…\n      if ((k = a.previous) === (j = b.next)) {\n        // If the new circle intersects the third circle,\n        // rotate the front chain to try the next position.\n        if (intersects(j._, c._)) {\n          a = b, b = j, --i;\n          continue pack;\n        }\n      }\n\n      // Find the closest intersecting circle on the front-chain, if any.\n      else {\n        sj = j._.r, sk = k._.r;\n        do {\n          if (sj <= sk) {\n            if (intersects(j._, c._)) {\n              b = j, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            j = j.next, sj += j._.r;\n          } else {\n            if (intersects(k._, c._)) {\n              a = k, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            k = k.previous, sk += k._.r;\n          }\n        } while (j !== k.next);\n      }\n\n      // Success! Insert the new circle c between a and b.\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n      // Update the weighted centroid.\n      oa += ca = c._.r * c._.r;\n      ox += ca * c._.x;\n      oy += ca * c._.y;\n\n      // Compute the new closest circle a to centroid.\n      aa = distance2(a._, cx = ox / oa, cy = oy / oa);\n      while ((c = c.next) !== b) {\n        if ((ca = distance2(c._, cx, cy)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n      b = a.next;\n    }\n\n    // Compute the enclosing circle of the front chain.\n    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n    // Translate the circles to put the enclosing circle around the origin.\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n    return c.r;\n  }\n\n  function siblings(circles) {\n    packEnclose(circles);\n    return circles;\n  }\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error;\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n\n  function constant$5(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function index() {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius))\n            .eachAfter(packChildren(padding, 0.5))\n            .eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius))\n            .eachAfter(packChildren(constantZero, 1))\n            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n      return root;\n    }\n\n    pack.radius = function(x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function(x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant$5(+x), pack) : padding;\n    };\n\n    return pack;\n  }\n\n  function radiusLeaf(radius) {\n    return function(node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function(node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function(node) {\n      var parent = node.parent;\n      node.r *= k;\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition() {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 =\n      root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function(node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function(x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function(x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  }\n\nvar   keyPrefix$1 = \"$\";\n  var preroot = {depth: -1};\n  var ambiguous = {};\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  function stratify() {\n    var id = defaultId,\n        parentId = defaultParentId;\n\n    function stratify(data) {\n      var d,\n          i,\n          n = data.length,\n          root,\n          parent,\n          node,\n          nodes = new Array(n),\n          nodeId,\n          nodeKey,\n          nodeByKey = {};\n\n      for (i = 0; i < n; ++i) {\n        d = data[i], node = nodes[i] = new Node(d);\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = keyPrefix$1 + (node.id = nodeId);\n          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], nodeId = parentId(data[i], i, data);\n        if (nodeId == null || !(nodeId += \"\")) {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        } else {\n          parent = nodeByKey[keyPrefix$1 + nodeId];\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);\n          else parent.children = [node];\n          node.parent = parent;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\");\n      root.parent = preroot;\n      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n\n      return root;\n    }\n\n    stratify.id = function(x) {\n      return arguments.length ? (id = required(x), stratify) : id;\n    };\n\n    stratify.parentId = function(x) {\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\n    };\n\n    return stratify;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  }\n\n  // This function works analogously to nextLeft.\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  }\n\n  // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n\n  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n    this.a = this; // ancestor\n    this.z = 0; // prelim\n    this.m = 0; // mod\n    this.c = 0; // change\n    this.s = 0; // shift\n    this.t = null; // thread\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  }\n\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n  function tree() {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root);\n\n      // Compute the layout using Buchheim et al.’s algorithm.\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk);\n\n      // If a fixed node size is specified, scale x and y.\n      if (nodeSize) root.eachBefore(sizeNode);\n\n      // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n        var left = root,\n            right = root,\n            bottom = root;\n        root.eachBefore(function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var s = left === right ? 1 : separation(left, right) / 2,\n            tx = s - left.x,\n            kx = dx / (right.x + s + tx),\n            ky = dy / (bottom.depth || 1);\n        root.eachBefore(function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n\n      return root;\n    }\n\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n\n    // Computes all real x-coordinates by summing up the modifiers recursively.\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n\n    // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function(x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n    };\n\n    tree.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return tree;\n  }\n\n  function treemapSlice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1,\n        n = nodes.length,\n        dx, dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0;\n      minValue = maxValue = sumValue = nodes[i0].value;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (i1 = i0 + 1; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n        minRatio = newRatio;\n      }\n\n      // Position and record the row orientation.\n      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n\n  var squarify = (function custom(ratio) {\n\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  })(phi);\n\n  function index$1() {\n    var tile = squarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 =\n      root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function(x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function(x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function(x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function(x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function(x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function(x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function(x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function(x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function(x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  }\n\n  function binary(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i, n = nodes.length,\n        sum, sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = (value / 2) + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;\n        else hi = mid;\n      }\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if ((y1 - y0) > (x1 - x0)) {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      } else {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      }\n    }\n  }\n\n  function sliceDice(parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var resquarify = (function custom(ratio) {\n\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  })(phi);\n\n  function center$1(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  }\n\n  function constant$6(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  }\n\n  function x$1(d) {\n    return d.x + d.vx;\n  }\n\n  function y$1(d) {\n    return d.y + d.vy;\n  }\n\n  function collide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant$6(radius == null ? 1 : +radius);\n\n    function force() {\n      var i, n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[i], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data, rj = quad.r, r = ri + rj;\n        if (data) {\n          if (data.index > i) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    force.initialize = function(_) {\n      var i, n = (nodes = _).length; radii = new Array(n);\n      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$6(+_), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index$2(d, i) {\n    return i;\n  }\n\n  function link(links) {\n    var id = index$2,\n        strength = defaultStrength,\n        strengths,\n        distance = constant$6(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = map$1(nodes, id),\n          link;\n\n      for (i = 0, count = new Array(n); i < n; ++i) {\n        count[i] = 0;\n      }\n\n      for (i = 0; i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n        ++count[link.source.index], ++count[link.target.index];\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function(_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function(_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function(_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$6(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  function x$2(d) {\n    return d.x;\n  }\n\n  function y$2(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10;\n  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n  function simulation(nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        velocityDecay = 0.6,\n        forces = map$1(),\n        stepper = timer(step),\n        event = dispatch(\"tick\", \"end\");\n\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick() {\n      var i, n = nodes.length, node;\n\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function(_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n      },\n\n      alpha: function(_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n\n      alphaMin: function(_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n\n      alphaDecay: function(_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n\n      alphaTarget: function(_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n\n      velocityDecay: function(_) {\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n      },\n\n      force: function(name, _) {\n        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n      },\n\n      find: function(x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;\n        else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function manyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant$6(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0, q, c, x, y, i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = q.value)) {\n            strength += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / strength;\n        quad.y = y / strength;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n        q = quad;\n        q.x = q.data.x;\n        q.y = q.data.y;\n        do strength += strengths[q.data.index];\n        while (q = q.next);\n      }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function(_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function(_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function(_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function x$3(x) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant$6(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function y$3(y) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant$6(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  function nopropagation() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  function dragDisable(view) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", noevent, true);\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", noevent, true);\n    } else {\n      root.__noselect = root.style.MozUserSelect;\n      root.style.MozUserSelect = \"none\";\n    }\n  }\n\n  function dragEnable(view, noclick) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", null);\n    if (noclick) {\n      selection.on(\"click.drag\", noevent, true);\n      setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n    }\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", null);\n    } else {\n      root.style.MozUserSelect = root.__noselect;\n      delete root.__noselect;\n    }\n  }\n\n  function constant$7(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n    this.target = target;\n    this.type = type;\n    this.subject = subject;\n    this.identifier = id;\n    this.active = active;\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this._ = dispatch;\n  }\n\n  DragEvent.prototype.on = function() {\n    var value = this._.on.apply(this._, arguments);\n    return value === this._ ? this : value;\n  };\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !exports.event.button;\n  }\n\n  function defaultContainer() {\n    return this.parentNode;\n  }\n\n  function defaultSubject(d) {\n    return d == null ? {x: exports.event.x, y: exports.event.y} : d;\n  }\n\n  function drag() {\n    var filter = defaultFilter,\n        container = defaultContainer,\n        subject = defaultSubject,\n        gestures = {},\n        listeners = dispatch(\"start\", \"drag\", \"end\"),\n        active = 0,\n        mousemoving,\n        touchending;\n\n    function drag(selection) {\n      selection\n          .on(\"mousedown.drag\", mousedowned)\n          .on(\"touchstart.drag\", touchstarted)\n          .on(\"touchmove.drag\", touchmoved)\n          .on(\"touchend.drag touchcancel.drag\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\n      if (!gesture) return;\n      select(exports.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n      dragDisable(exports.event.view);\n      nopropagation();\n      mousemoving = false;\n      gesture(\"start\");\n    }\n\n    function mousemoved() {\n      noevent();\n      mousemoving = true;\n      gestures.mouse(\"drag\");\n    }\n\n    function mouseupped() {\n      select(exports.event.view).on(\"mousemove.drag mouseup.drag\", null);\n      dragEnable(exports.event.view, mousemoving);\n      noevent();\n      gestures.mouse(\"end\");\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var touches = exports.event.changedTouches,\n          c = container.apply(this, arguments),\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\n          nopropagation();\n          gesture(\"start\");\n        }\n      }\n    }\n\n    function touchmoved() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          noevent();\n          gesture(\"drag\");\n        }\n      }\n    }\n\n    function touchended() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          nopropagation();\n          gesture(\"end\");\n        }\n      }\n    }\n\n    function beforestart(id, container, point, that, args) {\n      var p = point(container, id), s, dx, dy,\n          sublisteners = listeners.copy();\n\n      if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\n        if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;\n        dx = s.x - p[0] || 0;\n        dy = s.y - p[1] || 0;\n        return true;\n      })) return;\n\n      return function gesture(type) {\n        var p0 = p, n;\n        switch (type) {\n          case \"start\": gestures[id] = gesture, n = active++; break;\n          case \"end\": delete gestures[id], --active; // nobreak\n          case \"drag\": p = point(container, id), n = active; break;\n        }\n        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n      };\n    }\n\n    drag.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$7(!!_), drag) : filter;\n    };\n\n    drag.container = function(_) {\n      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$7(_), drag) : container;\n    };\n\n    drag.subject = function(_) {\n      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$7(_), drag) : subject;\n    };\n\n    drag.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? drag : value;\n    };\n\n    return drag;\n  }\n\n  function constant$8(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function x$4(d) {\n    return d[0];\n  }\n\n  function y$4(d) {\n    return d[1];\n  }\n\n  function RedBlackTree() {\n    this._ = null; // root node\n  }\n\n  function RedBlackNode(node) {\n    node.U = // parent node\n    node.C = // color - true for red, false for black\n    node.L = // left node\n    node.R = // right node\n    node.P = // previous node\n    node.N = null; // next node\n  }\n\n  RedBlackTree.prototype = {\n    constructor: RedBlackTree,\n\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = RedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              RedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              RedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n\n      var parent = node.U,\n          sibling,\n          left = node.L,\n          right = node.R,\n          next,\n          red;\n\n      if (!left) next = right;\n      else if (!right) next = left;\n      else next = RedBlackFirst(right);\n\n      if (parent) {\n        if (parent.L === node) parent.L = next;\n        else parent.R = next;\n      } else {\n        this._ = next;\n      }\n\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) { node.C = false; return; }\n\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if ((sibling.L && sibling.L.C)\n              || (sibling.R && sibling.R.C)) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              RedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            RedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              RedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            RedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n\n      if (node) node.C = false;\n    }\n  };\n\n  function RedBlackRotateLeft(tree, node) {\n    var p = node,\n        q = node.R,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n\n  function RedBlackRotateRight(tree, node) {\n    var p = node,\n        q = node.L,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n\n  function RedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n\n  function createEdge(left, right, v0, v1) {\n    var edge = [null, null],\n        index = edges.push(edge) - 1;\n    edge.left = left;\n    edge.right = right;\n    if (v0) setEdgeEnd(edge, left, right, v0);\n    if (v1) setEdgeEnd(edge, right, left, v1);\n    cells[left.index].halfedges.push(index);\n    cells[right.index].halfedges.push(index);\n    return edge;\n  }\n\n  function createBorderEdge(left, v0, v1) {\n    var edge = [v0, v1];\n    edge.left = left;\n    return edge;\n  }\n\n  function setEdgeEnd(edge, left, right, vertex) {\n    if (!edge[0] && !edge[1]) {\n      edge[0] = vertex;\n      edge.left = left;\n      edge.right = right;\n    } else if (edge.left === right) {\n      edge[1] = vertex;\n    } else {\n      edge[0] = vertex;\n    }\n  }\n\n  // Liang–Barsky line clipping.\n  function clipEdge(edge, x0, y0, x1, y1) {\n    var a = edge[0],\n        b = edge[1],\n        ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n    return true;\n  }\n\n  function connectEdge(edge, x0, y0, x1, y1) {\n    var v1 = edge[1];\n    if (v1) return true;\n\n    var v0 = edge[0],\n        left = edge.left,\n        right = edge.right,\n        lx = left[0],\n        ly = left[1],\n        rx = right[0],\n        ry = right[1],\n        fx = (lx + rx) / 2,\n        fy = (ly + ry) / 2,\n        fm,\n        fb;\n\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!v0) v0 = [fx, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [fx, y1];\n      } else {\n        if (!v0) v0 = [fx, y1];\n        else if (v0[1] < y0) return;\n        v1 = [fx, y0];\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!v0) v0 = [(y0 - fb) / fm, y0];\n          else if (v0[1] >= y1) return;\n          v1 = [(y1 - fb) / fm, y1];\n        } else {\n          if (!v0) v0 = [(y1 - fb) / fm, y1];\n          else if (v0[1] < y0) return;\n          v1 = [(y0 - fb) / fm, y0];\n        }\n      } else {\n        if (ly < ry) {\n          if (!v0) v0 = [x0, fm * x0 + fb];\n          else if (v0[0] >= x1) return;\n          v1 = [x1, fm * x1 + fb];\n        } else {\n          if (!v0) v0 = [x1, fm * x1 + fb];\n          else if (v0[0] < x0) return;\n          v1 = [x0, fm * x0 + fb];\n        }\n      }\n    }\n\n    edge[0] = v0;\n    edge[1] = v1;\n    return true;\n  }\n\n  function clipEdges(x0, y0, x1, y1) {\n    var i = edges.length,\n        edge;\n\n    while (i--) {\n      if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n          || !clipEdge(edge, x0, y0, x1, y1)\n          || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3\n              || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {\n        delete edges[i];\n      }\n    }\n  }\n\n  function createCell(site) {\n    return cells[site.index] = {\n      site: site,\n      halfedges: []\n    };\n  }\n\n  function cellHalfedgeAngle(cell, edge) {\n    var site = cell.site,\n        va = edge.left,\n        vb = edge.right;\n    if (site === vb) vb = va, va = site;\n    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n    if (site === va) va = edge[1], vb = edge[0];\n    else va = edge[0], vb = edge[1];\n    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n  }\n\n  function cellHalfedgeStart(cell, edge) {\n    return edge[+(edge.left !== cell.site)];\n  }\n\n  function cellHalfedgeEnd(cell, edge) {\n    return edge[+(edge.left === cell.site)];\n  }\n\n  function sortCellHalfedges() {\n    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n        var index = new Array(m),\n            array = new Array(m);\n        for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n        index.sort(function(i, j) { return array[j] - array[i]; });\n        for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n        for (j = 0; j < m; ++j) halfedges[j] = array[j];\n      }\n    }\n  }\n\n  function clipCells(x0, y0, x1, y1) {\n    var nCells = cells.length,\n        iCell,\n        cell,\n        site,\n        iHalfedge,\n        halfedges,\n        nHalfedges,\n        start,\n        startX,\n        startY,\n        end,\n        endX,\n        endY,\n        cover = true;\n\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        halfedges = cell.halfedges;\n        iHalfedge = halfedges.length;\n\n        // Remove any dangling clipped edges.\n        while (iHalfedge--) {\n          if (!edges[halfedges[iHalfedge]]) {\n            halfedges.splice(iHalfedge, 1);\n          }\n        }\n\n        // Insert any border edges as necessary.\n        iHalfedge = 0, nHalfedges = halfedges.length;\n        while (iHalfedge < nHalfedges) {\n          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n          if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {\n            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n                Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]\n                : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]\n                : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]\n                : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]\n                : null)) - 1);\n            ++nHalfedges;\n          }\n        }\n\n        if (nHalfedges) cover = false;\n      }\n    }\n\n    // If there weren’t any edges, have the closest site cover the extent.\n    // It doesn’t matter which corner of the extent we measure!\n    if (cover) {\n      var dx, dy, d2, dc = Infinity;\n\n      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n        if (cell = cells[iCell]) {\n          site = cell.site;\n          dx = site[0] - x0;\n          dy = site[1] - y0;\n          d2 = dx * dx + dy * dy;\n          if (d2 < dc) dc = d2, cover = cell;\n        }\n      }\n\n      if (cover) {\n        var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n        cover.halfedges.push(\n          edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n          edges.push(createBorderEdge(site, v01, v11)) - 1,\n          edges.push(createBorderEdge(site, v11, v10)) - 1,\n          edges.push(createBorderEdge(site, v10, v00)) - 1\n        );\n      }\n    }\n\n    // Lastly delete any cells with no edges; these were entirely clipped.\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        if (!cell.halfedges.length) {\n          delete cells[iCell];\n        }\n      }\n    }\n  }\n\n  var circlePool = [];\n\n  var firstCircle;\n\n  function Circle() {\n    RedBlackNode(this);\n    this.x =\n    this.y =\n    this.arc =\n    this.site =\n    this.cy = null;\n  }\n\n  function attachCircle(arc) {\n    var lArc = arc.P,\n        rArc = arc.N;\n\n    if (!lArc || !rArc) return;\n\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n\n    if (lSite === rSite) return;\n\n    var bx = cSite[0],\n        by = cSite[1],\n        ax = lSite[0] - bx,\n        ay = lSite[1] - by,\n        cx = rSite[0] - bx,\n        cy = rSite[1] - by;\n\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -epsilon2$1) return;\n\n    var ha = ax * ax + ay * ay,\n        hc = cx * cx + cy * cy,\n        x = (cy * ha - ay * hc) / d,\n        y = (ax * hc - cx * ha) / d;\n\n    var circle = circlePool.pop() || new Circle;\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n    arc.circle = circle;\n\n    var before = null,\n        node = circles._;\n\n    while (node) {\n      if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n        if (node.L) node = node.L;\n        else { before = node.P; break; }\n      } else {\n        if (node.R) node = node.R;\n        else { before = node; break; }\n      }\n    }\n\n    circles.insert(before, circle);\n    if (!before) firstCircle = circle;\n  }\n\n  function detachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) firstCircle = circle.N;\n      circles.remove(circle);\n      circlePool.push(circle);\n      RedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n\n  var beachPool = [];\n\n  function Beach() {\n    RedBlackNode(this);\n    this.edge =\n    this.site =\n    this.circle = null;\n  }\n\n  function createBeach(site) {\n    var beach = beachPool.pop() || new Beach;\n    beach.site = site;\n    return beach;\n  }\n\n  function detachBeach(beach) {\n    detachCircle(beach);\n    beaches.remove(beach);\n    beachPool.push(beach);\n    RedBlackNode(beach);\n  }\n\n  function removeBeach(beach) {\n    var circle = beach.circle,\n        x = circle.x,\n        y = circle.cy,\n        vertex = [x, y],\n        previous = beach.P,\n        next = beach.N,\n        disappearing = [beach];\n\n    detachBeach(beach);\n\n    var lArc = previous;\n    while (lArc.circle\n        && Math.abs(x - lArc.circle.x) < epsilon$3\n        && Math.abs(y - lArc.circle.cy) < epsilon$3) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      detachBeach(lArc);\n      lArc = previous;\n    }\n\n    disappearing.unshift(lArc);\n    detachCircle(lArc);\n\n    var rArc = next;\n    while (rArc.circle\n        && Math.abs(x - rArc.circle.x) < epsilon$3\n        && Math.abs(y - rArc.circle.cy) < epsilon$3) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      detachBeach(rArc);\n      rArc = next;\n    }\n\n    disappearing.push(rArc);\n    detachCircle(rArc);\n\n    var nArcs = disappearing.length,\n        iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function addBeach(site) {\n    var x = site[0],\n        directrix = site[1],\n        lArc,\n        rArc,\n        dxl,\n        dxr,\n        node = beaches._;\n\n    while (node) {\n      dxl = leftBreakPoint(node, directrix) - x;\n      if (dxl > epsilon$3) node = node.L; else {\n        dxr = x - rightBreakPoint(node, directrix);\n        if (dxr > epsilon$3) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -epsilon$3) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -epsilon$3) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n\n    createCell(site);\n    var newArc = createBeach(site);\n    beaches.insert(lArc, newArc);\n\n    if (!lArc && !rArc) return;\n\n    if (lArc === rArc) {\n      detachCircle(lArc);\n      rArc = createBeach(lArc.site);\n      beaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n      attachCircle(lArc);\n      attachCircle(rArc);\n      return;\n    }\n\n    if (!rArc) { // && lArc\n      newArc.edge = createEdge(lArc.site, newArc.site);\n      return;\n    }\n\n    // else lArc !== rArc\n    detachCircle(lArc);\n    detachCircle(rArc);\n\n    var lSite = lArc.site,\n        ax = lSite[0],\n        ay = lSite[1],\n        bx = site[0] - ax,\n        by = site[1] - ay,\n        rSite = rArc.site,\n        cx = rSite[0] - ax,\n        cy = rSite[1] - ay,\n        d = 2 * (bx * cy - by * cx),\n        hb = bx * bx + by * by,\n        hc = cx * cx + cy * cy,\n        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n    setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = createEdge(lSite, site, null, vertex);\n    rArc.edge = createEdge(site, rSite, null, vertex);\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function leftBreakPoint(arc, directrix) {\n    var site = arc.site,\n        rfocx = site[0],\n        rfocy = site[1],\n        pby2 = rfocy - directrix;\n\n    if (!pby2) return rfocx;\n\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n\n    site = lArc.site;\n    var lfocx = site[0],\n        lfocy = site[1],\n        plby2 = lfocy - directrix;\n\n    if (!plby2) return lfocx;\n\n    var hl = lfocx - rfocx,\n        aby2 = 1 / pby2 - 1 / plby2,\n        b = hl / plby2;\n\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n    return (rfocx + lfocx) / 2;\n  }\n\n  function rightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return leftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site[1] === directrix ? site[0] : Infinity;\n  }\n\n  var epsilon$3 = 1e-6;\n  var epsilon2$1 = 1e-12;\n  var beaches;\n  var cells;\n  var circles;\n  var edges;\n\n  function triangleArea(a, b, c) {\n    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n  }\n\n  function lexicographic(a, b) {\n    return b[1] - a[1]\n        || b[0] - a[0];\n  }\n\n  function Diagram(sites, extent) {\n    var site = sites.sort(lexicographic).pop(),\n        x,\n        y,\n        circle;\n\n    edges = [];\n    cells = new Array(sites.length);\n    beaches = new RedBlackTree;\n    circles = new RedBlackTree;\n\n    while (true) {\n      circle = firstCircle;\n      if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n        if (site[0] !== x || site[1] !== y) {\n          addBeach(site);\n          x = site[0], y = site[1];\n        }\n        site = sites.pop();\n      } else if (circle) {\n        removeBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n\n    sortCellHalfedges();\n\n    if (extent) {\n      var x0 = +extent[0][0],\n          y0 = +extent[0][1],\n          x1 = +extent[1][0],\n          y1 = +extent[1][1];\n      clipEdges(x0, y0, x1, y1);\n      clipCells(x0, y0, x1, y1);\n    }\n\n    this.edges = edges;\n    this.cells = cells;\n\n    beaches =\n    circles =\n    edges =\n    cells = null;\n  }\n\n  Diagram.prototype = {\n    constructor: Diagram,\n\n    polygons: function() {\n      var edges = this.edges;\n\n      return this.cells.map(function(cell) {\n        var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n        polygon.data = cell.site.data;\n        return polygon;\n      });\n    },\n\n    triangles: function() {\n      var triangles = [],\n          edges = this.edges;\n\n      this.cells.forEach(function(cell, i) {\n        var site = cell.site,\n            halfedges = cell.halfedges,\n            j = -1,\n            m = halfedges.length,\n            s0,\n            e1 = edges[halfedges[m - 1]],\n            s1 = e1.left === site ? e1.right : e1.left;\n\n        while (++j < m) {\n          s0 = s1;\n          e1 = edges[halfedges[j]];\n          s1 = e1.left === site ? e1.right : e1.left;\n          if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n            triangles.push([site.data, s0.data, s1.data]);\n          }\n        }\n      });\n\n      return triangles;\n    },\n\n    links: function() {\n      return this.edges.filter(function(edge) {\n        return edge.right;\n      }).map(function(edge) {\n        return {\n          source: edge.left.data,\n          target: edge.right.data\n        };\n      });\n    }\n  }\n\n  function voronoi() {\n    var x = x$4,\n        y = y$4,\n        extent = null;\n\n    function voronoi(data) {\n      return new Diagram(data.map(function(d, i) {\n        var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];\n        s.index = i;\n        s.data = d;\n        return s;\n      }), extent);\n    }\n\n    voronoi.polygons = function(data) {\n      return voronoi(data).polygons();\n    };\n\n    voronoi.links = function(data) {\n      return voronoi(data).links();\n    };\n\n    voronoi.triangles = function(data) {\n      return voronoi(data).triangles();\n    };\n\n    voronoi.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : x;\n    };\n\n    voronoi.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : y;\n    };\n\n    voronoi.extent = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n    };\n\n    voronoi.size = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n    };\n\n    return voronoi;\n  }\n\n  function constant$9(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function ZoomEvent(target, type, transform) {\n    this.target = target;\n    this.type = type;\n    this.transform = transform;\n  }\n\n  function Transform(k, x, y) {\n    this.k = k;\n    this.x = x;\n    this.y = y;\n  }\n\n  Transform.prototype = {\n    constructor: Transform,\n    scale: function(k) {\n      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n    },\n    translate: function(x, y) {\n      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n    },\n    apply: function(point) {\n      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n    },\n    applyX: function(x) {\n      return x * this.k + this.x;\n    },\n    applyY: function(y) {\n      return y * this.k + this.y;\n    },\n    invert: function(location) {\n      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n    },\n    invertX: function(x) {\n      return (x - this.x) / this.k;\n    },\n    invertY: function(y) {\n      return (y - this.y) / this.k;\n    },\n    rescaleX: function(x) {\n      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n    },\n    rescaleY: function(y) {\n      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n    },\n    toString: function() {\n      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n    }\n  };\n\n  var identity$6 = new Transform(1, 0, 0);\n\n  transform.prototype = Transform.prototype;\n\n  function transform(node) {\n    return node.__zoom || identity$6;\n  }\n\n  function nopropagation$1() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$1() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$1() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent() {\n    var e = this, w, h;\n    if (e instanceof SVGElement) {\n      e = e.ownerSVGElement || e;\n      w = e.width.baseVal.value;\n      h = e.height.baseVal.value;\n    } else {\n      w = e.clientWidth;\n      h = e.clientHeight;\n    }\n    return [[0, 0], [w, h]];\n  }\n\n  function defaultTransform() {\n    return this.__zoom || identity$6;\n  }\n\n  function zoom() {\n    var filter = defaultFilter$1,\n        extent = defaultExtent,\n        k0 = 0,\n        k1 = Infinity,\n        x0 = -k1,\n        x1 = k1,\n        y0 = x0,\n        y1 = x1,\n        duration = 250,\n        gestures = [],\n        listeners = dispatch(\"start\", \"zoom\", \"end\"),\n        touchstarting,\n        touchending,\n        touchDelay = 500,\n        wheelDelay = 150;\n\n    function zoom(selection) {\n      selection\n          .on(\"wheel.zoom\", wheeled)\n          .on(\"mousedown.zoom\", mousedowned)\n          .on(\"dblclick.zoom\", dblclicked)\n          .on(\"touchstart.zoom\", touchstarted)\n          .on(\"touchmove.zoom\", touchmoved)\n          .on(\"touchend.zoom touchcancel.zoom\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .property(\"__zoom\", defaultTransform);\n    }\n\n    zoom.transform = function(collection, transform) {\n      var selection = collection.selection ? collection.selection() : collection;\n      selection.property(\"__zoom\", defaultTransform);\n      if (collection !== selection) {\n        schedule(collection, transform);\n      } else {\n        selection.interrupt().each(function() {\n          gesture(this, arguments)\n              .start()\n              .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n              .end();\n        });\n      }\n    };\n\n    zoom.scaleBy = function(selection, k) {\n      zoom.scaleTo(selection, function() {\n        var k0 = this.__zoom.k,\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return k0 * k1;\n      });\n    };\n\n    zoom.scaleTo = function(selection, k) {\n      zoom.transform(selection, function() {\n        var e = extent.apply(this, arguments),\n            t0 = this.__zoom,\n            p0 = centroid(e),\n            p1 = t0.invert(p0),\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return constrain(translate(scale(t0, k1), p0, p1), e);\n      });\n    };\n\n    zoom.translateBy = function(selection, x, y) {\n      zoom.transform(selection, function() {\n        return constrain(this.__zoom.translate(\n          typeof x === \"function\" ? x.apply(this, arguments) : x,\n          typeof y === \"function\" ? y.apply(this, arguments) : y\n        ), extent.apply(this, arguments));\n      });\n    };\n\n    function scale(transform, k) {\n      k = Math.max(k0, Math.min(k1, k));\n      return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n    }\n\n    function translate(transform, p0, p1) {\n      var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n    }\n\n    function constrain(transform, extent) {\n      var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1),\n          dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);\n      return dx || dy ? transform.translate(dx, dy) : transform;\n    }\n\n    function centroid(extent) {\n      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n    }\n\n    function schedule(transition, transform, center) {\n      transition\n          .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\n          .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\n          .tween(\"zoom\", function() {\n            var that = this,\n                args = arguments,\n                g = gesture(that, args),\n                e = extent.apply(that, args),\n                p = center || centroid(e),\n                w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n                a = that.__zoom,\n                b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n                i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n            return function(t) {\n              if (t === 1) t = b; // Avoid rounding error on end.\n              else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n              g.zoom(null, t);\n            };\n          });\n    }\n\n    function gesture(that, args) {\n      for (var i = 0, n = gestures.length, g; i < n; ++i) {\n        if ((g = gestures[i]).that === that) {\n          return g;\n        }\n      }\n      return new Gesture(that, args);\n    }\n\n    function Gesture(that, args) {\n      this.that = that;\n      this.args = args;\n      this.index = -1;\n      this.active = 0;\n      this.extent = extent.apply(that, args);\n    }\n\n    Gesture.prototype = {\n      start: function() {\n        if (++this.active === 1) {\n          this.index = gestures.push(this) - 1;\n          this.emit(\"start\");\n        }\n        return this;\n      },\n      zoom: function(key, transform) {\n        if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\n        if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n        if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n        this.that.__zoom = transform;\n        this.emit(\"zoom\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) {\n          gestures.splice(this.index, 1);\n          this.index = -1;\n          this.emit(\"end\");\n        }\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function wheeled() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          t = this.__zoom,\n          k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),\n          p = mouse(this);\n\n      // If the mouse is in the same location as before, reuse it.\n      // If there were recent wheel events, reset the wheel idle timeout.\n      if (g.wheel) {\n        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n          g.mouse[1] = t.invert(g.mouse[0] = p);\n        }\n        clearTimeout(g.wheel);\n      }\n\n      // If this wheel event won’t trigger a transform change, ignore it.\n      else if (t.k === k) return;\n\n      // Otherwise, capture the mouse point and location at the start.\n      else {\n        g.mouse = [p, t.invert(p)];\n        interrupt(this);\n        g.start();\n      }\n\n      noevent$1();\n      g.wheel = setTimeout(wheelidled, wheelDelay);\n      g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));\n\n      function wheelidled() {\n        g.wheel = null;\n        g.end();\n      }\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          v = select(exports.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\n          p = mouse(this);\n\n      dragDisable(exports.event.view);\n      nopropagation$1();\n      g.mouse = [p, this.__zoom.invert(p)];\n      interrupt(this);\n      g.start();\n\n      function mousemoved() {\n        noevent$1();\n        g.moved = true;\n        g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));\n      }\n\n      function mouseupped() {\n        v.on(\"mousemove.zoom mouseup.zoom\", null);\n        dragEnable(exports.event.view, g.moved);\n        noevent$1();\n        g.end();\n      }\n    }\n\n    function dblclicked() {\n      if (!filter.apply(this, arguments)) return;\n      var t0 = this.__zoom,\n          p0 = mouse(this),\n          p1 = t0.invert(p0),\n          k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),\n          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));\n\n      noevent$1();\n      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\n      else select(this).call(zoom.transform, t1);\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p;\n\n      nopropagation$1();\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        p = [p, this.__zoom.invert(p), t.identifier];\n        if (!g.touch0) g.touch0 = p;\n        else if (!g.touch1) g.touch1 = p;\n      }\n      if (touchstarting) {\n        touchstarting = clearTimeout(touchstarting);\n        if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);\n      }\n      if (exports.event.touches.length === n) {\n        touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n        interrupt(this);\n        g.start();\n      }\n    }\n\n    function touchmoved() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p, l;\n\n      noevent$1();\n      if (touchstarting) touchstarting = clearTimeout(touchstarting);\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n      }\n      t = g.that.__zoom;\n      if (g.touch1) {\n        var p0 = g.touch0[0], l0 = g.touch0[1],\n            p1 = g.touch1[0], l1 = g.touch1[1],\n            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n        t = scale(t, Math.sqrt(dp / dl));\n        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n      }\n      else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n      else return;\n      g.zoom(\"touch\", constrain(translate(t, p, l), g.extent));\n    }\n\n    function touchended() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t;\n\n      nopropagation$1();\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, touchDelay);\n      for (i = 0; i < n; ++i) {\n        t = touches[i];\n        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n      }\n      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n      if (!g.touch0) g.end();\n    }\n\n    zoom.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$9(!!_), zoom) : filter;\n    };\n\n    zoom.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$9([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n    };\n\n    zoom.scaleExtent = function(_) {\n      return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];\n    };\n\n    zoom.translateExtent = function(_) {\n      return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];\n    };\n\n    zoom.duration = function(_) {\n      return arguments.length ? (duration = +_, zoom) : duration;\n    };\n\n    zoom.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? zoom : value;\n    };\n\n    return zoom;\n  }\n\n  function constant$10(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function BrushEvent(target, type, selection) {\n    this.target = target;\n    this.type = type;\n    this.selection = selection;\n  }\n\n  function nopropagation$2() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$2() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  var MODE_DRAG = {name: \"drag\"};\n  var MODE_SPACE = {name: \"space\"};\n  var MODE_HANDLE = {name: \"handle\"};\n  var MODE_CENTER = {name: \"center\"};\n  var X = {\n    name: \"x\",\n    handles: [\"e\", \"w\"].map(type$1),\n    input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\n    output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n  };\n\n  var Y = {\n    name: \"y\",\n    handles: [\"n\", \"s\"].map(type$1),\n    input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\n    output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n  };\n\n  var XY = {\n    name: \"xy\",\n    handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type$1),\n    input: function(xy) { return xy; },\n    output: function(xy) { return xy; }\n  };\n\n  var cursors = {\n    overlay: \"crosshair\",\n    selection: \"move\",\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n\n  var flipX = {\n    e: \"w\",\n    w: \"e\",\n    nw: \"ne\",\n    ne: \"nw\",\n    se: \"sw\",\n    sw: \"se\"\n  };\n\n  var flipY = {\n    n: \"s\",\n    s: \"n\",\n    nw: \"sw\",\n    ne: \"se\",\n    se: \"ne\",\n    sw: \"nw\"\n  };\n\n  var signsX = {\n    overlay: +1,\n    selection: +1,\n    n: null,\n    e: +1,\n    s: null,\n    w: -1,\n    nw: -1,\n    ne: +1,\n    se: +1,\n    sw: -1\n  };\n\n  var signsY = {\n    overlay: +1,\n    selection: +1,\n    n: -1,\n    e: null,\n    s: +1,\n    w: null,\n    nw: -1,\n    ne: -1,\n    se: +1,\n    sw: +1\n  };\n\n  function type$1(t) {\n    return {type: t};\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$2() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent$1() {\n    var svg = this.ownerSVGElement || this;\n    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n  }\n\n  // Like d3.local, but with the name “__brush” rather than auto-generated.\n  function local$1(node) {\n    while (!node.__brush) if (!(node = node.parentNode)) return;\n    return node.__brush;\n  }\n\n  function empty$1(extent) {\n    return extent[0][0] === extent[1][0]\n        || extent[0][1] === extent[1][1];\n  }\n\n  function brushSelection(node) {\n    var state = node.__brush;\n    return state ? state.dim.output(state.selection) : null;\n  }\n\n  function brushX() {\n    return brush$1(X);\n  }\n\n  function brushY() {\n    return brush$1(Y);\n  }\n\n  function brush() {\n    return brush$1(XY);\n  }\n\n  function brush$1(dim) {\n    var extent = defaultExtent$1,\n        filter = defaultFilter$2,\n        listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\n        handleSize = 6,\n        touchending;\n\n    function brush(group) {\n      var overlay = group\n          .property(\"__brush\", initialize)\n        .selectAll(\".overlay\")\n        .data([type$1(\"overlay\")]);\n\n      overlay.enter().append(\"rect\")\n          .attr(\"class\", \"overlay\")\n          .attr(\"pointer-events\", \"all\")\n          .attr(\"cursor\", cursors.overlay)\n        .merge(overlay)\n          .each(function() {\n            var extent = local$1(this).extent;\n            select(this)\n                .attr(\"x\", extent[0][0])\n                .attr(\"y\", extent[0][1])\n                .attr(\"width\", extent[1][0] - extent[0][0])\n                .attr(\"height\", extent[1][1] - extent[0][1]);\n          });\n\n      group.selectAll(\".selection\")\n        .data([type$1(\"selection\")])\n        .enter().append(\"rect\")\n          .attr(\"class\", \"selection\")\n          .attr(\"cursor\", cursors.selection)\n          .attr(\"fill\", \"#777\")\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"shape-rendering\", \"crispEdges\");\n\n      var handle = group.selectAll(\".handle\")\n        .data(dim.handles, function(d) { return d.type; });\n\n      handle.exit().remove();\n\n      handle.enter().append(\"rect\")\n          .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n          .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n      group\n          .each(redraw)\n          .attr(\"fill\", \"none\")\n          .attr(\"pointer-events\", \"all\")\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .on(\"mousedown.brush touchstart.brush\", started);\n    }\n\n    brush.move = function(group, selection) {\n      if (group.selection) {\n        group\n            .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\n            .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\n            .tween(\"brush\", function() {\n              var that = this,\n                  state = that.__brush,\n                  emit = emitter(that, arguments),\n                  selection0 = state.selection,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                  i = interpolate(selection0, selection1);\n\n              function tween(t) {\n                state.selection = t === 1 && empty$1(selection1) ? null : i(t);\n                redraw.call(that);\n                emit.brush();\n              }\n\n              return selection0 && selection1 ? tween : tween(1);\n            });\n      } else {\n        group\n            .each(function() {\n              var that = this,\n                  args = arguments,\n                  state = that.__brush,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                  emit = emitter(that, args).beforestart();\n\n              interrupt(that);\n              state.selection = selection1 == null || empty$1(selection1) ? null : selection1;\n              redraw.call(that);\n              emit.start().brush().end();\n            });\n      }\n    };\n\n    function redraw() {\n      var group = select(this),\n          selection = local$1(this).selection;\n\n      if (selection) {\n        group.selectAll(\".selection\")\n            .style(\"display\", null)\n            .attr(\"x\", selection[0][0])\n            .attr(\"y\", selection[0][1])\n            .attr(\"width\", selection[1][0] - selection[0][0])\n            .attr(\"height\", selection[1][1] - selection[0][1]);\n\n        group.selectAll(\".handle\")\n            .style(\"display\", null)\n            .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n            .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n            .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n            .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n      }\n\n      else {\n        group.selectAll(\".selection,.handle\")\n            .style(\"display\", \"none\")\n            .attr(\"x\", null)\n            .attr(\"y\", null)\n            .attr(\"width\", null)\n            .attr(\"height\", null);\n      }\n    }\n\n    function emitter(that, args) {\n      return that.__brush.emitter || new Emitter(that, args);\n    }\n\n    function Emitter(that, args) {\n      this.that = that;\n      this.args = args;\n      this.state = that.__brush;\n      this.active = 0;\n    }\n\n    Emitter.prototype = {\n      beforestart: function() {\n        if (++this.active === 1) this.state.emitter = this, this.starting = true;\n        return this;\n      },\n      start: function() {\n        if (this.starting) this.starting = false, this.emit(\"start\");\n        return this;\n      },\n      brush: function() {\n        this.emit(\"brush\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function started() {\n      if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$2(); }\n      else if (touchending) return;\n      if (!filter.apply(this, arguments)) return;\n\n      var that = this,\n          type = exports.event.target.__data__.type,\n          mode = (exports.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),\n          signX = dim === Y ? null : signsX[type],\n          signY = dim === X ? null : signsY[type],\n          state = local$1(that),\n          extent = state.extent,\n          selection = state.selection,\n          W = extent[0][0], w0, w1,\n          N = extent[0][1], n0, n1,\n          E = extent[1][0], e0, e1,\n          S = extent[1][1], s0, s1,\n          dx,\n          dy,\n          moving,\n          shifting = signX && signY && exports.event.shiftKey,\n          lockX,\n          lockY,\n          point0 = mouse(that),\n          point = point0,\n          emit = emitter(that, arguments).beforestart();\n\n      if (type === \"overlay\") {\n        state.selection = selection = [\n          [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\n          [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\n        ];\n      } else {\n        w0 = selection[0][0];\n        n0 = selection[0][1];\n        e0 = selection[1][0];\n        s0 = selection[1][1];\n      }\n\n      w1 = w0;\n      n1 = n0;\n      e1 = e0;\n      s1 = s0;\n\n      var group = select(that)\n          .attr(\"pointer-events\", \"none\");\n\n      var overlay = group.selectAll(\".overlay\")\n          .attr(\"cursor\", cursors[type]);\n\n      if (exports.event.touches) {\n        group\n            .on(\"touchmove.brush\", moved, true)\n            .on(\"touchend.brush touchcancel.brush\", ended, true);\n      } else {\n        var view = select(exports.event.view)\n            .on(\"keydown.brush\", keydowned, true)\n            .on(\"keyup.brush\", keyupped, true)\n            .on(\"mousemove.brush\", moved, true)\n            .on(\"mouseup.brush\", ended, true);\n\n        dragDisable(exports.event.view);\n      }\n\n      nopropagation$2();\n      interrupt(that);\n      redraw.call(that);\n      emit.start();\n\n      function moved() {\n        var point1 = mouse(that);\n        if (shifting && !lockX && !lockY) {\n          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\n          else lockX = true;\n        }\n        point = point1;\n        moving = true;\n        noevent$2();\n        move();\n      }\n\n      function move() {\n        var t;\n\n        dx = point[0] - point0[0];\n        dy = point[1] - point0[1];\n\n        switch (mode) {\n          case MODE_SPACE:\n          case MODE_DRAG: {\n            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n            break;\n          }\n          case MODE_HANDLE: {\n            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n            break;\n          }\n          case MODE_CENTER: {\n            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n            break;\n          }\n        }\n\n        if (e1 < w1) {\n          signX *= -1;\n          t = w0, w0 = e0, e0 = t;\n          t = w1, w1 = e1, e1 = t;\n          if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n        }\n\n        if (s1 < n1) {\n          signY *= -1;\n          t = n0, n0 = s0, s0 = t;\n          t = n1, n1 = s1, s1 = t;\n          if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n        }\n\n        selection = state.selection; // May be set by brush.move!\n\n        if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n        if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n        if (selection[0][0] !== w1\n            || selection[0][1] !== n1\n            || selection[1][0] !== e1\n            || selection[1][1] !== s1) {\n          state.selection = [[w1, n1], [e1, s1]];\n          redraw.call(that);\n          emit.brush();\n        }\n      }\n\n      function ended() {\n        nopropagation$2();\n        if (exports.event.touches) {\n          if (exports.event.touches.length) return;\n          if (touchending) clearTimeout(touchending);\n          touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n          group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n        } else {\n          dragEnable(exports.event.view, moving);\n          view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n        }\n        group.attr(\"pointer-events\", \"all\");\n        overlay.attr(\"cursor\", cursors.overlay);\n        if (empty$1(selection)) state.selection = null, redraw.call(that);\n        emit.end();\n      }\n\n      function keydowned() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            shifting = signX && signY;\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_HANDLE) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE; takes priority over ALT\n            if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n              if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n              mode = MODE_SPACE;\n              overlay.attr(\"cursor\", cursors.selection);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n\n      function keyupped() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            if (shifting) {\n              lockX = lockY = shifting = false;\n              move();\n            }\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE\n            if (mode === MODE_SPACE) {\n              if (exports.event.altKey) {\n                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n                mode = MODE_CENTER;\n              } else {\n                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n                mode = MODE_HANDLE;\n              }\n              overlay.attr(\"cursor\", cursors[type]);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n    }\n\n    function initialize() {\n      var state = this.__brush || {selection: null};\n      state.extent = extent.apply(this, arguments);\n      state.dim = dim;\n      return state;\n    }\n\n    brush.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$10([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n    };\n\n    brush.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$10(!!_), brush) : filter;\n    };\n\n    brush.handleSize = function(_) {\n      return arguments.length ? (handleSize = +_, brush) : handleSize;\n    };\n\n    brush.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? brush : value;\n    };\n\n    return brush;\n  }\n\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var pi$3 = Math.PI;\n  var halfPi$2 = pi$3 / 2;\n  var tau$3 = pi$3 * 2;\n  var max$1 = Math.max;\n\n  function compareValue(compare) {\n    return function(a, b) {\n      return compare(\n        a.source.value + a.target.value,\n        b.source.value + b.target.value\n      );\n    };\n  }\n\n  function chord() {\n    var padAngle = 0,\n        sortGroups = null,\n        sortSubgroups = null,\n        sortChords = null;\n\n    function chord(matrix) {\n      var n = matrix.length,\n          groupSums = [],\n          groupIndex = range(n),\n          subgroupIndex = [],\n          chords = [],\n          groups = chords.groups = new Array(n),\n          subgroups = new Array(n * n),\n          k,\n          x,\n          x0,\n          dx,\n          i,\n          j;\n\n      // Compute the sum.\n      k = 0, i = -1; while (++i < n) {\n        x = 0, j = -1; while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(range(n));\n        k += x;\n      }\n\n      // Sort groups…\n      if (sortGroups) groupIndex.sort(function(a, b) {\n        return sortGroups(groupSums[a], groupSums[b]);\n      });\n\n      // Sort subgroups…\n      if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\n        d.sort(function(a, b) {\n          return sortSubgroups(matrix[i][a], matrix[i][b]);\n        });\n      });\n\n      // Convert the sum to scaling factor for [0, 2pi].\n      // TODO Allow start and end angle to be specified?\n      // TODO Allow padding to be specified as percentage?\n      k = max$1(0, tau$3 - padAngle * n) / k;\n      dx = k ? padAngle : tau$3 / n;\n\n      // Compute the start and end angle for each group and subgroup.\n      // Note: Opera has a bug reordering object literal properties!\n      x = 0, i = -1; while (++i < n) {\n        x0 = x, j = -1; while (++j < n) {\n          var di = groupIndex[i],\n              dj = subgroupIndex[di][j],\n              v = matrix[di][dj],\n              a0 = x,\n              a1 = x += v * k;\n          subgroups[dj * n + di] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += dx;\n      }\n\n      // Generate chords for each (non-empty) subgroup-subgroup link.\n      i = -1; while (++i < n) {\n        j = i - 1; while (++j < n) {\n          var source = subgroups[j * n + i],\n              target = subgroups[i * n + j];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value\n                ? {source: target, target: source}\n                : {source: source, target: target});\n          }\n        }\n      }\n\n      return sortChords ? chords.sort(sortChords) : chords;\n    }\n\n    chord.padAngle = function(_) {\n      return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;\n    };\n\n    chord.sortGroups = function(_) {\n      return arguments.length ? (sortGroups = _, chord) : sortGroups;\n    };\n\n    chord.sortSubgroups = function(_) {\n      return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n    };\n\n    chord.sortChords = function(_) {\n      return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n    };\n\n    return chord;\n  }\n\n  var slice$5 = Array.prototype.slice;\n\n  function constant$11(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultSource(d) {\n    return d.source;\n  }\n\n  function defaultTarget(d) {\n    return d.target;\n  }\n\n  function defaultRadius$1(d) {\n    return d.radius;\n  }\n\n  function defaultStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function defaultEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function ribbon() {\n    var source = defaultSource,\n        target = defaultTarget,\n        radius = defaultRadius$1,\n        startAngle = defaultStartAngle,\n        endAngle = defaultEndAngle,\n        context = null;\n\n    function ribbon() {\n      var buffer,\n          argv = slice$5.call(arguments),\n          s = source.apply(this, argv),\n          t = target.apply(this, argv),\n          sr = +radius.apply(this, (argv[0] = s, argv)),\n          sa0 = startAngle.apply(this, argv) - halfPi$2,\n          sa1 = endAngle.apply(this, argv) - halfPi$2,\n          sx0 = sr * cos(sa0),\n          sy0 = sr * sin(sa0),\n          tr = +radius.apply(this, (argv[0] = t, argv)),\n          ta0 = startAngle.apply(this, argv) - halfPi$2,\n          ta1 = endAngle.apply(this, argv) - halfPi$2;\n\n      if (!context) context = buffer = path();\n\n      context.moveTo(sx0, sy0);\n      context.arc(0, 0, sr, sa0, sa1);\n      if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\n        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n        context.arc(0, 0, tr, ta0, ta1);\n      }\n      context.quadraticCurveTo(0, 0, sx0, sy0);\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    ribbon.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : radius;\n    };\n\n    ribbon.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : startAngle;\n    };\n\n    ribbon.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : endAngle;\n    };\n\n    ribbon.source = function(_) {\n      return arguments.length ? (source = _, ribbon) : source;\n    };\n\n    ribbon.target = function(_) {\n      return arguments.length ? (target = _, ribbon) : target;\n    };\n\n    ribbon.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\n    };\n\n    return ribbon;\n  }\n\n  // Adds floating point numbers with twice the normal precision.\n  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n  // 305–363 (1997).\n  // Code adapted from GeographicLib by Charles F. F. Karney,\n  // http://geographiclib.sourceforge.net/\n\n  function adder() {\n    return new Adder;\n  }\n\n  function Adder() {\n    this.reset();\n  }\n\n  Adder.prototype = {\n    constructor: Adder,\n    reset: function() {\n      this.s = // rounded value\n      this.t = 0; // exact error\n    },\n    add: function(y) {\n      add$1(temp, y, this.t);\n      add$1(this, temp.s, this.s);\n      if (this.s) this.t += temp.t;\n      else this.s = temp.t;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n\n  var temp = new Adder;\n\n  function add$1(adder, a, b) {\n    var x = adder.s = a + b,\n        bv = x - a,\n        av = x - bv;\n    adder.t = (a - av) + (b - bv);\n  }\n\n  var epsilon$4 = 1e-6;\n  var epsilon2$2 = 1e-12;\n  var pi$4 = Math.PI;\n  var halfPi$3 = pi$4 / 2;\n  var quarterPi = pi$4 / 4;\n  var tau$4 = pi$4 * 2;\n\n  var degrees$1 = 180 / pi$4;\n  var radians = pi$4 / 180;\n\n  var abs = Math.abs;\n  var atan = Math.atan;\n  var atan2 = Math.atan2;\n  var cos$1 = Math.cos;\n  var ceil = Math.ceil;\n  var exp = Math.exp;\n  var log$1 = Math.log;\n  var pow$1 = Math.pow;\n  var sin$1 = Math.sin;\n  var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\n  var sqrt$1 = Math.sqrt;\n  var tan = Math.tan;\n\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);\n  }\n\n  function asin$1(x) {\n    return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);\n  }\n\n  function haversin(x) {\n    return (x = sin$1(x / 2)) * x;\n  }\n\n  function noop$2() {}\n\n  function streamGeometry(geometry, stream) {\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n      streamGeometryType[geometry.type](geometry, stream);\n    }\n  }\n\n  var streamObjectType = {\n    Feature: function(feature, stream) {\n      streamGeometry(feature.geometry, stream);\n    },\n    FeatureCollection: function(object, stream) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) streamGeometry(features[i].geometry, stream);\n    }\n  };\n\n  var streamGeometryType = {\n    Sphere: function(object, stream) {\n      stream.sphere();\n    },\n    Point: function(object, stream) {\n      object = object.coordinates;\n      stream.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, stream) {\n      streamLine(object.coordinates, stream, 0);\n    },\n    MultiLineString: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamLine(coordinates[i], stream, 0);\n    },\n    Polygon: function(object, stream) {\n      streamPolygon(object.coordinates, stream);\n    },\n    MultiPolygon: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamPolygon(coordinates[i], stream);\n    },\n    GeometryCollection: function(object, stream) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) streamGeometry(geometries[i], stream);\n    }\n  };\n\n  function streamLine(coordinates, stream, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    stream.lineStart();\n    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n    stream.lineEnd();\n  }\n\n  function streamPolygon(coordinates, stream) {\n    var i = -1, n = coordinates.length;\n    stream.polygonStart();\n    while (++i < n) streamLine(coordinates[i], stream, 1);\n    stream.polygonEnd();\n  }\n\n  function stream(object, stream) {\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\n      streamObjectType[object.type](object, stream);\n    } else {\n      streamGeometry(object, stream);\n    }\n  }\n\n  var areaRingSum;\n\n  var areaSum;\n  var lambda00;\n  var phi00;\n  var lambda0;\n  var cosPhi0;\n  var sinPhi0;\n  var areaStream = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaRingSum.reset();\n      areaStream.lineStart = areaRingStart;\n      areaStream.lineEnd = areaRingEnd;\n    },\n    polygonEnd: function() {\n      var areaRing = +areaRingSum;\n      areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);\n      this.lineStart = this.lineEnd = this.point = noop$2;\n    },\n    sphere: function() {\n      areaSum.add(tau$4);\n    }\n  };\n\n  function areaRingStart() {\n    areaStream.point = areaPointFirst;\n  }\n\n  function areaRingEnd() {\n    areaPoint(lambda00, phi00);\n  }\n\n  function areaPointFirst(lambda, phi) {\n    areaStream.point = areaPoint;\n    lambda00 = lambda, phi00 = phi;\n    lambda *= radians, phi *= radians;\n    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);\n  }\n\n  function areaPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    var dLambda = lambda - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        cosPhi = cos$1(phi),\n        sinPhi = sin$1(phi),\n        k = sinPhi0 * sinPhi,\n        u = cosPhi0 * cosPhi + k * cos$1(adLambda),\n        v = k * sdLambda * sin$1(adLambda);\n    areaRingSum.add(atan2(v, u));\n\n    // Advance the previous points.\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n  }\n\n  function area$2(object) {\n    if (areaSum) areaSum.reset();\n    else areaSum = adder(), areaRingSum = adder();\n    stream(object, areaStream);\n    return areaSum * 2;\n  }\n\n  function spherical(cartesian) {\n    return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];\n  }\n\n  function cartesian(spherical) {\n    var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);\n    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];\n  }\n\n  function cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  function cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  }\n\n  // TODO return a\n  function cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n  }\n\n  function cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  }\n\n  // TODO return d\n  function cartesianNormalizeInPlace(d) {\n    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n  }\n\nvar   lambda0$1;\n  var phi0;\n  var lambda1;\n  var phi1;\n  var lambda2;\nvar   lambda00$1;\nvar   phi00$1;\n  var p0;\n  var deltaSum;\n  var ranges;\nvar   range$1;\n  var boundsStream = {\n    point: boundsPoint,\n    lineStart: boundsLineStart,\n    lineEnd: boundsLineEnd,\n    polygonStart: function() {\n      boundsStream.point = boundsRingPoint;\n      boundsStream.lineStart = boundsRingStart;\n      boundsStream.lineEnd = boundsRingEnd;\n      deltaSum.reset();\n      areaStream.polygonStart();\n    },\n    polygonEnd: function() {\n      areaStream.polygonEnd();\n      boundsStream.point = boundsPoint;\n      boundsStream.lineStart = boundsLineStart;\n      boundsStream.lineEnd = boundsLineEnd;\n      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n      else if (deltaSum > epsilon$4) phi1 = 90;\n      else if (deltaSum < -epsilon$4) phi0 = -90;\n      range$1[0] = lambda0$1, range$1[1] = lambda1;\n    }\n  };\n\n  function boundsPoint(lambda, phi) {\n    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n  }\n\n  function linePoint(lambda, phi) {\n    var p = cartesian([lambda * radians, phi * radians]);\n    if (p0) {\n      var normal = cartesianCross(p0, p),\n          equatorial = [normal[1], -normal[0], 0],\n          inflection = cartesianCross(equatorial, normal);\n      cartesianNormalizeInPlace(inflection);\n      inflection = spherical(inflection);\n      var delta = lambda - lambda2,\n          sign = delta > 0 ? 1 : -1,\n          lambdai = inflection[0] * degrees$1 * sign,\n          phii,\n          antimeridian = abs(delta) > 180;\n      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = inflection[1] * degrees$1;\n        if (phii > phi1) phi1 = phii;\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = -inflection[1] * degrees$1;\n        if (phii < phi0) phi0 = phii;\n      } else {\n        if (phi < phi0) phi0 = phi;\n        if (phi > phi1) phi1 = phi;\n      }\n      if (antimeridian) {\n        if (lambda < lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      } else {\n        if (lambda1 >= lambda0$1) {\n          if (lambda < lambda0$1) lambda0$1 = lambda;\n          if (lambda > lambda1) lambda1 = lambda;\n        } else {\n          if (lambda > lambda2) {\n            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n          } else {\n            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n          }\n        }\n      }\n    } else {\n      boundsPoint(lambda, phi);\n    }\n    p0 = p, lambda2 = lambda;\n  }\n\n  function boundsLineStart() {\n    boundsStream.point = linePoint;\n  }\n\n  function boundsLineEnd() {\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    boundsStream.point = boundsPoint;\n    p0 = null;\n  }\n\n  function boundsRingPoint(lambda, phi) {\n    if (p0) {\n      var delta = lambda - lambda2;\n      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n    } else {\n      lambda00$1 = lambda, phi00$1 = phi;\n    }\n    areaStream.point(lambda, phi);\n    linePoint(lambda, phi);\n  }\n\n  function boundsRingStart() {\n    areaStream.lineStart();\n  }\n\n  function boundsRingEnd() {\n    boundsRingPoint(lambda00$1, phi00$1);\n    areaStream.lineEnd();\n    if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    p0 = null;\n  }\n\n  // Finds the left-right distance between two longitudes.\n  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n  // the distance between ±180° to be 360°.\n  function angle(lambda0, lambda1) {\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n  }\n\n  function rangeCompare(a, b) {\n    return a[0] - b[0];\n  }\n\n  function rangeContains(range, x) {\n    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n  }\n\n  function bounds(feature) {\n    var i, n, a, b, merged, deltaMax, delta;\n\n    if (deltaSum) deltaSum.reset();\n    else deltaSum = adder();\n    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n    ranges = [];\n    stream(feature, boundsStream);\n\n    // First, sort ranges by their minimum longitudes.\n    if (n = ranges.length) {\n      ranges.sort(rangeCompare);\n\n      // Then, merge any ranges that overlap.\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n        b = ranges[i];\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n        } else {\n          merged.push(a = b);\n        }\n      }\n\n      // Finally, find the largest gap between the merged ranges.\n      // The final bounding box will be the inverse of this gap.\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n        b = merged[i];\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n      }\n    }\n\n    ranges = range$1 = null;\n\n    return lambda0$1 === Infinity || phi0 === Infinity\n        ? [[NaN, NaN], [NaN, NaN]]\n        : [[lambda0$1, phi0], [lambda1, phi1]];\n  }\n\n  var W0;\n  var W1;\n  var X0;\n  var Y0;\n  var Z0;\n  var X1;\n  var Y1;\n  var Z1;\n  var X2;\n  var Y2;\n  var Z2;\nvar   lambda00$2;\nvar   phi00$2;\n  var x0;\n  var y0;\n  var z0;\n  // previous point\n\n  var centroidStream = {\n    sphere: noop$2,\n    point: centroidPoint,\n    lineStart: centroidLineStart,\n    lineEnd: centroidLineEnd,\n    polygonStart: function() {\n      centroidStream.lineStart = centroidRingStart;\n      centroidStream.lineEnd = centroidRingEnd;\n    },\n    polygonEnd: function() {\n      centroidStream.lineStart = centroidLineStart;\n      centroidStream.lineEnd = centroidLineEnd;\n    }\n  };\n\n  // Arithmetic mean of Cartesian vectors.\n  function centroidPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));\n  }\n\n  function centroidPointCartesian(x, y, z) {\n    ++W0;\n    X0 += (x - X0) / W0;\n    Y0 += (y - Y0) / W0;\n    Z0 += (z - Z0) / W0;\n  }\n\n  function centroidLineStart() {\n    centroidStream.point = centroidLinePointFirst;\n  }\n\n  function centroidLinePointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidStream.point = centroidLinePoint;\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLinePoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLineEnd() {\n    centroidStream.point = centroidPoint;\n  }\n\n  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n  // J. Applied Mechanics 42, 239 (1975).\n  function centroidRingStart() {\n    centroidStream.point = centroidRingPointFirst;\n  }\n\n  function centroidRingEnd() {\n    centroidRingPoint(lambda00$2, phi00$2);\n    centroidStream.point = centroidPoint;\n  }\n\n  function centroidRingPointFirst(lambda, phi) {\n    lambda00$2 = lambda, phi00$2 = phi;\n    lambda *= radians, phi *= radians;\n    centroidStream.point = centroidRingPoint;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidRingPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        cx = y0 * z - z0 * y,\n        cy = z0 * x - x0 * z,\n        cz = x0 * y - y0 * x,\n        m = sqrt$1(cx * cx + cy * cy + cz * cz),\n        u = x0 * x + y0 * y + z0 * z,\n        v = m && -acos(u) / m, // area weight\n        w = atan2(m, u); // line weight\n    X2 += v * cx;\n    Y2 += v * cy;\n    Z2 += v * cz;\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroid$1(object) {\n    W0 = W1 =\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    stream(object, centroidStream);\n\n    var x = X2,\n        y = Y2,\n        z = Z2,\n        m = x * x + y * y + z * z;\n\n    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n    if (m < epsilon2$2) {\n      x = X1, y = Y1, z = Z1;\n      // If the feature has zero length, fall back to arithmetic mean of point vectors.\n      if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;\n      m = x * x + y * y + z * z;\n      // If the feature still has an undefined ccentroid, then return.\n      if (m < epsilon2$2) return [NaN, NaN];\n    }\n\n    return [atan2(y, x) * degrees$1, asin$1(z / sqrt$1(m)) * degrees$1];\n  }\n\n  function constant$12(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function compose(a, b) {\n\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n\n    return compose;\n  }\n\n  function rotationIdentity(lambda, phi) {\n    return [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];\n  }\n\n  rotationIdentity.invert = rotationIdentity;\n\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n    return (deltaLambda %= tau$4) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n      : rotationLambda(deltaLambda))\n      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n      : rotationIdentity);\n  }\n\n  function forwardRotationLambda(deltaLambda) {\n    return function(lambda, phi) {\n      return lambda += deltaLambda, [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];\n    };\n  }\n\n  function rotationLambda(deltaLambda) {\n    var rotation = forwardRotationLambda(deltaLambda);\n    rotation.invert = forwardRotationLambda(-deltaLambda);\n    return rotation;\n  }\n\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\n    var cosDeltaPhi = cos$1(deltaPhi),\n        sinDeltaPhi = sin$1(deltaPhi),\n        cosDeltaGamma = cos$1(deltaGamma),\n        sinDeltaGamma = sin$1(deltaGamma);\n\n    function rotation(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\n      return [\n        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)\n      ];\n    }\n\n    rotation.invert = function(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\n      return [\n        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)\n      ];\n    };\n\n    return rotation;\n  }\n\n  function rotation(rotate) {\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    }\n\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    };\n\n    return forward;\n  }\n\n  // Generates a circle centered at [0°, 0°], with a given radius and precision.\n  function circleStream(stream, radius, delta, direction, t0, t1) {\n    if (!delta) return;\n    var cosRadius = cos$1(radius),\n        sinRadius = sin$1(radius),\n        step = direction * delta;\n    if (t0 == null) {\n      t0 = radius + direction * tau$4;\n      t1 = radius - step / 2;\n    } else {\n      t0 = circleRadius(cosRadius, t0);\n      t1 = circleRadius(cosRadius, t1);\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;\n    }\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);\n      stream.point(point[0], point[1]);\n    }\n  }\n\n  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n  function circleRadius(cosRadius, point) {\n    point = cartesian(point), point[0] -= cosRadius;\n    cartesianNormalizeInPlace(point);\n    var radius = acos(-point[1]);\n    return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;\n  }\n\n  function circle$1() {\n    var center = constant$12([0, 0]),\n        radius = constant$12(90),\n        precision = constant$12(6),\n        ring,\n        rotate,\n        stream = {point: point};\n\n    function point(x, y) {\n      ring.push(x = rotate(x, y));\n      x[0] *= degrees$1, x[1] *= degrees$1;\n    }\n\n    function circle() {\n      var c = center.apply(this, arguments),\n          r = radius.apply(this, arguments) * radians,\n          p = precision.apply(this, arguments) * radians;\n      ring = [];\n      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n      circleStream(stream, r, p, 1);\n      c = {type: \"Polygon\", coordinates: [ring]};\n      ring = rotate = null;\n      return c;\n    }\n\n    circle.center = function(_) {\n      return arguments.length ? (center = typeof _ === \"function\" ? _ : constant$12([+_[0], +_[1]]), circle) : center;\n    };\n\n    circle.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$12(+_), circle) : radius;\n    };\n\n    circle.precision = function(_) {\n      return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant$12(+_), circle) : precision;\n    };\n\n    return circle;\n  }\n\n  function clipBuffer() {\n    var lines = [],\n        line;\n    return {\n      point: function(x, y) {\n        line.push([x, y]);\n      },\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      lineEnd: noop$2,\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      },\n      result: function() {\n        var result = lines;\n        lines = [];\n        line = null;\n        return result;\n      }\n    };\n  }\n\n  function clipLine(a, b, x0, y0, x1, y1) {\n    var ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n    return true;\n  }\n\n  function pointEqual(a, b) {\n    return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;\n  }\n\n  function Intersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other; // another intersection\n    this.e = entry; // is an entry?\n    this.v = false; // visited\n    this.n = this.p = null; // next & previous\n  }\n\n  // A generalized polygon clipping algorithm: given a polygon that has been cut\n  // into its visible line segments, and rejoins the segments by interpolating\n  // along the clip edge.\n  function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {\n    var subject = [],\n        clip = [],\n        i,\n        n;\n\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n], x;\n\n      // If the first and last points of a segment are coincident, then treat as a\n      // closed ring. TODO if all rings are closed, then the winding order of the\n      // exterior ring should be checked.\n      if (pointEqual(p0, p1)) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n\n      subject.push(x = new Intersection(p0, segment, null, true));\n      clip.push(x.o = new Intersection(p0, null, x, false));\n      subject.push(x = new Intersection(p1, segment, null, false));\n      clip.push(x.o = new Intersection(p1, null, x, true));\n    });\n\n    if (!subject.length) return;\n\n    clip.sort(compareIntersection);\n    link$1(subject);\n    link$1(clip);\n\n    for (i = 0, n = clip.length; i < n; ++i) {\n      clip[i].e = startInside = !startInside;\n    }\n\n    var start = subject[0],\n        points,\n        point;\n\n    while (1) {\n      // Find first unvisited intersection.\n      var current = start,\n          isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      stream.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, stream);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, stream);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      stream.lineEnd();\n    }\n  }\n\n  function link$1(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n\n  var clipMax = 1e9;\n  var clipMin = -clipMax;\n  // TODO Use d3-polygon’s polygonContains here for the ring check?\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\n  function clipExtent(x0, y0, x1, y1) {\n\n    function visible(x, y) {\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n    }\n\n    function interpolate(from, to, direction, stream) {\n      var a = 0, a1 = 0;\n      if (from == null\n          || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n          || comparePoint(from, to) < 0 ^ direction > 0) {\n        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n        while ((a = (a + direction + 4) % 4) !== a1);\n      } else {\n        stream.point(to[0], to[1]);\n      }\n    }\n\n    function corner(p, direction) {\n      return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3\n          : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1\n          : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0\n          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n    }\n\n    function compareIntersection(a, b) {\n      return comparePoint(a.x, b.x);\n    }\n\n    function comparePoint(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb\n          : ca === 0 ? b[1] - a[1]\n          : ca === 1 ? a[0] - b[0]\n          : ca === 2 ? a[1] - b[1]\n          : b[0] - a[0];\n    }\n\n    return function(stream) {\n      var activeStream = stream,\n          bufferStream = clipBuffer(),\n          segments,\n          polygon,\n          ring,\n          x__, y__, v__, // first point\n          x_, y_, v_, // previous point\n          first,\n          clean;\n\n      var clipStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: polygonStart,\n        polygonEnd: polygonEnd\n      };\n\n      function point(x, y) {\n        if (visible(x, y)) activeStream.point(x, y);\n      }\n\n      function polygonInside() {\n        var winding = 0;\n\n        for (var i = 0, n = polygon.length; i < n; ++i) {\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n          }\n        }\n\n        return winding;\n      }\n\n      // Buffer geometry within a polygon and then clip it en masse.\n      function polygonStart() {\n        activeStream = bufferStream, segments = [], polygon = [], clean = true;\n      }\n\n      function polygonEnd() {\n        var startInside = polygonInside(),\n            cleanInside = clean && startInside,\n            visible = (segments = merge(segments)).length;\n        if (cleanInside || visible) {\n          stream.polygonStart();\n          if (cleanInside) {\n            stream.lineStart();\n            interpolate(null, null, 1, stream);\n            stream.lineEnd();\n          }\n          if (visible) {\n            clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n          }\n          stream.polygonEnd();\n        }\n        activeStream = stream, segments = polygon = ring = null;\n      }\n\n      function lineStart() {\n        clipStream.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n\n      // TODO rather than special-case polygons, simply handle them separately.\n      // Ideally, coincident intersection points should be jittered to avoid\n      // clipping issues.\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferStream.rejoin();\n          segments.push(bufferStream.result());\n        }\n        clipStream.point = point;\n        if (v_) activeStream.lineEnd();\n      }\n\n      function linePoint(x, y) {\n        var v = visible(x, y);\n        if (polygon) ring.push([x, y]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n          }\n        } else {\n          if (v && v_) activeStream.point(x, y);\n          else {\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n            if (clipLine(a, b, x0, y0, x1, y1)) {\n              if (!v_) {\n                activeStream.lineStart();\n                activeStream.point(a[0], a[1]);\n              }\n              activeStream.point(b[0], b[1]);\n              if (!v) activeStream.lineEnd();\n              clean = false;\n            } else if (v) {\n              activeStream.lineStart();\n              activeStream.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n\n      return clipStream;\n    };\n  }\n\n  function extent$1() {\n    var x0 = 0,\n        y0 = 0,\n        x1 = 960,\n        y1 = 500,\n        cache,\n        cacheStream,\n        clip;\n\n    return clip = {\n      stream: function(stream) {\n        return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n      },\n      extent: function(_) {\n        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n      }\n    };\n  }\n\n  var lengthSum;\nvar   lambda0$2;\nvar   sinPhi0$1;\nvar   cosPhi0$1;\n  var lengthStream = {\n    sphere: noop$2,\n    point: noop$2,\n    lineStart: lengthLineStart,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2\n  };\n\n  function lengthLineStart() {\n    lengthStream.point = lengthPointFirst;\n    lengthStream.lineEnd = lengthLineEnd;\n  }\n\n  function lengthLineEnd() {\n    lengthStream.point = lengthStream.lineEnd = noop$2;\n  }\n\n  function lengthPointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);\n    lengthStream.point = lengthPoint;\n  }\n\n  function lengthPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var sinPhi = sin$1(phi),\n        cosPhi = cos$1(phi),\n        delta = abs(lambda - lambda0$2),\n        cosDelta = cos$1(delta),\n        sinDelta = sin$1(delta),\n        x = cosPhi * sinDelta,\n        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n    lengthSum.add(atan2(sqrt$1(x * x + y * y), z));\n    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n  }\n\n  function length$2(object) {\n    if (lengthSum) lengthSum.reset();\n    else lengthSum = adder();\n    stream(object, lengthStream);\n    return +lengthSum;\n  }\n\n  var coordinates = [null, null];\nvar   object$1 = {type: \"LineString\", coordinates: coordinates};\n  function distance(a, b) {\n    coordinates[0] = a;\n    coordinates[1] = b;\n    return length$2(object$1);\n  }\n\n  function graticuleX(y0, y1, dy) {\n    var y = range(y0, y1 - epsilon$4, dy).concat(y1);\n    return function(x) { return y.map(function(y) { return [x, y]; }); };\n  }\n\n  function graticuleY(x0, x1, dx) {\n    var x = range(x0, x1 - epsilon$4, dx).concat(x1);\n    return function(y) { return x.map(function(x) { return [x, y]; }); };\n  }\n\n  function graticule() {\n    var x1, x0, X1, X0,\n        y1, y0, Y1, Y0,\n        dx = 10, dy = dx, DX = 90, DY = 360,\n        x, y, X, Y,\n        precision = 2.5;\n\n    function graticule() {\n      return {type: \"MultiLineString\", coordinates: lines()};\n    }\n\n    function lines() {\n      return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n          .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n          .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$4; }).map(x))\n          .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$4; }).map(y));\n    }\n\n    graticule.lines = function() {\n      return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n    };\n\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [\n          X(X0).concat(\n          Y(Y1).slice(1),\n          X(X1).reverse().slice(1),\n          Y(Y0).reverse().slice(1))\n        ]\n      };\n    };\n\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.extentMinor();\n      return graticule.extentMajor(_).extentMinor(_);\n    };\n\n    graticule.extentMajor = function(_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.extentMinor = function(_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.stepMinor();\n      return graticule.stepMajor(_).stepMinor(_);\n    };\n\n    graticule.stepMajor = function(_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n\n    graticule.stepMinor = function(_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = graticuleX(y0, y1, 90);\n      y = graticuleY(x0, x1, precision);\n      X = graticuleX(Y0, Y1, 90);\n      Y = graticuleY(X0, X1, precision);\n      return graticule;\n    };\n\n    return graticule\n        .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])\n        .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);\n  }\n\n  function interpolate$2(a, b) {\n    var x0 = a[0] * radians,\n        y0 = a[1] * radians,\n        x1 = b[0] * radians,\n        y1 = b[1] * radians,\n        cy0 = cos$1(y0),\n        sy0 = sin$1(y0),\n        cy1 = cos$1(y1),\n        sy1 = sin$1(y1),\n        kx0 = cy0 * cos$1(x0),\n        ky0 = cy0 * sin$1(x0),\n        kx1 = cy1 * cos$1(x1),\n        ky1 = cy1 * sin$1(x1),\n        d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n        k = sin$1(d);\n\n    var interpolate = d ? function(t) {\n      var B = sin$1(t *= d) / k,\n          A = sin$1(d - t) / k,\n          x = A * kx0 + B * kx1,\n          y = A * ky0 + B * ky1,\n          z = A * sy0 + B * sy1;\n      return [\n        atan2(y, x) * degrees$1,\n        atan2(z, sqrt$1(x * x + y * y)) * degrees$1\n      ];\n    } : function() {\n      return [x0 * degrees$1, y0 * degrees$1];\n    };\n\n    interpolate.distance = d;\n\n    return interpolate;\n  }\n\n  function identity$7(x) {\n    return x;\n  }\n\nvar   areaSum$1 = adder();\nvar   areaRingSum$1 = adder();\n  var x00;\n  var y00;\nvar   x0$1;\nvar   y0$1;\n  var areaStream$1 = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaStream$1.lineStart = areaRingStart$1;\n      areaStream$1.lineEnd = areaRingEnd$1;\n    },\n    polygonEnd: function() {\n      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;\n      areaSum$1.add(abs(areaRingSum$1));\n      areaRingSum$1.reset();\n    },\n    result: function() {\n      var area = areaSum$1 / 2;\n      areaSum$1.reset();\n      return area;\n    }\n  };\n\n  function areaRingStart$1() {\n    areaStream$1.point = areaPointFirst$1;\n  }\n\n  function areaPointFirst$1(x, y) {\n    areaStream$1.point = areaPoint$1;\n    x00 = x0$1 = x, y00 = y0$1 = y;\n  }\n\n  function areaPoint$1(x, y) {\n    areaRingSum$1.add(y0$1 * x - x0$1 * y);\n    x0$1 = x, y0$1 = y;\n  }\n\n  function areaRingEnd$1() {\n    areaPoint$1(x00, y00);\n  }\n\nvar   x0$2 = Infinity;\nvar   y0$2 = x0$2;\n  var x1 = -x0$2;\n  var y1 = x1;\n  var boundsStream$1 = {\n    point: boundsPoint$1,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2,\n    result: function() {\n      var bounds = [[x0$2, y0$2], [x1, y1]];\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n      return bounds;\n    }\n  };\n\n  function boundsPoint$1(x, y) {\n    if (x < x0$2) x0$2 = x;\n    if (x > x1) x1 = x;\n    if (y < y0$2) y0$2 = y;\n    if (y > y1) y1 = y;\n  }\n\nvar   X0$1 = 0;\nvar   Y0$1 = 0;\nvar   Z0$1 = 0;\nvar   X1$1 = 0;\nvar   Y1$1 = 0;\nvar   Z1$1 = 0;\nvar   X2$1 = 0;\nvar   Y2$1 = 0;\nvar   Z2$1 = 0;\nvar   x00$1;\nvar   y00$1;\nvar   x0$3;\nvar   y0$3;\n  var centroidStream$1 = {\n    point: centroidPoint$1,\n    lineStart: centroidLineStart$1,\n    lineEnd: centroidLineEnd$1,\n    polygonStart: function() {\n      centroidStream$1.lineStart = centroidRingStart$1;\n      centroidStream$1.lineEnd = centroidRingEnd$1;\n    },\n    polygonEnd: function() {\n      centroidStream$1.point = centroidPoint$1;\n      centroidStream$1.lineStart = centroidLineStart$1;\n      centroidStream$1.lineEnd = centroidLineEnd$1;\n    },\n    result: function() {\n      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n          : [NaN, NaN];\n      X0$1 = Y0$1 = Z0$1 =\n      X1$1 = Y1$1 = Z1$1 =\n      X2$1 = Y2$1 = Z2$1 = 0;\n      return centroid;\n    }\n  };\n\n  function centroidPoint$1(x, y) {\n    X0$1 += x;\n    Y0$1 += y;\n    ++Z0$1;\n  }\n\n  function centroidLineStart$1() {\n    centroidStream$1.point = centroidPointFirstLine;\n  }\n\n  function centroidPointFirstLine(x, y) {\n    centroidStream$1.point = centroidPointLine;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidPointLine(x, y) {\n    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidLineEnd$1() {\n    centroidStream$1.point = centroidPoint$1;\n  }\n\n  function centroidRingStart$1() {\n    centroidStream$1.point = centroidPointFirstRing;\n  }\n\n  function centroidRingEnd$1() {\n    centroidPointRing(x00$1, y00$1);\n  }\n\n  function centroidPointFirstRing(x, y) {\n    centroidStream$1.point = centroidPointRing;\n    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n  }\n\n  function centroidPointRing(x, y) {\n    var dx = x - x0$3,\n        dy = y - y0$3,\n        z = sqrt$1(dx * dx + dy * dy);\n\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n\n    z = y0$3 * x - x0$3 * y;\n    X2$1 += z * (x0$3 + x);\n    Y2$1 += z * (y0$3 + y);\n    Z2$1 += z * 3;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function PathContext(context) {\n    var pointRadius = 4.5;\n\n    var stream = {\n      point: point,\n\n      // While inside a line, override point to moveTo then lineTo.\n      lineStart: function() { stream.point = pointLineStart; },\n      lineEnd: lineEnd,\n\n      // While inside a polygon, override lineEnd to closePath.\n      polygonStart: function() { stream.lineEnd = lineEndPolygon; },\n      polygonEnd: function() { stream.lineEnd = lineEnd; stream.point = point; },\n\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n\n      result: noop$2\n    };\n\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, tau$4);\n    }\n\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n\n    function lineEnd() {\n      stream.point = point;\n    }\n\n    function lineEndPolygon() {\n      context.closePath();\n    }\n\n    return stream;\n  }\n\n  function PathString() {\n    var pointCircle = circle$2(4.5),\n        string = [];\n\n    var stream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = circle$2(_);\n        return stream;\n      },\n      result: function() {\n        if (string.length) {\n          var result = string.join(\"\");\n          string = [];\n          return result;\n        }\n      }\n    };\n\n    function point(x, y) {\n      string.push(\"M\", x, \",\", y, pointCircle);\n    }\n\n    function pointLineStart(x, y) {\n      string.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      string.push(\"L\", x, \",\", y);\n    }\n\n    function lineStart() {\n      stream.point = pointLineStart;\n    }\n\n    function lineEnd() {\n      stream.point = point;\n    }\n\n    function lineEndPolygon() {\n      string.push(\"Z\");\n    }\n\n    return stream;\n  }\n\n  function circle$2(radius) {\n    return \"m0,\" + radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n        + \"z\";\n  }\n\n  function index$3() {\n    var pointRadius = 4.5,\n        projection,\n        projectionStream,\n        context,\n        contextStream;\n\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        stream(object, projectionStream(contextStream));\n      }\n      return contextStream.result();\n    }\n\n    path.area = function(object) {\n      stream(object, projectionStream(areaStream$1));\n      return areaStream$1.result();\n    };\n\n    path.bounds = function(object) {\n      stream(object, projectionStream(boundsStream$1));\n      return boundsStream$1.result();\n    };\n\n    path.centroid = function(object) {\n      stream(object, projectionStream(centroidStream$1));\n      return centroidStream$1.result();\n    };\n\n    path.projection = function(_) {\n      return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;\n    };\n\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new PathString : new PathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return path;\n    };\n\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n\n    return path.projection(null).context(null);\n  }\n\n  var sum$2 = adder();\n\n  function polygonContains(polygon, point) {\n    var lambda = point[0],\n        phi = point[1],\n        normal = [sin$1(lambda), -cos$1(lambda), 0],\n        angle = 0,\n        winding = 0;\n\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      if (!(m = (ring = polygon[i]).length)) continue;\n      var ring,\n          m,\n          point0 = ring[m - 1],\n          lambda0 = point0[0],\n          phi0 = point0[1] / 2 + quarterPi,\n          sinPhi0 = sin$1(phi0),\n          cosPhi0 = cos$1(phi0);\n\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n        var point1 = ring[j],\n            lambda1 = point1[0],\n            phi1 = point1[1] / 2 + quarterPi,\n            sinPhi1 = sin$1(phi1),\n            cosPhi1 = cos$1(phi1),\n            delta = lambda1 - lambda0,\n            sign = delta >= 0 ? 1 : -1,\n            absDelta = sign * delta,\n            antimeridian = absDelta > pi$4,\n            k = sinPhi0 * sinPhi1;\n\n        sum$2.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));\n        angle += antimeridian ? delta + sign * tau$4 : delta;\n\n        // Are the longitudes either side of the point’s meridian (lambda),\n        // and are the latitudes smaller than the parallel (phi)?\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n          cartesianNormalizeInPlace(arc);\n          var intersection = cartesianCross(normal, arc);\n          cartesianNormalizeInPlace(intersection);\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n          }\n        }\n      }\n    }\n\n    // First, determine whether the South pole is inside or outside:\n    //\n    // It is inside if:\n    // * the polygon winds around it in a clockwise direction.\n    // * the polygon does not (cumulatively) wind around it, but has a negative\n    //   (counter-clockwise) area.\n    //\n    // Second, count the (signed) number of times a segment crosses a lambda\n    // from the point to the South pole.  If it is zero, then the point is the\n    // same side as the South pole.\n\n    var contains = (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ (winding & 1);\n    sum$2.reset();\n    return contains;\n  }\n\n  function clip(pointVisible, clipLine, interpolate, start) {\n    return function(rotate, sink) {\n      var line = clipLine(sink),\n          rotatedStart = rotate.invert(start[0], start[1]),\n          ringBuffer = clipBuffer(),\n          ringSink = clipLine(ringBuffer),\n          polygonStarted = false,\n          polygon,\n          segments,\n          ring;\n\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = merge(segments);\n          var startInside = polygonContains(polygon, rotatedStart);\n          if (segments.length) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n          } else if (startInside) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          sink.polygonStart();\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n          sink.polygonEnd();\n        }\n      };\n\n      function point(lambda, phi) {\n        var point = rotate(lambda, phi);\n        if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n      }\n\n      function pointLine(lambda, phi) {\n        var point = rotate(lambda, phi);\n        line.point(point[0], point[1]);\n      }\n\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n\n      function pointRing(lambda, phi) {\n        ring.push([lambda, phi]);\n        var point = rotate(lambda, phi);\n        ringSink.point(point[0], point[1]);\n      }\n\n      function ringStart() {\n        ringSink.lineStart();\n        ring = [];\n      }\n\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringSink.lineEnd();\n\n        var clean = ringSink.clean(),\n            ringSegments = ringBuffer.result(),\n            i, n = ringSegments.length, m,\n            segment,\n            point;\n\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n\n        if (!n) return;\n\n        // No intersections.\n        if (clean & 1) {\n          segment = ringSegments[0];\n          if ((m = segment.length - 1) > 0) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n            sink.lineEnd();\n          }\n          return;\n        }\n\n        // Rejoin connected segments.\n        // TODO reuse ringBuffer.rejoin()?\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n        segments.push(ringSegments.filter(validSegment));\n      }\n\n      return clip;\n    };\n  }\n\n  function validSegment(segment) {\n    return segment.length > 1;\n  }\n\n  // Intersections are sorted along the clip edge. For both antimeridian cutting\n  // and circle clipping, the same comparison is used.\n  function compareIntersection(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1])\n         - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);\n  }\n\n  var clipAntimeridian = clip(\n    function() { return true; },\n    clipAntimeridianLine,\n    clipAntimeridianInterpolate,\n    [-pi$4, -halfPi$3]\n  );\n\n  // Takes a line and cuts into visible segments. Return values: 0 - there were\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\n  // intersections, and the first and last segments should be rejoined.\n  function clipAntimeridianLine(stream) {\n    var lambda0 = NaN,\n        phi0 = NaN,\n        sign0 = NaN,\n        clean; // no intersections\n\n    return {\n      lineStart: function() {\n        stream.lineStart();\n        clean = 1;\n      },\n      point: function(lambda1, phi1) {\n        var sign1 = lambda1 > 0 ? pi$4 : -pi$4,\n            delta = abs(lambda1 - lambda0);\n        if (abs(delta - pi$4) < epsilon$4) { // line crosses a pole\n          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          stream.point(lambda1, phi0);\n          clean = 0;\n        } else if (sign0 !== sign1 && delta >= pi$4) { // line crosses antimeridian\n          if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies\n          if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          clean = 0;\n        }\n        stream.point(lambda0 = lambda1, phi0 = phi1);\n        sign0 = sign1;\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n        lambda0 = phi0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean; // if intersections, rejoin first and last segments\n      }\n    };\n  }\n\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n    var cosPhi0,\n        cosPhi1,\n        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);\n    return abs(sinLambda0Lambda1) > epsilon$4\n        ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)\n            - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))\n            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n        : (phi0 + phi1) / 2;\n  }\n\n  function clipAntimeridianInterpolate(from, to, direction, stream) {\n    var phi;\n    if (from == null) {\n      phi = direction * halfPi$3;\n      stream.point(-pi$4, phi);\n      stream.point(0, phi);\n      stream.point(pi$4, phi);\n      stream.point(pi$4, 0);\n      stream.point(pi$4, -phi);\n      stream.point(0, -phi);\n      stream.point(-pi$4, -phi);\n      stream.point(-pi$4, 0);\n      stream.point(-pi$4, phi);\n    } else if (abs(from[0] - to[0]) > epsilon$4) {\n      var lambda = from[0] < to[0] ? pi$4 : -pi$4;\n      phi = direction * lambda / 2;\n      stream.point(-lambda, phi);\n      stream.point(0, phi);\n      stream.point(lambda, phi);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function clipCircle(radius, delta) {\n    var cr = cos$1(radius),\n        smallRadius = cr > 0,\n        notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case\n\n    function interpolate(from, to, direction, stream) {\n      circleStream(stream, radius, delta, direction, from, to);\n    }\n\n    function visible(lambda, phi) {\n      return cos$1(lambda) * cos$1(phi) > cr;\n    }\n\n    // Takes a line and cuts into visible segments. Return values used for polygon\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\n    // intersections 2 - there were intersections, and the first and last segments\n    // should be rejoined.\n    function clipLine(stream) {\n      var point0, // previous point\n          c0, // code for previous point\n          v0, // visibility of previous point\n          v00, // visibility of first point\n          clean; // no intersections\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(lambda, phi) {\n          var point1 = [lambda, phi],\n              point2,\n              v = visible(lambda, phi),\n              c = smallRadius\n                ? v ? 0 : code(lambda, phi)\n                : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;\n          if (!point0 && (v00 = v0 = v)) stream.lineStart();\n          // Handle degeneracies.\n          // TODO ignore if not clipping polygons.\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n              point1[0] += epsilon$4;\n              point1[1] += epsilon$4;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              // outside going in\n              stream.lineStart();\n              point2 = intersect(point1, point0);\n              stream.point(point2[0], point2[1]);\n            } else {\n              // inside going out\n              point2 = intersect(point0, point1);\n              stream.point(point2[0], point2[1]);\n              stream.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            // If the codes for two points are different, or are both zero,\n            // and there this segment intersects with the small circle.\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n              } else {\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !pointEqual(point0, point1))) {\n            stream.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) stream.lineEnd();\n          point0 = null;\n        },\n        // Rejoin first and last segments if there were intersections and the first\n        // and last points were visible.\n        clean: function() {\n          return clean | ((v00 && v0) << 1);\n        }\n      };\n    }\n\n    // Intersects the great circle between a and b with the clip circle.\n    function intersect(a, b, two) {\n      var pa = cartesian(a),\n          pb = cartesian(b);\n\n      // We have two planes, n1.p = d1 and n2.p = d2.\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n      var n1 = [1, 0, 0], // normal\n          n2 = cartesianCross(pa, pb),\n          n2n2 = cartesianDot(n2, n2),\n          n1n2 = n2[0], // cartesianDot(n1, n2),\n          determinant = n2n2 - n1n2 * n1n2;\n\n      // Two polar points.\n      if (!determinant) return !two && a;\n\n      var c1 =  cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = cartesianCross(n1, n2),\n          A = cartesianScale(n1, c1),\n          B = cartesianScale(n2, c2);\n      cartesianAddInPlace(A, B);\n\n      // Solve |p(t)|^2 = 1.\n      var u = n1xn2,\n          w = cartesianDot(A, u),\n          uu = cartesianDot(u, u),\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n      if (t2 < 0) return;\n\n      var t = sqrt$1(t2),\n          q = cartesianScale(u, (-w - t) / uu);\n      cartesianAddInPlace(q, A);\n      q = spherical(q);\n\n      if (!two) return q;\n\n      // Two intersection points.\n      var lambda0 = a[0],\n          lambda1 = b[0],\n          phi0 = a[1],\n          phi1 = b[1],\n          z;\n\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n      var delta = lambda1 - lambda0,\n          polar = abs(delta - pi$4) < epsilon$4,\n          meridian = polar || delta < epsilon$4;\n\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n      // Check that the first point is between a and b.\n      if (meridian\n          ? polar\n            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)\n            : phi0 <= q[1] && q[1] <= phi1\n          : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n        var q1 = cartesianScale(u, (-w + t) / uu);\n        cartesianAddInPlace(q1, A);\n        return [q, spherical(q1)];\n      }\n    }\n\n    // Generates a 4-bit vector representing the location of a point relative to\n    // the small circle's bounding box.\n    function code(lambda, phi) {\n      var r = smallRadius ? radius : pi$4 - radius,\n          code = 0;\n      if (lambda < -r) code |= 1; // left\n      else if (lambda > r) code |= 2; // right\n      if (phi < -r) code |= 4; // below\n      else if (phi > r) code |= 8; // above\n      return code;\n    }\n\n    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$4, radius - pi$4]);\n  }\n\n  function transform$1(prototype) {\n    return {\n      stream: transform$2(prototype)\n    };\n  }\n\n  function transform$2(prototype) {\n    function T() {}\n    var p = T.prototype = Object.create(Transform$1.prototype);\n    for (var k in prototype) p[k] = prototype[k];\n    return function(stream) {\n      var t = new T;\n      t.stream = stream;\n      return t;\n    };\n  }\n\n  function Transform$1() {}\n\n  Transform$1.prototype = {\n    point: function(x, y) { this.stream.point(x, y); },\n    sphere: function() { this.stream.sphere(); },\n    lineStart: function() { this.stream.lineStart(); },\n    lineEnd: function() { this.stream.lineEnd(); },\n    polygonStart: function() { this.stream.polygonStart(); },\n    polygonEnd: function() { this.stream.polygonEnd(); }\n  };\n\n  var maxDepth = 16;\n  var cosMinDistance = cos$1(30 * radians);\n  // cos(minimum angular distance)\n\n  function resample(project, delta2) {\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n  }\n\n  function resampleNone(project) {\n    return transform$2({\n      point: function(x, y) {\n        x = project(x, y);\n        this.stream.point(x[0], x[1]);\n      }\n    });\n  }\n\n  function resample$1(project, delta2) {\n\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n      if (d2 > 4 * delta2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = sqrt$1(a * a + b * b + c * c),\n            phi2 = asin$1(c /= m),\n            lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),\n            p = project(lambda2, phi2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\n            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    return function(stream) {\n      var lambda00, x00, y00, a00, b00, c00, // first point\n          lambda0, x0, y0, a0, b0, c0; // previous point\n\n      var resampleStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n        polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n      };\n\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n\n      function lineStart() {\n        x0 = NaN;\n        resampleStream.point = linePoint;\n        stream.lineStart();\n      }\n\n      function linePoint(lambda, phi) {\n        var c = cartesian([lambda, phi]), p = project(lambda, phi);\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n\n      function lineEnd() {\n        resampleStream.point = point;\n        stream.lineEnd();\n      }\n\n      function ringStart() {\n        lineStart();\n        resampleStream.point = ringPoint;\n        resampleStream.lineEnd = ringEnd;\n      }\n\n      function ringPoint(lambda, phi) {\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resampleStream.point = linePoint;\n      }\n\n      function ringEnd() {\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n        resampleStream.lineEnd = lineEnd;\n        lineEnd();\n      }\n\n      return resampleStream;\n    };\n  }\n\n  var transformRadians = transform$2({\n    point: function(x, y) {\n      this.stream.point(x * radians, y * radians);\n    }\n  });\n\n  function projection(project) {\n    return projectionMutator(function() { return project; })();\n  }\n\n  function projectionMutator(projectAt) {\n    var project,\n        k = 150, // scale\n        x = 480, y = 250, // translate\n        dx, dy, lambda = 0, phi = 0, // center\n        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n        theta = null, preclip = clipAntimeridian, // clip angle\n        x0 = null, y0, x1, y1, postclip = identity$7, // clip extent\n        delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n        cache,\n        cacheStream;\n\n    function projection(point) {\n      point = projectRotate(point[0] * radians, point[1] * radians);\n      return [point[0] * k + dx, dy - point[1] * k];\n    }\n\n    function invert(point) {\n      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n      return point && [point[0] * degrees$1, point[1] * degrees$1];\n    }\n\n    function projectTransform(x, y) {\n      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n    }\n\n    projection.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n    };\n\n    projection.clipAngle = function(_) {\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\n    };\n\n    projection.clipExtent = function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function(_) {\n      return arguments.length ? (k = +_, recenter()) : k;\n    };\n\n    projection.translate = function(_) {\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n    };\n\n    projection.center = function(_) {\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\n    };\n\n    projection.rotate = function(_) {\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\n    };\n\n    projection.precision = function(_) {\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);\n    };\n\n    function recenter() {\n      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n      var center = project(lambda, phi);\n      dx = x - center[0] * k;\n      dy = y + center[1] * k;\n      return reset();\n    }\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return recenter();\n    };\n  }\n\n  function conicProjection(projectAt) {\n    var phi0 = 0,\n        phi1 = pi$4 / 3,\n        m = projectionMutator(projectAt),\n        p = m(phi0, phi1);\n\n    p.parallels = function(_) {\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\n    };\n\n    return p;\n  }\n\n  function conicEqualAreaRaw(y0, y1) {\n    var sy0 = sin$1(y0),\n        n = (sy0 + sin$1(y1)) / 2,\n        c = 1 + sy0 * (2 * n - sy0),\n        r0 = sqrt$1(c) / n;\n\n    function project(x, y) {\n      var r = sqrt$1(c - 2 * n * sin$1(y)) / n;\n      return [r * sin$1(x *= n), r0 - r * cos$1(x)];\n    }\n\n    project.invert = function(x, y) {\n      var r0y = r0 - y;\n      return [atan2(x, r0y) / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n    };\n\n    return project;\n  }\n\n  function conicEqualArea() {\n    return conicProjection(conicEqualAreaRaw)\n        .scale(155.424)\n        .center([0, 33.6442]);\n  }\n\n  function albers() {\n    return conicEqualArea()\n        .parallels([29.5, 45.5])\n        .scale(1070)\n        .translate([480, 250])\n        .rotate([96, 0])\n        .center([-0.6, 38.7]);\n  }\n\n  // The projections must have mutually exclusive clip regions on the sphere,\n  // as this will avoid emitting interleaving lines and polygons.\n  function multiplex(streams) {\n    var n = streams.length;\n    return {\n      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n    };\n  }\n\n  // A composite projection for the United States, configured by default for\n  // 960×500. The projection also works quite well at 960×600 if you change the\n  // scale to 1285 and adjust the translate accordingly. The set of standard\n  // parallels for each region comes from USGS, which is published here:\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n  function albersUsa() {\n    var cache,\n        cacheStream,\n        lower48 = albers(), lower48Point,\n        alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n        hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n        point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      return point = null,\n          (lower48Point.point(x, y), point)\n          || (alaskaPoint.point(x, y), point)\n          || (hawaiiPoint.point(x, y), point);\n    }\n\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n          : lower48).invert(coordinates);\n    };\n\n    albersUsa.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n    };\n\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n      return albersUsa;\n    };\n\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n\n      lower48Point = lower48\n          .translate(_)\n          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n          .stream(pointStream);\n\n      alaskaPoint = alaska\n          .translate([x - 0.307 * k, y + 0.201 * k])\n          .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointStream);\n\n      hawaiiPoint = hawaii\n          .translate([x - 0.205 * k, y + 0.212 * k])\n          .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointStream);\n\n      return albersUsa;\n    };\n\n    return albersUsa.scale(1070);\n  }\n\n  function azimuthalRaw(scale) {\n    return function(x, y) {\n      var cx = cos$1(x),\n          cy = cos$1(y),\n          k = scale(cx * cy);\n      return [\n        k * cy * sin$1(x),\n        k * sin$1(y)\n      ];\n    }\n  }\n\n  function azimuthalInvert(angle) {\n    return function(x, y) {\n      var z = sqrt$1(x * x + y * y),\n          c = angle(z),\n          sc = sin$1(c),\n          cc = cos$1(c);\n      return [\n        atan2(x * sc, z * cc),\n        asin$1(z && y * sc / z)\n      ];\n    }\n  }\n\n  var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n    return sqrt$1(2 / (1 + cxcy));\n  });\n\n  azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n    return 2 * asin$1(z / 2);\n  });\n\n  function azimuthalEqualArea() {\n    return projection(azimuthalEqualAreaRaw)\n        .scale(124.75)\n        .clipAngle(180 - 1e-3);\n  }\n\n  var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n    return (c = acos(c)) && c / sin$1(c);\n  });\n\n  azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n    return z;\n  });\n\n  function azimuthalEquidistant() {\n    return projection(azimuthalEquidistantRaw)\n        .scale(79.4188)\n        .clipAngle(180 - 1e-3);\n  }\n\n  function mercatorRaw(lambda, phi) {\n    return [lambda, log$1(tan((halfPi$3 + phi) / 2))];\n  }\n\n  mercatorRaw.invert = function(x, y) {\n    return [x, 2 * atan(exp(y)) - halfPi$3];\n  };\n\n  function mercator() {\n    return mercatorProjection(mercatorRaw)\n        .scale(961 / tau$4);\n  }\n\n  function mercatorProjection(project) {\n    var m = projection(project),\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        clipAuto;\n\n    m.scale = function(_) {\n      return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();\n    };\n\n    m.translate = function(_) {\n      return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();\n    };\n\n    m.clipExtent = function(_) {\n      if (!arguments.length) return clipAuto ? null : clipExtent();\n      if (clipAuto = _ == null) {\n        var k = pi$4 * scale(),\n            t = translate();\n        _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];\n      }\n      clipExtent(_);\n      return m;\n    };\n\n    return m.clipExtent(null);\n  }\n\n  function tany(y) {\n    return tan((halfPi$3 + y) / 2);\n  }\n\n  function conicConformalRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)),\n        f = cy0 * pow$1(tany(y0), n) / n;\n\n    if (!n) return mercatorRaw;\n\n    function project(x, y) {\n      if (f > 0) { if (y < -halfPi$3 + epsilon$4) y = -halfPi$3 + epsilon$4; }\n      else { if (y > halfPi$3 - epsilon$4) y = halfPi$3 - epsilon$4; }\n      var r = f / pow$1(tany(y), n);\n      return [r * sin$1(n * x), f - r * cos$1(n * x)];\n    }\n\n    project.invert = function(x, y) {\n      var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);\n      return [atan2(x, fy) / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$3];\n    };\n\n    return project;\n  }\n\n  function conicConformal() {\n    return conicProjection(conicConformalRaw)\n        .scale(109.5)\n        .parallels([30, 30]);\n  }\n\n  function equirectangularRaw(lambda, phi) {\n    return [lambda, phi];\n  }\n\n  equirectangularRaw.invert = equirectangularRaw;\n\n  function equirectangular() {\n    return projection(equirectangularRaw)\n        .scale(152.63);\n  }\n\n  function conicEquidistantRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),\n        g = cy0 / n + y0;\n\n    if (abs(n) < epsilon$4) return equirectangularRaw;\n\n    function project(x, y) {\n      var gy = g - y, nx = n * x;\n      return [gy * sin$1(nx), g - gy * cos$1(nx)];\n    }\n\n    project.invert = function(x, y) {\n      var gy = g - y;\n      return [atan2(x, gy) / n, g - sign$1(n) * sqrt$1(x * x + gy * gy)];\n    };\n\n    return project;\n  }\n\n  function conicEquidistant() {\n    return conicProjection(conicEquidistantRaw)\n        .scale(131.154)\n        .center([0, 13.9389]);\n  }\n\n  function gnomonicRaw(x, y) {\n    var cy = cos$1(y), k = cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  gnomonicRaw.invert = azimuthalInvert(atan);\n\n  function gnomonic() {\n    return projection(gnomonicRaw)\n        .scale(144.049)\n        .clipAngle(60);\n  }\n\n  function orthographicRaw(x, y) {\n    return [cos$1(y) * sin$1(x), sin$1(y)];\n  }\n\n  orthographicRaw.invert = azimuthalInvert(asin$1);\n\n  function orthographic() {\n    return projection(orthographicRaw)\n        .scale(249.5)\n        .clipAngle(90 + epsilon$4);\n  }\n\n  function stereographicRaw(x, y) {\n    var cy = cos$1(y), k = 1 + cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  stereographicRaw.invert = azimuthalInvert(function(z) {\n    return 2 + atan(z);\n  });\n\n  function stereographic() {\n    return projection(stereographicRaw)\n        .scale(250)\n        .clipAngle(142);\n  }\n\n  function transverseMercatorRaw(lambda, phi) {\n    return [log$1(tan((halfPi$3 + phi) / 2)), -lambda];\n  }\n\n  transverseMercatorRaw.invert = function(x, y) {\n    return [-y, 2 * atan(exp(x)) - halfPi$3];\n  };\n\n  function transverseMercator() {\n    var m = mercatorProjection(transverseMercatorRaw),\n        center = m.center,\n        rotate = m.rotate;\n\n    m.center = function(_) {\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n\n    m.rotate = function(_) {\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n\n    return rotate([0, 0, 90])\n        .scale(159.155);\n  }\n\n  exports.version = version;\n  exports.bisect = bisectRight;\n  exports.bisectRight = bisectRight;\n  exports.bisectLeft = bisectLeft;\n  exports.ascending = ascending;\n  exports.bisector = bisector;\n  exports.descending = descending;\n  exports.deviation = deviation;\n  exports.extent = extent;\n  exports.histogram = histogram;\n  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\n  exports.thresholdScott = scott;\n  exports.thresholdSturges = sturges;\n  exports.max = max;\n  exports.mean = mean;\n  exports.median = median;\n  exports.merge = merge;\n  exports.min = min;\n  exports.pairs = pairs;\n  exports.permute = permute;\n  exports.quantile = threshold;\n  exports.range = range;\n  exports.scan = scan;\n  exports.shuffle = shuffle;\n  exports.sum = sum;\n  exports.ticks = ticks;\n  exports.tickStep = tickStep;\n  exports.transpose = transpose;\n  exports.variance = variance;\n  exports.zip = zip;\n  exports.entries = entries;\n  exports.keys = keys;\n  exports.values = values;\n  exports.map = map$1;\n  exports.set = set;\n  exports.nest = nest;\n  exports.randomUniform = uniform;\n  exports.randomNormal = normal;\n  exports.randomLogNormal = logNormal;\n  exports.randomBates = bates;\n  exports.randomIrwinHall = irwinHall;\n  exports.randomExponential = exponential;\n  exports.easeLinear = linear;\n  exports.easeQuad = quadInOut;\n  exports.easeQuadIn = quadIn;\n  exports.easeQuadOut = quadOut;\n  exports.easeQuadInOut = quadInOut;\n  exports.easeCubic = easeCubicInOut;\n  exports.easeCubicIn = cubicIn;\n  exports.easeCubicOut = cubicOut;\n  exports.easeCubicInOut = easeCubicInOut;\n  exports.easePoly = polyInOut;\n  exports.easePolyIn = polyIn;\n  exports.easePolyOut = polyOut;\n  exports.easePolyInOut = polyInOut;\n  exports.easeSin = sinInOut;\n  exports.easeSinIn = sinIn;\n  exports.easeSinOut = sinOut;\n  exports.easeSinInOut = sinInOut;\n  exports.easeExp = expInOut;\n  exports.easeExpIn = expIn;\n  exports.easeExpOut = expOut;\n  exports.easeExpInOut = expInOut;\n  exports.easeCircle = circleInOut;\n  exports.easeCircleIn = circleIn;\n  exports.easeCircleOut = circleOut;\n  exports.easeCircleInOut = circleInOut;\n  exports.easeBounce = bounceOut;\n  exports.easeBounceIn = bounceIn;\n  exports.easeBounceOut = bounceOut;\n  exports.easeBounceInOut = bounceInOut;\n  exports.easeBack = backInOut;\n  exports.easeBackIn = backIn;\n  exports.easeBackOut = backOut;\n  exports.easeBackInOut = backInOut;\n  exports.easeElastic = elasticOut;\n  exports.easeElasticIn = elasticIn;\n  exports.easeElasticOut = elasticOut;\n  exports.easeElasticInOut = elasticInOut;\n  exports.polygonArea = area;\n  exports.polygonCentroid = centroid;\n  exports.polygonHull = hull;\n  exports.polygonContains = contains;\n  exports.polygonLength = length$1;\n  exports.path = path;\n  exports.quadtree = quadtree;\n  exports.queue = queue;\n  exports.arc = arc;\n  exports.area = area$1;\n  exports.line = line;\n  exports.pie = pie;\n  exports.radialArea = radialArea;\n  exports.radialLine = radialLine$1;\n  exports.symbol = symbol;\n  exports.symbols = symbols;\n  exports.symbolCircle = circle;\n  exports.symbolCross = cross$1;\n  exports.symbolDiamond = diamond;\n  exports.symbolSquare = square;\n  exports.symbolStar = star;\n  exports.symbolTriangle = triangle;\n  exports.symbolWye = wye;\n  exports.curveBasisClosed = basisClosed;\n  exports.curveBasisOpen = basisOpen;\n  exports.curveBasis = basis;\n  exports.curveBundle = bundle;\n  exports.curveCardinalClosed = cardinalClosed;\n  exports.curveCardinalOpen = cardinalOpen;\n  exports.curveCardinal = cardinal;\n  exports.curveCatmullRomClosed = catmullRomClosed;\n  exports.curveCatmullRomOpen = catmullRomOpen;\n  exports.curveCatmullRom = catmullRom;\n  exports.curveLinearClosed = linearClosed;\n  exports.curveLinear = curveLinear;\n  exports.curveMonotoneX = monotoneX;\n  exports.curveMonotoneY = monotoneY;\n  exports.curveNatural = natural;\n  exports.curveStep = step;\n  exports.curveStepAfter = stepAfter;\n  exports.curveStepBefore = stepBefore;\n  exports.stack = stack;\n  exports.stackOffsetExpand = expand;\n  exports.stackOffsetNone = none;\n  exports.stackOffsetSilhouette = silhouette;\n  exports.stackOffsetWiggle = wiggle;\n  exports.stackOrderAscending = ascending$1;\n  exports.stackOrderDescending = descending$2;\n  exports.stackOrderInsideOut = insideOut;\n  exports.stackOrderNone = none$1;\n  exports.stackOrderReverse = reverse;\n  exports.color = color;\n  exports.rgb = colorRgb;\n  exports.hsl = colorHsl;\n  exports.lab = lab;\n  exports.hcl = colorHcl;\n  exports.cubehelix = cubehelix;\n  exports.interpolate = interpolate;\n  exports.interpolateArray = array$1;\n  exports.interpolateDate = date;\n  exports.interpolateNumber = interpolateNumber;\n  exports.interpolateObject = object;\n  exports.interpolateRound = interpolateRound;\n  exports.interpolateString = interpolateString;\n  exports.interpolateTransformCss = interpolateTransform$1;\n  exports.interpolateTransformSvg = interpolateTransform$2;\n  exports.interpolateZoom = interpolateZoom;\n  exports.interpolateRgb = interpolateRgb;\n  exports.interpolateRgbBasis = rgbBasis;\n  exports.interpolateRgbBasisClosed = rgbBasisClosed;\n  exports.interpolateHsl = hsl$1;\n  exports.interpolateHslLong = hslLong;\n  exports.interpolateLab = lab$1;\n  exports.interpolateHcl = hcl$1;\n  exports.interpolateHclLong = hclLong;\n  exports.interpolateCubehelix = cubehelix$2;\n  exports.interpolateCubehelixLong = interpolateCubehelixLong;\n  exports.interpolateBasis = basis$2;\n  exports.interpolateBasisClosed = basisClosed$1;\n  exports.quantize = quantize;\n  exports.dispatch = dispatch;\n  exports.dsvFormat = dsv;\n  exports.csvParse = csvParse;\n  exports.csvParseRows = csvParseRows;\n  exports.csvFormat = csvFormat;\n  exports.csvFormatRows = csvFormatRows;\n  exports.tsvParse = tsvParse;\n  exports.tsvParseRows = tsvParseRows;\n  exports.tsvFormat = tsvFormat;\n  exports.tsvFormatRows = tsvFormatRows;\n  exports.request = request;\n  exports.html = html;\n  exports.json = json;\n  exports.text = text;\n  exports.xml = xml;\n  exports.csv = csv$1;\n  exports.tsv = tsv$1;\n  exports.now = now;\n  exports.timer = timer;\n  exports.timerFlush = timerFlush;\n  exports.timeout = timeout$1;\n  exports.interval = interval$1;\n  exports.timeInterval = newInterval;\n  exports.timeMillisecond = millisecond;\n  exports.timeMilliseconds = milliseconds;\n  exports.timeSecond = second;\n  exports.timeSeconds = seconds;\n  exports.timeMinute = minute;\n  exports.timeMinutes = minutes;\n  exports.timeHour = hour;\n  exports.timeHours = hours;\n  exports.timeDay = day;\n  exports.timeDays = days;\n  exports.timeWeek = timeWeek;\n  exports.timeWeeks = sundays;\n  exports.timeSunday = timeWeek;\n  exports.timeSundays = sundays;\n  exports.timeMonday = timeMonday;\n  exports.timeMondays = mondays;\n  exports.timeTuesday = tuesday;\n  exports.timeTuesdays = tuesdays;\n  exports.timeWednesday = wednesday;\n  exports.timeWednesdays = wednesdays;\n  exports.timeThursday = thursday;\n  exports.timeThursdays = thursdays;\n  exports.timeFriday = friday;\n  exports.timeFridays = fridays;\n  exports.timeSaturday = saturday;\n  exports.timeSaturdays = saturdays;\n  exports.timeMonth = month;\n  exports.timeMonths = months;\n  exports.timeYear = year;\n  exports.timeYears = years;\n  exports.utcMillisecond = millisecond;\n  exports.utcMilliseconds = milliseconds;\n  exports.utcSecond = second;\n  exports.utcSeconds = seconds;\n  exports.utcMinute = utcMinute;\n  exports.utcMinutes = utcMinutes;\n  exports.utcHour = utcHour;\n  exports.utcHours = utcHours;\n  exports.utcDay = utcDay;\n  exports.utcDays = utcDays;\n  exports.utcWeek = utcWeek;\n  exports.utcWeeks = utcSundays;\n  exports.utcSunday = utcWeek;\n  exports.utcSundays = utcSundays;\n  exports.utcMonday = utcMonday;\n  exports.utcMondays = utcMondays;\n  exports.utcTuesday = utcTuesday;\n  exports.utcTuesdays = utcTuesdays;\n  exports.utcWednesday = utcWednesday;\n  exports.utcWednesdays = utcWednesdays;\n  exports.utcThursday = utcThursday;\n  exports.utcThursdays = utcThursdays;\n  exports.utcFriday = utcFriday;\n  exports.utcFridays = utcFridays;\n  exports.utcSaturday = utcSaturday;\n  exports.utcSaturdays = utcSaturdays;\n  exports.utcMonth = utcMonth;\n  exports.utcMonths = utcMonths;\n  exports.utcYear = utcYear;\n  exports.utcYears = utcYears;\n  exports.formatLocale = formatLocale;\n  exports.formatDefaultLocale = defaultLocale;\n  exports.formatSpecifier = formatSpecifier;\n  exports.precisionFixed = precisionFixed;\n  exports.precisionPrefix = precisionPrefix;\n  exports.precisionRound = precisionRound;\n  exports.isoFormat = formatIso;\n  exports.isoParse = parseIso;\n  exports.timeFormatLocale = formatLocale$1;\n  exports.timeFormatDefaultLocale = defaultLocale$1;\n  exports.scaleBand = band;\n  exports.scalePoint = point$4;\n  exports.scaleIdentity = identity$4;\n  exports.scaleLinear = linear$2;\n  exports.scaleLog = log;\n  exports.scaleOrdinal = ordinal;\n  exports.scaleImplicit = implicit;\n  exports.scalePow = pow;\n  exports.scaleSqrt = sqrt;\n  exports.scaleQuantile = quantile;\n  exports.scaleQuantize = quantize$1;\n  exports.scaleThreshold = threshold$1;\n  exports.scaleTime = time;\n  exports.scaleUtc = utcTime;\n  exports.schemeCategory10 = category10;\n  exports.schemeCategory20b = category20b;\n  exports.schemeCategory20c = category20c;\n  exports.schemeCategory20 = category20;\n  exports.scaleSequential = sequential;\n  exports.interpolateCubehelixDefault = cubehelix$3;\n  exports.interpolateRainbow = rainbow$1;\n  exports.interpolateWarm = warm;\n  exports.interpolateCool = cool;\n  exports.interpolateViridis = viridis;\n  exports.interpolateMagma = magma;\n  exports.interpolateInferno = inferno;\n  exports.interpolatePlasma = plasma;\n  exports.creator = creator;\n  exports.customEvent = customEvent;\n  exports.local = local;\n  exports.matcher = matcher$1;\n  exports.mouse = mouse;\n  exports.namespace = namespace;\n  exports.namespaces = namespaces;\n  exports.select = select;\n  exports.selectAll = selectAll;\n  exports.selection = selection;\n  exports.selector = selector;\n  exports.selectorAll = selectorAll;\n  exports.touch = touch;\n  exports.touches = touches;\n  exports.window = window;\n  exports.active = active;\n  exports.interrupt = interrupt;\n  exports.transition = transition;\n  exports.axisTop = axisTop;\n  exports.axisRight = axisRight;\n  exports.axisBottom = axisBottom;\n  exports.axisLeft = axisLeft;\n  exports.cluster = cluster;\n  exports.hierarchy = hierarchy;\n  exports.pack = index;\n  exports.packSiblings = siblings;\n  exports.packEnclose = enclose;\n  exports.partition = partition;\n  exports.stratify = stratify;\n  exports.tree = tree;\n  exports.treemap = index$1;\n  exports.treemapBinary = binary;\n  exports.treemapDice = treemapDice;\n  exports.treemapSlice = treemapSlice;\n  exports.treemapSliceDice = sliceDice;\n  exports.treemapSquarify = squarify;\n  exports.treemapResquarify = resquarify;\n  exports.forceCenter = center$1;\n  exports.forceCollide = collide;\n  exports.forceLink = link;\n  exports.forceManyBody = manyBody;\n  exports.forceSimulation = simulation;\n  exports.forceX = x$3;\n  exports.forceY = y$3;\n  exports.drag = drag;\n  exports.dragDisable = dragDisable;\n  exports.dragEnable = dragEnable;\n  exports.voronoi = voronoi;\n  exports.zoom = zoom;\n  exports.zoomIdentity = identity$6;\n  exports.zoomTransform = transform;\n  exports.brush = brush;\n  exports.brushX = brushX;\n  exports.brushY = brushY;\n  exports.brushSelection = brushSelection;\n  exports.chord = chord;\n  exports.ribbon = ribbon;\n  exports.geoAlbers = albers;\n  exports.geoAlbersUsa = albersUsa;\n  exports.geoArea = area$2;\n  exports.geoAzimuthalEqualArea = azimuthalEqualArea;\n  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\n  exports.geoAzimuthalEquidistant = azimuthalEquidistant;\n  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\n  exports.geoBounds = bounds;\n  exports.geoCentroid = centroid$1;\n  exports.geoCircle = circle$1;\n  exports.geoClipExtent = extent$1;\n  exports.geoConicConformal = conicConformal;\n  exports.geoConicConformalRaw = conicConformalRaw;\n  exports.geoConicEqualArea = conicEqualArea;\n  exports.geoConicEqualAreaRaw = conicEqualAreaRaw;\n  exports.geoConicEquidistant = conicEquidistant;\n  exports.geoConicEquidistantRaw = conicEquidistantRaw;\n  exports.geoDistance = distance;\n  exports.geoEquirectangular = equirectangular;\n  exports.geoEquirectangularRaw = equirectangularRaw;\n  exports.geoGnomonic = gnomonic;\n  exports.geoGnomonicRaw = gnomonicRaw;\n  exports.geoGraticule = graticule;\n  exports.geoInterpolate = interpolate$2;\n  exports.geoLength = length$2;\n  exports.geoMercator = mercator;\n  exports.geoMercatorRaw = mercatorRaw;\n  exports.geoOrthographic = orthographic;\n  exports.geoOrthographicRaw = orthographicRaw;\n  exports.geoPath = index$3;\n  exports.geoProjection = projection;\n  exports.geoProjectionMutator = projectionMutator;\n  exports.geoRotation = rotation;\n  exports.geoStereographic = stereographic;\n  exports.geoStereographicRaw = stereographicRaw;\n  exports.geoStream = stream;\n  exports.geoTransform = transform$1;\n  exports.geoTransverseMercator = transverseMercator;\n  exports.geoTransverseMercatorRaw = transverseMercatorRaw;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","import {Ploidy} from './ploidy';\n\nexport class Color {\n\n  constructor(config) {\n      // Ideogram config\n    this._config = config;\n    this._ploidy = new Ploidy(this._config);\n  }\n\n  getArmColor(chrSetNumber, chrNumber, armNumber) {\n    if (this._config.armColors) {\n      return this._config.armColors[armNumber];\n    } else if (this._config.ancestors) {\n      return this._getPolyploidArmColor(chrSetNumber, chrNumber, armNumber);\n    } else {\n      return null;\n    }\n  }\n\n  getBorderColor(chrSetNumber, chrNumber, armNumber) {\n    if (chrNumber < this._config.ploidy) {\n      return '#000';\n    } else if (this._ploidy.exists(chrSetNumber, chrNumber, armNumber)) {\n      return '#000';\n    } else {\n      return '#fff';\n    }\n  }\n\n  _getPolyploidArmColor(chrSetNumber, chrNumber, armNumber) {\n    if (!this._ploidy.exists(chrSetNumber, chrNumber, armNumber)) {\n      return 'transparent';\n    } else {\n      var ancestor =\n        this._ploidy.getAncestor(chrSetNumber, chrNumber, armNumber);\n      return this._config.ancestors[ancestor];\n    }\n  }\n\n}\n","// Developed by Eric Weitz (https://github.com/eweitz)\n\nimport * as d3 from 'd3';\n\nimport {Ploidy} from './ploidy';\nimport {Layout} from './layouts/layout';\nimport {ModelAdapter} from './model-adapter';\nimport {Chromosome} from './views/chromosome';\n\nexport class Ideogram {\n\n  constructor(config) {\n    var orientation,\n      chrWidth, chrHeight,\n      container, rect;\n\n    // Clone the config object, to allow multiple instantiations\n    // without picking up prior ideogram's settings\n    this.config = JSON.parse(JSON.stringify(config));\n\n    // TODO: Document this\n    this._bandsXOffset = 30;\n\n    this.debug = false;\n\n    if (!this.config.dataDir) {\n      this.config.dataDir = '../data/bands/native/';\n    }\n\n    if (!this.config.ploidy) {\n      this.config.ploidy = 1;\n    }\n\n    if (this.config.ploidy > 1) {\n      this.sexChromosomes = {};\n      if (!this.config.sex) {\n        // Default to 'male' per human, mouse reference genomes.\n        // TODO: The default sex value should probably be the heterogametic sex,\n        // i.e. whichever sex has allosomes that differ in morphology.\n        // In mammals and most insects that is the male.\n        // However, in birds and reptiles, that is female.\n        this.config.sex = 'male';\n      }\n      if (this.config.ploidy === 2 && !this.config.ancestors) {\n        this.config.ancestors = {M: '#ffb6c1', P: '#add8e6'};\n        this.config.ploidyDesc = 'MP';\n      }\n    }\n\n    if (!this.config.container) {\n      this.config.container = 'body';\n    }\n\n    this.selector = this.config.container + ' #_ideogram';\n\n    if (!this.config.resolution) {\n      this.config.resolution = 850;\n    }\n\n    if ('showChromosomeLabels' in this.config === false) {\n      this.config.showChromosomeLabels = true;\n    }\n\n    if (!this.config.orientation) {\n      orientation = 'vertical';\n      this.config.orientation = orientation;\n    }\n\n    if (!this.config.chrHeight) {\n      container = this.config.container;\n      rect = document.querySelector(container).getBoundingClientRect();\n\n      if (orientation === 'vertical') {\n        chrHeight = rect.height;\n      } else {\n        chrHeight = rect.width;\n      }\n\n      if (container === 'body') {\n        chrHeight = 400;\n      }\n      this.config.chrHeight = chrHeight;\n    }\n\n    if (!this.config.chrWidth) {\n      chrWidth = 10;\n      chrHeight = this.config.chrHeight;\n\n      if (chrHeight < 900 && chrHeight > 500) {\n        chrWidth = Math.round(chrHeight / 40);\n      } else if (chrHeight >= 900) {\n        chrWidth = Math.round(chrHeight / 45);\n      }\n      this.config.chrWidth = chrWidth;\n    }\n\n    if (!this.config.chrMargin) {\n      if (this.config.ploidy === 1) {\n        this.config.chrMargin = 10;\n      } else {\n        // Defaults polyploid chromosomes to relatively small interchromatid gap\n        this.config.chrMargin = Math.round(this.config.chrWidth / 4);\n      }\n    }\n\n    if (!this.config.showBandLabels) {\n      this.config.showBandLabels = false;\n    }\n\n    if ('showFullyBanded' in this.config) {\n      this.config.showFullyBanded = this.config.showFullyBanded;\n    } else {\n      this.config.showFullyBanded = true;\n    }\n\n    if (!this.config.brush) {\n      this.config.brush = false;\n    }\n\n    if (!this.config.rows) {\n      this.config.rows = 1;\n    }\n\n    this.bump = Math.round(this.config.chrHeight / 125);\n    this.adjustedBump = false;\n    if (this.config.chrHeight < 200) {\n      this.adjustedBump = true;\n      this.bump = 4;\n    }\n\n    if (config.showBandLabels) {\n      this.config.chrMargin += 20;\n    }\n\n    if (config.chromosome) {\n      this.config.chromosomes = [config.chromosome];\n      if ('showBandLabels' in config === false) {\n        this.config.showBandLabels = true;\n      }\n      if ('rotatable' in config === false) {\n        this.config.rotatable = false;\n      }\n    }\n\n    if (!this.config.showNonNuclearChromosomes) {\n      this.config.showNonNuclearChromosomes = false;\n    }\n\n    this.initAnnotSettings();\n\n    this.config.chrMargin = (\n    this.config.chrMargin +\n    this.config.chrWidth +\n    this.config.annotTracksHeight * 2\n  );\n\n    if (config.onLoad) {\n      this.onLoadCallback = config.onLoad;\n    }\n\n    if (config.onDrawAnnots) {\n      this.onDrawAnnotsCallback = config.onDrawAnnots;\n    }\n\n    if (config.onBrushMove) {\n      this.onBrushMoveCallback = config.onBrushMove;\n    }\n\n    this.coordinateSystem = 'iscn';\n\n    this.maxLength = {\n      bp: 0,\n      iscn: 0\n    };\n\n    // The E-Utilies In Depth: Parameters, Syntax and More:\n    // https://www.ncbi.nlm.nih.gov/books/NBK25499/\n    this.eutils = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/';\n    this.esearch = this.eutils + 'esearch.fcgi?retmode=json';\n    this.esummary = this.eutils + 'esummary.fcgi?retmode=json';\n    this.elink = this.eutils + 'elink.fcgi?retmode=json';\n\n    this.organisms = {\n      9606: {\n        commonName: 'Human',\n        scientificName: 'Homo sapiens',\n        scientificNameAbbr: 'H. sapiens',\n        assemblies: {\n          default: 'GCF_000001405.26', // GRCh38\n          GRCh38: 'GCF_000001405.26',\n          GRCh37: 'GCF_000001405.13'\n        }\n      },\n      10090: {\n        commonName: 'Mouse',\n        scientificName: 'Mus musculus',\n        scientificNameAbbr: 'M. musculus',\n        assemblies: {\n          default: 'GCF_000001635.20'\n        }\n      },\n      4641: {\n        commonName: 'banana',\n        scientificName: 'Musa acuminata',\n        scientificNameAbbr: 'M. acuminata',\n        assemblies: {\n          default: 'mock'\n        }\n      }\n    };\n\n    // A flat array of chromosomes\n    // (this.chromosomes is an object of\n    // arrays of chromosomes, keyed by organism)\n    this.chromosomesArray = [];\n\n    this.bandsToShow = [];\n\n    this.chromosomes = {};\n    this.numChromosomes = 0;\n    this.bandData = {};\n\n    this.init();\n  }\n\n  /**\n  * Gets chromosome band data from a\n  * TSV file, or, if band data is prefetched, from an array\n  *\n  * UCSC: #chrom chromStart  chromEnd  name  gieStain\n  * http://genome.ucsc.edu/cgi-bin/hgTables\n  *  - group: Mapping and Sequencing\n  *  - track: Chromosome Band (Ideogram)\n  *\n  * NCBI: #chromosome  arm band  iscn_start  iscn_stop bp_start  bp_stop stain density\n  * ftp://ftp.ncbi.nlm.nih.gov/pub/gdp/ideogram_9606_GCF_000001305.14_550_V1\n  */\n  getBands(content, taxid, chromosomes) {\n    var lines = {},\n      delimiter, tsvLines, columns, line, stain, chr,\n      i, init, tsvLinesLength, source,\n      start, stop, firstColumn, tmp;\n\n    if (content.slice(0, 8) === 'chrBands') {\n      source = 'native';\n    }\n\n    if (\n    chromosomes instanceof Array &&\n    typeof chromosomes[0] === 'object'\n  ) {\n      tmp = [];\n      for (i = 0; i < chromosomes.length; i++) {\n        tmp.push(chromosomes[i].name);\n      }\n      chromosomes = tmp;\n    }\n\n    if (typeof chrBands === 'undefined' && source !== 'native') {\n      delimiter = /\\t/;\n      tsvLines = content.split(/\\r\\n|\\n/);\n      init = 1;\n    } else {\n      delimiter = / /;\n      if (source === 'native') {\n        tsvLines = eval(content);\n      } else {\n        tsvLines = content;\n      }\n      init = 0;\n    }\n\n    firstColumn = tsvLines[0].split(delimiter)[0];\n    if (firstColumn === '#chromosome') {\n      source = 'ncbi';\n    } else if (firstColumn === '#chrom') {\n      source = 'ucsc';\n    } else {\n      source = 'native';\n    }\n\n    tsvLinesLength = tsvLines.length;\n\n    if (source === 'ncbi' || source === 'native') {\n      for (i = init; i < tsvLinesLength; i++) {\n        columns = tsvLines[i].split(delimiter);\n\n        chr = columns[0];\n\n        if (\n        // If a specific set of chromosomes has been requested, and\n        // the current chromosome\n        typeof (chromosomes) !== 'undefined' &&\n        chromosomes.indexOf(chr) === -1\n      ) {\n          continue;\n        }\n\n        if (chr in lines === false) {\n          lines[chr] = [];\n        }\n\n        stain = columns[7];\n        if (columns[8]) {\n          // For e.g. acen and gvar, columns[8] (density) is undefined\n          stain += columns[8];\n        }\n\n        line = {\n          chr: chr,\n          bp: {\n            start: parseInt(columns[5], 10),\n            stop: parseInt(columns[6], 10)\n          },\n          iscn: {\n            start: parseInt(columns[3], 10),\n            stop: parseInt(columns[4], 10)\n          },\n          px: {\n            start: -1,\n            stop: -1,\n            width: -1\n          },\n          name: columns[1] + columns[2],\n          stain: stain,\n          taxid: taxid\n        };\n\n        lines[chr].push(line);\n      }\n    } else if (source === 'ucsc') {\n      for (i = init; i < tsvLinesLength; i++) {\n        // #chrom chromStart  chromEnd  name  gieStain\n        // e.g. for fly:\n        // chr4\t69508\t108296\t102A1\tn/a\n        columns = tsvLines[i].split(delimiter);\n\n        if (columns[0] !== 'chr' + chromosomeName) {\n          continue;\n        }\n\n        stain = columns[4];\n        if (stain === 'n/a') {\n          stain = 'gpos100';\n        }\n        start = parseInt(columns[1], 10);\n        stop = parseInt(columns[2], 10);\n\n        line = {\n          chr: columns[0].split('chr')[1],\n          bp: {\n            start: start,\n            stop: stop\n          },\n          iscn: {\n            start: start,\n            stop: stop\n          },\n          px: {\n            start: -1,\n            stop: -1,\n            width: -1\n          },\n          name: columns[3],\n          stain: stain,\n          taxid: taxid\n        };\n\n        lines[chr].push(line);\n      }\n    }\n\n    return lines;\n  }\n\n  /**\n  * Generates a model object for each chromosome\n  * containing information on its name, DOM ID,\n  * length in base pairs or ISCN coordinates,\n  * cytogenetic bands, centromere position, etc.\n  */\n  getChromosomeModel(bands, chromosome, taxid, chrIndex) {\n    var chr = {},\n      band,\n      width, pxStop,\n      chrHeight = this.config.chrHeight,\n      maxLength = this.maxLength,\n      chrLength,\n      cs, hasBands;\n\n    cs = this.coordinateSystem;\n    hasBands = (typeof bands !== 'undefined');\n\n    if (hasBands) {\n      chr.name = chromosome;\n      chr.length = bands[bands.length - 1][cs].stop;\n      chr.type = 'nuclear';\n    } else {\n      chr = chromosome;\n    }\n\n    chr.chrIndex = chrIndex;\n\n    chr.id = 'chr' + chr.name + '-' + taxid;\n\n    if (this.config.fullChromosomeLabels === true) {\n      var orgName = this.organisms[taxid].scientificNameAbbr;\n      chr.name = orgName + ' chr' + chr.name;\n    }\n\n    chrLength = chr.length;\n\n    pxStop = 0;\n\n    if (hasBands) {\n      for (var i = 0; i < bands.length; i++) {\n        band = bands[i];\n        var csLength = band[cs].stop - band[cs].start;\n        width = chrHeight * chr.length / maxLength[cs] * csLength / chrLength;\n\n        bands[i].px = {start: pxStop, stop: pxStop + width, width: width};\n\n        pxStop = bands[i].px.stop;\n\n        if (hasBands && band.stain === 'acen' && band.name[0] === 'p') {\n          chr.pcenIndex = i;\n        }\n      }\n    } else {\n      pxStop = chrHeight * chr.length / maxLength[cs];\n    }\n\n    chr.width = pxStop;\n\n    chr.scale = {};\n\n    // TODO:\n    //\n    // A chromosome-level scale property is likely\n    // nonsensical for any chromosomes that have cytogenetic band data.\n    // Different bands tend to have ratios between number of base pairs\n    // and physical length.\n    //\n    // However, a chromosome-level scale property is likely\n    // necessary for chromosomes that do not have band data.\n    //\n    // This needs further review.\n    if (this.config.multiorganism === true) {\n      chr.scale.bp = 1;\n      // chr.scale.bp = band.iscn.stop / band.bp.stop;\n      chr.scale.iscn = chrHeight * chrLength / maxLength.bp;\n    } else {\n      chr.scale.bp = chrHeight / maxLength.bp;\n      if (hasBands) {\n        chr.scale.iscn = chrHeight / maxLength.iscn;\n      }\n    }\n    chr.bands = bands;\n\n    chr.centromerePosition = '';\n    if (\n    hasBands && bands[0].name[0] === 'p' && bands[1].name[0] === 'q' &&\n    bands[0].bp.stop - bands[0].bp.start < 2E6\n  ) {\n      // As with almost all mouse chromosome, chimpanzee chr22\n      chr.centromerePosition = 'telocentric';\n\n      // Remove placeholder pter band\n      chr.bands = chr.bands.slice(1);\n    }\n\n    if (hasBands && chr.bands.length === 1) {\n      // Encountered when processing an assembly that has chromosomes with\n      // centromere data, but this chromosome does not.\n      // Example: chromosome F1 in Felis catus.\n      delete chr.bands;\n    }\n\n    return chr;\n  }\n\n  /**\n  * Draws labels for each chromosome, e.g. \"1\", \"2\", \"X\".\n  * If ideogram configuration has 'fullChromosomeLabels: True',\n  * then labels includes name of taxon, which can help when\n  * depicting orthologs.\n  */\n  drawChromosomeLabels() {\n    var ideo = this;\n\n    var chromosomeLabelClass = ideo._layout.getChromosomeLabelClass();\n\n    var chrSetLabelXPosition = ideo._layout.getChromosomeSetLabelXPosition();\n    var chrSetLabelTranslate = ideo._layout.getChromosomeSetLabelTranslate();\n\n    // Append chromosomes set's labels\n    d3.selectAll(ideo.selector + ' .chromosome-set-container')\n      .append('text')\n      .data(ideo.chromosomesArray)\n      .attr('class', 'chromosome-set-label ' + chromosomeLabelClass)\n      .attr('transform', chrSetLabelTranslate)\n      .attr('x', chrSetLabelXPosition)\n      .attr('y', function(d, i) {\n        return ideo._layout.getChromosomeSetLabelYPosition(i);\n      })\n      .attr('text-anchor', ideo._layout.getChromosomeSetLabelAnchor())\n      .each(function(d, i) {\n          // Get label lines\n        var lines;\n        if (d.name.indexOf(' ') === -1) {\n          lines = [d.name];\n        } else {\n          lines = d.name.match(/^(.*)\\s+([^\\s]+)$/).slice(1).reverse();\n        }\n\n        if (\n          'sex' in ideo.config &&\n          ideo.config.ploidy === 2 &&\n          i === ideo.sexChromosomes.index\n        ) {\n          if (ideo.config.sex === 'male') {\n            lines = ['XY'];\n          } else {\n            lines = ['XX'];\n          }\n        }\n\n        // Render label lines\n        d3.select(this).selectAll('tspan')\n          .data(lines)\n          .enter()\n          .append('tspan')\n          .attr('dy', function(d, i) {\n            return i * -1.2 + 'em';\n          })\n          .attr('x', ideo._layout.getChromosomeSetLabelXPosition())\n          .attr('class', function(a, i) {\n            var fullLabels = ideo.config.fullChromosomeLabels;\n            return i === 1 && fullLabels ? 'italic' : null;\n          }).text(String);\n      });\n\n    var setLabelTranslate = ideo._layout.getChromosomeSetLabelTranslate();\n\n    // Append chromosomes labels\n    d3.selectAll(ideo.selector + ' .chromosome-set-container')\n      .each(function(a, chrSetNumber) {\n        d3.select(this).selectAll('.chromosome')\n          .append('text')\n          .attr('class', 'chrLabel')\n          .attr('transform', setLabelTranslate)\n          .attr('x', function(d, i) {\n            return ideo._layout.getChromosomeLabelXPosition(i);\n          }).attr('y', function(d, i) {\n            return ideo._layout.getChromosomeLabelYPosition(i);\n          }).text(function(d, chrNumber) {\n            return ideo._ploidy.getAncestor(chrSetNumber, chrNumber);\n          }).attr('text-anchor', 'middle');\n      });\n  }\n\n  /**\n  * Draws labels and stalks for cytogenetic bands.\n  *\n  * Band labels are text like \"p11.11\".\n  * Stalks are small lines that visually connect labels to their bands.\n  */\n  drawBandLabels(chromosomes) {\n    var i, chr, chrs, taxid, ideo, chrModel;\n\n    ideo = this;\n\n    chrs = [];\n\n    for (taxid in chromosomes) {\n      for (chr in chromosomes[taxid]) {\n        chrs.push(chromosomes[taxid][chr]);\n      }\n    }\n\n    var textOffsets = {};\n\n    chrIndex = 0;\n    for (i = 0; i < chrs.length; i++) {\n      chrIndex += 1;\n\n      chrModel = chrs[i];\n\n      chr = d3.select(ideo.selector + ' #' + chrModel.id);\n\n      // var chrMargin = this.config.chrMargin * chrIndex,\n      //   lineY1, lineY2;\n      //\n      // lineY1 = chrMargin;\n      // lineY2 = chrMargin - 8;\n      //\n      // if (\n      //   chrIndex === 1 &&\n      //   \"perspective\" in this.config && this.config.perspective === \"comparative\"\n      // ) {\n      //   lineY1 += 18;\n      //   lineY2 += 18;\n      // }\n\n      textOffsets[chrModel.id] = [];\n\n      chr.selectAll('text')\n      .data(chrModel.bands)\n      .enter()\n      .append('g')\n        .attr('class', function(d, i) {\n          return 'bandLabel bsbsl-' + i;\n        })\n        .attr('transform', function(d) {\n          var transform = ideo._layout.getChromosomeBandLabelTranslate(d, i);\n\n          var x = transform.x;\n          // var y = transform.y;\n\n          textOffsets[chrModel.id].push(x + 13);\n\n          return transform.translate;\n        })\n        .append('text')\n        .attr('text-anchor', ideo._layout.getChromosomeBandLabelAnchor(i))\n        .text(function(d) {\n          return d.name;\n        });\n\n      // var adapter = ModelAdapter.getInstance(ideo.chromosomesArray[i]);\n      // var view = Chromosome.getInstance(adapter, ideo.config, ideo);\n\n      chr.selectAll('line.bandLabelStalk')\n        .data(chrModel.bands)\n        .enter()\n        .append('g')\n        .attr('class', function(d, i) {\n          return 'bandLabelStalk bsbsl-' + i;\n        })\n        .attr('transform', function(d) {\n          var x, y;\n\n          x = ideo.round(d.px.start + d.px.width / 2);\n\n          textOffsets[chrModel.id].push(x + 13);\n          y = -10;\n\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .append('line')\n        .attr('x1', 0)\n        .attr('y1', function() {\n          return ideo._layout.getChromosomeBandTickY1(i);\n        })\n        .attr('x2', 0)\n        .attr('y2', function() {\n          return ideo._layout.getChromosomeBandTickY2(i);\n        });\n    }\n\n    for (i = 0; i < chrs.length; i++) {\n      chrModel = chrs[i];\n\n      var textsLength = textOffsets[chrModel.id].length,\n        overlappingLabelXRight,\n        index,\n        indexesToShow = [],\n        prevHiddenBoxIndex,\n        xLeft,\n        prevLabelXRight,\n        textPadding;\n\n      overlappingLabelXRight = 0;\n\n      textPadding = 5;\n\n      for (index = 0; index < textsLength; index++) {\n        // Ensures band labels don't overlap\n\n        xLeft = textOffsets[chrModel.id][index];\n\n        if (xLeft < overlappingLabelXRight + textPadding === false) {\n          indexesToShow.push(index);\n        } else {\n          prevHiddenBoxIndex = index;\n          overlappingLabelXRight = prevLabelXRight;\n          continue;\n        }\n\n        if (prevHiddenBoxIndex !== index) {\n          // This getBoundingClientRect() forces Chrome's\n          // 'Recalculate Style' and 'Layout', which takes 30-40 ms on Chrome.\n          // TODO: This forced synchronous layout would be nice to eliminate.\n          // prevTextBox = texts[index].getBoundingClientRect();\n          // prevLabelXRight = prevTextBox.left + prevTextBox.width;\n\n          // TODO: Account for number of characters in prevTextBoxWidth,\n          // maybe also zoom.\n          prevTextBoxLeft = textOffsets[chrModel.id][index];\n          prevTextBoxWidth = 36;\n\n          prevLabelXRight = prevTextBoxLeft + prevTextBoxWidth;\n        }\n\n        if (\n          xLeft < prevLabelXRight + textPadding\n        ) {\n          prevHiddenBoxIndex = index;\n          overlappingLabelXRight = prevLabelXRight;\n        } else {\n          indexesToShow.push(index);\n        }\n      }\n\n      var selectorsToShow = [],\n        ithLength = indexesToShow.length,\n        j;\n\n      for (j = 0; j < ithLength; j++) {\n        index = indexesToShow[j];\n        selectorsToShow.push('#' + chrModel.id + ' .bsbsl-' + index);\n      }\n\n      this.bandsToShow = this.bandsToShow.concat(selectorsToShow);\n    }\n  }\n\n  // Rotates chromosome labels by 90 degrees, e.g. upon clicking a chromosome to focus.\n  rotateChromosomeLabels(chr, chrIndex, orientation, scale) {\n    var chrMargin, chrWidth, ideo, x, y,\n      numAnnotTracks, scaleSvg, tracksHeight;\n\n    chrWidth = this.config.chrWidth;\n    chrMargin = this.config.chrMargin * chrIndex;\n    numAnnotTracks = this.config.numAnnotTracks;\n\n    ideo = this;\n\n    if (\n    typeof (scale) !== 'undefined' &&\n    scale.hasOwnProperty('x') &&\n    !(scale.x === 1 && scale.y === 1)\n  ) {\n      scaleSvg = 'scale(' + scale.x + ',' + scale.y + ')';\n      x = -6;\n      y = (scale === '' ? -16 : -14);\n    } else {\n      x = -8;\n      y = -16;\n      scale = {x: 1, y: 1};\n      scaleSvg = '';\n    }\n\n    if (orientation === 'vertical' || orientation === '') {\n      var ci = chrIndex - 1;\n\n      if (numAnnotTracks > 1 || orientation === '') {\n        ci -= 1;\n      }\n\n      chrMargin2 = -4;\n      if (ideo.config.showBandLabels === true) {\n        chrMargin2 = ideo.config.chrMargin + chrWidth + 26;\n      }\n\n      chrMargin = ideo.config.chrMargin * ci;\n\n      if (numAnnotTracks > 1 === false) {\n        chrMargin += 1;\n      }\n\n      y = chrMargin + chrMargin2;\n\n      chr.selectAll('text.chrLabel')\n        .attr('transform', scaleSvg)\n        .selectAll('tspan')\n          .attr('x', x)\n          .attr('y', y);\n    } else {\n      chrIndex -= 1;\n\n      chrMargin2 = -chrWidth - 2;\n      if (ideo.config.showBandLabels === true) {\n        chrMargin2 = ideo.config.chrMargin + 8;\n      }\n\n      tracksHeight = ideo.config.annotTracksHeight;\n      if (ideo.config.annotationsLayout !== 'overlay') {\n        tracksHeight *= 2;\n      }\n\n      chrMargin = ideo.config.chrMargin * chrIndex;\n      x = -(chrMargin + chrMargin2) + 3 + tracksHeight;\n      x /= scale.x;\n\n      chr.selectAll('text.chrLabel')\n        .attr('transform', 'rotate(-90)' + scaleSvg)\n        .selectAll('tspan')\n        .attr('x', x)\n        .attr('y', y);\n    }\n  }\n\n  /**\n  * Rotates band labels by 90 degrees, e.g. upon clicking a chromosome to focus.\n  *\n  * This method includes proportional scaling, which ensures that\n  * while the parent chromosome group is scaled strongly in one dimension to fill\n  * available space, the text in the chromosome's band labels is\n  * not similarly distorted, and remains readable.\n  */\n  rotateBandLabels(chr, chrIndex, scale) {\n    var chrMargin, scaleSvg,\n      orientation, bandLabels,\n      ideo = this;\n\n    bandLabels = chr.selectAll('.bandLabel');\n\n    chrWidth = this.config.chrWidth;\n    chrMargin = this.config.chrMargin * chrIndex;\n\n    orientation = chr.attr('data-orientation');\n\n    if (typeof (scale) === 'undefined') {\n      scale = {x: 1, y: 1};\n      scaleSvg = '';\n    } else {\n      scaleSvg = 'scale(' + scale.x + ',' + scale.y + ')';\n    }\n\n    if (\n      chrIndex === 1 &&\n      'perspective' in this.config && this.config.perspective === 'comparative'\n    ) {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = (8 - chrMargin) - 26;\n          y = ideo.round(2 + d.px.start + d.px.width / 2);\n          return 'rotate(-90)translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('text-anchor', 'end');\n    } else if (orientation === 'vertical') {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = 8 - chrMargin;\n          y = ideo.round(2 + d.px.start + d.px.width / 2);\n          return 'rotate(-90)translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('transform', scaleSvg);\n    } else {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = ideo.round(-8 * scale.x + d.px.start + d.px.width / 2);\n          y = chrMargin - 10;\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('transform', scaleSvg);\n\n      chr.selectAll('.bandLabelStalk line')\n        .attr('transform', scaleSvg);\n    }\n  }\n\n  round(coord) {\n    // Rounds an SVG coordinates to two decimal places\n    // e.g. 42.1234567890 -> 42.12\n    // Per http://stackoverflow.com/a/9453447, below method is fastest\n    return Math.round(coord * 100) / 100;\n  }\n\n  /**\n  * Renders all the bands and outlining boundaries of a chromosome.\n  */\n  drawChromosome(chrModel, chrIndex, container, k) {\n    var chrMargin = this.config.chrMargin;\n\n    // Get chromosome model adapter class\n    var adapter = ModelAdapter.getInstance(chrModel);\n\n    // Append chromosome's container\n    var chromosome = container\n        .append('g')\n        .attr('id', chrModel.id)\n        .attr('class', 'chromosome ' + adapter.getCssClass())\n        .attr('transform', 'translate(0, ' + k * chrMargin + ')');\n\n    // Render chromosome\n    return Chromosome.getInstance(adapter, this.config, this)\n        .render(chromosome, chrIndex, k);\n  }\n\n  /**\n  * Rotates a chromosome 90 degrees and shows or hides all other chromosomes\n  * Useful for focusing or defocusing a particular chromosome\n  */\n  rotateAndToggleDisplay(chromosome) {\n    // Do nothing if taxId not defined. But it should be defined.\n    // To fix that bug we should have a way to find chromosome set number.\n    if (!this.config.taxid) {\n      return;\n    }\n\n    var chrSetNumber =\n      Number(d3.select(chromosome.parentNode).attr('data-set-number'));\n\n    var chrNumber = Array.prototype.slice.call(\n          d3.select(chromosome.parentNode).selectAll('g.chromosome')._groups[0]\n      ).indexOf(chromosome);\n\n    return this._layout.rotate(chrSetNumber, chrNumber, chromosome);\n  }\n\n  /**\n  * Converts base pair coordinates to pixel offsets.\n  * Bp-to-pixel scales differ among cytogenetic bands.\n  */\n  convertBpToPx(chr, bp) {\n    var i, band, bpToIscnScale, iscn, px, offset, pxStart, pxLength, iscnStart,\n      iscnStop, iscnLength, bpStart, bpStop, bpLength;\n\n    for (i = 0; i < chr.bands.length; i++) {\n      band = chr.bands[i];\n\n      offset = this._bandsXOffset;\n      bpStart = band.bp.start;\n      bpStop = band.bp.stop;\n      bpLength = bpStop - bpStart;\n      iscnStart = band.iscn.start;\n      iscnStop = band.iscn.stop;\n      iscnLength = iscnStop - iscnStart;\n      pxStart = band.px.start;\n      pxLength = band.px.width;\n\n      if (bp >= bpStart && bp <= bpStop) {\n        bpToIscnScale = iscnLength / bpLength;\n        iscn = iscnStart + (bp - bpStart) * bpToIscnScale;\n\n        px = offset + pxStart + (pxLength * (iscn - iscnStart) / (iscnLength));\n\n        return px;\n      }\n    }\n\n    throw new Error(\n      'Base pair out of range.  ' +\n      'bp: ' + bp + '; length of chr' + chr.name + ': ' + band.bp.stop\n    );\n  }\n\n  /**\n  * Converts base pair coordinates to pixel offsets.\n  * Bp-to-pixel scales differ among cytogenetic bands.\n  */\n  convertPxToBp(chr, px) {\n    var i, band, pxToIscnScale, iscn,\n      pxStart, pxStop, iscnStart, iscnStop, bpLength, iscnLength;\n\n    for (i = 0; i < chr.bands.length; i++) {\n      band = chr.bands[i];\n\n      pxStart = band.px.start;\n      pxStop = band.px.stop;\n      iscnStart = band.iscn.start;\n      iscnStop = band.iscn.stop;\n\n      if (px >= pxStart && px <= pxStop) {\n        iscnLength = iscnStop - iscnStart;\n        pxLength = pxStop - pxStart;\n        bpLength = band.bp.stop - band.bp.start;\n\n        pxToIscnScale = iscnLength / pxLength;\n        iscn = iscnStart + (px - pxStart) * pxToIscnScale;\n\n        bp = band.bp.start + (bpLength * (iscn - iscnStart) / iscnLength);\n\n        return Math.round(bp);\n      }\n    }\n\n    throw new Error(\n      'Pixel out of range.  ' +\n      'px: ' + bp + '; length of chr' + chr.name + ': ' + pxStop\n    );\n  }\n\n  /**\n  * Draws a trapezoid connecting a genomic range on\n  * one chromosome to a genomic range on another chromosome;\n  * a syntenic region.\n  */\n  drawSynteny(syntenicRegions) {\n    var t0 = new Date().getTime();\n\n    var r1, r2,\n      syntenies,\n      i, color, opacity,\n      regionID,\n      ideo = this;\n\n    syntenies = d3.select(ideo.selector)\n    .insert('g', ':first-child')\n    .attr('class', 'synteny');\n\n    for (i = 0; i < syntenicRegions.length; i++) {\n      regions = syntenicRegions[i];\n\n      r1 = regions.r1;\n      r2 = regions.r2;\n\n      color = '#CFC';\n      if ('color' in regions) {\n        color = regions.color;\n      }\n\n      opacity = 1;\n      if ('opacity' in regions) {\n        opacity = regions.opacity;\n      }\n\n      r1.startPx = this.convertBpToPx(r1.chr, r1.start);\n      r1.stopPx = this.convertBpToPx(r1.chr, r1.stop);\n      r2.startPx = this.convertBpToPx(r2.chr, r2.start);\n      r2.stopPx = this.convertBpToPx(r2.chr, r2.stop);\n\n      regionID = (\n      r1.chr.id + '_' + r1.start + '_' + r1.stop + '_' +\n      '__' +\n      r2.chr.id + '_' + r2.start + '_' + r2.stop\n    );\n\n      syntenicRegion = syntenies.append('g')\n        .attr('class', 'syntenicRegion')\n        .attr('id', regionID)\n        .on('click', function() {\n          var activeRegion = this;\n          var others = d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .filter(function() {\n              return (this !== activeRegion);\n            });\n\n          others.classed('hidden', !others.classed('hidden'));\n        })\n        .on('mouseover', function() {\n          var activeRegion = this;\n          d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .filter(function() {\n              return (this !== activeRegion);\n            })\n            .classed('ghost', true);\n        })\n        .on('mouseout', function() {\n          d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .classed('ghost', false);\n        });\n      var chrWidth = ideo.config.chrWidth;\n      var x1 = this._layout.getChromosomeSetYTranslate(0);\n      var x2 = this._layout.getChromosomeSetYTranslate(1) - chrWidth;\n\n      syntenicRegion.append('polygon')\n        .attr('points',\n          x1 + ', ' + r1.startPx + ' ' +\n          x1 + ', ' + r1.stopPx + ' ' +\n          x2 + ', ' + r2.stopPx + ' ' +\n          x2 + ', ' + r2.startPx\n        )\n        .attr('style', 'fill: ' + color + '; fill-opacity: ' + opacity);\n\n      syntenicRegion.append('line')\n        .attr('class', 'syntenyBorder')\n        .attr('x1', x1)\n        .attr('x2', x2)\n        .attr('y1', r1.startPx)\n        .attr('y2', r2.startPx);\n\n      syntenicRegion.append('line')\n        .attr('class', 'syntenyBorder')\n        .attr('x1', x1)\n        .attr('x2', x2)\n        .attr('y1', r1.stopPx)\n        .attr('y2', r2.stopPx);\n    }\n\n    var t1 = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time in drawSyntenicRegions: ' + (t1 - t0) + ' ms');\n    }\n  }\n\n  /**\n  * Initializes various annotation settings.  Constructor help function.\n  */\n  initAnnotSettings() {\n    if (\n      this.config.annotationsPath ||\n      this.config.localAnnotationsPath ||\n      this.annots || this.config.annotations\n    ) {\n      if (!this.config.annotationHeight) {\n        var annotHeight = Math.round(this.config.chrHeight / 100);\n        this.config.annotationHeight = annotHeight;\n      }\n\n      if (this.config.annotationTracks) {\n        this.config.numAnnotTracks = this.config.annotationTracks.length;\n      } else {\n        this.config.numAnnotTracks = 1;\n      }\n      this.config.annotTracksHeight =\n      this.config.annotationHeight * this.config.numAnnotTracks;\n\n      if (typeof this.config.barWidth === 'undefined') {\n        this.config.barWidth = 3;\n      }\n    } else {\n      this.config.annotTracksHeight = 0;\n    }\n\n    if (typeof this.config.annotationsColor === 'undefined') {\n      this.config.annotationsColor = '#F00';\n    }\n  }\n\n  /**\n  * Draws annotations defined by user\n  */\n  drawAnnots(friendlyAnnots) {\n    var ideo = this,\n      i, j, annot,\n      rawAnnots = [],\n      rawAnnot, keys,\n      chr,\n      chrs = ideo.chromosomes[ideo.config.taxid]; // TODO: multiorganism\n\n    // Occurs when filtering\n    if ('annots' in friendlyAnnots[0]) {\n      return ideo.drawProcessedAnnots(friendlyAnnots);\n    }\n\n    for (chr in chrs) {\n      rawAnnots.push({chr: chr, annots: []});\n    }\n\n    for (i = 0; i < friendlyAnnots.length; i++) {\n      annot = friendlyAnnots[i];\n\n      for (j = 0; j < rawAnnots.length; j++) {\n        if (annot.chr === rawAnnots[j].chr) {\n          rawAnnot = [\n            annot.name,\n            annot.start,\n            annot.stop - annot.start\n          ];\n          if ('color' in annot) {\n            rawAnnot.push(annot.color);\n          }\n          if ('shape' in annot) {\n            rawAnnot.push(annot.shape);\n          }\n          rawAnnots[j].annots.push(rawAnnot);\n          break;\n        }\n      }\n    }\n\n    keys = ['name', 'start', 'length'];\n    if ('color' in friendlyAnnots[0]) {\n      keys.push('color');\n    }\n    if ('shape' in friendlyAnnots[0]) {\n      keys.push('shape');\n    }\n    ideo.rawAnnots = {keys: keys, annots: rawAnnots};\n\n    ideo.annots = ideo.processAnnotData(ideo.rawAnnots);\n\n    ideo.drawProcessedAnnots(ideo.annots);\n  }\n\n  /**\n  * Proccesses genome annotation data.\n  * Genome annotations represent features like a gene, SNP, etc. as\n  * a small graphical object on or beside a chromosome.\n  * Converts raw annotation data from server, which is structured as\n  * an array of arrays, into a more verbose data structure consisting\n  * of an array of objects.\n  * Also adds pixel offset information.\n  */\n  processAnnotData(rawAnnots) {\n    var keys,\n      i, j, annot, annots, annotsByChr,\n      chr,\n      chrModel, ra,\n      startPx, stopPx, px,\n      color,\n      ideo = this;\n\n    keys = rawAnnots.keys;\n    rawAnnots = rawAnnots.annots;\n\n    annots = [];\n\n    for (i = 0; i < rawAnnots.length; i++) {\n      annotsByChr = rawAnnots[i];\n\n      annots.push({chr: annotsByChr.chr, annots: []});\n\n      for (j = 0; j < annotsByChr.annots.length; j++) {\n        chr = annotsByChr.chr;\n        ra = annotsByChr.annots[j];\n        annot = {};\n\n        for (var k = 0; k < keys.length; k++) {\n          annot[keys[k]] = ra[k];\n        }\n\n        annot.stop = annot.start + annot.length;\n\n        chrModel = ideo.chromosomes[ideo.config.taxid][chr];\n\n        startPx = ideo.convertBpToPx(chrModel, annot.start);\n        stopPx = ideo.convertBpToPx(chrModel, annot.stop);\n\n        px = Math.round((startPx + stopPx) / 2) - 28;\n\n        color = ideo.config.annotationsColor;\n        if (ideo.config.annotationTracks) {\n          annot.trackIndex = ra[3];\n          color = ideo.config.annotationTracks[annot.trackIndex].color;\n        } else {\n          annot.trackIndex = 0;\n        }\n\n        if ('color' in annot) {\n          color = annot.color;\n        }\n\n        annot.chr = chr;\n        annot.chrIndex = i;\n        annot.px = px;\n        annot.startPx = startPx - 30;\n        annot.stopPx = stopPx - 30;\n        annot.color = color;\n\n        annots[i].annots.push(annot);\n      }\n    }\n\n    return annots;\n  }\n\n  /*\n  * Can be used for bar chart or sparkline\n  */\n  getHistogramBars(annots) {\n    var t0 = new Date().getTime();\n\n    var i, j, chr,\n      chrModels, chrPxStop, px,\n      chrAnnots, chrName, chrIndex, annot,\n      bars, bar, barPx, nextBarPx, barWidth,\n      maxAnnotsPerBar, color,\n      firstGet = false,\n      histogramScaling,\n      ideo = this;\n\n    bars = [];\n\n    barWidth = ideo.config.barWidth;\n    chrModels = ideo.chromosomes[ideo.config.taxid];\n    color = ideo.config.annotationsColor;\n\n    if ('histogramScaling' in ideo.config) {\n      histogramScaling = ideo.config.histogramScaling;\n    } else {\n      histogramScaling = 'relative';\n    }\n\n    if (typeof ideo.maxAnnotsPerBar === 'undefined') {\n      ideo.maxAnnotsPerBar = {};\n      firstGet = true;\n    }\n\n    for (chr in chrModels) {\n      chrModel = chrModels[chr];\n      chrIndex = chrModel.chrIndex;\n      lastBand = chrModel.bands[chrModel.bands.length - 1];\n      chrPxStop = lastBand.px.stop;\n      numBins = Math.round(chrPxStop / barWidth);\n      bar = {chr: chr, annots: []};\n      for (i = 0; i < numBins; i++) {\n        px = i * barWidth - ideo.bump;\n        bp = ideo.convertPxToBp(chrModel, px + ideo.bump);\n        bar.annots.push({\n          bp: bp,\n          px: px - ideo.bump,\n          count: 0,\n          chrIndex: chrIndex,\n          chrName: chr,\n          color: color,\n          annots: []\n        });\n      }\n      bars.push(bar);\n    }\n\n    for (chr in annots) {\n      chrAnnots = annots[chr].annots;\n      chrName = annots[chr].chr;\n      chrModel = chrModels[chrName];\n      chrIndex = chrModel.chrIndex - 1;\n      barAnnots = bars[chrIndex].annots;\n      for (i = 0; i < chrAnnots.length; i++) {\n        annot = chrAnnots[i];\n        px = annot.px - ideo.bump;\n        for (j = 0; j < barAnnots.length; j++) {\n          barPx = barAnnots[j].px;\n          nextBarPx = barPx + barWidth;\n          if (j === barAnnots.length - 1) {\n            nextBarPx += barWidth;\n          }\n          if (px >= barPx && px < nextBarPx) {\n            bars[chrIndex].annots[j].count += 1;\n            bars[chrIndex].annots[j].annots.push(annot);\n            break;\n          }\n        }\n      }\n    }\n\n    if (firstGet === true || histogramScaling === 'relative') {\n      maxAnnotsPerBar = 0;\n      for (i = 0; i < bars.length; i++) {\n        annots = bars[i].annots;\n        for (j = 0; j < annots.length; j++) {\n          barCount = annots[j].count;\n          if (barCount > maxAnnotsPerBar) {\n            maxAnnotsPerBar = barCount;\n          }\n        }\n      }\n      ideo.maxAnnotsPerBar[chr] = maxAnnotsPerBar;\n    }\n\n  // Set each bar's height to be proportional to\n  // the height of the bar with the most annotations\n    for (i = 0; i < bars.length; i++) {\n      annots = bars[i].annots;\n      for (j = 0; j < annots.length; j++) {\n        barCount = annots[j].count;\n        height = (barCount / ideo.maxAnnotsPerBar[chr]) * ideo.config.chrMargin;\n      // console.log(height)\n        bars[i].annots[j].height = height;\n      }\n    }\n\n    var t1 = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time spent in getHistogramBars: ' + (t1 - t0) + ' ms');\n    }\n\n    ideo.bars = bars;\n\n    return bars;\n  }\n\n/**\n* Fills out annotations data structure such that its top-level list of arrays\n* matches that of this ideogram's chromosomes list in order and number\n* Fixes https://github.com/eweitz/ideogram/issues/66\n*/\n  fillAnnots(annots) {\n    var filledAnnots, chrs, chrArray, i, chr, annot, chrIndex;\n\n    filledAnnots = [];\n    chrs = [];\n    chrArray = this.chromosomesArray;\n\n    for (i = 0; i < chrArray.length; i++) {\n      chr = chrArray[i].name;\n      chrs.push(chr);\n      filledAnnots.push({chr: chr, annots: []});\n    }\n\n    for (i = 0; i < annots.length; i++) {\n      annot = annots[i];\n      chrIndex = chrs.indexOf(annot.chr);\n      if (chrIndex !== -1) {\n        filledAnnots[chrIndex] = annot;\n      }\n    }\n\n    return filledAnnots;\n  }\n\n/**\n* Draws genome annotations on chromosomes.\n* Annotations can be rendered as either overlaid directly\n* on a chromosome, or along one or more \"tracks\"\n* running parallel to each chromosome.\n*/\n  drawProcessedAnnots(annots) {\n    var chrWidth, layout,\n      annotHeight, triangle, circle, r, chrAnnot,\n      x1, x2, y1, y2,\n      filledAnnots,\n      ideo = this;\n\n    chrMargin = this.config.chrMargin;\n    chrWidth = this.config.chrWidth;\n\n    layout = 'tracks';\n    if (this.config.annotationsLayout) {\n      layout = this.config.annotationsLayout;\n    }\n\n    if (layout === 'histogram') {\n      annots = ideo.getHistogramBars(annots);\n    }\n\n    annotHeight = ideo.config.annotationHeight;\n\n    triangle =\n    'l -' + annotHeight + ' ' +\n    (2 * annotHeight) +\n    ' l ' + (2 * annotHeight) + ' 0 z';\n\n  // From http://stackoverflow.com/a/10477334, with a minor change (\"m -r, r\")\n  // Circles are supported natively via <circle>, but having it as a path\n  // simplifies handling triangles, circles and other shapes in the same\n  // D3 call\n    r = annotHeight;\n    circle =\n    'm -' + r + ', ' + r +\n    'a ' + r + ',' + r + ' 0 1,0 ' + (r * 2) + ',0' +\n    'a ' + r + ',' + r + ' 0 1,0 -' + (r * 2) + ',0';\n\n    filledAnnots = ideo.fillAnnots(annots);\n\n    chrAnnot = d3.selectAll(ideo.selector + ' .chromosome')\n    .data(filledAnnots)\n      .selectAll('path.annot')\n      .data(function(d) {\n        return d.annots;\n      })\n      .enter();\n\n    if (layout === 'tracks') {\n      chrAnnot\n      .append('g')\n      .attr('id', function(d) {\n        return d.id;\n      })\n      .attr('class', 'annot')\n      .attr('transform', function(d) {\n        var y = ideo.config.chrWidth + (d.trackIndex * annotHeight * 2);\n        return 'translate(' + d.px + ',' + y + ')';\n      })\n      .append('path')\n      .attr('d', function(d) {\n        if (!d.shape || d.shape === 'triangle') {\n          return 'm0,0' + triangle;\n        } else if (d.shape === 'circle') {\n          return circle;\n        }\n      })\n      .attr('fill', function(d) {\n        return d.color;\n      });\n    } else if (layout === 'overlay') {\n      // Overlaid annotations appear directly on chromosomes\n\n      chrAnnot.append('polygon')\n        .attr('id', function(d) {\n          return d.id;\n        })\n        .attr('class', 'annot')\n        .attr('points', function(d) {\n          if (d.stopPx - d.startPx > 1) {\n            x1 = d.startPx;\n            x2 = d.stopPx;\n          } else {\n            x1 = d.px - 0.5;\n            x2 = d.px + 0.5;\n          }\n          y1 = chrWidth;\n          y2 = 0;\n\n          return (\n            x1 + ',' + y1 + ' ' +\n            x2 + ',' + y1 + ' ' +\n            x2 + ',' + y2 + ' ' +\n            x1 + ',' + y2\n          );\n        })\n        .attr('fill', function(d) {\n          return d.color;\n        });\n    } else if (layout === 'histogram') {\n      chrAnnot.append('polygon')\n        // .attr('id', function(d, i) { return d.id; })\n        .attr('zclass', 'annot')\n        .attr('points', function(d) {\n          x1 = d.px + ideo.bump;\n          x2 = d.px + ideo.config.barWidth + ideo.bump;\n          y1 = chrWidth;\n          y2 = chrWidth + d.height;\n\n          var thisChrWidth = ideo.chromosomesArray[d.chrIndex - 1].width;\n\n          if (x2 > thisChrWidth) {\n            x2 = thisChrWidth;\n          }\n\n          return (\n            x1 + ',' + y1 + ' ' +\n            x2 + ',' + y1 + ' ' +\n            x2 + ',' + y2 + ' ' +\n            x1 + ',' + y2\n          );\n        })\n        .attr('fill', function(d) {\n          return d.color;\n        });\n    }\n\n    if (ideo.onDrawAnnotsCallback) {\n      ideo.onDrawAnnotsCallback();\n    }\n  }\n\n  onBrushMove() {\n    call(this.onBrushMoveCallback);\n  }\n\n  createBrush(from, to) {\n    var ideo = this,\n      width = ideo.config.chrWidth + 6.5,\n      length = ideo.config.chrHeight,\n      chr = ideo.chromosomesArray[0],\n      chrLengthBp = chr.bands[chr.bands.length - 1].bp.stop,\n      x0, x1,\n      xOffset = this._layout.getMargin().left,\n      xScale = d3.scaleLinear()\n          .domain([0, d3.max(chr.bands, function(band) {\n            return band.bp.stop;\n          })]).range([xOffset, d3.max(chr.bands, function(band) {\n            return band.px.stop;\n          }) + xOffset]);\n\n    if (typeof from === 'undefined') {\n      from = Math.floor(chrLengthBp / 10);\n    }\n\n    if (typeof right === 'undefined') {\n      to = Math.ceil(from * 2);\n    }\n\n    x0 = ideo.convertBpToPx(chr, from);\n    x1 = ideo.convertBpToPx(chr, to);\n\n    ideo.selectedRegion = {from: from, to: to, extent: (to - from)};\n\n    ideo.brush = d3.brushX()\n    .extent([[xOffset, 0], [length + xOffset, width]])\n    .on('brush', onBrushMove);\n\n    var yTranslate = this._layout.getChromosomeSetYTranslate(0);\n    var yOffset = yTranslate + (ideo.config.chrWidth - width) / 2;\n    d3.select(ideo.selector).append('g')\n    .attr('class', 'brush')\n    .attr('transform', 'translate(0, ' + yOffset + ')')\n    .call(ideo.brush)\n    .call(ideo.brush.move, [x0, x1]);\n\n    function onBrushMove() {\n      var extent = d3.event.selection.map(xScale.invert),\n        from = Math.floor(extent[0]),\n        to = Math.ceil(extent[1]);\n\n      ideo.selectedRegion = {from: from, to: to, extent: (to - from)};\n\n      if (ideo.onBrushMove) {\n        ideo.onBrushMoveCallback();\n      }\n    }\n  }\n\n/**\n* Called when Ideogram has finished initializing.\n* Accounts for certain ideogram properties not being set until\n* asynchronous requests succeed, etc.\n*/\n  onLoad() {\n    call(this.onLoadCallback);\n  }\n\n  onDrawAnnots() {\n    call(this.onDrawAnnotsCallback);\n  }\n\n/*\n* Returns SVG gradients that give chromosomes a polished look\n*/\n  getBandColorGradients() {\n    var colors,\n      stain, color1, color2, color3,\n      css,\n      gradients = '';\n\n    colors = [\n    ['gneg', '#FFF', '#FFF', '#DDD'],\n    ['gpos25', '#C8C8C8', '#DDD', '#BBB'],\n    ['gpos33', '#BBB', '#BBB', '#AAA'],\n    ['gpos50', '#999', '#AAA', '#888'],\n    ['gpos66', '#888', '#888', '#666'],\n    ['gpos75', '#777', '#777', '#444'],\n    ['gpos100', '#444', '#666', '#000'],\n    ['acen', '#FEE', '#FEE', '#FDD'],\n    ['noBands', '#BBB', '#BBB', '#AAA']\n    ];\n\n    for (var i = 0; i < colors.length; i++) {\n      stain = colors[i][0];\n      color1 = colors[i][1];\n      color2 = colors[i][2];\n      color3 = colors[i][3];\n      gradients +=\n      '<linearGradient id=\"' + stain + '\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">';\n      if (stain === \"gneg\") {\n        gradients +=\n        '<stop offset=\"70%\" stop-color=\"' + color2 + '\" />' +\n        '<stop offset=\"95%\" stop-color=\"' + color3 + '\" />' +\n        '<stop offset=\"100%\" stop-color=\"' + color1 + '\" />';\n      } else {\n        gradients +=\n        '<stop offset=\"5%\" stop-color=\"' + color1 + '\" />' +\n        '<stop offset=\"15%\" stop-color=\"' + color2 + '\" />' +\n        '<stop offset=\"60%\" stop-color=\"' + color3 + '\" />';\n      }\n      gradients +=\n      '</linearGradient>';\n    }\n\n    gradients +=\n    '<pattern id=\"stalk\" width=\"2\" height=\"1\" patternUnits=\"userSpaceOnUse\" ' +\n      'patternTransform=\"rotate(30 0 0)\">' +\n      '<rect x=\"0\" y=\"0\" width=\"10\" height=\"2\" fill=\"#CCE\" /> ' +\n       '<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\" style=\"stroke:#88B; ' +\n        'stroke-width:0.7;\" />' +\n    '</pattern>' +\n    '<pattern id=\"gvar\" width=\"2\" height=\"1\" patternUnits=\"userSpaceOnUse\" ' +\n      'patternTransform=\"rotate(-30 0 0)\">' +\n      '<rect x=\"0\" y=\"0\" width=\"10\" height=\"2\" fill=\"#DDF\" /> ' +\n       '<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\" style=\"stroke:#99C; ' +\n          'stroke-width:0.7;\" />' +\n    '</pattern>';\n\n    gradients = \"<defs>\" + gradients + \"</defs>\";\n    css = \"<style>\" +\n    '.gneg {fill: url(\"#gneg\")} ' +\n    '.gpos25 {fill: url(\"#gpos25\")} ' +\n    '.gpos33 {fill: url(\"#gpos33\")} ' +\n    '.gpos50 {fill: url(\"#gpos50\")} ' +\n    '.gpos66 {fill: url(\"#gpos66\")} ' +\n    '.gpos75 {fill: url(\"#gpos75\")} ' +\n    '.gpos100 {fill: url(\"#gpos100\")} ' +\n    '.gpos {fill: url(\"#gpos100\")} ' +\n    '.acen {fill: url(\"#acen\")} ' +\n    '.stalk {fill: url(\"#stalk\")} ' +\n    '.gvar {fill: url(\"#gvar\")} ' +\n    '.noBands {fill: url(\"#noBands\")} ' +\n    '.chromosome {fill: url(\"#noBands\")} ' +\n  '</style>';\n    gradients = css + gradients;\n\n  // alert(gradients)\n\n    return gradients;\n  }\n\n/*\n*  Returns an NCBI taxonomy identifier (taxid) for the configured organism\n*/\n  getTaxidFromEutils(callback) {\n    var organism, taxonomySearch, taxid,\n      ideo = this;\n\n    organism = ideo.config.organism;\n\n    taxonomySearch = ideo.esearch + '&db=taxonomy&term=' + organism;\n\n    d3.json(taxonomySearch, function(data) {\n      taxid = data.esearchresult.idlist[0];\n      return callback(taxid);\n    });\n  }\n\n/**\n* Returns an array of taxids for the current ideogram\n* Also sets configuration parameters related to taxid(s), whether ideogram is\n* multiorganism, and adjusts chromosomes parameters as needed\n**/\n  getTaxids(callback) {\n    var ideo = this,\n      taxid, taxids,\n      org, orgs, i,\n      taxidInit, tmpChrs,\n      assembly, chromosomes,\n      multiorganism;\n\n    taxidInit = 'taxid' in ideo.config;\n\n    ideo.config.multiorganism = (\n    ('organism' in ideo.config && ideo.config.organism instanceof Array) ||\n    (taxidInit && ideo.config.taxid instanceof Array)\n  );\n\n    multiorganism = ideo.config.multiorganism;\n\n    if ('organism' in ideo.config) {\n    // Ideogram instance was constructed using common organism name(s)\n      if (multiorganism) {\n        orgs = ideo.config.organism;\n      } else {\n        orgs = [ideo.config.organism];\n      }\n\n      taxids = [];\n      tmpChrs = {};\n      for (i = 0; i < orgs.length; i++) {\n      // Gets a list of taxids from common organism names\n        org = orgs[i];\n        for (taxid in ideo.organisms) {\n          if (ideo.organisms[taxid].commonName.toLowerCase() === org) {\n            taxids.push(taxid);\n            if (multiorganism) {\n            // Adjusts 'chromosomes' configuration parameter to make object\n            // keys use taxid instead of common organism name\n              tmpChrs[taxid] = ideo.config.chromosomes[org];\n            }\n          }\n        }\n      }\n\n      if (taxids.length === 0) {\n        promise = new Promise(function(resolve) {\n          ideo.getTaxidFromEutils(resolve);\n        });\n\n        promise.then(function(data) {\n          var organism = ideo.config.organism,\n            dataDir = ideo.config.dataDir,\n            urlOrg = organism.replace(' ', '-');\n\n          taxid = data;\n          taxids.push(taxid);\n\n          ideo.config.taxids = taxids;\n          ideo.organisms[taxid] = {\n            commonName: '',\n            scientificName: ideo.config.organism,\n            scientificNameAbbr: ''\n          };\n\n          var fullyBandedTaxids = ['9606', '10090', '10116'];\n          if (\n          fullyBandedTaxids.indexOf(taxid) !== -1 &&\n          ideo.config.showFullyBanded === false\n        ) {\n            urlOrg += '-no-bands';\n          }\n          var chromosomesUrl = dataDir + urlOrg + '.js';\n\n          var promise = new Promise(function(resolve, reject) {\n            d3.request(chromosomesUrl).get(function(error, data) {\n              if (error) {\n                reject(Error(error));\n              }\n              resolve(data);\n            });\n          });\n\n          return promise\n          .then(\n            function(data) {\n              // Check if chromosome data exists locally.\n              // This is used for pre-processed centromere data,\n              // which is not accessible via EUtils.  See get_chromosomes.py.\n\n              var asmAndChrArray = [],\n                chromosomes = [],\n                seenChrs = {},\n                chr;\n\n              eval(data.response);\n\n              asmAndChrArray.push('');\n\n              for (var i = 0; i < chrBands.length; i++) {\n                chr = chrBands[i].split(' ')[0];\n                if (chr in seenChrs) {\n                  continue;\n                } else {\n                  chromosomes.push({name: chr, type: 'nuclear'});\n                  seenChrs[chr] = 1;\n                }\n              }\n              chromsomes = chromosomes.sort(ideo.sortChromosomes);\n              asmAndChrArray.push(chromosomes);\n              ideo.coordinateSystem = 'iscn';\n              return asmAndChrArray;\n            },\n            function() {\n              return new Promise(function(resolve) {\n                ideo.coordinateSystem = 'bp';\n                ideo.getAssemblyAndChromosomesFromEutils(resolve);\n              });\n            }\n          );\n        })\n      .then(function(asmChrArray) {\n        assembly = asmChrArray[0];\n        chromosomes = asmChrArray[1];\n\n        ideo.config.chromosomes = chromosomes;\n        ideo.organisms[taxid].assemblies = {\n          default: assembly\n        };\n\n        callback(taxids);\n      });\n      } else {\n        ideo.config.taxids = taxids;\n        if (multiorganism) {\n          ideo.config.chromosomes = tmpChrs;\n        }\n\n        callback(taxids);\n      }\n    } else {\n      if (multiorganism) {\n        ideo.coordinateSystem = 'bp';\n        if (taxidInit) {\n          taxids = ideo.config.taxid;\n        }\n      } else {\n        if (taxidInit) {\n          taxids = [ideo.config.taxid];\n        }\n        ideo.config.taxids = taxids;\n      }\n\n      callback(taxids);\n    }\n  }\n\n  sortChromosomes(a, b) {\n    var aIsNuclear = a.type === 'nuclear',\n      bIsNuclear = b.type === 'nuclear',\n      aIsCP = a.type === 'chloroplast',\n      bIsCP = b.type === 'chloroplast',\n      aIsMT = a.type === 'mitochondrion',\n      bIsMT = b.type === 'mitochondrion';\n    // aIsPlastid = aIsMT && a.name !== 'MT', // e.g. B1 in rice genome GCF_001433935.1\n    // bIsPlastid = bIsMT && b.name !== 'MT';\n\n    if (aIsNuclear && bIsNuclear) {\n      return naturalSort(a.name, b.name);\n    } else if (!aIsNuclear && bIsNuclear) {\n      return 1;\n    } else if (aIsMT && bIsCP) {\n      return 1;\n    } else if (aIsCP && bIsMT) {\n      return -1;\n    } else if (!aIsMT && !aIsCP && (bIsMT || bIsCP)) {\n      return -1;\n    }\n  }\n\n/*\n*  Returns names and lengths of chromosomes for an organism's best-known\n*  genome assembly.  Gets data from NCBI EUtils web API.\n*/\n  getAssemblyAndChromosomesFromEutils(callback) {\n    var asmAndChrArray, // [assembly_accession, chromosome_objects_array]\n      assemblyAccession, chromosomes, asmSearch,\n      asmUid, asmSummary,\n      rsUid, nuccoreLink,\n      links, ntSummary,\n      results, result, cnIndex, chrName, chrLength, chromosome, type,\n      ideo = this;\n\n    organism = ideo.config.organism;\n\n    asmAndChrArray = [];\n    chromosomes = [];\n\n    asmSearch =\n    ideo.esearch +\n    '&db=assembly' +\n    '&term=%22' + organism + '%22[organism]' +\n      'AND%20(%22latest%20refseq%22[filter])%20' +\n      'AND%20(%22chromosome%20level%22[filter]%20' +\n      'OR%20%22complete%20genome%22[filter])';\n\n    var promise = d3.promise.json(asmSearch);\n\n    promise\n      .then(function(data) {\n        // NCBI Assembly database's internal identifier (uid) for this assembly\n        asmUid = data.esearchresult.idlist[0];\n        asmSummary = ideo.esummary + '&db=assembly&id=' + asmUid;\n\n        return d3.promise.json(asmSummary);\n      })\n      .then(function(data) {\n        // RefSeq UID for this assembly\n        rsUid = data.result[asmUid].rsuid;\n        assemblyAccession = data.result[asmUid].assemblyaccession;\n\n        asmAndChrArray.push(assemblyAccession);\n\n        // Get a list of IDs for the chromosomes in this genome.\n        //\n        // This information does not seem to be available from well-known\n        // NCBI databases like Assembly or Nucleotide, so we use GenColl,\n        // a lesser-known NCBI database.\n        var qs = '&db=nuccore&linkname=gencoll_nuccore_chr&from_uid=' + rsUid;\n        nuccoreLink = ideo.elink + qs;\n\n        return d3.promise.json(nuccoreLink);\n      })\n      .then(function(data) {\n        links = data.linksets[0].linksetdbs[0].links.join(',');\n        ntSummary = ideo.esummary + '&db=nucleotide&id=' + links;\n\n        return d3.promise.json(ntSummary);\n      })\n      .then(function(data) {\n        results = data.result;\n\n        for (var x in results) {\n          result = results[x];\n\n          // omit list of reult uids\n          if (x === 'uids') {\n            continue;\n          }\n\n          if (result.genome === 'mitochondrion') {\n            if (ideo.config.showNonNuclearChromosomes) {\n              type = result.genome;\n              cnIndex = result.subtype.split('|').indexOf('plasmid');\n              if (cnIndex === -1) {\n                chrName = 'MT';\n              } else {\n                // Seen in e.g. rice genome IRGSP-1.0 (GCF_001433935.1),\n                // From https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?retmode=json&db=nucleotide&id=996703432,996703431,996703430,996703429,996703428,996703427,996703426,996703425,996703424,996703423,996703422,996703421,194033210,11466763,7524755\n                // genome: 'mitochondrion',\n                // subtype: 'cell_line|plasmid',\n                // subname: 'A-58 CMS|B1',\n                chrName = result.subname.split('|')[cnIndex];\n              }\n            } else {\n              continue;\n            }\n          } else if (\n            result.genome === 'chloroplast' ||\n            result.genome === 'plastid'\n          ) {\n            type = 'chloroplast';\n            // Plastid encountered with rice genome IRGSP-1.0 (GCF_001433935.1)\n            if (ideo.config.showNonNuclearChromosomes) {\n              chrName = 'CP';\n            } else {\n              continue;\n            }\n          } else {\n            type = 'nuclear';\n            cnIndex = result.subtype.split('|').indexOf('chromosome');\n\n            chrName = result.subname.split('|')[cnIndex];\n\n            if (\n              typeof chrName !== 'undefined' &&\n              chrName.substr(0, 3) === 'chr'\n            ) {\n              // Convert \"chr12\" to \"12\", e.g. for banana (GCF_000313855.2)\n              chrName = chrName.substr(3);\n            }\n          }\n\n          chrLength = result.slen;\n\n          chromosome = {\n            name: chrName,\n            length: chrLength,\n            type: type\n          };\n\n          chromosomes.push(chromosome);\n        }\n\n        chromosomes = chromosomes.sort(ideo.sortChromosomes);\n        asmAndChrArray.push(chromosomes);\n\n        ideo.coordinateSystem = 'bp';\n\n        return callback(asmAndChrArray);\n      });\n  }\n\n  drawSexChromosomes(bandsArray, taxid, container, defs, j, chrs) {\n    var chromosome, bands, chrModel, shape, sci, k,\n      sexChromosomeIndexes,\n      ideo = this;\n\n    if (ideo.config.sex === 'male') {\n      sexChromosomeIndexes = [1, 0];\n    } else {\n      sexChromosomeIndexes = [0, 0];\n    }\n\n    for (k = 0; k < sexChromosomeIndexes.length; k++) {\n      sci = sexChromosomeIndexes[k] + j;\n      chromosome = chrs[sci];\n      bands = bandsArray[sci];\n      chrModel = ideo.getChromosomeModel(bands, chromosome, taxid, sci);\n      shape = ideo.drawChromosome(chrModel, j, container, k);\n      defs.append('clipPath')\n        .attr('id', chrModel.id + '-chromosome-set-clippath')\n        .selectAll('path')\n        .data(shape)\n        .enter()\n        .append('path')\n        .attr('d', function(d) {\n          return d.path;\n        }).attr('class', function(d) {\n          return d.class;\n        });\n    }\n  }\n\n  /*\n  * Configures chromosome data and calls downstream chromosome drawing functions\n  */\n  initDrawChromosomes(bandsArray) {\n    var ideo = this,\n      taxids = ideo.config.taxids,\n      ploidy = ideo.config.ploidy,\n      taxid,\n      chrIndex = 0,\n      chrSetNumber = 0,\n      bands,\n      i, j, chrs, chromosome, chrModel,\n      defs, transform;\n\n    defs = d3.select(ideo.selector + ' defs');\n\n    for (i = 0; i < taxids.length; i++) {\n      taxid = taxids[i];\n      chrs = ideo.config.chromosomes[taxid];\n\n      ideo.chromosomes[taxid] = {};\n\n      ideo.setSexChromosomes(chrs);\n\n      for (j = 0; j < chrs.length; j++) {\n        chromosome = chrs[j];\n        bands = bandsArray[chrIndex];\n        chrIndex += 1;\n\n        chrModel = ideo.getChromosomeModel(bands, chromosome, taxid, chrIndex);\n\n        ideo.chromosomes[taxid][chromosome] = chrModel;\n        ideo.chromosomesArray.push(chrModel);\n\n        if (\n          'sex' in ideo.config &&\n          (\n            ploidy === 2 && ideo.sexChromosomes.index + 2 === chrIndex ||\n            ideo.config.sex === 'female' && chrModel.name === 'Y'\n          )\n        ) {\n          continue;\n        }\n\n        transform = ideo._layout.getChromosomeSetTranslate(chrSetNumber);\n        chrSetNumber += 1;\n\n        // Append chromosome set container\n        var container = d3.select(ideo.selector)\n          .append('g')\n          .attr('class', 'chromosome-set-container')\n          .attr('data-set-number', j)\n          .attr('transform', transform)\n          .attr('id', chrModel.id + '-chromosome-set');\n\n        if (\n          'sex' in ideo.config &&\n          ploidy === 2 &&\n          ideo.sexChromosomes.index + 1 === chrIndex\n        ) {\n          ideo.drawSexChromosomes(bandsArray, taxid, container, defs, j, chrs);\n          continue;\n        }\n\n        var shape;\n        var numChrsInSet = 1;\n        if (ploidy > 1) {\n          numChrsInSet = this._ploidy.getChromosomesNumber(j);\n        }\n        for (var k = 0; k < numChrsInSet; k++) {\n          shape = ideo.drawChromosome(chrModel, chrIndex - 1, container, k);\n        }\n\n        defs.append('clipPath')\n          .attr('id', chrModel.id + '-chromosome-set-clippath')\n          .selectAll('path')\n          .data(shape)\n          .enter()\n          .append('path')\n          .attr('d', function(d) {\n            return d.path;\n          }).attr('class', function(d) {\n            return d.class;\n          });\n      }\n\n      if (ideo.config.showBandLabels === true) {\n        ideo.drawBandLabels(ideo.chromosomes);\n      }\n    }\n  }\n\n  // Get ideogram SVG container\n  getSvg() {\n    return d3.select(this.selector).node();\n  }\n\n  /*\n  * Sets instance properties regarding sex chromosomes.\n  * Currently only supported for mammals.\n  * TODO: Support all sexually reproducing taxa\n  *   XY sex-determination (mammals):\n  *     - Male: XY <- heterogametic\n  *     - Female: XX\n  *   ZW sex-determination (birds):\n  *     - Male: ZZ\n  *     - Female: ZW <- heterogametic\n  *   X0 sex-determination (some insects):\n  *     - Male: X0, i.e. only X <- heterogametic?\n  *     - Female: XX\n  * TODO: Support sex chromosome aneuploidies in mammals\n  *     - Turner syndrome: X0\n  *     - Klinefelter syndome: XXY\n  *  More types:\n  *  https:*en.wikipedia.org/wiki/Category:Sex_chromosome_aneuploidies\n  */\n  setSexChromosomes(chrs) {\n    if (this.config.ploidy !== 2 || !this.config.sex) {\n      return;\n    }\n\n    var ideo = this,\n      sexChrs = {X: 1, Y: 1},\n      chr, i;\n\n    ideo.sexChromosomes.list = [];\n\n    for (i = 0; i < chrs.length; i++) {\n      chr = chrs[i];\n\n      if (ideo.config.sex === 'male' && chr in sexChrs) {\n        ideo.sexChromosomes.list.push(chr);\n        if (!ideo.sexChromosomes.index) {\n          ideo.sexChromosomes.index = i;\n        }\n      } else if (chr === 'X') {\n        ideo.sexChromosomes.list.push(chr, chr);\n        ideo.sexChromosomes.index = i;\n      }\n    }\n  }\n\n  /*\n  * Completes default ideogram initialization\n  * by calling downstream functions to\n  * process raw band data into full JSON objects,\n  * render chromosome and cytoband figures and labels,\n  * apply initial graphical transformations,\n  * hide overlapping band labels, and\n  * execute callbacks defined by client code\n  */\n  processBandData() {\n    var bandsArray, maxLength, j, k, chromosome, bands,\n      chrLength, chr,\n      bandData, bandsByChr,\n      taxid, taxids, chrs, chrsByTaxid,\n      ideo = this;\n\n    bandsArray = [];\n    maxLength = 0;\n\n    if (ideo.config.multiorganism === true) {\n      ideo.coordinateSystem = 'bp';\n      taxids = ideo.config.taxids;\n      for (i = 0; i < taxids.length; i++) {\n        taxid = taxids[i];\n      }\n    } else {\n      if (typeof ideo.config.taxid === 'undefined') {\n        ideo.config.taxid = ideo.config.taxids[0];\n      }\n      taxid = ideo.config.taxid;\n      taxids = [taxid];\n      ideo.config.taxids = taxids;\n    }\n\n    if ('chromosomes' in ideo.config) {\n      chrs = ideo.config.chromosomes;\n    }\n    if (ideo.config.multiorganism) {\n      chrsByTaxid = chrs;\n    }\n\n    ideo.config.chromosomes = {};\n\n    var t0B = new Date().getTime();\n\n    for (j = 0; j < taxids.length; j++) {\n      taxid = taxids[j];\n\n      if (ideo.config.multiorganism) {\n        chrs = chrsByTaxid[taxid];\n      }\n\n      if (ideo.coordinateSystem === 'iscn' || ideo.config.multiorganism) {\n        bandData = ideo.bandData[taxid];\n\n        bandsByChr = ideo.getBands(bandData, taxid, chrs);\n\n        chrs = Object.keys(bandsByChr).sort(function(a, b) {\n          return naturalSort(a, b);\n        });\n\n        ideo.config.chromosomes[taxid] = chrs.slice();\n        ideo.numChromosomes += ideo.config.chromosomes[taxid].length;\n\n        for (k = 0; k < chrs.length; k++) {\n          chromosome = chrs[k];\n          bands = bandsByChr[chromosome];\n          bandsArray.push(bands);\n\n          chrLength = {\n            iscn: bands[bands.length - 1].iscn.stop,\n            bp: bands[bands.length - 1].bp.stop\n          };\n\n          if (chrLength.iscn > ideo.maxLength.iscn) {\n            ideo.maxLength.iscn = chrLength.iscn;\n          }\n\n          if (chrLength.bp > ideo.maxLength.bp) {\n            ideo.maxLength.bp = chrLength.bp;\n          }\n        }\n      } else if (ideo.coordinateSystem === 'bp') {\n        // If lacking band-level data\n\n        ideo.config.chromosomes[taxid] = chrs.slice();\n        ideo.numChromosomes += ideo.config.chromosomes[taxid].length;\n\n        for (k = 0; k < chrs.length; k++) {\n          chr = chrs[k];\n          if (chr.length > ideo.maxLength.bp) {\n            ideo.maxLength.bp = chr.length;\n          }\n        }\n      }\n    }\n\n    var t1B = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time in processBandData: ' + (t1B - t0B) + ' ms');\n    }\n\n    return bandsArray;\n  }\n\n  /**\n  * Initializes an ideogram.\n  * Sets some high-level properties based on instance configuration,\n  * fetches band and annotation data if needed, and\n  * writes an SVG element to the document to contain the ideogram\n  */\n  init() {\n    var taxid, i, svgClass;\n\n    var ideo = this;\n\n    var t0 = new Date().getTime();\n\n    var bandsArray = [],\n      numBandDataResponses = 0,\n      resolution = this.config.resolution,\n      accession;\n\n    var promise = new Promise(function(resolve) {\n      ideo.getTaxids(resolve);\n    });\n\n    promise.then(function(taxids) {\n      taxid = taxids[0];\n      ideo.config.taxid = taxid;\n      ideo.config.taxids = taxids;\n\n      var assemblies,\n        bandFileName;\n\n      var bandDataFileNames = {\n        9606: '',\n        10090: ''\n      };\n\n      for (i = 0; i < taxids.length; i++) {\n        taxid = String(taxids[i]);\n\n        if (!ideo.config.assembly) {\n          ideo.config.assembly = 'default';\n        }\n        assemblies = ideo.organisms[taxid].assemblies;\n        accession = assemblies[ideo.config.assembly];\n\n        bandFileName = [];\n        bandFileName.push(slugify(ideo.organisms[taxid].scientificName));\n        if (accession !== assemblies.default) {\n          bandFileName.push(accession);\n        }\n        if (\n          taxid === '9606' &&\n          (accession !== assemblies.default || resolution !== 850)\n        ) {\n          bandFileName.push(resolution);\n        }\n        bandFileName = bandFileName.join('-') + '.js';\n\n        if (taxid === '9606' || taxid === '10090') {\n          bandDataFileNames[taxid] = bandFileName;\n        }\n\n        if (typeof chrBands === 'undefined' && taxid in bandDataFileNames) {\n          d3.request(ideo.config.dataDir + bandDataFileNames[taxid])\n            .on('beforesend', function(data) {\n              // Ensures correct taxid is processed in response callback; using\n              // simply 'taxid' variable gives the last *requested* taxid, which\n              // fails when dealing with multiple taxa.\n              data.taxid = taxid;\n            })\n            .get(function(error, data) {\n              eval(data.response);\n\n              ideo.bandData[data.taxid] = chrBands;\n              numBandDataResponses += 1;\n\n              if (numBandDataResponses === taxids.length) {\n                bandsArray = ideo.processBandData();\n                writeContainer();\n              }\n            });\n        } else {\n          if (typeof chrBands !== 'undefined') {\n          // If bands already available,\n          // e.g. via <script> tag in initial page load\n            ideo.bandData[taxid] = chrBands;\n          }\n          bandsArray = ideo.processBandData();\n          writeContainer();\n        }\n      }\n    });\n\n    function writeContainer() {\n      if (ideo.config.annotationsPath) {\n        d3.json(\n        ideo.config.annotationsPath, // URL\n        function(data) { // Callback\n          ideo.rawAnnots = data;\n        }\n      );\n      }\n\n      // If ploidy description is a string, then convert it to the canonical\n      // array format.  String ploidyDesc is used when depicting e.g. parental\n      // origin each member of chromosome pair in a human genome.\n      // See ploidy_basic.html for usage example.\n      if (\n        'ploidyDesc' in ideo.config &&\n        typeof ideo.config.ploidyDesc === 'string'\n      ) {\n        var tmp = [];\n        for (var i = 0; i < ideo.numChromosomes; i++) {\n          tmp.push(ideo.config.ploidyDesc);\n        }\n        ideo.config.ploidyDesc = tmp;\n      }\n      // Organism ploidy description\n      ideo._ploidy = new Ploidy(ideo.config);\n\n      // Chromosome's layout\n      ideo._layout = Layout.getInstance(ideo.config, ideo);\n\n      svgClass = '';\n      if (ideo.config.showChromosomeLabels) {\n        if (ideo.config.orientation === 'horizontal') {\n          svgClass += 'labeledLeft ';\n        } else {\n          svgClass += 'labeled ';\n        }\n      }\n\n      if (\n      ideo.config.annotationsLayout &&\n      ideo.config.annotationsLayout === 'overlay'\n    ) {\n        svgClass += 'faint';\n      }\n\n      var gradients = ideo.getBandColorGradients();\n      var svgWidth = ideo._layout.getWidth(taxid);\n      var svgHeight = ideo._layout.getHeight(taxid);\n\n      d3.select(ideo.config.container)\n        .append('div')\n          .append('svg')\n            .attr('id', '_ideogram')\n            .attr('class', svgClass)\n            .attr('width', svgWidth)\n            .attr('height', svgHeight)\n            .html(gradients);\n\n      finishInit();\n    }\n\n    function finishInit() {\n      try {\n        var t0A = new Date().getTime();\n\n        var i;\n\n        ideo.initDrawChromosomes(bandsArray);\n\n        // Waits for potentially large annotation dataset\n        // to be received by the client, then triggers annotation processing\n        if (ideo.config.annotationsPath) {\n          function pa() {\n            if (typeof ideo.timeout !== 'undefined') {\n              window.clearTimeout(ideo.timeout);\n            }\n\n            ideo.annots = ideo.processAnnotData(ideo.rawAnnots);\n            ideo.drawProcessedAnnots(ideo.annots);\n\n            if (typeof crossfilter !== 'undefined' && ideo.initCrossFilter) {\n              ideo.initCrossFilter();\n            }\n          }\n\n          if (ideo.rawAnnots) {\n            pa();\n          } else {\n            (function checkAnnotData() {\n              ideo.timeout = setTimeout(function() {\n                if (!ideo.rawAnnots) {\n                  checkAnnotData();\n                } else {\n                  pa();\n                }\n              },\n            50\n          );\n            })();\n          }\n        }\n\n        if (ideo.config.showBandLabels === true) {\n          var bandsToShow = ideo.bandsToShow.join(',');\n\n          // d3.selectAll resolves to querySelectorAll (QSA).\n          // QSA takes a surprisingly long time to complete,\n          // and scales with the number of selectors.\n          // Most bands are hidden, so we can optimize by\n          // Hiding all bands, then QSA'ing and displaying the\n          // relatively few bands that are shown.\n          var t0C = new Date().getTime();\n          d3.selectAll(ideo.selector + ' .bandLabel, .bandLabelStalk')\n          .style('display', 'none');\n          d3.selectAll(bandsToShow).style('display', '');\n          var t1C = new Date().getTime();\n          if (ideo.debug) {\n            console.log('Time in showing bands: ' + (t1C - t0C) + ' ms');\n          }\n\n          if (ideo.config.orientation === 'vertical') {\n            var chrID;\n            for (i = 0; i < ideo.chromosomesArray.length; i++) {\n              chrID = '#' + ideo.chromosomesArray[i].id;\n              ideo.rotateChromosomeLabels(d3.select(chrID), i);\n            }\n          }\n        }\n\n        if (ideo.config.showChromosomeLabels === true) {\n          ideo.drawChromosomeLabels(ideo.chromosomes);\n        }\n\n        if (ideo.config.brush === true) {\n          ideo.createBrush();\n        }\n\n        if (ideo.config.annotations) {\n          ideo.drawAnnots(ideo.config.annotations);\n        }\n\n        var t1A = new Date().getTime();\n        if (ideo.debug) {\n          console.log('Time in drawChromosome: ' + (t1A - t0A) + ' ms');\n        }\n\n        var t1 = new Date().getTime();\n        if (ideo.debug) {\n          console.log('Time constructing ideogram: ' + (t1 - t0) + ' ms');\n        }\n\n        if (ideo.onLoadCallback) {\n          ideo.onLoadCallback();\n        }\n\n        if (!('rotatable' in ideo.config && ideo.config.rotatable === false)) {\n          d3.selectAll(ideo.selector + ' .chromosome').on('click', function() {\n            ideo.rotateAndToggleDisplay(this);\n          });\n        } else {\n          d3.selectAll(ideo.selector + ' .chromosome')\n            .style('cursor', 'default');\n        }\n      } catch (e) {\n        // console.log(e);\n        throw e;\n      }\n    }\n  }\n\n}\n","\nimport {Ideogram} from './core'\n// import from './filter'\n\n\n// https://github.com/stefanpenner/es6-promise\n// (function(){\"use strict\";function t(t){return\"function\"==typeof t||\"object\"==typeof t&&null!==t}function e(t){return\"function\"==typeof t}function n(t){G=t}function r(t){Q=t}function o(){return function(){process.nextTick(a)}}function i(){return function(){B(a)}}function s(){var t=0,e=new X(a),n=document.createTextNode(\"\");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function u(){var t=new MessageChannel;return t.port1.onmessage=a,function(){t.port2.postMessage(0)}}function c(){return function(){setTimeout(a,1)}}function a(){for(var t=0;J>t;t+=2){var e=tt[t],n=tt[t+1];e(n),tt[t]=void 0,tt[t+1]=void 0}J=0}function f(){try{var t=require,e=t(\"vertx\");return B=e.runOnLoop||e.runOnContext,i()}catch(n){return c()}}function l(t,e){var n=this,r=new this.constructor(p);void 0===r[rt]&&k(r);var o=n._state;if(o){var i=arguments[o-1];Q(function(){x(o,r,i,n._result)})}else E(n,r,t,e);return r}function h(t){var e=this;if(t&&\"object\"==typeof t&&t.constructor===e)return t;var n=new e(p);return g(n,t),n}function p(){}function _(){return new TypeError(\"You cannot resolve a promise with itself\")}function d(){return new TypeError(\"A promises callback cannot return that same promise.\")}function v(t){try{return t.then}catch(e){return ut.error=e,ut}}function y(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function m(t,e,n){Q(function(t){var r=!1,o=y(n,e,function(n){r||(r=!0,e!==n?g(t,n):S(t,n))},function(e){r||(r=!0,j(t,e))},\"Settle: \"+(t._label||\" unknown promise\"));!r&&o&&(r=!0,j(t,o))},t)}function b(t,e){e._state===it?S(t,e._result):e._state===st?j(t,e._result):E(e,void 0,function(e){g(t,e)},function(e){j(t,e)})}function w(t,n,r){n.constructor===t.constructor&&r===et&&constructor.resolve===nt?b(t,n):r===ut?j(t,ut.error):void 0===r?S(t,n):e(r)?m(t,n,r):S(t,n)}function g(e,n){e===n?j(e,_()):t(n)?w(e,n,v(n)):S(e,n)}function A(t){t._onerror&&t._onerror(t._result),T(t)}function S(t,e){t._state===ot&&(t._result=e,t._state=it,0!==t._subscribers.length&&Q(T,t))}function j(t,e){t._state===ot&&(t._state=st,t._result=e,Q(A,t))}function E(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+it]=n,o[i+st]=r,0===i&&t._state&&Q(T,t)}function T(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?x(n,r,o,i):o(i);t._subscribers.length=0}}function M(){this.error=null}function P(t,e){try{return t(e)}catch(n){return ct.error=n,ct}}function x(t,n,r,o){var i,s,u,c,a=e(r);if(a){if(i=P(r,o),i===ct?(c=!0,s=i.error,i=null):u=!0,n===i)return void j(n,d())}else i=o,u=!0;n._state!==ot||(a&&u?g(n,i):c?j(n,s):t===it?S(n,i):t===st&&j(n,i))}function C(t,e){try{e(function(e){g(t,e)},function(e){j(t,e)})}catch(n){j(t,n)}}function O(){return at++}function k(t){t[rt]=at++,t._state=void 0,t._result=void 0,t._subscribers=[]}function Y(t){return new _t(this,t).promise}function q(t){var e=this;return new e(I(t)?function(n,r){for(var o=t.length,i=0;o>i;i++)e.resolve(t[i]).then(n,r)}:function(t,e){e(new TypeError(\"You must pass an array to race.\"))})}function F(t){var e=this,n=new e(p);return j(n,t),n}function D(){throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\")}function K(){throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\")}function L(t){this[rt]=O(),this._result=this._state=void 0,this._subscribers=[],p!==t&&(\"function\"!=typeof t&&D(),this instanceof L?C(this,t):K())}function N(t,e){this._instanceConstructor=t,this.promise=new t(p),this.promise[rt]||k(this.promise),I(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?S(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&S(this.promise,this._result))):j(this.promise,U())}function U(){return new Error(\"Array Methods must be provided an Array\")}function W(){var t;if(\"undefined\"!=typeof global)t=global;else if(\"undefined\"!=typeof self)t=self;else try{t=Function(\"return this\")()}catch(e){throw new Error(\"polyfill failed because global object is unavailable in this environment\")}var n=t.Promise;(!n||\"[object Promise]\"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(t.Promise=pt)}var z;z=Array.isArray?Array.isArray:function(t){return\"[object Array]\"===Object.prototype.toString.call(t)};var B,G,H,I=z,J=0,Q=function(t,e){tt[J]=t,tt[J+1]=e,J+=2,2===J&&(G?G(a):H())},R=\"undefined\"!=typeof window?window:void 0,V=R||{},X=V.MutationObserver||V.WebKitMutationObserver,Z=\"undefined\"==typeof self&&\"undefined\"!=typeof process&&\"[object process]\"==={}.toString.call(process),$=\"undefined\"!=typeof Uint8ClampedArray&&\"undefined\"!=typeof importScripts&&\"undefined\"!=typeof MessageChannel,tt=new Array(1e3);H=Z?o():X?s():$?u():void 0===R&&\"function\"==typeof require?f():c();var et=l,nt=h,rt=Math.random().toString(36).substring(16),ot=void 0,it=1,st=2,ut=new M,ct=new M,at=0,ft=Y,lt=q,ht=F,pt=L;L.all=ft,L.race=lt,L.resolve=nt,L.reject=ht,L._setScheduler=n,L._setAsap=r,L._asap=Q,L.prototype={constructor:L,then:et,\"catch\":function(t){return this.then(null,t)}};var _t=N;N.prototype._enumerate=function(){for(var t=this.length,e=this._input,n=0;this._state===ot&&t>n;n++)this._eachEntry(e[n],n)},N.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===nt){var o=v(t);if(o===et&&t._state!==ot)this._settledAt(t._state,e,t._result);else if(\"function\"!=typeof o)this._remaining--,this._result[e]=t;else if(n===pt){var i=new n(p);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){e(t)}),e)}else this._willSettleAt(r(t),e)},N.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===ot&&(this._remaining--,t===st?j(r,n):this._result[e]=n),0===this._remaining&&S(r,this._result)},N.prototype._willSettleAt=function(t,e){var n=this;E(t,void 0,function(t){n._settledAt(it,e,t)},function(t){n._settledAt(st,e,t)})};var dt=W,vt={Promise:pt,polyfill:dt};\"function\"==typeof define&&define.amd?define(function(){return vt}):\"undefined\"!=typeof module&&module.exports?module.exports=vt:\"undefined\"!=typeof this&&(this.ES6Promise=vt),dt()}).call(this);\n\n// https://github.com/kristw/d3.promise\n// !function(a,b){\"function\"==typeof define&&define.amd?define([\"d3\"],b):\"object\"==typeof exports?module.exports=b(require(\"d3\")):a.d3.promise=b(a.d3)}(this,function(a){var b=function(){function b(a,b){return function(){var c=Array.prototype.slice.call(arguments);return new Promise(function(d,e){var f=function(a,b){return a?void e(Error(a)):void d(b)};b.apply(a,c.concat(f))})}}var c={};return[\"csv\",\"tsv\",\"json\",\"xml\",\"text\",\"html\",\"get\"].forEach(function(d){c[d]=b(a,a[d])}),c}();return a.promise=b,b});\n\n// https://github.com/overset/javascript-natural-sort\nfunction naturalSort(a,b){var q,r,c=/(^([+\\-]?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?(?=\\D|\\s|$))|^0x[\\da-fA-F]+$|\\d+)/g,d=/^\\s+|\\s+$/g,e=/\\s+/g,f=/(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,g=/^0x[0-9a-f]+$/i,h=/^0/,i=function(a){return(naturalSort.insensitive&&(\"\"+a).toLowerCase()||\"\"+a).replace(d,\"\")},j=i(a),k=i(b),l=j.replace(c,\"\\0$1\\0\").replace(/\\0$/,\"\").replace(/^\\0/,\"\").split(\"\\0\"),m=k.replace(c,\"\\0$1\\0\").replace(/\\0$/,\"\").replace(/^\\0/,\"\").split(\"\\0\"),n=parseInt(j.match(g),16)||1!==l.length&&Date.parse(j),o=parseInt(k.match(g),16)||n&&k.match(f)&&Date.parse(k)||null,p=function(a,b){return(!a.match(h)||1==b)&&parseFloat(a)||a.replace(e,\" \").replace(d,\"\")||0};if(o){if(n<o)return-1;if(n>o)return 1}for(var s=0,t=l.length,u=m.length,v=Math.max(t,u);s<v;s++){if(q=p(l[s]||\"\",t),r=p(m[s]||\"\",u),isNaN(q)!==isNaN(r))return isNaN(q)?1:-1;if(/[^\\x00-\\x80]/.test(q+r)&&q.localeCompare){var w=q.localeCompare(r);return w/Math.abs(w)}if(q<r)return-1;if(q>r)return 1}}\n\n// e.g. \"Homo sapiens\" -> \"homo-sapiens\"\nfunction slugify(value){return value.toLowerCase().replace(' ', '-')};\n\nwindow.naturalSort = naturalSort;\nwindow.slugify = slugify;\n\nwindow.Ideogram = Ideogram;\n","\n// import {VerticalLayout} from './vertical-layout';\n// import {HorizontalLayout} from './horizontal-layout';\n// import {PairedLayout} from './paired-layout';\n// import {SmallLayout} from './small-layout';\n\nexport class Layout {\n\n  constructor(config, ideo) {\n    this._config = config;\n    this._ideo = ideo;\n    this._ploidy = this._ideo._ploidy;\n    this._translate = undefined;\n\n    if ('chrSetMargin' in config) {\n      this.chrSetMargin = config.chrSetMargin;\n    } else {\n      var k = this._config.chrMargin;\n      this.chrSetMargin = (this._config.ploidy > 1 ? k : 0);\n    }\n\n    // Chromosome band's size.\n    this._tickSize = 8;\n\n    // Chromosome rotation state.\n    this._isRotated = false;\n  }\n\n  // Factory method\n  static getInstance(config, ideo) {\n    if ('perspective' in config && config.perspective === 'comparative') {\n      return new PairedLayout(config, ideo);\n    } else if ('rows' in config && config.rows > 1) {\n      return new SmallLayout(config, ideo);\n    } else if (config.orientation === 'vertical') {\n      return new VerticalLayout(config, ideo);\n    } else if (config.orientation === 'horizontal') {\n      return new HorizontalLayout(config, ideo);\n    } else {\n      return new VerticalLayout(config, ideo);\n    }\n  }\n\n  // Get chart left margin\n  _getLeftMargin() {\n    return this._margin.left;\n  }\n\n  // Get rotated chromosome y scale\n  _getYScale() {\n      // 20 is width of rotated chromosome.\n    return 20 / this._config.chrWidth;\n  }\n\n  // Get chromosome labels\n  getChromosomeLabels(chrElement) {\n    var util = new ChromosomeUtil(chrElement);\n\n    return [util.getSetLabel(), util.getLabel()].filter(function(d) {\n      return d.length > 0;\n    });\n  }\n\n  // Rotate chromosome to original position\n  rotateBack() {\n    throw new Error(this._class + '#rotateBack not implemented');\n  }\n\n  // Rotate chromosome to opposite position\n  rotateForward() {\n    throw new Error(this._class + '#rotateForward not implemented');\n  }\n\n  rotate(chrSetNumber, chrNumber, chrElement) {\n    var ideo = this._ideo;\n\n      // Find chromosomes which should be hidden\n    var otherChrs = d3.selectAll(ideo.selector + ' g.chromosome')\n      .filter(function() {\n        return this !== chrElement;\n      });\n\n    if (this._isRotated) {\n          // Reset _isRotated flag\n      this._isRotated = false;\n          // Rotate chromosome back\n      this.rotateBack(chrSetNumber, chrNumber, chrElement, function() {\n              // Show all other chromosomes and chromosome labels\n        otherChrs.style('display', null);\n        d3.selectAll(ideo.selector + ' .chrSetLabel, .chrLabel')\n          .style('display', null);\n      });\n    } else {\n          // Set _isRotated flag\n      this._isRotated = true;\n\n          // Hide all other chromosomes and chromosome labels\n      otherChrs.style('display', 'none');\n      d3.selectAll(ideo.selector + ' .chrSetLabel, .chrLabel')\n        .style('display', 'none');\n\n          // Rotate chromosome\n      this.rotateForward(chrSetNumber, chrNumber, chrElement);\n    }\n  }\n\n  getChromosomeLabelClass() {\n    if (this._config.ploidy === 1) {\n      return 'chrLabel';\n    } else {\n      return 'chrSetLabel';\n    }\n  }\n\n  _getAdditionalOffset() {\n    return (\n      (this._config.annotationHeight || 0) * (this._config.numAnnotTracks || 1)\n    );\n  }\n\n  _getChromosomeSetSize(chrSetNumber) {\n    // Get last chromosome set size.\n    var setSize = this._ploidy.getSetSize(chrSetNumber);\n\n    // Increase offset by last chromosome set size\n    return (\n      setSize * this._config.chrWidth * 2 + (this.chrSetMargin)\n    );\n  }\n\n  // Get layout margin\n  getMargin() {\n    return this._margin;\n  }\n\n  // Get SVG element height\n  getHeight() {\n    throw new Error(this._class + '#getHeight not implemented');\n  }\n\n  getChromosomeBandTickY1() {\n    throw new Error(this._class + '#getChromosomeBandTickY1 not implemented');\n  }\n\n  getChromosomeBandTickY2() {\n    throw new Error(this._class + '#getChromosomeBandTickY2 not implemented');\n  }\n\n  // Get chromosome's band translate attribute\n  getChromosomeBandLabelTranslate() {\n    throw new Error(\n      this._class + '#getChromosomeBandLabelTranslate not implemented'\n    );\n  }\n\n  // Get chromosome set label anchor property\n  getChromosomeSetLabelAnchor() {\n    return 'middle';\n  }\n\n  // Get chromosome's band label text-anchor value\n  getChromosomeBandLabelAnchor() {\n    throw (\n      new Error(this._class + '#getChromosomeBandLabelAnchor not implemented')\n    );\n  }\n\n  getChromosomeLabelXPosition() {\n    throw new Error(\n      this._class + '#getChromosomeLabelXPosition not implemented'\n    );\n  }\n\n  // Get chromosome label y position.\n  getChromosomeLabelYPosition() {\n    return -5.5;\n  }\n\n  // \"i\" is chromosome number\n  getChromosomeSetLabelYPosition(i) {\n    if (this._config.ploidy === 1) {\n      return this.getChromosomeLabelYPosition(i);\n    } else {\n      return -2 * this._config.chrWidth;\n    }\n  }\n\n  getChromosomeSetLabelXPosition() {\n    throw (\n      new Error(\n        this._class + '#getChromosomeSetLabelXPosition not implemented'\n      )\n    );\n  }\n\n  getChromosomeSetLabelTranslate() {\n    throw (\n      new Error(this._class + '#getChromosomeSetLabelTranslate not implemented')\n    );\n  }\n\n  // Get chromosome set translate attribute\n  getChromosomeSetTranslate() {\n    throw new Error(this._class + '#getChromosomeSetTranslate not implemented');\n  }\n\n  // Get chromosome set translate's y offset\n  getChromosomeSetYTranslate() {\n    throw new Error(\n      this._class + '#getChromosomeSetYTranslate not implemented'\n    );\n  }\n}\n\n\n\nexport class HorizontalLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n    this._class = 'HorizontalLayout';\n    this._margin = {\n      left: 20,\n      top: 30\n    };\n  }\n\n  _getLeftMargin() {\n    var margin = Layout.prototype._getLeftMargin.call(this);\n    if (this._config.ploidy > 1) {\n      margin *= 1.8;\n    }\n\n    return margin;\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var xOffset = 30;\n\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.height / (chrBox.width + xOffset / 2)) * 0.9;\n    var scaleY = this._getYScale();\n\n    var yOffset = (chrNumber + 1) * ((this._config.chrWidth * 2) * scaleY);\n\n    var transform = (\n      'rotate(90) ' +\n      'translate(' + xOffset + ', -' + yOffset + ') ' +\n      'scale(' + scaleX + ', ' + scaleY + ')'\n    );\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", transform)\n      .on('end', callback);\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(labels)\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 30)\n      .attr('y', function(d, i) {\n        return (i + 1 + labels.length % 2) * 12;\n      })\n      .style('text-anchor', 'middle')\n      .style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber,\n             chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", translate)\n      .on('end', callback);\n\n    d3.selectAll(this._ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight(taxId) {\n    // Get last chromosome set offset.\n    var numChromosomes = this._config.chromosomes[taxId].length;\n    var lastSetOffset = this.getChromosomeSetYTranslate(numChromosomes - 1);\n\n    // Get last chromosome set size.\n    var lastSetSize = this._getChromosomeSetSize(numChromosomes - 1);\n\n    // Increase offset by last chromosome set size\n    lastSetOffset += lastSetSize;\n\n    return lastSetOffset + this._getAdditionalOffset() * 2;\n  }\n\n  getWidth() {\n    return this._config.chrHeight + this._margin.top * 1.5;\n  }\n\n  getChromosomeSetLabelAnchor() {\n    return 'end';\n  }\n\n  getChromosomeBandLabelAnchor() {\n    return null;\n  }\n\n  getChromosomeBandTickY1() {\n    return 2;\n  }\n\n  getChromosomeBandTickY2() {\n    return 10;\n  }\n\n  getChromosomeBandLabelTranslate(band) {\n    var x =\n      this._ideo.round(-this._tickSize + band.px.start + band.px.width / 2);\n    var y = -10;\n\n    return {\n      x: x,\n      y: y,\n      translate: 'translate(' + x + ',' + y + ')'\n    };\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return null;\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var leftMargin = this._getLeftMargin();\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return 'translate(' + leftMargin + ', ' + chromosomeSetYTranslate + ')';\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // If no detailed description provided just use one formula for all cases.\n    if (!this._config.ploidyDesc) {\n      return this._config.chrMargin * (setNumber + 1);\n    }\n\n    // Id detailed description provided start to calculate offsets\n    //  for each chromosome set separately. This should be done only once.\n    if (!this._translate) {\n      // First offset equals to zero.\n      this._translate = [1];\n\n      // Loop through description set\n      for (var i = 1; i < this._config.ploidyDesc.length; i++) {\n        this._translate[i] =\n          this._translate[i - 1] + this._getChromosomeSetSize(i - 1);\n      }\n    }\n\n    return this._translate[setNumber];\n  }\n\n  getChromosomeSetLabelXPosition(i) {\n    if (this._config.ploidy === 1) {\n      return this.getChromosomeLabelXPosition(i);\n    } else {\n      return -20;\n    }\n  }\n\n  getChromosomeSetLabelYPosition(i) {\n    var setSize = this._ploidy.getSetSize(i),\n      config = this._config,\n      chrMargin = config.chrMargin,\n      chrWidth = config.chrWidth;\n\n    if (config.ploidy === 1) {\n      y = chrWidth / 2 + 3;\n    } else {\n      y = (setSize * chrMargin) / 2;\n    }\n\n    return y;\n  }\n\n  getChromosomeLabelXPosition() {\n    return -8;\n  }\n\n  getChromosomeLabelYPosition() {\n    return this._config.chrWidth;\n  }\n\n}\n\n\n\n\nexport class PairedLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n\n    this._class = 'PairedLayout';\n\n    this._margin = {\n      left: 30\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var self = this;\n    var ideo = this._ideo;\n\n    // Get ideo container and chromosome set dimensions\n    var ideoBox = d3.select(ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    // Evaluate dimensions scale coefficients\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    // Evaluate y offset of chromosome.\n    // It is different for first and the second one\n    var yOffset = setNumber ? 150 : 25;\n\n    var transform =\n      'translate(15, ' + yOffset + ') scale(' + scaleX + ', ' + scaleY + ')';\n\n    // Run rotation procedure\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", transform)\n      .on('end', function() {\n        // Run callback function if provided\n        if (callback) {\n          callback();\n        }\n\n        var translateY = (6 * Number(!setNumber));\n\n        // Rotate band labels\n        d3.select(chrElement.parentNode).selectAll('g.bandLabel text')\n          .attr('transform', 'rotate(90) translate(0, ' + translateY + ')')\n          .attr('text-anchor', 'middle');\n\n        // Hide syntenic regions\n        d3.selectAll(ideo.selector + ' .syntenicRegion')\n          .style('display', 'none');\n      });\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(this.getChromosomeLabels(chrElement))\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 0)\n      .attr('y', yOffset + (self._config.chrWidth * scaleX / 2) * 1.15)\n      .style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber, chrElement, callback) {\n    var ideo = this._ideo;\n\n    // Get intial transformation string for chromosome set\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    // Run rotation procedure\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', function() {\n        // Run callback fnuction if provided\n        callback();\n\n        // Show syntenic regions\n        d3.selectAll(ideo.select + ' .syntenicRegion')\n          .style('display', null);\n\n        // Reset changed attributes to original state\n        d3.select(chrElement.parentNode).selectAll('g.bandLabel text')\n          .attr('transform', null)\n          .attr('text-anchor', setNumber ? null : 'end');\n      });\n\n    d3.selectAll(ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight() {\n    return this._config.chrHeight + this._margin.left * 1.5;\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandTickY1(chrNumber) {\n    return chrNumber % 2 ? this._config.chrWidth : this._config.chrWidth * 2;\n  }\n\n  getChromosomeBandTickY2(chrNumber) {\n    var width = this._config.chrWidth;\n    return chrNumber % 2 ? width - this._tickSize : width * 2 + this._tickSize;\n  }\n\n  getChromosomeBandLabelAnchor(chrNumber) {\n    return chrNumber % 2 ? null : 'end';\n  }\n\n  getChromosomeBandLabelTranslate(band, chrNumber) {\n    var x = chrNumber % 2 ? 10 : -this._config.chrWidth - 10;\n    var y = this._ideo.round(band.px.start + band.px.width / 2) + 3;\n\n    return {\n      x: y,\n      y: y,\n      translate: 'rotate(-90) translate(' + x + ', ' + y + ')'\n    };\n  }\n\n  getChromosomeLabelXPosition() {\n    return -this._tickSize;\n  }\n\n  getChromosomeSetLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return (\n      'rotate(90) ' +\n      'translate(' + this._margin.left + ', -' + chromosomeSetYTranslate + ')'\n    );\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    return 200 * (setNumber + 1);\n  }\n\n}\n\n\n\nexport class SmallLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n\n    this._class = 'SmallLayout';\n\n    this._margin = {\n      left: 36.5,\n      top: 10\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    transform = 'translate(5, 25) scale(' + scaleX + ', ' + scaleY + ')';\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', transform)\n      .on('end', callback);\n  }\n\n  rotateBack(setNumber, chrNumber, chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', callback);\n  }\n\n  getHeight() {\n    var chrHeight = this._config.chrHeight;\n    return this._config.rows * (chrHeight + this._margin.top * 1.5);\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandLabelTranslate() {\n\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    // Get organisms id list\n    var organisms = [];\n    this._ideo.getTaxids(function(taxIdList) {\n      organisms = taxIdList;\n    });\n    // Get first organism chromosomes amount\n    var size = this._ideo.config.chromosomes[organisms[0]].length;\n    // Amount of chromosomes per number\n    var rowSize = size / this._config.rows;\n\n    var xOffset;\n    var yOffset;\n\n    if (setNumber > rowSize - 1) {\n      xOffset = this._margin.left + this._config.chrHeight * 1.4;\n      yOffset = this.getChromosomeSetYTranslate(setNumber - rowSize);\n    } else {\n      xOffset = this._margin.left;\n      yOffset = this.getChromosomeSetYTranslate(setNumber);\n    }\n\n    return 'rotate(90) translate(' + xOffset + ', -' + yOffset + ')';\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // Get additional padding caused by annotation tracks\n    var additionalPadding = this._getAdditionalOffset();\n    // If no detailed description provided just use one formula for all cases\n    return (\n      this._margin.left * (setNumber) + this._config.chrWidth +\n      additionalPadding * 2 + additionalPadding * setNumber\n    );\n  }\n\n  getChromosomeSetLabelXPosition(setNumber) {\n    return (\n      ((this._ploidy.getSetSize(setNumber) * this._config.chrWidth + 20) / -2) +\n      (this._config.ploidy > 1 ? 0 : this._config.chrWidth)\n    );\n  }\n\n  getChromosomeLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n\n}\n\n\n\n\nexport class VerticalLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n    this._class = 'VerticalLayout';\n    // Layout margins\n    this._margin = {\n      top: 30,\n      left: 15\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var self = this;\n\n    var xOffset = 20;\n\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    var transform =\n      'translate(' + xOffset + ', 25) scale(' + scaleX + ', ' + scaleY + ')';\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', transform)\n      .on('end', callback);\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n    var y = (xOffset + self._config.chrWidth) * 1.3;\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(labels)\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 0)\n      .attr('y', y).style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber,\n             chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', callback);\n\n    d3.selectAll(this._ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight() {\n    return this._config.chrHeight + this._margin.top * 1.5;\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandLabelTranslate() {\n\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var marginTop = this._margin.top;\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return (\n      'rotate(90) ' +\n      'translate(' + marginTop + ', -' + chromosomeSetYTranslate + ')'\n    );\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // Get additional padding caused by annotation/histogram tracks\n    var pad = this._getAdditionalOffset(),\n      margin = this._config.chrMargin,\n      width = this._config.chrWidth,\n      translate;\n\n    // If no detailed description provided just use one formula for all cases\n    if (!this._config.ploidyDesc) {\n      // TODO:\n      // This part of code contains a lot magic numbers and if\n      // statements for exactly corresponing to original ideogram examples.\n      // But all this stuff should be removed. Calculation of translate\n      // should be a simple formula applied for all cases listed below.\n      // Now they are diffirent because of Layout:_getAdditionalOffset do\n      // not meet for cases when no annotation, when annotation exists and\n      // when histogram used\n\n      if (this._config.annotationsLayout === 'histogram') {\n        return margin / 2 + setNumber * (margin + width + 2) + pad * 2 + 1;\n      } else {\n        translate = width + setNumber * (margin + width) + pad * 2;\n        if (pad > 0) {\n          return translate;\n        } else {\n          return translate + 4 + (2 * setNumber);\n        }\n      }\n    }\n\n    // If detailed description provided start to calculate offsets\n    // for each chromosome set separately. This should be done only once\n    if (!this._translate) {\n      // First offset equals to zero\n      this._translate = [this._ploidy.getSetSize(0) * width * 2];\n      var prevTranslate;\n      // Loop through description set\n      for (var i = 1; i < this._config.ploidyDesc.length; i++) {\n        prevTranslate = this._translate[i - 1];\n        this._translate[i] = prevTranslate + this._getChromosomeSetSize(i - 1);\n      }\n    }\n\n    return this._translate[setNumber];\n  }\n\n  getChromosomeSetLabelXPosition() {\n    return (this._config.chrWidth * this._config.ploidy) / -2;\n  }\n\n  getChromosomeLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n}\n","export class ModelAdapter {\n\n  constructor(model) {\n    this._model = model;\n    this._class = 'ModelAdapter';\n  }\n\n  static getInstance(model) {\n    if (model.bands) {\n      return new ModelAdapter(model);\n    } else {\n      return new ModelNoBandsAdapter(model);\n    }\n  }\n\n  getModel() {\n    return this._model;\n  }\n\n  getCssClass() {\n    return '';\n  }\n}\n","export class Ploidy {\n\n  constructor(config) {\n    this._config = config;\n    this._description = this._normalize(this._config.ploidyDesc);\n  }\n\n  // Get number of chromosomes in a chromosome set\n  getChromosomesNumber(setNumber) {\n    if (this._config.ploidyDesc) {\n      var chrSetCode = this._config.ploidyDesc[setNumber];\n      if (chrSetCode instanceof Object) {\n        return Object.keys(chrSetCode)[0].length;\n      } else {\n        return chrSetCode.length;\n      }\n    } else {\n      return this._config.ploidy || 1;\n    }\n  }\n\n  // Normalize use defined description\n  _normalize(description) {\n    var normalized, key, descValue;\n\n    // Return the same if no description provided\n    if (!description) {\n      return description;\n    }\n\n    // Array of normalized description objects\n    normalized = [];\n\n    // Loop through description and normalize\n    for (key in description) {\n      descValue = description[key];\n      if (typeof descValue === 'string') {\n        if (this._config.orientation === 'vertical') {\n          descValue = descValue.split('').reverse();\n        }\n        normalized.push({\n          ancestors: descValue,\n          existence: this._getexistenceArray(descValue.length)\n        });\n      } else {\n        normalized.push({\n          ancestors: Object.keys(descValue)[0],\n          existence: descValue[Object.keys(descValue)[0]]\n        });\n      }\n    }\n\n    return normalized;\n  }\n\n  // Get array filled by '11' elements\n  _getexistenceArray(length) {\n    var array = [];\n\n    for (var i = 0; i < length; i++) {\n      array.push('11');\n    }\n\n    return array;\n  }\n\n  getSetSize(chrSetNumber) {\n    if (this._description) {\n      return this._description[chrSetNumber].ancestors.length;\n    } else {\n      return 1;\n    }\n  }\n\n  // Get ancestor letter\n  getAncestor(chrSetNumber, chrNumber) {\n    if (this._description) {\n      return this._description[chrSetNumber].ancestors[chrNumber];\n    } else {\n      return '';\n    }\n  }\n\n  // Check if chromosome's arm should be rendered.\n  // If no description was provided, method returns true and\n  // something another depending on user provided description.\n  exists(chrSetNumber, chrNumber, armNumber) {\n    if (this._description) {\n      var desc =\n        this._description[chrSetNumber].existence[chrNumber][armNumber];\n      return Number(desc) > 0;\n    } else {\n      return true;\n    }\n  }\n\n}\n","import {Color} from './../color';\n\nexport class Chromosome {\n\n  constructor(adapter, config, ideo) {\n    this._adapter = adapter;\n    this._model = this._adapter.getModel();\n    this._config = config;\n    this._ideo = ideo;\n    this._color = new Color(this._config);\n    this._bumpCoefficient = 5;\n  }\n\n  // Factory method\n  static getInstance(adapter, config, ideo) {\n    if (adapter.getModel().centromerePosition === 'telocentric') {\n      return new TelocentricChromosome(adapter, config, ideo);\n    } else {\n      return new MetacentricChromosome(adapter, config, ideo);\n    }\n  };\n\n  _addPArmShape(clipPath, isPArmRendered) {\n    if (isPArmRendered) {\n      return clipPath.concat(this._getPArmShape());\n    } else {\n      return clipPath;\n    }\n  };\n\n  _addQArmShape(clipPath, isQArmRendered) {\n    if (isQArmRendered) {\n      return clipPath.concat(this._getQArmShape());\n    } else {\n      return clipPath;\n    }\n  };\n\n  render(container, chrSetNumber, chrNumber) {\n      // Append bands container and apply clip-path on it\n\n    var self = this;\n\n    container = container.append('g')\n      .attr('class', 'bands')\n      .attr(\"clip-path\", \"url(#\" + this._model.id + \"-chromosome-set-clippath)\");\n\n      // Render chromosome arms\n    var isPArmRendered = this._renderPArm(container, chrSetNumber, chrNumber);\n    var isQArmRendered = this._renderQArm(container, chrSetNumber, chrNumber);\n\n      // Render range set\n    this._renderRangeSet(container, chrSetNumber, chrNumber);\n\n      // Push arms shape string into clipPath array\n    var clipPath = [];\n    clipPath = this._addPArmShape(clipPath, isPArmRendered);\n    clipPath = this._addQArmShape(clipPath, isQArmRendered);\n\n    var opacity = '0';\n    var fill = '';\n    var isFullyBanded = this.isFullyBanded();\n    if ('ancestors' in this._ideo.config && !('rangeSet' in this._ideo.config)) {\n      // E.g. diploid human genome (with translucent overlay)\n      fill = self._color.getArmColor(chrSetNumber, chrNumber, 0);\n      if (isFullyBanded) {\n        opacity = '0.5';\n      }\n    } else if (isFullyBanded) {\n      // E.g. mouse reference genome\n      opacity = null;\n      fill = 'transparent';\n    } else if (!('ancestors' in this._ideo.config)) {\n      // E.g. chimpanzee assembly Pan_tro 3.0\n      opacity = '1';\n    }\n\n    // Render chromosome border\n    container.append('g')\n          .attr('class', 'chromosome-border')\n          .selectAll('path')\n          .data(clipPath)\n          .enter()\n          .append('path')\n          .attr('fill', fill)\n          .style('fill-opacity', opacity)\n          .attr('stroke', function(d, i) {\n            return self._color.getBorderColor(chrSetNumber, chrNumber, i);\n          })\n          .attr('stroke-width', function(d) {\n            return ('strokeWidth' in d ? d.strokeWidth : 1);\n          })\n          .attr('d', function(d) {\n            return d.path;\n          }).attr('class', function(d) {\n            return d.class;\n          });\n\n    return clipPath;\n  };\n\n  _renderRangeSet(container, chrSetNumber, chrNumber) {\n    if (!('rangeSet' in this._config)) {\n      return;\n    }\n\n    var rangeSet = this._config.rangeSet.filter(function(range) {\n      return range.chr - 1 === chrSetNumber;\n    }).map(function(range) {\n      return new Range(range);\n    });\n\n    var rangesContainer = container.append('g')\n          .attr('class', 'range-set');\n\n    var self = this;\n    var ideo = self._ideo;\n    var bandsXOffset = ideo._bandsXOffset;\n\n    rangesContainer.selectAll('rect.range')\n          .data(rangeSet)\n          .enter()\n          .append('rect')\n          .attr('class', 'range')\n          .attr('x', function(range) {\n            var startPx = ideo.convertBpToPx(self._model, range.getStart());\n            return startPx - bandsXOffset;\n          }).attr('y', 0)\n          .attr('width', function(range) {\n            var lengthPx = ideo.convertBpToPx(self._model, range.getLength());\n            return lengthPx - bandsXOffset;\n          }).attr('height', this._config.chrWidth)\n          .style('fill', function(range) {\n            return range.getColor(chrNumber);\n          });\n  };\n\n  // Get chromosome's shape main values\n  _getShapeData() {\n      // First q band from bands sequence\n    var firstQBand;\n    for (var i = 0; i < this._model.bands.length; i++) {\n      if (this._model.bands[i].name[0] === 'q') {\n        firstQBand = this._model.bands[i];\n        break;\n      }\n    }\n\n    // Chromosome's right position\n    var lastBand = this._model.bands.length - 1;\n    var rightTerminalPosition = this._model.bands[lastBand].px.stop;\n\n      // Properties description:\n      // x1 - left terminal start position\n      // x2 - centromere position\n      // x3 - right terminal end position\n      // w - chromosome width\n      // b - bump size\n    return {\n      x1: 0,\n      x2: firstQBand ? firstQBand.px.start : rightTerminalPosition,\n      x3: rightTerminalPosition,\n      w: this._config.chrWidth,\n      b: this._config.chrWidth / this._bumpCoefficient\n    };\n  };\n\n  _getPArmShape() {\n    var d = this._getShapeData(),\n      x = d.x2 - d.b;\n\n    if (this.isFullyBanded() || 'ancestors' in this._ideo.config) {\n      // Encountered when chromosome has any of:\n      //  - One placeholder \"band\", e.g. pig genome GCF_000003025.5\n      //  - Many (> 2) bands, e.g. human reference genome\n      //  - Ancestor colors in ploidy configuration, as in ploidy_basic.html\n      return {\n        class: '',\n        path:\n          'M' + d.b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x2 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + d.b + ',' + d.w + ' ' +\n          'Q-' + d.b + ',' + (d.w / 2) + ',' + d.b + ',0'\n      };\n    } else {\n      // e.g. chimpanzee assembly Pan_tro 3.0\n      return [{\n        class: '',\n        path:\n          'M' + d.b + ',0 ' +\n          'L' + (x - 2) + ',0 ' +\n          'L' + (x - 2) + ',' + d.w + ' ' +\n          'L' + d.b + ',' + d.w + ' ' +\n          'Q-' + d.b + ',' + (d.w / 2) + ',' + d.b + ',0'\n      }, {\n        class: 'acen',\n        path:\n          'M' + x + ',0 ' +\n          'Q' + (d.x2 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x + ',' + d.w + ' ' +\n          'L' + (x - 2) + ',' + d.w + ' ' +\n          'L' + (x - 2) + ',0'\n      }];\n    }\n  };\n\n  _getQArmShape() {\n    var d = this._getShapeData(),\n      x = d.x3 - d.b,\n      x2b = d.x2 + d.b;\n\n    if (this.isFullyBanded() || 'ancestors' in this._ideo.config) {\n      return {\n        class: '',\n        path:\n          'M' + x2b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w + ' ' +\n          'Q' + (d.x2 - d.b) + ',' + (d.w / 2) + ',' + x2b + ',0'\n      };\n    } else {\n      // e.g. chimpanzee assembly Pan_tro 3.0\n      return [{\n        path:\n          'M' + x2b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w + ' ' +\n          'L' + x2b + ',0'\n      }, {\n        class: 'acen',\n        path:\n          'M' + x2b + ',0' +\n          'Q' + (d.x2 - d.b) + ',' + (d.w / 2) + ',' + x2b + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w +\n          'L' + (x2b + 2) + ',' + d.w +\n          'L' + (x2b + 2) + ',0'\n      }];\n    }\n  };\n\n  isFullyBanded() {\n    return (\n      this._model.bands &&\n      (this._model.bands.length !== 2 || this._model.bands[0].name[0] === 'q')\n    );\n  };\n\n  // Render arm bands\n  _renderBands(container, chrSetNumber, chrNumber, bands, arm) {\n    var self = this;\n    var armNumber = arm === 'p' ? 0 : 1;\n    var fill = '';\n    if ('ancestors' in this._ideo.config && !(this.isFullyBanded())) {\n      fill = self._color.getArmColor(chrSetNumber, chrNumber, armNumber);\n    }\n\n    container.selectAll(\"path.band.\" + arm)\n      .data(bands)\n      .enter()\n      .append(\"path\")\n      .attr(\"id\", function(d) {\n        return self._model.id + \"-\" + d.name.replace(\".\", \"-\");\n      })\n      .attr(\"class\", function(d) {\n        return 'band ' + arm + '-band ' + d.stain;\n      })\n      .attr(\"d\", function(d) {\n        var start = self._ideo.round(d.px.start);\n        var length = self._ideo.round(d.px.width);\n\n        var x = start + length;\n\n        return \"M \" + start + \", 0\" +\n              \"l \" + length + \" 0 \" +\n              \"l 0 \" + self._config.chrWidth + \" \" +\n              \"l -\" + length + \" 0 z\";\n      })\n      .style('fill', fill);\n  };\n\n  // Render chromosome's p arm.\n  // Returns boolean which indicates is any bands was rendered\n  _renderPArm(container, chrSetNumber, chrNumber) {\n    var bands = this._model.bands.filter(function(band) {\n      return band.name[0] === 'p';\n    });\n\n    this._renderBands(container, chrSetNumber, chrNumber, bands, 'p');\n\n    return Boolean(bands.length);\n  };\n\n  // Render chromosome's q arm.\n  // Returns boolean which indicates is any bands was rendered\n  _renderQArm(container, chrSetNumber, chrNumber) {\n    var bands = this._model.bands.filter(function(band) {\n      return band.name[0] === 'q';\n    });\n\n    this._renderBands(container, chrSetNumber, chrNumber, bands, 'q');\n\n    return Boolean(bands.length);\n  };\n}\n\n\n\nexport class MetacentricChromosome extends Chromosome {\n\n  constructor(model, config, ideo) {\n    super(model, config, ideo);\n    this._class = 'MetacentricChromosome';\n  }\n}\n\n\n\nexport class TelocentricChromosome extends Chromosome {\n\n  constructor(model, config, ideo) {\n    super(model, config, ideo);\n    this._class = 'TelocentricChromosome';\n    this._pArmOffset = 3;\n  }\n\n  _addPArmShape(clipPath) {\n    return clipPath.concat(this._getPArmShape());\n  };\n\n  _getPArmShape() {\n    var d = this._getShapeData();\n    d.o = this._pArmOffset;\n\n    return [{\n      class: 'acen',\n      path: 'M' + (d.x2 + 2) + ',1' +\n      'L' + (d.x2 + d.o + 3.25) + ',1 ' +\n      'L' + (d.x2 + d.o + 3.25) + ',' + (d.w - 1) + ' ' +\n      'L' + (d.x2 + 2) + ',' + (d.w - 1)\n    }, {\n      class: 'gpos66',\n      path: 'M' + (d.x2 - d.o + 5) + ',0' +\n      'L' + (d.x2 - d.o + 3) + ',0 ' +\n      'L' + (d.x2 - d.o + 3) + ',' + d.w + ' ' +\n      'L' + (d.x2 - d.o + 5) + ',' + d.w,\n      strokeWidth: 0.5\n    }];\n  };\n\n  _getQArmShape() {\n    var d = this._getShapeData(),\n      x = d.x3 - d.b,\n      o = this._pArmOffset + 3;\n\n    return {\n      class: '',\n      path:\n      'M' + (d.x2 + o) + ',0 ' +\n      'L' + x + ',0 ' +\n      'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n      'L' + (d.x2 + o) + ',' + d.w\n    };\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}