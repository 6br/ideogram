{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/d3-collection/build/d3-collection.js","node_modules/d3-dispatch/build/d3-dispatch.js","node_modules/d3-dsv/build/d3-dsv.js","node_modules/d3.promise/dist/d3.promise.min.js","node_modules/d3.promise/node_modules/d3-request/build/d3-request.js","node_modules/d3/build/d3.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/process/browser.js","src/js/color.js","src/js/core.js","src/js/index.js","src/js/layouts/layout.js","src/js/model-adapter.js","src/js/ploidy.js","src/js/range.js","src/js/views/chromosome-util.js","src/js/views/chromosome.js"],"names":[],"mappingsxxxj0froxLA;;;;IAEa,K,WAAA,K;AAEX,iBAAY,MAAZ,EAAoB;AAAA;;AAChB;AACF,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,OAAL,GAAe,mBAAW,KAAK,OAAhB,CAAf;AACD;;;;gCAEW,Y,EAAc,S,EAAW,S,EAAW;AAC9C,UAAI,KAAK,OAAL,CAAa,SAAjB,EAA4B;AAC1B,eAAO,KAAK,OAAL,CAAa,SAAb,CAAuB,SAAvB,CAAP;AACD,OAFD,MAEO,IAAI,KAAK,OAAL,CAAa,SAAjB,EAA4B;AACjC,eAAO,KAAK,qBAAL,CAA2B,YAA3B,EAAyC,SAAzC,EAAoD,SAApD,CAAP;AACD,OAFM,MAEA;AACL,eAAO,IAAP;AACD;AACF;;;mCAEc,Y,EAAc,S,EAAW,S,EAAW;AACjD,UAAI,YAAY,KAAK,OAAL,CAAa,MAA7B,EAAqC;AACnC,eAAO,MAAP;AACD,OAFD,MAEO,IAAI,KAAK,OAAL,CAAa,MAAb,CAAoB,YAApB,EAAkC,SAAlC,EAA6C,SAA7C,CAAJ,EAA6D;AAClE,eAAO,MAAP;AACD,OAFM,MAEA;AACL,eAAO,MAAP;AACD;AACF;;;0CAEqB,Y,EAAc,S,EAAW,S,EAAW;AACxD,UAAI,CAAC,KAAK,OAAL,CAAa,MAAb,CAAoB,YAApB,EAAkC,SAAlC,EAA6C,SAA7C,CAAL,EAA8D;AAC5D,eAAO,aAAP;AACD,OAFD,MAEO;AACL,YAAI,WACF,KAAK,OAAL,CAAa,WAAb,CAAyB,YAAzB,EAAuC,SAAvC,EAAkD,SAAlD,CADF;AAEA,eAAO,KAAK,OAAL,CAAa,SAAb,CAAuB,QAAvB,CAAP;AACD;AACF;;;;;;;;;;;;;;;;qjBCtCH;;AAEA;;IAAY,E;;AACZ;;IAAY,S;;AACZ;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEA,GAAG,OAAH,GAAa,SAAb;;IAEa,Q,WAAA,Q;AAEX,oBAAY,MAAZ,EAAoB;AAAA;;AAClB,QAAI,WAAJ,EACE,QADF,EACY,SADZ,EAEE,SAFF,EAEa,IAFb;;AAIA;AACA;AACA,SAAK,MAAL,GAAc,KAAK,KAAL,CAAW,KAAK,SAAL,CAAe,MAAf,CAAX,CAAd;;AAEA;AACA,SAAK,aAAL,GAAqB,EAArB;;AAEA,SAAK,KAAL,GAAa,KAAb;;AAEA,QAAI,CAAC,KAAK,MAAL,CAAY,OAAjB,EAA0B;AACxB,WAAK,MAAL,CAAY,OAAZ,GAAsB,uBAAtB;AACD;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,MAAjB,EAAyB;AACvB,WAAK,MAAL,CAAY,MAAZ,GAAqB,CAArB;AACD;;AAED,QAAI,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,WAAK,cAAL,GAAsB,EAAtB;AACA,UAAI,CAAC,KAAK,MAAL,CAAY,GAAjB,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACA,aAAK,MAAL,CAAY,GAAZ,GAAkB,MAAlB;AACD;AACD,UAAI,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAAvB,IAA4B,CAAC,KAAK,MAAL,CAAY,SAA7C,EAAwD;AACtD,aAAK,MAAL,CAAY,SAAZ,GAAwB,EAAC,GAAG,SAAJ,EAAe,GAAG,SAAlB,EAAxB;AACA,aAAK,MAAL,CAAY,UAAZ,GAAyB,IAAzB;AACD;AACF;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,SAAjB,EAA4B;AAC1B,WAAK,MAAL,CAAY,SAAZ,GAAwB,MAAxB;AACD;;AAED,SAAK,QAAL,GAAgB,KAAK,MAAL,CAAY,SAAZ,GAAwB,aAAxC;;AAEA,QAAI,CAAC,KAAK,MAAL,CAAY,UAAjB,EAA6B;AAC3B,WAAK,MAAL,CAAY,UAAZ,GAAyB,GAAzB;AACD;;AAED,QAAI,0BAA0B,KAAK,MAA/B,KAA0C,KAA9C,EAAqD;AACnD,WAAK,MAAL,CAAY,oBAAZ,GAAmC,IAAnC;AACD;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,WAAjB,EAA8B;AAC5B,oBAAc,UAAd;AACA,WAAK,MAAL,CAAY,WAAZ,GAA0B,WAA1B;AACD;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,SAAjB,EAA4B;AAC1B,kBAAY,KAAK,MAAL,CAAY,SAAxB;AACA,aAAO,SAAS,aAAT,CAAuB,SAAvB,EAAkC,qBAAlC,EAAP;;AAEA,UAAI,gBAAgB,UAApB,EAAgC;AAC9B,oBAAY,KAAK,MAAjB;AACD,OAFD,MAEO;AACL,oBAAY,KAAK,KAAjB;AACD;;AAED,UAAI,cAAc,MAAlB,EAA0B;AACxB,oBAAY,GAAZ;AACD;AACD,WAAK,MAAL,CAAY,SAAZ,GAAwB,SAAxB;AACD;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,QAAjB,EAA2B;AACzB,iBAAW,EAAX;AACA,kBAAY,KAAK,MAAL,CAAY,SAAxB;;AAEA,UAAI,YAAY,GAAZ,IAAmB,YAAY,GAAnC,EAAwC;AACtC,mBAAW,KAAK,KAAL,CAAW,YAAY,EAAvB,CAAX;AACD,OAFD,MAEO,IAAI,aAAa,GAAjB,EAAsB;AAC3B,mBAAW,KAAK,KAAL,CAAW,YAAY,EAAvB,CAAX;AACD;AACD,WAAK,MAAL,CAAY,QAAZ,GAAuB,QAAvB;AACD;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,SAAjB,EAA4B;AAC1B,UAAI,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,aAAK,MAAL,CAAY,SAAZ,GAAwB,EAAxB;AACD,OAFD,MAEO;AACL;AACA,aAAK,MAAL,CAAY,SAAZ,GAAwB,KAAK,KAAL,CAAW,KAAK,MAAL,CAAY,QAAZ,GAAuB,CAAlC,CAAxB;AACD;AACF;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,cAAjB,EAAiC;AAC/B,WAAK,MAAL,CAAY,cAAZ,GAA6B,KAA7B;AACD;;AAED,QAAI,qBAAqB,KAAK,MAA9B,EAAsC;AACpC,WAAK,MAAL,CAAY,eAAZ,GAA8B,KAAK,MAAL,CAAY,eAA1C;AACD,KAFD,MAEO;AACL,WAAK,MAAL,CAAY,eAAZ,GAA8B,IAA9B;AACD;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,KAAjB,EAAwB;AACtB,WAAK,MAAL,CAAY,KAAZ,GAAoB,KAApB;AACD;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,IAAjB,EAAuB;AACrB,WAAK,MAAL,CAAY,IAAZ,GAAmB,CAAnB;AACD;;AAED,SAAK,IAAL,GAAY,KAAK,KAAL,CAAW,KAAK,MAAL,CAAY,SAAZ,GAAwB,GAAnC,CAAZ;AACA,SAAK,YAAL,GAAoB,KAApB;AACA,QAAI,KAAK,MAAL,CAAY,SAAZ,GAAwB,GAA5B,EAAiC;AAC/B,WAAK,YAAL,GAAoB,IAApB;AACA,WAAK,IAAL,GAAY,CAAZ;AACD;;AAED,QAAI,OAAO,cAAX,EAA2B;AACzB,WAAK,MAAL,CAAY,SAAZ,IAAyB,EAAzB;AACD;;AAED,QAAI,OAAO,UAAX,EAAuB;AACrB,WAAK,MAAL,CAAY,WAAZ,GAA0B,CAAC,OAAO,UAAR,CAA1B;AACA,UAAI,oBAAoB,MAApB,KAA+B,KAAnC,EAA0C;AACxC,aAAK,MAAL,CAAY,cAAZ,GAA6B,IAA7B;AACD;AACD,UAAI,eAAe,MAAf,KAA0B,KAA9B,EAAqC;AACnC,aAAK,MAAL,CAAY,SAAZ,GAAwB,KAAxB;AACD;AACF;;AAED,QAAI,CAAC,KAAK,MAAL,CAAY,yBAAjB,EAA4C;AAC1C,WAAK,MAAL,CAAY,yBAAZ,GAAwC,KAAxC;AACD;;AAED,SAAK,iBAAL;;AAEA,SAAK,MAAL,CAAY,SAAZ,GACA,KAAK,MAAL,CAAY,SAAZ,GACA,KAAK,MAAL,CAAY,QADZ,GAEA,KAAK,MAAL,CAAY,iBAAZ,GAAgC,CAHhC;;AAMA,QAAI,OAAO,MAAX,EAAmB;AACjB,WAAK,cAAL,GAAsB,OAAO,MAA7B;AACD;;AAED,QAAI,OAAO,YAAX,EAAyB;AACvB,WAAK,oBAAL,GAA4B,OAAO,YAAnC;AACD;;AAED,QAAI,OAAO,WAAX,EAAwB;AACtB,WAAK,mBAAL,GAA2B,OAAO,WAAlC;AACD;;AAED,SAAK,gBAAL,GAAwB,MAAxB;;AAEA,SAAK,SAAL,GAAiB;AACf,UAAI,CADW;AAEf,YAAM;AAFS,KAAjB;;AAKA;AACA;AACA,SAAK,MAAL,GAAc,gDAAd;AACA,SAAK,OAAL,GAAe,KAAK,MAAL,GAAc,2BAA7B;AACA,SAAK,QAAL,GAAgB,KAAK,MAAL,GAAc,4BAA9B;AACA,SAAK,KAAL,GAAa,KAAK,MAAL,GAAc,yBAA3B;;AAEA,SAAK,SAAL,GAAiB;AACf,YAAM;AACJ,oBAAY,OADR;AAEJ,wBAAgB,cAFZ;AAGJ,4BAAoB,YAHhB;AAIJ,oBAAY;AACV,mBAAS,kBADC,EACmB;AAC7B,kBAAQ,kBAFE;AAGV,kBAAQ;AAHE;AAJR,OADS;AAWf,aAAO;AACL,oBAAY,OADP;AAEL,wBAAgB,cAFX;AAGL,4BAAoB,aAHf;AAIL,oBAAY;AACV,mBAAS;AADC;AAJP,OAXQ;AAmBf,YAAM;AACJ,oBAAY,QADR;AAEJ,wBAAgB,gBAFZ;AAGJ,4BAAoB,cAHhB;AAIJ,oBAAY;AACV,mBAAS;AADC;AAJR;AAnBS,KAAjB;;AA6BA;AACA;AACA;AACA,SAAK,gBAAL,GAAwB,EAAxB;;AAEA,SAAK,WAAL,GAAmB,EAAnB;;AAEA,SAAK,WAAL,GAAmB,EAAnB;AACA,SAAK,cAAL,GAAsB,CAAtB;AACA,SAAK,QAAL,GAAgB,EAAhB;;AAEA,SAAK,IAAL;AACD;;AAED;;;;;;;;;AAOA;;;;;;;;;;;;6BAYS,O,EAAS,K,EAAO,W,EAAa;AACpC,UAAI,QAAQ,EAAZ;AAAA,UACE,SADF;AAAA,UACa,QADb;AAAA,UACuB,OADvB;AAAA,UACgC,IADhC;AAAA,UACsC,KADtC;AAAA,UAC6C,GAD7C;AAAA,UAEE,CAFF;AAAA,UAEK,IAFL;AAAA,UAEW,cAFX;AAAA,UAE2B,MAF3B;AAAA,UAGE,KAHF;AAAA,UAGS,IAHT;AAAA,UAGe,WAHf;AAAA,UAG4B,GAH5B;;AAKA,UAAI,QAAQ,KAAR,CAAc,CAAd,EAAiB,CAAjB,MAAwB,UAA5B,EAAwC;AACtC,iBAAS,QAAT;AACD;;AAED,UACA,uBAAuB,KAAvB,IACA,QAAO,YAAY,CAAZ,CAAP,MAA0B,QAF1B,EAGA;AACE,cAAM,EAAN;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,YAAY,MAA5B,EAAoC,GAApC,EAAyC;AACvC,cAAI,IAAJ,CAAS,YAAY,CAAZ,EAAe,IAAxB;AACD;AACD,sBAAc,GAAd;AACD;;AAED,UAAI,OAAO,QAAP,KAAoB,WAApB,IAAmC,WAAW,QAAlD,EAA4D;AAC1D,oBAAY,IAAZ;AACA,mBAAW,QAAQ,KAAR,CAAc,SAAd,CAAX;AACA,eAAO,CAAP;AACD,OAJD,MAIO;AACL,oBAAY,GAAZ;AACA,YAAI,WAAW,QAAf,EAAyB;AACvB,qBAAW,KAAK,OAAL,CAAX;AACD,SAFD,MAEO;AACL,qBAAW,OAAX;AACD;AACD,eAAO,CAAP;AACD;;AAED,oBAAc,SAAS,CAAT,EAAY,KAAZ,CAAkB,SAAlB,EAA6B,CAA7B,CAAd;AACA,UAAI,gBAAgB,aAApB,EAAmC;AACjC,iBAAS,MAAT;AACD,OAFD,MAEO,IAAI,gBAAgB,QAApB,EAA8B;AACnC,iBAAS,MAAT;AACD,OAFM,MAEA;AACL,iBAAS,QAAT;AACD;;AAED,uBAAiB,SAAS,MAA1B;;AAEA,UAAI,WAAW,MAAX,IAAqB,WAAW,QAApC,EAA8C;AAC5C,aAAK,IAAI,IAAT,EAAe,IAAI,cAAnB,EAAmC,GAAnC,EAAwC;AACtC,oBAAU,SAAS,CAAT,EAAY,KAAZ,CAAkB,SAAlB,CAAV;;AAEA,gBAAM,QAAQ,CAAR,CAAN;;AAEA;AACA;AACA;AACA,iBAAQ,WAAR,KAAyB,WAAzB,IACA,YAAY,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAJ9B,EAKA;AACE;AACD;;AAED,cAAI,OAAO,KAAP,KAAiB,KAArB,EAA4B;AAC1B,kBAAM,GAAN,IAAa,EAAb;AACD;;AAED,kBAAQ,QAAQ,CAAR,CAAR;AACA,cAAI,QAAQ,CAAR,CAAJ,EAAgB;AACd;AACA,qBAAS,QAAQ,CAAR,CAAT;AACD;;AAED,iBAAO;AACL,iBAAK,GADA;AAEL,gBAAI;AACF,qBAAO,SAAS,QAAQ,CAAR,CAAT,EAAqB,EAArB,CADL;AAEF,oBAAM,SAAS,QAAQ,CAAR,CAAT,EAAqB,EAArB;AAFJ,aAFC;AAML,kBAAM;AACJ,qBAAO,SAAS,QAAQ,CAAR,CAAT,EAAqB,EAArB,CADH;AAEJ,oBAAM,SAAS,QAAQ,CAAR,CAAT,EAAqB,EAArB;AAFF,aAND;AAUL,gBAAI;AACF,qBAAO,CAAC,CADN;AAEF,oBAAM,CAAC,CAFL;AAGF,qBAAO,CAAC;AAHN,aAVC;AAeL,kBAAM,QAAQ,CAAR,IAAa,QAAQ,CAAR,CAfd;AAgBL,mBAAO,KAhBF;AAiBL,mBAAO;AAjBF,WAAP;;AAoBA,gBAAM,GAAN,EAAW,IAAX,CAAgB,IAAhB;AACD;AACF,OA/CD,MA+CO,IAAI,WAAW,MAAf,EAAuB;AAC5B,aAAK,IAAI,IAAT,EAAe,IAAI,cAAnB,EAAmC,GAAnC,EAAwC;AACtC;AACA;AACA;AACA,oBAAU,SAAS,CAAT,EAAY,KAAZ,CAAkB,SAAlB,CAAV;;AAEA,cAAI,QAAQ,CAAR,MAAe,QAAQ,cAA3B,EAA2C;AACzC;AACD;;AAED,kBAAQ,QAAQ,CAAR,CAAR;AACA,cAAI,UAAU,KAAd,EAAqB;AACnB,oBAAQ,SAAR;AACD;AACD,kBAAQ,SAAS,QAAQ,CAAR,CAAT,EAAqB,EAArB,CAAR;AACA,iBAAO,SAAS,QAAQ,CAAR,CAAT,EAAqB,EAArB,CAAP;;AAEA,iBAAO;AACL,iBAAK,QAAQ,CAAR,EAAW,KAAX,CAAiB,KAAjB,EAAwB,CAAxB,CADA;AAEL,gBAAI;AACF,qBAAO,KADL;AAEF,oBAAM;AAFJ,aAFC;AAML,kBAAM;AACJ,qBAAO,KADH;AAEJ,oBAAM;AAFF,aAND;AAUL,gBAAI;AACF,qBAAO,CAAC,CADN;AAEF,oBAAM,CAAC,CAFL;AAGF,qBAAO,CAAC;AAHN,aAVC;AAeL,kBAAM,QAAQ,CAAR,CAfD;AAgBL,mBAAO,KAhBF;AAiBL,mBAAO;AAjBF,WAAP;;AAoBA,gBAAM,GAAN,EAAW,IAAX,CAAgB,IAAhB;AACD;AACF;;AAED,aAAO,KAAP;AACD;;AAED;;;;;;;;;uCAMmB,K,EAAO,U,EAAY,K,EAAO,Q,EAAU;AACrD,UAAI,MAAM,EAAV;AAAA,UACE,IADF;AAAA,UAEE,KAFF;AAAA,UAES,MAFT;AAAA,UAGE,YAAY,KAAK,MAAL,CAAY,SAH1B;AAAA,UAIE,YAAY,KAAK,SAJnB;AAAA,UAKE,SALF;AAAA,UAME,EANF;AAAA,UAMM,QANN;;AAQA,WAAK,KAAK,gBAAV;AACA,iBAAY,OAAO,KAAP,KAAiB,WAA7B;;AAEA,UAAI,QAAJ,EAAc;AACZ,YAAI,IAAJ,GAAW,UAAX;AACA,YAAI,MAAJ,GAAa,MAAM,MAAM,MAAN,GAAe,CAArB,EAAwB,EAAxB,EAA4B,IAAzC;AACA,YAAI,IAAJ,GAAW,SAAX;AACD,OAJD,MAIO;AACL,cAAM,UAAN;AACD;;AAED,UAAI,QAAJ,GAAe,QAAf;;AAEA,UAAI,EAAJ,GAAS,QAAQ,IAAI,IAAZ,GAAmB,GAAnB,GAAyB,KAAlC;;AAEA,UAAI,KAAK,MAAL,CAAY,oBAAZ,KAAqC,IAAzC,EAA+C;AAC7C,YAAI,UAAU,KAAK,SAAL,CAAe,KAAf,EAAsB,kBAApC;AACA,YAAI,IAAJ,GAAW,UAAU,MAAV,GAAmB,IAAI,IAAlC;AACD;;AAED,kBAAY,IAAI,MAAhB;;AAEA,eAAS,CAAT;;AAEA,UAAI,QAAJ,EAAc;AACZ,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,iBAAO,MAAM,CAAN,CAAP;AACA,cAAI,WAAW,KAAK,EAAL,EAAS,IAAT,GAAgB,KAAK,EAAL,EAAS,KAAxC;AACA,kBAAQ,YAAY,IAAI,MAAhB,GAAyB,UAAU,EAAV,CAAzB,GAAyC,QAAzC,GAAoD,SAA5D;;AAEA,gBAAM,CAAN,EAAS,EAAT,GAAc,EAAC,OAAO,MAAR,EAAgB,MAAM,SAAS,KAA/B,EAAsC,OAAO,KAA7C,EAAd;;AAEA,mBAAS,MAAM,CAAN,EAAS,EAAT,CAAY,IAArB;;AAEA,cAAI,YAAY,KAAK,KAAL,KAAe,MAA3B,IAAqC,KAAK,IAAL,CAAU,CAAV,MAAiB,GAA1D,EAA+D;AAC7D,gBAAI,SAAJ,GAAgB,CAAhB;AACD;AACF;AACF,OAdD,MAcO;AACL,iBAAS,YAAY,IAAI,MAAhB,GAAyB,UAAU,EAAV,CAAlC;AACD;;AAED,UAAI,KAAJ,GAAY,MAAZ;;AAEA,UAAI,KAAJ,GAAY,EAAZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI,KAAK,MAAL,CAAY,aAAZ,KAA8B,IAAlC,EAAwC;AACtC,YAAI,KAAJ,CAAU,EAAV,GAAe,CAAf;AACA;AACA,YAAI,KAAJ,CAAU,IAAV,GAAiB,YAAY,SAAZ,GAAwB,UAAU,EAAnD;AACD,OAJD,MAIO;AACL,YAAI,KAAJ,CAAU,EAAV,GAAe,YAAY,UAAU,EAArC;AACA,YAAI,QAAJ,EAAc;AACZ,cAAI,KAAJ,CAAU,IAAV,GAAiB,YAAY,UAAU,IAAvC;AACD;AACF;AACD,UAAI,KAAJ,GAAY,KAAZ;;AAEA,UAAI,kBAAJ,GAAyB,EAAzB;AACA,UACA,YAAY,MAAM,CAAN,EAAS,IAAT,CAAc,CAAd,MAAqB,GAAjC,IAAwC,MAAM,CAAN,EAAS,IAAT,CAAc,CAAd,MAAqB,GAA7D,IACA,MAAM,CAAN,EAAS,EAAT,CAAY,IAAZ,GAAmB,MAAM,CAAN,EAAS,EAAT,CAAY,KAA/B,GAAuC,GAFvC,EAGA;AACE;AACA,YAAI,kBAAJ,GAAyB,aAAzB;;AAEA;AACA,YAAI,KAAJ,GAAY,IAAI,KAAJ,CAAU,KAAV,CAAgB,CAAhB,CAAZ;AACD;;AAED,UAAI,YAAY,IAAI,KAAJ,CAAU,MAAV,KAAqB,CAArC,EAAwC;AACtC;AACA;AACA;AACA,eAAO,IAAI,KAAX;AACD;;AAED,aAAO,GAAP;AACD;;AAED;;;;;;;;;2CAMuB;AACrB,UAAI,OAAO,IAAX;;AAEA,UAAI,uBAAuB,KAAK,OAAL,CAAa,uBAAb,EAA3B;;AAEA,UAAI,uBAAuB,KAAK,OAAL,CAAa,8BAAb,EAA3B;AACA,UAAI,uBAAuB,KAAK,OAAL,CAAa,8BAAb,EAA3B;;AAEA;AACA,SAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,4BAA7B,EACG,MADH,CACU,MADV,EAEG,IAFH,CAEQ,KAAK,gBAFb,EAGG,IAHH,CAGQ,OAHR,EAGiB,0BAA0B,oBAH3C,EAIG,IAJH,CAIQ,WAJR,EAIqB,oBAJrB,EAKG,IALH,CAKQ,GALR,EAKa,oBALb,EAMG,IANH,CAMQ,GANR,EAMa,UAAS,CAAT,EAAY,CAAZ,EAAe;AACxB,eAAO,KAAK,OAAL,CAAa,8BAAb,CAA4C,CAA5C,CAAP;AACD,OARH,EASG,IATH,CASQ,aATR,EASuB,KAAK,OAAL,CAAa,2BAAb,EATvB,EAUG,IAVH,CAUQ,UAAS,CAAT,EAAY,CAAZ,EAAe;AACjB;AACF,YAAI,KAAJ;AACA,YAAI,EAAE,IAAF,CAAO,OAAP,CAAe,GAAf,MAAwB,CAAC,CAA7B,EAAgC;AAC9B,kBAAQ,CAAC,EAAE,IAAH,CAAR;AACD,SAFD,MAEO;AACL,kBAAQ,EAAE,IAAF,CAAO,KAAP,CAAa,mBAAb,EAAkC,KAAlC,CAAwC,CAAxC,EAA2C,OAA3C,EAAR;AACD;;AAED,YACE,SAAS,KAAK,MAAd,IACA,KAAK,MAAL,CAAY,MAAZ,KAAuB,CADvB,IAEA,MAAM,KAAK,cAAL,CAAoB,KAH5B,EAIE;AACA,cAAI,KAAK,MAAL,CAAY,GAAZ,KAAoB,MAAxB,EAAgC;AAC9B,oBAAQ,CAAC,IAAD,CAAR;AACD,WAFD,MAEO;AACL,oBAAQ,CAAC,IAAD,CAAR;AACD;AACF;;AAED;AACA,WAAG,MAAH,CAAU,IAAV,EAAgB,SAAhB,CAA0B,OAA1B,EACG,IADH,CACQ,KADR,EAEG,KAFH,GAGG,MAHH,CAGU,OAHV,EAIG,IAJH,CAIQ,IAJR,EAIc,UAAS,CAAT,EAAY,CAAZ,EAAe;AACzB,iBAAO,IAAI,CAAC,GAAL,GAAW,IAAlB;AACD,SANH,EAOG,IAPH,CAOQ,GAPR,EAOa,KAAK,OAAL,CAAa,8BAAb,EAPb,EAQG,IARH,CAQQ,OARR,EAQiB,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC5B,cAAI,aAAa,KAAK,MAAL,CAAY,oBAA7B;AACA,iBAAO,MAAM,CAAN,IAAW,UAAX,GAAwB,QAAxB,GAAmC,IAA1C;AACD,SAXH,EAWK,IAXL,CAWU,MAXV;AAYD,OA5CH;;AA8CA,UAAI,oBAAoB,KAAK,OAAL,CAAa,8BAAb,EAAxB;;AAEA;AACA,SAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,4BAA7B,EACG,IADH,CACQ,UAAS,CAAT,EAAY,YAAZ,EAA0B;AAC9B,WAAG,MAAH,CAAU,IAAV,EAAgB,SAAhB,CAA0B,aAA1B,EACG,MADH,CACU,MADV,EAEG,IAFH,CAEQ,OAFR,EAEiB,UAFjB,EAGG,IAHH,CAGQ,WAHR,EAGqB,iBAHrB,EAIG,IAJH,CAIQ,GAJR,EAIa,UAAS,CAAT,EAAY,CAAZ,EAAe;AACxB,iBAAO,KAAK,OAAL,CAAa,2BAAb,CAAyC,CAAzC,CAAP;AACD,SANH,EAMK,IANL,CAMU,GANV,EAMe,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC1B,iBAAO,KAAK,OAAL,CAAa,2BAAb,CAAyC,CAAzC,CAAP;AACD,SARH,EAQK,IARL,CAQU,UAAS,CAAT,EAAY,SAAZ,EAAuB;AAC7B,iBAAO,KAAK,OAAL,CAAa,WAAb,CAAyB,YAAzB,EAAuC,SAAvC,CAAP;AACD,SAVH,EAUK,IAVL,CAUU,aAVV,EAUyB,QAVzB;AAWD,OAbH;AAcD;;AAED;;;;;;;;;mCAMe,W,EAAa;AAC1B,UAAI,CAAJ,EAAO,GAAP,EAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,WAAnD;;AAEA,aAAO,IAAP;;AAEA,aAAO,EAAP;;AAEA,WAAK,KAAL,IAAc,WAAd,EAA2B;AACzB,aAAK,GAAL,IAAY,YAAY,KAAZ,CAAZ,EAAgC;AAC9B,eAAK,IAAL,CAAU,YAAY,KAAZ,EAAmB,GAAnB,CAAV;AACD;AACF;;AAED,oBAAc,EAAd;;AAEA,iBAAW,CAAX;AACA,WAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,oBAAY,CAAZ;;AAEA,mBAAW,KAAK,CAAL,CAAX;;AAEA,cAAM,GAAG,MAAH,CAAU,KAAK,QAAL,GAAgB,IAAhB,GAAuB,SAAS,EAA1C,CAAN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAY,SAAS,EAArB,IAA2B,EAA3B;;AAEA,YAAI,SAAJ,CAAc,MAAd,EACC,IADD,CACM,SAAS,KADf,EAEC,KAFD,GAGC,MAHD,CAGQ,GAHR,EAIG,IAJH,CAIQ,OAJR,EAIiB,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC5B,iBAAO,qBAAqB,CAA5B;AACD,SANH,EAOG,IAPH,CAOQ,WAPR,EAOqB,UAAS,CAAT,EAAY;AAC7B,cAAI,YAAY,KAAK,OAAL,CAAa,+BAAb,CAA6C,CAA7C,EAAgD,CAAhD,CAAhB;;AAEA,cAAI,IAAI,UAAU,CAAlB;AACA;;AAEA,sBAAY,SAAS,EAArB,EAAyB,IAAzB,CAA8B,IAAI,EAAlC;;AAEA,iBAAO,UAAU,SAAjB;AACD,SAhBH,EAiBG,MAjBH,CAiBU,MAjBV,EAkBG,IAlBH,CAkBQ,aAlBR,EAkBuB,KAAK,OAAL,CAAa,4BAAb,CAA0C,CAA1C,CAlBvB,EAmBG,IAnBH,CAmBQ,UAAS,CAAT,EAAY;AAChB,iBAAO,EAAE,IAAT;AACD,SArBH;;AAuBA;AACA;;AAEA,YAAI,SAAJ,CAAc,qBAAd,EACG,IADH,CACQ,SAAS,KADjB,EAEG,KAFH,GAGG,MAHH,CAGU,GAHV,EAIG,IAJH,CAIQ,OAJR,EAIiB,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC5B,iBAAO,0BAA0B,CAAjC;AACD,SANH,EAOG,IAPH,CAOQ,WAPR,EAOqB,UAAS,CAAT,EAAY;AAC7B,cAAI,CAAJ,EAAO,CAAP;;AAEA,cAAI,KAAK,KAAL,CAAW,EAAE,EAAF,CAAK,KAAL,GAAa,EAAE,EAAF,CAAK,KAAL,GAAa,CAArC,CAAJ;;AAEA,sBAAY,SAAS,EAArB,EAAyB,IAAzB,CAA8B,IAAI,EAAlC;AACA,cAAI,CAAC,EAAL;;AAEA,iBAAO,eAAe,CAAf,GAAmB,GAAnB,GAAyB,CAAzB,GAA6B,GAApC;AACD,SAhBH,EAiBG,MAjBH,CAiBU,MAjBV,EAkBG,IAlBH,CAkBQ,IAlBR,EAkBc,CAlBd,EAmBG,IAnBH,CAmBQ,IAnBR,EAmBc,YAAW;AACrB,iBAAO,KAAK,OAAL,CAAa,uBAAb,CAAqC,CAArC,CAAP;AACD,SArBH,EAsBG,IAtBH,CAsBQ,IAtBR,EAsBc,CAtBd,EAuBG,IAvBH,CAuBQ,IAvBR,EAuBc,YAAW;AACrB,iBAAO,KAAK,OAAL,CAAa,uBAAb,CAAqC,CAArC,CAAP;AACD,SAzBH;AA0BD;;AAED,WAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,mBAAW,KAAK,CAAL,CAAX;;AAEA,YAAI,cAAc,YAAY,SAAS,EAArB,EAAyB,MAA3C;AAAA,YACE,sBADF;AAAA,YAEE,KAFF;AAAA,YAGE,gBAAgB,EAHlB;AAAA,YAIE,kBAJF;AAAA,YAKE,KALF;AAAA,YAME,eANF;AAAA,YAOE,eAPF;AAAA,YAQE,gBARF;AAAA,YASE,WATF;;AAWA,iCAAyB,CAAzB;;AAEA,sBAAc,CAAd;;AAEA,aAAK,QAAQ,CAAb,EAAgB,QAAQ,WAAxB,EAAqC,OAArC,EAA8C;AAC5C;;AAEA,kBAAQ,YAAY,SAAS,EAArB,EAAyB,KAAzB,CAAR;;AAEA,cAAI,QAAQ,yBAAyB,WAAjC,KAAiD,KAArD,EAA4D;AAC1D,0BAAc,IAAd,CAAmB,KAAnB;AACD,WAFD,MAEO;AACL,iCAAqB,KAArB;AACA,qCAAyB,eAAzB;AACA;AACD;;AAED,cAAI,uBAAuB,KAA3B,EAAkC;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAAkB,YAAY,SAAS,EAArB,EAAyB,KAAzB,CAAlB;AACA,+BAAmB,EAAnB;;AAEA,8BAAkB,kBAAkB,gBAApC;AACD;;AAED,cACE,QAAQ,kBAAkB,WAD5B,EAEE;AACA,iCAAqB,KAArB;AACA,qCAAyB,eAAzB;AACD,WALD,MAKO;AACL,0BAAc,IAAd,CAAmB,KAAnB;AACD;AACF;;AAED,YAAI,kBAAkB,EAAtB;AAAA,YACE,YAAY,cAAc,MAD5B;AAAA,YAEE,CAFF;;AAIA,aAAK,IAAI,CAAT,EAAY,IAAI,SAAhB,EAA2B,GAA3B,EAAgC;AAC9B,kBAAQ,cAAc,CAAd,CAAR;AACA,0BAAgB,IAAhB,CAAqB,MAAM,SAAS,EAAf,GAAoB,UAApB,GAAiC,KAAtD;AACD;;AAED,aAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,MAAjB,CAAwB,eAAxB,CAAnB;AACD;AACF;;AAED;;;;2CACuB,G,EAAK,Q,EAAU,W,EAAa,K,EAAO;AACxD,UAAI,SAAJ,EAAe,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,EAAkC,CAAlC,EACE,cADF,EACkB,QADlB,EAC4B,YAD5B,EAC0C,UAD1C;;AAGA,iBAAW,KAAK,MAAL,CAAY,QAAvB;AACA,kBAAY,KAAK,MAAL,CAAY,SAAZ,GAAwB,QAApC;AACA,uBAAiB,KAAK,MAAL,CAAY,cAA7B;;AAEA,aAAO,IAAP;;AAEA,UACA,OAAQ,KAAR,KAAmB,WAAnB,IACA,MAAM,cAAN,CAAqB,GAArB,CADA,IAEA,EAAE,MAAM,CAAN,KAAY,CAAZ,IAAiB,MAAM,CAAN,KAAY,CAA/B,CAHA,EAIA;AACE,mBAAW,WAAW,MAAM,CAAjB,GAAqB,GAArB,GAA2B,MAAM,CAAjC,GAAqC,GAAhD;AACA,YAAI,CAAC,CAAL;AACA,YAAK,UAAU,EAAV,GAAe,CAAC,EAAhB,GAAqB,CAAC,EAA3B;AACD,OARD,MAQO;AACL,YAAI,CAAC,CAAL;AACA,YAAI,CAAC,EAAL;AACA,gBAAQ,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAR;AACA,mBAAW,EAAX;AACD;;AAED,UAAI,gBAAgB,UAAhB,IAA8B,gBAAgB,EAAlD,EAAsD;AACpD,YAAI,KAAK,WAAW,CAApB;;AAEA,YAAI,iBAAiB,CAAjB,IAAsB,gBAAgB,EAA1C,EAA8C;AAC5C,gBAAM,CAAN;AACD;;AAED,qBAAa,CAAC,CAAd;AACA,YAAI,KAAK,MAAL,CAAY,cAAZ,KAA+B,IAAnC,EAAyC;AACvC,uBAAa,KAAK,MAAL,CAAY,SAAZ,GAAwB,QAAxB,GAAmC,EAAhD;AACD;;AAED,oBAAY,KAAK,MAAL,CAAY,SAAZ,GAAwB,EAApC;;AAEA,YAAI,iBAAiB,CAAjB,KAAuB,KAA3B,EAAkC;AAChC,uBAAa,CAAb;AACD;;AAED,YAAI,YAAY,UAAhB;;AAEA,YAAI,SAAJ,CAAc,eAAd,EACG,IADH,CACQ,WADR,EACqB,QADrB,EAEG,SAFH,CAEa,OAFb,EAGK,IAHL,CAGU,GAHV,EAGe,CAHf,EAIK,IAJL,CAIU,GAJV,EAIe,CAJf;AAKD,OAzBD,MAyBO;AACL,oBAAY,CAAZ;;AAEA,qBAAa,CAAC,QAAD,GAAY,CAAzB;AACA,YAAI,KAAK,MAAL,CAAY,cAAZ,KAA+B,IAAnC,EAAyC;AACvC,uBAAa,KAAK,MAAL,CAAY,SAAZ,GAAwB,CAArC;AACD;;AAED,uBAAe,KAAK,MAAL,CAAY,iBAA3B;AACA,YAAI,KAAK,MAAL,CAAY,iBAAZ,KAAkC,SAAtC,EAAiD;AAC/C,0BAAgB,CAAhB;AACD;;AAED,oBAAY,KAAK,MAAL,CAAY,SAAZ,GAAwB,QAApC;AACA,YAAI,EAAE,YAAY,UAAd,IAA4B,CAA5B,GAAgC,YAApC;AACA,aAAK,MAAM,CAAX;;AAEA,YAAI,SAAJ,CAAc,eAAd,EACG,IADH,CACQ,WADR,EACqB,gBAAgB,QADrC,EAEG,SAFH,CAEa,OAFb,EAGG,IAHH,CAGQ,GAHR,EAGa,CAHb,EAIG,IAJH,CAIQ,GAJR,EAIa,CAJb;AAKD;AACF;;AAED;;;;;;;;;;;qCAQiB,G,EAAK,Q,EAAU,K,EAAO;AACrC,UAAI,SAAJ;AAAA,UAAe,QAAf;AAAA,UACE,WADF;AAAA,UACe,UADf;AAAA,UAEE,OAAO,IAFT;;AAIA,mBAAa,IAAI,SAAJ,CAAc,YAAd,CAAb;;AAEA,iBAAW,KAAK,MAAL,CAAY,QAAvB;AACA,kBAAY,KAAK,MAAL,CAAY,SAAZ,GAAwB,QAApC;;AAEA,oBAAc,IAAI,IAAJ,CAAS,kBAAT,CAAd;;AAEA,UAAI,OAAQ,KAAR,KAAmB,WAAvB,EAAoC;AAClC,gBAAQ,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAR;AACA,mBAAW,EAAX;AACD,OAHD,MAGO;AACL,mBAAW,WAAW,MAAM,CAAjB,GAAqB,GAArB,GAA2B,MAAM,CAAjC,GAAqC,GAAhD;AACD;;AAED,UACE,aAAa,CAAb,IACA,iBAAiB,KAAK,MADtB,IACgC,KAAK,MAAL,CAAY,WAAZ,KAA4B,aAF9D,EAGE;AACA,mBACG,IADH,CACQ,WADR,EACqB,UAAS,CAAT,EAAY;AAC7B,cAAI,CAAJ,EAAO,CAAP;AACA,cAAK,IAAI,SAAL,GAAkB,EAAtB;AACA,cAAI,KAAK,KAAL,CAAW,IAAI,EAAE,EAAF,CAAK,KAAT,GAAiB,EAAE,EAAF,CAAK,KAAL,GAAa,CAAzC,CAAJ;AACA,iBAAO,0BAA0B,CAA1B,GAA8B,GAA9B,GAAoC,CAApC,GAAwC,GAA/C;AACD,SANH,EAOG,SAPH,CAOa,MAPb,EAQK,IARL,CAQU,aARV,EAQyB,KARzB;AASD,OAbD,MAaO,IAAI,gBAAgB,UAApB,EAAgC;AACrC,mBACG,IADH,CACQ,WADR,EACqB,UAAS,CAAT,EAAY;AAC7B,cAAI,CAAJ,EAAO,CAAP;AACA,cAAI,IAAI,SAAR;AACA,cAAI,KAAK,KAAL,CAAW,IAAI,EAAE,EAAF,CAAK,KAAT,GAAiB,EAAE,EAAF,CAAK,KAAL,GAAa,CAAzC,CAAJ;AACA,iBAAO,0BAA0B,CAA1B,GAA8B,GAA9B,GAAoC,CAApC,GAAwC,GAA/C;AACD,SANH,EAOG,SAPH,CAOa,MAPb,EAQK,IARL,CAQU,WARV,EAQuB,QARvB;AASD,OAVM,MAUA;AACL,mBACG,IADH,CACQ,WADR,EACqB,UAAS,CAAT,EAAY;AAC7B,cAAI,CAAJ,EAAO,CAAP;AACA,cAAI,KAAK,KAAL,CAAW,CAAC,CAAD,GAAK,MAAM,CAAX,GAAe,EAAE,EAAF,CAAK,KAApB,GAA4B,EAAE,EAAF,CAAK,KAAL,GAAa,CAApD,CAAJ;AACA,cAAI,YAAY,EAAhB;AACA,iBAAO,eAAe,CAAf,GAAmB,GAAnB,GAAyB,CAAzB,GAA6B,GAApC;AACD,SANH,EAOG,SAPH,CAOa,MAPb,EAQK,IARL,CAQU,WARV,EAQuB,QARvB;;AAUA,YAAI,SAAJ,CAAc,sBAAd,EACG,IADH,CACQ,WADR,EACqB,QADrB;AAED;AACF;;;0BAEK,K,EAAO;AACX;AACA;AACA;AACA,aAAO,KAAK,KAAL,CAAW,QAAQ,GAAnB,IAA0B,GAAjC;AACD;;AAED;;;;;;mCAGe,Q,EAAU,Q,EAAU,S,EAAW,C,EAAG;AAC/C,UAAI,YAAY,KAAK,MAAL,CAAY,SAA5B;;AAEA;AACA,UAAI,UAAU,2BAAa,WAAb,CAAyB,QAAzB,CAAd;;AAEA;AACA,UAAI,aAAa,UACZ,MADY,CACL,GADK,EAEZ,IAFY,CAEP,IAFO,EAED,SAAS,EAFR,EAGZ,IAHY,CAGP,OAHO,EAGE,gBAAgB,QAAQ,WAAR,EAHlB,EAIZ,IAJY,CAIP,WAJO,EAIM,kBAAkB,IAAI,SAAtB,GAAkC,GAJxC,CAAjB;;AAMA;AACA,aAAO,uBAAW,WAAX,CAAuB,OAAvB,EAAgC,KAAK,MAArC,EAA6C,IAA7C,EACF,MADE,CACK,UADL,EACiB,QADjB,EAC2B,CAD3B,CAAP;AAED;;AAED;;;;;;;2CAIuB,U,EAAY;AACjC;AACA;AACA,UAAI,CAAC,KAAK,MAAL,CAAY,KAAjB,EAAwB;AACtB;AACD;;AAED,UAAI,eACF,OAAO,GAAG,MAAH,CAAU,WAAW,UAArB,EAAiC,IAAjC,CAAsC,iBAAtC,CAAP,CADF;;AAGA,UAAI,YAAY,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CACV,GAAG,MAAH,CAAU,WAAW,UAArB,EAAiC,SAAjC,CAA2C,cAA3C,EAA2D,OAA3D,CAAmE,CAAnE,CADU,EAEZ,OAFY,CAEJ,UAFI,CAAhB;;AAIA,aAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,YAApB,EAAkC,SAAlC,EAA6C,UAA7C,CAAP;AACD;;AAED;;;;;;;kCAIc,G,EAAK,E,EAAI;AACrB,UAAI,CAAJ,EAAO,IAAP,EAAa,aAAb,EAA4B,IAA5B,EAAkC,EAAlC,EAAsC,MAAtC,EAA8C,OAA9C,EAAuD,QAAvD,EAAiE,SAAjE,EACE,QADF,EACY,UADZ,EACwB,OADxB,EACiC,MADjC,EACyC,QADzC;;AAGA,WAAK,IAAI,CAAT,EAAY,IAAI,IAAI,KAAJ,CAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,eAAO,IAAI,KAAJ,CAAU,CAAV,CAAP;;AAEA,iBAAS,KAAK,aAAd;AACA,kBAAU,KAAK,EAAL,CAAQ,KAAlB;AACA,iBAAS,KAAK,EAAL,CAAQ,IAAjB;AACA,mBAAW,SAAS,OAApB;AACA,oBAAY,KAAK,IAAL,CAAU,KAAtB;AACA,mBAAW,KAAK,IAAL,CAAU,IAArB;AACA,qBAAa,WAAW,SAAxB;AACA,kBAAU,KAAK,EAAL,CAAQ,KAAlB;AACA,mBAAW,KAAK,EAAL,CAAQ,KAAnB;;AAEA,YAAI,MAAM,OAAN,IAAiB,MAAM,MAA3B,EAAmC;AACjC,0BAAgB,aAAa,QAA7B;AACA,iBAAO,YAAY,CAAC,KAAK,OAAN,IAAiB,aAApC;;AAEA,eAAK,SAAS,OAAT,GAAoB,YAAY,OAAO,SAAnB,IAAiC,UAA1D;;AAEA,iBAAO,EAAP;AACD;AACF;;AAED,YAAM,IAAI,KAAJ,CACJ,8BACA,MADA,GACS,EADT,GACc,iBADd,GACkC,IAAI,IADtC,GAC6C,IAD7C,GACoD,KAAK,EAAL,CAAQ,IAFxD,CAAN;AAID;;AAED;;;;;;;kCAIc,G,EAAK,E,EAAI;AACrB,UAAI,CAAJ,EAAO,IAAP,EAAa,aAAb,EAA4B,IAA5B,EAAkC,EAAlC,EAAsC,QAAtC,EACE,OADF,EACW,MADX,EACmB,SADnB,EAC8B,QAD9B,EACwC,QADxC,EACkD,UADlD;;AAGA,WAAK,IAAI,CAAT,EAAY,IAAI,IAAI,KAAJ,CAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,eAAO,IAAI,KAAJ,CAAU,CAAV,CAAP;;AAEA,kBAAU,KAAK,EAAL,CAAQ,KAAlB;AACA,iBAAS,KAAK,EAAL,CAAQ,IAAjB;AACA,oBAAY,KAAK,IAAL,CAAU,KAAtB;AACA,mBAAW,KAAK,IAAL,CAAU,IAArB;;AAEA,YAAI,MAAM,OAAN,IAAiB,MAAM,MAA3B,EAAmC;AACjC,uBAAa,WAAW,SAAxB;AACA,qBAAW,SAAS,OAApB;AACA,qBAAW,KAAK,EAAL,CAAQ,IAAR,GAAe,KAAK,EAAL,CAAQ,KAAlC;;AAEA,0BAAgB,aAAa,QAA7B;AACA,iBAAO,YAAY,CAAC,KAAK,OAAN,IAAiB,aAApC;;AAEA,eAAK,KAAK,EAAL,CAAQ,KAAR,GAAiB,YAAY,OAAO,SAAnB,IAAgC,UAAtD;;AAEA,iBAAO,KAAK,KAAL,CAAW,EAAX,CAAP;AACD;AACF;;AAED,YAAM,IAAI,KAAJ,CACJ,0BACA,MADA,GACS,EADT,GACc,iBADd,GACkC,IAAI,IADtC,GAC6C,IAD7C,GACoD,MAFhD,CAAN;AAID;;AAED;;;;;;;;gCAKY,e,EAAiB;AAC3B,UAAI,KAAK,IAAI,IAAJ,GAAW,OAAX,EAAT;;AAEA,UAAI,EAAJ;AAAA,UAAQ,EAAR;AAAA,UACE,SADF;AAAA,UAEE,CAFF;AAAA,UAEK,KAFL;AAAA,UAEY,OAFZ;AAAA,UAGE,QAHF;AAAA,UAGY,OAHZ;AAAA,UAGqB,cAHrB;AAAA,UAIE,OAAO,IAJT;;AAMA,kBAAY,GAAG,MAAH,CAAU,KAAK,QAAf,EACX,MADW,CACJ,GADI,EACC,cADD,EAEX,IAFW,CAEN,OAFM,EAEG,SAFH,CAAZ;;AAIA,WAAK,IAAI,CAAT,EAAY,IAAI,gBAAgB,MAAhC,EAAwC,GAAxC,EAA6C;AAC3C,kBAAU,gBAAgB,CAAhB,CAAV;;AAEA,aAAK,QAAQ,EAAb;AACA,aAAK,QAAQ,EAAb;;AAEA,gBAAQ,MAAR;AACA,YAAI,WAAW,OAAf,EAAwB;AACtB,kBAAQ,QAAQ,KAAhB;AACD;;AAED,kBAAU,CAAV;AACA,YAAI,aAAa,OAAjB,EAA0B;AACxB,oBAAU,QAAQ,OAAlB;AACD;;AAED,WAAG,OAAH,GAAa,KAAK,aAAL,CAAmB,GAAG,GAAtB,EAA2B,GAAG,KAA9B,CAAb;AACA,WAAG,MAAH,GAAY,KAAK,aAAL,CAAmB,GAAG,GAAtB,EAA2B,GAAG,IAA9B,CAAZ;AACA,WAAG,OAAH,GAAa,KAAK,aAAL,CAAmB,GAAG,GAAtB,EAA2B,GAAG,KAA9B,CAAb;AACA,WAAG,MAAH,GAAY,KAAK,aAAL,CAAmB,GAAG,GAAtB,EAA2B,GAAG,IAA9B,CAAZ;;AAEA,mBACA,GAAG,GAAH,CAAO,EAAP,GAAY,GAAZ,GAAkB,GAAG,KAArB,GAA6B,GAA7B,GAAmC,GAAG,IAAtC,GAA6C,GAA7C,GACA,IADA,GAEA,GAAG,GAAH,CAAO,EAFP,GAEY,GAFZ,GAEkB,GAAG,KAFrB,GAE6B,GAF7B,GAEmC,GAAG,IAHtC;;AAMA,yBAAiB,UAAU,MAAV,CAAiB,GAAjB,EACd,IADc,CACT,OADS,EACA,gBADA,EAEd,IAFc,CAET,IAFS,EAEH,QAFG,EAGd,EAHc,CAGX,OAHW,EAGF,YAAW;AACtB,cAAI,eAAe,IAAnB;AACA,cAAI,SAAS,GAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,kBAA7B,EACV,MADU,CACH,YAAW;AACjB,mBAAQ,SAAS,YAAjB;AACD,WAHU,CAAb;;AAKA,iBAAO,OAAP,CAAe,QAAf,EAAyB,CAAC,OAAO,OAAP,CAAe,QAAf,CAA1B;AACD,SAXc,EAYd,EAZc,CAYX,WAZW,EAYE,YAAW;AAC1B,cAAI,eAAe,IAAnB;AACA,aAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,kBAA7B,EACG,MADH,CACU,YAAW;AACjB,mBAAQ,SAAS,YAAjB;AACD,WAHH,EAIG,OAJH,CAIW,OAJX,EAIoB,IAJpB;AAKD,SAnBc,EAoBd,EApBc,CAoBX,UApBW,EAoBC,YAAW;AACzB,aAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,kBAA7B,EACG,OADH,CACW,OADX,EACoB,KADpB;AAED,SAvBc,CAAjB;AAwBA,YAAI,WAAW,KAAK,MAAL,CAAY,QAA3B;AACA,YAAI,KAAK,KAAK,OAAL,CAAa,0BAAb,CAAwC,CAAxC,CAAT;AACA,YAAI,KAAK,KAAK,OAAL,CAAa,0BAAb,CAAwC,CAAxC,IAA6C,QAAtD;;AAEA,uBAAe,MAAf,CAAsB,SAAtB,EACG,IADH,CACQ,QADR,EAEI,KAAK,IAAL,GAAY,GAAG,OAAf,GAAyB,GAAzB,GACA,EADA,GACK,IADL,GACY,GAAG,MADf,GACwB,GADxB,GAEA,EAFA,GAEK,IAFL,GAEY,GAAG,MAFf,GAEwB,GAFxB,GAGA,EAHA,GAGK,IAHL,GAGY,GAAG,OALnB,EAOG,IAPH,CAOQ,OAPR,EAOiB,WAAW,KAAX,GAAmB,kBAAnB,GAAwC,OAPzD;;AASA,uBAAe,MAAf,CAAsB,MAAtB,EACG,IADH,CACQ,OADR,EACiB,eADjB,EAEG,IAFH,CAEQ,IAFR,EAEc,EAFd,EAGG,IAHH,CAGQ,IAHR,EAGc,EAHd,EAIG,IAJH,CAIQ,IAJR,EAIc,GAAG,OAJjB,EAKG,IALH,CAKQ,IALR,EAKc,GAAG,OALjB;;AAOA,uBAAe,MAAf,CAAsB,MAAtB,EACG,IADH,CACQ,OADR,EACiB,eADjB,EAEG,IAFH,CAEQ,IAFR,EAEc,EAFd,EAGG,IAHH,CAGQ,IAHR,EAGc,EAHd,EAIG,IAJH,CAIQ,IAJR,EAIc,GAAG,MAJjB,EAKG,IALH,CAKQ,IALR,EAKc,GAAG,MALjB;AAMD;;AAED,UAAI,KAAK,IAAI,IAAJ,GAAW,OAAX,EAAT;AACA,UAAI,KAAK,KAAT,EAAgB;AACd,gBAAQ,GAAR,CAAY,mCAAmC,KAAK,EAAxC,IAA8C,KAA1D;AACD;AACF;;AAED;;;;;;wCAGoB;AAClB,UACE,KAAK,MAAL,CAAY,eAAZ,IACA,KAAK,MAAL,CAAY,oBADZ,IAEA,KAAK,MAFL,IAEe,KAAK,MAAL,CAAY,WAH7B,EAIE;AACA,YAAI,CAAC,KAAK,MAAL,CAAY,gBAAjB,EAAmC;AACjC,cAAI,cAAc,KAAK,KAAL,CAAW,KAAK,MAAL,CAAY,SAAZ,GAAwB,GAAnC,CAAlB;AACA,eAAK,MAAL,CAAY,gBAAZ,GAA+B,WAA/B;AACD;;AAED,YAAI,KAAK,MAAL,CAAY,gBAAhB,EAAkC;AAChC,eAAK,MAAL,CAAY,cAAZ,GAA6B,KAAK,MAAL,CAAY,gBAAZ,CAA6B,MAA1D;AACD,SAFD,MAEO;AACL,eAAK,MAAL,CAAY,cAAZ,GAA6B,CAA7B;AACD;AACD,aAAK,MAAL,CAAY,iBAAZ,GACA,KAAK,MAAL,CAAY,gBAAZ,GAA+B,KAAK,MAAL,CAAY,cAD3C;;AAGA,YAAI,OAAO,KAAK,MAAL,CAAY,QAAnB,KAAgC,WAApC,EAAiD;AAC/C,eAAK,MAAL,CAAY,QAAZ,GAAuB,CAAvB;AACD;AACF,OArBD,MAqBO;AACL,aAAK,MAAL,CAAY,iBAAZ,GAAgC,CAAhC;AACD;;AAED,UAAI,OAAO,KAAK,MAAL,CAAY,gBAAnB,KAAwC,WAA5C,EAAyD;AACvD,aAAK,MAAL,CAAY,gBAAZ,GAA+B,MAA/B;AACD;AACF;;AAED;;;;;;+BAGW,c,EAAgB;AACzB,UAAI,OAAO,IAAX;AAAA,UACE,CADF;AAAA,UACK,CADL;AAAA,UACQ,KADR;AAAA,UAEE,YAAY,EAFd;AAAA,UAGE,QAHF;AAAA,UAGY,IAHZ;AAAA,UAIE,GAJF;AAAA,UAKE,OAAO,KAAK,WAAL,CAAiB,KAAK,MAAL,CAAY,KAA7B,CALT,CADyB,CAMqB;;AAE9C;AACA,UAAI,YAAY,eAAe,CAAf,CAAhB,EAAmC;AACjC,eAAO,KAAK,mBAAL,CAAyB,cAAzB,CAAP;AACD;;AAED,WAAK,GAAL,IAAY,IAAZ,EAAkB;AAChB,kBAAU,IAAV,CAAe,EAAC,KAAK,GAAN,EAAW,QAAQ,EAAnB,EAAf;AACD;;AAED,WAAK,IAAI,CAAT,EAAY,IAAI,eAAe,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,gBAAQ,eAAe,CAAf,CAAR;;AAEA,aAAK,IAAI,CAAT,EAAY,IAAI,UAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,cAAI,MAAM,GAAN,KAAc,UAAU,CAAV,EAAa,GAA/B,EAAoC;AAClC,uBAAW,CACT,MAAM,IADG,EAET,MAAM,KAFG,EAGT,MAAM,IAAN,GAAa,MAAM,KAHV,CAAX;AAKA,gBAAI,WAAW,KAAf,EAAsB;AACpB,uBAAS,IAAT,CAAc,MAAM,KAApB;AACD;AACD,gBAAI,WAAW,KAAf,EAAsB;AACpB,uBAAS,IAAT,CAAc,MAAM,KAApB;AACD;AACD,sBAAU,CAAV,EAAa,MAAb,CAAoB,IAApB,CAAyB,QAAzB;AACA;AACD;AACF;AACF;;AAED,aAAO,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAP;AACA,UAAI,WAAW,eAAe,CAAf,CAAf,EAAkC;AAChC,aAAK,IAAL,CAAU,OAAV;AACD;AACD,UAAI,WAAW,eAAe,CAAf,CAAf,EAAkC;AAChC,aAAK,IAAL,CAAU,OAAV;AACD;AACD,WAAK,SAAL,GAAiB,EAAC,MAAM,IAAP,EAAa,QAAQ,SAArB,EAAjB;;AAEA,WAAK,MAAL,GAAc,KAAK,gBAAL,CAAsB,KAAK,SAA3B,CAAd;;AAEA,WAAK,mBAAL,CAAyB,KAAK,MAA9B;AACD;;AAED;;;;;;;;;;;;qCASiB,S,EAAW;AAC1B,UAAI,IAAJ;AAAA,UACE,CADF;AAAA,UACK,CADL;AAAA,UACQ,KADR;AAAA,UACe,MADf;AAAA,UACuB,WADvB;AAAA,UAEE,GAFF;AAAA,UAGE,QAHF;AAAA,UAGY,EAHZ;AAAA,UAIE,OAJF;AAAA,UAIW,MAJX;AAAA,UAImB,EAJnB;AAAA,UAKE,KALF;AAAA,UAME,OAAO,IANT;;AAQA,aAAO,UAAU,IAAjB;AACA,kBAAY,UAAU,MAAtB;;AAEA,eAAS,EAAT;;AAEA,WAAK,IAAI,CAAT,EAAY,IAAI,UAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,sBAAc,UAAU,CAAV,CAAd;;AAEA,eAAO,IAAP,CAAY,EAAC,KAAK,YAAY,GAAlB,EAAuB,QAAQ,EAA/B,EAAZ;;AAEA,aAAK,IAAI,CAAT,EAAY,IAAI,YAAY,MAAZ,CAAmB,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,gBAAM,YAAY,GAAlB;AACA,eAAK,YAAY,MAAZ,CAAmB,CAAnB,CAAL;AACA,kBAAQ,EAAR;;AAEA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,kBAAM,KAAK,CAAL,CAAN,IAAiB,GAAG,CAAH,CAAjB;AACD;;AAED,gBAAM,IAAN,GAAa,MAAM,KAAN,GAAc,MAAM,MAAjC;;AAEA,qBAAW,KAAK,WAAL,CAAiB,KAAK,MAAL,CAAY,KAA7B,EAAoC,GAApC,CAAX;;AAEA,oBAAU,KAAK,aAAL,CAAmB,QAAnB,EAA6B,MAAM,KAAnC,CAAV;AACA,mBAAS,KAAK,aAAL,CAAmB,QAAnB,EAA6B,MAAM,IAAnC,CAAT;;AAEA,eAAK,KAAK,KAAL,CAAW,CAAC,UAAU,MAAX,IAAqB,CAAhC,IAAqC,EAA1C;;AAEA,kBAAQ,KAAK,MAAL,CAAY,gBAApB;AACA,cAAI,KAAK,MAAL,CAAY,gBAAhB,EAAkC;AAChC,kBAAM,UAAN,GAAmB,GAAG,CAAH,CAAnB;AACA,oBAAQ,KAAK,MAAL,CAAY,gBAAZ,CAA6B,MAAM,UAAnC,EAA+C,KAAvD;AACD,WAHD,MAGO;AACL,kBAAM,UAAN,GAAmB,CAAnB;AACD;;AAED,cAAI,WAAW,KAAf,EAAsB;AACpB,oBAAQ,MAAM,KAAd;AACD;;AAED,gBAAM,GAAN,GAAY,GAAZ;AACA,gBAAM,QAAN,GAAiB,CAAjB;AACA,gBAAM,EAAN,GAAW,EAAX;AACA,gBAAM,OAAN,GAAgB,UAAU,EAA1B;AACA,gBAAM,MAAN,GAAe,SAAS,EAAxB;AACA,gBAAM,KAAN,GAAc,KAAd;;AAEA,iBAAO,CAAP,EAAU,MAAV,CAAiB,IAAjB,CAAsB,KAAtB;AACD;AACF;;AAED,aAAO,MAAP;AACD;;AAED;;;;;;qCAGiB,M,EAAQ;AACvB,UAAI,KAAK,IAAI,IAAJ,GAAW,OAAX,EAAT;;AAEA,UAAI,CAAJ;AAAA,UAAO,CAAP;AAAA,UAAU,GAAV;AAAA,UACE,QADF;AAAA,UACY,SADZ;AAAA,UACuB,SADvB;AAAA,UACkC,EADlC;AAAA,UACsC,EADtC;AAAA,UAEE,SAFF;AAAA,UAEa,OAFb;AAAA,UAEsB,QAFtB;AAAA,UAEgC,KAFhC;AAAA,UAGE,IAHF;AAAA,UAGQ,GAHR;AAAA,UAGa,KAHb;AAAA,UAGoB,SAHpB;AAAA,UAG+B,QAH/B;AAAA,UAIE,eAJF;AAAA,UAImB,KAJnB;AAAA,UAI0B,QAJ1B;AAAA,UAKE,OALF;AAAA,UAKW,SALX;AAAA,UAKsB,QALtB;AAAA,UAKgC,MALhC;AAAA,UAME,WAAW,KANb;AAAA,UAOE,gBAPF;AAAA,UAQE,OAAO,IART;;AAUA,aAAO,EAAP;;AAEA,iBAAW,KAAK,MAAL,CAAY,QAAvB;AACA,kBAAY,KAAK,WAAL,CAAiB,KAAK,MAAL,CAAY,KAA7B,CAAZ;AACA,cAAQ,KAAK,MAAL,CAAY,gBAApB;;AAEA,UAAI,sBAAsB,KAAK,MAA/B,EAAuC;AACrC,2BAAmB,KAAK,MAAL,CAAY,gBAA/B;AACD,OAFD,MAEO;AACL,2BAAmB,UAAnB;AACD;;AAED,UAAI,OAAO,KAAK,eAAZ,KAAgC,WAApC,EAAiD;AAC/C,aAAK,eAAL,GAAuB,EAAvB;AACA,mBAAW,IAAX;AACD;;AAED,WAAK,GAAL,IAAY,SAAZ,EAAuB;AACrB,mBAAW,UAAU,GAAV,CAAX;AACA,mBAAW,SAAS,QAApB;AACA,mBAAW,SAAS,KAAT,CAAe,SAAS,KAAT,CAAe,MAAf,GAAwB,CAAvC,CAAX;AACA,oBAAY,SAAS,EAAT,CAAY,IAAxB;AACA,kBAAU,KAAK,KAAL,CAAW,YAAY,QAAvB,CAAV;AACA,cAAM,EAAC,KAAK,GAAN,EAAW,QAAQ,EAAnB,EAAN;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,OAAhB,EAAyB,GAAzB,EAA8B;AAC5B,eAAK,IAAI,QAAJ,GAAe,KAAK,IAAzB;AACA,eAAK,KAAK,aAAL,CAAmB,QAAnB,EAA6B,KAAK,KAAK,IAAvC,CAAL;AACA,cAAI,MAAJ,CAAW,IAAX,CAAgB;AACd,gBAAI,EADU;AAEd,gBAAI,KAAK,KAAK,IAFA;AAGd,mBAAO,CAHO;AAId,sBAAU,QAJI;AAKd,qBAAS,GALK;AAMd,mBAAO,KANO;AAOd,oBAAQ;AAPM,WAAhB;AASD;AACD,aAAK,IAAL,CAAU,GAAV;AACD;;AAED,WAAK,GAAL,IAAY,MAAZ,EAAoB;AAClB,oBAAY,OAAO,GAAP,EAAY,MAAxB;AACA,kBAAU,OAAO,GAAP,EAAY,GAAtB;AACA,mBAAW,UAAU,OAAV,CAAX;AACA,mBAAW,SAAS,QAAT,GAAoB,CAA/B;AACA,oBAAY,KAAK,QAAL,EAAe,MAA3B;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,UAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,kBAAQ,UAAU,CAAV,CAAR;AACA,eAAK,MAAM,EAAN,GAAW,KAAK,IAArB;AACA,eAAK,IAAI,CAAT,EAAY,IAAI,UAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,oBAAQ,UAAU,CAAV,EAAa,EAArB;AACA,wBAAY,QAAQ,QAApB;AACA,gBAAI,MAAM,UAAU,MAAV,GAAmB,CAA7B,EAAgC;AAC9B,2BAAa,QAAb;AACD;AACD,gBAAI,MAAM,KAAN,IAAe,KAAK,SAAxB,EAAmC;AACjC,mBAAK,QAAL,EAAe,MAAf,CAAsB,CAAtB,EAAyB,KAAzB,IAAkC,CAAlC;AACA,mBAAK,QAAL,EAAe,MAAf,CAAsB,CAAtB,EAAyB,MAAzB,CAAgC,IAAhC,CAAqC,KAArC;AACA;AACD;AACF;AACF;AACF;;AAED,UAAI,aAAa,IAAb,IAAqB,qBAAqB,UAA9C,EAA0D;AACxD,0BAAkB,CAAlB;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,mBAAS,KAAK,CAAL,EAAQ,MAAjB;AACA,eAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,uBAAW,OAAO,CAAP,EAAU,KAArB;AACA,gBAAI,WAAW,eAAf,EAAgC;AAC9B,gCAAkB,QAAlB;AACD;AACF;AACF;AACD,aAAK,eAAL,CAAqB,GAArB,IAA4B,eAA5B;AACD;;AAEH;AACA;AACE,WAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,iBAAS,KAAK,CAAL,EAAQ,MAAjB;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,qBAAW,OAAO,CAAP,EAAU,KAArB;AACA,mBAAU,WAAW,KAAK,eAAL,CAAqB,GAArB,CAAZ,GAAyC,KAAK,MAAL,CAAY,SAA9D;AACF;AACE,eAAK,CAAL,EAAQ,MAAR,CAAe,CAAf,EAAkB,MAAlB,GAA2B,MAA3B;AACD;AACF;;AAED,UAAI,KAAK,IAAI,IAAJ,GAAW,OAAX,EAAT;AACA,UAAI,KAAK,KAAT,EAAgB;AACd,gBAAQ,GAAR,CAAY,sCAAsC,KAAK,EAA3C,IAAiD,KAA7D;AACD;;AAED,WAAK,IAAL,GAAY,IAAZ;;AAEA,aAAO,IAAP;AACD;;AAEH;;;;;;;;+BAKa,M,EAAQ;AACjB,UAAI,YAAJ,EAAkB,IAAlB,EAAwB,QAAxB,EAAkC,CAAlC,EAAqC,GAArC,EAA0C,KAA1C,EAAiD,QAAjD;;AAEA,qBAAe,EAAf;AACA,aAAO,EAAP;AACA,iBAAW,KAAK,gBAAhB;;AAEA,WAAK,IAAI,CAAT,EAAY,IAAI,SAAS,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,cAAM,SAAS,CAAT,EAAY,IAAlB;AACA,aAAK,IAAL,CAAU,GAAV;AACA,qBAAa,IAAb,CAAkB,EAAC,KAAK,GAAN,EAAW,QAAQ,EAAnB,EAAlB;AACD;;AAED,WAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,gBAAQ,OAAO,CAAP,CAAR;AACA,mBAAW,KAAK,OAAL,CAAa,MAAM,GAAnB,CAAX;AACA,YAAI,aAAa,CAAC,CAAlB,EAAqB;AACnB,uBAAa,QAAb,IAAyB,KAAzB;AACD;AACF;;AAED,aAAO,YAAP;AACD;;AAEH;;;;;;;;;wCAMsB,M,EAAQ;AAC1B,UAAI,SAAJ;AAAA,UAAe,QAAf;AAAA,UAAyB,MAAzB;AAAA,UACE,WADF;AAAA,UACe,QADf;AAAA,UACyB,MADzB;AAAA,UACiC,CADjC;AAAA,UACoC,QADpC;AAAA,UAEE,EAFF;AAAA,UAEM,EAFN;AAAA,UAEU,EAFV;AAAA,UAEc,EAFd;AAAA,UAGE,YAHF;AAAA,UAIE,OAAO,IAJT;;AAMA,kBAAY,KAAK,MAAL,CAAY,SAAxB;AACA,iBAAW,KAAK,MAAL,CAAY,QAAvB;;AAEA,eAAS,QAAT;AACA,UAAI,KAAK,MAAL,CAAY,iBAAhB,EAAmC;AACjC,iBAAS,KAAK,MAAL,CAAY,iBAArB;AACD;;AAED,UAAI,WAAW,WAAf,EAA4B;AAC1B,iBAAS,KAAK,gBAAL,CAAsB,MAAtB,CAAT;AACD;;AAED,oBAAc,KAAK,MAAL,CAAY,gBAA1B;;AAEA,iBACA,QAAQ,WAAR,GAAsB,GAAtB,GACC,IAAI,WADL,GAEA,KAFA,GAES,IAAI,WAFb,GAE4B,MAH5B;;AAKF;AACA;AACA;AACA;AACE,UAAI,WAAJ;AACA,eACA,QAAQ,CAAR,GAAY,IAAZ,GAAmB,CAAnB,GACA,IADA,GACO,CADP,GACW,GADX,GACiB,CADjB,GACqB,SADrB,GACkC,IAAI,CADtC,GAC2C,IAD3C,GAEA,IAFA,GAEO,CAFP,GAEW,GAFX,GAEiB,CAFjB,GAEqB,UAFrB,GAEmC,IAAI,CAFvC,GAE4C,IAH5C;;AAKA,qBAAe,KAAK,UAAL,CAAgB,MAAhB,CAAf;;AAEA,iBAAW,GAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,cAA7B,EACV,IADU,CACL,YADK,EAER,SAFQ,CAEE,YAFF,EAGR,IAHQ,CAGH,UAAS,CAAT,EAAY;AAChB,eAAO,EAAE,MAAT;AACD,OALQ,EAMR,KANQ,EAAX;;AAQA,UAAI,WAAW,QAAf,EAAyB;AACvB,iBACC,MADD,CACQ,GADR,EAEC,IAFD,CAEM,IAFN,EAEY,UAAS,CAAT,EAAY;AACtB,iBAAO,EAAE,EAAT;AACD,SAJD,EAKC,IALD,CAKM,OALN,EAKe,OALf,EAMC,IAND,CAMM,WANN,EAMmB,UAAS,CAAT,EAAY;AAC7B,cAAI,IAAI,KAAK,MAAL,CAAY,QAAZ,GAAwB,EAAE,UAAF,GAAe,WAAf,GAA6B,CAA7D;AACA,iBAAO,eAAe,EAAE,EAAjB,GAAsB,GAAtB,GAA4B,CAA5B,GAAgC,GAAvC;AACD,SATD,EAUC,MAVD,CAUQ,MAVR,EAWC,IAXD,CAWM,GAXN,EAWW,UAAS,CAAT,EAAY;AACrB,cAAI,CAAC,EAAE,KAAH,IAAY,EAAE,KAAF,KAAY,UAA5B,EAAwC;AACtC,mBAAO,SAAS,QAAhB;AACD,WAFD,MAEO,IAAI,EAAE,KAAF,KAAY,QAAhB,EAA0B;AAC/B,mBAAO,MAAP;AACD;AACF,SAjBD,EAkBC,IAlBD,CAkBM,MAlBN,EAkBc,UAAS,CAAT,EAAY;AACxB,iBAAO,EAAE,KAAT;AACD,SApBD;AAqBD,OAtBD,MAsBO,IAAI,WAAW,SAAf,EAA0B;AAC/B;;AAEA,iBAAS,MAAT,CAAgB,SAAhB,EACG,IADH,CACQ,IADR,EACc,UAAS,CAAT,EAAY;AACtB,iBAAO,EAAE,EAAT;AACD,SAHH,EAIG,IAJH,CAIQ,OAJR,EAIiB,OAJjB,EAKG,IALH,CAKQ,QALR,EAKkB,UAAS,CAAT,EAAY;AAC1B,cAAI,EAAE,MAAF,GAAW,EAAE,OAAb,GAAuB,CAA3B,EAA8B;AAC5B,iBAAK,EAAE,OAAP;AACA,iBAAK,EAAE,MAAP;AACD,WAHD,MAGO;AACL,iBAAK,EAAE,EAAF,GAAO,GAAZ;AACA,iBAAK,EAAE,EAAF,GAAO,GAAZ;AACD;AACD,eAAK,QAAL;AACA,eAAK,CAAL;;AAEA,iBACE,KAAK,GAAL,GAAW,EAAX,GAAgB,GAAhB,GACA,EADA,GACK,GADL,GACW,EADX,GACgB,GADhB,GAEA,EAFA,GAEK,GAFL,GAEW,EAFX,GAEgB,GAFhB,GAGA,EAHA,GAGK,GAHL,GAGW,EAJb;AAMD,SAtBH,EAuBG,IAvBH,CAuBQ,MAvBR,EAuBgB,UAAS,CAAT,EAAY;AACxB,iBAAO,EAAE,KAAT;AACD,SAzBH;AA0BD,OA7BM,MA6BA,IAAI,WAAW,WAAf,EAA4B;AACjC,iBAAS,MAAT,CAAgB,SAAhB;AACE;AADF,SAEG,IAFH,CAEQ,OAFR,EAEiB,OAFjB,EAGG,IAHH,CAGQ,QAHR,EAGkB,UAAS,CAAT,EAAY;AAC1B,eAAK,EAAE,EAAF,GAAO,KAAK,IAAjB;AACA,eAAK,EAAE,EAAF,GAAO,KAAK,MAAL,CAAY,QAAnB,GAA8B,KAAK,IAAxC;AACA,eAAK,QAAL;AACA,eAAK,WAAW,EAAE,MAAlB;;AAEA,cAAI,eAAe,KAAK,gBAAL,CAAsB,EAAE,QAAF,GAAa,CAAnC,EAAsC,KAAzD;;AAEA,cAAI,KAAK,YAAT,EAAuB;AACrB,iBAAK,YAAL;AACD;;AAED,iBACE,KAAK,GAAL,GAAW,EAAX,GAAgB,GAAhB,GACA,EADA,GACK,GADL,GACW,EADX,GACgB,GADhB,GAEA,EAFA,GAEK,GAFL,GAEW,EAFX,GAEgB,GAFhB,GAGA,EAHA,GAGK,GAHL,GAGW,EAJb;AAMD,SArBH,EAsBG,IAtBH,CAsBQ,MAtBR,EAsBgB,UAAS,CAAT,EAAY;AACxB,iBAAO,EAAE,KAAT;AACD,SAxBH;AAyBD;;AAED,UAAI,KAAK,oBAAT,EAA+B;AAC7B,aAAK,oBAAL;AACD;AACF;;;kCAEa;AACZ,WAAK,KAAK,mBAAV;AACD;;;gCAEW,I,EAAM,E,EAAI;AACpB,UAAI,OAAO,IAAX;AAAA,UACE,QAAQ,KAAK,MAAL,CAAY,QAAZ,GAAuB,GADjC;AAAA,UAEE,SAAS,KAAK,MAAL,CAAY,SAFvB;AAAA,UAGE,MAAM,KAAK,gBAAL,CAAsB,CAAtB,CAHR;AAAA,UAIE,cAAc,IAAI,KAAJ,CAAU,IAAI,KAAJ,CAAU,MAAV,GAAmB,CAA7B,EAAgC,EAAhC,CAAmC,IAJnD;AAAA,UAKE,EALF;AAAA,UAKM,EALN;AAAA,UAME,UAAU,KAAK,OAAL,CAAa,SAAb,GAAyB,IANrC;AAAA,UAOE,SAAS,GAAG,WAAH,GACJ,MADI,CACG,CAAC,CAAD,EAAI,GAAG,GAAH,CAAO,IAAI,KAAX,EAAkB,UAAS,IAAT,EAAe;AAC3C,eAAO,KAAK,EAAL,CAAQ,IAAf;AACD,OAFW,CAAJ,CADH,EAGA,KAHA,CAGM,CAAC,OAAD,EAAU,GAAG,GAAH,CAAO,IAAI,KAAX,EAAkB,UAAS,IAAT,EAAe;AACpD,eAAO,KAAK,EAAL,CAAQ,IAAf;AACD,OAFoB,IAEhB,OAFM,CAHN,CAPX;;AAcA,UAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC/B,eAAO,KAAK,KAAL,CAAW,cAAc,EAAzB,CAAP;AACD;;AAED,UAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAK,KAAK,IAAL,CAAU,OAAO,CAAjB,CAAL;AACD;;AAED,WAAK,KAAK,aAAL,CAAmB,GAAnB,EAAwB,IAAxB,CAAL;AACA,WAAK,KAAK,aAAL,CAAmB,GAAnB,EAAwB,EAAxB,CAAL;;AAEA,WAAK,cAAL,GAAsB,EAAC,MAAM,IAAP,EAAa,IAAI,EAAjB,EAAqB,QAAS,KAAK,IAAnC,EAAtB;;AAEA,WAAK,KAAL,GAAa,GAAG,MAAH,GACZ,MADY,CACL,CAAC,CAAC,OAAD,EAAU,CAAV,CAAD,EAAe,CAAC,SAAS,OAAV,EAAmB,KAAnB,CAAf,CADK,EAEZ,EAFY,CAET,OAFS,EAEA,WAFA,CAAb;;AAIA,UAAI,aAAa,KAAK,OAAL,CAAa,0BAAb,CAAwC,CAAxC,CAAjB;AACA,UAAI,UAAU,aAAa,CAAC,KAAK,MAAL,CAAY,QAAZ,GAAuB,KAAxB,IAAiC,CAA5D;AACA,SAAG,MAAH,CAAU,KAAK,QAAf,EAAyB,MAAzB,CAAgC,GAAhC,EACC,IADD,CACM,OADN,EACe,OADf,EAEC,IAFD,CAEM,WAFN,EAEmB,kBAAkB,OAAlB,GAA4B,GAF/C,EAGC,IAHD,CAGM,KAAK,KAHX,EAIC,IAJD,CAIM,KAAK,KAAL,CAAW,IAJjB,EAIuB,CAAC,EAAD,EAAK,EAAL,CAJvB;;AAMA,eAAS,WAAT,GAAuB;AACrB,YAAI,SAAS,GAAG,KAAH,CAAS,SAAT,CAAmB,GAAnB,CAAuB,OAAO,MAA9B,CAAb;AAAA,YACE,OAAO,KAAK,KAAL,CAAW,OAAO,CAAP,CAAX,CADT;AAAA,YAEE,KAAK,KAAK,IAAL,CAAU,OAAO,CAAP,CAAV,CAFP;;AAIA,aAAK,cAAL,GAAsB,EAAC,MAAM,IAAP,EAAa,IAAI,EAAjB,EAAqB,QAAS,KAAK,IAAnC,EAAtB;;AAEA,YAAI,KAAK,WAAT,EAAsB;AACpB,eAAK,mBAAL;AACD;AACF;AACF;;AAEH;;;;;;;;6BAKW;AACP,WAAK,KAAK,cAAV;AACD;;;mCAEc;AACb,WAAK,KAAK,oBAAV;AACD;;AAEH;;;;;;4CAG0B;AACtB,UAAI,MAAJ;AAAA,UACE,KADF;AAAA,UACS,MADT;AAAA,UACiB,MADjB;AAAA,UACyB,MADzB;AAAA,UAEE,GAFF;AAAA,UAGE,YAAY,EAHd;;AAKA,eAAS,CACT,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CADS,EAET,CAAC,QAAD,EAAW,SAAX,EAAsB,MAAtB,EAA8B,MAA9B,CAFS,EAGT,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,CAHS,EAIT,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,CAJS,EAKT,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,CALS,EAMT,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,CANS,EAOT,CAAC,SAAD,EAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CAPS,EAQT,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CARS,EAST,CAAC,SAAD,EAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CATS,CAAT;;AAYA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,gBAAQ,OAAO,CAAP,EAAU,CAAV,CAAR;AACA,iBAAS,OAAO,CAAP,EAAU,CAAV,CAAT;AACA,iBAAS,OAAO,CAAP,EAAU,CAAV,CAAT;AACA,iBAAS,OAAO,CAAP,EAAU,CAAV,CAAT;AACA,qBACA,yBAAyB,KAAzB,GAAiC,sCADjC;AAEA,YAAI,UAAU,MAAd,EAAsB;AACpB,uBACA,oCAAoC,MAApC,GAA6C,MAA7C,GACA,iCADA,GACoC,MADpC,GAC6C,MAD7C,GAEA,kCAFA,GAEqC,MAFrC,GAE8C,MAH9C;AAID,SALD,MAKO;AACL,uBACA,mCAAmC,MAAnC,GAA4C,MAA5C,GACA,iCADA,GACoC,MADpC,GAC6C,MAD7C,GAEA,iCAFA,GAEoC,MAFpC,GAE6C,MAH7C;AAID;AACD,qBACA,mBADA;AAED;;AAED,mBACA,4EACE,oCADF,GAEE,yDAFF,GAGG,2DAHH,GAII,uBAJJ,GAKA,YALA,GAMA,wEANA,GAOE,qCAPF,GAQE,yDARF,GASG,2DATH,GAUM,uBAVN,GAWA,YAZA;;AAcA,kBAAY,WAAW,SAAX,GAAuB,SAAnC;AACA,YAAM,YACN,6BADM,GAEN,iCAFM,GAGN,iCAHM,GAIN,iCAJM,GAKN,iCALM,GAMN,iCANM,GAON,mCAPM,GAQN,gCARM,GASN,6BATM,GAUN,+BAVM,GAWN,6BAXM,GAYN,mCAZM,GAaN,sCAbM,GAcR,UAdE;AAeA,kBAAY,MAAM,SAAlB;;AAEF;;AAEE,aAAO,SAAP;AACD;;AAEH;;;;;;uCAGqB,Q,EAAU;AAC3B,UAAI,QAAJ;AAAA,UAAc,cAAd;AAAA,UAA8B,KAA9B;AAAA,UACE,OAAO,IADT;;AAGA,iBAAW,KAAK,MAAL,CAAY,QAAvB;;AAEA,uBAAiB,KAAK,OAAL,GAAe,oBAAf,GAAsC,QAAvD;;AAEA,SAAG,IAAH,CAAQ,cAAR,EAAwB,UAAS,IAAT,EAAe;AACrC,gBAAQ,KAAK,aAAL,CAAmB,MAAnB,CAA0B,CAA1B,CAAR;AACA,eAAO,SAAS,KAAT,CAAP;AACD,OAHD;AAID;;AAEH;;;;;;;;8BAKY,Q,EAAU;AAClB,UAAI,OAAO,IAAX;AAAA,UACE,KADF;AAAA,UACS,MADT;AAAA,UAEE,GAFF;AAAA,UAEO,IAFP;AAAA,UAEa,CAFb;AAAA,UAGE,SAHF;AAAA,UAGa,OAHb;AAAA,UAIE,QAJF;AAAA,UAIY,WAJZ;AAAA,UAKE,aALF;AAAA,UAKiB,OALjB;;AAOA,kBAAY,WAAW,KAAK,MAA5B;;AAEA,WAAK,MAAL,CAAY,aAAZ,GACC,cAAc,KAAK,MAAnB,IAA6B,KAAK,MAAL,CAAY,QAAZ,YAAgC,KAA9D,IACC,aAAa,KAAK,MAAL,CAAY,KAAZ,YAA6B,KAF3C;;AAKA,sBAAgB,KAAK,MAAL,CAAY,aAA5B;;AAEA,UAAI,cAAc,KAAK,MAAvB,EAA+B;AAC/B;AACE,YAAI,aAAJ,EAAmB;AACjB,iBAAO,KAAK,MAAL,CAAY,QAAnB;AACD,SAFD,MAEO;AACL,iBAAO,CAAC,KAAK,MAAL,CAAY,QAAb,CAAP;AACD;;AAED,iBAAS,EAAT;AACA,kBAAU,EAAV;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAClC;AACE,gBAAM,KAAK,CAAL,CAAN;AACA,eAAK,KAAL,IAAc,KAAK,SAAnB,EAA8B;AAC5B,gBAAI,KAAK,SAAL,CAAe,KAAf,EAAsB,UAAtB,CAAiC,WAAjC,OAAmD,GAAvD,EAA4D;AAC1D,qBAAO,IAAP,CAAY,KAAZ;AACA,kBAAI,aAAJ,EAAmB;AACnB;AACA;AACE,wBAAQ,KAAR,IAAiB,KAAK,MAAL,CAAY,WAAZ,CAAwB,GAAxB,CAAjB;AACD;AACF;AACF;AACF;;AAED,YAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,oBAAU,wBAAY,UAAS,OAAT,EAAkB;AACtC,iBAAK,kBAAL,CAAwB,OAAxB;AACD,WAFS,CAAV;;AAIA,kBAAQ,IAAR,CAAa,UAAS,IAAT,EAAe;AAC1B,gBAAI,WAAW,KAAK,MAAL,CAAY,QAA3B;AAAA,gBACE,UAAU,KAAK,MAAL,CAAY,OADxB;AAAA,gBAEE,SAAS,SAAS,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CAFX;;AAIA,oBAAQ,IAAR;AACA,mBAAO,IAAP,CAAY,KAAZ;;AAEA,iBAAK,MAAL,CAAY,MAAZ,GAAqB,MAArB;AACA,iBAAK,SAAL,CAAe,KAAf,IAAwB;AACtB,0BAAY,EADU;AAEtB,8BAAgB,KAAK,MAAL,CAAY,QAFN;AAGtB,kCAAoB;AAHE,aAAxB;;AAMA,gBAAI,oBAAoB,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAAxB;AACA,gBACA,kBAAkB,OAAlB,CAA0B,KAA1B,MAAqC,CAAC,CAAtC,IACA,KAAK,MAAL,CAAY,eAAZ,KAAgC,KAFhC,EAGA;AACE,wBAAU,WAAV;AACD;AACD,gBAAI,iBAAiB,UAAU,MAAV,GAAmB,KAAxC;;AAEA,gBAAI,UAAU,wBAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAClD,iBAAG,OAAH,CAAW,cAAX,EAA2B,GAA3B,CAA+B,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AACnD,oBAAI,KAAJ,EAAW;AACT,yBAAO,MAAM,KAAN,CAAP;AACD;AACD,wBAAQ,IAAR;AACD,eALD;AAMD,aAPa,CAAd;;AASA,mBAAO,QACN,IADM,CAEL,UAAS,IAAT,EAAe;AACb;AACA;AACA;;AAEA,kBAAI,iBAAiB,EAArB;AAAA,kBACE,cAAc,EADhB;AAAA,kBAEE,WAAW,EAFb;AAAA,kBAGE,GAHF;;AAKA,mBAAK,KAAK,QAAV;;AAEA,6BAAe,IAAf,CAAoB,EAApB;;AAEA,mBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC,sBAAM,SAAS,CAAT,EAAY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAN;AACA,oBAAI,OAAO,QAAX,EAAqB;AACnB;AACD,iBAFD,MAEO;AACL,8BAAY,IAAZ,CAAiB,EAAC,MAAM,GAAP,EAAY,MAAM,SAAlB,EAAjB;AACA,2BAAS,GAAT,IAAgB,CAAhB;AACD;AACF;AACD,4BAAc,YAAY,IAAZ,CAAiB,KAAK,eAAtB,CAAd;AACA,6BAAe,IAAf,CAAoB,WAApB;AACA,mBAAK,gBAAL,GAAwB,MAAxB;AACA,qBAAO,cAAP;AACD,aA7BI,EA8BL,YAAW;AACT,qBAAO,wBAAY,UAAS,OAAT,EAAkB;AACnC,qBAAK,gBAAL,GAAwB,IAAxB;AACA,qBAAK,mCAAL,CAAyC,OAAzC;AACD,eAHM,CAAP;AAID,aAnCI,CAAP;AAqCD,WAtED,EAuED,IAvEC,CAuEI,UAAS,WAAT,EAAsB;AAC1B,uBAAW,YAAY,CAAZ,CAAX;AACA,0BAAc,YAAY,CAAZ,CAAd;;AAEA,iBAAK,MAAL,CAAY,WAAZ,GAA0B,WAA1B;AACA,iBAAK,SAAL,CAAe,KAAf,EAAsB,UAAtB,GAAmC;AACjC,uBAAS;AADwB,aAAnC;;AAIA,qBAAS,MAAT;AACD,WAjFC;AAkFD,SAvFD,MAuFO;AACL,eAAK,MAAL,CAAY,MAAZ,GAAqB,MAArB;AACA,cAAI,aAAJ,EAAmB;AACjB,iBAAK,MAAL,CAAY,WAAZ,GAA0B,OAA1B;AACD;;AAED,mBAAS,MAAT;AACD;AACF,OAxHD,MAwHO;AACL,YAAI,aAAJ,EAAmB;AACjB,eAAK,gBAAL,GAAwB,IAAxB;AACA,cAAI,SAAJ,EAAe;AACb,qBAAS,KAAK,MAAL,CAAY,KAArB;AACD;AACF,SALD,MAKO;AACL,cAAI,SAAJ,EAAe;AACb,qBAAS,CAAC,KAAK,MAAL,CAAY,KAAb,CAAT;AACD;AACD,eAAK,MAAL,CAAY,MAAZ,GAAqB,MAArB;AACD;;AAED,iBAAS,MAAT;AACD;AACF;;;oCAEe,C,EAAG,C,EAAG;AACpB,UAAI,aAAa,EAAE,IAAF,KAAW,SAA5B;AAAA,UACE,aAAa,EAAE,IAAF,KAAW,SAD1B;AAAA,UAEE,QAAQ,EAAE,IAAF,KAAW,aAFrB;AAAA,UAGE,QAAQ,EAAE,IAAF,KAAW,aAHrB;AAAA,UAIE,QAAQ,EAAE,IAAF,KAAW,eAJrB;AAAA,UAKE,QAAQ,EAAE,IAAF,KAAW,eALrB;AAMA;AACA;;AAEA,UAAI,cAAc,UAAlB,EAA8B;AAC5B,eAAO,YAAY,EAAE,IAAd,EAAoB,EAAE,IAAtB,CAAP;AACD,OAFD,MAEO,IAAI,CAAC,UAAD,IAAe,UAAnB,EAA+B;AACpC,eAAO,CAAP;AACD,OAFM,MAEA,IAAI,SAAS,KAAb,EAAoB;AACzB,eAAO,CAAP;AACD,OAFM,MAEA,IAAI,SAAS,KAAb,EAAoB;AACzB,eAAO,CAAC,CAAR;AACD,OAFM,MAEA,IAAI,CAAC,KAAD,IAAU,CAAC,KAAX,KAAqB,SAAS,KAA9B,CAAJ,EAA0C;AAC/C,eAAO,CAAC,CAAR;AACD;AACF;;AAEH;;;;;;;wDAIsC,Q,EAAU;AAC5C,UAAI,cAAJ;AAAA,UAAoB;AAClB,cADF;AAAA,UACY,iBADZ;AAAA,UAC+B,WAD/B;AAAA,UAC4C,SAD5C;AAAA,UAEE,MAFF;AAAA,UAEU,UAFV;AAAA,UAGE,KAHF;AAAA,UAGS,WAHT;AAAA,UAIE,KAJF;AAAA,UAIS,SAJT;AAAA,UAKE,OALF;AAAA,UAKW,MALX;AAAA,UAKmB,OALnB;AAAA,UAK4B,OAL5B;AAAA,UAKqC,SALrC;AAAA,UAKgD,UALhD;AAAA,UAK4D,IAL5D;AAAA,UAME,OAAO,IANT;;AAQA,iBAAW,KAAK,MAAL,CAAY,QAAvB;;AAEA,uBAAiB,EAAjB;AACA,oBAAc,EAAd;;AAEA,kBACE,KAAK,OAAL,GACA,cADA,GAEA,WAFA,GAEc,QAFd,GAEyB,eAFzB,GAGE,0CAHF,GAIE,4CAJF,GAKE,uCANJ;;AAQA,UAAI,UAAU,GAAG,OAAH,CAAW,IAAX,CAAgB,SAAhB,CAAd;;AAEA,cACG,IADH,CACQ,UAAS,IAAT,EAAe;AACnB;AACA,iBAAS,KAAK,aAAL,CAAmB,MAAnB,CAA0B,CAA1B,CAAT;AACA,qBAAa,KAAK,QAAL,GAAgB,kBAAhB,GAAqC,MAAlD;;AAEA,eAAO,GAAG,OAAH,CAAW,IAAX,CAAgB,UAAhB,CAAP;AACD,OAPH,EAQG,IARH,CAQQ,UAAS,IAAT,EAAe;AACnB;AACA,gBAAQ,KAAK,MAAL,CAAY,MAAZ,EAAoB,KAA5B;AACA,4BAAoB,KAAK,MAAL,CAAY,MAAZ,EAAoB,iBAAxC;;AAEA,uBAAe,IAAf,CAAoB,iBAApB;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAI,KAAK,uDAAuD,KAAhE;AACA,sBAAc,KAAK,KAAL,GAAa,EAA3B;;AAEA,eAAO,GAAG,OAAH,CAAW,IAAX,CAAgB,WAAhB,CAAP;AACD,OAxBH,EAyBG,IAzBH,CAyBQ,UAAS,IAAT,EAAe;AACnB,gBAAQ,KAAK,QAAL,CAAc,CAAd,EAAiB,UAAjB,CAA4B,CAA5B,EAA+B,KAA/B,CAAqC,IAArC,CAA0C,GAA1C,CAAR;AACA,oBAAY,KAAK,QAAL,GAAgB,oBAAhB,GAAuC,KAAnD;;AAEA,eAAO,GAAG,OAAH,CAAW,IAAX,CAAgB,SAAhB,CAAP;AACD,OA9BH,EA+BG,IA/BH,CA+BQ,UAAS,IAAT,EAAe;AACnB,kBAAU,KAAK,MAAf;;AAEA,aAAK,IAAI,CAAT,IAAc,OAAd,EAAuB;AACrB,mBAAS,QAAQ,CAAR,CAAT;;AAEA;AACA,cAAI,MAAM,MAAV,EAAkB;AAChB;AACD;;AAED,cAAI,OAAO,MAAP,KAAkB,eAAtB,EAAuC;AACrC,gBAAI,KAAK,MAAL,CAAY,yBAAhB,EAA2C;AACzC,qBAAO,OAAO,MAAd;AACA,wBAAU,OAAO,OAAP,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAkC,SAAlC,CAAV;AACA,kBAAI,YAAY,CAAC,CAAjB,EAAoB;AAClB,0BAAU,IAAV;AACD,eAFD,MAEO;AACL;AACA;AACA;AACA;AACA;AACA,0BAAU,OAAO,OAAP,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAV;AACD;AACF,aAbD,MAaO;AACL;AACD;AACF,WAjBD,MAiBO,IACL,OAAO,MAAP,KAAkB,aAAlB,IACA,OAAO,MAAP,KAAkB,SAFb,EAGL;AACA,mBAAO,aAAP;AACA;AACA,gBAAI,KAAK,MAAL,CAAY,yBAAhB,EAA2C;AACzC,wBAAU,IAAV;AACD,aAFD,MAEO;AACL;AACD;AACF,WAXM,MAWA;AACL,mBAAO,SAAP;AACA,sBAAU,OAAO,OAAP,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAkC,YAAlC,CAAV;;AAEA,sBAAU,OAAO,OAAP,CAAe,KAAf,CAAqB,GAArB,EAA0B,OAA1B,CAAV;;AAEA,gBACE,OAAO,OAAP,KAAmB,WAAnB,IACA,QAAQ,MAAR,CAAe,CAAf,EAAkB,CAAlB,MAAyB,KAF3B,EAGE;AACA;AACA,wBAAU,QAAQ,MAAR,CAAe,CAAf,CAAV;AACD;AACF;;AAED,sBAAY,OAAO,IAAnB;;AAEA,uBAAa;AACX,kBAAM,OADK;AAEX,oBAAQ,SAFG;AAGX,kBAAM;AAHK,WAAb;;AAMA,sBAAY,IAAZ,CAAiB,UAAjB;AACD;;AAED,sBAAc,YAAY,IAAZ,CAAiB,KAAK,eAAtB,CAAd;AACA,uBAAe,IAAf,CAAoB,WAApB;;AAEA,aAAK,gBAAL,GAAwB,IAAxB;;AAEA,eAAO,SAAS,cAAT,CAAP;AACD,OAtGH;AAuGD;;;uCAEkB,U,EAAY,K,EAAO,S,EAAW,I,EAAM,C,EAAG,I,EAAM;AAC9D,UAAI,UAAJ;AAAA,UAAgB,KAAhB;AAAA,UAAuB,QAAvB;AAAA,UAAiC,KAAjC;AAAA,UAAwC,GAAxC;AAAA,UAA6C,CAA7C;AAAA,UACE,oBADF;AAAA,UAEE,OAAO,IAFT;;AAIA,UAAI,KAAK,MAAL,CAAY,GAAZ,KAAoB,MAAxB,EAAgC;AAC9B,+BAAuB,CAAC,CAAD,EAAI,CAAJ,CAAvB;AACD,OAFD,MAEO;AACL,+BAAuB,CAAC,CAAD,EAAI,CAAJ,CAAvB;AACD;;AAED,WAAK,IAAI,CAAT,EAAY,IAAI,qBAAqB,MAArC,EAA6C,GAA7C,EAAkD;AAChD,cAAM,qBAAqB,CAArB,IAA0B,CAAhC;AACA,qBAAa,KAAK,GAAL,CAAb;AACA,gBAAQ,WAAW,GAAX,CAAR;AACA,mBAAW,KAAK,kBAAL,CAAwB,KAAxB,EAA+B,UAA/B,EAA2C,KAA3C,EAAkD,GAAlD,CAAX;AACA,gBAAQ,KAAK,cAAL,CAAoB,QAApB,EAA8B,CAA9B,EAAiC,SAAjC,EAA4C,CAA5C,CAAR;AACA,aAAK,MAAL,CAAY,UAAZ,EACG,IADH,CACQ,IADR,EACc,SAAS,EAAT,GAAc,0BAD5B,EAEG,SAFH,CAEa,MAFb,EAGG,IAHH,CAGQ,KAHR,EAIG,KAJH,GAKG,MALH,CAKU,MALV,EAMG,IANH,CAMQ,GANR,EAMa,UAAS,CAAT,EAAY;AACrB,iBAAO,EAAE,IAAT;AACD,SARH,EAQK,IARL,CAQU,OARV,EAQmB,UAAS,CAAT,EAAY;AAC3B,iBAAO,EAAE,KAAT;AACD,SAVH;AAWD;AACF;;AAED;;;;;;wCAGoB,U,EAAY;AAC9B,UAAI,OAAO,IAAX;AAAA,UACE,SAAS,KAAK,MAAL,CAAY,MADvB;AAAA,UAEE,SAAS,KAAK,MAAL,CAAY,MAFvB;AAAA,UAGE,KAHF;AAAA,UAIE,WAAW,CAJb;AAAA,UAKE,eAAe,CALjB;AAAA,UAME,KANF;AAAA,UAOE,CAPF;AAAA,UAOK,CAPL;AAAA,UAOQ,IAPR;AAAA,UAOc,UAPd;AAAA,UAO0B,QAP1B;AAAA,UAQE,IARF;AAAA,UAQQ,SARR;;AAUA,aAAO,GAAG,MAAH,CAAU,KAAK,QAAL,GAAgB,OAA1B,CAAP;;AAEA,WAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,gBAAQ,OAAO,CAAP,CAAR;AACA,eAAO,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,CAAP;;AAEA,aAAK,WAAL,CAAiB,KAAjB,IAA0B,EAA1B;;AAEA,aAAK,iBAAL,CAAuB,IAAvB;;AAEA,aAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,uBAAa,KAAK,CAAL,CAAb;AACA,kBAAQ,WAAW,QAAX,CAAR;AACA,sBAAY,CAAZ;;AAEA,qBAAW,KAAK,kBAAL,CAAwB,KAAxB,EAA+B,UAA/B,EAA2C,KAA3C,EAAkD,QAAlD,CAAX;;AAEA,eAAK,WAAL,CAAiB,KAAjB,EAAwB,UAAxB,IAAsC,QAAtC;AACA,eAAK,gBAAL,CAAsB,IAAtB,CAA2B,QAA3B;;AAEA,cACE,SAAS,KAAK,MAAd,KAEE,WAAW,CAAX,IAAgB,KAAK,cAAL,CAAoB,KAApB,GAA4B,CAA5B,KAAkC,QAAlD,IACA,KAAK,MAAL,CAAY,GAAZ,KAAoB,QAApB,IAAgC,SAAS,IAAT,KAAkB,GAHpD,CADF,EAME;AACA;AACD;;AAED,sBAAY,KAAK,OAAL,CAAa,yBAAb,CAAuC,YAAvC,CAAZ;AACA,0BAAgB,CAAhB;;AAEA;AACA,cAAI,YAAY,GAAG,MAAH,CAAU,KAAK,QAAf,EACb,MADa,CACN,GADM,EAEb,IAFa,CAER,OAFQ,EAEC,0BAFD,EAGb,IAHa,CAGR,iBAHQ,EAGW,CAHX,EAIb,IAJa,CAIR,WAJQ,EAIK,SAJL,EAKb,IALa,CAKR,IALQ,EAKF,SAAS,EAAT,GAAc,iBALZ,CAAhB;;AAOA,cACE,SAAS,KAAK,MAAd,IACA,WAAW,CADX,IAEA,KAAK,cAAL,CAAoB,KAApB,GAA4B,CAA5B,KAAkC,QAHpC,EAIE;AACA,iBAAK,kBAAL,CAAwB,UAAxB,EAAoC,KAApC,EAA2C,SAA3C,EAAsD,IAAtD,EAA4D,CAA5D,EAA+D,IAA/D;AACA;AACD;;AAED,cAAI,KAAJ;AACA,cAAI,eAAe,CAAnB;AACA,cAAI,SAAS,CAAb,EAAgB;AACd,2BAAe,KAAK,OAAL,CAAa,oBAAb,CAAkC,CAAlC,CAAf;AACD;AACD,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAApB,EAAkC,GAAlC,EAAuC;AACrC,oBAAQ,KAAK,cAAL,CAAoB,QAApB,EAA8B,WAAW,CAAzC,EAA4C,SAA5C,EAAuD,CAAvD,CAAR;AACD;;AAED,eAAK,MAAL,CAAY,UAAZ,EACG,IADH,CACQ,IADR,EACc,SAAS,EAAT,GAAc,0BAD5B,EAEG,SAFH,CAEa,MAFb,EAGG,IAHH,CAGQ,KAHR,EAIG,KAJH,GAKG,MALH,CAKU,MALV,EAMG,IANH,CAMQ,GANR,EAMa,UAAS,CAAT,EAAY;AACrB,mBAAO,EAAE,IAAT;AACD,WARH,EAQK,IARL,CAQU,OARV,EAQmB,UAAS,CAAT,EAAY;AAC3B,mBAAO,EAAE,KAAT;AACD,WAVH;AAWD;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,KAA+B,IAAnC,EAAyC;AACvC,eAAK,cAAL,CAAoB,KAAK,WAAzB;AACD;AACF;AACF;;AAED;;;;6BACS;AACP,aAAO,GAAG,MAAH,CAAU,KAAK,QAAf,EAAyB,IAAzB,EAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;sCAmBkB,I,EAAM;AACtB,UAAI,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAAvB,IAA4B,CAAC,KAAK,MAAL,CAAY,GAA7C,EAAkD;AAChD;AACD;;AAED,UAAI,OAAO,IAAX;AAAA,UACE,UAAU,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EADZ;AAAA,UAEE,GAFF;AAAA,UAEO,CAFP;;AAIA,WAAK,cAAL,CAAoB,IAApB,GAA2B,EAA3B;;AAEA,WAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,cAAM,KAAK,CAAL,CAAN;;AAEA,YAAI,KAAK,MAAL,CAAY,GAAZ,KAAoB,MAApB,IAA8B,OAAO,OAAzC,EAAkD;AAChD,eAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAA8B,GAA9B;AACA,cAAI,CAAC,KAAK,cAAL,CAAoB,KAAzB,EAAgC;AAC9B,iBAAK,cAAL,CAAoB,KAApB,GAA4B,CAA5B;AACD;AACF,SALD,MAKO,IAAI,QAAQ,GAAZ,EAAiB;AACtB,eAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAA8B,GAA9B,EAAmC,GAAnC;AACA,eAAK,cAAL,CAAoB,KAApB,GAA4B,CAA5B;AACD;AACF;AACF;;AAED;;;;;;;;;;;;sCASkB;AAChB,UAAI,UAAJ;AAAA,UAAgB,SAAhB;AAAA,UAA2B,CAA3B;AAAA,UAA8B,CAA9B;AAAA,UAAiC,CAAjC;AAAA,UAAoC,UAApC;AAAA,UAAgD,KAAhD;AAAA,UACE,SADF;AAAA,UACa,GADb;AAAA,UAEE,QAFF;AAAA,UAEY,UAFZ;AAAA,UAGE,KAHF;AAAA,UAGS,MAHT;AAAA,UAGiB,IAHjB;AAAA,UAGuB,WAHvB;AAAA,UAIE,OAAO,IAJT;;AAMA,mBAAa,EAAb;AACA,kBAAY,CAAZ;;AAEA,UAAI,KAAK,MAAL,CAAY,aAAZ,KAA8B,IAAlC,EAAwC;AACtC,aAAK,gBAAL,GAAwB,IAAxB;AACA,iBAAS,KAAK,MAAL,CAAY,MAArB;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,kBAAQ,OAAO,CAAP,CAAR;AACD;AACF,OAND,MAMO;AACL,YAAI,OAAO,KAAK,MAAL,CAAY,KAAnB,KAA6B,WAAjC,EAA8C;AAC5C,eAAK,MAAL,CAAY,KAAZ,GAAoB,KAAK,MAAL,CAAY,MAAZ,CAAmB,CAAnB,CAApB;AACD;AACD,gBAAQ,KAAK,MAAL,CAAY,KAApB;AACA,iBAAS,CAAC,KAAD,CAAT;AACA,aAAK,MAAL,CAAY,MAAZ,GAAqB,MAArB;AACD;;AAED,UAAI,iBAAiB,KAAK,MAA1B,EAAkC;AAChC,eAAO,KAAK,MAAL,CAAY,WAAnB;AACD;AACD,UAAI,KAAK,MAAL,CAAY,aAAhB,EAA+B;AAC7B,sBAAc,IAAd;AACD;;AAED,WAAK,MAAL,CAAY,WAAZ,GAA0B,EAA1B;;AAEA,UAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAV;;AAEA,WAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,gBAAQ,OAAO,CAAP,CAAR;;AAEA,YAAI,KAAK,MAAL,CAAY,aAAhB,EAA+B;AAC7B,iBAAO,YAAY,KAAZ,CAAP;AACD;;AAED,YAAI,KAAK,gBAAL,KAA0B,MAA1B,IAAoC,KAAK,MAAL,CAAY,aAApD,EAAmE;AACjE,qBAAW,KAAK,QAAL,CAAc,KAAd,CAAX;;AAEA,uBAAa,KAAK,QAAL,CAAc,QAAd,EAAwB,KAAxB,EAA+B,IAA/B,CAAb;;AAEA,iBAAO,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,CAA6B,UAAS,CAAT,EAAY,CAAZ,EAAe;AACjD,mBAAO,YAAY,CAAZ,EAAe,CAAf,CAAP;AACD,WAFM,CAAP;;AAIA,eAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,IAAiC,KAAK,KAAL,EAAjC;AACA,eAAK,cAAL,IAAuB,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,EAA+B,MAAtD;;AAEA,eAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,yBAAa,KAAK,CAAL,CAAb;AACA,oBAAQ,WAAW,UAAX,CAAR;AACA,uBAAW,IAAX,CAAgB,KAAhB;;AAEA,wBAAY;AACV,oBAAM,MAAM,MAAM,MAAN,GAAe,CAArB,EAAwB,IAAxB,CAA6B,IADzB;AAEV,kBAAI,MAAM,MAAM,MAAN,GAAe,CAArB,EAAwB,EAAxB,CAA2B;AAFrB,aAAZ;;AAKA,gBAAI,UAAU,IAAV,GAAiB,KAAK,SAAL,CAAe,IAApC,EAA0C;AACxC,mBAAK,SAAL,CAAe,IAAf,GAAsB,UAAU,IAAhC;AACD;;AAED,gBAAI,UAAU,EAAV,GAAe,KAAK,SAAL,CAAe,EAAlC,EAAsC;AACpC,mBAAK,SAAL,CAAe,EAAf,GAAoB,UAAU,EAA9B;AACD;AACF;AACF,SA9BD,MA8BO,IAAI,KAAK,gBAAL,KAA0B,IAA9B,EAAoC;AACzC;;AAEA,eAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,IAAiC,KAAK,KAAL,EAAjC;AACA,eAAK,cAAL,IAAuB,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,EAA+B,MAAtD;;AAEA,eAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,kBAAM,KAAK,CAAL,CAAN;AACA,gBAAI,IAAI,MAAJ,GAAa,KAAK,SAAL,CAAe,EAAhC,EAAoC;AAClC,mBAAK,SAAL,CAAe,EAAf,GAAoB,IAAI,MAAxB;AACD;AACF;AACF;AACF;;AAED,UAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAV;AACA,UAAI,KAAK,KAAT,EAAgB;AACd,gBAAQ,GAAR,CAAY,+BAA+B,MAAM,GAArC,IAA4C,KAAxD;AACD;;AAED,aAAO,UAAP;AACD;;AAED;;;;;;;;;2BAMO;AACL,UAAI,KAAJ,EAAW,CAAX,EAAc,QAAd;;AAEA,UAAI,OAAO,IAAX;;AAEA,UAAI,KAAK,IAAI,IAAJ,GAAW,OAAX,EAAT;;AAEA,UAAI,aAAa,EAAjB;AAAA,UACE,uBAAuB,CADzB;AAAA,UAEE,aAAa,KAAK,MAAL,CAAY,UAF3B;AAAA,UAGE,SAHF;;AAKA,UAAI,UAAU,wBAAY,UAAS,OAAT,EAAkB;AAC1C,aAAK,SAAL,CAAe,OAAf;AACD,OAFa,CAAd;;AAIA,cAAQ,IAAR,CAAa,UAAS,MAAT,EAAiB;AAC5B,gBAAQ,OAAO,CAAP,CAAR;AACA,aAAK,MAAL,CAAY,KAAZ,GAAoB,KAApB;AACA,aAAK,MAAL,CAAY,MAAZ,GAAqB,MAArB;;AAEA,YAAI,UAAJ,EACE,YADF;;AAGA,YAAI,oBAAoB;AACtB,gBAAM,EADgB;AAEtB,iBAAO;AAFe,SAAxB;;AAKA,aAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,kBAAQ,OAAO,OAAO,CAAP,CAAP,CAAR;;AAEA,cAAI,CAAC,KAAK,MAAL,CAAY,QAAjB,EAA2B;AACzB,iBAAK,MAAL,CAAY,QAAZ,GAAuB,SAAvB;AACD;AACD,uBAAa,KAAK,SAAL,CAAe,KAAf,EAAsB,UAAnC;AACA,sBAAY,WAAW,KAAK,MAAL,CAAY,QAAvB,CAAZ;;AAEA,yBAAe,EAAf;AACA,uBAAa,IAAb,CAAkB,QAAQ,KAAK,SAAL,CAAe,KAAf,EAAsB,cAA9B,CAAlB;AACA,cAAI,cAAc,WAAW,OAA7B,EAAsC;AACpC,yBAAa,IAAb,CAAkB,SAAlB;AACD;AACD,cACE,UAAU,MAAV,KACC,cAAc,WAAW,OAAzB,IAAoC,eAAe,GADpD,CADF,EAGE;AACA,yBAAa,IAAb,CAAkB,UAAlB;AACD;AACD,yBAAe,aAAa,IAAb,CAAkB,GAAlB,IAAyB,KAAxC;;AAEA,cAAI,UAAU,MAAV,IAAoB,UAAU,OAAlC,EAA2C;AACzC,8BAAkB,KAAlB,IAA2B,YAA3B;AACD;;AAED,cAAI,OAAO,QAAP,KAAoB,WAApB,IAAmC,SAAS,iBAAhD,EAAmE;AACjE,eAAG,OAAH,CAAW,KAAK,MAAL,CAAY,OAAZ,GAAsB,kBAAkB,KAAlB,CAAjC,EACG,EADH,CACM,YADN,EACoB,UAAS,IAAT,EAAe;AAC/B;AACA;AACA;AACA,mBAAK,KAAL,GAAa,KAAb;AACD,aANH,EAOG,GAPH,CAOO,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AACzB,mBAAK,KAAK,QAAV;;AAEA,mBAAK,QAAL,CAAc,KAAK,KAAnB,IAA4B,QAA5B;AACA,sCAAwB,CAAxB;;AAEA,kBAAI,yBAAyB,OAAO,MAApC,EAA4C;AAC1C,6BAAa,KAAK,eAAL,EAAb;AACA;AACD;AACF,aAjBH;AAkBD,WAnBD,MAmBO;AACL,gBAAI,OAAO,QAAP,KAAoB,WAAxB,EAAqC;AACrC;AACA;AACE,mBAAK,QAAL,CAAc,KAAd,IAAuB,QAAvB;AACD;AACD,yBAAa,KAAK,eAAL,EAAb;AACA;AACD;AACF;AACF,OApED;;AAsEA,eAAS,cAAT,GAA0B;AACxB,YAAI,KAAK,MAAL,CAAY,eAAhB,EAAiC;AAC/B,aAAG,IAAH,CACA,KAAK,MAAL,CAAY,eADZ,EAC6B;AAC7B,oBAAS,IAAT,EAAe;AAAE;AACf,iBAAK,SAAL,GAAiB,IAAjB;AACD,WAJD;AAMD;;AAED;AACA;AACA;AACA;AACA,YACE,gBAAgB,KAAK,MAArB,IACA,OAAO,KAAK,MAAL,CAAY,UAAnB,KAAkC,QAFpC,EAGE;AACA,cAAI,MAAM,EAAV;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,cAAzB,EAAyC,GAAzC,EAA8C;AAC5C,gBAAI,IAAJ,CAAS,KAAK,MAAL,CAAY,UAArB;AACD;AACD,eAAK,MAAL,CAAY,UAAZ,GAAyB,GAAzB;AACD;AACD;AACA,aAAK,OAAL,GAAe,mBAAW,KAAK,MAAhB,CAAf;;AAEA;AACA,aAAK,OAAL,GAAe,eAAO,WAAP,CAAmB,KAAK,MAAxB,EAAgC,IAAhC,CAAf;;AAEA,mBAAW,EAAX;AACA,YAAI,KAAK,MAAL,CAAY,oBAAhB,EAAsC;AACpC,cAAI,KAAK,MAAL,CAAY,WAAZ,KAA4B,YAAhC,EAA8C;AAC5C,wBAAY,cAAZ;AACD,WAFD,MAEO;AACL,wBAAY,UAAZ;AACD;AACF;;AAED,YACA,KAAK,MAAL,CAAY,iBAAZ,IACA,KAAK,MAAL,CAAY,iBAAZ,KAAkC,SAFlC,EAGA;AACE,sBAAY,OAAZ;AACD;;AAED,YAAI,YAAY,KAAK,qBAAL,EAAhB;AACA,YAAI,WAAW,KAAK,OAAL,CAAa,QAAb,CAAsB,KAAtB,CAAf;AACA,YAAI,YAAY,KAAK,OAAL,CAAa,SAAb,CAAuB,KAAvB,CAAhB;;AAEA,WAAG,MAAH,CAAU,KAAK,MAAL,CAAY,SAAtB,EACG,MADH,CACU,KADV,EAEK,MAFL,CAEY,KAFZ,EAGO,IAHP,CAGY,IAHZ,EAGkB,WAHlB,EAIO,IAJP,CAIY,OAJZ,EAIqB,QAJrB,EAKO,IALP,CAKY,OALZ,EAKqB,QALrB,EAMO,IANP,CAMY,QANZ,EAMsB,SANtB,EAOO,IAPP,CAOY,SAPZ;;AASA;AACD;;AAED,eAAS,UAAT,GAAsB;AACpB,YAAI;AACF,cAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAV;;AAEA,cAAI,CAAJ;;AAEA,eAAK,mBAAL,CAAyB,UAAzB;;AAEA;AACA;AACA,cAAI,KAAK,MAAL,CAAY,eAAhB,EAAiC;AAAA,gBACtB,EADsB,GAC/B,SAAS,EAAT,GAAc;AACZ,kBAAI,OAAO,KAAK,OAAZ,KAAwB,WAA5B,EAAyC;AACvC,uBAAO,YAAP,CAAoB,KAAK,OAAzB;AACD;;AAED,mBAAK,MAAL,GAAc,KAAK,gBAAL,CAAsB,KAAK,SAA3B,CAAd;AACA,mBAAK,mBAAL,CAAyB,KAAK,MAA9B;;AAEA,kBAAI,OAAO,WAAP,KAAuB,WAAvB,IAAsC,KAAK,eAA/C,EAAgE;AAC9D,qBAAK,eAAL;AACD;AACF,aAZ8B;;AAc/B,gBAAI,KAAK,SAAT,EAAoB;AAClB;AACD,aAFD,MAEO;AACL,eAAC,SAAS,cAAT,GAA0B;AACzB,qBAAK,OAAL,GAAe,WAAW,YAAW;AACnC,sBAAI,CAAC,KAAK,SAAV,EAAqB;AACnB;AACD,mBAFD,MAEO;AACL;AACD;AACF,iBANc,EAOjB,EAPiB,CAAf;AASD,eAVD;AAWD;AACF;;AAED,cAAI,KAAK,MAAL,CAAY,cAAZ,KAA+B,IAAnC,EAAyC;AACvC,gBAAI,cAAc,KAAK,WAAL,CAAiB,IAAjB,CAAsB,GAAtB,CAAlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAV;AACA,eAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,8BAA7B,EACC,KADD,CACO,SADP,EACkB,MADlB;AAEA,eAAG,SAAH,CAAa,WAAb,EAA0B,KAA1B,CAAgC,SAAhC,EAA2C,EAA3C;AACA,gBAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAV;AACA,gBAAI,KAAK,KAAT,EAAgB;AACd,sBAAQ,GAAR,CAAY,6BAA6B,MAAM,GAAnC,IAA0C,KAAtD;AACD;;AAED,gBAAI,KAAK,MAAL,CAAY,WAAZ,KAA4B,UAAhC,EAA4C;AAC1C,kBAAI,KAAJ;AACA,mBAAK,IAAI,CAAT,EAAY,IAAI,KAAK,gBAAL,CAAsB,MAAtC,EAA8C,GAA9C,EAAmD;AACjD,wBAAQ,MAAM,KAAK,gBAAL,CAAsB,CAAtB,EAAyB,EAAvC;AACA,qBAAK,sBAAL,CAA4B,GAAG,MAAH,CAAU,KAAV,CAA5B,EAA8C,CAA9C;AACD;AACF;AACF;;AAED,cAAI,KAAK,MAAL,CAAY,oBAAZ,KAAqC,IAAzC,EAA+C;AAC7C,iBAAK,oBAAL,CAA0B,KAAK,WAA/B;AACD;;AAED,cAAI,KAAK,MAAL,CAAY,KAAZ,KAAsB,IAA1B,EAAgC;AAC9B,iBAAK,WAAL;AACD;;AAED,cAAI,KAAK,MAAL,CAAY,WAAhB,EAA6B;AAC3B,iBAAK,UAAL,CAAgB,KAAK,MAAL,CAAY,WAA5B;AACD;;AAED,cAAI,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAV;AACA,cAAI,KAAK,KAAT,EAAgB;AACd,oBAAQ,GAAR,CAAY,8BAA8B,MAAM,GAApC,IAA2C,KAAvD;AACD;;AAED,cAAI,KAAK,IAAI,IAAJ,GAAW,OAAX,EAAT;AACA,cAAI,KAAK,KAAT,EAAgB;AACd,oBAAQ,GAAR,CAAY,kCAAkC,KAAK,EAAvC,IAA6C,KAAzD;AACD;;AAED,cAAI,KAAK,cAAT,EAAyB;AACvB,iBAAK,cAAL;AACD;;AAED,cAAI,EAAE,eAAe,KAAK,MAApB,IAA8B,KAAK,MAAL,CAAY,SAAZ,KAA0B,KAA1D,CAAJ,EAAsE;AACpE,eAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,cAA7B,EAA6C,EAA7C,CAAgD,OAAhD,EAAyD,YAAW;AAClE,mBAAK,sBAAL,CAA4B,IAA5B;AACD,aAFD;AAGD,WAJD,MAIO;AACL,eAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,cAA7B,EACG,KADH,CACS,QADT,EACmB,SADnB;AAED;AACF,SArGD,CAqGE,OAAO,CAAP,EAAU;AACV;AACA,gBAAM,CAAN;AACD;AACF;AACF;;;wBAnyEe;AACd,aAAO,EAAP;AACD;;;;;;;;;ACzOH;;AAEA;AACA,SAAS,WAAT,CAAqB,CAArB,EAAuB,CAAvB,EAAyB;AAAC,MAAI,CAAJ;AAAA,MAAM,CAAN;AAAA,MAAQ,IAAE,4EAAV;AAAA,MAAuF,IAAE,YAAzF;AAAA,MAAsG,IAAE,MAAxG;AAAA,MAA+G,IAAE,gHAAjH;AAAA,MAAkO,IAAE,gBAApO;AAAA,MAAqP,IAAE,IAAvP;AAAA,MAA4P,IAAE,SAAF,CAAE,CAAS,CAAT,EAAW;AAAC,WAAM,CAAC,YAAY,WAAZ,IAAyB,CAAC,KAAG,CAAJ,EAAO,WAAP,EAAzB,IAA+C,KAAG,CAAnD,EAAsD,OAAtD,CAA8D,CAA9D,EAAgE,EAAhE,CAAN;AAA0E,GAApV;AAAA,MAAqV,IAAE,EAAE,CAAF,CAAvV;AAAA,MAA4V,IAAE,EAAE,CAAF,CAA9V;AAAA,MAAmW,IAAE,EAAE,OAAF,CAAU,CAAV,EAAY,QAAZ,EAAsB,OAAtB,CAA8B,KAA9B,EAAoC,EAApC,EAAwC,OAAxC,CAAgD,KAAhD,EAAsD,EAAtD,EAA0D,KAA1D,CAAgE,IAAhE,CAArW;AAAA,MAA2a,IAAE,EAAE,OAAF,CAAU,CAAV,EAAY,QAAZ,EAAsB,OAAtB,CAA8B,KAA9B,EAAoC,EAApC,EAAwC,OAAxC,CAAgD,KAAhD,EAAsD,EAAtD,EAA0D,KAA1D,CAAgE,IAAhE,CAA7a;AAAA,MAAmf,IAAE,SAAS,EAAE,KAAF,CAAQ,CAAR,CAAT,EAAoB,EAApB,KAAyB,MAAI,EAAE,MAAN,IAAc,KAAK,KAAL,CAAW,CAAX,CAA5hB;AAAA,MAA0iB,IAAE,SAAS,EAAE,KAAF,CAAQ,CAAR,CAAT,EAAoB,EAApB,KAAyB,KAAG,EAAE,KAAF,CAAQ,CAAR,CAAH,IAAe,KAAK,KAAL,CAAW,CAAX,CAAxC,IAAuD,IAAnmB;AAAA,MAAwmB,IAAE,SAAF,CAAE,CAAS,CAAT,EAAW,CAAX,EAAa;AAAC,WAAM,CAAC,CAAC,EAAE,KAAF,CAAQ,CAAR,CAAD,IAAa,KAAG,CAAjB,KAAqB,WAAW,CAAX,CAArB,IAAoC,EAAE,OAAF,CAAU,CAAV,EAAY,GAAZ,EAAiB,OAAjB,CAAyB,CAAzB,EAA2B,EAA3B,CAApC,IAAoE,CAA1E;AAA4E,GAApsB,CAAqsB,IAAG,CAAH,EAAK;AAAC,QAAG,IAAE,CAAL,EAAO,OAAM,CAAC,CAAP,CAAS,IAAG,IAAE,CAAL,EAAO,OAAO,CAAP;AAAS,QAAI,IAAI,IAAE,CAAN,EAAQ,IAAE,EAAE,MAAZ,EAAmB,IAAE,EAAE,MAAvB,EAA8B,IAAE,KAAK,GAAL,CAAS,CAAT,EAAW,CAAX,CAApC,EAAkD,IAAE,CAApD,EAAsD,GAAtD,EAA0D;AAAC,QAAG,IAAE,EAAE,EAAE,CAAF,KAAM,EAAR,EAAW,CAAX,CAAF,EAAgB,IAAE,EAAE,EAAE,CAAF,KAAM,EAAR,EAAW,CAAX,CAAlB,EAAgC,MAAM,CAAN,MAAW,MAAM,CAAN,CAA9C,EAAuD,OAAO,MAAM,CAAN,IAAS,CAAT,GAAW,CAAC,CAAnB,CAAqB,IAAG,eAAe,IAAf,CAAoB,IAAE,CAAtB,KAA0B,EAAE,aAA/B,EAA6C;AAAC,UAAI,IAAE,EAAE,aAAF,CAAgB,CAAhB,CAAN,CAAyB,OAAO,IAAE,KAAK,GAAL,CAAS,CAAT,CAAT;AAAqB,SAAG,IAAE,CAAL,EAAO,OAAM,CAAC,CAAP,CAAS,IAAG,IAAE,CAAL,EAAO,OAAO,CAAP;AAAS;AAAC;;AAEzgC;AACA,SAAS,OAAT,CAAiB,KAAjB,EAAuB;AAAC,SAAO,MAAM,WAAN,GAAoB,OAApB,CAA4B,GAA5B,EAAiC,GAAjC,CAAP;AAA6C;;AAErE,OAAO,WAAP,GAAqB,WAArB;AACA,OAAO,OAAP,GAAiB,OAAjB;;AAEA,OAAO,QAAP;;;;;;;;;;;ACXA;AACA;AACA;AACA;;AAEA;;IAAY,E;;AAEZ;;;;;;;;;;IAEa,M,WAAA,M;AAEX,kBAAY,MAAZ,EAAoB,IAApB,EAA0B;AAAA;;AACxB,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,OAAL,GAAe,KAAK,KAAL,CAAW,OAA1B;AACA,SAAK,UAAL,GAAkB,SAAlB;;AAEA,QAAI,kBAAkB,MAAtB,EAA8B;AAC5B,WAAK,YAAL,GAAoB,OAAO,YAA3B;AACD,KAFD,MAEO;AACL,UAAI,IAAI,KAAK,OAAL,CAAa,SAArB;AACA,WAAK,YAAL,GAAqB,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,GAA0B,CAA1B,GAA8B,CAAnD;AACD;;AAED;AACA,SAAK,SAAL,GAAiB,CAAjB;;AAEA;AACA,SAAK,UAAL,GAAkB,KAAlB;AACD;;AAED;;;;;;;AAeA;qCACiB;AACf,aAAO,KAAK,OAAL,CAAa,IAApB;AACD;;AAED;;;;iCACa;AACT;AACF,aAAO,KAAK,KAAK,OAAL,CAAa,QAAzB;AACD;;AAED;;;;wCACoB,U,EAAY;AAC9B,UAAI,OAAO,mCAAmB,UAAnB,CAAX;;AAEA,aAAO,CAAC,KAAK,WAAL,EAAD,EAAqB,KAAK,QAAL,EAArB,EAAsC,MAAtC,CAA6C,UAAS,CAAT,EAAY;AAC9D,eAAO,EAAE,MAAF,GAAW,CAAlB;AACD,OAFM,CAAP;AAGD;;AAED;;;;iCACa;AACX,YAAM,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,6BAAxB,CAAN;AACD;;AAED;;;;oCACgB;AACd,YAAM,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,gCAAxB,CAAN;AACD;;;2BAEM,Y,EAAc,S,EAAW,U,EAAY;AAC1C,UAAI,OAAO,KAAK,KAAhB;;AAEE;AACF,UAAI,YAAY,GAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,eAA7B,EACb,MADa,CACN,YAAW;AACjB,eAAO,SAAS,UAAhB;AACD,OAHa,CAAhB;;AAKA,UAAI,KAAK,UAAT,EAAqB;AACf;AACJ,aAAK,UAAL,GAAkB,KAAlB;AACI;AACJ,aAAK,UAAL,CAAgB,YAAhB,EAA8B,SAA9B,EAAyC,UAAzC,EAAqD,YAAW;AACxD;AACN,oBAAU,KAAV,CAAgB,SAAhB,EAA2B,IAA3B;AACA,aAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,0BAA7B,EACG,KADH,CACS,SADT,EACoB,IADpB;AAED,SALD;AAMD,OAVD,MAUO;AACD;AACJ,aAAK,UAAL,GAAkB,IAAlB;;AAEI;AACJ,kBAAU,KAAV,CAAgB,SAAhB,EAA2B,MAA3B;AACA,WAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,0BAA7B,EACG,KADH,CACS,SADT,EACoB,MADpB;;AAGI;AACJ,aAAK,aAAL,CAAmB,YAAnB,EAAiC,SAAjC,EAA4C,UAA5C;AACD;AACF;;;8CAEyB;AACxB,UAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,eAAO,UAAP;AACD,OAFD,MAEO;AACL,eAAO,aAAP;AACD;AACF;;;2CAEsB;AACrB,aACE,CAAC,KAAK,OAAL,CAAa,gBAAb,IAAiC,CAAlC,KAAwC,KAAK,OAAL,CAAa,cAAb,IAA+B,CAAvE,CADF;AAGD;;;0CAEqB,Y,EAAc;AAClC;AACA,UAAI,UAAU,KAAK,OAAL,CAAa,UAAb,CAAwB,YAAxB,CAAd;;AAEA;AACA,aACE,UAAU,KAAK,OAAL,CAAa,QAAvB,GAAkC,CAAlC,GAAuC,KAAK,YAD9C;AAGD;;AAED;;;;gCACY;AACV,aAAO,KAAK,OAAZ;AACD;;AAED;;;;gCACY;AACV,YAAM,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,4BAAxB,CAAN;AACD;;;8CAEyB;AACxB,YAAM,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,0CAAxB,CAAN;AACD;;;8CAEyB;AACxB,YAAM,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,0CAAxB,CAAN;AACD;;AAED;;;;sDACkC;AAChC,YAAM,IAAI,KAAJ,CACJ,KAAK,MAAL,GAAc,kDADV,CAAN;AAGD;;AAED;;;;kDAC8B;AAC5B,aAAO,QAAP;AACD;;AAED;;;;mDAC+B;AAC7B,YACE,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,+CAAxB,CADF;AAGD;;;kDAE6B;AAC5B,YAAM,IAAI,KAAJ,CACJ,KAAK,MAAL,GAAc,8CADV,CAAN;AAGD;;AAED;;;;kDAC8B;AAC5B,aAAO,CAAC,GAAR;AACD;;AAED;;;;mDAC+B,C,EAAG;AAChC,UAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,eAAO,KAAK,2BAAL,CAAiC,CAAjC,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAC,CAAD,GAAK,KAAK,OAAL,CAAa,QAAzB;AACD;AACF;;;qDAEgC;AAC/B,YACE,IAAI,KAAJ,CACE,KAAK,MAAL,GAAc,iDADhB,CADF;AAKD;;;qDAEgC;AAC/B,YACE,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,iDAAxB,CADF;AAGD;;AAED;;;;gDAC4B;AAC1B,YAAM,IAAI,KAAJ,CAAU,KAAK,MAAL,GAAc,4CAAxB,CAAN;AACD;;AAED;;;;iDAC6B;AAC3B,YAAM,IAAI,KAAJ,CACJ,KAAK,MAAL,GAAc,6CADV,CAAN;AAGD;;;gCAtLkB,M,EAAQ,I,EAAM;AAC/B,UAAI,iBAAiB,MAAjB,IAA2B,OAAO,WAAP,KAAuB,aAAtD,EAAqE;AACnE,eAAO,IAAI,YAAJ,CAAiB,MAAjB,EAAyB,IAAzB,CAAP;AACD,OAFD,MAEO,IAAI,UAAU,MAAV,IAAoB,OAAO,IAAP,GAAc,CAAtC,EAAyC;AAC9C,eAAO,IAAI,WAAJ,CAAgB,MAAhB,EAAwB,IAAxB,CAAP;AACD,OAFM,MAEA,IAAI,OAAO,WAAP,KAAuB,UAA3B,EAAuC;AAC5C,eAAO,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,IAA3B,CAAP;AACD,OAFM,MAEA,IAAI,OAAO,WAAP,KAAuB,YAA3B,EAAyC;AAC9C,eAAO,IAAI,gBAAJ,CAAqB,MAArB,EAA6B,IAA7B,CAAP;AACD,OAFM,MAEA;AACL,eAAO,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,IAA3B,CAAP;AACD;AACF;;;;;;IA+KU,gB,WAAA,gB;;;AAEX,4BAAY,MAAZ,EAAoB,IAApB,EAA0B;AAAA;;AAAA,oIAClB,MADkB,EACV,IADU;;AAExB,UAAK,MAAL,GAAc,kBAAd;AACA,UAAK,OAAL,GAAe;AACb,YAAM,EADO;AAEb,WAAK;AAFQ,KAAf;AAHwB;AAOzB;;;;qCAEgB;AACf,UAAI,SAAS,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,IAArC,CAAb;AACA,UAAI,KAAK,OAAL,CAAa,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,kBAAU,GAAV;AACD;;AAED,aAAO,MAAP;AACD;;;kCAEa,S,EAAW,S,EAAW,U,EAAY,Q,EAAU;AACxD,UAAI,UAAU,EAAd;;AAEA,UAAI,UAAU,GAAG,MAAH,CAAU,KAAK,KAAL,CAAW,QAArB,EAA+B,IAA/B,GAAsC,qBAAtC,EAAd;AACA,UAAI,SAAS,WAAW,qBAAX,EAAb;;AAEA,UAAI,SAAU,QAAQ,MAAR,IAAkB,OAAO,KAAP,GAAe,UAAU,CAA3C,CAAD,GAAkD,GAA/D;AACA,UAAI,SAAS,KAAK,UAAL,EAAb;;AAEA,UAAI,UAAU,CAAC,YAAY,CAAb,KAAoB,KAAK,OAAL,CAAa,QAAb,GAAwB,CAAzB,GAA8B,MAAjD,CAAd;;AAEA,UAAI,YACF,gBACA,YADA,GACe,OADf,GACyB,KADzB,GACiC,OADjC,GAC2C,IAD3C,GAEA,QAFA,GAEW,MAFX,GAEoB,IAFpB,GAE2B,MAF3B,GAEoC,GAHtC;;AAMA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,QAHb;;AAKA;AACA,UAAI,SAAS,KAAK,mBAAL,CAAyB,UAAzB,CAAb;AACA,SAAG,MAAH,CAAU,KAAK,KAAL,CAAW,MAAX,EAAV,EACG,MADH,CACU,GADV,EAEG,IAFH,CAEQ,OAFR,EAEiB,KAFjB,EAGG,SAHH,CAGa,MAHb,EAIG,IAJH,CAIQ,MAJR,EAKG,KALH,GAMG,MANH,CAMU,MANV,EAOG,IAPH,CAOQ,OAPR,EAOiB,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC5B,eAAO,MAAM,CAAN,IAAW,OAAO,MAAP,KAAkB,CAA7B,GAAiC,aAAjC,GAAiD,IAAxD;AACD,OATH,EAUG,IAVH,CAUQ,GAVR,EAUa,EAVb,EAWG,IAXH,CAWQ,GAXR,EAWa,UAAS,CAAT,EAAY,CAAZ,EAAe;AACxB,eAAO,CAAC,IAAI,CAAJ,GAAQ,OAAO,MAAP,GAAgB,CAAzB,IAA8B,EAArC;AACD,OAbH,EAcG,KAdH,CAcS,aAdT,EAcwB,QAdxB,EAeG,KAfH,CAeS,SAfT,EAeoB,CAfpB,EAgBG,IAhBH,CAgBQ,MAhBR,EAiBG,UAjBH,GAkBG,KAlBH,CAkBS,SAlBT,EAkBoB,CAlBpB;AAmBD;;;+BAEU,S,EAAW,S,EACX,U,EAAY,Q,EAAU;AAC/B,UAAI,YAAY,KAAK,yBAAL,CAA+B,SAA/B,CAAhB;;AAEA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,QAHb;;AAKA,SAAG,SAAH,CAAa,KAAK,KAAL,CAAW,QAAX,GAAsB,QAAnC,EACG,KADH,CACS,SADT,EACoB,CADpB,EAEG,MAFH;AAGD;;;8BAES,K,EAAO;AACf;AACA,UAAI,iBAAiB,KAAK,OAAL,CAAa,WAAb,CAAyB,KAAzB,EAAgC,MAArD;AACA,UAAI,gBAAgB,KAAK,0BAAL,CAAgC,iBAAiB,CAAjD,CAApB;;AAEA;AACA,UAAI,cAAc,KAAK,qBAAL,CAA2B,iBAAiB,CAA5C,CAAlB;;AAEA;AACA,uBAAiB,WAAjB;;AAEA,aAAO,gBAAgB,KAAK,oBAAL,KAA8B,CAArD;AACD;;;+BAEU;AACT,aAAO,KAAK,OAAL,CAAa,SAAb,GAAyB,KAAK,OAAL,CAAa,GAAb,GAAmB,GAAnD;AACD;;;kDAE6B;AAC5B,aAAO,KAAP;AACD;;;mDAE8B;AAC7B,aAAO,IAAP;AACD;;;8CAEyB;AACxB,aAAO,CAAP;AACD;;;8CAEyB;AACxB,aAAO,EAAP;AACD;;;oDAE+B,I,EAAM;AACpC,UAAI,IACF,KAAK,KAAL,CAAW,KAAX,CAAiB,CAAC,KAAK,SAAN,GAAkB,KAAK,EAAL,CAAQ,KAA1B,GAAkC,KAAK,EAAL,CAAQ,KAAR,GAAgB,CAAnE,CADF;AAEA,UAAI,IAAI,CAAC,EAAT;;AAEA,aAAO;AACL,WAAG,CADE;AAEL,WAAG,CAFE;AAGL,mBAAW,eAAe,CAAf,GAAmB,GAAnB,GAAyB,CAAzB,GAA6B;AAHnC,OAAP;AAKD;;;qDAEgC;AAC/B,aAAO,IAAP;AACD;;;8CAEyB,S,EAAW;AACnC,UAAI,aAAa,KAAK,cAAL,EAAjB;AACA,UAAI,0BAA0B,KAAK,0BAAL,CAAgC,SAAhC,CAA9B;AACA,aAAO,eAAe,UAAf,GAA4B,IAA5B,GAAmC,uBAAnC,GAA6D,GAApE;AACD;;;+CAE0B,S,EAAW;AACpC;AACA,UAAI,CAAC,KAAK,OAAL,CAAa,UAAlB,EAA8B;AAC5B,eAAO,KAAK,OAAL,CAAa,SAAb,IAA0B,YAAY,CAAtC,CAAP;AACD;;AAED;AACA;AACA,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB;AACA,aAAK,UAAL,GAAkB,CAAC,CAAD,CAAlB;;AAEA;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,OAAL,CAAa,UAAb,CAAwB,MAA5C,EAAoD,GAApD,EAAyD;AACvD,eAAK,UAAL,CAAgB,CAAhB,IACE,KAAK,UAAL,CAAgB,IAAI,CAApB,IAAyB,KAAK,qBAAL,CAA2B,IAAI,CAA/B,CAD3B;AAED;AACF;;AAED,aAAO,KAAK,UAAL,CAAgB,SAAhB,CAAP;AACD;;;mDAE8B,C,EAAG;AAChC,UAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,eAAO,KAAK,2BAAL,CAAiC,CAAjC,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAC,EAAR;AACD;AACF;;;mDAE8B,C,EAAG;AAChC,UAAI,UAAU,KAAK,OAAL,CAAa,UAAb,CAAwB,CAAxB,CAAd;AAAA,UACE,SAAS,KAAK,OADhB;AAAA,UAEE,YAAY,OAAO,SAFrB;AAAA,UAGE,WAAW,OAAO,QAHpB;AAAA,UAIE,CAJF;;AAMA,UAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAI,WAAW,CAAX,GAAe,CAAnB;AACD,OAFD,MAEO;AACL,YAAK,UAAU,SAAX,GAAwB,CAA5B;AACD;;AAED,aAAO,CAAP;AACD;;;kDAE6B;AAC5B,aAAO,CAAC,CAAR;AACD;;;kDAE6B;AAC5B,aAAO,KAAK,OAAL,CAAa,QAApB;AACD;;;;EA3LmC,M;;IAkMzB,Y,WAAA,Y;;;AAEX,wBAAY,MAAZ,EAAoB,IAApB,EAA0B;AAAA;;AAAA,6HAClB,MADkB,EACV,IADU;;AAGxB,WAAK,MAAL,GAAc,cAAd;;AAEA,WAAK,OAAL,GAAe;AACb,YAAM;AADO,KAAf;AALwB;AAQzB;;;;kCAEa,S,EAAW,S,EAAW,U,EAAY,Q,EAAU;AACxD,UAAI,OAAO,IAAX;AACA,UAAI,OAAO,KAAK,KAAhB;;AAEA;AACA,UAAI,UAAU,GAAG,MAAH,CAAU,KAAK,QAAf,EAAyB,IAAzB,GAAgC,qBAAhC,EAAd;AACA,UAAI,SAAS,WAAW,qBAAX,EAAb;;AAEA;AACA,UAAI,SAAU,QAAQ,KAAR,GAAgB,OAAO,MAAxB,GAAkC,IAA/C;AACA,UAAI,SAAS,KAAK,UAAL,EAAb;;AAEA;AACA;AACA,UAAI,UAAU,YAAY,GAAZ,GAAkB,EAAhC;;AAEA,UAAI,YACF,mBAAmB,OAAnB,GAA6B,UAA7B,GAA0C,MAA1C,GAAmD,IAAnD,GAA0D,MAA1D,GAAmE,GADrE;;AAGA;AACA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,YAAW;AACpB;AACA,YAAI,QAAJ,EAAc;AACZ;AACD;;AAED,YAAI,aAAc,IAAI,OAAO,CAAC,SAAR,CAAtB;;AAEA;AACA,WAAG,MAAH,CAAU,WAAW,UAArB,EAAiC,SAAjC,CAA2C,kBAA3C,EACG,IADH,CACQ,WADR,EACqB,6BAA6B,UAA7B,GAA0C,GAD/D,EAEG,IAFH,CAEQ,aAFR,EAEuB,QAFvB;;AAIA;AACA,WAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,kBAA7B,EACG,KADH,CACS,SADT,EACoB,MADpB;AAED,OAnBH;;AAqBA;AACA,UAAI,SAAS,KAAK,mBAAL,CAAyB,UAAzB,CAAb;;AAEA,SAAG,MAAH,CAAU,KAAK,KAAL,CAAW,MAAX,EAAV,EACG,MADH,CACU,GADV,EAEG,IAFH,CAEQ,OAFR,EAEiB,KAFjB,EAGG,SAHH,CAGa,MAHb,EAIG,IAJH,CAIQ,KAAK,mBAAL,CAAyB,UAAzB,CAJR,EAKG,KALH,GAMG,MANH,CAMU,MANV,EAOG,IAPH,CAOQ,OAPR,EAOiB,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC5B,eAAO,MAAM,CAAN,IAAW,OAAO,MAAP,KAAkB,CAA7B,GAAiC,aAAjC,GAAiD,IAAxD;AACD,OATH,EAUG,IAVH,CAUQ,GAVR,EAUa,CAVb,EAWG,IAXH,CAWQ,GAXR,EAWa,UAAW,KAAK,OAAL,CAAa,QAAb,GAAwB,MAAxB,GAAiC,CAAlC,GAAuC,IAX9D,EAYG,KAZH,CAYS,SAZT,EAYoB,CAZpB,EAaG,IAbH,CAaQ,MAbR,EAcG,UAdH,GAeG,KAfH,CAeS,SAfT,EAeoB,CAfpB;AAgBD;;;+BAEU,S,EAAW,S,EAAW,U,EAAY,Q,EAAU;AACrD,UAAI,OAAO,KAAK,KAAhB;;AAEA;AACA,UAAI,YAAY,KAAK,yBAAL,CAA+B,SAA/B,CAAhB;;AAEA;AACA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,YAAW;AACpB;AACA;;AAEA;AACA,WAAG,SAAH,CAAa,KAAK,MAAL,GAAc,kBAA3B,EACG,KADH,CACS,SADT,EACoB,IADpB;;AAGA;AACA,WAAG,MAAH,CAAU,WAAW,UAArB,EAAiC,SAAjC,CAA2C,kBAA3C,EACG,IADH,CACQ,WADR,EACqB,IADrB,EAEG,IAFH,CAEQ,aAFR,EAEuB,YAAY,IAAZ,GAAmB,KAF1C;AAGD,OAfH;;AAiBA,SAAG,SAAH,CAAa,KAAK,QAAL,GAAgB,QAA7B,EACG,KADH,CACS,SADT,EACoB,CADpB,EAEG,MAFH;AAGD;;;gCAEW;AACV,aAAO,KAAK,OAAL,CAAa,SAAb,GAAyB,KAAK,OAAL,CAAa,IAAb,GAAoB,GAApD;AACD;;;+BAEU;AACT,aAAO,KAAP;AACD;;;4CAEuB,S,EAAW;AACjC,aAAO,YAAY,CAAZ,GAAgB,KAAK,OAAL,CAAa,QAA7B,GAAwC,KAAK,OAAL,CAAa,QAAb,GAAwB,CAAvE;AACD;;;4CAEuB,S,EAAW;AACjC,UAAI,QAAQ,KAAK,OAAL,CAAa,QAAzB;AACA,aAAO,YAAY,CAAZ,GAAgB,QAAQ,KAAK,SAA7B,GAAyC,QAAQ,CAAR,GAAY,KAAK,SAAjE;AACD;;;iDAE4B,S,EAAW;AACtC,aAAO,YAAY,CAAZ,GAAgB,IAAhB,GAAuB,KAA9B;AACD;;;oDAE+B,I,EAAM,S,EAAW;AAC/C,UAAI,IAAI,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,CAAC,KAAK,OAAL,CAAa,QAAd,GAAyB,EAAtD;AACA,UAAI,IAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,KAAK,EAAL,CAAQ,KAAR,GAAgB,KAAK,EAAL,CAAQ,KAAR,GAAgB,CAAjD,IAAsD,CAA9D;;AAEA,aAAO;AACL,WAAG,CADE;AAEL,WAAG,CAFE;AAGL,mBAAW,2BAA2B,CAA3B,GAA+B,IAA/B,GAAsC,CAAtC,GAA0C;AAHhD,OAAP;AAKD;;;kDAE6B;AAC5B,aAAO,CAAC,KAAK,SAAb;AACD;;;qDAEgC;AAC/B,aAAO,KAAK,OAAL,CAAa,QAAb,GAAwB,CAAC,CAAhC;AACD;;;qDAEgC;AAC/B,aAAO,aAAP;AACD;;;8CAEyB,S,EAAW;AACnC,UAAI,0BAA0B,KAAK,0BAAL,CAAgC,SAAhC,CAA9B;AACA,aACE,gBACA,YADA,GACe,KAAK,OAAL,CAAa,IAD5B,GACmC,KADnC,GAC2C,uBAD3C,GACqE,GAFvE;AAID;;;+CAE0B,S,EAAW;AACpC,aAAO,OAAO,YAAY,CAAnB,CAAP;AACD;;;;EA7J+B,M;;IAmKrB,W,WAAA,W;;;AAEX,uBAAY,MAAZ,EAAoB,IAApB,EAA0B;AAAA;;AAAA,2HAClB,MADkB,EACV,IADU;;AAGxB,WAAK,MAAL,GAAc,aAAd;;AAEA,WAAK,OAAL,GAAe;AACb,YAAM,IADO;AAEb,WAAK;AAFQ,KAAf;AALwB;AASzB;;;;kCAEa,S,EAAW,S,EAAW,U,EAAY,Q,EAAU;AACxD,UAAI,UAAU,GAAG,MAAH,CAAU,KAAK,KAAL,CAAW,QAArB,EAA+B,IAA/B,GAAsC,qBAAtC,EAAd;AACA,UAAI,SAAS,WAAW,qBAAX,EAAb;;AAEA,UAAI,SAAU,QAAQ,KAAR,GAAgB,OAAO,MAAxB,GAAkC,IAA/C;AACA,UAAI,SAAS,KAAK,UAAL,EAAb;;AAEA,kBAAY,4BAA4B,MAA5B,GAAqC,IAArC,GAA4C,MAA5C,GAAqD,GAAjE;;AAEA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,QAHb;AAID;;;+BAEU,S,EAAW,S,EAAW,U,EAAY,Q,EAAU;AACrD,UAAI,YAAY,KAAK,yBAAL,CAA+B,SAA/B,CAAhB;;AAEA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,QAHb;AAID;;;gCAEW;AACV,UAAI,YAAY,KAAK,OAAL,CAAa,SAA7B;AACA,aAAO,KAAK,OAAL,CAAa,IAAb,IAAqB,YAAY,KAAK,OAAL,CAAa,GAAb,GAAmB,GAApD,CAAP;AACD;;;+BAEU;AACT,aAAO,KAAP;AACD;;;sDAEiC,CAEjC;;;qDAEgC;AAC/B,aAAO,aAAP;AACD;;;8CAEyB,S,EAAW;AACnC;AACA,UAAI,YAAY,EAAhB;AACA,WAAK,KAAL,CAAW,SAAX,CAAqB,UAAS,SAAT,EAAoB;AACvC,oBAAY,SAAZ;AACD,OAFD;AAGA;AACA,UAAI,OAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,UAAU,CAAV,CAA9B,EAA4C,MAAvD;AACA;AACA,UAAI,UAAU,OAAO,KAAK,OAAL,CAAa,IAAlC;;AAEA,UAAI,OAAJ;AACA,UAAI,OAAJ;;AAEA,UAAI,YAAY,UAAU,CAA1B,EAA6B;AAC3B,kBAAU,KAAK,OAAL,CAAa,IAAb,GAAoB,KAAK,OAAL,CAAa,SAAb,GAAyB,GAAvD;AACA,kBAAU,KAAK,0BAAL,CAAgC,YAAY,OAA5C,CAAV;AACD,OAHD,MAGO;AACL,kBAAU,KAAK,OAAL,CAAa,IAAvB;AACA,kBAAU,KAAK,0BAAL,CAAgC,SAAhC,CAAV;AACD;;AAED,aAAO,0BAA0B,OAA1B,GAAoC,KAApC,GAA4C,OAA5C,GAAsD,GAA7D;AACD;;;+CAE0B,S,EAAW;AACpC;AACA,UAAI,oBAAoB,KAAK,oBAAL,EAAxB;AACA;AACA,aACE,KAAK,OAAL,CAAa,IAAb,GAAqB,SAArB,GAAkC,KAAK,OAAL,CAAa,QAA/C,GACA,oBAAoB,CADpB,GACwB,oBAAoB,SAF9C;AAID;;;mDAE8B,S,EAAW;AACxC,aACG,CAAC,KAAK,OAAL,CAAa,UAAb,CAAwB,SAAxB,IAAqC,KAAK,OAAL,CAAa,QAAlD,GAA6D,EAA9D,IAAoE,CAAC,CAAtE,IACC,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,GAA0B,CAA1B,GAA8B,KAAK,OAAL,CAAa,QAD5C,CADF;AAID;;;kDAE6B;AAC5B,aAAO,KAAK,OAAL,CAAa,QAAb,GAAwB,CAAC,CAAhC;AACD;;;;EAlG8B,M;;IAyGpB,c,WAAA,c;;;AAEX,0BAAY,MAAZ,EAAoB,IAApB,EAA0B;AAAA;;AAAA,iIAClB,MADkB,EACV,IADU;;AAExB,WAAK,MAAL,GAAc,gBAAd;AACA;AACA,WAAK,OAAL,GAAe;AACb,WAAK,EADQ;AAEb,YAAM;AAFO,KAAf;AAJwB;AAQzB;;;;kCAEa,S,EAAW,S,EAAW,U,EAAY,Q,EAAU;AACxD,UAAI,OAAO,IAAX;;AAEA,UAAI,UAAU,EAAd;;AAEA,UAAI,UAAU,GAAG,MAAH,CAAU,KAAK,KAAL,CAAW,QAArB,EAA+B,IAA/B,GAAsC,qBAAtC,EAAd;AACA,UAAI,SAAS,WAAW,qBAAX,EAAb;;AAEA,UAAI,SAAU,QAAQ,KAAR,GAAgB,OAAO,MAAxB,GAAkC,IAA/C;AACA,UAAI,SAAS,KAAK,UAAL,EAAb;;AAEA,UAAI,YACF,eAAe,OAAf,GAAyB,cAAzB,GAA0C,MAA1C,GAAmD,IAAnD,GAA0D,MAA1D,GAAmE,GADrE;;AAGA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,QAHb;;AAKA;AACA,UAAI,SAAS,KAAK,mBAAL,CAAyB,UAAzB,CAAb;AACA,UAAI,IAAI,CAAC,UAAU,KAAK,OAAL,CAAa,QAAxB,IAAoC,GAA5C;AACA,SAAG,MAAH,CAAU,KAAK,KAAL,CAAW,MAAX,EAAV,EACG,MADH,CACU,GADV,EAEG,IAFH,CAEQ,OAFR,EAEiB,KAFjB,EAGG,SAHH,CAGa,MAHb,EAIG,IAJH,CAIQ,MAJR,EAKG,KALH,GAMG,MANH,CAMU,MANV,EAOG,IAPH,CAOQ,OAPR,EAOiB,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC5B,eAAO,MAAM,CAAN,IAAW,OAAO,MAAP,KAAkB,CAA7B,GAAiC,aAAjC,GAAiD,IAAxD;AACD,OATH,EAUG,IAVH,CAUQ,GAVR,EAUa,CAVb,EAWG,IAXH,CAWQ,GAXR,EAWa,CAXb,EAWgB,KAXhB,CAWsB,SAXtB,EAWiC,CAXjC,EAYG,IAZH,CAYQ,MAZR,EAaG,UAbH,GAcG,KAdH,CAcS,SAdT,EAcoB,CAdpB;AAeD;;;+BAEU,S,EAAW,S,EACX,U,EAAY,Q,EAAU;AAC/B,UAAI,YAAY,KAAK,yBAAL,CAA+B,SAA/B,CAAhB;;AAEA,SAAG,MAAH,CAAU,WAAW,UAArB,EACG,UADH,GAEG,IAFH,CAEQ,WAFR,EAEqB,SAFrB,EAGG,EAHH,CAGM,KAHN,EAGa,QAHb;;AAKA,SAAG,SAAH,CAAa,KAAK,KAAL,CAAW,QAAX,GAAsB,QAAnC,EACG,KADH,CACS,SADT,EACoB,CADpB,EAEG,MAFH;AAGD;;;gCAEW;AACV,aAAO,KAAK,OAAL,CAAa,SAAb,GAAyB,KAAK,OAAL,CAAa,GAAb,GAAmB,GAAnD;AACD;;;+BAEU;AACT,aAAO,KAAP;AACD;;;sDAEiC,CAEjC;;;qDAEgC;AAC/B,aAAO,aAAP;AACD;;;8CAEyB,S,EAAW;AACnC,UAAI,YAAY,KAAK,OAAL,CAAa,GAA7B;AACA,UAAI,0BAA0B,KAAK,0BAAL,CAAgC,SAAhC,CAA9B;AACA,aACE,gBACA,YADA,GACe,SADf,GAC2B,KAD3B,GACmC,uBADnC,GAC6D,GAF/D;AAID;;;+CAE0B,S,EAAW;AACpC;AACA,UAAI,MAAM,KAAK,oBAAL,EAAV;AAAA,UACE,SAAS,KAAK,OAAL,CAAa,SADxB;AAAA,UAEE,QAAQ,KAAK,OAAL,CAAa,QAFvB;AAAA,UAGE,SAHF;;AAKA;AACA,UAAI,CAAC,KAAK,OAAL,CAAa,UAAlB,EAA8B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAI,KAAK,OAAL,CAAa,iBAAb,KAAmC,WAAvC,EAAoD;AAClD,iBAAO,SAAS,CAAT,GAAa,aAAa,SAAS,KAAT,GAAiB,CAA9B,CAAb,GAAgD,MAAM,CAAtD,GAA0D,CAAjE;AACD,SAFD,MAEO;AACL,sBAAY,QAAQ,aAAa,SAAS,KAAtB,CAAR,GAAuC,MAAM,CAAzD;AACA,cAAI,MAAM,CAAV,EAAa;AACX,mBAAO,SAAP;AACD,WAFD,MAEO;AACL,mBAAO,YAAY,CAAZ,GAAiB,IAAI,SAA5B;AACD;AACF;AACF;;AAED;AACA;AACA,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB;AACA,aAAK,UAAL,GAAkB,CAAC,KAAK,OAAL,CAAa,UAAb,CAAwB,CAAxB,IAA6B,KAA7B,GAAqC,CAAtC,CAAlB;AACA,YAAI,aAAJ;AACA;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,OAAL,CAAa,UAAb,CAAwB,MAA5C,EAAoD,GAApD,EAAyD;AACvD,0BAAgB,KAAK,UAAL,CAAgB,IAAI,CAApB,CAAhB;AACA,eAAK,UAAL,CAAgB,CAAhB,IAAqB,gBAAgB,KAAK,qBAAL,CAA2B,IAAI,CAA/B,CAArC;AACD;AACF;;AAED,aAAO,KAAK,UAAL,CAAgB,SAAhB,CAAP;AACD;;;qDAEgC;AAC/B,aAAQ,KAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,OAAL,CAAa,MAAtC,GAAgD,CAAC,CAAxD;AACD;;;kDAE6B;AAC5B,aAAO,KAAK,OAAL,CAAa,QAAb,GAAwB,CAAC,CAAhC;AACD;;;;EA9IiC,M;;;;;;;;;;;;;;;;;IC1qBvB,Y,WAAA,Y;AAEX,wBAAY,KAAZ,EAAmB;AAAA;;AACjB,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,MAAL,GAAc,cAAd;AACD;;;;+BAUU;AACT,aAAO,KAAK,MAAZ;AACD;;;kCAEa;AACZ,aAAO,EAAP;AACD;;;gCAdkB,K,EAAO;AACxB,UAAI,MAAM,KAAV,EAAiB;AACf,eAAO,IAAI,YAAJ,CAAiB,KAAjB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAI,mBAAJ,CAAwB,KAAxB,CAAP;AACD;AACF;;;;;;IAWU,mB,WAAA,mB;;;AAEX,+BAAY,KAAZ,EAAmB;AAAA;;AAAA,0IACX,KADW;;AAEjB,UAAK,MAAL,GAAc,qBAAd;AAFiB;AAGlB;;;;+BAEU;AACT,WAAK,MAAL,CAAY,KAAZ,GAAoB,EAApB;;AAEE;AACF,UAAI,KAAK,MAAL,CAAY,KAAZ,GAAoB,CAAxB,EAA2B;AACzB,aAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,CAAuB;AACrB,gBAAM,GADe;AAErB,cAAI;AACF,mBAAO,CADL;AAEF,kBAAM,KAAK,MAAL,CAAY,KAFhB;AAGF,mBAAO,KAAK,MAAL,CAAY;AAHjB;AAFiB,SAAvB;AAQD;;AAED,aAAO,KAAK,MAAZ;AACD;;;kCAEa;AACZ,aAAO,SAAP;AACD;;;;EA3BsC,Y;;;;;;;;;;;;;ICxB5B,M,WAAA,M;AAEX,kBAAY,MAAZ,EAAoB;AAAA;;AAClB,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,YAAL,GAAoB,KAAK,UAAL,CAAgB,KAAK,OAAL,CAAa,UAA7B,CAApB;AACD;;AAED;;;;;yCACqB,S,EAAW;AAC9B,UAAI,KAAK,OAAL,CAAa,UAAjB,EAA6B;AAC3B,YAAI,aAAa,KAAK,OAAL,CAAa,UAAb,CAAwB,SAAxB,CAAjB;AACA,YAAI,sBAAsB,MAA1B,EAAkC;AAChC,iBAAO,OAAO,IAAP,CAAY,UAAZ,EAAwB,CAAxB,EAA2B,MAAlC;AACD,SAFD,MAEO;AACL,iBAAO,WAAW,MAAlB;AACD;AACF,OAPD,MAOO;AACL,eAAO,KAAK,OAAL,CAAa,MAAb,IAAuB,CAA9B;AACD;AACF;;AAED;;;;+BACW,W,EAAa;AACtB,UAAI,UAAJ,EAAgB,GAAhB,EAAqB,SAArB;;AAEA;AACA,UAAI,CAAC,WAAL,EAAkB;AAChB,eAAO,WAAP;AACD;;AAED;AACA,mBAAa,EAAb;;AAEA;AACA,WAAK,GAAL,IAAY,WAAZ,EAAyB;AACvB,oBAAY,YAAY,GAAZ,CAAZ;AACA,YAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,cAAI,KAAK,OAAL,CAAa,WAAb,KAA6B,UAAjC,EAA6C;AAC3C,wBAAY,UAAU,KAAV,CAAgB,EAAhB,EAAoB,OAApB,EAAZ;AACD;AACD,qBAAW,IAAX,CAAgB;AACd,uBAAW,SADG;AAEd,uBAAW,KAAK,kBAAL,CAAwB,UAAU,MAAlC;AAFG,WAAhB;AAID,SARD,MAQO;AACL,qBAAW,IAAX,CAAgB;AACd,uBAAW,OAAO,IAAP,CAAY,SAAZ,EAAuB,CAAvB,CADG;AAEd,uBAAW,UAAU,OAAO,IAAP,CAAY,SAAZ,EAAuB,CAAvB,CAAV;AAFG,WAAhB;AAID;AACF;;AAED,aAAO,UAAP;AACD;;AAED;;;;uCACmB,M,EAAQ;AACzB,UAAI,QAAQ,EAAZ;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,cAAM,IAAN,CAAW,IAAX;AACD;;AAED,aAAO,KAAP;AACD;;;+BAEU,Y,EAAc;AACvB,UAAI,KAAK,YAAT,EAAuB;AACrB,eAAO,KAAK,YAAL,CAAkB,YAAlB,EAAgC,SAAhC,CAA0C,MAAjD;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF;;AAED;;;;gCACY,Y,EAAc,S,EAAW;AACnC,UAAI,KAAK,YAAT,EAAuB;AACrB,eAAO,KAAK,YAAL,CAAkB,YAAlB,EAAgC,SAAhC,CAA0C,SAA1C,CAAP;AACD,OAFD,MAEO;AACL,eAAO,EAAP;AACD;AACF;;AAED;AACA;AACA;;;;2BACO,Y,EAAc,S,EAAW,S,EAAW;AACzC,UAAI,KAAK,YAAT,EAAuB;AACrB,YAAI,OACF,KAAK,YAAL,CAAkB,YAAlB,EAAgC,SAAhC,CAA0C,SAA1C,EAAqD,SAArD,CADF;AAEA,eAAO,OAAO,IAAP,IAAe,CAAtB;AACD,OAJD,MAIO;AACL,eAAO,IAAP;AACD;AACF;;;;;;;;;;;;;;;;;IC9FU,K,WAAA,K;;AAEX;;;;;;;;;;;AAWA,iBAAY,IAAZ,EAAkB;AAAA;;AAChB,SAAK,KAAL,GAAa,IAAb;AACD;;;;+BAEU;AACT,aAAO,KAAK,KAAL,CAAW,KAAlB;AACD;;;8BAES;AACR,aAAO,KAAK,KAAL,CAAW,IAAlB;AACD;;;gCAEW;AACV,aAAO,KAAK,KAAL,CAAW,IAAX,GAAkB,KAAK,KAAL,CAAW,KAApC;AACD;;;6BAEQ,S,EAAW;AAClB,UAAI,EAAE,YAAY,KAAK,KAAnB,CAAJ,EAA+B;AAC7B,eAAO,KAAK,SAAL,CAAe,SAAf,CAAP;AACD,OAFD,MAEO,IAAI,YAAY,KAAK,KAAjB,IAA0B,KAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB,CAA9B,EAA4D;AACjE,eAAO,KAAK,SAAL,CAAe,SAAf,CAAP;AACD,OAFM,MAEA;AACL,eAAO,aAAP;AACD;AACF;;;8BAES,S,EAAW;AACnB,UAAI,MAAM,OAAN,CAAc,KAAK,KAAL,CAAW,KAAzB,CAAJ,EAAqC;AACnC,eAAO,KAAK,KAAL,CAAW,KAAX,CAAiB,SAAjB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAK,KAAL,CAAW,KAAlB;AACD;AACF;;;;;;;;;;;;;;;;AC7CH;;IAAY,E;;;;;;AAEZ;IACa,c,WAAA,c;AAEX,0BAAY,IAAZ,EAAkB;AAAA;;AAChB,SAAK,KAAL,GAAa,IAAb;AACD;;;;+BAEU;AACT,UAAI,QACF,GACG,MADH,CACU,KAAK,KADf,EAEG,MAFH,CAEU,eAFV,EAGG,IAHH,EADF;AAKA,aAAO,KAAP;AACD;;AAED;;;;kCACc;AACZ,UAAI,WACF,GACG,MADH,CACU,KAAK,KAAL,CAAW,UADrB,EAEG,MAFH,CAEU,2BAFV,EAGG,IAHH,EADF;AAKA,aAAO,QAAP;AACD;;;;;;;;;;;;;;;;AC1BH;;AACA;;;;;;;;IAEa,U,WAAA,U;AAEX,sBAAY,OAAZ,EAAqB,MAArB,EAA6B,IAA7B,EAAmC;AAAA;;AACjC,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,MAAL,GAAc,KAAK,QAAL,CAAc,QAAd,EAAd;AACA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,MAAL,GAAc,iBAAU,KAAK,OAAf,CAAd;AACA,SAAK,gBAAL,GAAwB,CAAxB;AACD;;AAED;;;;;kCASc,Q,EAAU,c,EAAgB;AACtC,UAAI,cAAJ,EAAoB;AAClB,eAAO,SAAS,MAAT,CAAgB,KAAK,aAAL,EAAhB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,QAAP;AACD;AACF;;;kCAEa,Q,EAAU,c,EAAgB;AACtC,UAAI,cAAJ,EAAoB;AAClB,eAAO,SAAS,MAAT,CAAgB,KAAK,aAAL,EAAhB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,QAAP;AACD;AACF;;;2BAEM,S,EAAW,Y,EAAc,S,EAAW;AACvC;;AAEF,UAAI,OAAO,IAAX;;AAEA,kBAAY,UAAU,MAAV,CAAiB,GAAjB,EACT,IADS,CACJ,OADI,EACK,OADL,EAET,IAFS,CAEJ,WAFI,EAES,UAAU,KAAK,MAAL,CAAY,EAAtB,GAA2B,2BAFpC,CAAZ;;AAIE;AACF,UAAI,iBAAiB,KAAK,WAAL,CAAiB,SAAjB,EAA4B,YAA5B,EAA0C,SAA1C,CAArB;AACA,UAAI,iBAAiB,KAAK,WAAL,CAAiB,SAAjB,EAA4B,YAA5B,EAA0C,SAA1C,CAArB;;AAEE;AACF,WAAK,eAAL,CAAqB,SAArB,EAAgC,YAAhC,EAA8C,SAA9C;;AAEE;AACF,UAAI,WAAW,EAAf;AACA,iBAAW,KAAK,aAAL,CAAmB,QAAnB,EAA6B,cAA7B,CAAX;AACA,iBAAW,KAAK,aAAL,CAAmB,QAAnB,EAA6B,cAA7B,CAAX;;AAEA,UAAI,UAAU,GAAd;AACA,UAAI,OAAO,EAAX;AACA,UAAI,gBAAgB,KAAK,aAAL,EAApB;AACA,UAAI,eAAe,KAAK,KAAL,CAAW,MAA1B,IAAoC,EAAE,cAAc,KAAK,KAAL,CAAW,MAA3B,CAAxC,EAA4E;AAC1E;AACA,eAAO,KAAK,MAAL,CAAY,WAAZ,CAAwB,YAAxB,EAAsC,SAAtC,EAAiD,CAAjD,CAAP;AACA,YAAI,aAAJ,EAAmB;AACjB,oBAAU,KAAV;AACD;AACF,OAND,MAMO,IAAI,aAAJ,EAAmB;AACxB;AACA,kBAAU,IAAV;AACA,eAAO,aAAP;AACD,OAJM,MAIA,IAAI,EAAE,eAAe,KAAK,KAAL,CAAW,MAA5B,CAAJ,EAAyC;AAC9C;AACA,kBAAU,GAAV;AACD;;AAED;AACA,gBAAU,MAAV,CAAiB,GAAjB,EACG,IADH,CACQ,OADR,EACiB,mBADjB,EAEG,SAFH,CAEa,MAFb,EAGG,IAHH,CAGQ,QAHR,EAIG,KAJH,GAKG,MALH,CAKU,MALV,EAMG,IANH,CAMQ,MANR,EAMgB,IANhB,EAOG,KAPH,CAOS,cAPT,EAOyB,OAPzB,EAQG,IARH,CAQQ,QARR,EAQkB,UAAS,CAAT,EAAY,CAAZ,EAAe;AAC7B,eAAO,KAAK,MAAL,CAAY,cAAZ,CAA2B,YAA3B,EAAyC,SAAzC,EAAoD,CAApD,CAAP;AACD,OAVH,EAWG,IAXH,CAWQ,cAXR,EAWwB,UAAS,CAAT,EAAY;AAChC,eAAQ,iBAAiB,CAAjB,GAAqB,EAAE,WAAvB,GAAqC,CAA7C;AACD,OAbH,EAcG,IAdH,CAcQ,GAdR,EAca,UAAS,CAAT,EAAY;AACrB,eAAO,EAAE,IAAT;AACD,OAhBH,EAgBK,IAhBL,CAgBU,OAhBV,EAgBmB,UAAS,CAAT,EAAY;AAC3B,eAAO,EAAE,KAAT;AACD,OAlBH;;AAoBA,aAAO,QAAP;AACD;;;oCAEe,S,EAAW,Y,EAAc,S,EAAW;AAClD,UAAI,EAAE,cAAc,KAAK,OAArB,CAAJ,EAAmC;AACjC;AACD;;AAED,UAAI,WAAW,KAAK,OAAL,CAAa,QAAb,CAAsB,MAAtB,CAA6B,UAAS,KAAT,EAAgB;AAC1D,eAAO,MAAM,GAAN,GAAY,CAAZ,KAAkB,YAAzB;AACD,OAFc,EAEZ,GAFY,CAER,UAAS,KAAT,EAAgB;AACrB,eAAO,iBAAU,KAAV,CAAP;AACD,OAJc,CAAf;;AAMA,UAAI,kBAAkB,UAAU,MAAV,CAAiB,GAAjB,EAAsB,IAAtB,CAA2B,OAA3B,EAAoC,WAApC,CAAtB;;AAEA,UAAI,OAAO,IAAX;AACA,UAAI,OAAO,KAAK,KAAhB;AACA,UAAI,eAAe,KAAK,aAAxB;;AAEA,sBAAgB,SAAhB,CAA0B,YAA1B,EACG,IADH,CACQ,QADR,EAEG,KAFH,GAGG,MAHH,CAGU,MAHV,EAIG,IAJH,CAIQ,OAJR,EAIiB,OAJjB,EAKG,IALH,CAKQ,GALR,EAKa,UAAS,KAAT,EAAgB;AACzB,YAAI,UAAU,KAAK,aAAL,CAAmB,KAAK,MAAxB,EAAgC,MAAM,QAAN,EAAhC,CAAd;AACA,eAAO,UAAU,YAAjB;AACD,OARH,EAQK,IARL,CAQU,GARV,EAQe,CARf,EASG,IATH,CASQ,OATR,EASiB,UAAS,KAAT,EAAgB;AAC7B,YAAI,WAAW,KAAK,aAAL,CAAmB,KAAK,MAAxB,EAAgC,MAAM,SAAN,EAAhC,CAAf;AACA,eAAO,WAAW,YAAlB;AACD,OAZH,EAYK,IAZL,CAYU,QAZV,EAYoB,KAAK,OAAL,CAAa,QAZjC,EAaG,KAbH,CAaS,MAbT,EAaiB,UAAS,KAAT,EAAgB;AAC7B,eAAO,MAAM,QAAN,CAAe,SAAf,CAAP;AACD,OAfH;AAgBD;;;;;AAED;oCACgB;AACZ;AACF,UAAI,UAAJ;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAtC,EAA8C,GAA9C,EAAmD;AACjD,YAAI,KAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB,EAAqB,IAArB,CAA0B,CAA1B,MAAiC,GAArC,EAA0C;AACxC,uBAAa,KAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB,CAAb;AACA;AACD;AACF;;AAED;AACA,UAAI,WAAW,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,GAA2B,CAA1C;AACA,UAAI,wBAAwB,KAAK,MAAL,CAAY,KAAZ,CAAkB,QAAlB,EAA4B,EAA5B,CAA+B,IAA3D;;AAEE;AACA;AACA;AACA;AACA;AACA;AACF,aAAO;AACL,YAAI,CADC;AAEL,YAAI,aAAa,WAAW,EAAX,CAAc,KAA3B,GAAmC,qBAFlC;AAGL,YAAI,qBAHC;AAIL,WAAG,KAAK,OAAL,CAAa,QAJX;AAKL,WAAG,KAAK,OAAL,CAAa,QAAb,GAAwB,KAAK;AAL3B,OAAP;AAOD;;;oCAEe;AACd,UAAI,IAAI,KAAK,aAAL,EAAR;AAAA,UACE,IAAI,EAAE,EAAF,GAAO,EAAE,CADf;;AAGA,UAAI,KAAK,aAAL,MAAwB,eAAe,KAAK,KAAL,CAAW,MAAtD,EAA8D;AAC5D;AACA;AACA;AACA;AACA,eAAO;AACL,iBAAO,EADF;AAEL,gBACE,MAAM,EAAE,CAAR,GAAY,KAAZ,GACA,GADA,GACM,CADN,GACU,KADV,GAEA,GAFA,IAEO,EAAE,EAAF,GAAO,EAAE,CAFhB,IAEqB,GAFrB,GAE4B,EAAE,CAAF,GAAM,CAFlC,GAEuC,GAFvC,GAE6C,CAF7C,GAEiD,GAFjD,GAEuD,EAAE,CAFzD,GAE6D,GAF7D,GAGA,GAHA,GAGM,EAAE,CAHR,GAGY,GAHZ,GAGkB,EAAE,CAHpB,GAGwB,GAHxB,GAIA,IAJA,GAIO,EAAE,CAJT,GAIa,GAJb,GAIoB,EAAE,CAAF,GAAM,CAJ1B,GAI+B,GAJ/B,GAIqC,EAAE,CAJvC,GAI2C;AAPxC,SAAP;AASD,OAdD,MAcO;AACL;AACA,eAAO,CAAC;AACN,iBAAO,EADD;AAEN,gBACE,MAAM,EAAE,CAAR,GAAY,KAAZ,GACA,GADA,IACO,IAAI,CADX,IACgB,KADhB,GAEA,GAFA,IAEO,IAAI,CAFX,IAEgB,GAFhB,GAEsB,EAAE,CAFxB,GAE4B,GAF5B,GAGA,GAHA,GAGM,EAAE,CAHR,GAGY,GAHZ,GAGkB,EAAE,CAHpB,GAGwB,GAHxB,GAIA,IAJA,GAIO,EAAE,CAJT,GAIa,GAJb,GAIoB,EAAE,CAAF,GAAM,CAJ1B,GAI+B,GAJ/B,GAIqC,EAAE,CAJvC,GAI2C;AAPvC,SAAD,EAQJ;AACD,iBAAO,MADN;AAED,gBACE,MAAM,CAAN,GAAU,KAAV,GACA,GADA,IACO,EAAE,EAAF,GAAO,EAAE,CADhB,IACqB,GADrB,GAC4B,EAAE,CAAF,GAAM,CADlC,GACuC,GADvC,GAC6C,CAD7C,GACiD,GADjD,GACuD,EAAE,CADzD,GAC6D,GAD7D,GAEA,GAFA,GAEM,CAFN,GAEU,GAFV,GAEgB,EAAE,CAFlB,GAEsB,GAFtB,GAGA,GAHA,IAGO,IAAI,CAHX,IAGgB,GAHhB,GAGsB,EAAE,CAHxB,GAG4B,GAH5B,GAIA,GAJA,IAIO,IAAI,CAJX,IAIgB;AAPjB,SARI,CAAP;AAiBD;AACF;;;oCAEe;AACd,UAAI,IAAI,KAAK,aAAL,EAAR;AAAA,UACE,IAAI,EAAE,EAAF,GAAO,EAAE,CADf;AAAA,UAEE,MAAM,EAAE,EAAF,GAAO,EAAE,CAFjB;;AAIA,UAAI,KAAK,aAAL,MAAwB,eAAe,KAAK,KAAL,CAAW,MAAtD,EAA8D;AAC5D,eAAO;AACL,iBAAO,EADF;AAEL,gBACE,MAAM,GAAN,GAAY,KAAZ,GACA,GADA,GACM,CADN,GACU,KADV,GAEA,GAFA,IAEO,EAAE,EAAF,GAAO,EAAE,CAFhB,IAEqB,GAFrB,GAE4B,EAAE,CAAF,GAAM,CAFlC,GAEuC,GAFvC,GAE6C,CAF7C,GAEiD,GAFjD,GAEuD,EAAE,CAFzD,GAE6D,GAF7D,GAGA,GAHA,GAGM,GAHN,GAGY,GAHZ,GAGkB,EAAE,CAHpB,GAGwB,GAHxB,GAIA,GAJA,IAIO,EAAE,EAAF,GAAO,EAAE,CAJhB,IAIqB,GAJrB,GAI4B,EAAE,CAAF,GAAM,CAJlC,GAIuC,GAJvC,GAI6C,GAJ7C,GAImD;AAPhD,SAAP;AASD,OAVD,MAUO;AACL;AACA,eAAO,CAAC;AACN,gBACE,MAAM,GAAN,GAAY,KAAZ,GACA,GADA,GACM,CADN,GACU,KADV,GAEA,GAFA,IAEO,EAAE,EAAF,GAAO,EAAE,CAFhB,IAEqB,GAFrB,GAE4B,EAAE,CAAF,GAAM,CAFlC,GAEuC,GAFvC,GAE6C,CAF7C,GAEiD,GAFjD,GAEuD,EAAE,CAFzD,GAE6D,GAF7D,GAGA,GAHA,GAGM,GAHN,GAGY,GAHZ,GAGkB,EAAE,CAHpB,GAGwB,GAHxB,GAIA,GAJA,GAIM,GAJN,GAIY;AANR,SAAD,EAOJ;AACD,iBAAO,MADN;AAED,gBACE,MAAM,GAAN,GAAY,IAAZ,GACA,GADA,IACO,EAAE,EAAF,GAAO,EAAE,CADhB,IACqB,GADrB,GAC4B,EAAE,CAAF,GAAM,CADlC,GACuC,GADvC,GAC6C,GAD7C,GACmD,GADnD,GACyD,EAAE,CAD3D,GAC+D,GAD/D,GAEA,GAFA,GAEM,GAFN,GAEY,GAFZ,GAEkB,EAAE,CAFpB,GAGA,GAHA,IAGO,MAAM,CAHb,IAGkB,GAHlB,GAGwB,EAAE,CAH1B,GAIA,GAJA,IAIO,MAAM,CAJb,IAIkB;AAPnB,SAPI,CAAP;AAgBD;AACF;;;oCAEe;AACd,aACE,KAAK,MAAL,CAAY,KAAZ,KACC,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,KAA6B,CAA7B,IAAkC,KAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB,EAAqB,IAArB,CAA0B,CAA1B,MAAiC,GADpE,CADF;AAID;;;;;AAED;iCACa,S,EAAW,Y,EAAc,S,EAAW,K,EAAO,G,EAAK;AAC3D,UAAI,OAAO,IAAX;AACA,UAAI,YAAY,QAAQ,GAAR,GAAc,CAAd,GAAkB,CAAlC;AACA,UAAI,OAAO,EAAX;AACA,UAAI,eAAe,KAAK,KAAL,CAAW,MAA1B,IAAoC,CAAE,KAAK,aAAL,EAA1C,EAAiE;AAC/D,eAAO,KAAK,MAAL,CAAY,WAAZ,CAAwB,YAAxB,EAAsC,SAAtC,EAAiD,SAAjD,CAAP;AACD;;AAED,gBAAU,SAAV,CAAoB,eAAe,GAAnC,EACG,IADH,CACQ,KADR,EAEG,KAFH,GAGG,MAHH,CAGU,MAHV,EAIG,IAJH,CAIQ,IAJR,EAIc,UAAS,CAAT,EAAY;AACtB,eAAO,KAAK,MAAL,CAAY,EAAZ,GAAiB,GAAjB,GAAuB,EAAE,IAAF,CAAO,OAAP,CAAe,GAAf,EAAoB,GAApB,CAA9B;AACD,OANH,EAOG,IAPH,CAOQ,OAPR,EAOiB,UAAS,CAAT,EAAY;AACzB,eAAO,UAAU,GAAV,GAAgB,QAAhB,GAA2B,EAAE,KAApC;AACD,OATH,EAUG,IAVH,CAUQ,GAVR,EAUa,UAAS,CAAT,EAAY;AACrB,YAAI,QAAQ,KAAK,KAAL,CAAW,KAAX,CAAiB,EAAE,EAAF,CAAK,KAAtB,CAAZ;AACA,YAAI,SAAS,KAAK,KAAL,CAAW,KAAX,CAAiB,EAAE,EAAF,CAAK,KAAtB,CAAb;;AAEA,YAAI,IAAI,QAAQ,MAAhB;;AAEA,eAAO,OAAO,KAAP,GAAe,KAAf,GACD,IADC,GACM,MADN,GACe,KADf,GAED,MAFC,GAEQ,KAAK,OAAL,CAAa,QAFrB,GAEgC,GAFhC,GAGD,KAHC,GAGO,MAHP,GAGgB,MAHvB;AAID,OApBH,EAqBG,KArBH,CAqBS,MArBT,EAqBiB,IArBjB;AAsBD;;;;;AAED;AACA;gCACY,S,EAAW,Y,EAAc,S,EAAW;AAC9C,UAAI,QAAQ,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,CAAyB,UAAS,IAAT,EAAe;AAClD,eAAO,KAAK,IAAL,CAAU,CAAV,MAAiB,GAAxB;AACD,OAFW,CAAZ;;AAIA,WAAK,YAAL,CAAkB,SAAlB,EAA6B,YAA7B,EAA2C,SAA3C,EAAsD,KAAtD,EAA6D,GAA7D;;AAEA,aAAO,QAAQ,MAAM,MAAd,CAAP;AACD;;;;;AAED;AACA;gCACY,S,EAAW,Y,EAAc,S,EAAW;AAC9C,UAAI,QAAQ,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,CAAyB,UAAS,IAAT,EAAe;AAClD,eAAO,KAAK,IAAL,CAAU,CAAV,MAAiB,GAAxB;AACD,OAFW,CAAZ;;AAIA,WAAK,YAAL,CAAkB,SAAlB,EAA6B,YAA7B,EAA2C,SAA3C,EAAsD,KAAtD,EAA6D,GAA7D;;AAEA,aAAO,QAAQ,MAAM,MAAd,CAAP;AACD;;;gCAlSkB,O,EAAS,M,EAAQ,I,EAAM;AACxC,UAAI,QAAQ,QAAR,GAAmB,kBAAnB,KAA0C,aAA9C,EAA6D;AAC3D,eAAO,IAAI,qBAAJ,CAA0B,OAA1B,EAAmC,MAAnC,EAA2C,IAA3C,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAI,qBAAJ,CAA0B,OAA1B,EAAmC,MAAnC,EAA2C,IAA3C,CAAP;AACD;AACF;;;;;;IAiSU,qB,WAAA,qB;;;AAEX,iCAAY,KAAZ,EAAmB,MAAnB,EAA2B,IAA3B,EAAiC;AAAA;;AAAA,8IACzB,KADyB,EAClB,MADkB,EACV,IADU;;AAE/B,UAAK,MAAL,GAAc,uBAAd;AAF+B;AAGhC;;;EALwC,U;;IAU9B,qB,WAAA,qB;;;AAEX,iCAAY,KAAZ,EAAmB,MAAnB,EAA2B,IAA3B,EAAiC;AAAA;;AAAA,+IACzB,KADyB,EAClB,MADkB,EACV,IADU;;AAE/B,WAAK,MAAL,GAAc,uBAAd;AACA,WAAK,WAAL,GAAmB,CAAnB;AAH+B;AAIhC;;;;kCAEa,Q,EAAU;AACtB,aAAO,SAAS,MAAT,CAAgB,KAAK,aAAL,EAAhB,CAAP;AACD;;;oCAEe;AACd,UAAI,IAAI,KAAK,aAAL,EAAR;AACA,QAAE,CAAF,GAAM,KAAK,WAAX;;AAEA,aAAO,CAAC;AACN,eAAO,MADD;AAEN,cAAM,OAAO,EAAE,EAAF,GAAO,CAAd,IAAmB,IAAnB,GACN,GADM,IACC,EAAE,EAAF,GAAO,EAAE,CAAT,GAAa,IADd,IACsB,KADtB,GAEN,GAFM,IAEC,EAAE,EAAF,GAAO,EAAE,CAAT,GAAa,IAFd,IAEsB,GAFtB,IAE6B,EAAE,CAAF,GAAM,CAFnC,IAEwC,GAFxC,GAGN,GAHM,IAGC,EAAE,EAAF,GAAO,CAHR,IAGa,GAHb,IAGoB,EAAE,CAAF,GAAM,CAH1B;AAFA,OAAD,EAMJ;AACD,eAAO,QADN;AAED,cAAM,OAAO,EAAE,EAAF,GAAO,EAAE,CAAT,GAAa,CAApB,IAAyB,IAAzB,GACN,GADM,IACC,EAAE,EAAF,GAAO,EAAE,CAAT,GAAa,CADd,IACmB,KADnB,GAEN,GAFM,IAEC,EAAE,EAAF,GAAO,EAAE,CAAT,GAAa,CAFd,IAEmB,GAFnB,GAEyB,EAAE,CAF3B,GAE+B,GAF/B,GAGN,GAHM,IAGC,EAAE,EAAF,GAAO,EAAE,CAAT,GAAa,CAHd,IAGmB,GAHnB,GAGyB,EAAE,CALhC;AAMD,qBAAa;AANZ,OANI,CAAP;AAcD;;;oCAEe;AACd,UAAI,IAAI,KAAK,aAAL,EAAR;AAAA,UACE,IAAI,EAAE,EAAF,GAAO,EAAE,CADf;AAAA,UAEE,IAAI,KAAK,WAAL,GAAmB,CAFzB;;AAIA,aAAO;AACL,eAAO,EADF;AAEL,cACA,OAAO,EAAE,EAAF,GAAO,CAAd,IAAmB,KAAnB,GACA,GADA,GACM,CADN,GACU,KADV,GAEA,GAFA,IAEO,EAAE,EAAF,GAAO,EAAE,CAFhB,IAEqB,GAFrB,GAE4B,EAAE,CAAF,GAAM,CAFlC,GAEuC,GAFvC,GAE6C,CAF7C,GAEiD,GAFjD,GAEuD,EAAE,CAFzD,GAE6D,GAF7D,GAGA,GAHA,IAGO,EAAE,EAAF,GAAO,CAHd,IAGmB,GAHnB,GAGyB,EAAE;AANtB,OAAP;AAQD;;;;EA7CwC,U","file":"ideogram.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// https://d3js.org/d3-collection/ Version 1.0.0. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map.prototype = {\n    constructor: Map,\n    has: function(key) {\n      return (prefix + key) in this;\n    },\n    get: function(key) {\n      return this[prefix + key];\n    },\n    set: function(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function() {\n      for (var property in this) if (property[0] === prefix) delete this[property];\n    },\n    keys: function() {\n      var keys = [];\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n      return keys;\n    },\n    values: function() {\n      var values = [];\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n      return entries;\n    },\n    size: function() {\n      var size = 0;\n      for (var property in this) if (property[0] === prefix) ++size;\n      return size;\n    },\n    empty: function() {\n      for (var property in this) if (property[0] === prefix) return false;\n      return true;\n    },\n    each: function(f) {\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  };\n\n  function map(object, f) {\n    var map = new Map;\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n\n      if (f == null) while (++i < n) map.set(i, object[i]);\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\n    }\n\n    // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n\n    return map;\n  }\n\n  function nest() {\n    var keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) return rollup != null\n          ? rollup(array) : (sortValues != null\n          ? array.sort(sortValues)\n          : array);\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function(values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array, sortKey = sortKeys[depth - 1];\n      if (rollup != null && depth >= keys.length) array = map.entries();\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n    }\n\n    return nest = {\n      object: function(array) { return apply(array, 0, createObject, setObject); },\n      map: function(array) { return apply(array, 0, createMap, setMap); },\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n      key: function(d) { keys.push(d); return nest; },\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n      sortValues: function(order) { sortValues = order; return nest; },\n      rollup: function(f) { rollup = f; return nest; }\n    };\n  }\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map();\n  }\n\n  function setMap(map, key, value) {\n    map.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set;\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n      var i = -1, n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);\n      else while (++i < n) set.add(f(object[i], i, object));\n    }\n\n    return set;\n  }\n\n  function keys(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  }\n\n  function values(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  }\n\n  function entries(map) {\n    var entries = [];\n    for (var key in map) entries.push({key: key, value: map[key]});\n    return entries;\n  }\n\n  exports.nest = nest;\n  exports.set = set;\n  exports.map = map;\n  exports.keys = keys;\n  exports.values = values;\n  exports.entries = entries;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","// https://d3js.org/d3-dispatch/ Version 1.0.0. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var noop = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  exports.dispatch = dispatch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","// https://d3js.org/d3-dsv/ Version 1.0.0. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"]\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function(row, i) {\n      return f(object(row), i, columns);\n    };\n  }\n\n  // Compute unique columns in order of discovery.\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n\n    rows.forEach(function(row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n\n    return columns;\n  }\n\n  function dsv(delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n]\"),\n        delimiterCode = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert, columns, rows = parseRows(text, function(row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns;\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var EOL = {}, // sentinel value for end-of-line\n          EOF = {}, // sentinel value for end-of-file\n          rows = [], // output rows\n          N = text.length,\n          I = 0, // current character index\n          n = 0, // the current line number\n          t, // the current token\n          eol; // is the current token followed by EOL?\n\n      function token() {\n        if (I >= N) return EOF; // special case: end of file\n        if (eol) return eol = false, EOL; // special case: end of line\n\n        // special case: quotes\n        var j = I, c;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, \"\\\"\");\n        }\n\n        // common case: find next delimiter or newline\n        while (I < N) {\n          var k = 1;\n          c = text.charCodeAt(I++);\n          if (c === 10) eol = true; // \\n\n          else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \\r|\\r\\n\n          else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n\n        // special case: last token before EOF\n        return text.slice(j);\n      }\n\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n\n      return rows;\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n        return columns.map(function(column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(text) {\n      return text == null ? \"\"\n          : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\\\"/g, \"\\\"\\\"\") + \"\\\"\"\n          : text;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatRows: formatRows\n    };\n  }\n\n  var csv = dsv(\",\");\n\n  var csvParse = csv.parse;\n  var csvParseRows = csv.parseRows;\n  var csvFormat = csv.format;\n  var csvFormatRows = csv.formatRows;\n\n  var tsv = dsv(\"\\t\");\n\n  var tsvParse = tsv.parse;\n  var tsvParseRows = tsv.parseRows;\n  var tsvFormat = tsv.format;\n  var tsvFormatRows = tsv.formatRows;\n\n  exports.dsvFormat = dsv;\n  exports.csvParse = csvParse;\n  exports.csvParseRows = csvParseRows;\n  exports.csvFormat = csvFormat;\n  exports.csvFormatRows = csvFormatRows;\n  exports.tsvParse = tsvParse;\n  exports.tsvParseRows = tsvParseRows;\n  exports.tsvFormat = tsvFormat;\n  exports.tsvFormatRows = tsvFormatRows;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","!function(e,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n(require(\"d3-request\")):\"function\"==typeof define&&define.amd?define([\"d3-request\"],n):(e.d3=e.d3||{},e.d3.promise=n(e.d3))}(this,function(e){\"use strict\";function n(e,n){return function(){for(var t=arguments.length,r=Array(t),o=0;t>o;o++)r[o]=arguments[o];return new Promise(function(t,o){var u=function(e,n){return e?void o(Error(e)):void t(n)};n.apply(e,r.concat(u))})}}var t={};return[\"csv\",\"tsv\",\"json\",\"xml\",\"text\",\"html\"].forEach(function(r){t[r]=n(e,e[r])}),t});","// https://d3js.org/d3-request/ Version 1.0.5. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-collection'), require('d3-dispatch'), require('d3-dsv')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'd3-collection', 'd3-dispatch', 'd3-dsv'], factory) :\n\t(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3));\n}(this, (function (exports,d3Collection,d3Dispatch,d3Dsv) { 'use strict';\n\nvar request = function(url, callback) {\n  var request,\n      event = d3Dispatch.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      mimeType,\n      headers = d3Collection.map(),\n      xhr = new XMLHttpRequest,\n      user = null,\n      password = null,\n      response,\n      responseType,\n      timeout = 0;\n\n  // If IE does not support CORS, use XDomainRequest.\n  if (typeof XDomainRequest !== \"undefined\"\n      && !(\"withCredentials\" in xhr)\n      && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n  \"onload\" in xhr\n      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n  function respond(o) {\n    var status = xhr.status, result;\n    if (!status && hasResponse(xhr)\n        || status >= 200 && status < 300\n        || status === 304) {\n      if (response) {\n        try {\n          result = response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function(e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);\n      else headers.set(name, value + \"\");\n      return request;\n    },\n\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return request;\n    },\n\n    timeout: function(value) {\n      if (!arguments.length) return timeout;\n      timeout = +value;\n      return request;\n    },\n\n    user: function(value) {\n      return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n    },\n\n    password: function(value) {\n      return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n    },\n\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function(value) {\n      response = value;\n      return request;\n    },\n\n    // Alias for send(\"GET\", …).\n    get: function(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n\n    // Alias for send(\"POST\", …).\n    post: function(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n\n    // If callback is non-null, it will be used for error and load events.\n    send: function(method, data, callback) {\n      xhr.open(method, url, true, user, password);\n      if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n      if (responseType != null) xhr.responseType = responseType;\n      if (timeout > 0) xhr.timeout = timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n\n    abort: function() {\n      xhr.abort();\n      return request;\n    },\n\n    on: function() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n};\n\nfunction fixCallback(callback) {\n  return function(error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\"\n      ? xhr.response // null on error\n      : xhr.responseText; // \"\" on error\n}\n\nvar type = function(defaultMimeType, response) {\n  return function(url, callback) {\n    var r = request(url).mimeType(defaultMimeType).response(response);\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return r.get(callback);\n    }\n    return r;\n  };\n};\n\nvar html = type(\"text/html\", function(xhr) {\n  return document.createRange().createContextualFragment(xhr.responseText);\n});\n\nvar json = type(\"application/json\", function(xhr) {\n  return JSON.parse(xhr.responseText);\n});\n\nvar text = type(\"text/plain\", function(xhr) {\n  return xhr.responseText;\n});\n\nvar xml = type(\"application/xml\", function(xhr) {\n  var xml = xhr.responseXML;\n  if (!xml) throw new Error(\"parse error\");\n  return xml;\n});\n\nvar dsv = function(defaultMimeType, parse) {\n  return function(url, row, callback) {\n    if (arguments.length < 3) callback = row, row = null;\n    var r = request(url).mimeType(defaultMimeType);\n    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n    r.row(row);\n    return callback ? r.get(callback) : r;\n  };\n};\n\nfunction responseOf(parse, row) {\n  return function(request$$1) {\n    return parse(request$$1.responseText, row);\n  };\n}\n\nvar csv = dsv(\"text/csv\", d3Dsv.csvParse);\n\nvar tsv = dsv(\"text/tab-separated-values\", d3Dsv.tsvParse);\n\nexports.request = request;\nexports.html = html;\nexports.json = json;\nexports.text = text;\nexports.xml = xml;\nexports.csv = csv;\nexports.tsv = tsv;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","// https://d3js.org Version 4.1.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var version = \"4.1.1\";\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;\n          else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;\n          else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n\n  function ascendingComparator(f) {\n    return function(d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  var bisectLeft = ascendingBisect.left;\n\n  function descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function number(x) {\n    return x === null ? NaN : +x;\n  }\n\n  function variance(array, f) {\n    var n = array.length,\n        m = 0,\n        a,\n        d,\n        s = 0,\n        i = -1,\n        j = 0;\n\n    if (f == null) {\n      while (++i < n) {\n        if (!isNaN(a = number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    else {\n      while (++i < n) {\n        if (!isNaN(a = number(f(array[i], i, array)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    if (j > 1) return s / (j - 1);\n  }\n\n  function deviation(array, f) {\n    var v = variance(array, f);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  function extent(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b,\n        c;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    return [a, c];\n  }\n\n  var array = Array.prototype;\n\n  var slice = array.slice;\n  var map = array.map;\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function identity(x) {\n    return x;\n  }\n\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  var e10 = Math.sqrt(50);\n  var e5 = Math.sqrt(10);\n  var e2 = Math.sqrt(2);\n  function ticks(start, stop, count) {\n    var step = tickStep(start, stop, count);\n    return range(\n      Math.ceil(start / step) * step,\n      Math.floor(stop / step) * step + step / 2, // inclusive\n      step\n    );\n  }\n\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;\n    else if (error >= e5) step1 *= 5;\n    else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  function sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n  }\n\n  function histogram() {\n    var value = identity,\n        domain = extent,\n        threshold = sturges;\n\n    function histogram(data) {\n      var i,\n          n = data.length,\n          x,\n          values = new Array(n);\n\n      for (i = 0; i < n; ++i) {\n        values[i] = value(data[i], i, data);\n      }\n\n      var xz = domain(values),\n          x0 = xz[0],\n          x1 = xz[1],\n          tz = threshold(values, x0, x1);\n\n      // Convert number of thresholds into uniform thresholds.\n      if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);\n\n      // Remove any thresholds outside the domain.\n      var m = tz.length;\n      while (tz[0] <= x0) tz.shift(), --m;\n      while (tz[m - 1] >= x1) tz.pop(), --m;\n\n      var bins = new Array(m + 1),\n          bin;\n\n      // Initialize bins.\n      for (i = 0; i <= m; ++i) {\n        bin = bins[i] = [];\n        bin.x0 = i > 0 ? tz[i - 1] : x0;\n        bin.x1 = i < m ? tz[i] : x1;\n      }\n\n      // Assign data to bins by value, ignoring any outside the domain.\n      for (i = 0; i < n; ++i) {\n        x = values[i];\n        if (x0 <= x && x <= x1) {\n          bins[bisectRight(tz, x, 0, m)].push(data[i]);\n        }\n      }\n\n      return bins;\n    }\n\n    histogram.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n    };\n\n    histogram.domain = function(_) {\n      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n    };\n\n    histogram.thresholds = function(_) {\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n    };\n\n    return histogram;\n  }\n\n  function threshold(array, p, f) {\n    if (f == null) f = number;\n    if (!(n = array.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);\n    if (p >= 1) return +f(array[n - 1], n - 1, array);\n    var n,\n        h = (n - 1) * p,\n        i = Math.floor(h),\n        a = +f(array[i], i, array),\n        b = +f(array[i + 1], i + 1, array);\n    return a + (b - a) * (h - i);\n  }\n\n  function freedmanDiaconis(values, min, max) {\n    values = map.call(values, number).sort(ascending);\n    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function scott(values, min, max) {\n    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function max(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;\n    }\n\n    return a;\n  }\n\n  function mean(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1,\n        j = n;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;\n    }\n\n    if (j) return s / j;\n  }\n\n  function median(array, f) {\n    var numbers = [],\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);\n    }\n\n    return threshold(numbers.sort(ascending), 0.5);\n  }\n\n  function merge(arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n\n    return merged;\n  }\n\n  function min(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;\n    }\n\n    return a;\n  }\n\n  function pairs(array) {\n    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [p, p = array[++i]];\n    return pairs;\n  }\n\n  function permute(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  }\n\n  function scan(array, compare) {\n    if (!(n = array.length)) return;\n    var i = 0,\n        n,\n        j = 0,\n        xi,\n        xj = array[j];\n\n    if (!compare) compare = ascending;\n\n    while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;\n\n    if (compare(xj, xj) === 0) return j;\n  }\n\n  function shuffle(array, i0, i1) {\n    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n\n    return array;\n  }\n\n  function sum(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.\n    }\n\n    else {\n      while (++i < n) if (a = +f(array[i], i, array)) s += a;\n    }\n\n    return s;\n  }\n\n  function transpose(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  }\n\n  function length(d) {\n    return d.length;\n  }\n\n  function zip() {\n    return transpose(arguments);\n  }\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map$1.prototype = {\n    constructor: Map,\n    has: function(key) {\n      return (prefix + key) in this;\n    },\n    get: function(key) {\n      return this[prefix + key];\n    },\n    set: function(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function() {\n      for (var property in this) if (property[0] === prefix) delete this[property];\n    },\n    keys: function() {\n      var keys = [];\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n      return keys;\n    },\n    values: function() {\n      var values = [];\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n      return entries;\n    },\n    size: function() {\n      var size = 0;\n      for (var property in this) if (property[0] === prefix) ++size;\n      return size;\n    },\n    empty: function() {\n      for (var property in this) if (property[0] === prefix) return false;\n      return true;\n    },\n    each: function(f) {\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  };\n\n  function map$1(object, f) {\n    var map = new Map;\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n\n      if (f == null) while (++i < n) map.set(i, object[i]);\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\n    }\n\n    // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n\n    return map;\n  }\n\n  function nest() {\n    var keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) return rollup != null\n          ? rollup(array) : (sortValues != null\n          ? array.sort(sortValues)\n          : array);\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map$1(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function(values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array, sortKey = sortKeys[depth - 1];\n      if (rollup != null && depth >= keys.length) array = map.entries();\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n    }\n\n    return nest = {\n      object: function(array) { return apply(array, 0, createObject, setObject); },\n      map: function(array) { return apply(array, 0, createMap, setMap); },\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n      key: function(d) { keys.push(d); return nest; },\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n      sortValues: function(order) { sortValues = order; return nest; },\n      rollup: function(f) { rollup = f; return nest; }\n    };\n  }\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map$1();\n  }\n\n  function setMap(map, key, value) {\n    map.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map$1.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set;\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n      var i = -1, n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);\n      else while (++i < n) set.add(f(object[i], i, object));\n    }\n\n    return set;\n  }\n\n  function keys(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  }\n\n  function values(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  }\n\n  function entries(map) {\n    var entries = [];\n    for (var key in map) entries.push({key: key, value: map[key]});\n    return entries;\n  }\n\n  function uniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return Math.random() * max + min;\n    };\n  }\n\n  function normal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  function logNormal() {\n    var randomNormal = normal.apply(this, arguments);\n    return function() {\n      return Math.exp(randomNormal());\n    };\n  }\n\n  function irwinHall(n) {\n    return function() {\n      for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();\n      return sum;\n    };\n  }\n\n  function bates(n) {\n    var randomIrwinHall = irwinHall(n);\n    return function() {\n      return randomIrwinHall() / n;\n    };\n  }\n\n  function exponential(lambda) {\n    return function() {\n      return -Math.log(1 - Math.random()) / lambda;\n    };\n  }\n\n  function linear(t) {\n    return +t;\n  }\n\n  function quadIn(t) {\n    return t * t;\n  }\n\n  function quadOut(t) {\n    return t * (2 - t);\n  }\n\n  function quadInOut(t) {\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n  }\n\n  function cubicIn(t) {\n    return t * t * t;\n  }\n\n  function cubicOut(t) {\n    return --t * t * t + 1;\n  }\n\n  function easeCubicInOut(t) {\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n  }\n\n  var exponent = 3;\n\n  var polyIn = (function custom(e) {\n    e = +e;\n\n    function polyIn(t) {\n      return Math.pow(t, e);\n    }\n\n    polyIn.exponent = custom;\n\n    return polyIn;\n  })(exponent);\n\n  var polyOut = (function custom(e) {\n    e = +e;\n\n    function polyOut(t) {\n      return 1 - Math.pow(1 - t, e);\n    }\n\n    polyOut.exponent = custom;\n\n    return polyOut;\n  })(exponent);\n\n  var polyInOut = (function custom(e) {\n    e = +e;\n\n    function polyInOut(t) {\n      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n    }\n\n    polyInOut.exponent = custom;\n\n    return polyInOut;\n  })(exponent);\n\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  function sinIn(t) {\n    return 1 - Math.cos(t * halfPi);\n  }\n\n  function sinOut(t) {\n    return Math.sin(t * halfPi);\n  }\n\n  function sinInOut(t) {\n    return (1 - Math.cos(pi * t)) / 2;\n  }\n\n  function expIn(t) {\n    return Math.pow(2, 10 * t - 10);\n  }\n\n  function expOut(t) {\n    return 1 - Math.pow(2, -10 * t);\n  }\n\n  function expInOut(t) {\n    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\n  }\n\n  function circleIn(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n\n  function circleOut(t) {\n    return Math.sqrt(1 - --t * t);\n  }\n\n  function circleInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n  }\n\n  var b1 = 4 / 11;\n  var b2 = 6 / 11;\n  var b3 = 8 / 11;\n  var b4 = 3 / 4;\n  var b5 = 9 / 11;\n  var b6 = 10 / 11;\n  var b7 = 15 / 16;\n  var b8 = 21 / 22;\n  var b9 = 63 / 64;\n  var b0 = 1 / b1 / b1;\n  function bounceIn(t) {\n    return 1 - bounceOut(1 - t);\n  }\n\n  function bounceOut(t) {\n    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n  }\n\n  function bounceInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n  }\n\n  var overshoot = 1.70158;\n\n  var backIn = (function custom(s) {\n    s = +s;\n\n    function backIn(t) {\n      return t * t * ((s + 1) * t - s);\n    }\n\n    backIn.overshoot = custom;\n\n    return backIn;\n  })(overshoot);\n\n  var backOut = (function custom(s) {\n    s = +s;\n\n    function backOut(t) {\n      return --t * t * ((s + 1) * t + s) + 1;\n    }\n\n    backOut.overshoot = custom;\n\n    return backOut;\n  })(overshoot);\n\n  var backInOut = (function custom(s) {\n    s = +s;\n\n    function backInOut(t) {\n      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n    }\n\n    backInOut.overshoot = custom;\n\n    return backInOut;\n  })(overshoot);\n\n  var tau = 2 * Math.PI;\n  var amplitude = 1;\n  var period = 0.3;\n  var elasticIn = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticIn(t) {\n      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\n    }\n\n    elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n    elasticIn.period = function(p) { return custom(a, p); };\n\n    return elasticIn;\n  })(amplitude, period);\n\n  var elasticOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticOut(t) {\n      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\n    }\n\n    elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticOut.period = function(p) { return custom(a, p); };\n\n    return elasticOut;\n  })(amplitude, period);\n\n  var elasticInOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticInOut(t) {\n      return ((t = t * 2 - 1) < 0\n          ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\n          : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\n    }\n\n    elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticInOut.period = function(p) { return custom(a, p); };\n\n    return elasticInOut;\n  })(amplitude, period);\n\n  function area(polygon) {\n    var i = -1,\n        n = polygon.length,\n        a,\n        b = polygon[n - 1],\n        area = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n\n    return area / 2;\n  }\n\n  function centroid(polygon) {\n    var i = -1,\n        n = polygon.length,\n        x = 0,\n        y = 0,\n        a,\n        b = polygon[n - 1],\n        c,\n        k = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      k += c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n\n    return k *= 3, [x / k, y / k];\n  }\n\n  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n  // right, +y is up). Returns a positive value if ABC is counter-clockwise,\n  // negative if clockwise, and zero if the points are collinear.\n  function cross(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n\n  function lexicographicOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n\n  // Computes the upper convex hull per the monotone chain algorithm.\n  // Assumes points.length >= 3, is sorted by x, unique in y.\n  // Returns an array of indices into points in left-to-right order.\n  function computeUpperHullIndexes(points) {\n    var n = points.length,\n        indexes = [0, 1],\n        size = 2;\n\n    for (var i = 2; i < n; ++i) {\n      while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n      indexes[size++] = i;\n    }\n\n    return indexes.slice(0, size); // remove popped points\n  }\n\n  function hull(points) {\n    if ((n = points.length) < 3) return null;\n\n    var i,\n        n,\n        sortedPoints = new Array(n),\n        flippedPoints = new Array(n);\n\n    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n    sortedPoints.sort(lexicographicOrder);\n    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n    var upperIndexes = computeUpperHullIndexes(sortedPoints),\n        lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n    // Construct the hull polygon, removing possible duplicate endpoints.\n    var skipLeft = lowerIndexes[0] === upperIndexes[0],\n        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n        hull = [];\n\n    // Add upper hull in right-to-l order.\n    // Then add lower hull in left-to-right order.\n    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n    return hull;\n  }\n\n  function contains(polygon, point) {\n    var n = polygon.length,\n        p = polygon[n - 1],\n        x = point[0], y = point[1],\n        x0 = p[0], y0 = p[1],\n        x1, y1,\n        inside = false;\n\n    for (var i = 0; i < n; ++i) {\n      p = polygon[i], x1 = p[0], y1 = p[1];\n      if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n      x0 = x1, y0 = y1;\n    }\n\n    return inside;\n  }\n\n  function length$1(polygon) {\n    var i = -1,\n        n = polygon.length,\n        b = polygon[n - 1],\n        xa,\n        ya,\n        xb = b[0],\n        yb = b[1],\n        perimeter = 0;\n\n    while (++i < n) {\n      xa = xb;\n      ya = yb;\n      b = polygon[i];\n      xb = b[0];\n      yb = b[1];\n      xa -= xb;\n      ya -= yb;\n      perimeter += Math.sqrt(xa * xa + ya * ya);\n    }\n\n    return perimeter;\n  }\n\nvar   pi$1 = Math.PI;\nvar   tau$1 = 2 * pi$1;\n  var epsilon = 1e-6;\n  var tauEpsilon = tau$1 - epsilon;\n  function Path() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = [];\n  }\n\n  function path() {\n    return new Path;\n  }\n\n  Path.prototype = path.prototype = {\n    constructor: Path,\n    moveTo: function(x, y) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y);\n    },\n    closePath: function() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._.push(\"Z\");\n      }\n    },\n    lineTo: function(x, y) {\n      this._.push(\"L\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    quadraticCurveTo: function(x1, y1, x, y) {\n      this._.push(\"Q\", +x1, \",\", +y1, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      this._.push(\"C\", +x1, \",\", +y1, \",\", +x2, \",\", +y2, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    arcTo: function(x1, y1, x2, y2, r) {\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n      var x0 = this._x1,\n          y0 = this._y1,\n          x21 = x2 - x1,\n          y21 = y2 - y1,\n          x01 = x0 - x1,\n          y01 = y0 - y1,\n          l01_2 = x01 * x01 + y01 * y01;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x1,y1).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n      else if (!(l01_2 > epsilon));\n\n      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n      // Equivalently, is (x1,y1) coincident with (x2,y2)?\n      // Or, is the radius zero? Line to (x1,y1).\n      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n        this._.push(\n          \"L\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        var x20 = x2 - x0,\n            y20 = y2 - y0,\n            l21_2 = x21 * x21 + y21 * y21,\n            l20_2 = x20 * x20 + y20 * y20,\n            l21 = Math.sqrt(l21_2),\n            l01 = Math.sqrt(l01_2),\n            l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n            t01 = l / l01,\n            t21 = l / l21;\n\n        // If the start tangent is not coincident with (x0,y0), line to.\n        if (Math.abs(t01 - 1) > epsilon) {\n          this._.push(\n            \"L\", x1 + t01 * x01, \",\", y1 + t01 * y01\n          );\n        }\n\n        this._.push(\n          \"A\", r, \",\", r, \",0,0,\", +(y01 * x20 > x01 * y20), \",\", this._x1 = x1 + t21 * x21, \",\", this._y1 = y1 + t21 * y21\n        );\n      }\n    },\n    arc: function(x, y, r, a0, a1, ccw) {\n      x = +x, y = +y, r = +r;\n      var dx = r * Math.cos(a0),\n          dy = r * Math.sin(a0),\n          x0 = x + dx,\n          y0 = y + dy,\n          cw = 1 ^ ccw,\n          da = ccw ? a0 - a1 : a1 - a0;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x0,y0).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", x0, \",\", y0\n        );\n      }\n\n      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n        this._.push(\n          \"L\", x0, \",\", y0\n        );\n      }\n\n      // Is this arc empty? We’re done.\n      if (!r) return;\n\n      // Is this a complete circle? Draw two arcs to complete the circle.\n      if (da > tauEpsilon) {\n        this._.push(\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", x - dx, \",\", y - dy,\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", this._x1 = x0, \",\", this._y1 = y0\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        if (da < 0) da = da % tau$1 + tau$1;\n        this._.push(\n          \"A\", r, \",\", r, \",0,\", +(da >= pi$1), \",\", cw, \",\", this._x1 = x + r * Math.cos(a1), \",\", this._y1 = y + r * Math.sin(a1)\n        );\n      }\n    },\n    rect: function(x, y, w, h) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y, \"h\", +w, \"v\", +h, \"h\", -w, \"Z\");\n    },\n    toString: function() {\n      return this._.join(\"\");\n    }\n  };\n\n  function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  }\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {data: d},\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d, i, n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, inherit the existing extent.\n    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n        case 0: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n          break;\n        }\n        case 1: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n          break;\n        }\n        case 2: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n          break;\n        }\n        case 3: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n          break;\n        }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    }\n\n    // If the quadtree covers the point already, just return.\n    else return this;\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data() {\n    var data = [];\n    this.visit(function(node) {\n      if (!node.length) do data.push(node.data); while (node = node.next)\n    });\n    return data;\n  }\n\n  function tree_extent(_) {\n    return arguments.length\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node)\n          || (x1 = q.x0) > x3\n          || (y1 = q.y0) > y3\n          || (x2 = q.x1) < x0\n          || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(\n          new Quad(node[3], xm, ym, x2, y2),\n          new Quad(node[2], x1, ym, xm, y2),\n          new Quad(node[1], xm, y1, x2, ym),\n          new Quad(node[0], x1, y1, xm, ym)\n        );\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | (x >= xm)) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n        && !node.length) {\n      if (retainer) retainer[j] = node;\n      else this._root = node;\n    }\n\n    return this;\n  }\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n    return this;\n  }\n\n  function tree_root() {\n    return this._root;\n  }\n\n  function tree_size() {\n    var size = 0;\n    this.visit(function(node) {\n      if (!node.length) do ++size; while (node = node.next)\n    });\n    return size;\n  }\n\n  function tree_visit(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  }\n\n  function tree_visitAfter(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {data: leaf.data}, next = copy;\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function() {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{source: node, target: copy._root = new Array(4)}];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n          else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  var slice$1 = [].slice;\n\n  var noabort = {};\n\n  function Queue(size) {\n    if (!(size >= 1)) throw new Error;\n    this._size = size;\n    this._call =\n    this._error = null;\n    this._tasks = [];\n    this._data = [];\n    this._waiting =\n    this._active =\n    this._ended =\n    this._start = 0; // inside a synchronous task callback?\n  }\n\n  Queue.prototype = queue.prototype = {\n    constructor: Queue,\n    defer: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      if (this._error != null) return this;\n      var t = slice$1.call(arguments, 1);\n      t.push(callback);\n      ++this._waiting, this._tasks.push(t);\n      poke(this);\n      return this;\n    },\n    abort: function() {\n      if (this._error == null) abort(this, new Error(\"abort\"));\n      return this;\n    },\n    await: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = function(error, results) { callback.apply(null, [error].concat(results)); };\n      maybeNotify(this);\n      return this;\n    },\n    awaitAll: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = callback;\n      maybeNotify(this);\n      return this;\n    }\n  };\n\n  function poke(q) {\n    if (!q._start) try { start(q); } // let the current task complete\n    catch (e) { if (q._tasks[q._ended + q._active - 1]) abort(q, e); } // task errored synchronously\n  }\n\n  function start(q) {\n    while (q._start = q._waiting && q._active < q._size) {\n      var i = q._ended + q._active,\n          t = q._tasks[i],\n          j = t.length - 1,\n          c = t[j];\n      t[j] = end(q, i);\n      --q._waiting, ++q._active;\n      t = c.apply(null, t);\n      if (!q._tasks[i]) continue; // task finished synchronously\n      q._tasks[i] = t || noabort;\n    }\n  }\n\n  function end(q, i) {\n    return function(e, r) {\n      if (!q._tasks[i]) return; // ignore multiple callbacks\n      --q._active, ++q._ended;\n      q._tasks[i] = null;\n      if (q._error != null) return; // ignore secondary errors\n      if (e != null) {\n        abort(q, e);\n      } else {\n        q._data[i] = r;\n        if (q._waiting) poke(q);\n        else maybeNotify(q);\n      }\n    };\n  }\n\n  function abort(q, e) {\n    var i = q._tasks.length, t;\n    q._error = e; // ignore active callbacks\n    q._data = undefined; // allow gc\n    q._waiting = NaN; // prevent starting\n\n    while (--i >= 0) {\n      if (t = q._tasks[i]) {\n        q._tasks[i] = null;\n        if (t.abort) try { t.abort(); }\n        catch (e) { /* ignore */ }\n      }\n    }\n\n    q._active = NaN; // allow notification\n    maybeNotify(q);\n  }\n\n  function maybeNotify(q) {\n    if (!q._active && q._call) q._call(q._error, q._data);\n  }\n\n  function queue(concurrency) {\n    return new Queue(arguments.length ? +concurrency : Infinity);\n  }\n\n  function constant$1(x) {\n    return function constant() {\n      return x;\n    };\n  }\n\n  var epsilon$1 = 1e-12;\n  var pi$2 = Math.PI;\n  var halfPi$1 = pi$2 / 2;\n  var tau$2 = 2 * pi$2;\n\n  function arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n\n  function arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n\n  function arcStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function arcEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function arcPadAngle(d) {\n    return d && d.padAngle; // Note: optional!\n  }\n\n  function asin(x) {\n    return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);\n  }\n\n  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var x10 = x1 - x0, y10 = y1 - y0,\n        x32 = x3 - x2, y32 = y3 - y2,\n        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n    return [x0 + t * x10, y0 + t * y10];\n  }\n\n  // Compute perpendicular offset line of length rc.\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n    var x01 = x0 - x1,\n        y01 = y0 - y1,\n        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x11 = x0 + ox,\n        y11 = y0 + oy,\n        x10 = x1 + ox,\n        y10 = y1 + oy,\n        x00 = (x11 + x10) / 2,\n        y00 = (y11 + y10) / 2,\n        dx = x10 - x11,\n        dy = y10 - y11,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x11 * y10 - x10 * y11,\n        d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x00,\n        dy0 = cy0 - y00,\n        dx1 = cx1 - x00,\n        dy1 = cy1 - y00;\n\n    // Pick the closer of the two intersection points.\n    // TODO Is there a faster way to determine which intersection to use?\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n    return {\n      cx: cx0,\n      cy: cy0,\n      x01: -ox,\n      y01: -oy,\n      x11: cx0 * (r1 / r - 1),\n      y11: cy0 * (r1 / r - 1)\n    };\n  }\n\n  function arc() {\n    var innerRadius = arcInnerRadius,\n        outerRadius = arcOuterRadius,\n        cornerRadius = constant$1(0),\n        padRadius = null,\n        startAngle = arcStartAngle,\n        endAngle = arcEndAngle,\n        padAngle = arcPadAngle,\n        context = null;\n\n    function arc() {\n      var buffer,\n          r,\n          r0 = +innerRadius.apply(this, arguments),\n          r1 = +outerRadius.apply(this, arguments),\n          a0 = startAngle.apply(this, arguments) - halfPi$1,\n          a1 = endAngle.apply(this, arguments) - halfPi$1,\n          da = Math.abs(a1 - a0),\n          cw = a1 > a0;\n\n      if (!context) context = buffer = path();\n\n      // Ensure that the outer radius is always larger than the inner radius.\n      if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n      // Is it a point?\n      if (!(r1 > epsilon$1)) context.moveTo(0, 0);\n\n      // Or is it a circle or annulus?\n      else if (da > tau$2 - epsilon$1) {\n        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));\n        context.arc(0, 0, r1, a0, a1, !cw);\n        if (r0 > epsilon$1) {\n          context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));\n          context.arc(0, 0, r0, a1, a0, cw);\n        }\n      }\n\n      // Or is it a circular or annular sector?\n      else {\n        var a01 = a0,\n            a11 = a1,\n            a00 = a0,\n            a10 = a1,\n            da0 = da,\n            da1 = da,\n            ap = padAngle.apply(this, arguments) / 2,\n            rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),\n            rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n            rc0 = rc,\n            rc1 = rc,\n            t0,\n            t1;\n\n        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n        if (rp > epsilon$1) {\n          var p0 = asin(rp / r0 * Math.sin(ap)),\n              p1 = asin(rp / r1 * Math.sin(ap));\n          if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n          else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n          if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n          else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n        }\n\n        var x01 = r1 * Math.cos(a01),\n            y01 = r1 * Math.sin(a01),\n            x10 = r0 * Math.cos(a10),\n            y10 = r0 * Math.sin(a10);\n\n        // Apply rounded corners?\n        if (rc > epsilon$1) {\n          var x11 = r1 * Math.cos(a11),\n              y11 = r1 * Math.sin(a11),\n              x00 = r0 * Math.cos(a00),\n              y00 = r0 * Math.sin(a00);\n\n          // Restrict the corner radius according to the sector angle.\n          if (da < pi$2) {\n            var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n                ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),\n                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n          }\n        }\n\n        // Is the sector collapsed to a line?\n        if (!(da1 > epsilon$1)) context.moveTo(x01, y01);\n\n        // Does the sector’s outer ring have rounded corners?\n        else if (rc1 > epsilon$1) {\n          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n            context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the outer ring just a circular arc?\n        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n        // Is there no inner ring, and it’s a circular sector?\n        // Or perhaps it’s an annular sector collapsed due to padding?\n        if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);\n\n        // Does the sector’s inner ring (or point) have rounded corners?\n        else if (rc0 > epsilon$1) {\n          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n            context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the inner ring just a circular arc?\n        else context.arc(0, 0, r0, a10, a00, cw);\n      }\n\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;\n      return [Math.cos(a) * r, Math.sin(a) * r];\n    };\n\n    arc.innerRadius = function(_) {\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : innerRadius;\n    };\n\n    arc.outerRadius = function(_) {\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : outerRadius;\n    };\n\n    arc.cornerRadius = function(_) {\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : cornerRadius;\n    };\n\n    arc.padRadius = function(_) {\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), arc) : padRadius;\n    };\n\n    arc.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : startAngle;\n    };\n\n    arc.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : endAngle;\n    };\n\n    arc.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : padAngle;\n    };\n\n    arc.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n    };\n\n    return arc;\n  }\n\n  function Linear(context) {\n    this._context = context;\n  }\n\n  Linear.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: this._context.lineTo(x, y); break;\n      }\n    }\n  };\n\n  function curveLinear(context) {\n    return new Linear(context);\n  }\n\n  function x(p) {\n    return p[0];\n  }\n\n  function y(p) {\n    return p[1];\n  }\n\n  function line() {\n    var x$$ = x,\n        y$$ = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function line(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) output.lineStart();\n          else output.lineEnd();\n        }\n        if (defined0) output.point(+x$$(d, i, data), +y$$(d, i, data));\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    line.x = function(_) {\n      return arguments.length ? (x$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : x$$;\n    };\n\n    line.y = function(_) {\n      return arguments.length ? (y$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : y$$;\n    };\n\n    line.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), line) : defined;\n    };\n\n    line.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n    };\n\n    line.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n    };\n\n    return line;\n  }\n\n  function area$1() {\n    var x0 = x,\n        x1 = null,\n        y0 = constant$1(0),\n        y1 = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function area(data) {\n      var i,\n          j,\n          k,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer,\n          x0z = new Array(n),\n          y0z = new Array(n);\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) {\n            j = i;\n            output.areaStart();\n            output.lineStart();\n          } else {\n            output.lineEnd();\n            output.lineStart();\n            for (k = i - 1; k >= j; --k) {\n              output.point(x0z[k], y0z[k]);\n            }\n            output.lineEnd();\n            output.areaEnd();\n          }\n        }\n        if (defined0) {\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n        }\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    function arealine() {\n      return line().defined(defined).curve(curve).context(context);\n    }\n\n    area.x = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), x1 = null, area) : x0;\n    };\n\n    area.x0 = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : x0;\n    };\n\n    area.x1 = function(_) {\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : x1;\n    };\n\n    area.y = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), y1 = null, area) : y0;\n    };\n\n    area.y0 = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : y0;\n    };\n\n    area.y1 = function(_) {\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : y1;\n    };\n\n    area.lineX0 =\n    area.lineY0 = function() {\n      return arealine().x(x0).y(y0);\n    };\n\n    area.lineY1 = function() {\n      return arealine().x(x0).y(y1);\n    };\n\n    area.lineX1 = function() {\n      return arealine().x(x1).y(y0);\n    };\n\n    area.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), area) : defined;\n    };\n\n    area.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n    };\n\n    area.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n    };\n\n    return area;\n  }\n\n  function descending$1(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function identity$1(d) {\n    return d;\n  }\n\n  function pie() {\n    var value = identity$1,\n        sortValues = descending$1,\n        sort = null,\n        startAngle = constant$1(0),\n        endAngle = constant$1(tau$2),\n        padAngle = constant$1(0);\n\n    function pie(data) {\n      var i,\n          n = data.length,\n          j,\n          k,\n          sum = 0,\n          index = new Array(n),\n          arcs = new Array(n),\n          a0 = +startAngle.apply(this, arguments),\n          da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)),\n          a1,\n          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n          pa = p * (da < 0 ? -1 : 1),\n          v;\n\n      for (i = 0; i < n; ++i) {\n        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n          sum += v;\n        }\n      }\n\n      // Optionally sort the arcs by previously-computed values or by data.\n      if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n      else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n      // Compute the arcs! They are stored in the original data's order.\n      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n          data: data[j],\n          index: i,\n          value: v,\n          startAngle: a0,\n          endAngle: a1,\n          padAngle: p\n        };\n      }\n\n      return arcs;\n    }\n\n    pie.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), pie) : value;\n    };\n\n    pie.sortValues = function(_) {\n      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n    };\n\n    pie.sort = function(_) {\n      return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n    };\n\n    pie.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : startAngle;\n    };\n\n    pie.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : endAngle;\n    };\n\n    pie.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : padAngle;\n    };\n\n    return pie;\n  }\n\n  var curveRadialLinear = curveRadial(curveLinear);\n\n  function Radial(curve) {\n    this._curve = curve;\n  }\n\n  Radial.prototype = {\n    areaStart: function() {\n      this._curve.areaStart();\n    },\n    areaEnd: function() {\n      this._curve.areaEnd();\n    },\n    lineStart: function() {\n      this._curve.lineStart();\n    },\n    lineEnd: function() {\n      this._curve.lineEnd();\n    },\n    point: function(a, r) {\n      this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n    }\n  };\n\n  function curveRadial(curve) {\n\n    function radial(context) {\n      return new Radial(curve(context));\n    }\n\n    radial._curve = curve;\n\n    return radial;\n  }\n\n  function radialLine(l) {\n    var c = l.curve;\n\n    l.angle = l.x, delete l.x;\n    l.radius = l.y, delete l.y;\n\n    l.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return l;\n  }\n\n  function radialLine$1() {\n    return radialLine(line().curve(curveRadialLinear));\n  }\n\n  function radialArea() {\n    var a = area$1().curve(curveRadialLinear),\n        c = a.curve,\n        x0 = a.lineX0,\n        x1 = a.lineX1,\n        y0 = a.lineY0,\n        y1 = a.lineY1;\n\n    a.angle = a.x, delete a.x;\n    a.startAngle = a.x0, delete a.x0;\n    a.endAngle = a.x1, delete a.x1;\n    a.radius = a.y, delete a.y;\n    a.innerRadius = a.y0, delete a.y0;\n    a.outerRadius = a.y1, delete a.y1;\n    a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;\n    a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;\n    a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;\n    a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;\n\n    a.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return a;\n  }\n\n  var circle = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / pi$2);\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau$2);\n    }\n  };\n\n  var cross$1 = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / 5) / 2;\n      context.moveTo(-3 * r, -r);\n      context.lineTo(-r, -r);\n      context.lineTo(-r, -3 * r);\n      context.lineTo(r, -3 * r);\n      context.lineTo(r, -r);\n      context.lineTo(3 * r, -r);\n      context.lineTo(3 * r, r);\n      context.lineTo(r, r);\n      context.lineTo(r, 3 * r);\n      context.lineTo(-r, 3 * r);\n      context.lineTo(-r, r);\n      context.lineTo(-3 * r, r);\n      context.closePath();\n    }\n  };\n\n  var tan30 = Math.sqrt(1 / 3);\n  var tan30_2 = tan30 * 2;\n  var diamond = {\n    draw: function(context, size) {\n      var y = Math.sqrt(size / tan30_2),\n          x = y * tan30;\n      context.moveTo(0, -y);\n      context.lineTo(x, 0);\n      context.lineTo(0, y);\n      context.lineTo(-x, 0);\n      context.closePath();\n    }\n  };\n\n  var ka = 0.89081309152928522810;\n  var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);\n  var kx = Math.sin(tau$2 / 10) * kr;\n  var ky = -Math.cos(tau$2 / 10) * kr;\n  var star = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size * ka),\n          x = kx * r,\n          y = ky * r;\n      context.moveTo(0, -r);\n      context.lineTo(x, y);\n      for (var i = 1; i < 5; ++i) {\n        var a = tau$2 * i / 5,\n            c = Math.cos(a),\n            s = Math.sin(a);\n        context.lineTo(s * r, -c * r);\n        context.lineTo(c * x - s * y, s * x + c * y);\n      }\n      context.closePath();\n    }\n  };\n\n  var square = {\n    draw: function(context, size) {\n      var w = Math.sqrt(size),\n          x = -w / 2;\n      context.rect(x, x, w, w);\n    }\n  };\n\n  var sqrt3 = Math.sqrt(3);\n\n  var triangle = {\n    draw: function(context, size) {\n      var y = -Math.sqrt(size / (sqrt3 * 3));\n      context.moveTo(0, y * 2);\n      context.lineTo(-sqrt3 * y, -y);\n      context.lineTo(sqrt3 * y, -y);\n      context.closePath();\n    }\n  };\n\n  var c = -0.5;\n  var s = Math.sqrt(3) / 2;\n  var k = 1 / Math.sqrt(12);\n  var a = (k / 2 + 1) * 3;\n  var wye = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / a),\n          x0 = r / 2,\n          y0 = r * k,\n          x1 = x0,\n          y1 = r * k + r,\n          x2 = -x1,\n          y2 = y1;\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n      context.lineTo(x2, y2);\n      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n      context.closePath();\n    }\n  };\n\n  var symbols = [\n    circle,\n    cross$1,\n    diamond,\n    square,\n    star,\n    triangle,\n    wye\n  ];\n\n  function symbol() {\n    var type = constant$1(circle),\n        size = constant$1(64),\n        context = null;\n\n    function symbol() {\n      var buffer;\n      if (!context) context = buffer = path();\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    symbol.type = function(_) {\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$1(_), symbol) : type;\n    };\n\n    symbol.size = function(_) {\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$1(+_), symbol) : size;\n    };\n\n    symbol.context = function(_) {\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n    };\n\n    return symbol;\n  }\n\n  function noop() {}\n\n  function point(that, x, y) {\n    that._context.bezierCurveTo(\n      (2 * that._x0 + that._x1) / 3,\n      (2 * that._y0 + that._y1) / 3,\n      (that._x0 + 2 * that._x1) / 3,\n      (that._y0 + 2 * that._y1) / 3,\n      (that._x0 + 4 * that._x1 + x) / 6,\n      (that._y0 + 4 * that._y1 + y) / 6\n    );\n  }\n\n  function Basis(context) {\n    this._context = context;\n  }\n\n  Basis.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 3: point(this, this._x1, this._y1); // proceed\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basis(context) {\n    return new Basis(context);\n  }\n\n  function BasisClosed(context) {\n    this._context = context;\n  }\n\n  BasisClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x2, this._y2);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x2, this._y2);\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisClosed(context) {\n    return new BasisClosed(context);\n  }\n\n  function BasisOpen(context) {\n    this._context = context;\n  }\n\n  BasisOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n        case 3: this._point = 4; // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisOpen(context) {\n    return new BasisOpen(context);\n  }\n\n  function Bundle(context, beta) {\n    this._basis = new Basis(context);\n    this._beta = beta;\n  }\n\n  Bundle.prototype = {\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n      this._basis.lineStart();\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          j = x.length - 1;\n\n      if (j > 0) {\n        var x0 = x[0],\n            y0 = y[0],\n            dx = x[j] - x0,\n            dy = y[j] - y0,\n            i = -1,\n            t;\n\n        while (++i <= j) {\n          t = i / j;\n          this._basis.point(\n            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n          );\n        }\n      }\n\n      this._x = this._y = null;\n      this._basis.lineEnd();\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  var bundle = (function custom(beta) {\n\n    function bundle(context) {\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n    }\n\n    bundle.beta = function(beta) {\n      return custom(+beta);\n    };\n\n    return bundle;\n  })(0.85);\n\n  function point$1(that, x, y) {\n    that._context.bezierCurveTo(\n      that._x1 + that._k * (that._x2 - that._x0),\n      that._y1 + that._k * (that._y2 - that._y0),\n      that._x2 + that._k * (that._x1 - x),\n      that._y2 + that._k * (that._y1 - y),\n      that._x2,\n      that._y2\n    );\n  }\n\n  function Cardinal(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  Cardinal.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: point$1(this, this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n        case 2: this._point = 3; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinal = (function custom(tension) {\n\n    function cardinal(context) {\n      return new Cardinal(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalClosed(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalClosed = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalClosed(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalOpen(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalOpen = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalOpen(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function point$2(that, x, y) {\n    var x1 = that._x1,\n        y1 = that._y1,\n        x2 = that._x2,\n        y2 = that._y2;\n\n    if (that._l01_a > epsilon$1) {\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n    }\n\n    if (that._l23_a > epsilon$1) {\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n    }\n\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n  }\n\n  function CatmullRom(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRom.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: this.point(this, this._x2, this._y2); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRom = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomClosed(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomClosed = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomOpen(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomOpen = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function LinearClosed(context) {\n    this._context = context;\n  }\n\n  LinearClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._point) this._context.closePath();\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      if (this._point) this._context.lineTo(x, y);\n      else this._point = 1, this._context.moveTo(x, y);\n    }\n  };\n\n  function linearClosed(context) {\n    return new LinearClosed(context);\n  }\n\n  function sign(x) {\n    return x < 0 ? -1 : 1;\n  }\n\n  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n  // NOV(II), P. 443, 1990.\n  function slope3(that, x2, y2) {\n    var h0 = that._x1 - that._x0,\n        h1 = x2 - that._x1,\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n  }\n\n  // Calculate a one-sided slope.\n  function slope2(that, t) {\n    var h = that._x1 - that._x0;\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n  }\n\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n  function point$3(that, t0, t1) {\n    var x0 = that._x0,\n        y0 = that._y0,\n        x1 = that._x1,\n        y1 = that._y1,\n        dx = (x1 - x0) / 3;\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n  }\n\n  function MonotoneX(context) {\n    this._context = context;\n  }\n\n  MonotoneX.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 =\n      this._t0 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n        case 3: point$3(this, this._t0, slope2(this, this._t0)); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      var t1 = NaN;\n\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n        default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  }\n\n  function MonotoneY(context) {\n    this._context = new ReflectContext(context);\n  }\n\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n    MonotoneX.prototype.point.call(this, y, x);\n  };\n\n  function ReflectContext(context) {\n    this._context = context;\n  }\n\n  ReflectContext.prototype = {\n    moveTo: function(x, y) { this._context.moveTo(y, x); },\n    closePath: function() { this._context.closePath(); },\n    lineTo: function(x, y) { this._context.lineTo(y, x); },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n  };\n\n  function monotoneX(context) {\n    return new MonotoneX(context);\n  }\n\n  function monotoneY(context) {\n    return new MonotoneY(context);\n  }\n\n  function Natural(context) {\n    this._context = context;\n  }\n\n  Natural.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          n = x.length;\n\n      if (n) {\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n        if (n === 2) {\n          this._context.lineTo(x[1], y[1]);\n        } else {\n          var px = controlPoints(x),\n              py = controlPoints(y);\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n          }\n        }\n      }\n\n      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n      this._x = this._y = null;\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n  function controlPoints(x) {\n    var i,\n        n = x.length - 1,\n        m,\n        a = new Array(n),\n        b = new Array(n),\n        r = new Array(n);\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n    a[n - 1] = r[n - 1] / b[n - 1];\n    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n    b[n - 1] = (x[n] + a[n - 1]) / 2;\n    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n    return [a, b];\n  }\n\n  function natural(context) {\n    return new Natural(context);\n  }\n\n  function Step(context, t) {\n    this._context = context;\n    this._t = t;\n  }\n\n  Step.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = this._y = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: {\n          if (this._t <= 0) {\n            this._context.lineTo(this._x, y);\n            this._context.lineTo(x, y);\n          } else {\n            var x1 = this._x * (1 - this._t) + x * this._t;\n            this._context.lineTo(x1, this._y);\n            this._context.lineTo(x1, y);\n          }\n          break;\n        }\n      }\n      this._x = x, this._y = y;\n    }\n  };\n\n  function step(context) {\n    return new Step(context, 0.5);\n  }\n\n  function stepBefore(context) {\n    return new Step(context, 0);\n  }\n\n  function stepAfter(context) {\n    return new Step(context, 1);\n  }\n\n  var slice$2 = Array.prototype.slice;\n\n  function none(series, order) {\n    if (!((n = series.length) > 1)) return;\n    for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n      s0 = s1, s1 = series[order[i]];\n      for (var j = 0; j < m; ++j) {\n        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n      }\n    }\n  }\n\n  function none$1(series) {\n    var n = series.length, o = new Array(n);\n    while (--n >= 0) o[n] = n;\n    return o;\n  }\n\n  function stackValue(d, key) {\n    return d[key];\n  }\n\n  function stack() {\n    var keys = constant$1([]),\n        order = none$1,\n        offset = none,\n        value = stackValue;\n\n    function stack(data) {\n      var kz = keys.apply(this, arguments),\n          i,\n          m = data.length,\n          n = kz.length,\n          sz = new Array(n),\n          oz;\n\n      for (i = 0; i < n; ++i) {\n        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n          si[j] = sij = [0, +value(data[j], ki, j, data)];\n          sij.data = data[j];\n        }\n        si.key = ki;\n      }\n\n      for (i = 0, oz = order(sz); i < n; ++i) {\n        sz[oz[i]].index = i;\n      }\n\n      offset(sz, oz);\n      return sz;\n    }\n\n    stack.keys = function(_) {\n      return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : keys;\n    };\n\n    stack.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), stack) : value;\n    };\n\n    stack.order = function(_) {\n      return arguments.length ? (order = _ == null ? none$1 : typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : order;\n    };\n\n    stack.offset = function(_) {\n      return arguments.length ? (offset = _ == null ? none : _, stack) : offset;\n    };\n\n    return stack;\n  }\n\n  function expand(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\n      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\n    }\n    none(series, order);\n  }\n\n  function silhouette(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\n      s0[j][1] += s0[j][0] = -y / 2;\n    }\n    none(series, order);\n  }\n\n  function wiggle(series, order) {\n    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n        var si = series[order[i]],\n            sij0 = si[j][1] || 0,\n            sij1 = si[j - 1][1] || 0,\n            s3 = (sij0 - sij1) / 2;\n        for (var k = 0; k < i; ++k) {\n          var sk = series[order[k]],\n              skj0 = sk[j][1] || 0,\n              skj1 = sk[j - 1][1] || 0;\n          s3 += skj0 - skj1;\n        }\n        s1 += sij0, s2 += s3 * sij0;\n      }\n      s0[j - 1][1] += s0[j - 1][0] = y;\n      if (s1) y -= s2 / s1;\n    }\n    s0[j - 1][1] += s0[j - 1][0] = y;\n    none(series, order);\n  }\n\n  function ascending$1(series) {\n    var sums = series.map(sum$1);\n    return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });\n  }\n\n  function sum$1(series) {\n    var s = 0, i = -1, n = series.length, v;\n    while (++i < n) if (v = +series[i][1]) s += v;\n    return s;\n  }\n\n  function descending$2(series) {\n    return ascending$1(series).reverse();\n  }\n\n  function insideOut(series) {\n    var n = series.length,\n        i,\n        j,\n        sums = series.map(sum$1),\n        order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),\n        top = 0,\n        bottom = 0,\n        tops = [],\n        bottoms = [];\n\n    for (i = 0; i < n; ++i) {\n      j = order[i];\n      if (top < bottom) {\n        top += sums[j];\n        tops.push(j);\n      } else {\n        bottom += sums[j];\n        bottoms.push(j);\n      }\n    }\n\n    return bottoms.reverse().concat(tops);\n  }\n\n  function reverse(series) {\n    return none$1(series).reverse();\n  }\n\n  function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) prototype[key] = definition[key];\n    return prototype;\n  }\n\n  function Color() {}\n\n  var darker = 0.7;\n  var brighter = 1 / darker;\n\n  var reHex3 = /^#([0-9a-f]{3})$/;\n  var reHex6 = /^#([0-9a-f]{6})$/;\n  var reRgbInteger = /^rgb\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*\\)$/;\n  var reRgbPercent = /^rgb\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reRgbaInteger = /^rgba\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reRgbaPercent = /^rgba\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reHslPercent = /^hsl\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reHslaPercent = /^hsla\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n\n  define(Color, color, {\n    displayable: function() {\n      return this.rgb().displayable();\n    },\n    toString: function() {\n      return this.rgb() + \"\";\n    }\n  });\n\n  function color(format) {\n    var m;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n        : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n        : named.hasOwnProperty(format) ? rgbn(named[format])\n        : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n        : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb;\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n\n  function colorRgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Rgb, colorRgb, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function() {\n      return this;\n    },\n    displayable: function() {\n      return (0 <= this.r && this.r <= 255)\n          && (0 <= this.g && this.g <= 255)\n          && (0 <= this.b && this.b <= 255)\n          && (0 <= this.opacity && this.opacity <= 1);\n    },\n    toString: function() {\n      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"rgb(\" : \"rgba(\")\n          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n          + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;\n    else if (l <= 0 || l >= 1) h = s = NaN;\n    else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl;\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;\n      else if (g === max) h = (b - r) / s + 2;\n      else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n  }\n\n  function colorHsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, colorHsl, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(\n        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n        hsl2rgb(h, m1, m2),\n        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n        this.opacity\n      );\n    },\n    displayable: function() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n          && (0 <= this.l && this.l <= 1)\n          && (0 <= this.opacity && this.opacity <= 1);\n    }\n  }));\n\n  /* From FvD 13.37, CSS Color Module Level 3 */\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60\n        : h < 180 ? m2\n        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n        : m1) * 255;\n  }\n\n  var deg2rad = Math.PI / 180;\n  var rad2deg = 180 / Math.PI;\n\n  var Kn = 18;\n  var Xn = 0.950470;\n  var Yn = 1;\n  var Zn = 1.088830;\n  var t0 = 4 / 29;\n  var t1 = 6 / 29;\n  var t2 = 3 * t1 * t1;\n  var t3 = t1 * t1 * t1;\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) {\n      var h = o.h * deg2rad;\n      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n    }\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var b = rgb2xyz(o.r),\n        a = rgb2xyz(o.g),\n        l = rgb2xyz(o.b),\n        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n\n  function lab(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Lab, lab, extend(Color, {\n    brighter: function(k) {\n      return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function(k) {\n      return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function() {\n      var y = (this.l + 16) / 116,\n          x = isNaN(this.a) ? y : y + this.a / 500,\n          z = isNaN(this.b) ? y : y - this.b / 200;\n      y = Yn * lab2xyz(y);\n      x = Xn * lab2xyz(x);\n      z = Zn * lab2xyz(z);\n      return new Rgb(\n        xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n        xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n        xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n        this.opacity\n      );\n    }\n  }));\n\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n  }\n\n  function lab2xyz(t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n  }\n\n  function xyz2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n\n  function rgb2xyz(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    var h = Math.atan2(o.b, o.a) * rad2deg;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n\n  function colorHcl(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hcl, colorHcl, extend(Color, {\n    brighter: function(k) {\n      return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function(k) {\n      return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function() {\n      return labConvert(this).rgb();\n    }\n  }));\n\n  var A = -0.14861;\n  var B = +1.78277;\n  var C = -0.29227;\n  var D = -0.90649;\n  var E = +1.97294;\n  var ED = E * D;\n  var EB = E * B;\n  var BC_DA = B * C - D * A;\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n        bl = b - l,\n        k = (E * (g - l) - C * bl) / D,\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n\n  function cubehelix(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Cubehelix, cubehelix, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n          l = +this.l,\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n          cosh = Math.cos(h),\n          sinh = Math.sin(h);\n      return new Rgb(\n        255 * (l + a * (A * cosh + B * sinh)),\n        255 * (l + a * (C * cosh + D * sinh)),\n        255 * (l + a * (E * cosh)),\n        this.opacity\n      );\n    }\n  }));\n\n  function basis$1(t1, v0, v1, v2, v3) {\n    var t2 = t1 * t1, t3 = t2 * t1;\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n        + (4 - 6 * t2 + 3 * t3) * v1\n        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n        + t3 * v3) / 6;\n  }\n\n  function basis$2(values) {\n    var n = values.length - 1;\n    return function(t) {\n      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n          v1 = values[i],\n          v2 = values[i + 1],\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function basisClosed$1(values) {\n    var n = values.length;\n    return function(t) {\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n          v0 = values[(i + n - 1) % n],\n          v1 = values[i % n],\n          v2 = values[(i + 1) % n],\n          v3 = values[(i + 2) % n];\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function constant$2(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function linear$1(a, d) {\n    return function(t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential$1(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function hue(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function(a, b) {\n      return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);\n    };\n  }\n\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  var interpolateRgb = (function rgbGamma(y) {\n    var color = gamma(y);\n\n    function rgb(start, end) {\n      var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n          g = color(start.g, end.g),\n          b = color(start.b, end.b),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb.gamma = rgbGamma;\n\n    return rgb;\n  })(1);\n\n  function rgbSpline(spline) {\n    return function(colors) {\n      var n = colors.length,\n          r = new Array(n),\n          g = new Array(n),\n          b = new Array(n),\n          i, color;\n      for (i = 0; i < n; ++i) {\n        color = colorRgb(colors[i]);\n        r[i] = color.r || 0;\n        g[i] = color.g || 0;\n        b[i] = color.b || 0;\n      }\n      r = spline(r);\n      g = spline(g);\n      b = spline(b);\n      color.opacity = 1;\n      return function(t) {\n        color.r = r(t);\n        color.g = g(t);\n        color.b = b(t);\n        return color + \"\";\n      };\n    };\n  }\n\n  var rgbBasis = rgbSpline(basis$2);\n  var rgbBasisClosed = rgbSpline(basisClosed$1);\n\n  function array$1(a, b) {\n    var nb = b ? b.length : 0,\n        na = a ? Math.min(nb, a.length) : 0,\n        x = new Array(nb),\n        c = new Array(nb),\n        i;\n\n    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);\n    for (; i < nb; ++i) c[i] = b[i];\n\n    return function(t) {\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n\n  function date(a, b) {\n    var d = new Date;\n    return a = +a, b -= a, function(t) {\n      return d.setTime(a + b * t), d;\n    };\n  }\n\n  function interpolateNumber(a, b) {\n    return a = +a, b -= a, function(t) {\n      return a + b * t;\n    };\n  }\n\n  function object(a, b) {\n    var i = {},\n        c = {},\n        k;\n\n    if (a === null || typeof a !== \"object\") a = {};\n    if (b === null || typeof b !== \"object\") b = {};\n\n    for (k in b) {\n      if (k in a) {\n        i[k] = interpolate(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;\n  var reB = new RegExp(reA.source, \"g\");\n  function zero(b) {\n    return function() {\n      return b;\n    };\n  }\n\n  function one(b) {\n    return function(t) {\n      return b(t) + \"\";\n    };\n  }\n\n  function interpolateString(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n        am, // current match in a\n        bm, // current match in b\n        bs, // string preceding current number in b, if any\n        i = -1, // index in s\n        s = [], // string constants and placeholders\n        q = []; // number interpolators\n\n    // Coerce inputs to strings.\n    a = a + \"\", b = b + \"\";\n\n    // Interpolate pairs of numbers in a & b.\n    while ((am = reA.exec(a))\n        && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) { // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else { // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({i: i, x: interpolateNumber(am, bm)});\n      }\n      bi = reB.lastIndex;\n    }\n\n    // Add remains of b.\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n    return s.length < 2 ? (q[0]\n        ? one(q[0].x)\n        : zero(b))\n        : (b = q.length, function(t) {\n            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n            return s.join(\"\");\n          });\n  }\n\n  function interpolate(a, b) {\n    var t = typeof b, c;\n    return b == null || t === \"boolean\" ? constant$2(b)\n        : (t === \"number\" ? interpolateNumber\n        : t === \"string\" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)\n        : b instanceof color ? interpolateRgb\n        : b instanceof Date ? date\n        : Array.isArray(b) ? array$1\n        : isNaN(b) ? object\n        : interpolateNumber)(a, b);\n  }\n\n  function interpolateRound(a, b) {\n    return a = +a, b -= a, function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n\n  var degrees = 180 / Math.PI;\n\n  var identity$2 = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  function decompose(a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees,\n      skewX: Math.atan(skewX) * degrees,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var cssNode;\n  var cssRoot;\n  var cssView;\n  var svgNode;\n  function parseCss(value) {\n    if (value === \"none\") return identity$2;\n    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n    cssNode.style.transform = value;\n    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n    cssRoot.removeChild(cssNode);\n    value = value.slice(7, -1).split(\",\");\n    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n  }\n\n  function parseSvg(value) {\n    if (value == null) return identity$2;\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value);\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;\n    value = value.matrix;\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n        q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function(a, b) {\n      var s = [], // string constants and placeholders\n          q = []; // number interpolators\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n      return function(t) {\n        var i = -1, n = q.length, o;\n        while (++i < n) s[(o = q[i]).i] = o.x(t);\n        return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransform$1 = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransform$2 = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  var rho = Math.SQRT2;\n  var rho2 = 2;\n  var rho4 = 4;\n  var epsilon2 = 1e-12;\n  function cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n\n  function sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n\n  function tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function interpolateZoom(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      }\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      }\n    }\n\n    i.duration = S * 1000;\n\n    return i;\n  }\n\n  function hsl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n          s = nogamma(start.s, end.s),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hsl$1 = hsl(hue);\n  var hslLong = hsl(nogamma);\n\n  function lab$1(start, end) {\n    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\n        a = nogamma(start.a, end.a),\n        b = nogamma(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.l = l(t);\n      start.a = a(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  function hcl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n          c = nogamma(start.c, end.c),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.c = c(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hcl$1 = hcl(hue);\n  var hclLong = hcl(nogamma);\n\n  function cubehelix$1(hue) {\n    return (function cubehelixGamma(y) {\n      y = +y;\n\n      function cubehelix$$(start, end) {\n        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\n            s = nogamma(start.s, end.s),\n            l = nogamma(start.l, end.l),\n            opacity = nogamma(start.opacity, end.opacity);\n        return function(t) {\n          start.h = h(t);\n          start.s = s(t);\n          start.l = l(Math.pow(t, y));\n          start.opacity = opacity(t);\n          return start + \"\";\n        };\n      }\n\n      cubehelix$$.gamma = cubehelixGamma;\n\n      return cubehelix$$;\n    })(1);\n  }\n\n  var cubehelix$2 = cubehelix$1(hue);\n  var interpolateCubehelixLong = cubehelix$1(nogamma);\n\n  function quantize(interpolator, n) {\n    var samples = new Array(n);\n    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n    return samples;\n  }\n\n  var noop$1 = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set$1(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"]\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function(row, i) {\n      return f(object(row), i, columns);\n    };\n  }\n\n  // Compute unique columns in order of discovery.\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n\n    rows.forEach(function(row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n\n    return columns;\n  }\n\n  function dsv(delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n]\"),\n        delimiterCode = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert, columns, rows = parseRows(text, function(row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns;\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var EOL = {}, // sentinel value for end-of-line\n          EOF = {}, // sentinel value for end-of-file\n          rows = [], // output rows\n          N = text.length,\n          I = 0, // current character index\n          n = 0, // the current line number\n          t, // the current token\n          eol; // is the current token followed by EOL?\n\n      function token() {\n        if (I >= N) return EOF; // special case: end of file\n        if (eol) return eol = false, EOL; // special case: end of line\n\n        // special case: quotes\n        var j = I, c;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, \"\\\"\");\n        }\n\n        // common case: find next delimiter or newline\n        while (I < N) {\n          var k = 1;\n          c = text.charCodeAt(I++);\n          if (c === 10) eol = true; // \\n\n          else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \\r|\\r\\n\n          else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n\n        // special case: last token before EOF\n        return text.slice(j);\n      }\n\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n\n      return rows;\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n        return columns.map(function(column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(text) {\n      return text == null ? \"\"\n          : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\\\"/g, \"\\\"\\\"\") + \"\\\"\"\n          : text;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatRows: formatRows\n    };\n  }\n\n  var csv = dsv(\",\");\n\n  var csvParse = csv.parse;\n  var csvParseRows = csv.parseRows;\n  var csvFormat = csv.format;\n  var csvFormatRows = csv.formatRows;\n\n  var tsv = dsv(\"\\t\");\n\n  var tsvParse = tsv.parse;\n  var tsvParseRows = tsv.parseRows;\n  var tsvFormat = tsv.format;\n  var tsvFormatRows = tsv.formatRows;\n\n  function request(url, callback) {\n    var request,\n        event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n        mimeType,\n        headers = map$1(),\n        xhr = new XMLHttpRequest,\n        user = null,\n        password = null,\n        response,\n        responseType,\n        timeout = 0;\n\n    // If IE does not support CORS, use XDomainRequest.\n    if (typeof XDomainRequest !== \"undefined\"\n        && !(\"withCredentials\" in xhr)\n        && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n    \"onload\" in xhr\n        ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n        : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n    function respond(o) {\n      var status = xhr.status, result;\n      if (!status && hasResponse(xhr)\n          || status >= 200 && status < 300\n          || status === 304) {\n        if (response) {\n          try {\n            result = response.call(request, xhr);\n          } catch (e) {\n            event.call(\"error\", request, e);\n            return;\n          }\n        } else {\n          result = xhr;\n        }\n        event.call(\"load\", request, result);\n      } else {\n        event.call(\"error\", request, o);\n      }\n    }\n\n    xhr.onprogress = function(e) {\n      event.call(\"progress\", request, e);\n    };\n\n    request = {\n      header: function(name, value) {\n        name = (name + \"\").toLowerCase();\n        if (arguments.length < 2) return headers.get(name);\n        if (value == null) headers.remove(name);\n        else headers.set(name, value + \"\");\n        return request;\n      },\n\n      // If mimeType is non-null and no Accept header is set, a default is used.\n      mimeType: function(value) {\n        if (!arguments.length) return mimeType;\n        mimeType = value == null ? null : value + \"\";\n        return request;\n      },\n\n      // Specifies what type the response value should take;\n      // for instance, arraybuffer, blob, document, or text.\n      responseType: function(value) {\n        if (!arguments.length) return responseType;\n        responseType = value;\n        return request;\n      },\n\n      timeout: function(value) {\n        if (!arguments.length) return timeout;\n        timeout = +value;\n        return request;\n      },\n\n      user: function(value) {\n        return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n      },\n\n      password: function(value) {\n        return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n      },\n\n      // Specify how to convert the response content to a specific type;\n      // changes the callback value on \"load\" events.\n      response: function(value) {\n        response = value;\n        return request;\n      },\n\n      // Alias for send(\"GET\", …).\n      get: function(data, callback) {\n        return request.send(\"GET\", data, callback);\n      },\n\n      // Alias for send(\"POST\", …).\n      post: function(data, callback) {\n        return request.send(\"POST\", data, callback);\n      },\n\n      // If callback is non-null, it will be used for error and load events.\n      send: function(method, data, callback) {\n        xhr.open(method, url, true, user, password);\n        if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n        if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n        if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n        if (responseType != null) xhr.responseType = responseType;\n        if (timeout > 0) xhr.timeout = timeout;\n        if (callback == null && typeof data === \"function\") callback = data, data = null;\n        if (callback != null && callback.length === 1) callback = fixCallback(callback);\n        if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n        event.call(\"beforesend\", request, xhr);\n        xhr.send(data == null ? null : data);\n        return request;\n      },\n\n      abort: function() {\n        xhr.abort();\n        return request;\n      },\n\n      on: function() {\n        var value = event.on.apply(event, arguments);\n        return value === event ? request : value;\n      }\n    };\n\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return request.get(callback);\n    }\n\n    return request;\n  }\n\n  function fixCallback(callback) {\n    return function(error, xhr) {\n      callback(error == null ? xhr : null);\n    };\n  }\n\n  function hasResponse(xhr) {\n    var type = xhr.responseType;\n    return type && type !== \"text\"\n        ? xhr.response // null on error\n        : xhr.responseText; // \"\" on error\n  }\n\n  function type(defaultMimeType, response) {\n    return function(url, callback) {\n      var r = request(url).mimeType(defaultMimeType).response(response);\n      if (callback != null) {\n        if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n        return r.get(callback);\n      }\n      return r;\n    };\n  }\n\n  var html = type(\"text/html\", function(xhr) {\n    return document.createRange().createContextualFragment(xhr.responseText);\n  });\n\n  var json = type(\"application/json\", function(xhr) {\n    return JSON.parse(xhr.responseText);\n  });\n\n  var text = type(\"text/plain\", function(xhr) {\n    return xhr.responseText;\n  });\n\n  var xml = type(\"application/xml\", function(xhr) {\n    var xml = xhr.responseXML;\n    if (!xml) throw new Error(\"parse error\");\n    return xml;\n  });\n\n  function dsv$1(defaultMimeType, parse) {\n    return function(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var r = request(url).mimeType(defaultMimeType);\n      r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n      r.row(row);\n      return callback ? r.get(callback) : r;\n    };\n  }\n\n  function responseOf(parse, row) {\n    return function(request) {\n      return parse(request.responseText, row);\n    };\n  }\n\n  var csv$1 = dsv$1(\"text/csv\", csvParse);\n\n  var tsv$1 = dsv$1(\"text/tab-separated-values\", tsvParse);\n\n  var frame = 0;\n  var timeout = 0;\n  var interval = 0;\n  var pokeDelay = 1000;\n  var taskHead;\n  var taskTail;\n  var clockLast = 0;\n  var clockNow = 0;\n  var clockSkew = 0;\n  var clock = typeof performance === \"object\" && performance.now ? performance : Date;\n  var setFrame = typeof requestAnimationFrame === \"function\"\n          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n          : function(f) { setTimeout(f, 17); };\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call =\n    this._time =\n    this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;\n        else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer;\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead, e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake(time) {\n    clockNow = (clockLast = time || clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke$1() {\n    var now = clock.now(), delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0, t1 = taskHead, t2, time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow;\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, delay);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) interval = setInterval(poke$1, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function timeout$1(callback, delay, time) {\n    var t = new Timer;\n    delay = delay == null ? 0 : +delay;\n    t.restart(function(elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  }\n\n  function interval$1(callback, delay, time) {\n    var t = new Timer, total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  }\n\nvar   t0$1 = new Date;\nvar   t1$1 = new Date;\n  function newInterval(floori, offseti, count, field) {\n\n    function interval(date) {\n      return floori(date = new Date(+date)), date;\n    }\n\n    interval.floor = interval;\n\n    interval.ceil = function(date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n\n    interval.round = function(date) {\n      var d0 = interval(date),\n          d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n\n    interval.offset = function(date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n\n    interval.range = function(start, stop, step) {\n      var range = [];\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)\n      return range;\n    };\n\n    interval.filter = function(test) {\n      return newInterval(function(date) {\n        while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function(date, step) {\n        while (--step >= 0) while (offseti(date, 1), !test(date));\n      });\n    };\n\n    if (count) {\n      interval.count = function(start, end) {\n        t0$1.setTime(+start), t1$1.setTime(+end);\n        floori(t0$1), floori(t1$1);\n        return Math.floor(count(t0$1, t1$1));\n      };\n\n      interval.every = function(step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null\n            : !(step > 1) ? interval\n            : interval.filter(field\n                ? function(d) { return field(d) % step === 0; }\n                : function(d) { return interval.count(0, d) % step === 0; });\n      };\n    }\n\n    return interval;\n  }\n\n  var millisecond = newInterval(function() {\n    // noop\n  }, function(date, step) {\n    date.setTime(+date + step);\n  }, function(start, end) {\n    return end - start;\n  });\n\n  // An optimized implementation for this simple case.\n  millisecond.every = function(k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function(date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function(date, step) {\n      date.setTime(+date + step * k);\n    }, function(start, end) {\n      return (end - start) / k;\n    });\n  };\n\n  var milliseconds = millisecond.range;\n\n  var durationSecond = 1e3;\n  var durationMinute = 6e4;\n  var durationHour = 36e5;\n  var durationDay = 864e5;\n  var durationWeek = 6048e5;\n\n  var second = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationSecond) * durationSecond);\n  }, function(date, step) {\n    date.setTime(+date + step * durationSecond);\n  }, function(start, end) {\n    return (end - start) / durationSecond;\n  }, function(date) {\n    return date.getUTCSeconds();\n  });\n\n  var seconds = second.range;\n\n  var minute = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationMinute) * durationMinute);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getMinutes();\n  });\n\n  var minutes = minute.range;\n\n  var hour = newInterval(function(date) {\n    var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n    if (offset < 0) offset += durationHour;\n    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getHours();\n  });\n\n  var hours = hour.range;\n\n  var day = newInterval(function(date) {\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n\n  var days = day.range;\n\n  function weekday(i) {\n    return newInterval(function(date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function(start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n    });\n  }\n\n  var timeWeek = weekday(0);\n  var timeMonday = weekday(1);\n  var tuesday = weekday(2);\n  var wednesday = weekday(3);\n  var thursday = weekday(4);\n  var friday = weekday(5);\n  var saturday = weekday(6);\n\n  var sundays = timeWeek.range;\n  var mondays = timeMonday.range;\n  var tuesdays = tuesday.range;\n  var wednesdays = wednesday.range;\n  var thursdays = thursday.range;\n  var fridays = friday.range;\n  var saturdays = saturday.range;\n\n  var month = newInterval(function(date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function(start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function(date) {\n    return date.getMonth();\n  });\n\n  var months = month.range;\n\n  var year = newInterval(function(date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function(start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function(date) {\n    return date.getFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  year.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n\n  var years = year.range;\n\n  var utcMinute = newInterval(function(date) {\n    date.setUTCSeconds(0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getUTCMinutes();\n  });\n\n  var utcMinutes = utcMinute.range;\n\n  var utcHour = newInterval(function(date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getUTCHours();\n  });\n\n  var utcHours = utcHour.range;\n\n  var utcDay = newInterval(function(date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function(start, end) {\n    return (end - start) / durationDay;\n  }, function(date) {\n    return date.getUTCDate() - 1;\n  });\n\n  var utcDays = utcDay.range;\n\n  function utcWeekday(i) {\n    return newInterval(function(date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function(start, end) {\n      return (end - start) / durationWeek;\n    });\n  }\n\n  var utcWeek = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  var utcTuesday = utcWeekday(2);\n  var utcWednesday = utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  var utcFriday = utcWeekday(5);\n  var utcSaturday = utcWeekday(6);\n\n  var utcSundays = utcWeek.range;\n  var utcMondays = utcMonday.range;\n  var utcTuesdays = utcTuesday.range;\n  var utcWednesdays = utcWednesday.range;\n  var utcThursdays = utcThursday.range;\n  var utcFridays = utcFriday.range;\n  var utcSaturdays = utcSaturday.range;\n\n  var utcMonth = newInterval(function(date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function(start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function(date) {\n    return date.getUTCMonth();\n  });\n\n  var utcMonths = utcMonth.range;\n\n  var utcYear = newInterval(function(date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function(start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function(date) {\n    return date.getUTCFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  utcYear.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n\n  var utcYears = utcYear.range;\n\n  // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\n  function formatDecimal(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n    var i, coefficient = x.slice(0, i);\n\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [\n      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n      +x.slice(i + 1)\n    ];\n  }\n\n  function exponent$1(x) {\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n  }\n\n  function formatGroup(grouping, thousands) {\n    return function(value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = grouping[0],\n          length = 0;\n\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n\n      return t.reverse().join(thousands);\n    };\n  }\n\n  function formatDefault(x, p) {\n    x = x.toPrecision(p);\n\n    out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (x[i]) {\n        case \".\": i0 = i1 = i; break;\n        case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n        case \"e\": break out;\n        default: if (i0 > 0) i0 = 0; break;\n      }\n    }\n\n    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n  }\n\n  var prefixExponent;\n\n  function formatPrefixAuto(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1],\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n        n = coefficient.length;\n    return i === n ? coefficient\n        : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n        : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n        : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  }\n\n  function formatRounded(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n        : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  }\n\n  var formatTypes = {\n    \"\": formatDefault,\n    \"%\": function(x, p) { return (x * 100).toFixed(p); },\n    \"b\": function(x) { return Math.round(x).toString(2); },\n    \"c\": function(x) { return x + \"\"; },\n    \"d\": function(x) { return Math.round(x).toString(10); },\n    \"e\": function(x, p) { return x.toExponential(p); },\n    \"f\": function(x, p) { return x.toFixed(p); },\n    \"g\": function(x, p) { return x.toPrecision(p); },\n    \"o\": function(x) { return Math.round(x).toString(8); },\n    \"p\": function(x, p) { return formatRounded(x * 100, p); },\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n    \"x\": function(x) { return Math.round(x).toString(16); }\n  };\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\n  function formatSpecifier(specifier) {\n    return new FormatSpecifier(specifier);\n  }\n\n  function FormatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n    var match,\n        fill = match[1] || \" \",\n        align = match[2] || \">\",\n        sign = match[3] || \"-\",\n        symbol = match[4] || \"\",\n        zero = !!match[5],\n        width = match[6] && +match[6],\n        comma = !!match[7],\n        precision = match[8] && +match[8].slice(1),\n        type = match[9] || \"\";\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // Map invalid types to the default format.\n    else if (!formatTypes[type]) type = \"\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    this.fill = fill;\n    this.align = align;\n    this.sign = sign;\n    this.symbol = symbol;\n    this.zero = zero;\n    this.width = width;\n    this.comma = comma;\n    this.precision = precision;\n    this.type = type;\n  }\n\n  FormatSpecifier.prototype.toString = function() {\n    return this.fill\n        + this.align\n        + this.sign\n        + this.symbol\n        + (this.zero ? \"0\" : \"\")\n        + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n        + (this.comma ? \",\" : \"\")\n        + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n        + this.type;\n  };\n\n  var prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\n  function identity$3(x) {\n    return x;\n  }\n\n  function formatLocale(locale) {\n    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,\n        currency = locale.currency,\n        decimal = locale.decimal;\n\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n\n      var fill = specifier.fill,\n          align = specifier.align,\n          sign = specifier.sign,\n          symbol = specifier.symbol,\n          zero = specifier.zero,\n          width = specifier.width,\n          comma = specifier.comma,\n          precision = specifier.precision,\n          type = specifier.type;\n\n      // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n      var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n          suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? \"%\" : \"\";\n\n      // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n      var formatType = formatTypes[type],\n          maybeSuffix = !type || /[defgprs%]/.test(type);\n\n      // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n      precision = precision == null ? (type ? 6 : 12)\n          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n          : Math.max(0, Math.min(20, precision));\n\n      function format(value) {\n        var valuePrefix = prefix,\n            valueSuffix = suffix,\n            i, n, c;\n\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value;\n\n          // Convert negative to positive, and compute the prefix.\n          // Note that -0 is not less than 0, but 1 / -0 is!\n          var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);\n\n          // Perform the initial formatting.\n          value = formatType(value, precision);\n\n          // If the original value was negative, it may be rounded to zero during\n          // formatting; treat this as (positive) zero.\n          if (valueNegative) {\n            i = -1, n = value.length;\n            valueNegative = false;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), (48 < c && c < 58)\n                  || (type === \"x\" && 96 < c && c < 103)\n                  || (type === \"X\" && 64 < c && c < 71)) {\n                valueNegative = true;\n                break;\n              }\n            }\n          }\n\n          // Compute the prefix and suffix.\n          valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n          valueSuffix = valueSuffix + (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n          // Break the formatted value into the integer “value” part that can be\n          // grouped, and fractional or exponential “suffix” part that is not.\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        }\n\n        // If the fill character is not \"0\", grouping is applied before padding.\n        if (comma && !zero) value = group(value, Infinity);\n\n        // Compute the padding.\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n        // If the fill character is \"0\", grouping is applied after padding.\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n        // Reconstruct the final output based on the desired alignment.\n        switch (align) {\n          case \"<\": return valuePrefix + value + valueSuffix + padding;\n          case \"=\": return valuePrefix + padding + value + valueSuffix;\n          case \"^\": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n        }\n        return padding + valuePrefix + value + valueSuffix;\n      }\n\n      format.toString = function() {\n        return specifier + \"\";\n      };\n\n      return format;\n    }\n\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n          e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,\n          k = Math.pow(10, -e),\n          prefix = prefixes[8 + e / 3];\n      return function(value) {\n        return f(k * value) + prefix;\n      };\n    }\n\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  }\n\n  var locale;\n  exports.format;\n  exports.formatPrefix;\n\n  defaultLocale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"]\n  });\n\n  function defaultLocale(definition) {\n    locale = formatLocale(definition);\n    exports.format = locale.format;\n    exports.formatPrefix = locale.formatPrefix;\n    return locale;\n  }\n\n  function precisionFixed(step) {\n    return Math.max(0, -exponent$1(Math.abs(step)));\n  }\n\n  function precisionPrefix(step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));\n  }\n\n  function precisionRound(step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;\n  }\n\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n\n  function newYear(y) {\n    return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n  }\n\n  function formatLocale$1(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_weekdays = locale.days,\n        locale_shortWeekdays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n\n    var periodRe = formatRe(locale_periods),\n        periodLookup = formatLookup(locale_periods),\n        weekdayRe = formatRe(locale_weekdays),\n        weekdayLookup = formatLookup(locale_weekdays),\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n        monthRe = formatRe(locale_months),\n        monthLookup = formatLookup(locale_months),\n        shortMonthRe = formatRe(locale_shortMonths),\n        shortMonthLookup = formatLookup(locale_shortMonths);\n\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"S\": formatSeconds,\n      \"U\": formatWeekNumberSunday,\n      \"w\": formatWeekdayNumber,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"S\": formatUTCSeconds,\n      \"U\": formatUTCWeekNumberSunday,\n      \"w\": formatUTCWeekdayNumber,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"S\": parseSeconds,\n      \"U\": parseWeekNumberSunday,\n      \"w\": parseWeekdayNumber,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    };\n\n    // These recursive directive definitions must be deferred.\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n    function newFormat(specifier, formats) {\n      return function(date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            n = specifier.length,\n            c,\n            pad,\n            format;\n\n        if (!(date instanceof Date)) date = new Date(+date);\n\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n            else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n\n    function newParse(specifier, newDate) {\n      return function(string) {\n        var d = newYear(1900),\n            i = parseSpecifier(d, specifier, string += \"\", 0);\n        if (i != string.length) return null;\n\n        // The am-pm flag is 0 for AM, and 1 for PM.\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n        // Convert day-of-week and week-of-year to day-of-year.\n        if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          var day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n        }\n\n        // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        }\n\n        // Otherwise, all fields are in local time.\n        return newDate(d);\n      };\n    }\n\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n          n = specifier.length,\n          m = string.length,\n          c,\n          parse;\n\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n\n      return j;\n    }\n\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n\n    return {\n      format: function(specifier) {\n        var f = newFormat(specifier += \"\", formats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      parse: function(specifier) {\n        var p = newParse(specifier += \"\", localDate);\n        p.toString = function() { return specifier; };\n        return p;\n      },\n      utcFormat: function(specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      utcParse: function(specifier) {\n        var p = newParse(specifier, utcDate);\n        p.toString = function() { return specifier; };\n        return p;\n      }\n    };\n  }\n\n  var pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"};\n  var numberRe = /^\\s*\\d+/;\n  var percentRe = /^%/;\n  var requoteRe = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  function pad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n        string = (sign ? -value : value) + \"\",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function formatLookup(names) {\n    var map = {}, i = -1, n = names.length;\n    while (++i < n) map[names[i].toLowerCase()] = i;\n    return map;\n  }\n\n  function parseWeekdayNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?:\\:?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n\n  function formatDayOfMonth(d, p) {\n    return pad(d.getDate(), p, 2);\n  }\n\n  function formatHour24(d, p) {\n    return pad(d.getHours(), p, 2);\n  }\n\n  function formatHour12(d, p) {\n    return pad(d.getHours() % 12 || 12, p, 2);\n  }\n\n  function formatDayOfYear(d, p) {\n    return pad(1 + day.count(year(d), d), p, 3);\n  }\n\n  function formatMilliseconds(d, p) {\n    return pad(d.getMilliseconds(), p, 3);\n  }\n\n  function formatMonthNumber(d, p) {\n    return pad(d.getMonth() + 1, p, 2);\n  }\n\n  function formatMinutes(d, p) {\n    return pad(d.getMinutes(), p, 2);\n  }\n\n  function formatSeconds(d, p) {\n    return pad(d.getSeconds(), p, 2);\n  }\n\n  function formatWeekNumberSunday(d, p) {\n    return pad(timeWeek.count(year(d), d), p, 2);\n  }\n\n  function formatWeekdayNumber(d) {\n    return d.getDay();\n  }\n\n  function formatWeekNumberMonday(d, p) {\n    return pad(timeMonday.count(year(d), d), p, 2);\n  }\n\n  function formatYear(d, p) {\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatFullYear(d, p) {\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n        + pad(z / 60 | 0, \"0\", 2)\n        + pad(z % 60, \"0\", 2);\n  }\n\n  function formatUTCDayOfMonth(d, p) {\n    return pad(d.getUTCDate(), p, 2);\n  }\n\n  function formatUTCHour24(d, p) {\n    return pad(d.getUTCHours(), p, 2);\n  }\n\n  function formatUTCHour12(d, p) {\n    return pad(d.getUTCHours() % 12 || 12, p, 2);\n  }\n\n  function formatUTCDayOfYear(d, p) {\n    return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n  }\n\n  function formatUTCMilliseconds(d, p) {\n    return pad(d.getUTCMilliseconds(), p, 3);\n  }\n\n  function formatUTCMonthNumber(d, p) {\n    return pad(d.getUTCMonth() + 1, p, 2);\n  }\n\n  function formatUTCMinutes(d, p) {\n    return pad(d.getUTCMinutes(), p, 2);\n  }\n\n  function formatUTCSeconds(d, p) {\n    return pad(d.getUTCSeconds(), p, 2);\n  }\n\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad(utcWeek.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCWeekdayNumber(d) {\n    return d.getUTCDay();\n  }\n\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad(utcMonday.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCYear(d, p) {\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCFullYear(d, p) {\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n\n  var locale$1;\n  exports.timeFormat;\n  exports.timeParse;\n  exports.utcFormat;\n  exports.utcParse;\n\n  defaultLocale$1({\n    dateTime: \"%x, %X\",\n    date: \"%-m/%-d/%Y\",\n    time: \"%-I:%M:%S %p\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n\n  function defaultLocale$1(definition) {\n    locale$1 = formatLocale$1(definition);\n    exports.timeFormat = locale$1.format;\n    exports.timeParse = locale$1.parse;\n    exports.utcFormat = locale$1.utcFormat;\n    exports.utcParse = locale$1.utcParse;\n    return locale$1;\n  }\n\n  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\n  function formatIsoNative(date) {\n    return date.toISOString();\n  }\n\n  var formatIso = Date.prototype.toISOString\n      ? formatIsoNative\n      : exports.utcFormat(isoSpecifier);\n\n  function parseIsoNative(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  }\n\n  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n      ? parseIsoNative\n      : exports.utcParse(isoSpecifier);\n\n  var array$2 = Array.prototype;\n\n  var map$2 = array$2.map;\n  var slice$3 = array$2.slice;\n\n  var implicit = {name: \"implicit\"};\n\n  function ordinal(range) {\n    var index = map$1(),\n        domain = [],\n        unknown = implicit;\n\n    range = range == null ? [] : slice$3.call(range);\n\n    function scale(d) {\n      var key = d + \"\", i = index.get(key);\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n      return range[(i - 1) % range.length];\n    }\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = map$1();\n      var i = -1, n = _.length, d, key;\n      while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n      return scale;\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), scale) : range.slice();\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function() {\n      return ordinal()\n          .domain(domain)\n          .range(range)\n          .unknown(unknown);\n    };\n\n    return scale;\n  }\n\n  function band() {\n    var scale = ordinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range,\n        range$$ = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n\n    delete scale.unknown;\n\n    function rescale() {\n      var n = domain().length,\n          reverse = range$$[1] < range$$[0],\n          start = range$$[reverse - 0],\n          stop = range$$[1 - reverse];\n      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n      if (round) step = Math.floor(step);\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n      var values = range(n).map(function(i) { return start + step * i; });\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range$$ = [+_[0], +_[1]], rescale()) : range$$.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range$$ = [+_[0], +_[1]], round = true, rescale();\n    };\n\n    scale.bandwidth = function() {\n      return bandwidth;\n    };\n\n    scale.step = function() {\n      return step;\n    };\n\n    scale.round = function(_) {\n      return arguments.length ? (round = !!_, rescale()) : round;\n    };\n\n    scale.padding = function(_) {\n      return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingInner = function(_) {\n      return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingOuter = function(_) {\n      return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n    };\n\n    scale.align = function(_) {\n      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n    };\n\n    scale.copy = function() {\n      return band()\n          .domain(domain())\n          .range(range$$)\n          .round(round)\n          .paddingInner(paddingInner)\n          .paddingOuter(paddingOuter)\n          .align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    var copy = scale.copy;\n\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n    delete scale.paddingOuter;\n\n    scale.copy = function() {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point$4() {\n    return pointish(band().paddingInner(1));\n  }\n\n  function constant$3(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function number$1(x) {\n    return +x;\n  }\n\n  var unit = [0, 1];\n\n  function deinterpolate(a, b) {\n    return (b -= (a = +a))\n        ? function(x) { return (x - a) / b; }\n        : constant$3(b);\n  }\n\n  function deinterpolateClamp(deinterpolate) {\n    return function(a, b) {\n      var d = deinterpolate(a = +a, b = +b);\n      return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n    };\n  }\n\n  function reinterpolateClamp(reinterpolate) {\n    return function(a, b) {\n      var r = reinterpolate(a = +a, b = +b);\n      return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n    };\n  }\n\n  function bimap(domain, range, deinterpolate, reinterpolate) {\n    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n    if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n    else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n    return function(x) { return r0(d0(x)); };\n  }\n\n  function polymap(domain, range, deinterpolate, reinterpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n        d = new Array(j),\n        r = new Array(j),\n        i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n\n    while (++i < j) {\n      d[i] = deinterpolate(domain[i], domain[i + 1]);\n      r[i] = reinterpolate(range[i], range[i + 1]);\n    }\n\n    return function(x) {\n      var i = bisectRight(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n\n  function copy(source, target) {\n    return target\n        .domain(source.domain())\n        .range(source.range())\n        .interpolate(source.interpolate())\n        .clamp(source.clamp());\n  }\n\n  // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n  function continuous(deinterpolate$$, reinterpolate) {\n    var domain = unit,\n        range = unit,\n        interpolate$$ = interpolate,\n        clamp = false,\n        piecewise,\n        output,\n        input;\n\n    function rescale() {\n      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n\n    function scale(x) {\n      return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);\n    }\n\n    scale.invert = function(y) {\n      return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, rescale()) : clamp;\n    };\n\n    scale.interpolate = function(_) {\n      return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;\n    };\n\n    return rescale();\n  }\n\n  function tickFormat(domain, count, specifier) {\n    var start = domain[0],\n        stop = domain[domain.length - 1],\n        step = tickStep(start, stop, count == null ? 10 : count),\n        precision;\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\": {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n        return exports.formatPrefix(specifier, value);\n      }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\": {\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n        break;\n      }\n      case \"f\":\n      case \"%\": {\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n        break;\n      }\n    }\n    return exports.format(specifier);\n  }\n\n  function linearish(scale) {\n    var domain = scale.domain;\n\n    scale.ticks = function(count) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return tickFormat(domain(), count, specifier);\n    };\n\n    scale.nice = function(count) {\n      var d = domain(),\n          i = d.length - 1,\n          n = count == null ? 10 : count,\n          start = d[0],\n          stop = d[i],\n          step = tickStep(start, stop, n);\n\n      if (step) {\n        step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n        d[0] = Math.floor(start / step) * step;\n        d[i] = Math.ceil(stop / step) * step;\n        domain(d);\n      }\n\n      return scale;\n    };\n\n    return scale;\n  }\n\n  function linear$2() {\n    var scale = continuous(deinterpolate, interpolateNumber);\n\n    scale.copy = function() {\n      return copy(scale, linear$2());\n    };\n\n    return linearish(scale);\n  }\n\n  function identity$4() {\n    var domain = [0, 1];\n\n    function scale(x) {\n      return +x;\n    }\n\n    scale.invert = scale;\n\n    scale.domain = scale.range = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();\n    };\n\n    scale.copy = function() {\n      return identity$4().domain(domain);\n    };\n\n    return linearish(scale);\n  }\n\n  function nice(domain, interval) {\n    domain = domain.slice();\n\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        t;\n\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  }\n\n  function deinterpolate$1(a, b) {\n    return (b = Math.log(b / a))\n        ? function(x) { return Math.log(x / a) / b; }\n        : constant$3(b);\n  }\n\n  function reinterpolate(a, b) {\n    return a < 0\n        ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\n        : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\n  }\n\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n\n  function powp(base) {\n    return base === 10 ? pow10\n        : base === Math.E ? Math.exp\n        : function(x) { return Math.pow(base, x); };\n  }\n\n  function logp(base) {\n    return base === Math.E ? Math.log\n        : base === 10 && Math.log10\n        || base === 2 && Math.log2\n        || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n  }\n\n  function reflect(f) {\n    return function(x) {\n      return -f(-x);\n    };\n  }\n\n  function log() {\n    var scale = continuous(deinterpolate$1, reinterpolate).domain([1, 10]),\n        domain = scale.domain,\n        base = 10,\n        logs = logp(10),\n        pows = powp(10);\n\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n      if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n      return scale;\n    }\n\n    scale.base = function(_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.ticks = function(count) {\n      var d = domain(),\n          u = d[0],\n          v = d[d.length - 1],\n          r;\n\n      if (r = v < u) i = u, u = v, v = i;\n\n      var i = logs(u),\n          j = logs(v),\n          p,\n          k,\n          t,\n          n = count == null ? 10 : +count,\n          z = [];\n\n      if (!(base % 1) && j - i < n) {\n        i = Math.round(i) - 1, j = Math.round(j) + 1;\n        if (u > 0) for (; i < j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i < j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n      } else {\n        z = ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n\n      return r ? z.reverse() : z;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = exports.format(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n      return function(d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n\n    scale.nice = function() {\n      return domain(nice(domain(), {\n        floor: function(x) { return pows(Math.floor(logs(x))); },\n        ceil: function(x) { return pows(Math.ceil(logs(x))); }\n      }));\n    };\n\n    scale.copy = function() {\n      return copy(scale, log().base(base));\n    };\n\n    return scale;\n  }\n\n  function raise(x, exponent) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  }\n\n  function pow() {\n    var exponent = 1,\n        scale = continuous(deinterpolate, reinterpolate),\n        domain = scale.domain;\n\n    function deinterpolate(a, b) {\n      return (b = raise(b, exponent) - (a = raise(a, exponent)))\n          ? function(x) { return (raise(x, exponent) - a) / b; }\n          : constant$3(b);\n    }\n\n    function reinterpolate(a, b) {\n      b = raise(b, exponent) - (a = raise(a, exponent));\n      return function(t) { return raise(a + b * t, 1 / exponent); };\n    }\n\n    scale.exponent = function(_) {\n      return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n    };\n\n    scale.copy = function() {\n      return copy(scale, pow().exponent(exponent));\n    };\n\n    return linearish(scale);\n  }\n\n  function sqrt() {\n    return pow().exponent(0.5);\n  }\n\n  function quantile() {\n    var domain = [],\n        range = [],\n        thresholds = [];\n\n    function rescale() {\n      var i = 0, n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n      return scale;\n    }\n\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];\n    }\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [\n        i > 0 ? thresholds[i - 1] : domain[0],\n        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n      ];\n    };\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(ascending);\n      return rescale();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.quantiles = function() {\n      return thresholds.slice();\n    };\n\n    scale.copy = function() {\n      return quantile()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\n  function quantize$1() {\n    var x0 = 0,\n        x1 = 1,\n        n = 1,\n        domain = [0.5],\n        range = [0, 1];\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      return scale;\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN]\n          : i < 1 ? [x0, domain[0]]\n          : i >= n ? [domain[n - 1], x1]\n          : [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return quantize$1()\n          .domain([x0, x1])\n          .range(range);\n    };\n\n    return linearish(scale);\n  }\n\n  function threshold$1() {\n    var domain = [0.5],\n        range = [0, 1],\n        n = 1;\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return threshold$1()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\nvar   durationSecond$1 = 1000;\nvar   durationMinute$1 = durationSecond$1 * 60;\nvar   durationHour$1 = durationMinute$1 * 60;\nvar   durationDay$1 = durationHour$1 * 24;\nvar   durationWeek$1 = durationDay$1 * 7;\n  var durationMonth = durationDay$1 * 30;\n  var durationYear = durationDay$1 * 365;\n  function date$1(t) {\n    return new Date(t);\n  }\n\n  function number$2(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n    var scale = continuous(deinterpolate, interpolateNumber),\n        invert = scale.invert,\n        domain = scale.domain;\n\n    var formatMillisecond = format(\".%L\"),\n        formatSecond = format(\":%S\"),\n        formatMinute = format(\"%I:%M\"),\n        formatHour = format(\"%I %p\"),\n        formatDay = format(\"%a %d\"),\n        formatWeek = format(\"%b %d\"),\n        formatMonth = format(\"%B\"),\n        formatYear = format(\"%Y\");\n\n    var tickIntervals = [\n      [second,  1,      durationSecond$1],\n      [second,  5,  5 * durationSecond$1],\n      [second, 15, 15 * durationSecond$1],\n      [second, 30, 30 * durationSecond$1],\n      [minute,  1,      durationMinute$1],\n      [minute,  5,  5 * durationMinute$1],\n      [minute, 15, 15 * durationMinute$1],\n      [minute, 30, 30 * durationMinute$1],\n      [  hour,  1,      durationHour$1  ],\n      [  hour,  3,  3 * durationHour$1  ],\n      [  hour,  6,  6 * durationHour$1  ],\n      [  hour, 12, 12 * durationHour$1  ],\n      [   day,  1,      durationDay$1   ],\n      [   day,  2,  2 * durationDay$1   ],\n      [  week,  1,      durationWeek$1  ],\n      [ month,  1,      durationMonth ],\n      [ month,  3,  3 * durationMonth ],\n      [  year,  1,      durationYear  ]\n    ];\n\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond\n          : minute(date) < date ? formatSecond\n          : hour(date) < date ? formatMinute\n          : day(date) < date ? formatHour\n          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n          : year(date) < date ? formatMonth\n          : formatYear)(date);\n    }\n\n    function tickInterval(interval, start, stop, step) {\n      if (interval == null) interval = 10;\n\n      // If a desired tick count is specified, pick a reasonable tick interval\n      // based on the extent of the domain and a rough estimate of tick size.\n      // Otherwise, assume interval is already a time interval and use it.\n      if (typeof interval === \"number\") {\n        var target = Math.abs(stop - start) / interval,\n            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n        if (i === tickIntervals.length) {\n          step = tickStep(start / durationYear, stop / durationYear, interval);\n          interval = year;\n        } else if (i) {\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n          step = i[1];\n          interval = i[0];\n        } else {\n          step = tickStep(start, stop, interval);\n          interval = millisecond;\n        }\n      }\n\n      return step == null ? interval : interval.every(step);\n    }\n\n    scale.invert = function(y) {\n      return new Date(invert(y));\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);\n    };\n\n    scale.ticks = function(interval, step) {\n      var d = domain(),\n          t0 = d[0],\n          t1 = d[d.length - 1],\n          r = t1 < t0,\n          t;\n      if (r) t = t0, t0 = t1, t1 = t;\n      t = tickInterval(interval, t0, t1, step);\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n      return r ? t.reverse() : t;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return specifier == null ? tickFormat : format(specifier);\n    };\n\n    scale.nice = function(interval, step) {\n      var d = domain();\n      return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n          ? domain(nice(d, interval))\n          : scale;\n    };\n\n    scale.copy = function() {\n      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n    };\n\n    return scale;\n  }\n\n  function time() {\n    return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n  }\n\n  function utcTime() {\n    return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n  }\n\n  function colors(s) {\n    return s.match(/.{6}/g).map(function(x) {\n      return \"#\" + x;\n    });\n  }\n\n  var category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n\n  var category20b = colors(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\");\n\n  var category20c = colors(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\");\n\n  var category20 = colors(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\");\n\n  var cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n\n  var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var rainbow = cubehelix();\n\n  function rainbow$1(t) {\n    if (t < 0 || t > 1) t -= Math.floor(t);\n    var ts = Math.abs(t - 0.5);\n    rainbow.h = 360 * t - 100;\n    rainbow.s = 1.5 - 1.5 * ts;\n    rainbow.l = 0.8 - 0.9 * ts;\n    return rainbow + \"\";\n  }\n\n  function ramp(range) {\n    var n = range.length;\n    return function(t) {\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n    };\n  }\n\n  var viridis = ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\n  var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\n  var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\n  var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n\n  function sequential(interpolator) {\n    var x0 = 0,\n        x1 = 1,\n        clamp = false;\n\n    function scale(x) {\n      var t = (x - x0) / (x1 - x0);\n      return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function(_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    scale.copy = function() {\n      return sequential(interpolator).domain([x0, x1]).clamp(clamp);\n    };\n\n    return linearish(scale);\n  }\n\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n\n  function namespace(name) {\n    var prefix = name += \"\", i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n  }\n\n  function creatorInherit(name) {\n    return function() {\n      var document = this.ownerDocument,\n          uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml\n          ? document.createElement(name)\n          : document.createElementNS(uri, name);\n    };\n  }\n\n  function creatorFixed(fullname) {\n    return function() {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n\n  function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local\n        ? creatorFixed\n        : creatorInherit)(fullname);\n  }\n\n  var nextId = 0;\n\n  function local() {\n    return new Local;\n  }\n\n  function Local() {\n    this._ = \"@\" + (++nextId).toString(36);\n  }\n\n  Local.prototype = local.prototype = {\n    constructor: Local,\n    get: function(node) {\n      var id = this._;\n      while (!(id in node)) if (!(node = node.parentNode)) return;\n      return node[id];\n    },\n    set: function(node, value) {\n      return node[this._] = value;\n    },\n    remove: function(node) {\n      return this._ in node && delete node[this._];\n    },\n    toString: function() {\n      return this._;\n    }\n  };\n\n  var matcher = function(selector) {\n    return function() {\n      return this.matches(selector);\n    };\n  };\n\n  if (typeof document !== \"undefined\") {\n    var element = document.documentElement;\n    if (!element.matches) {\n      var vendorMatches = element.webkitMatchesSelector\n          || element.msMatchesSelector\n          || element.mozMatchesSelector\n          || element.oMatchesSelector;\n      matcher = function(selector) {\n        return function() {\n          return vendorMatches.call(this, selector);\n        };\n      };\n    }\n  }\n\n  var matcher$1 = matcher;\n\n  var filterEvents = {};\n\n  exports.event = null;\n\n  if (typeof document !== \"undefined\") {\n    var element$1 = document.documentElement;\n    if (!(\"onmouseenter\" in element$1)) {\n      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n    }\n  }\n\n  function filterContextListener(listener, index, group) {\n    listener = contextListener(listener, index, group);\n    return function(event) {\n      var related = event.relatedTarget;\n      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n        listener.call(this, event);\n      }\n    };\n  }\n\n  function contextListener(listener, index, group) {\n    return function(event1) {\n      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n      exports.event = event1;\n      try {\n        listener.call(this, this.__data__, index, group);\n      } finally {\n        exports.event = event0;\n      }\n    };\n  }\n\n  function parseTypenames$1(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return {type: t, name: name};\n    });\n  }\n\n  function onRemove(typename) {\n    return function() {\n      var on = this.__on;\n      if (!on) return;\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n        } else {\n          on[++i] = o;\n        }\n      }\n      if (++i) on.length = i;\n      else delete this.__on;\n    };\n  }\n\n  function onAdd(typename, value, capture) {\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n    return function(d, i, group) {\n      var on = this.__on, o, listener = wrap(value, i, group);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, capture);\n      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n      if (!on) this.__on = [o];\n      else on.push(o);\n    };\n  }\n\n  function selection_on(typename, value, capture) {\n    var typenames = parseTypenames$1(typename + \"\"), i, n = typenames.length, t;\n\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n\n    on = value ? onAdd : onRemove;\n    if (capture == null) capture = false;\n    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n    return this;\n  }\n\n  function customEvent(event1, listener, that, args) {\n    var event0 = exports.event;\n    event1.sourceEvent = exports.event;\n    exports.event = event1;\n    try {\n      return listener.apply(that, args);\n    } finally {\n      exports.event = event0;\n    }\n  }\n\n  function sourceEvent() {\n    var current = exports.event, source;\n    while (source = current.sourceEvent) current = source;\n    return current;\n  }\n\n  function point$5(node, event) {\n    var svg = node.ownerSVGElement || node;\n\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n\n    var rect = node.getBoundingClientRect();\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n  }\n\n  function mouse(node) {\n    var event = sourceEvent();\n    if (event.changedTouches) event = event.changedTouches[0];\n    return point$5(node, event);\n  }\n\n  function none$2() {}\n\n  function selector(selector) {\n    return selector == null ? none$2 : function() {\n      return this.querySelector(selector);\n    };\n  }\n\n  function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function empty() {\n    return [];\n  }\n\n  function selectorAll(selector) {\n    return selector == null ? empty : function() {\n      return this.querySelectorAll(selector);\n    };\n  }\n\n  function selection_selectAll(select) {\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, parents);\n  }\n\n  function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function sparse(update) {\n    return new Array(update.length);\n  }\n\n  function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  }\n\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n    querySelector: function(selector) { return this._parent.querySelector(selector); },\n    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n  };\n\n  function constant$4(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n        node,\n        groupLength = group.length,\n        dataLength = data.length;\n\n    // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Put any non-null nodes that don’t fit into exit.\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n        node,\n        nodeByKeyValue = {},\n        groupLength = group.length,\n        dataLength = data.length,\n        keyValues = new Array(groupLength),\n        keyValue;\n\n    // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n        if (keyValue in nodeByKeyValue) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue[keyValue] = node;\n        }\n      }\n    }\n\n    // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n      if (node = nodeByKeyValue[keyValue]) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[keyValue] = null;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Add any remaining nodes that were not bound to data to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function selection_data(value, key) {\n    if (!value) {\n      data = new Array(this.size()), j = -1;\n      this.each(function(d) { data[++j] = d; });\n      return data;\n    }\n\n    var bind = key ? bindKey : bindIndex,\n        parents = this._parents,\n        groups = this._groups;\n\n    if (typeof value !== \"function\") value = constant$4(value);\n\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n          group = groups[j],\n          groupLength = group.length,\n          data = value.call(parent, parent && parent.__data__, j, parents),\n          dataLength = data.length,\n          enterGroup = enter[j] = new Array(dataLength),\n          updateGroup = update[j] = new Array(dataLength),\n          exitGroup = exit[j] = new Array(groupLength);\n\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n      // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n          previous._next = next || null;\n        }\n      }\n    }\n\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  }\n\n  function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  }\n\n  function selection_merge(selection) {\n\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Selection(merges, this._parents);\n  }\n\n  function selection_order() {\n\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function selection_sort(compare) {\n    if (!compare) compare = ascending$2;\n\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n      sortgroup.sort(compareNode);\n    }\n\n    return new Selection(sortgroups, this._parents).order();\n  }\n\n  function ascending$2(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  }\n\n  function selection_nodes() {\n    var nodes = new Array(this.size()), i = -1;\n    this.each(function() { nodes[++i] = this; });\n    return nodes;\n  }\n\n  function selection_node() {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n\n    return null;\n  }\n\n  function selection_size() {\n    var size = 0;\n    this.each(function() { ++size; });\n    return size;\n  }\n\n  function selection_empty() {\n    return !this.node();\n  }\n\n  function selection_each(callback) {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n\n    return this;\n  }\n\n  function attrRemove(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, value) {\n    return function() {\n      this.setAttribute(name, value);\n    };\n  }\n\n  function attrConstantNS(fullname, value) {\n    return function() {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n\n  function attrFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);\n      else this.setAttribute(name, v);\n    };\n  }\n\n  function attrFunctionNS(fullname, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n      else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n\n  function selection_attr(name, value) {\n    var fullname = namespace(name);\n\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local\n          ? node.getAttributeNS(fullname.space, fullname.local)\n          : node.getAttribute(fullname);\n    }\n\n    return this.each((value == null\n        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS : attrFunction)\n        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n  }\n\n  function window(node) {\n    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n        || (node.document && node) // node is a Window\n        || node.defaultView; // node is a Document\n  }\n\n  function styleRemove(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, value, priority) {\n    return function() {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n\n  function styleFunction(name, value, priority) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);\n      else this.style.setProperty(name, v, priority);\n    };\n  }\n\n  function selection_style(name, value, priority) {\n    var node;\n    return arguments.length > 1\n        ? this.each((value == null\n              ? styleRemove : typeof value === \"function\"\n              ? styleFunction\n              : styleConstant)(name, value, priority == null ? \"\" : priority))\n        : window(node = this.node())\n            .getComputedStyle(node, null)\n            .getPropertyValue(name);\n  }\n\n  function propertyRemove(name) {\n    return function() {\n      delete this[name];\n    };\n  }\n\n  function propertyConstant(name, value) {\n    return function() {\n      this[name] = value;\n    };\n  }\n\n  function propertyFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];\n      else this[name] = v;\n    };\n  }\n\n  function selection_property(name, value) {\n    return arguments.length > 1\n        ? this.each((value == null\n            ? propertyRemove : typeof value === \"function\"\n            ? propertyFunction\n            : propertyConstant)(name, value))\n        : this.node()[name];\n  }\n\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n\n  ClassList.prototype = {\n    add: function(name) {\n      var i = this._names.indexOf(name);\n      if (i < 0) {\n        this._names.push(name);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function(name) {\n      var i = this._names.indexOf(name);\n      if (i >= 0) {\n        this._names.splice(i, 1);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n\n  function classedAdd(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.add(names[i]);\n  }\n\n  function classedRemove(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.remove(names[i]);\n  }\n\n  function classedTrue(names) {\n    return function() {\n      classedAdd(this, names);\n    };\n  }\n\n  function classedFalse(names) {\n    return function() {\n      classedRemove(this, names);\n    };\n  }\n\n  function classedFunction(names, value) {\n    return function() {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n\n  function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n      var list = classList(this.node()), i = -1, n = names.length;\n      while (++i < n) if (!list.contains(names[i])) return false;\n      return true;\n    }\n\n    return this.each((typeof value === \"function\"\n        ? classedFunction : value\n        ? classedTrue\n        : classedFalse)(names, value));\n  }\n\n  function textRemove() {\n    this.textContent = \"\";\n  }\n\n  function textConstant(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_text(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? textRemove : (typeof value === \"function\"\n            ? textFunction\n            : textConstant)(value))\n        : this.node().textContent;\n  }\n\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n\n  function htmlConstant(value) {\n    return function() {\n      this.innerHTML = value;\n    };\n  }\n\n  function htmlFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_html(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? htmlRemove : (typeof value === \"function\"\n            ? htmlFunction\n            : htmlConstant)(value))\n        : this.node().innerHTML;\n  }\n\n  function raise$1() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n\n  function selection_raise() {\n    return this.each(raise$1);\n  }\n\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  function selection_lower() {\n    return this.each(lower);\n  }\n\n  function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function() {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  }\n\n  function constantNull() {\n    return null;\n  }\n\n  function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function() {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  }\n\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n\n  function selection_remove() {\n    return this.each(remove);\n  }\n\n  function selection_datum(value) {\n    return arguments.length\n        ? this.property(\"__data__\", value)\n        : this.node().__data__;\n  }\n\n  function dispatchEvent(node, type, params) {\n    var window$$ = window(node),\n        event = window$$.CustomEvent;\n\n    if (event) {\n      event = new event(type, params);\n    } else {\n      event = window$$.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n      else event.initEvent(type, false, false);\n    }\n\n    node.dispatchEvent(event);\n  }\n\n  function dispatchConstant(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params);\n    };\n  }\n\n  function dispatchFunction(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n\n  function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\"\n        ? dispatchFunction\n        : dispatchConstant)(type, params));\n  }\n\n  var root = [null];\n\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n\n  Selection.prototype = selection.prototype = {\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    merge: selection_merge,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  };\n\n  function select(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n        : new Selection([[selector]], root);\n  }\n\n  function selectAll(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n        : new Selection([selector == null ? [] : selector], root);\n  }\n\n  function touch(node, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return point$5(node, touch);\n      }\n    }\n\n    return null;\n  }\n\n  function touches(node, touches) {\n    if (touches == null) touches = sourceEvent().touches;\n\n    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n      points[i] = point$5(node, touches[i]);\n    }\n\n    return points;\n  }\n\n  var emptyOn = dispatch(\"start\", \"end\", \"interrupt\");\n  var emptyTween = [];\n\n  var CREATED = 0;\n  var SCHEDULED = 1;\n  var STARTING = 2;\n  var STARTED = 3;\n  var ENDING = 4;\n  var ENDED = 5;\n\n  function schedule(node, name, id, index, group, timing) {\n    var schedules = node.__transition;\n    if (!schedules) node.__transition = {};\n    else if (id in schedules) return;\n    create(node, id, {\n      name: name,\n      index: index, // For context during callback.\n      group: group, // For context during callback.\n      on: emptyOn,\n      tween: emptyTween,\n      time: timing.time,\n      delay: timing.delay,\n      duration: timing.duration,\n      ease: timing.ease,\n      timer: null,\n      state: CREATED\n    });\n  }\n\n  function init(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function set$2(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function get$1(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id])) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function create(node, id, self) {\n    var schedules = node.__transition,\n        tween;\n\n    // Initialize the self timer when the transition is created.\n    // Note the actual delay is not known until the first callback!\n    schedules[id] = self;\n    self.timer = timer(schedule, 0, self.time);\n\n    // If the delay is greater than this first sleep, sleep some more;\n    // otherwise, start immediately.\n    function schedule(elapsed) {\n      self.state = SCHEDULED;\n      if (self.delay <= elapsed) start(elapsed - self.delay);\n      else self.timer.restart(start, self.delay, self.time);\n    }\n\n    function start(elapsed) {\n      var i, j, n, o;\n\n      for (i in schedules) {\n        o = schedules[i];\n        if (o.name !== self.name) continue;\n\n        // Interrupt the active transition, if any.\n        // Dispatch the interrupt event.\n        if (o.state === STARTED) {\n          o.state = ENDED;\n          o.timer.stop();\n          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n          delete schedules[i];\n        }\n\n        // Cancel any pre-empted transitions. No interrupt event is dispatched\n        // because the cancelled transitions never started. Note that this also\n        // removes this transition from the pending list!\n        else if (+i < id) {\n          o.state = ENDED;\n          o.timer.stop();\n          delete schedules[i];\n        }\n      }\n\n      // Defer the first tick to end of the current frame; see mbostock/d3#1576.\n      // Note the transition may be canceled after start and before the first tick!\n      // Note this must be scheduled before the start event; see d3/d3-transition#16!\n      // Assuming this is successful, subsequent callbacks go straight to tick.\n      timeout$1(function() {\n        if (self.state === STARTED) {\n          self.timer.restart(tick, self.delay, self.time);\n          tick(elapsed);\n        }\n      });\n\n      // Dispatch the start event.\n      // Note this must be done before the tween are initialized.\n      self.state = STARTING;\n      self.on.call(\"start\", node, node.__data__, self.index, self.group);\n      if (self.state !== STARTING) return; // interrupted\n      self.state = STARTED;\n\n      // Initialize the tween, deleting null tween.\n      tween = new Array(n = self.tween.length);\n      for (i = 0, j = -1; i < n; ++i) {\n        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n          tween[++j] = o;\n        }\n      }\n      tween.length = j + 1;\n    }\n\n    function tick(elapsed) {\n      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1),\n          i = -1,\n          n = tween.length;\n\n      while (++i < n) {\n        tween[i].call(null, t);\n      }\n\n      // Dispatch the end event.\n      if (self.state === ENDING) {\n        self.state = ENDED;\n        self.timer.stop();\n        self.on.call(\"end\", node, node.__data__, self.index, self.group);\n        for (i in schedules) if (+i !== id) return void delete schedules[id];\n        delete node.__transition;\n      }\n    }\n  }\n\n  function interrupt(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        active,\n        empty = true,\n        i;\n\n    if (!schedules) return;\n\n    name = name == null ? null : name + \"\";\n\n    for (i in schedules) {\n      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n      active = schedule.state === STARTED;\n      schedule.state = ENDED;\n      schedule.timer.stop();\n      if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\n      delete schedules[i];\n    }\n\n    if (empty) delete node.__transition;\n  }\n\n  function selection_interrupt(name) {\n    return this.each(function() {\n      interrupt(this, name);\n    });\n  }\n\n  function tweenRemove(id, name) {\n    var tween0, tween1;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = tween0 = tween;\n        for (var i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1 = tween1.slice();\n            tween1.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function tweenFunction(id, name, value) {\n    var tween0, tween1;\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = (tween0 = tween).slice();\n        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1[i] = t;\n            break;\n          }\n        }\n        if (i === n) tween1.push(t);\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function transition_tween(name, value) {\n    var id = this._id;\n\n    name += \"\";\n\n    if (arguments.length < 2) {\n      var tween = get$1(this.node(), id).tween;\n      for (var i = 0, n = tween.length, t; i < n; ++i) {\n        if ((t = tween[i]).name === name) {\n          return t.value;\n        }\n      }\n      return null;\n    }\n\n    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n  }\n\n  function tweenValue(transition, name, value) {\n    var id = transition._id;\n\n    transition.each(function() {\n      var schedule = set$2(this, id);\n      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n    });\n\n    return function(node) {\n      return get$1(node, id).value[name];\n    };\n  }\n\n  function interpolate$1(a, b) {\n    var c;\n    return (typeof b === \"number\" ? interpolateNumber\n        : b instanceof color ? interpolateRgb\n        : (c = color(b)) ? (b = c, interpolateRgb)\n        : interpolateString)(a, b);\n  }\n\n  function attrRemove$1(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS$1(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrConstantNS$1(fullname, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttribute(name);\n      value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function attrFunctionNS$1(fullname, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n      value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_attr(name, value) {\n    var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform$2 : interpolate$1;\n    return this.attrTween(name, typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)\n        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\n  }\n\n  function attrTweenNS(fullname, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttributeNS(fullname.space, fullname.local, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function attrTween(name, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttribute(name, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_attrTween(name, value) {\n    var key = \"attr.\" + name;\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    var fullname = namespace(name);\n    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n  }\n\n  function delayFunction(id, value) {\n    return function() {\n      init(this, id).delay = +value.apply(this, arguments);\n    };\n  }\n\n  function delayConstant(id, value) {\n    return value = +value, function() {\n      init(this, id).delay = value;\n    };\n  }\n\n  function transition_delay(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? delayFunction\n            : delayConstant)(id, value))\n        : get$1(this.node(), id).delay;\n  }\n\n  function durationFunction(id, value) {\n    return function() {\n      set$2(this, id).duration = +value.apply(this, arguments);\n    };\n  }\n\n  function durationConstant(id, value) {\n    return value = +value, function() {\n      set$2(this, id).duration = value;\n    };\n  }\n\n  function transition_duration(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? durationFunction\n            : durationConstant)(id, value))\n        : get$1(this.node(), id).duration;\n  }\n\n  function easeConstant(id, value) {\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      set$2(this, id).ease = value;\n    };\n  }\n\n  function transition_ease(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each(easeConstant(id, value))\n        : get$1(this.node(), id).ease;\n  }\n\n  function transition_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, this._name, this._id);\n  }\n\n  function transition_merge(transition) {\n    if (transition._id !== this._id) throw new Error;\n\n    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Transition(merges, this._parents, this._name, this._id);\n  }\n\n  function start$1(name) {\n    return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n      var i = t.indexOf(\".\");\n      if (i >= 0) t = t.slice(0, i);\n      return !t || t === \"start\";\n    });\n  }\n\n  function onFunction(id, name, listener) {\n    var on0, on1, sit = start$1(name) ? init : set$2;\n    return function() {\n      var schedule = sit(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n      schedule.on = on1;\n    };\n  }\n\n  function transition_on(name, listener) {\n    var id = this._id;\n\n    return arguments.length < 2\n        ? get$1(this.node(), id).on.on(name)\n        : this.each(onFunction(id, name, listener));\n  }\n\n  function removeFunction(id) {\n    return function() {\n      var parent = this.parentNode;\n      for (var i in this.__transition) if (+i !== id) return;\n      if (parent) parent.removeChild(this);\n    };\n  }\n\n  function transition_remove() {\n    return this.on(\"end.remove\", removeFunction(this._id));\n  }\n\n  function transition_select(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, name, id);\n  }\n\n  function transition_selectAll(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\n            if (child = children[k]) {\n              schedule(child, name, id, k, children, inherit);\n            }\n          }\n          subgroups.push(children);\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, parents, name, id);\n  }\n\n  var Selection$1 = selection.prototype.constructor;\n\n  function transition_selection() {\n    return new Selection$1(this._groups, this._parents);\n  }\n\n  function styleRemove$1(name, interpolate) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function styleRemoveEnd(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function styleFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = value(this);\n      if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_style(name, value, priority) {\n    var i = (name += \"\") === \"transform\" ? interpolateTransform$1 : interpolate$1;\n    return value == null ? this\n            .styleTween(name, styleRemove$1(name, i))\n            .on(\"end.style.\" + name, styleRemoveEnd(name))\n        : this.styleTween(name, typeof value === \"function\"\n            ? styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value))\n            : styleConstant$1(name, i, value), priority);\n  }\n\n  function styleTween(name, value, priority) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.style.setProperty(name, i(t), priority);\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_styleTween(name, value, priority) {\n    var key = \"style.\" + (name += \"\");\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n  }\n\n  function textConstant$1(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction$1(value) {\n    return function() {\n      var value1 = value(this);\n      this.textContent = value1 == null ? \"\" : value1;\n    };\n  }\n\n  function transition_text(value) {\n    return this.tween(\"text\", typeof value === \"function\"\n        ? textFunction$1(tweenValue(this, \"text\", value))\n        : textConstant$1(value == null ? \"\" : value + \"\"));\n  }\n\n  function transition_transition() {\n    var name = this._name,\n        id0 = this._id,\n        id1 = newId();\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          var inherit = get$1(node, id0);\n          schedule(node, name, id1, i, group, {\n            time: inherit.time + inherit.delay + inherit.duration,\n            delay: 0,\n            duration: inherit.duration,\n            ease: inherit.ease\n          });\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id1);\n  }\n\n  var id = 0;\n\n  function Transition(groups, parents, name, id) {\n    this._groups = groups;\n    this._parents = parents;\n    this._name = name;\n    this._id = id;\n  }\n\n  function transition(name) {\n    return selection().transition(name);\n  }\n\n  function newId() {\n    return ++id;\n  }\n\n  var selection_prototype = selection.prototype;\n\n  Transition.prototype = transition.prototype = {\n    constructor: Transition,\n    select: transition_select,\n    selectAll: transition_selectAll,\n    filter: transition_filter,\n    merge: transition_merge,\n    selection: transition_selection,\n    transition: transition_transition,\n    call: selection_prototype.call,\n    nodes: selection_prototype.nodes,\n    node: selection_prototype.node,\n    size: selection_prototype.size,\n    empty: selection_prototype.empty,\n    each: selection_prototype.each,\n    on: transition_on,\n    attr: transition_attr,\n    attrTween: transition_attrTween,\n    style: transition_style,\n    styleTween: transition_styleTween,\n    text: transition_text,\n    remove: transition_remove,\n    tween: transition_tween,\n    delay: transition_delay,\n    duration: transition_duration,\n    ease: transition_ease\n  };\n\n  var defaultTiming = {\n    time: null, // Set on use.\n    delay: 0,\n    duration: 250,\n    ease: easeCubicInOut\n  };\n\n  function inherit(node, id) {\n    var timing;\n    while (!(timing = node.__transition) || !(timing = timing[id])) {\n      if (!(node = node.parentNode)) {\n        return defaultTiming.time = now(), defaultTiming;\n      }\n    }\n    return timing;\n  }\n\n  function selection_transition(name) {\n    var id,\n        timing;\n\n    if (name instanceof Transition) {\n      id = name._id, name = name._name;\n    } else {\n      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n    }\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          schedule(node, name, id, i, group, timing || inherit(node, id));\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id);\n  }\n\n  selection.prototype.interrupt = selection_interrupt;\n  selection.prototype.transition = selection_transition;\n\n  var root$1 = [null];\n\n  function active(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        i;\n\n    if (schedules) {\n      name = name == null ? null : name + \"\";\n      for (i in schedules) {\n        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n          return new Transition([[node]], root$1, name, +i);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  var slice$4 = Array.prototype.slice;\n\n  function identity$5(x) {\n    return x;\n  }\n\n  var top = 1;\n  var right = 2;\n  var bottom = 3;\n  var left = 4;\nvar   epsilon$2 = 1e-6;\n  function translateX(scale0, scale1, d) {\n    var x = scale0(d);\n    return \"translate(\" + (isFinite(x) ? x : scale1(d)) + \",0)\";\n  }\n\n  function translateY(scale0, scale1, d) {\n    var y = scale0(d);\n    return \"translate(0,\" + (isFinite(y) ? y : scale1(d)) + \")\";\n  }\n\n  function center(scale) {\n    var width = scale.bandwidth() / 2;\n    return function(d) {\n      return scale(d) + width;\n    };\n  }\n\n  function entering() {\n    return !this.__axis;\n  }\n\n  function axis(orient, scale) {\n    var tickArguments = [],\n        tickValues = null,\n        tickFormat = null,\n        tickSizeInner = 6,\n        tickSizeOuter = 6,\n        tickPadding = 3;\n\n    function axis(context) {\n      var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n          format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,\n          spacing = Math.max(tickSizeInner, 0) + tickPadding,\n          transform = orient === top || orient === bottom ? translateX : translateY,\n          range = scale.range(),\n          range0 = range[0] + 0.5,\n          range1 = range[range.length - 1] + 0.5,\n          position = (scale.bandwidth ? center : identity$5)(scale.copy()),\n          selection = context.selection ? context.selection() : context,\n          path = selection.selectAll(\".domain\").data([null]),\n          tick = selection.selectAll(\".tick\").data(values, scale).order(),\n          tickExit = tick.exit(),\n          tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n          line = tick.select(\"line\"),\n          text = tick.select(\"text\"),\n          k = orient === top || orient === left ? -1 : 1,\n          x, y = orient === left || orient === right ? (x = \"x\", \"y\") : (x = \"y\", \"x\");\n\n      path = path.merge(path.enter().insert(\"path\", \".tick\")\n          .attr(\"class\", \"domain\")\n          .attr(\"stroke\", \"#000\"));\n\n      tick = tick.merge(tickEnter);\n\n      line = line.merge(tickEnter.append(\"line\")\n          .attr(\"stroke\", \"#000\")\n          .attr(x + \"2\", k * tickSizeInner)\n          .attr(y + \"1\", 0.5)\n          .attr(y + \"2\", 0.5));\n\n      text = text.merge(tickEnter.append(\"text\")\n          .attr(\"fill\", \"#000\")\n          .attr(x, k * spacing)\n          .attr(y, 0.5)\n          .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \".71em\" : \".32em\"));\n\n      if (context !== selection) {\n        path = path.transition(context);\n        tick = tick.transition(context);\n        line = line.transition(context);\n        text = text.transition(context);\n\n        tickExit = tickExit.transition(context)\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(position, this.parentNode.__axis || position, d); });\n\n        tickEnter\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(this.parentNode.__axis || position, position, d); });\n      }\n\n      tickExit.remove();\n\n      path\n          .attr(\"d\", orient === left || orient == right\n              ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter\n              : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\n\n      tick\n          .attr(\"opacity\", 1)\n          .attr(\"transform\", function(d) { return transform(position, position, d); });\n\n      line\n          .attr(x + \"2\", k * tickSizeInner);\n\n      text\n          .attr(x, k * spacing)\n          .text(format);\n\n      selection.filter(entering)\n          .attr(\"fill\", \"none\")\n          .attr(\"font-size\", 10)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n      selection\n          .each(function() { this.__axis = position; });\n    }\n\n    axis.scale = function(_) {\n      return arguments.length ? (scale = _, axis) : scale;\n    };\n\n    axis.ticks = function() {\n      return tickArguments = slice$4.call(arguments), axis;\n    };\n\n    axis.tickArguments = function(_) {\n      return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();\n    };\n\n    axis.tickValues = function(_) {\n      return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();\n    };\n\n    axis.tickFormat = function(_) {\n      return arguments.length ? (tickFormat = _, axis) : tickFormat;\n    };\n\n    axis.tickSize = function(_) {\n      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeInner = function(_) {\n      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeOuter = function(_) {\n      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n    };\n\n    axis.tickPadding = function(_) {\n      return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n    };\n\n    return axis;\n  }\n\n  function axisTop(scale) {\n    return axis(top, scale);\n  }\n\n  function axisRight(scale) {\n    return axis(right, scale);\n  }\n\n  function axisBottom(scale) {\n    return axis(bottom, scale);\n  }\n\n  function axisLeft(scale) {\n    return axis(left, scale);\n  }\n\n  function defaultSeparation(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n    while (children = node.children) node = children[0];\n    return node;\n  }\n\n  function leafRight(node) {\n    var children;\n    while (children = node.children) node = children[children.length - 1];\n    return node;\n  }\n\n  function cluster() {\n    var separation = defaultSeparation,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0;\n\n      // First walk, computing the initial x & y values.\n      root.eachAfter(function(node) {\n        var children = node.children;\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2;\n\n      // Second walk, normalizing x & y to the desired size.\n      return root.eachAfter(nodeSize ? function(node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function(x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n    };\n\n    cluster.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return cluster;\n  }\n\n  function node_each(callback) {\n    var node = this, current, next = [node], children, i, n;\n    do {\n      current = next.reverse(), next = [];\n      while (node = current.pop()) {\n        callback(node), children = node.children;\n        if (children) for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    } while (next.length);\n    return this;\n  }\n\n  function node_eachBefore(callback) {\n    var node = this, nodes = [node], children, i;\n    while (node = nodes.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n    return this;\n  }\n\n  function node_eachAfter(callback) {\n    var node = this, nodes = [node], next = [], children, i, n;\n    while (node = nodes.pop()) {\n      next.push(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n    while (node = next.pop()) {\n      callback(node);\n    }\n    return this;\n  }\n\n  function node_sum(value) {\n    return this.eachAfter(function(node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n      while (--i >= 0) sum += children[i].value;\n      node.value = sum;\n    });\n  }\n\n  function node_sort(compare) {\n    return this.eachBefore(function(node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path(end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n    var k = nodes.length;\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n    return nodes;\n  }\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n    return c;\n  }\n\n  function node_ancestors() {\n    var node = this, nodes = [node];\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n    return nodes;\n  }\n\n  function node_descendants() {\n    var nodes = [];\n    this.each(function(node) {\n      nodes.push(node);\n    });\n    return nodes;\n  }\n\n  function node_leaves() {\n    var leaves = [];\n    this.eachBefore(function(node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links() {\n    var root = this, links = [];\n    root.each(function(node) {\n      if (node !== root) { // Don’t include the root’s parent, if any.\n        links.push({source: node.parent, target: node});\n      }\n    });\n    return links;\n  }\n\n  function hierarchy(data, children) {\n    var root = new Node(data),\n        valued = +data.value && (root.value = data.value),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    if (children == null) children = defaultChildren;\n\n    while (node = nodes.pop()) {\n      if (valued) node.value = +node.data.value;\n      if ((childs = children(node.data)) && (n = childs.length)) {\n        node.children = new Array(n);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new Node(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function defaultChildren(d) {\n    return d.children;\n  }\n\n  function copyData(node) {\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n    do node.height = height;\n    while ((node = node.parent) && (node.height < ++height));\n  }\n\n  function Node(data) {\n    this.data = data;\n    this.depth =\n    this.height = 0;\n    this.parent = null;\n  }\n\n  Node.prototype = hierarchy.prototype = {\n    constructor: Node,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy\n  };\n\n  function Node$2(value) {\n    this._ = value;\n    this.next = null;\n  }\n\n  function shuffle$1(array) {\n    var i,\n        n = (array = array.slice()).length,\n        head = null,\n        node = head;\n\n    while (n) {\n      var next = new Node$2(array[n - 1]);\n      if (node) node = node.next = next;\n      else node = head = next;\n      array[i] = array[--n];\n    }\n\n    return {\n      head: head,\n      tail: node\n    };\n  }\n\n  function enclose(circles) {\n    return encloseN(shuffle$1(circles), []);\n  }\n\n  function encloses(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r - b.r;\n    return dr * dr + 1e-6 > dx * dx + dy * dy;\n  }\n\n  // Returns the smallest circle that contains circles L and intersects circles B.\n  function encloseN(L, B) {\n    var circle,\n        l0 = null,\n        l1 = L.head,\n        l2,\n        p1;\n\n    switch (B.length) {\n      case 1: circle = enclose1(B[0]); break;\n      case 2: circle = enclose2(B[0], B[1]); break;\n      case 3: circle = enclose3(B[0], B[1], B[2]); break;\n    }\n\n    while (l1) {\n      p1 = l1._, l2 = l1.next;\n      if (!circle || !encloses(circle, p1)) {\n\n        // Temporarily truncate L before l1.\n        if (l0) L.tail = l0, l0.next = null;\n        else L.head = L.tail = null;\n\n        B.push(p1);\n        circle = encloseN(L, B); // Note: reorders L!\n        B.pop();\n\n        // Move l1 to the front of L and reconnect the truncated list L.\n        if (L.head) l1.next = L.head, L.head = l1;\n        else l1.next = null, L.head = L.tail = l1;\n        l0 = L.tail, l0.next = l2;\n\n      } else {\n        l0 = l1;\n      }\n      l1 = l2;\n    }\n\n    L.tail = l0;\n    return circle;\n  }\n\n  function enclose1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function enclose2(a, b) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function enclose3(a, b, c) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x3 = c.x, y3 = c.y, r3 = c.r,\n        a2 = 2 * (x1 - x2),\n        b2 = 2 * (y1 - y2),\n        c2 = 2 * (r2 - r1),\n        d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,\n        a3 = 2 * (x1 - x3),\n        b3 = 2 * (y1 - y3),\n        c3 = 2 * (r3 - r1),\n        d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / ab - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / ab - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (xa * xb + ya * yb + r1),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);\n    return {\n      x: xa + xb * r + x1,\n      y: ya + yb * r + y1,\n      r: r\n    };\n  }\n\n  function place(a, b, c) {\n    var ax = a.x,\n        ay = a.y,\n        da = b.r + c.r,\n        db = a.r + c.r,\n        dx = b.x - ax,\n        dy = b.y - ay,\n        dc = dx * dx + dy * dy;\n    if (dc) {\n      var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = ax + x * dx + y * dy;\n      c.y = ay + x * dy - y * dx;\n    } else {\n      c.x = ax + db;\n      c.y = ay;\n    }\n  }\n\n  function intersects(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r + b.r;\n    return dr * dr > dx * dx + dy * dy;\n  }\n\n  function distance2(circle, x, y) {\n    var dx = circle.x - x,\n        dy = circle.y - y;\n    return dx * dx + dy * dy;\n  }\n\n  function Node$1(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = circles.length)) return 0;\n\n    var a, b, c, n;\n\n    // Place the first circle.\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r;\n\n    // Place the second circle.\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r;\n\n    // Place the third circle.\n    place(b, a, c = circles[2]);\n\n    // Initialize the weighted centroid.\n    var aa = a.r * a.r,\n        ba = b.r * b.r,\n        ca = c.r * c.r,\n        oa = aa + ba + ca,\n        ox = aa * a.x + ba * b.x + ca * c.x,\n        oy = aa * a.y + ba * b.y + ca * c.y,\n        cx, cy, i, j, k, sj, sk;\n\n    // Initialize the front-chain using the first three circles a, b and c.\n    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a;\n\n    // Attempt to place each remaining circle…\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n      // If there are only three elements in the front-chain…\n      if ((k = a.previous) === (j = b.next)) {\n        // If the new circle intersects the third circle,\n        // rotate the front chain to try the next position.\n        if (intersects(j._, c._)) {\n          a = b, b = j, --i;\n          continue pack;\n        }\n      }\n\n      // Find the closest intersecting circle on the front-chain, if any.\n      else {\n        sj = j._.r, sk = k._.r;\n        do {\n          if (sj <= sk) {\n            if (intersects(j._, c._)) {\n              b = j, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            j = j.next, sj += j._.r;\n          } else {\n            if (intersects(k._, c._)) {\n              a = k, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            k = k.previous, sk += k._.r;\n          }\n        } while (j !== k.next);\n      }\n\n      // Success! Insert the new circle c between a and b.\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n      // Update the weighted centroid.\n      oa += ca = c._.r * c._.r;\n      ox += ca * c._.x;\n      oy += ca * c._.y;\n\n      // Compute the new closest circle a to centroid.\n      aa = distance2(a._, cx = ox / oa, cy = oy / oa);\n      while ((c = c.next) !== b) {\n        if ((ca = distance2(c._, cx, cy)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n      b = a.next;\n    }\n\n    // Compute the enclosing circle of the front chain.\n    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n    // Translate the circles to put the enclosing circle around the origin.\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n    return c.r;\n  }\n\n  function siblings(circles) {\n    packEnclose(circles);\n    return circles;\n  }\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error;\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n\n  function constant$5(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function index() {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius))\n            .eachAfter(packChildren(padding, 0.5))\n            .eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius))\n            .eachAfter(packChildren(constantZero, 1))\n            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n      return root;\n    }\n\n    pack.radius = function(x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function(x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant$5(+x), pack) : padding;\n    };\n\n    return pack;\n  }\n\n  function radiusLeaf(radius) {\n    return function(node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function(node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function(node) {\n      var parent = node.parent;\n      node.r *= k;\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition() {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 =\n      root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function(node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function(x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function(x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  }\n\nvar   keyPrefix$1 = \"$\";\n  var preroot = {depth: -1};\n  var ambiguous = {};\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  function stratify() {\n    var id = defaultId,\n        parentId = defaultParentId;\n\n    function stratify(data) {\n      var d,\n          i,\n          n = data.length,\n          root,\n          parent,\n          node,\n          nodes = new Array(n),\n          nodeId,\n          nodeKey,\n          nodeByKey = {};\n\n      for (i = 0; i < n; ++i) {\n        d = data[i], node = nodes[i] = new Node(d);\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = keyPrefix$1 + (node.id = nodeId);\n          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], nodeId = parentId(data[i], i, data);\n        if (nodeId == null || !(nodeId += \"\")) {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        } else {\n          parent = nodeByKey[keyPrefix$1 + nodeId];\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);\n          else parent.children = [node];\n          node.parent = parent;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\");\n      root.parent = preroot;\n      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n\n      return root;\n    }\n\n    stratify.id = function(x) {\n      return arguments.length ? (id = required(x), stratify) : id;\n    };\n\n    stratify.parentId = function(x) {\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\n    };\n\n    return stratify;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  }\n\n  // This function works analogously to nextLeft.\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  }\n\n  // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n\n  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n    this.a = this; // ancestor\n    this.z = 0; // prelim\n    this.m = 0; // mod\n    this.c = 0; // change\n    this.s = 0; // shift\n    this.t = null; // thread\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  }\n\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n  function tree() {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root);\n\n      // Compute the layout using Buchheim et al.’s algorithm.\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk);\n\n      // If a fixed node size is specified, scale x and y.\n      if (nodeSize) root.eachBefore(sizeNode);\n\n      // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n        var left = root,\n            right = root,\n            bottom = root;\n        root.eachBefore(function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var s = left === right ? 1 : separation(left, right) / 2,\n            tx = s - left.x,\n            kx = dx / (right.x + s + tx),\n            ky = dy / (bottom.depth || 1);\n        root.eachBefore(function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n\n      return root;\n    }\n\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n\n    // Computes all real x-coordinates by summing up the modifiers recursively.\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n\n    // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function(x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n    };\n\n    tree.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return tree;\n  }\n\n  function treemapSlice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1,\n        n = nodes.length,\n        dx, dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0;\n      minValue = maxValue = sumValue = nodes[i0].value;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (i1 = i0 + 1; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n        minRatio = newRatio;\n      }\n\n      // Position and record the row orientation.\n      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n\n  var squarify = (function custom(ratio) {\n\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  })(phi);\n\n  function index$1() {\n    var tile = squarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 =\n      root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function(x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function(x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function(x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function(x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function(x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function(x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function(x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function(x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function(x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  }\n\n  function binary(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i, n = nodes.length,\n        sum, sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = (value / 2) + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;\n        else hi = mid;\n      }\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if ((y1 - y0) > (x1 - x0)) {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      } else {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      }\n    }\n  }\n\n  function sliceDice(parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var resquarify = (function custom(ratio) {\n\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  })(phi);\n\n  function center$1(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  }\n\n  function constant$6(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  }\n\n  function x$1(d) {\n    return d.x + d.vx;\n  }\n\n  function y$1(d) {\n    return d.y + d.vy;\n  }\n\n  function collide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant$6(radius == null ? 1 : +radius);\n\n    function force() {\n      var i, n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[i], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data, rj = quad.r, r = ri + rj;\n        if (data) {\n          if (data.index > i) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    force.initialize = function(_) {\n      var i, n = (nodes = _).length; radii = new Array(n);\n      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$6(+_), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index$2(d, i) {\n    return i;\n  }\n\n  function link(links) {\n    var id = index$2,\n        strength = defaultStrength,\n        strengths,\n        distance = constant$6(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = map$1(nodes, id),\n          link;\n\n      for (i = 0, count = new Array(n); i < n; ++i) {\n        count[i] = 0;\n      }\n\n      for (i = 0; i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n        ++count[link.source.index], ++count[link.target.index];\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function(_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function(_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function(_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$6(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  function x$2(d) {\n    return d.x;\n  }\n\n  function y$2(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10;\n  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n  function simulation(nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        velocityDecay = 0.6,\n        forces = map$1(),\n        stepper = timer(step),\n        event = dispatch(\"tick\", \"end\");\n\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick() {\n      var i, n = nodes.length, node;\n\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function(_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n      },\n\n      alpha: function(_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n\n      alphaMin: function(_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n\n      alphaDecay: function(_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n\n      alphaTarget: function(_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n\n      velocityDecay: function(_) {\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n      },\n\n      force: function(name, _) {\n        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n      },\n\n      find: function(x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;\n        else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function manyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant$6(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0, q, c, x, y, i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = q.value)) {\n            strength += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / strength;\n        quad.y = y / strength;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n        q = quad;\n        q.x = q.data.x;\n        q.y = q.data.y;\n        do strength += strengths[q.data.index];\n        while (q = q.next);\n      }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function(_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function(_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function(_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function x$3(x) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant$6(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function y$3(y) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant$6(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  function nopropagation() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  function dragDisable(view) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", noevent, true);\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", noevent, true);\n    } else {\n      root.__noselect = root.style.MozUserSelect;\n      root.style.MozUserSelect = \"none\";\n    }\n  }\n\n  function dragEnable(view, noclick) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", null);\n    if (noclick) {\n      selection.on(\"click.drag\", noevent, true);\n      setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n    }\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", null);\n    } else {\n      root.style.MozUserSelect = root.__noselect;\n      delete root.__noselect;\n    }\n  }\n\n  function constant$7(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n    this.target = target;\n    this.type = type;\n    this.subject = subject;\n    this.identifier = id;\n    this.active = active;\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this._ = dispatch;\n  }\n\n  DragEvent.prototype.on = function() {\n    var value = this._.on.apply(this._, arguments);\n    return value === this._ ? this : value;\n  };\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !exports.event.button;\n  }\n\n  function defaultContainer() {\n    return this.parentNode;\n  }\n\n  function defaultSubject(d) {\n    return d == null ? {x: exports.event.x, y: exports.event.y} : d;\n  }\n\n  function drag() {\n    var filter = defaultFilter,\n        container = defaultContainer,\n        subject = defaultSubject,\n        gestures = {},\n        listeners = dispatch(\"start\", \"drag\", \"end\"),\n        active = 0,\n        mousemoving,\n        touchending;\n\n    function drag(selection) {\n      selection\n          .on(\"mousedown.drag\", mousedowned)\n          .on(\"touchstart.drag\", touchstarted)\n          .on(\"touchmove.drag\", touchmoved)\n          .on(\"touchend.drag touchcancel.drag\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\n      if (!gesture) return;\n      select(exports.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n      dragDisable(exports.event.view);\n      nopropagation();\n      mousemoving = false;\n      gesture(\"start\");\n    }\n\n    function mousemoved() {\n      noevent();\n      mousemoving = true;\n      gestures.mouse(\"drag\");\n    }\n\n    function mouseupped() {\n      select(exports.event.view).on(\"mousemove.drag mouseup.drag\", null);\n      dragEnable(exports.event.view, mousemoving);\n      noevent();\n      gestures.mouse(\"end\");\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var touches = exports.event.changedTouches,\n          c = container.apply(this, arguments),\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\n          nopropagation();\n          gesture(\"start\");\n        }\n      }\n    }\n\n    function touchmoved() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          noevent();\n          gesture(\"drag\");\n        }\n      }\n    }\n\n    function touchended() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          nopropagation();\n          gesture(\"end\");\n        }\n      }\n    }\n\n    function beforestart(id, container, point, that, args) {\n      var p = point(container, id), s, dx, dy,\n          sublisteners = listeners.copy();\n\n      if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\n        if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;\n        dx = s.x - p[0] || 0;\n        dy = s.y - p[1] || 0;\n        return true;\n      })) return;\n\n      return function gesture(type) {\n        var p0 = p, n;\n        switch (type) {\n          case \"start\": gestures[id] = gesture, n = active++; break;\n          case \"end\": delete gestures[id], --active; // nobreak\n          case \"drag\": p = point(container, id), n = active; break;\n        }\n        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n      };\n    }\n\n    drag.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$7(!!_), drag) : filter;\n    };\n\n    drag.container = function(_) {\n      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$7(_), drag) : container;\n    };\n\n    drag.subject = function(_) {\n      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$7(_), drag) : subject;\n    };\n\n    drag.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? drag : value;\n    };\n\n    return drag;\n  }\n\n  function constant$8(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function x$4(d) {\n    return d[0];\n  }\n\n  function y$4(d) {\n    return d[1];\n  }\n\n  function RedBlackTree() {\n    this._ = null; // root node\n  }\n\n  function RedBlackNode(node) {\n    node.U = // parent node\n    node.C = // color - true for red, false for black\n    node.L = // left node\n    node.R = // right node\n    node.P = // previous node\n    node.N = null; // next node\n  }\n\n  RedBlackTree.prototype = {\n    constructor: RedBlackTree,\n\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = RedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              RedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              RedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n\n      var parent = node.U,\n          sibling,\n          left = node.L,\n          right = node.R,\n          next,\n          red;\n\n      if (!left) next = right;\n      else if (!right) next = left;\n      else next = RedBlackFirst(right);\n\n      if (parent) {\n        if (parent.L === node) parent.L = next;\n        else parent.R = next;\n      } else {\n        this._ = next;\n      }\n\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) { node.C = false; return; }\n\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if ((sibling.L && sibling.L.C)\n              || (sibling.R && sibling.R.C)) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              RedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            RedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              RedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            RedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n\n      if (node) node.C = false;\n    }\n  };\n\n  function RedBlackRotateLeft(tree, node) {\n    var p = node,\n        q = node.R,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n\n  function RedBlackRotateRight(tree, node) {\n    var p = node,\n        q = node.L,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n\n  function RedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n\n  function createEdge(left, right, v0, v1) {\n    var edge = [null, null],\n        index = edges.push(edge) - 1;\n    edge.left = left;\n    edge.right = right;\n    if (v0) setEdgeEnd(edge, left, right, v0);\n    if (v1) setEdgeEnd(edge, right, left, v1);\n    cells[left.index].halfedges.push(index);\n    cells[right.index].halfedges.push(index);\n    return edge;\n  }\n\n  function createBorderEdge(left, v0, v1) {\n    var edge = [v0, v1];\n    edge.left = left;\n    return edge;\n  }\n\n  function setEdgeEnd(edge, left, right, vertex) {\n    if (!edge[0] && !edge[1]) {\n      edge[0] = vertex;\n      edge.left = left;\n      edge.right = right;\n    } else if (edge.left === right) {\n      edge[1] = vertex;\n    } else {\n      edge[0] = vertex;\n    }\n  }\n\n  // Liang–Barsky line clipping.\n  function clipEdge(edge, x0, y0, x1, y1) {\n    var a = edge[0],\n        b = edge[1],\n        ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n    return true;\n  }\n\n  function connectEdge(edge, x0, y0, x1, y1) {\n    var v1 = edge[1];\n    if (v1) return true;\n\n    var v0 = edge[0],\n        left = edge.left,\n        right = edge.right,\n        lx = left[0],\n        ly = left[1],\n        rx = right[0],\n        ry = right[1],\n        fx = (lx + rx) / 2,\n        fy = (ly + ry) / 2,\n        fm,\n        fb;\n\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!v0) v0 = [fx, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [fx, y1];\n      } else {\n        if (!v0) v0 = [fx, y1];\n        else if (v0[1] < y0) return;\n        v1 = [fx, y0];\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!v0) v0 = [(y0 - fb) / fm, y0];\n          else if (v0[1] >= y1) return;\n          v1 = [(y1 - fb) / fm, y1];\n        } else {\n          if (!v0) v0 = [(y1 - fb) / fm, y1];\n          else if (v0[1] < y0) return;\n          v1 = [(y0 - fb) / fm, y0];\n        }\n      } else {\n        if (ly < ry) {\n          if (!v0) v0 = [x0, fm * x0 + fb];\n          else if (v0[0] >= x1) return;\n          v1 = [x1, fm * x1 + fb];\n        } else {\n          if (!v0) v0 = [x1, fm * x1 + fb];\n          else if (v0[0] < x0) return;\n          v1 = [x0, fm * x0 + fb];\n        }\n      }\n    }\n\n    edge[0] = v0;\n    edge[1] = v1;\n    return true;\n  }\n\n  function clipEdges(x0, y0, x1, y1) {\n    var i = edges.length,\n        edge;\n\n    while (i--) {\n      if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n          || !clipEdge(edge, x0, y0, x1, y1)\n          || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3\n              || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {\n        delete edges[i];\n      }\n    }\n  }\n\n  function createCell(site) {\n    return cells[site.index] = {\n      site: site,\n      halfedges: []\n    };\n  }\n\n  function cellHalfedgeAngle(cell, edge) {\n    var site = cell.site,\n        va = edge.left,\n        vb = edge.right;\n    if (site === vb) vb = va, va = site;\n    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n    if (site === va) va = edge[1], vb = edge[0];\n    else va = edge[0], vb = edge[1];\n    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n  }\n\n  function cellHalfedgeStart(cell, edge) {\n    return edge[+(edge.left !== cell.site)];\n  }\n\n  function cellHalfedgeEnd(cell, edge) {\n    return edge[+(edge.left === cell.site)];\n  }\n\n  function sortCellHalfedges() {\n    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n        var index = new Array(m),\n            array = new Array(m);\n        for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n        index.sort(function(i, j) { return array[j] - array[i]; });\n        for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n        for (j = 0; j < m; ++j) halfedges[j] = array[j];\n      }\n    }\n  }\n\n  function clipCells(x0, y0, x1, y1) {\n    var nCells = cells.length,\n        iCell,\n        cell,\n        site,\n        iHalfedge,\n        halfedges,\n        nHalfedges,\n        start,\n        startX,\n        startY,\n        end,\n        endX,\n        endY,\n        cover = true;\n\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        halfedges = cell.halfedges;\n        iHalfedge = halfedges.length;\n\n        // Remove any dangling clipped edges.\n        while (iHalfedge--) {\n          if (!edges[halfedges[iHalfedge]]) {\n            halfedges.splice(iHalfedge, 1);\n          }\n        }\n\n        // Insert any border edges as necessary.\n        iHalfedge = 0, nHalfedges = halfedges.length;\n        while (iHalfedge < nHalfedges) {\n          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n          if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {\n            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n                Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]\n                : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]\n                : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]\n                : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]\n                : null)) - 1);\n            ++nHalfedges;\n          }\n        }\n\n        if (nHalfedges) cover = false;\n      }\n    }\n\n    // If there weren’t any edges, have the closest site cover the extent.\n    // It doesn’t matter which corner of the extent we measure!\n    if (cover) {\n      var dx, dy, d2, dc = Infinity;\n\n      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n        if (cell = cells[iCell]) {\n          site = cell.site;\n          dx = site[0] - x0;\n          dy = site[1] - y0;\n          d2 = dx * dx + dy * dy;\n          if (d2 < dc) dc = d2, cover = cell;\n        }\n      }\n\n      if (cover) {\n        var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n        cover.halfedges.push(\n          edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n          edges.push(createBorderEdge(site, v01, v11)) - 1,\n          edges.push(createBorderEdge(site, v11, v10)) - 1,\n          edges.push(createBorderEdge(site, v10, v00)) - 1\n        );\n      }\n    }\n\n    // Lastly delete any cells with no edges; these were entirely clipped.\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        if (!cell.halfedges.length) {\n          delete cells[iCell];\n        }\n      }\n    }\n  }\n\n  var circlePool = [];\n\n  var firstCircle;\n\n  function Circle() {\n    RedBlackNode(this);\n    this.x =\n    this.y =\n    this.arc =\n    this.site =\n    this.cy = null;\n  }\n\n  function attachCircle(arc) {\n    var lArc = arc.P,\n        rArc = arc.N;\n\n    if (!lArc || !rArc) return;\n\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n\n    if (lSite === rSite) return;\n\n    var bx = cSite[0],\n        by = cSite[1],\n        ax = lSite[0] - bx,\n        ay = lSite[1] - by,\n        cx = rSite[0] - bx,\n        cy = rSite[1] - by;\n\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -epsilon2$1) return;\n\n    var ha = ax * ax + ay * ay,\n        hc = cx * cx + cy * cy,\n        x = (cy * ha - ay * hc) / d,\n        y = (ax * hc - cx * ha) / d;\n\n    var circle = circlePool.pop() || new Circle;\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n    arc.circle = circle;\n\n    var before = null,\n        node = circles._;\n\n    while (node) {\n      if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n        if (node.L) node = node.L;\n        else { before = node.P; break; }\n      } else {\n        if (node.R) node = node.R;\n        else { before = node; break; }\n      }\n    }\n\n    circles.insert(before, circle);\n    if (!before) firstCircle = circle;\n  }\n\n  function detachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) firstCircle = circle.N;\n      circles.remove(circle);\n      circlePool.push(circle);\n      RedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n\n  var beachPool = [];\n\n  function Beach() {\n    RedBlackNode(this);\n    this.edge =\n    this.site =\n    this.circle = null;\n  }\n\n  function createBeach(site) {\n    var beach = beachPool.pop() || new Beach;\n    beach.site = site;\n    return beach;\n  }\n\n  function detachBeach(beach) {\n    detachCircle(beach);\n    beaches.remove(beach);\n    beachPool.push(beach);\n    RedBlackNode(beach);\n  }\n\n  function removeBeach(beach) {\n    var circle = beach.circle,\n        x = circle.x,\n        y = circle.cy,\n        vertex = [x, y],\n        previous = beach.P,\n        next = beach.N,\n        disappearing = [beach];\n\n    detachBeach(beach);\n\n    var lArc = previous;\n    while (lArc.circle\n        && Math.abs(x - lArc.circle.x) < epsilon$3\n        && Math.abs(y - lArc.circle.cy) < epsilon$3) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      detachBeach(lArc);\n      lArc = previous;\n    }\n\n    disappearing.unshift(lArc);\n    detachCircle(lArc);\n\n    var rArc = next;\n    while (rArc.circle\n        && Math.abs(x - rArc.circle.x) < epsilon$3\n        && Math.abs(y - rArc.circle.cy) < epsilon$3) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      detachBeach(rArc);\n      rArc = next;\n    }\n\n    disappearing.push(rArc);\n    detachCircle(rArc);\n\n    var nArcs = disappearing.length,\n        iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function addBeach(site) {\n    var x = site[0],\n        directrix = site[1],\n        lArc,\n        rArc,\n        dxl,\n        dxr,\n        node = beaches._;\n\n    while (node) {\n      dxl = leftBreakPoint(node, directrix) - x;\n      if (dxl > epsilon$3) node = node.L; else {\n        dxr = x - rightBreakPoint(node, directrix);\n        if (dxr > epsilon$3) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -epsilon$3) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -epsilon$3) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n\n    createCell(site);\n    var newArc = createBeach(site);\n    beaches.insert(lArc, newArc);\n\n    if (!lArc && !rArc) return;\n\n    if (lArc === rArc) {\n      detachCircle(lArc);\n      rArc = createBeach(lArc.site);\n      beaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n      attachCircle(lArc);\n      attachCircle(rArc);\n      return;\n    }\n\n    if (!rArc) { // && lArc\n      newArc.edge = createEdge(lArc.site, newArc.site);\n      return;\n    }\n\n    // else lArc !== rArc\n    detachCircle(lArc);\n    detachCircle(rArc);\n\n    var lSite = lArc.site,\n        ax = lSite[0],\n        ay = lSite[1],\n        bx = site[0] - ax,\n        by = site[1] - ay,\n        rSite = rArc.site,\n        cx = rSite[0] - ax,\n        cy = rSite[1] - ay,\n        d = 2 * (bx * cy - by * cx),\n        hb = bx * bx + by * by,\n        hc = cx * cx + cy * cy,\n        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n    setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = createEdge(lSite, site, null, vertex);\n    rArc.edge = createEdge(site, rSite, null, vertex);\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function leftBreakPoint(arc, directrix) {\n    var site = arc.site,\n        rfocx = site[0],\n        rfocy = site[1],\n        pby2 = rfocy - directrix;\n\n    if (!pby2) return rfocx;\n\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n\n    site = lArc.site;\n    var lfocx = site[0],\n        lfocy = site[1],\n        plby2 = lfocy - directrix;\n\n    if (!plby2) return lfocx;\n\n    var hl = lfocx - rfocx,\n        aby2 = 1 / pby2 - 1 / plby2,\n        b = hl / plby2;\n\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n    return (rfocx + lfocx) / 2;\n  }\n\n  function rightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return leftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site[1] === directrix ? site[0] : Infinity;\n  }\n\n  var epsilon$3 = 1e-6;\n  var epsilon2$1 = 1e-12;\n  var beaches;\n  var cells;\n  var circles;\n  var edges;\n\n  function triangleArea(a, b, c) {\n    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n  }\n\n  function lexicographic(a, b) {\n    return b[1] - a[1]\n        || b[0] - a[0];\n  }\n\n  function Diagram(sites, extent) {\n    var site = sites.sort(lexicographic).pop(),\n        x,\n        y,\n        circle;\n\n    edges = [];\n    cells = new Array(sites.length);\n    beaches = new RedBlackTree;\n    circles = new RedBlackTree;\n\n    while (true) {\n      circle = firstCircle;\n      if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n        if (site[0] !== x || site[1] !== y) {\n          addBeach(site);\n          x = site[0], y = site[1];\n        }\n        site = sites.pop();\n      } else if (circle) {\n        removeBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n\n    sortCellHalfedges();\n\n    if (extent) {\n      var x0 = +extent[0][0],\n          y0 = +extent[0][1],\n          x1 = +extent[1][0],\n          y1 = +extent[1][1];\n      clipEdges(x0, y0, x1, y1);\n      clipCells(x0, y0, x1, y1);\n    }\n\n    this.edges = edges;\n    this.cells = cells;\n\n    beaches =\n    circles =\n    edges =\n    cells = null;\n  }\n\n  Diagram.prototype = {\n    constructor: Diagram,\n\n    polygons: function() {\n      var edges = this.edges;\n\n      return this.cells.map(function(cell) {\n        var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n        polygon.data = cell.site.data;\n        return polygon;\n      });\n    },\n\n    triangles: function() {\n      var triangles = [],\n          edges = this.edges;\n\n      this.cells.forEach(function(cell, i) {\n        var site = cell.site,\n            halfedges = cell.halfedges,\n            j = -1,\n            m = halfedges.length,\n            s0,\n            e1 = edges[halfedges[m - 1]],\n            s1 = e1.left === site ? e1.right : e1.left;\n\n        while (++j < m) {\n          s0 = s1;\n          e1 = edges[halfedges[j]];\n          s1 = e1.left === site ? e1.right : e1.left;\n          if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n            triangles.push([site.data, s0.data, s1.data]);\n          }\n        }\n      });\n\n      return triangles;\n    },\n\n    links: function() {\n      return this.edges.filter(function(edge) {\n        return edge.right;\n      }).map(function(edge) {\n        return {\n          source: edge.left.data,\n          target: edge.right.data\n        };\n      });\n    }\n  }\n\n  function voronoi() {\n    var x = x$4,\n        y = y$4,\n        extent = null;\n\n    function voronoi(data) {\n      return new Diagram(data.map(function(d, i) {\n        var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];\n        s.index = i;\n        s.data = d;\n        return s;\n      }), extent);\n    }\n\n    voronoi.polygons = function(data) {\n      return voronoi(data).polygons();\n    };\n\n    voronoi.links = function(data) {\n      return voronoi(data).links();\n    };\n\n    voronoi.triangles = function(data) {\n      return voronoi(data).triangles();\n    };\n\n    voronoi.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : x;\n    };\n\n    voronoi.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : y;\n    };\n\n    voronoi.extent = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n    };\n\n    voronoi.size = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n    };\n\n    return voronoi;\n  }\n\n  function constant$9(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function ZoomEvent(target, type, transform) {\n    this.target = target;\n    this.type = type;\n    this.transform = transform;\n  }\n\n  function Transform(k, x, y) {\n    this.k = k;\n    this.x = x;\n    this.y = y;\n  }\n\n  Transform.prototype = {\n    constructor: Transform,\n    scale: function(k) {\n      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n    },\n    translate: function(x, y) {\n      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n    },\n    apply: function(point) {\n      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n    },\n    applyX: function(x) {\n      return x * this.k + this.x;\n    },\n    applyY: function(y) {\n      return y * this.k + this.y;\n    },\n    invert: function(location) {\n      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n    },\n    invertX: function(x) {\n      return (x - this.x) / this.k;\n    },\n    invertY: function(y) {\n      return (y - this.y) / this.k;\n    },\n    rescaleX: function(x) {\n      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n    },\n    rescaleY: function(y) {\n      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n    },\n    toString: function() {\n      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n    }\n  };\n\n  var identity$6 = new Transform(1, 0, 0);\n\n  transform.prototype = Transform.prototype;\n\n  function transform(node) {\n    return node.__zoom || identity$6;\n  }\n\n  function nopropagation$1() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$1() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$1() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent() {\n    var e = this, w, h;\n    if (e instanceof SVGElement) {\n      e = e.ownerSVGElement || e;\n      w = e.width.baseVal.value;\n      h = e.height.baseVal.value;\n    } else {\n      w = e.clientWidth;\n      h = e.clientHeight;\n    }\n    return [[0, 0], [w, h]];\n  }\n\n  function defaultTransform() {\n    return this.__zoom || identity$6;\n  }\n\n  function zoom() {\n    var filter = defaultFilter$1,\n        extent = defaultExtent,\n        k0 = 0,\n        k1 = Infinity,\n        x0 = -k1,\n        x1 = k1,\n        y0 = x0,\n        y1 = x1,\n        duration = 250,\n        gestures = [],\n        listeners = dispatch(\"start\", \"zoom\", \"end\"),\n        touchstarting,\n        touchending,\n        touchDelay = 500,\n        wheelDelay = 150;\n\n    function zoom(selection) {\n      selection\n          .on(\"wheel.zoom\", wheeled)\n          .on(\"mousedown.zoom\", mousedowned)\n          .on(\"dblclick.zoom\", dblclicked)\n          .on(\"touchstart.zoom\", touchstarted)\n          .on(\"touchmove.zoom\", touchmoved)\n          .on(\"touchend.zoom touchcancel.zoom\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .property(\"__zoom\", defaultTransform);\n    }\n\n    zoom.transform = function(collection, transform) {\n      var selection = collection.selection ? collection.selection() : collection;\n      selection.property(\"__zoom\", defaultTransform);\n      if (collection !== selection) {\n        schedule(collection, transform);\n      } else {\n        selection.interrupt().each(function() {\n          gesture(this, arguments)\n              .start()\n              .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n              .end();\n        });\n      }\n    };\n\n    zoom.scaleBy = function(selection, k) {\n      zoom.scaleTo(selection, function() {\n        var k0 = this.__zoom.k,\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return k0 * k1;\n      });\n    };\n\n    zoom.scaleTo = function(selection, k) {\n      zoom.transform(selection, function() {\n        var e = extent.apply(this, arguments),\n            t0 = this.__zoom,\n            p0 = centroid(e),\n            p1 = t0.invert(p0),\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return constrain(translate(scale(t0, k1), p0, p1), e);\n      });\n    };\n\n    zoom.translateBy = function(selection, x, y) {\n      zoom.transform(selection, function() {\n        return constrain(this.__zoom.translate(\n          typeof x === \"function\" ? x.apply(this, arguments) : x,\n          typeof y === \"function\" ? y.apply(this, arguments) : y\n        ), extent.apply(this, arguments));\n      });\n    };\n\n    function scale(transform, k) {\n      k = Math.max(k0, Math.min(k1, k));\n      return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n    }\n\n    function translate(transform, p0, p1) {\n      var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n    }\n\n    function constrain(transform, extent) {\n      var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1),\n          dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);\n      return dx || dy ? transform.translate(dx, dy) : transform;\n    }\n\n    function centroid(extent) {\n      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n    }\n\n    function schedule(transition, transform, center) {\n      transition\n          .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\n          .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\n          .tween(\"zoom\", function() {\n            var that = this,\n                args = arguments,\n                g = gesture(that, args),\n                e = extent.apply(that, args),\n                p = center || centroid(e),\n                w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n                a = that.__zoom,\n                b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n                i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n            return function(t) {\n              if (t === 1) t = b; // Avoid rounding error on end.\n              else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n              g.zoom(null, t);\n            };\n          });\n    }\n\n    function gesture(that, args) {\n      for (var i = 0, n = gestures.length, g; i < n; ++i) {\n        if ((g = gestures[i]).that === that) {\n          return g;\n        }\n      }\n      return new Gesture(that, args);\n    }\n\n    function Gesture(that, args) {\n      this.that = that;\n      this.args = args;\n      this.index = -1;\n      this.active = 0;\n      this.extent = extent.apply(that, args);\n    }\n\n    Gesture.prototype = {\n      start: function() {\n        if (++this.active === 1) {\n          this.index = gestures.push(this) - 1;\n          this.emit(\"start\");\n        }\n        return this;\n      },\n      zoom: function(key, transform) {\n        if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\n        if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n        if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n        this.that.__zoom = transform;\n        this.emit(\"zoom\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) {\n          gestures.splice(this.index, 1);\n          this.index = -1;\n          this.emit(\"end\");\n        }\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function wheeled() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          t = this.__zoom,\n          k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),\n          p = mouse(this);\n\n      // If the mouse is in the same location as before, reuse it.\n      // If there were recent wheel events, reset the wheel idle timeout.\n      if (g.wheel) {\n        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n          g.mouse[1] = t.invert(g.mouse[0] = p);\n        }\n        clearTimeout(g.wheel);\n      }\n\n      // If this wheel event won’t trigger a transform change, ignore it.\n      else if (t.k === k) return;\n\n      // Otherwise, capture the mouse point and location at the start.\n      else {\n        g.mouse = [p, t.invert(p)];\n        interrupt(this);\n        g.start();\n      }\n\n      noevent$1();\n      g.wheel = setTimeout(wheelidled, wheelDelay);\n      g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));\n\n      function wheelidled() {\n        g.wheel = null;\n        g.end();\n      }\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          v = select(exports.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\n          p = mouse(this);\n\n      dragDisable(exports.event.view);\n      nopropagation$1();\n      g.mouse = [p, this.__zoom.invert(p)];\n      interrupt(this);\n      g.start();\n\n      function mousemoved() {\n        noevent$1();\n        g.moved = true;\n        g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));\n      }\n\n      function mouseupped() {\n        v.on(\"mousemove.zoom mouseup.zoom\", null);\n        dragEnable(exports.event.view, g.moved);\n        noevent$1();\n        g.end();\n      }\n    }\n\n    function dblclicked() {\n      if (!filter.apply(this, arguments)) return;\n      var t0 = this.__zoom,\n          p0 = mouse(this),\n          p1 = t0.invert(p0),\n          k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),\n          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));\n\n      noevent$1();\n      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\n      else select(this).call(zoom.transform, t1);\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p;\n\n      nopropagation$1();\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        p = [p, this.__zoom.invert(p), t.identifier];\n        if (!g.touch0) g.touch0 = p;\n        else if (!g.touch1) g.touch1 = p;\n      }\n      if (touchstarting) {\n        touchstarting = clearTimeout(touchstarting);\n        if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);\n      }\n      if (exports.event.touches.length === n) {\n        touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n        interrupt(this);\n        g.start();\n      }\n    }\n\n    function touchmoved() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p, l;\n\n      noevent$1();\n      if (touchstarting) touchstarting = clearTimeout(touchstarting);\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n      }\n      t = g.that.__zoom;\n      if (g.touch1) {\n        var p0 = g.touch0[0], l0 = g.touch0[1],\n            p1 = g.touch1[0], l1 = g.touch1[1],\n            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n        t = scale(t, Math.sqrt(dp / dl));\n        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n      }\n      else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n      else return;\n      g.zoom(\"touch\", constrain(translate(t, p, l), g.extent));\n    }\n\n    function touchended() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t;\n\n      nopropagation$1();\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, touchDelay);\n      for (i = 0; i < n; ++i) {\n        t = touches[i];\n        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n      }\n      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n      if (!g.touch0) g.end();\n    }\n\n    zoom.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$9(!!_), zoom) : filter;\n    };\n\n    zoom.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$9([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n    };\n\n    zoom.scaleExtent = function(_) {\n      return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];\n    };\n\n    zoom.translateExtent = function(_) {\n      return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];\n    };\n\n    zoom.duration = function(_) {\n      return arguments.length ? (duration = +_, zoom) : duration;\n    };\n\n    zoom.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? zoom : value;\n    };\n\n    return zoom;\n  }\n\n  function constant$10(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function BrushEvent(target, type, selection) {\n    this.target = target;\n    this.type = type;\n    this.selection = selection;\n  }\n\n  function nopropagation$2() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$2() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  var MODE_DRAG = {name: \"drag\"};\n  var MODE_SPACE = {name: \"space\"};\n  var MODE_HANDLE = {name: \"handle\"};\n  var MODE_CENTER = {name: \"center\"};\n  var X = {\n    name: \"x\",\n    handles: [\"e\", \"w\"].map(type$1),\n    input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\n    output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n  };\n\n  var Y = {\n    name: \"y\",\n    handles: [\"n\", \"s\"].map(type$1),\n    input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\n    output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n  };\n\n  var XY = {\n    name: \"xy\",\n    handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type$1),\n    input: function(xy) { return xy; },\n    output: function(xy) { return xy; }\n  };\n\n  var cursors = {\n    overlay: \"crosshair\",\n    selection: \"move\",\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n\n  var flipX = {\n    e: \"w\",\n    w: \"e\",\n    nw: \"ne\",\n    ne: \"nw\",\n    se: \"sw\",\n    sw: \"se\"\n  };\n\n  var flipY = {\n    n: \"s\",\n    s: \"n\",\n    nw: \"sw\",\n    ne: \"se\",\n    se: \"ne\",\n    sw: \"nw\"\n  };\n\n  var signsX = {\n    overlay: +1,\n    selection: +1,\n    n: null,\n    e: +1,\n    s: null,\n    w: -1,\n    nw: -1,\n    ne: +1,\n    se: +1,\n    sw: -1\n  };\n\n  var signsY = {\n    overlay: +1,\n    selection: +1,\n    n: -1,\n    e: null,\n    s: +1,\n    w: null,\n    nw: -1,\n    ne: -1,\n    se: +1,\n    sw: +1\n  };\n\n  function type$1(t) {\n    return {type: t};\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$2() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent$1() {\n    var svg = this.ownerSVGElement || this;\n    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n  }\n\n  // Like d3.local, but with the name “__brush” rather than auto-generated.\n  function local$1(node) {\n    while (!node.__brush) if (!(node = node.parentNode)) return;\n    return node.__brush;\n  }\n\n  function empty$1(extent) {\n    return extent[0][0] === extent[1][0]\n        || extent[0][1] === extent[1][1];\n  }\n\n  function brushSelection(node) {\n    var state = node.__brush;\n    return state ? state.dim.output(state.selection) : null;\n  }\n\n  function brushX() {\n    return brush$1(X);\n  }\n\n  function brushY() {\n    return brush$1(Y);\n  }\n\n  function brush() {\n    return brush$1(XY);\n  }\n\n  function brush$1(dim) {\n    var extent = defaultExtent$1,\n        filter = defaultFilter$2,\n        listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\n        handleSize = 6,\n        touchending;\n\n    function brush(group) {\n      var overlay = group\n          .property(\"__brush\", initialize)\n        .selectAll(\".overlay\")\n        .data([type$1(\"overlay\")]);\n\n      overlay.enter().append(\"rect\")\n          .attr(\"class\", \"overlay\")\n          .attr(\"pointer-events\", \"all\")\n          .attr(\"cursor\", cursors.overlay)\n        .merge(overlay)\n          .each(function() {\n            var extent = local$1(this).extent;\n            select(this)\n                .attr(\"x\", extent[0][0])\n                .attr(\"y\", extent[0][1])\n                .attr(\"width\", extent[1][0] - extent[0][0])\n                .attr(\"height\", extent[1][1] - extent[0][1]);\n          });\n\n      group.selectAll(\".selection\")\n        .data([type$1(\"selection\")])\n        .enter().append(\"rect\")\n          .attr(\"class\", \"selection\")\n          .attr(\"cursor\", cursors.selection)\n          .attr(\"fill\", \"#777\")\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"shape-rendering\", \"crispEdges\");\n\n      var handle = group.selectAll(\".handle\")\n        .data(dim.handles, function(d) { return d.type; });\n\n      handle.exit().remove();\n\n      handle.enter().append(\"rect\")\n          .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n          .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n      group\n          .each(redraw)\n          .attr(\"fill\", \"none\")\n          .attr(\"pointer-events\", \"all\")\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .on(\"mousedown.brush touchstart.brush\", started);\n    }\n\n    brush.move = function(group, selection) {\n      if (group.selection) {\n        group\n            .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\n            .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\n            .tween(\"brush\", function() {\n              var that = this,\n                  state = that.__brush,\n                  emit = emitter(that, arguments),\n                  selection0 = state.selection,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                  i = interpolate(selection0, selection1);\n\n              function tween(t) {\n                state.selection = t === 1 && empty$1(selection1) ? null : i(t);\n                redraw.call(that);\n                emit.brush();\n              }\n\n              return selection0 && selection1 ? tween : tween(1);\n            });\n      } else {\n        group\n            .each(function() {\n              var that = this,\n                  args = arguments,\n                  state = that.__brush,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                  emit = emitter(that, args).beforestart();\n\n              interrupt(that);\n              state.selection = selection1 == null || empty$1(selection1) ? null : selection1;\n              redraw.call(that);\n              emit.start().brush().end();\n            });\n      }\n    };\n\n    function redraw() {\n      var group = select(this),\n          selection = local$1(this).selection;\n\n      if (selection) {\n        group.selectAll(\".selection\")\n            .style(\"display\", null)\n            .attr(\"x\", selection[0][0])\n            .attr(\"y\", selection[0][1])\n            .attr(\"width\", selection[1][0] - selection[0][0])\n            .attr(\"height\", selection[1][1] - selection[0][1]);\n\n        group.selectAll(\".handle\")\n            .style(\"display\", null)\n            .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n            .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n            .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n            .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n      }\n\n      else {\n        group.selectAll(\".selection,.handle\")\n            .style(\"display\", \"none\")\n            .attr(\"x\", null)\n            .attr(\"y\", null)\n            .attr(\"width\", null)\n            .attr(\"height\", null);\n      }\n    }\n\n    function emitter(that, args) {\n      return that.__brush.emitter || new Emitter(that, args);\n    }\n\n    function Emitter(that, args) {\n      this.that = that;\n      this.args = args;\n      this.state = that.__brush;\n      this.active = 0;\n    }\n\n    Emitter.prototype = {\n      beforestart: function() {\n        if (++this.active === 1) this.state.emitter = this, this.starting = true;\n        return this;\n      },\n      start: function() {\n        if (this.starting) this.starting = false, this.emit(\"start\");\n        return this;\n      },\n      brush: function() {\n        this.emit(\"brush\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function started() {\n      if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$2(); }\n      else if (touchending) return;\n      if (!filter.apply(this, arguments)) return;\n\n      var that = this,\n          type = exports.event.target.__data__.type,\n          mode = (exports.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),\n          signX = dim === Y ? null : signsX[type],\n          signY = dim === X ? null : signsY[type],\n          state = local$1(that),\n          extent = state.extent,\n          selection = state.selection,\n          W = extent[0][0], w0, w1,\n          N = extent[0][1], n0, n1,\n          E = extent[1][0], e0, e1,\n          S = extent[1][1], s0, s1,\n          dx,\n          dy,\n          moving,\n          shifting = signX && signY && exports.event.shiftKey,\n          lockX,\n          lockY,\n          point0 = mouse(that),\n          point = point0,\n          emit = emitter(that, arguments).beforestart();\n\n      if (type === \"overlay\") {\n        state.selection = selection = [\n          [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\n          [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\n        ];\n      } else {\n        w0 = selection[0][0];\n        n0 = selection[0][1];\n        e0 = selection[1][0];\n        s0 = selection[1][1];\n      }\n\n      w1 = w0;\n      n1 = n0;\n      e1 = e0;\n      s1 = s0;\n\n      var group = select(that)\n          .attr(\"pointer-events\", \"none\");\n\n      var overlay = group.selectAll(\".overlay\")\n          .attr(\"cursor\", cursors[type]);\n\n      if (exports.event.touches) {\n        group\n            .on(\"touchmove.brush\", moved, true)\n            .on(\"touchend.brush touchcancel.brush\", ended, true);\n      } else {\n        var view = select(exports.event.view)\n            .on(\"keydown.brush\", keydowned, true)\n            .on(\"keyup.brush\", keyupped, true)\n            .on(\"mousemove.brush\", moved, true)\n            .on(\"mouseup.brush\", ended, true);\n\n        dragDisable(exports.event.view);\n      }\n\n      nopropagation$2();\n      interrupt(that);\n      redraw.call(that);\n      emit.start();\n\n      function moved() {\n        var point1 = mouse(that);\n        if (shifting && !lockX && !lockY) {\n          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\n          else lockX = true;\n        }\n        point = point1;\n        moving = true;\n        noevent$2();\n        move();\n      }\n\n      function move() {\n        var t;\n\n        dx = point[0] - point0[0];\n        dy = point[1] - point0[1];\n\n        switch (mode) {\n          case MODE_SPACE:\n          case MODE_DRAG: {\n            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n            break;\n          }\n          case MODE_HANDLE: {\n            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n            break;\n          }\n          case MODE_CENTER: {\n            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n            break;\n          }\n        }\n\n        if (e1 < w1) {\n          signX *= -1;\n          t = w0, w0 = e0, e0 = t;\n          t = w1, w1 = e1, e1 = t;\n          if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n        }\n\n        if (s1 < n1) {\n          signY *= -1;\n          t = n0, n0 = s0, s0 = t;\n          t = n1, n1 = s1, s1 = t;\n          if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n        }\n\n        selection = state.selection; // May be set by brush.move!\n\n        if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n        if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n        if (selection[0][0] !== w1\n            || selection[0][1] !== n1\n            || selection[1][0] !== e1\n            || selection[1][1] !== s1) {\n          state.selection = [[w1, n1], [e1, s1]];\n          redraw.call(that);\n          emit.brush();\n        }\n      }\n\n      function ended() {\n        nopropagation$2();\n        if (exports.event.touches) {\n          if (exports.event.touches.length) return;\n          if (touchending) clearTimeout(touchending);\n          touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n          group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n        } else {\n          dragEnable(exports.event.view, moving);\n          view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n        }\n        group.attr(\"pointer-events\", \"all\");\n        overlay.attr(\"cursor\", cursors.overlay);\n        if (empty$1(selection)) state.selection = null, redraw.call(that);\n        emit.end();\n      }\n\n      function keydowned() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            shifting = signX && signY;\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_HANDLE) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE; takes priority over ALT\n            if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n              if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n              mode = MODE_SPACE;\n              overlay.attr(\"cursor\", cursors.selection);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n\n      function keyupped() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            if (shifting) {\n              lockX = lockY = shifting = false;\n              move();\n            }\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE\n            if (mode === MODE_SPACE) {\n              if (exports.event.altKey) {\n                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n                mode = MODE_CENTER;\n              } else {\n                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n                mode = MODE_HANDLE;\n              }\n              overlay.attr(\"cursor\", cursors[type]);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n    }\n\n    function initialize() {\n      var state = this.__brush || {selection: null};\n      state.extent = extent.apply(this, arguments);\n      state.dim = dim;\n      return state;\n    }\n\n    brush.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$10([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n    };\n\n    brush.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$10(!!_), brush) : filter;\n    };\n\n    brush.handleSize = function(_) {\n      return arguments.length ? (handleSize = +_, brush) : handleSize;\n    };\n\n    brush.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? brush : value;\n    };\n\n    return brush;\n  }\n\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var pi$3 = Math.PI;\n  var halfPi$2 = pi$3 / 2;\n  var tau$3 = pi$3 * 2;\n  var max$1 = Math.max;\n\n  function compareValue(compare) {\n    return function(a, b) {\n      return compare(\n        a.source.value + a.target.value,\n        b.source.value + b.target.value\n      );\n    };\n  }\n\n  function chord() {\n    var padAngle = 0,\n        sortGroups = null,\n        sortSubgroups = null,\n        sortChords = null;\n\n    function chord(matrix) {\n      var n = matrix.length,\n          groupSums = [],\n          groupIndex = range(n),\n          subgroupIndex = [],\n          chords = [],\n          groups = chords.groups = new Array(n),\n          subgroups = new Array(n * n),\n          k,\n          x,\n          x0,\n          dx,\n          i,\n          j;\n\n      // Compute the sum.\n      k = 0, i = -1; while (++i < n) {\n        x = 0, j = -1; while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(range(n));\n        k += x;\n      }\n\n      // Sort groups…\n      if (sortGroups) groupIndex.sort(function(a, b) {\n        return sortGroups(groupSums[a], groupSums[b]);\n      });\n\n      // Sort subgroups…\n      if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\n        d.sort(function(a, b) {\n          return sortSubgroups(matrix[i][a], matrix[i][b]);\n        });\n      });\n\n      // Convert the sum to scaling factor for [0, 2pi].\n      // TODO Allow start and end angle to be specified?\n      // TODO Allow padding to be specified as percentage?\n      k = max$1(0, tau$3 - padAngle * n) / k;\n      dx = k ? padAngle : tau$3 / n;\n\n      // Compute the start and end angle for each group and subgroup.\n      // Note: Opera has a bug reordering object literal properties!\n      x = 0, i = -1; while (++i < n) {\n        x0 = x, j = -1; while (++j < n) {\n          var di = groupIndex[i],\n              dj = subgroupIndex[di][j],\n              v = matrix[di][dj],\n              a0 = x,\n              a1 = x += v * k;\n          subgroups[dj * n + di] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += dx;\n      }\n\n      // Generate chords for each (non-empty) subgroup-subgroup link.\n      i = -1; while (++i < n) {\n        j = i - 1; while (++j < n) {\n          var source = subgroups[j * n + i],\n              target = subgroups[i * n + j];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value\n                ? {source: target, target: source}\n                : {source: source, target: target});\n          }\n        }\n      }\n\n      return sortChords ? chords.sort(sortChords) : chords;\n    }\n\n    chord.padAngle = function(_) {\n      return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;\n    };\n\n    chord.sortGroups = function(_) {\n      return arguments.length ? (sortGroups = _, chord) : sortGroups;\n    };\n\n    chord.sortSubgroups = function(_) {\n      return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n    };\n\n    chord.sortChords = function(_) {\n      return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n    };\n\n    return chord;\n  }\n\n  var slice$5 = Array.prototype.slice;\n\n  function constant$11(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultSource(d) {\n    return d.source;\n  }\n\n  function defaultTarget(d) {\n    return d.target;\n  }\n\n  function defaultRadius$1(d) {\n    return d.radius;\n  }\n\n  function defaultStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function defaultEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function ribbon() {\n    var source = defaultSource,\n        target = defaultTarget,\n        radius = defaultRadius$1,\n        startAngle = defaultStartAngle,\n        endAngle = defaultEndAngle,\n        context = null;\n\n    function ribbon() {\n      var buffer,\n          argv = slice$5.call(arguments),\n          s = source.apply(this, argv),\n          t = target.apply(this, argv),\n          sr = +radius.apply(this, (argv[0] = s, argv)),\n          sa0 = startAngle.apply(this, argv) - halfPi$2,\n          sa1 = endAngle.apply(this, argv) - halfPi$2,\n          sx0 = sr * cos(sa0),\n          sy0 = sr * sin(sa0),\n          tr = +radius.apply(this, (argv[0] = t, argv)),\n          ta0 = startAngle.apply(this, argv) - halfPi$2,\n          ta1 = endAngle.apply(this, argv) - halfPi$2;\n\n      if (!context) context = buffer = path();\n\n      context.moveTo(sx0, sy0);\n      context.arc(0, 0, sr, sa0, sa1);\n      if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\n        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n        context.arc(0, 0, tr, ta0, ta1);\n      }\n      context.quadraticCurveTo(0, 0, sx0, sy0);\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    ribbon.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : radius;\n    };\n\n    ribbon.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : startAngle;\n    };\n\n    ribbon.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : endAngle;\n    };\n\n    ribbon.source = function(_) {\n      return arguments.length ? (source = _, ribbon) : source;\n    };\n\n    ribbon.target = function(_) {\n      return arguments.length ? (target = _, ribbon) : target;\n    };\n\n    ribbon.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\n    };\n\n    return ribbon;\n  }\n\n  // Adds floating point numbers with twice the normal precision.\n  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n  // 305–363 (1997).\n  // Code adapted from GeographicLib by Charles F. F. Karney,\n  // http://geographiclib.sourceforge.net/\n\n  function adder() {\n    return new Adder;\n  }\n\n  function Adder() {\n    this.reset();\n  }\n\n  Adder.prototype = {\n    constructor: Adder,\n    reset: function() {\n      this.s = // rounded value\n      this.t = 0; // exact error\n    },\n    add: function(y) {\n      add$1(temp, y, this.t);\n      add$1(this, temp.s, this.s);\n      if (this.s) this.t += temp.t;\n      else this.s = temp.t;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n\n  var temp = new Adder;\n\n  function add$1(adder, a, b) {\n    var x = adder.s = a + b,\n        bv = x - a,\n        av = x - bv;\n    adder.t = (a - av) + (b - bv);\n  }\n\n  var epsilon$4 = 1e-6;\n  var epsilon2$2 = 1e-12;\n  var pi$4 = Math.PI;\n  var halfPi$3 = pi$4 / 2;\n  var quarterPi = pi$4 / 4;\n  var tau$4 = pi$4 * 2;\n\n  var degrees$1 = 180 / pi$4;\n  var radians = pi$4 / 180;\n\n  var abs = Math.abs;\n  var atan = Math.atan;\n  var atan2 = Math.atan2;\n  var cos$1 = Math.cos;\n  var ceil = Math.ceil;\n  var exp = Math.exp;\n  var log$1 = Math.log;\n  var pow$1 = Math.pow;\n  var sin$1 = Math.sin;\n  var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\n  var sqrt$1 = Math.sqrt;\n  var tan = Math.tan;\n\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);\n  }\n\n  function asin$1(x) {\n    return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);\n  }\n\n  function haversin(x) {\n    return (x = sin$1(x / 2)) * x;\n  }\n\n  function noop$2() {}\n\n  function streamGeometry(geometry, stream) {\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n      streamGeometryType[geometry.type](geometry, stream);\n    }\n  }\n\n  var streamObjectType = {\n    Feature: function(feature, stream) {\n      streamGeometry(feature.geometry, stream);\n    },\n    FeatureCollection: function(object, stream) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) streamGeometry(features[i].geometry, stream);\n    }\n  };\n\n  var streamGeometryType = {\n    Sphere: function(object, stream) {\n      stream.sphere();\n    },\n    Point: function(object, stream) {\n      object = object.coordinates;\n      stream.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, stream) {\n      streamLine(object.coordinates, stream, 0);\n    },\n    MultiLineString: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamLine(coordinates[i], stream, 0);\n    },\n    Polygon: function(object, stream) {\n      streamPolygon(object.coordinates, stream);\n    },\n    MultiPolygon: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamPolygon(coordinates[i], stream);\n    },\n    GeometryCollection: function(object, stream) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) streamGeometry(geometries[i], stream);\n    }\n  };\n\n  function streamLine(coordinates, stream, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    stream.lineStart();\n    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n    stream.lineEnd();\n  }\n\n  function streamPolygon(coordinates, stream) {\n    var i = -1, n = coordinates.length;\n    stream.polygonStart();\n    while (++i < n) streamLine(coordinates[i], stream, 1);\n    stream.polygonEnd();\n  }\n\n  function stream(object, stream) {\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\n      streamObjectType[object.type](object, stream);\n    } else {\n      streamGeometry(object, stream);\n    }\n  }\n\n  var areaRingSum;\n\n  var areaSum;\n  var lambda00;\n  var phi00;\n  var lambda0;\n  var cosPhi0;\n  var sinPhi0;\n  var areaStream = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaRingSum.reset();\n      areaStream.lineStart = areaRingStart;\n      areaStream.lineEnd = areaRingEnd;\n    },\n    polygonEnd: function() {\n      var areaRing = +areaRingSum;\n      areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);\n      this.lineStart = this.lineEnd = this.point = noop$2;\n    },\n    sphere: function() {\n      areaSum.add(tau$4);\n    }\n  };\n\n  function areaRingStart() {\n    areaStream.point = areaPointFirst;\n  }\n\n  function areaRingEnd() {\n    areaPoint(lambda00, phi00);\n  }\n\n  function areaPointFirst(lambda, phi) {\n    areaStream.point = areaPoint;\n    lambda00 = lambda, phi00 = phi;\n    lambda *= radians, phi *= radians;\n    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);\n  }\n\n  function areaPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    var dLambda = lambda - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        cosPhi = cos$1(phi),\n        sinPhi = sin$1(phi),\n        k = sinPhi0 * sinPhi,\n        u = cosPhi0 * cosPhi + k * cos$1(adLambda),\n        v = k * sdLambda * sin$1(adLambda);\n    areaRingSum.add(atan2(v, u));\n\n    // Advance the previous points.\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n  }\n\n  function area$2(object) {\n    if (areaSum) areaSum.reset();\n    else areaSum = adder(), areaRingSum = adder();\n    stream(object, areaStream);\n    return areaSum * 2;\n  }\n\n  function spherical(cartesian) {\n    return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];\n  }\n\n  function cartesian(spherical) {\n    var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);\n    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];\n  }\n\n  function cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  function cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  }\n\n  // TODO return a\n  function cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n  }\n\n  function cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  }\n\n  // TODO return d\n  function cartesianNormalizeInPlace(d) {\n    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n  }\n\nvar   lambda0$1;\n  var phi0;\n  var lambda1;\n  var phi1;\n  var lambda2;\nvar   lambda00$1;\nvar   phi00$1;\n  var p0;\n  var deltaSum;\n  var ranges;\nvar   range$1;\n  var boundsStream = {\n    point: boundsPoint,\n    lineStart: boundsLineStart,\n    lineEnd: boundsLineEnd,\n    polygonStart: function() {\n      boundsStream.point = boundsRingPoint;\n      boundsStream.lineStart = boundsRingStart;\n      boundsStream.lineEnd = boundsRingEnd;\n      deltaSum.reset();\n      areaStream.polygonStart();\n    },\n    polygonEnd: function() {\n      areaStream.polygonEnd();\n      boundsStream.point = boundsPoint;\n      boundsStream.lineStart = boundsLineStart;\n      boundsStream.lineEnd = boundsLineEnd;\n      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n      else if (deltaSum > epsilon$4) phi1 = 90;\n      else if (deltaSum < -epsilon$4) phi0 = -90;\n      range$1[0] = lambda0$1, range$1[1] = lambda1;\n    }\n  };\n\n  function boundsPoint(lambda, phi) {\n    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n  }\n\n  function linePoint(lambda, phi) {\n    var p = cartesian([lambda * radians, phi * radians]);\n    if (p0) {\n      var normal = cartesianCross(p0, p),\n          equatorial = [normal[1], -normal[0], 0],\n          inflection = cartesianCross(equatorial, normal);\n      cartesianNormalizeInPlace(inflection);\n      inflection = spherical(inflection);\n      var delta = lambda - lambda2,\n          sign = delta > 0 ? 1 : -1,\n          lambdai = inflection[0] * degrees$1 * sign,\n          phii,\n          antimeridian = abs(delta) > 180;\n      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = inflection[1] * degrees$1;\n        if (phii > phi1) phi1 = phii;\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = -inflection[1] * degrees$1;\n        if (phii < phi0) phi0 = phii;\n      } else {\n        if (phi < phi0) phi0 = phi;\n        if (phi > phi1) phi1 = phi;\n      }\n      if (antimeridian) {\n        if (lambda < lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      } else {\n        if (lambda1 >= lambda0$1) {\n          if (lambda < lambda0$1) lambda0$1 = lambda;\n          if (lambda > lambda1) lambda1 = lambda;\n        } else {\n          if (lambda > lambda2) {\n            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n          } else {\n            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n          }\n        }\n      }\n    } else {\n      boundsPoint(lambda, phi);\n    }\n    p0 = p, lambda2 = lambda;\n  }\n\n  function boundsLineStart() {\n    boundsStream.point = linePoint;\n  }\n\n  function boundsLineEnd() {\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    boundsStream.point = boundsPoint;\n    p0 = null;\n  }\n\n  function boundsRingPoint(lambda, phi) {\n    if (p0) {\n      var delta = lambda - lambda2;\n      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n    } else {\n      lambda00$1 = lambda, phi00$1 = phi;\n    }\n    areaStream.point(lambda, phi);\n    linePoint(lambda, phi);\n  }\n\n  function boundsRingStart() {\n    areaStream.lineStart();\n  }\n\n  function boundsRingEnd() {\n    boundsRingPoint(lambda00$1, phi00$1);\n    areaStream.lineEnd();\n    if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    p0 = null;\n  }\n\n  // Finds the left-right distance between two longitudes.\n  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n  // the distance between ±180° to be 360°.\n  function angle(lambda0, lambda1) {\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n  }\n\n  function rangeCompare(a, b) {\n    return a[0] - b[0];\n  }\n\n  function rangeContains(range, x) {\n    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n  }\n\n  function bounds(feature) {\n    var i, n, a, b, merged, deltaMax, delta;\n\n    if (deltaSum) deltaSum.reset();\n    else deltaSum = adder();\n    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n    ranges = [];\n    stream(feature, boundsStream);\n\n    // First, sort ranges by their minimum longitudes.\n    if (n = ranges.length) {\n      ranges.sort(rangeCompare);\n\n      // Then, merge any ranges that overlap.\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n        b = ranges[i];\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n        } else {\n          merged.push(a = b);\n        }\n      }\n\n      // Finally, find the largest gap between the merged ranges.\n      // The final bounding box will be the inverse of this gap.\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n        b = merged[i];\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n      }\n    }\n\n    ranges = range$1 = null;\n\n    return lambda0$1 === Infinity || phi0 === Infinity\n        ? [[NaN, NaN], [NaN, NaN]]\n        : [[lambda0$1, phi0], [lambda1, phi1]];\n  }\n\n  var W0;\n  var W1;\n  var X0;\n  var Y0;\n  var Z0;\n  var X1;\n  var Y1;\n  var Z1;\n  var X2;\n  var Y2;\n  var Z2;\nvar   lambda00$2;\nvar   phi00$2;\n  var x0;\n  var y0;\n  var z0;\n  // previous point\n\n  var centroidStream = {\n    sphere: noop$2,\n    point: centroidPoint,\n    lineStart: centroidLineStart,\n    lineEnd: centroidLineEnd,\n    polygonStart: function() {\n      centroidStream.lineStart = centroidRingStart;\n      centroidStream.lineEnd = centroidRingEnd;\n    },\n    polygonEnd: function() {\n      centroidStream.lineStart = centroidLineStart;\n      centroidStream.lineEnd = centroidLineEnd;\n    }\n  };\n\n  // Arithmetic mean of Cartesian vectors.\n  function centroidPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));\n  }\n\n  function centroidPointCartesian(x, y, z) {\n    ++W0;\n    X0 += (x - X0) / W0;\n    Y0 += (y - Y0) / W0;\n    Z0 += (z - Z0) / W0;\n  }\n\n  function centroidLineStart() {\n    centroidStream.point = centroidLinePointFirst;\n  }\n\n  function centroidLinePointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidStream.point = centroidLinePoint;\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLinePoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLineEnd() {\n    centroidStream.point = centroidPoint;\n  }\n\n  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n  // J. Applied Mechanics 42, 239 (1975).\n  function centroidRingStart() {\n    centroidStream.point = centroidRingPointFirst;\n  }\n\n  function centroidRingEnd() {\n    centroidRingPoint(lambda00$2, phi00$2);\n    centroidStream.point = centroidPoint;\n  }\n\n  function centroidRingPointFirst(lambda, phi) {\n    lambda00$2 = lambda, phi00$2 = phi;\n    lambda *= radians, phi *= radians;\n    centroidStream.point = centroidRingPoint;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidRingPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        cx = y0 * z - z0 * y,\n        cy = z0 * x - x0 * z,\n        cz = x0 * y - y0 * x,\n        m = sqrt$1(cx * cx + cy * cy + cz * cz),\n        u = x0 * x + y0 * y + z0 * z,\n        v = m && -acos(u) / m, // area weight\n        w = atan2(m, u); // line weight\n    X2 += v * cx;\n    Y2 += v * cy;\n    Z2 += v * cz;\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroid$1(object) {\n    W0 = W1 =\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    stream(object, centroidStream);\n\n    var x = X2,\n        y = Y2,\n        z = Z2,\n        m = x * x + y * y + z * z;\n\n    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n    if (m < epsilon2$2) {\n      x = X1, y = Y1, z = Z1;\n      // If the feature has zero length, fall back to arithmetic mean of point vectors.\n      if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;\n      m = x * x + y * y + z * z;\n      // If the feature still has an undefined ccentroid, then return.\n      if (m < epsilon2$2) return [NaN, NaN];\n    }\n\n    return [atan2(y, x) * degrees$1, asin$1(z / sqrt$1(m)) * degrees$1];\n  }\n\n  function constant$12(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function compose(a, b) {\n\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n\n    return compose;\n  }\n\n  function rotationIdentity(lambda, phi) {\n    return [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];\n  }\n\n  rotationIdentity.invert = rotationIdentity;\n\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n    return (deltaLambda %= tau$4) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n      : rotationLambda(deltaLambda))\n      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n      : rotationIdentity);\n  }\n\n  function forwardRotationLambda(deltaLambda) {\n    return function(lambda, phi) {\n      return lambda += deltaLambda, [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];\n    };\n  }\n\n  function rotationLambda(deltaLambda) {\n    var rotation = forwardRotationLambda(deltaLambda);\n    rotation.invert = forwardRotationLambda(-deltaLambda);\n    return rotation;\n  }\n\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\n    var cosDeltaPhi = cos$1(deltaPhi),\n        sinDeltaPhi = sin$1(deltaPhi),\n        cosDeltaGamma = cos$1(deltaGamma),\n        sinDeltaGamma = sin$1(deltaGamma);\n\n    function rotation(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\n      return [\n        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)\n      ];\n    }\n\n    rotation.invert = function(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\n      return [\n        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)\n      ];\n    };\n\n    return rotation;\n  }\n\n  function rotation(rotate) {\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    }\n\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    };\n\n    return forward;\n  }\n\n  // Generates a circle centered at [0°, 0°], with a given radius and precision.\n  function circleStream(stream, radius, delta, direction, t0, t1) {\n    if (!delta) return;\n    var cosRadius = cos$1(radius),\n        sinRadius = sin$1(radius),\n        step = direction * delta;\n    if (t0 == null) {\n      t0 = radius + direction * tau$4;\n      t1 = radius - step / 2;\n    } else {\n      t0 = circleRadius(cosRadius, t0);\n      t1 = circleRadius(cosRadius, t1);\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;\n    }\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);\n      stream.point(point[0], point[1]);\n    }\n  }\n\n  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n  function circleRadius(cosRadius, point) {\n    point = cartesian(point), point[0] -= cosRadius;\n    cartesianNormalizeInPlace(point);\n    var radius = acos(-point[1]);\n    return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;\n  }\n\n  function circle$1() {\n    var center = constant$12([0, 0]),\n        radius = constant$12(90),\n        precision = constant$12(6),\n        ring,\n        rotate,\n        stream = {point: point};\n\n    function point(x, y) {\n      ring.push(x = rotate(x, y));\n      x[0] *= degrees$1, x[1] *= degrees$1;\n    }\n\n    function circle() {\n      var c = center.apply(this, arguments),\n          r = radius.apply(this, arguments) * radians,\n          p = precision.apply(this, arguments) * radians;\n      ring = [];\n      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n      circleStream(stream, r, p, 1);\n      c = {type: \"Polygon\", coordinates: [ring]};\n      ring = rotate = null;\n      return c;\n    }\n\n    circle.center = function(_) {\n      return arguments.length ? (center = typeof _ === \"function\" ? _ : constant$12([+_[0], +_[1]]), circle) : center;\n    };\n\n    circle.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$12(+_), circle) : radius;\n    };\n\n    circle.precision = function(_) {\n      return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant$12(+_), circle) : precision;\n    };\n\n    return circle;\n  }\n\n  function clipBuffer() {\n    var lines = [],\n        line;\n    return {\n      point: function(x, y) {\n        line.push([x, y]);\n      },\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      lineEnd: noop$2,\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      },\n      result: function() {\n        var result = lines;\n        lines = [];\n        line = null;\n        return result;\n      }\n    };\n  }\n\n  function clipLine(a, b, x0, y0, x1, y1) {\n    var ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n    return true;\n  }\n\n  function pointEqual(a, b) {\n    return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;\n  }\n\n  function Intersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other; // another intersection\n    this.e = entry; // is an entry?\n    this.v = false; // visited\n    this.n = this.p = null; // next & previous\n  }\n\n  // A generalized polygon clipping algorithm: given a polygon that has been cut\n  // into its visible line segments, and rejoins the segments by interpolating\n  // along the clip edge.\n  function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {\n    var subject = [],\n        clip = [],\n        i,\n        n;\n\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n], x;\n\n      // If the first and last points of a segment are coincident, then treat as a\n      // closed ring. TODO if all rings are closed, then the winding order of the\n      // exterior ring should be checked.\n      if (pointEqual(p0, p1)) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n\n      subject.push(x = new Intersection(p0, segment, null, true));\n      clip.push(x.o = new Intersection(p0, null, x, false));\n      subject.push(x = new Intersection(p1, segment, null, false));\n      clip.push(x.o = new Intersection(p1, null, x, true));\n    });\n\n    if (!subject.length) return;\n\n    clip.sort(compareIntersection);\n    link$1(subject);\n    link$1(clip);\n\n    for (i = 0, n = clip.length; i < n; ++i) {\n      clip[i].e = startInside = !startInside;\n    }\n\n    var start = subject[0],\n        points,\n        point;\n\n    while (1) {\n      // Find first unvisited intersection.\n      var current = start,\n          isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      stream.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, stream);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, stream);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      stream.lineEnd();\n    }\n  }\n\n  function link$1(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n\n  var clipMax = 1e9;\n  var clipMin = -clipMax;\n  // TODO Use d3-polygon’s polygonContains here for the ring check?\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\n  function clipExtent(x0, y0, x1, y1) {\n\n    function visible(x, y) {\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n    }\n\n    function interpolate(from, to, direction, stream) {\n      var a = 0, a1 = 0;\n      if (from == null\n          || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n          || comparePoint(from, to) < 0 ^ direction > 0) {\n        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n        while ((a = (a + direction + 4) % 4) !== a1);\n      } else {\n        stream.point(to[0], to[1]);\n      }\n    }\n\n    function corner(p, direction) {\n      return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3\n          : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1\n          : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0\n          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n    }\n\n    function compareIntersection(a, b) {\n      return comparePoint(a.x, b.x);\n    }\n\n    function comparePoint(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb\n          : ca === 0 ? b[1] - a[1]\n          : ca === 1 ? a[0] - b[0]\n          : ca === 2 ? a[1] - b[1]\n          : b[0] - a[0];\n    }\n\n    return function(stream) {\n      var activeStream = stream,\n          bufferStream = clipBuffer(),\n          segments,\n          polygon,\n          ring,\n          x__, y__, v__, // first point\n          x_, y_, v_, // previous point\n          first,\n          clean;\n\n      var clipStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: polygonStart,\n        polygonEnd: polygonEnd\n      };\n\n      function point(x, y) {\n        if (visible(x, y)) activeStream.point(x, y);\n      }\n\n      function polygonInside() {\n        var winding = 0;\n\n        for (var i = 0, n = polygon.length; i < n; ++i) {\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n          }\n        }\n\n        return winding;\n      }\n\n      // Buffer geometry within a polygon and then clip it en masse.\n      function polygonStart() {\n        activeStream = bufferStream, segments = [], polygon = [], clean = true;\n      }\n\n      function polygonEnd() {\n        var startInside = polygonInside(),\n            cleanInside = clean && startInside,\n            visible = (segments = merge(segments)).length;\n        if (cleanInside || visible) {\n          stream.polygonStart();\n          if (cleanInside) {\n            stream.lineStart();\n            interpolate(null, null, 1, stream);\n            stream.lineEnd();\n          }\n          if (visible) {\n            clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n          }\n          stream.polygonEnd();\n        }\n        activeStream = stream, segments = polygon = ring = null;\n      }\n\n      function lineStart() {\n        clipStream.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n\n      // TODO rather than special-case polygons, simply handle them separately.\n      // Ideally, coincident intersection points should be jittered to avoid\n      // clipping issues.\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferStream.rejoin();\n          segments.push(bufferStream.result());\n        }\n        clipStream.point = point;\n        if (v_) activeStream.lineEnd();\n      }\n\n      function linePoint(x, y) {\n        var v = visible(x, y);\n        if (polygon) ring.push([x, y]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n          }\n        } else {\n          if (v && v_) activeStream.point(x, y);\n          else {\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n            if (clipLine(a, b, x0, y0, x1, y1)) {\n              if (!v_) {\n                activeStream.lineStart();\n                activeStream.point(a[0], a[1]);\n              }\n              activeStream.point(b[0], b[1]);\n              if (!v) activeStream.lineEnd();\n              clean = false;\n            } else if (v) {\n              activeStream.lineStart();\n              activeStream.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n\n      return clipStream;\n    };\n  }\n\n  function extent$1() {\n    var x0 = 0,\n        y0 = 0,\n        x1 = 960,\n        y1 = 500,\n        cache,\n        cacheStream,\n        clip;\n\n    return clip = {\n      stream: function(stream) {\n        return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n      },\n      extent: function(_) {\n        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n      }\n    };\n  }\n\n  var lengthSum;\nvar   lambda0$2;\nvar   sinPhi0$1;\nvar   cosPhi0$1;\n  var lengthStream = {\n    sphere: noop$2,\n    point: noop$2,\n    lineStart: lengthLineStart,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2\n  };\n\n  function lengthLineStart() {\n    lengthStream.point = lengthPointFirst;\n    lengthStream.lineEnd = lengthLineEnd;\n  }\n\n  function lengthLineEnd() {\n    lengthStream.point = lengthStream.lineEnd = noop$2;\n  }\n\n  function lengthPointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);\n    lengthStream.point = lengthPoint;\n  }\n\n  function lengthPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var sinPhi = sin$1(phi),\n        cosPhi = cos$1(phi),\n        delta = abs(lambda - lambda0$2),\n        cosDelta = cos$1(delta),\n        sinDelta = sin$1(delta),\n        x = cosPhi * sinDelta,\n        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n    lengthSum.add(atan2(sqrt$1(x * x + y * y), z));\n    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n  }\n\n  function length$2(object) {\n    if (lengthSum) lengthSum.reset();\n    else lengthSum = adder();\n    stream(object, lengthStream);\n    return +lengthSum;\n  }\n\n  var coordinates = [null, null];\nvar   object$1 = {type: \"LineString\", coordinates: coordinates};\n  function distance(a, b) {\n    coordinates[0] = a;\n    coordinates[1] = b;\n    return length$2(object$1);\n  }\n\n  function graticuleX(y0, y1, dy) {\n    var y = range(y0, y1 - epsilon$4, dy).concat(y1);\n    return function(x) { return y.map(function(y) { return [x, y]; }); };\n  }\n\n  function graticuleY(x0, x1, dx) {\n    var x = range(x0, x1 - epsilon$4, dx).concat(x1);\n    return function(y) { return x.map(function(x) { return [x, y]; }); };\n  }\n\n  function graticule() {\n    var x1, x0, X1, X0,\n        y1, y0, Y1, Y0,\n        dx = 10, dy = dx, DX = 90, DY = 360,\n        x, y, X, Y,\n        precision = 2.5;\n\n    function graticule() {\n      return {type: \"MultiLineString\", coordinates: lines()};\n    }\n\n    function lines() {\n      return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n          .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n          .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$4; }).map(x))\n          .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$4; }).map(y));\n    }\n\n    graticule.lines = function() {\n      return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n    };\n\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [\n          X(X0).concat(\n          Y(Y1).slice(1),\n          X(X1).reverse().slice(1),\n          Y(Y0).reverse().slice(1))\n        ]\n      };\n    };\n\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.extentMinor();\n      return graticule.extentMajor(_).extentMinor(_);\n    };\n\n    graticule.extentMajor = function(_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.extentMinor = function(_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.stepMinor();\n      return graticule.stepMajor(_).stepMinor(_);\n    };\n\n    graticule.stepMajor = function(_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n\n    graticule.stepMinor = function(_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = graticuleX(y0, y1, 90);\n      y = graticuleY(x0, x1, precision);\n      X = graticuleX(Y0, Y1, 90);\n      Y = graticuleY(X0, X1, precision);\n      return graticule;\n    };\n\n    return graticule\n        .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])\n        .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);\n  }\n\n  function interpolate$2(a, b) {\n    var x0 = a[0] * radians,\n        y0 = a[1] * radians,\n        x1 = b[0] * radians,\n        y1 = b[1] * radians,\n        cy0 = cos$1(y0),\n        sy0 = sin$1(y0),\n        cy1 = cos$1(y1),\n        sy1 = sin$1(y1),\n        kx0 = cy0 * cos$1(x0),\n        ky0 = cy0 * sin$1(x0),\n        kx1 = cy1 * cos$1(x1),\n        ky1 = cy1 * sin$1(x1),\n        d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n        k = sin$1(d);\n\n    var interpolate = d ? function(t) {\n      var B = sin$1(t *= d) / k,\n          A = sin$1(d - t) / k,\n          x = A * kx0 + B * kx1,\n          y = A * ky0 + B * ky1,\n          z = A * sy0 + B * sy1;\n      return [\n        atan2(y, x) * degrees$1,\n        atan2(z, sqrt$1(x * x + y * y)) * degrees$1\n      ];\n    } : function() {\n      return [x0 * degrees$1, y0 * degrees$1];\n    };\n\n    interpolate.distance = d;\n\n    return interpolate;\n  }\n\n  function identity$7(x) {\n    return x;\n  }\n\nvar   areaSum$1 = adder();\nvar   areaRingSum$1 = adder();\n  var x00;\n  var y00;\nvar   x0$1;\nvar   y0$1;\n  var areaStream$1 = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaStream$1.lineStart = areaRingStart$1;\n      areaStream$1.lineEnd = areaRingEnd$1;\n    },\n    polygonEnd: function() {\n      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;\n      areaSum$1.add(abs(areaRingSum$1));\n      areaRingSum$1.reset();\n    },\n    result: function() {\n      var area = areaSum$1 / 2;\n      areaSum$1.reset();\n      return area;\n    }\n  };\n\n  function areaRingStart$1() {\n    areaStream$1.point = areaPointFirst$1;\n  }\n\n  function areaPointFirst$1(x, y) {\n    areaStream$1.point = areaPoint$1;\n    x00 = x0$1 = x, y00 = y0$1 = y;\n  }\n\n  function areaPoint$1(x, y) {\n    areaRingSum$1.add(y0$1 * x - x0$1 * y);\n    x0$1 = x, y0$1 = y;\n  }\n\n  function areaRingEnd$1() {\n    areaPoint$1(x00, y00);\n  }\n\nvar   x0$2 = Infinity;\nvar   y0$2 = x0$2;\n  var x1 = -x0$2;\n  var y1 = x1;\n  var boundsStream$1 = {\n    point: boundsPoint$1,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2,\n    result: function() {\n      var bounds = [[x0$2, y0$2], [x1, y1]];\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n      return bounds;\n    }\n  };\n\n  function boundsPoint$1(x, y) {\n    if (x < x0$2) x0$2 = x;\n    if (x > x1) x1 = x;\n    if (y < y0$2) y0$2 = y;\n    if (y > y1) y1 = y;\n  }\n\nvar   X0$1 = 0;\nvar   Y0$1 = 0;\nvar   Z0$1 = 0;\nvar   X1$1 = 0;\nvar   Y1$1 = 0;\nvar   Z1$1 = 0;\nvar   X2$1 = 0;\nvar   Y2$1 = 0;\nvar   Z2$1 = 0;\nvar   x00$1;\nvar   y00$1;\nvar   x0$3;\nvar   y0$3;\n  var centroidStream$1 = {\n    point: centroidPoint$1,\n    lineStart: centroidLineStart$1,\n    lineEnd: centroidLineEnd$1,\n    polygonStart: function() {\n      centroidStream$1.lineStart = centroidRingStart$1;\n      centroidStream$1.lineEnd = centroidRingEnd$1;\n    },\n    polygonEnd: function() {\n      centroidStream$1.point = centroidPoint$1;\n      centroidStream$1.lineStart = centroidLineStart$1;\n      centroidStream$1.lineEnd = centroidLineEnd$1;\n    },\n    result: function() {\n      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n          : [NaN, NaN];\n      X0$1 = Y0$1 = Z0$1 =\n      X1$1 = Y1$1 = Z1$1 =\n      X2$1 = Y2$1 = Z2$1 = 0;\n      return centroid;\n    }\n  };\n\n  function centroidPoint$1(x, y) {\n    X0$1 += x;\n    Y0$1 += y;\n    ++Z0$1;\n  }\n\n  function centroidLineStart$1() {\n    centroidStream$1.point = centroidPointFirstLine;\n  }\n\n  function centroidPointFirstLine(x, y) {\n    centroidStream$1.point = centroidPointLine;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidPointLine(x, y) {\n    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidLineEnd$1() {\n    centroidStream$1.point = centroidPoint$1;\n  }\n\n  function centroidRingStart$1() {\n    centroidStream$1.point = centroidPointFirstRing;\n  }\n\n  function centroidRingEnd$1() {\n    centroidPointRing(x00$1, y00$1);\n  }\n\n  function centroidPointFirstRing(x, y) {\n    centroidStream$1.point = centroidPointRing;\n    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n  }\n\n  function centroidPointRing(x, y) {\n    var dx = x - x0$3,\n        dy = y - y0$3,\n        z = sqrt$1(dx * dx + dy * dy);\n\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n\n    z = y0$3 * x - x0$3 * y;\n    X2$1 += z * (x0$3 + x);\n    Y2$1 += z * (y0$3 + y);\n    Z2$1 += z * 3;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function PathContext(context) {\n    var pointRadius = 4.5;\n\n    var stream = {\n      point: point,\n\n      // While inside a line, override point to moveTo then lineTo.\n      lineStart: function() { stream.point = pointLineStart; },\n      lineEnd: lineEnd,\n\n      // While inside a polygon, override lineEnd to closePath.\n      polygonStart: function() { stream.lineEnd = lineEndPolygon; },\n      polygonEnd: function() { stream.lineEnd = lineEnd; stream.point = point; },\n\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n\n      result: noop$2\n    };\n\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, tau$4);\n    }\n\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n\n    function lineEnd() {\n      stream.point = point;\n    }\n\n    function lineEndPolygon() {\n      context.closePath();\n    }\n\n    return stream;\n  }\n\n  function PathString() {\n    var pointCircle = circle$2(4.5),\n        string = [];\n\n    var stream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = circle$2(_);\n        return stream;\n      },\n      result: function() {\n        if (string.length) {\n          var result = string.join(\"\");\n          string = [];\n          return result;\n        }\n      }\n    };\n\n    function point(x, y) {\n      string.push(\"M\", x, \",\", y, pointCircle);\n    }\n\n    function pointLineStart(x, y) {\n      string.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      string.push(\"L\", x, \",\", y);\n    }\n\n    function lineStart() {\n      stream.point = pointLineStart;\n    }\n\n    function lineEnd() {\n      stream.point = point;\n    }\n\n    function lineEndPolygon() {\n      string.push(\"Z\");\n    }\n\n    return stream;\n  }\n\n  function circle$2(radius) {\n    return \"m0,\" + radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n        + \"z\";\n  }\n\n  function index$3() {\n    var pointRadius = 4.5,\n        projection,\n        projectionStream,\n        context,\n        contextStream;\n\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        stream(object, projectionStream(contextStream));\n      }\n      return contextStream.result();\n    }\n\n    path.area = function(object) {\n      stream(object, projectionStream(areaStream$1));\n      return areaStream$1.result();\n    };\n\n    path.bounds = function(object) {\n      stream(object, projectionStream(boundsStream$1));\n      return boundsStream$1.result();\n    };\n\n    path.centroid = function(object) {\n      stream(object, projectionStream(centroidStream$1));\n      return centroidStream$1.result();\n    };\n\n    path.projection = function(_) {\n      return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;\n    };\n\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new PathString : new PathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return path;\n    };\n\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n\n    return path.projection(null).context(null);\n  }\n\n  var sum$2 = adder();\n\n  function polygonContains(polygon, point) {\n    var lambda = point[0],\n        phi = point[1],\n        normal = [sin$1(lambda), -cos$1(lambda), 0],\n        angle = 0,\n        winding = 0;\n\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      if (!(m = (ring = polygon[i]).length)) continue;\n      var ring,\n          m,\n          point0 = ring[m - 1],\n          lambda0 = point0[0],\n          phi0 = point0[1] / 2 + quarterPi,\n          sinPhi0 = sin$1(phi0),\n          cosPhi0 = cos$1(phi0);\n\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n        var point1 = ring[j],\n            lambda1 = point1[0],\n            phi1 = point1[1] / 2 + quarterPi,\n            sinPhi1 = sin$1(phi1),\n            cosPhi1 = cos$1(phi1),\n            delta = lambda1 - lambda0,\n            sign = delta >= 0 ? 1 : -1,\n            absDelta = sign * delta,\n            antimeridian = absDelta > pi$4,\n            k = sinPhi0 * sinPhi1;\n\n        sum$2.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));\n        angle += antimeridian ? delta + sign * tau$4 : delta;\n\n        // Are the longitudes either side of the point’s meridian (lambda),\n        // and are the latitudes smaller than the parallel (phi)?\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n          cartesianNormalizeInPlace(arc);\n          var intersection = cartesianCross(normal, arc);\n          cartesianNormalizeInPlace(intersection);\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n          }\n        }\n      }\n    }\n\n    // First, determine whether the South pole is inside or outside:\n    //\n    // It is inside if:\n    // * the polygon winds around it in a clockwise direction.\n    // * the polygon does not (cumulatively) wind around it, but has a negative\n    //   (counter-clockwise) area.\n    //\n    // Second, count the (signed) number of times a segment crosses a lambda\n    // from the point to the South pole.  If it is zero, then the point is the\n    // same side as the South pole.\n\n    var contains = (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ (winding & 1);\n    sum$2.reset();\n    return contains;\n  }\n\n  function clip(pointVisible, clipLine, interpolate, start) {\n    return function(rotate, sink) {\n      var line = clipLine(sink),\n          rotatedStart = rotate.invert(start[0], start[1]),\n          ringBuffer = clipBuffer(),\n          ringSink = clipLine(ringBuffer),\n          polygonStarted = false,\n          polygon,\n          segments,\n          ring;\n\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = merge(segments);\n          var startInside = polygonContains(polygon, rotatedStart);\n          if (segments.length) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n          } else if (startInside) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          sink.polygonStart();\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n          sink.polygonEnd();\n        }\n      };\n\n      function point(lambda, phi) {\n        var point = rotate(lambda, phi);\n        if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n      }\n\n      function pointLine(lambda, phi) {\n        var point = rotate(lambda, phi);\n        line.point(point[0], point[1]);\n      }\n\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n\n      function pointRing(lambda, phi) {\n        ring.push([lambda, phi]);\n        var point = rotate(lambda, phi);\n        ringSink.point(point[0], point[1]);\n      }\n\n      function ringStart() {\n        ringSink.lineStart();\n        ring = [];\n      }\n\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringSink.lineEnd();\n\n        var clean = ringSink.clean(),\n            ringSegments = ringBuffer.result(),\n            i, n = ringSegments.length, m,\n            segment,\n            point;\n\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n\n        if (!n) return;\n\n        // No intersections.\n        if (clean & 1) {\n          segment = ringSegments[0];\n          if ((m = segment.length - 1) > 0) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n            sink.lineEnd();\n          }\n          return;\n        }\n\n        // Rejoin connected segments.\n        // TODO reuse ringBuffer.rejoin()?\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n        segments.push(ringSegments.filter(validSegment));\n      }\n\n      return clip;\n    };\n  }\n\n  function validSegment(segment) {\n    return segment.length > 1;\n  }\n\n  // Intersections are sorted along the clip edge. For both antimeridian cutting\n  // and circle clipping, the same comparison is used.\n  function compareIntersection(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1])\n         - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);\n  }\n\n  var clipAntimeridian = clip(\n    function() { return true; },\n    clipAntimeridianLine,\n    clipAntimeridianInterpolate,\n    [-pi$4, -halfPi$3]\n  );\n\n  // Takes a line and cuts into visible segments. Return values: 0 - there were\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\n  // intersections, and the first and last segments should be rejoined.\n  function clipAntimeridianLine(stream) {\n    var lambda0 = NaN,\n        phi0 = NaN,\n        sign0 = NaN,\n        clean; // no intersections\n\n    return {\n      lineStart: function() {\n        stream.lineStart();\n        clean = 1;\n      },\n      point: function(lambda1, phi1) {\n        var sign1 = lambda1 > 0 ? pi$4 : -pi$4,\n            delta = abs(lambda1 - lambda0);\n        if (abs(delta - pi$4) < epsilon$4) { // line crosses a pole\n          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          stream.point(lambda1, phi0);\n          clean = 0;\n        } else if (sign0 !== sign1 && delta >= pi$4) { // line crosses antimeridian\n          if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies\n          if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          clean = 0;\n        }\n        stream.point(lambda0 = lambda1, phi0 = phi1);\n        sign0 = sign1;\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n        lambda0 = phi0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean; // if intersections, rejoin first and last segments\n      }\n    };\n  }\n\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n    var cosPhi0,\n        cosPhi1,\n        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);\n    return abs(sinLambda0Lambda1) > epsilon$4\n        ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)\n            - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))\n            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n        : (phi0 + phi1) / 2;\n  }\n\n  function clipAntimeridianInterpolate(from, to, direction, stream) {\n    var phi;\n    if (from == null) {\n      phi = direction * halfPi$3;\n      stream.point(-pi$4, phi);\n      stream.point(0, phi);\n      stream.point(pi$4, phi);\n      stream.point(pi$4, 0);\n      stream.point(pi$4, -phi);\n      stream.point(0, -phi);\n      stream.point(-pi$4, -phi);\n      stream.point(-pi$4, 0);\n      stream.point(-pi$4, phi);\n    } else if (abs(from[0] - to[0]) > epsilon$4) {\n      var lambda = from[0] < to[0] ? pi$4 : -pi$4;\n      phi = direction * lambda / 2;\n      stream.point(-lambda, phi);\n      stream.point(0, phi);\n      stream.point(lambda, phi);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function clipCircle(radius, delta) {\n    var cr = cos$1(radius),\n        smallRadius = cr > 0,\n        notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case\n\n    function interpolate(from, to, direction, stream) {\n      circleStream(stream, radius, delta, direction, from, to);\n    }\n\n    function visible(lambda, phi) {\n      return cos$1(lambda) * cos$1(phi) > cr;\n    }\n\n    // Takes a line and cuts into visible segments. Return values used for polygon\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\n    // intersections 2 - there were intersections, and the first and last segments\n    // should be rejoined.\n    function clipLine(stream) {\n      var point0, // previous point\n          c0, // code for previous point\n          v0, // visibility of previous point\n          v00, // visibility of first point\n          clean; // no intersections\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(lambda, phi) {\n          var point1 = [lambda, phi],\n              point2,\n              v = visible(lambda, phi),\n              c = smallRadius\n                ? v ? 0 : code(lambda, phi)\n                : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;\n          if (!point0 && (v00 = v0 = v)) stream.lineStart();\n          // Handle degeneracies.\n          // TODO ignore if not clipping polygons.\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n              point1[0] += epsilon$4;\n              point1[1] += epsilon$4;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              // outside going in\n              stream.lineStart();\n              point2 = intersect(point1, point0);\n              stream.point(point2[0], point2[1]);\n            } else {\n              // inside going out\n              point2 = intersect(point0, point1);\n              stream.point(point2[0], point2[1]);\n              stream.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            // If the codes for two points are different, or are both zero,\n            // and there this segment intersects with the small circle.\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n              } else {\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !pointEqual(point0, point1))) {\n            stream.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) stream.lineEnd();\n          point0 = null;\n        },\n        // Rejoin first and last segments if there were intersections and the first\n        // and last points were visible.\n        clean: function() {\n          return clean | ((v00 && v0) << 1);\n        }\n      };\n    }\n\n    // Intersects the great circle between a and b with the clip circle.\n    function intersect(a, b, two) {\n      var pa = cartesian(a),\n          pb = cartesian(b);\n\n      // We have two planes, n1.p = d1 and n2.p = d2.\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n      var n1 = [1, 0, 0], // normal\n          n2 = cartesianCross(pa, pb),\n          n2n2 = cartesianDot(n2, n2),\n          n1n2 = n2[0], // cartesianDot(n1, n2),\n          determinant = n2n2 - n1n2 * n1n2;\n\n      // Two polar points.\n      if (!determinant) return !two && a;\n\n      var c1 =  cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = cartesianCross(n1, n2),\n          A = cartesianScale(n1, c1),\n          B = cartesianScale(n2, c2);\n      cartesianAddInPlace(A, B);\n\n      // Solve |p(t)|^2 = 1.\n      var u = n1xn2,\n          w = cartesianDot(A, u),\n          uu = cartesianDot(u, u),\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n      if (t2 < 0) return;\n\n      var t = sqrt$1(t2),\n          q = cartesianScale(u, (-w - t) / uu);\n      cartesianAddInPlace(q, A);\n      q = spherical(q);\n\n      if (!two) return q;\n\n      // Two intersection points.\n      var lambda0 = a[0],\n          lambda1 = b[0],\n          phi0 = a[1],\n          phi1 = b[1],\n          z;\n\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n      var delta = lambda1 - lambda0,\n          polar = abs(delta - pi$4) < epsilon$4,\n          meridian = polar || delta < epsilon$4;\n\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n      // Check that the first point is between a and b.\n      if (meridian\n          ? polar\n            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)\n            : phi0 <= q[1] && q[1] <= phi1\n          : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n        var q1 = cartesianScale(u, (-w + t) / uu);\n        cartesianAddInPlace(q1, A);\n        return [q, spherical(q1)];\n      }\n    }\n\n    // Generates a 4-bit vector representing the location of a point relative to\n    // the small circle's bounding box.\n    function code(lambda, phi) {\n      var r = smallRadius ? radius : pi$4 - radius,\n          code = 0;\n      if (lambda < -r) code |= 1; // left\n      else if (lambda > r) code |= 2; // right\n      if (phi < -r) code |= 4; // below\n      else if (phi > r) code |= 8; // above\n      return code;\n    }\n\n    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$4, radius - pi$4]);\n  }\n\n  function transform$1(prototype) {\n    return {\n      stream: transform$2(prototype)\n    };\n  }\n\n  function transform$2(prototype) {\n    function T() {}\n    var p = T.prototype = Object.create(Transform$1.prototype);\n    for (var k in prototype) p[k] = prototype[k];\n    return function(stream) {\n      var t = new T;\n      t.stream = stream;\n      return t;\n    };\n  }\n\n  function Transform$1() {}\n\n  Transform$1.prototype = {\n    point: function(x, y) { this.stream.point(x, y); },\n    sphere: function() { this.stream.sphere(); },\n    lineStart: function() { this.stream.lineStart(); },\n    lineEnd: function() { this.stream.lineEnd(); },\n    polygonStart: function() { this.stream.polygonStart(); },\n    polygonEnd: function() { this.stream.polygonEnd(); }\n  };\n\n  var maxDepth = 16;\n  var cosMinDistance = cos$1(30 * radians);\n  // cos(minimum angular distance)\n\n  function resample(project, delta2) {\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n  }\n\n  function resampleNone(project) {\n    return transform$2({\n      point: function(x, y) {\n        x = project(x, y);\n        this.stream.point(x[0], x[1]);\n      }\n    });\n  }\n\n  function resample$1(project, delta2) {\n\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n      if (d2 > 4 * delta2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = sqrt$1(a * a + b * b + c * c),\n            phi2 = asin$1(c /= m),\n            lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),\n            p = project(lambda2, phi2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\n            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    return function(stream) {\n      var lambda00, x00, y00, a00, b00, c00, // first point\n          lambda0, x0, y0, a0, b0, c0; // previous point\n\n      var resampleStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n        polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n      };\n\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n\n      function lineStart() {\n        x0 = NaN;\n        resampleStream.point = linePoint;\n        stream.lineStart();\n      }\n\n      function linePoint(lambda, phi) {\n        var c = cartesian([lambda, phi]), p = project(lambda, phi);\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n\n      function lineEnd() {\n        resampleStream.point = point;\n        stream.lineEnd();\n      }\n\n      function ringStart() {\n        lineStart();\n        resampleStream.point = ringPoint;\n        resampleStream.lineEnd = ringEnd;\n      }\n\n      function ringPoint(lambda, phi) {\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resampleStream.point = linePoint;\n      }\n\n      function ringEnd() {\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n        resampleStream.lineEnd = lineEnd;\n        lineEnd();\n      }\n\n      return resampleStream;\n    };\n  }\n\n  var transformRadians = transform$2({\n    point: function(x, y) {\n      this.stream.point(x * radians, y * radians);\n    }\n  });\n\n  function projection(project) {\n    return projectionMutator(function() { return project; })();\n  }\n\n  function projectionMutator(projectAt) {\n    var project,\n        k = 150, // scale\n        x = 480, y = 250, // translate\n        dx, dy, lambda = 0, phi = 0, // center\n        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n        theta = null, preclip = clipAntimeridian, // clip angle\n        x0 = null, y0, x1, y1, postclip = identity$7, // clip extent\n        delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n        cache,\n        cacheStream;\n\n    function projection(point) {\n      point = projectRotate(point[0] * radians, point[1] * radians);\n      return [point[0] * k + dx, dy - point[1] * k];\n    }\n\n    function invert(point) {\n      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n      return point && [point[0] * degrees$1, point[1] * degrees$1];\n    }\n\n    function projectTransform(x, y) {\n      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n    }\n\n    projection.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n    };\n\n    projection.clipAngle = function(_) {\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\n    };\n\n    projection.clipExtent = function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function(_) {\n      return arguments.length ? (k = +_, recenter()) : k;\n    };\n\n    projection.translate = function(_) {\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n    };\n\n    projection.center = function(_) {\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\n    };\n\n    projection.rotate = function(_) {\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\n    };\n\n    projection.precision = function(_) {\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);\n    };\n\n    function recenter() {\n      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n      var center = project(lambda, phi);\n      dx = x - center[0] * k;\n      dy = y + center[1] * k;\n      return reset();\n    }\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return recenter();\n    };\n  }\n\n  function conicProjection(projectAt) {\n    var phi0 = 0,\n        phi1 = pi$4 / 3,\n        m = projectionMutator(projectAt),\n        p = m(phi0, phi1);\n\n    p.parallels = function(_) {\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\n    };\n\n    return p;\n  }\n\n  function conicEqualAreaRaw(y0, y1) {\n    var sy0 = sin$1(y0),\n        n = (sy0 + sin$1(y1)) / 2,\n        c = 1 + sy0 * (2 * n - sy0),\n        r0 = sqrt$1(c) / n;\n\n    function project(x, y) {\n      var r = sqrt$1(c - 2 * n * sin$1(y)) / n;\n      return [r * sin$1(x *= n), r0 - r * cos$1(x)];\n    }\n\n    project.invert = function(x, y) {\n      var r0y = r0 - y;\n      return [atan2(x, r0y) / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n    };\n\n    return project;\n  }\n\n  function conicEqualArea() {\n    return conicProjection(conicEqualAreaRaw)\n        .scale(155.424)\n        .center([0, 33.6442]);\n  }\n\n  function albers() {\n    return conicEqualArea()\n        .parallels([29.5, 45.5])\n        .scale(1070)\n        .translate([480, 250])\n        .rotate([96, 0])\n        .center([-0.6, 38.7]);\n  }\n\n  // The projections must have mutually exclusive clip regions on the sphere,\n  // as this will avoid emitting interleaving lines and polygons.\n  function multiplex(streams) {\n    var n = streams.length;\n    return {\n      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n    };\n  }\n\n  // A composite projection for the United States, configured by default for\n  // 960×500. The projection also works quite well at 960×600 if you change the\n  // scale to 1285 and adjust the translate accordingly. The set of standard\n  // parallels for each region comes from USGS, which is published here:\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n  function albersUsa() {\n    var cache,\n        cacheStream,\n        lower48 = albers(), lower48Point,\n        alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n        hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n        point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      return point = null,\n          (lower48Point.point(x, y), point)\n          || (alaskaPoint.point(x, y), point)\n          || (hawaiiPoint.point(x, y), point);\n    }\n\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n          : lower48).invert(coordinates);\n    };\n\n    albersUsa.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n    };\n\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n      return albersUsa;\n    };\n\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n\n      lower48Point = lower48\n          .translate(_)\n          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n          .stream(pointStream);\n\n      alaskaPoint = alaska\n          .translate([x - 0.307 * k, y + 0.201 * k])\n          .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointStream);\n\n      hawaiiPoint = hawaii\n          .translate([x - 0.205 * k, y + 0.212 * k])\n          .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointStream);\n\n      return albersUsa;\n    };\n\n    return albersUsa.scale(1070);\n  }\n\n  function azimuthalRaw(scale) {\n    return function(x, y) {\n      var cx = cos$1(x),\n          cy = cos$1(y),\n          k = scale(cx * cy);\n      return [\n        k * cy * sin$1(x),\n        k * sin$1(y)\n      ];\n    }\n  }\n\n  function azimuthalInvert(angle) {\n    return function(x, y) {\n      var z = sqrt$1(x * x + y * y),\n          c = angle(z),\n          sc = sin$1(c),\n          cc = cos$1(c);\n      return [\n        atan2(x * sc, z * cc),\n        asin$1(z && y * sc / z)\n      ];\n    }\n  }\n\n  var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n    return sqrt$1(2 / (1 + cxcy));\n  });\n\n  azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n    return 2 * asin$1(z / 2);\n  });\n\n  function azimuthalEqualArea() {\n    return projection(azimuthalEqualAreaRaw)\n        .scale(124.75)\n        .clipAngle(180 - 1e-3);\n  }\n\n  var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n    return (c = acos(c)) && c / sin$1(c);\n  });\n\n  azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n    return z;\n  });\n\n  function azimuthalEquidistant() {\n    return projection(azimuthalEquidistantRaw)\n        .scale(79.4188)\n        .clipAngle(180 - 1e-3);\n  }\n\n  function mercatorRaw(lambda, phi) {\n    return [lambda, log$1(tan((halfPi$3 + phi) / 2))];\n  }\n\n  mercatorRaw.invert = function(x, y) {\n    return [x, 2 * atan(exp(y)) - halfPi$3];\n  };\n\n  function mercator() {\n    return mercatorProjection(mercatorRaw)\n        .scale(961 / tau$4);\n  }\n\n  function mercatorProjection(project) {\n    var m = projection(project),\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        clipAuto;\n\n    m.scale = function(_) {\n      return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();\n    };\n\n    m.translate = function(_) {\n      return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();\n    };\n\n    m.clipExtent = function(_) {\n      if (!arguments.length) return clipAuto ? null : clipExtent();\n      if (clipAuto = _ == null) {\n        var k = pi$4 * scale(),\n            t = translate();\n        _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];\n      }\n      clipExtent(_);\n      return m;\n    };\n\n    return m.clipExtent(null);\n  }\n\n  function tany(y) {\n    return tan((halfPi$3 + y) / 2);\n  }\n\n  function conicConformalRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)),\n        f = cy0 * pow$1(tany(y0), n) / n;\n\n    if (!n) return mercatorRaw;\n\n    function project(x, y) {\n      if (f > 0) { if (y < -halfPi$3 + epsilon$4) y = -halfPi$3 + epsilon$4; }\n      else { if (y > halfPi$3 - epsilon$4) y = halfPi$3 - epsilon$4; }\n      var r = f / pow$1(tany(y), n);\n      return [r * sin$1(n * x), f - r * cos$1(n * x)];\n    }\n\n    project.invert = function(x, y) {\n      var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);\n      return [atan2(x, fy) / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$3];\n    };\n\n    return project;\n  }\n\n  function conicConformal() {\n    return conicProjection(conicConformalRaw)\n        .scale(109.5)\n        .parallels([30, 30]);\n  }\n\n  function equirectangularRaw(lambda, phi) {\n    return [lambda, phi];\n  }\n\n  equirectangularRaw.invert = equirectangularRaw;\n\n  function equirectangular() {\n    return projection(equirectangularRaw)\n        .scale(152.63);\n  }\n\n  function conicEquidistantRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),\n        g = cy0 / n + y0;\n\n    if (abs(n) < epsilon$4) return equirectangularRaw;\n\n    function project(x, y) {\n      var gy = g - y, nx = n * x;\n      return [gy * sin$1(nx), g - gy * cos$1(nx)];\n    }\n\n    project.invert = function(x, y) {\n      var gy = g - y;\n      return [atan2(x, gy) / n, g - sign$1(n) * sqrt$1(x * x + gy * gy)];\n    };\n\n    return project;\n  }\n\n  function conicEquidistant() {\n    return conicProjection(conicEquidistantRaw)\n        .scale(131.154)\n        .center([0, 13.9389]);\n  }\n\n  function gnomonicRaw(x, y) {\n    var cy = cos$1(y), k = cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  gnomonicRaw.invert = azimuthalInvert(atan);\n\n  function gnomonic() {\n    return projection(gnomonicRaw)\n        .scale(144.049)\n        .clipAngle(60);\n  }\n\n  function orthographicRaw(x, y) {\n    return [cos$1(y) * sin$1(x), sin$1(y)];\n  }\n\n  orthographicRaw.invert = azimuthalInvert(asin$1);\n\n  function orthographic() {\n    return projection(orthographicRaw)\n        .scale(249.5)\n        .clipAngle(90 + epsilon$4);\n  }\n\n  function stereographicRaw(x, y) {\n    var cy = cos$1(y), k = 1 + cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  stereographicRaw.invert = azimuthalInvert(function(z) {\n    return 2 + atan(z);\n  });\n\n  function stereographic() {\n    return projection(stereographicRaw)\n        .scale(250)\n        .clipAngle(142);\n  }\n\n  function transverseMercatorRaw(lambda, phi) {\n    return [log$1(tan((halfPi$3 + phi) / 2)), -lambda];\n  }\n\n  transverseMercatorRaw.invert = function(x, y) {\n    return [-y, 2 * atan(exp(x)) - halfPi$3];\n  };\n\n  function transverseMercator() {\n    var m = mercatorProjection(transverseMercatorRaw),\n        center = m.center,\n        rotate = m.rotate;\n\n    m.center = function(_) {\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n\n    m.rotate = function(_) {\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n\n    return rotate([0, 0, 90])\n        .scale(159.155);\n  }\n\n  exports.version = version;\n  exports.bisect = bisectRight;\n  exports.bisectRight = bisectRight;\n  exports.bisectLeft = bisectLeft;\n  exports.ascending = ascending;\n  exports.bisector = bisector;\n  exports.descending = descending;\n  exports.deviation = deviation;\n  exports.extent = extent;\n  exports.histogram = histogram;\n  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\n  exports.thresholdScott = scott;\n  exports.thresholdSturges = sturges;\n  exports.max = max;\n  exports.mean = mean;\n  exports.median = median;\n  exports.merge = merge;\n  exports.min = min;\n  exports.pairs = pairs;\n  exports.permute = permute;\n  exports.quantile = threshold;\n  exports.range = range;\n  exports.scan = scan;\n  exports.shuffle = shuffle;\n  exports.sum = sum;\n  exports.ticks = ticks;\n  exports.tickStep = tickStep;\n  exports.transpose = transpose;\n  exports.variance = variance;\n  exports.zip = zip;\n  exports.entries = entries;\n  exports.keys = keys;\n  exports.values = values;\n  exports.map = map$1;\n  exports.set = set;\n  exports.nest = nest;\n  exports.randomUniform = uniform;\n  exports.randomNormal = normal;\n  exports.randomLogNormal = logNormal;\n  exports.randomBates = bates;\n  exports.randomIrwinHall = irwinHall;\n  exports.randomExponential = exponential;\n  exports.easeLinear = linear;\n  exports.easeQuad = quadInOut;\n  exports.easeQuadIn = quadIn;\n  exports.easeQuadOut = quadOut;\n  exports.easeQuadInOut = quadInOut;\n  exports.easeCubic = easeCubicInOut;\n  exports.easeCubicIn = cubicIn;\n  exports.easeCubicOut = cubicOut;\n  exports.easeCubicInOut = easeCubicInOut;\n  exports.easePoly = polyInOut;\n  exports.easePolyIn = polyIn;\n  exports.easePolyOut = polyOut;\n  exports.easePolyInOut = polyInOut;\n  exports.easeSin = sinInOut;\n  exports.easeSinIn = sinIn;\n  exports.easeSinOut = sinOut;\n  exports.easeSinInOut = sinInOut;\n  exports.easeExp = expInOut;\n  exports.easeExpIn = expIn;\n  exports.easeExpOut = expOut;\n  exports.easeExpInOut = expInOut;\n  exports.easeCircle = circleInOut;\n  exports.easeCircleIn = circleIn;\n  exports.easeCircleOut = circleOut;\n  exports.easeCircleInOut = circleInOut;\n  exports.easeBounce = bounceOut;\n  exports.easeBounceIn = bounceIn;\n  exports.easeBounceOut = bounceOut;\n  exports.easeBounceInOut = bounceInOut;\n  exports.easeBack = backInOut;\n  exports.easeBackIn = backIn;\n  exports.easeBackOut = backOut;\n  exports.easeBackInOut = backInOut;\n  exports.easeElastic = elasticOut;\n  exports.easeElasticIn = elasticIn;\n  exports.easeElasticOut = elasticOut;\n  exports.easeElasticInOut = elasticInOut;\n  exports.polygonArea = area;\n  exports.polygonCentroid = centroid;\n  exports.polygonHull = hull;\n  exports.polygonContains = contains;\n  exports.polygonLength = length$1;\n  exports.path = path;\n  exports.quadtree = quadtree;\n  exports.queue = queue;\n  exports.arc = arc;\n  exports.area = area$1;\n  exports.line = line;\n  exports.pie = pie;\n  exports.radialArea = radialArea;\n  exports.radialLine = radialLine$1;\n  exports.symbol = symbol;\n  exports.symbols = symbols;\n  exports.symbolCircle = circle;\n  exports.symbolCross = cross$1;\n  exports.symbolDiamond = diamond;\n  exports.symbolSquare = square;\n  exports.symbolStar = star;\n  exports.symbolTriangle = triangle;\n  exports.symbolWye = wye;\n  exports.curveBasisClosed = basisClosed;\n  exports.curveBasisOpen = basisOpen;\n  exports.curveBasis = basis;\n  exports.curveBundle = bundle;\n  exports.curveCardinalClosed = cardinalClosed;\n  exports.curveCardinalOpen = cardinalOpen;\n  exports.curveCardinal = cardinal;\n  exports.curveCatmullRomClosed = catmullRomClosed;\n  exports.curveCatmullRomOpen = catmullRomOpen;\n  exports.curveCatmullRom = catmullRom;\n  exports.curveLinearClosed = linearClosed;\n  exports.curveLinear = curveLinear;\n  exports.curveMonotoneX = monotoneX;\n  exports.curveMonotoneY = monotoneY;\n  exports.curveNatural = natural;\n  exports.curveStep = step;\n  exports.curveStepAfter = stepAfter;\n  exports.curveStepBefore = stepBefore;\n  exports.stack = stack;\n  exports.stackOffsetExpand = expand;\n  exports.stackOffsetNone = none;\n  exports.stackOffsetSilhouette = silhouette;\n  exports.stackOffsetWiggle = wiggle;\n  exports.stackOrderAscending = ascending$1;\n  exports.stackOrderDescending = descending$2;\n  exports.stackOrderInsideOut = insideOut;\n  exports.stackOrderNone = none$1;\n  exports.stackOrderReverse = reverse;\n  exports.color = color;\n  exports.rgb = colorRgb;\n  exports.hsl = colorHsl;\n  exports.lab = lab;\n  exports.hcl = colorHcl;\n  exports.cubehelix = cubehelix;\n  exports.interpolate = interpolate;\n  exports.interpolateArray = array$1;\n  exports.interpolateDate = date;\n  exports.interpolateNumber = interpolateNumber;\n  exports.interpolateObject = object;\n  exports.interpolateRound = interpolateRound;\n  exports.interpolateString = interpolateString;\n  exports.interpolateTransformCss = interpolateTransform$1;\n  exports.interpolateTransformSvg = interpolateTransform$2;\n  exports.interpolateZoom = interpolateZoom;\n  exports.interpolateRgb = interpolateRgb;\n  exports.interpolateRgbBasis = rgbBasis;\n  exports.interpolateRgbBasisClosed = rgbBasisClosed;\n  exports.interpolateHsl = hsl$1;\n  exports.interpolateHslLong = hslLong;\n  exports.interpolateLab = lab$1;\n  exports.interpolateHcl = hcl$1;\n  exports.interpolateHclLong = hclLong;\n  exports.interpolateCubehelix = cubehelix$2;\n  exports.interpolateCubehelixLong = interpolateCubehelixLong;\n  exports.interpolateBasis = basis$2;\n  exports.interpolateBasisClosed = basisClosed$1;\n  exports.quantize = quantize;\n  exports.dispatch = dispatch;\n  exports.dsvFormat = dsv;\n  exports.csvParse = csvParse;\n  exports.csvParseRows = csvParseRows;\n  exports.csvFormat = csvFormat;\n  exports.csvFormatRows = csvFormatRows;\n  exports.tsvParse = tsvParse;\n  exports.tsvParseRows = tsvParseRows;\n  exports.tsvFormat = tsvFormat;\n  exports.tsvFormatRows = tsvFormatRows;\n  exports.request = request;\n  exports.html = html;\n  exports.json = json;\n  exports.text = text;\n  exports.xml = xml;\n  exports.csv = csv$1;\n  exports.tsv = tsv$1;\n  exports.now = now;\n  exports.timer = timer;\n  exports.timerFlush = timerFlush;\n  exports.timeout = timeout$1;\n  exports.interval = interval$1;\n  exports.timeInterval = newInterval;\n  exports.timeMillisecond = millisecond;\n  exports.timeMilliseconds = milliseconds;\n  exports.timeSecond = second;\n  exports.timeSeconds = seconds;\n  exports.timeMinute = minute;\n  exports.timeMinutes = minutes;\n  exports.timeHour = hour;\n  exports.timeHours = hours;\n  exports.timeDay = day;\n  exports.timeDays = days;\n  exports.timeWeek = timeWeek;\n  exports.timeWeeks = sundays;\n  exports.timeSunday = timeWeek;\n  exports.timeSundays = sundays;\n  exports.timeMonday = timeMonday;\n  exports.timeMondays = mondays;\n  exports.timeTuesday = tuesday;\n  exports.timeTuesdays = tuesdays;\n  exports.timeWednesday = wednesday;\n  exports.timeWednesdays = wednesdays;\n  exports.timeThursday = thursday;\n  exports.timeThursdays = thursdays;\n  exports.timeFriday = friday;\n  exports.timeFridays = fridays;\n  exports.timeSaturday = saturday;\n  exports.timeSaturdays = saturdays;\n  exports.timeMonth = month;\n  exports.timeMonths = months;\n  exports.timeYear = year;\n  exports.timeYears = years;\n  exports.utcMillisecond = millisecond;\n  exports.utcMilliseconds = milliseconds;\n  exports.utcSecond = second;\n  exports.utcSeconds = seconds;\n  exports.utcMinute = utcMinute;\n  exports.utcMinutes = utcMinutes;\n  exports.utcHour = utcHour;\n  exports.utcHours = utcHours;\n  exports.utcDay = utcDay;\n  exports.utcDays = utcDays;\n  exports.utcWeek = utcWeek;\n  exports.utcWeeks = utcSundays;\n  exports.utcSunday = utcWeek;\n  exports.utcSundays = utcSundays;\n  exports.utcMonday = utcMonday;\n  exports.utcMondays = utcMondays;\n  exports.utcTuesday = utcTuesday;\n  exports.utcTuesdays = utcTuesdays;\n  exports.utcWednesday = utcWednesday;\n  exports.utcWednesdays = utcWednesdays;\n  exports.utcThursday = utcThursday;\n  exports.utcThursdays = utcThursdays;\n  exports.utcFriday = utcFriday;\n  exports.utcFridays = utcFridays;\n  exports.utcSaturday = utcSaturday;\n  exports.utcSaturdays = utcSaturdays;\n  exports.utcMonth = utcMonth;\n  exports.utcMonths = utcMonths;\n  exports.utcYear = utcYear;\n  exports.utcYears = utcYears;\n  exports.formatLocale = formatLocale;\n  exports.formatDefaultLocale = defaultLocale;\n  exports.formatSpecifier = formatSpecifier;\n  exports.precisionFixed = precisionFixed;\n  exports.precisionPrefix = precisionPrefix;\n  exports.precisionRound = precisionRound;\n  exports.isoFormat = formatIso;\n  exports.isoParse = parseIso;\n  exports.timeFormatLocale = formatLocale$1;\n  exports.timeFormatDefaultLocale = defaultLocale$1;\n  exports.scaleBand = band;\n  exports.scalePoint = point$4;\n  exports.scaleIdentity = identity$4;\n  exports.scaleLinear = linear$2;\n  exports.scaleLog = log;\n  exports.scaleOrdinal = ordinal;\n  exports.scaleImplicit = implicit;\n  exports.scalePow = pow;\n  exports.scaleSqrt = sqrt;\n  exports.scaleQuantile = quantile;\n  exports.scaleQuantize = quantize$1;\n  exports.scaleThreshold = threshold$1;\n  exports.scaleTime = time;\n  exports.scaleUtc = utcTime;\n  exports.schemeCategory10 = category10;\n  exports.schemeCategory20b = category20b;\n  exports.schemeCategory20c = category20c;\n  exports.schemeCategory20 = category20;\n  exports.scaleSequential = sequential;\n  exports.interpolateCubehelixDefault = cubehelix$3;\n  exports.interpolateRainbow = rainbow$1;\n  exports.interpolateWarm = warm;\n  exports.interpolateCool = cool;\n  exports.interpolateViridis = viridis;\n  exports.interpolateMagma = magma;\n  exports.interpolateInferno = inferno;\n  exports.interpolatePlasma = plasma;\n  exports.creator = creator;\n  exports.customEvent = customEvent;\n  exports.local = local;\n  exports.matcher = matcher$1;\n  exports.mouse = mouse;\n  exports.namespace = namespace;\n  exports.namespaces = namespaces;\n  exports.select = select;\n  exports.selectAll = selectAll;\n  exports.selection = selection;\n  exports.selector = selector;\n  exports.selectorAll = selectorAll;\n  exports.touch = touch;\n  exports.touches = touches;\n  exports.window = window;\n  exports.active = active;\n  exports.interrupt = interrupt;\n  exports.transition = transition;\n  exports.axisTop = axisTop;\n  exports.axisRight = axisRight;\n  exports.axisBottom = axisBottom;\n  exports.axisLeft = axisLeft;\n  exports.cluster = cluster;\n  exports.hierarchy = hierarchy;\n  exports.pack = index;\n  exports.packSiblings = siblings;\n  exports.packEnclose = enclose;\n  exports.partition = partition;\n  exports.stratify = stratify;\n  exports.tree = tree;\n  exports.treemap = index$1;\n  exports.treemapBinary = binary;\n  exports.treemapDice = treemapDice;\n  exports.treemapSlice = treemapSlice;\n  exports.treemapSliceDice = sliceDice;\n  exports.treemapSquarify = squarify;\n  exports.treemapResquarify = resquarify;\n  exports.forceCenter = center$1;\n  exports.forceCollide = collide;\n  exports.forceLink = link;\n  exports.forceManyBody = manyBody;\n  exports.forceSimulation = simulation;\n  exports.forceX = x$3;\n  exports.forceY = y$3;\n  exports.drag = drag;\n  exports.dragDisable = dragDisable;\n  exports.dragEnable = dragEnable;\n  exports.voronoi = voronoi;\n  exports.zoom = zoom;\n  exports.zoomIdentity = identity$6;\n  exports.zoomTransform = transform;\n  exports.brush = brush;\n  exports.brushX = brushX;\n  exports.brushY = brushY;\n  exports.brushSelection = brushSelection;\n  exports.chord = chord;\n  exports.ribbon = ribbon;\n  exports.geoAlbers = albers;\n  exports.geoAlbersUsa = albersUsa;\n  exports.geoArea = area$2;\n  exports.geoAzimuthalEqualArea = azimuthalEqualArea;\n  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\n  exports.geoAzimuthalEquidistant = azimuthalEquidistant;\n  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\n  exports.geoBounds = bounds;\n  exports.geoCentroid = centroid$1;\n  exports.geoCircle = circle$1;\n  exports.geoClipExtent = extent$1;\n  exports.geoConicConformal = conicConformal;\n  exports.geoConicConformalRaw = conicConformalRaw;\n  exports.geoConicEqualArea = conicEqualArea;\n  exports.geoConicEqualAreaRaw = conicEqualAreaRaw;\n  exports.geoConicEquidistant = conicEquidistant;\n  exports.geoConicEquidistantRaw = conicEquidistantRaw;\n  exports.geoDistance = distance;\n  exports.geoEquirectangular = equirectangular;\n  exports.geoEquirectangularRaw = equirectangularRaw;\n  exports.geoGnomonic = gnomonic;\n  exports.geoGnomonicRaw = gnomonicRaw;\n  exports.geoGraticule = graticule;\n  exports.geoInterpolate = interpolate$2;\n  exports.geoLength = length$2;\n  exports.geoMercator = mercator;\n  exports.geoMercatorRaw = mercatorRaw;\n  exports.geoOrthographic = orthographic;\n  exports.geoOrthographicRaw = orthographicRaw;\n  exports.geoPath = index$3;\n  exports.geoProjection = projection;\n  exports.geoProjectionMutator = projectionMutator;\n  exports.geoRotation = rotation;\n  exports.geoStereographic = stereographic;\n  exports.geoStereographicRaw = stereographicRaw;\n  exports.geoStream = stream;\n  exports.geoTransform = transform$1;\n  exports.geoTransverseMercator = transverseMercator;\n  exports.geoTransverseMercatorRaw = transverseMercatorRaw;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   4.1.1\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar _isArray = undefined;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = undefined;\nvar customSchedulerFn = undefined;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var _arguments = arguments;\n\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n  if (_state) {\n    (function () {\n      var callback = _arguments[_state - 1];\n      asap(function () {\n        return invokeCallback(_state, child, callback, parent._result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n      GET_THEN_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction Enumerator$1(Constructor, input) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop);\n\n  if (!this.promise[PROMISE_ID]) {\n    makePromise(this.promise);\n  }\n\n  if (isArray(input)) {\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._result = new Array(this.length);\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate(input);\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, validationError());\n  }\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nEnumerator$1.prototype._enumerate = function (input) {\n  for (var i = 0; this._state === PENDING && i < input.length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator$1.prototype._eachEntry = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve$$1 = c.resolve;\n\n  if (resolve$$1 === resolve$1) {\n    var _then = getThen(entry);\n\n    if (_then === then && entry._state !== PENDING) {\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof _then !== 'function') {\n      this._remaining--;\n      this._result[i] = entry;\n    } else if (c === Promise$2) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, _then);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve$$1) {\n        return resolve$$1(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve$$1(entry), i);\n  }\n};\n\nEnumerator$1.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = value;\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator$1.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all$1(entries) {\n  return new Enumerator$1(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race$1(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise$2(resolver) {\n  this[PROMISE_ID] = nextId();\n  this._result = this._state = undefined;\n  this._subscribers = [];\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise$2 ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise$2.all = all$1;\nPromise$2.race = race$1;\nPromise$2.resolve = resolve$1;\nPromise$2.reject = reject$1;\nPromise$2._setScheduler = setScheduler;\nPromise$2._setAsap = setAsap;\nPromise$2._asap = asap;\n\nPromise$2.prototype = {\n  constructor: Promise$2,\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection) {\n    return this.then(null, onRejection);\n  }\n};\n\n/*global self*/\nfunction polyfill$1() {\n    var local = undefined;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise$2;\n}\n\n// Strange compat..\nPromise$2.polyfill = polyfill$1;\nPromise$2.Promise = Promise$2;\n\nreturn Promise$2;\n\n})));\n\n//# sourceMappingURL=es6-promise.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import {Ploidy} from './ploidy';\n\nexport class Color {\n\n  constructor(config) {\n      // Ideogram config\n    this._config = config;\n    this._ploidy = new Ploidy(this._config);\n  }\n\n  getArmColor(chrSetNumber, chrNumber, armNumber) {\n    if (this._config.armColors) {\n      return this._config.armColors[armNumber];\n    } else if (this._config.ancestors) {\n      return this._getPolyploidArmColor(chrSetNumber, chrNumber, armNumber);\n    } else {\n      return null;\n    }\n  }\n\n  getBorderColor(chrSetNumber, chrNumber, armNumber) {\n    if (chrNumber < this._config.ploidy) {\n      return '#000';\n    } else if (this._ploidy.exists(chrSetNumber, chrNumber, armNumber)) {\n      return '#000';\n    } else {\n      return '#fff';\n    }\n  }\n\n  _getPolyploidArmColor(chrSetNumber, chrNumber, armNumber) {\n    if (!this._ploidy.exists(chrSetNumber, chrNumber, armNumber)) {\n      return 'transparent';\n    } else {\n      var ancestor =\n        this._ploidy.getAncestor(chrSetNumber, chrNumber, armNumber);\n      return this._config.ancestors[ancestor];\n    }\n  }\n\n}\n","// Developed by Eric Weitz (https://github.com/eweitz)\n\nimport * as d3 from 'd3';\nimport * as d3promise from 'd3.promise';\nimport {Promise} from 'es6-promise';\n\nimport {Ploidy} from './ploidy';\nimport {Layout} from './layouts/layout';\nimport {ModelAdapter} from './model-adapter';\nimport {Chromosome} from './views/chromosome';\n\nd3.promise = d3promise;\n\nexport class Ideogram {\n\n  constructor(config) {\n    var orientation,\n      chrWidth, chrHeight,\n      container, rect;\n\n    // Clone the config object, to allow multiple instantiations\n    // without picking up prior ideogram's settings\n    this.config = JSON.parse(JSON.stringify(config));\n\n    // TODO: Document this\n    this._bandsXOffset = 30;\n\n    this.debug = false;\n\n    if (!this.config.dataDir) {\n      this.config.dataDir = '../data/bands/native/';\n    }\n\n    if (!this.config.ploidy) {\n      this.config.ploidy = 1;\n    }\n\n    if (this.config.ploidy > 1) {\n      this.sexChromosomes = {};\n      if (!this.config.sex) {\n        // Default to 'male' per human, mouse reference genomes.\n        // TODO: The default sex value should probably be the heterogametic sex,\n        // i.e. whichever sex has allosomes that differ in morphology.\n        // In mammals and most insects that is the male.\n        // However, in birds and reptiles, that is female.\n        this.config.sex = 'male';\n      }\n      if (this.config.ploidy === 2 && !this.config.ancestors) {\n        this.config.ancestors = {M: '#ffb6c1', P: '#add8e6'};\n        this.config.ploidyDesc = 'MP';\n      }\n    }\n\n    if (!this.config.container) {\n      this.config.container = 'body';\n    }\n\n    this.selector = this.config.container + ' #_ideogram';\n\n    if (!this.config.resolution) {\n      this.config.resolution = 850;\n    }\n\n    if ('showChromosomeLabels' in this.config === false) {\n      this.config.showChromosomeLabels = true;\n    }\n\n    if (!this.config.orientation) {\n      orientation = 'vertical';\n      this.config.orientation = orientation;\n    }\n\n    if (!this.config.chrHeight) {\n      container = this.config.container;\n      rect = document.querySelector(container).getBoundingClientRect();\n\n      if (orientation === 'vertical') {\n        chrHeight = rect.height;\n      } else {\n        chrHeight = rect.width;\n      }\n\n      if (container === 'body') {\n        chrHeight = 400;\n      }\n      this.config.chrHeight = chrHeight;\n    }\n\n    if (!this.config.chrWidth) {\n      chrWidth = 10;\n      chrHeight = this.config.chrHeight;\n\n      if (chrHeight < 900 && chrHeight > 500) {\n        chrWidth = Math.round(chrHeight / 40);\n      } else if (chrHeight >= 900) {\n        chrWidth = Math.round(chrHeight / 45);\n      }\n      this.config.chrWidth = chrWidth;\n    }\n\n    if (!this.config.chrMargin) {\n      if (this.config.ploidy === 1) {\n        this.config.chrMargin = 10;\n      } else {\n        // Defaults polyploid chromosomes to relatively small interchromatid gap\n        this.config.chrMargin = Math.round(this.config.chrWidth / 4);\n      }\n    }\n\n    if (!this.config.showBandLabels) {\n      this.config.showBandLabels = false;\n    }\n\n    if ('showFullyBanded' in this.config) {\n      this.config.showFullyBanded = this.config.showFullyBanded;\n    } else {\n      this.config.showFullyBanded = true;\n    }\n\n    if (!this.config.brush) {\n      this.config.brush = false;\n    }\n\n    if (!this.config.rows) {\n      this.config.rows = 1;\n    }\n\n    this.bump = Math.round(this.config.chrHeight / 125);\n    this.adjustedBump = false;\n    if (this.config.chrHeight < 200) {\n      this.adjustedBump = true;\n      this.bump = 4;\n    }\n\n    if (config.showBandLabels) {\n      this.config.chrMargin += 20;\n    }\n\n    if (config.chromosome) {\n      this.config.chromosomes = [config.chromosome];\n      if ('showBandLabels' in config === false) {\n        this.config.showBandLabels = true;\n      }\n      if ('rotatable' in config === false) {\n        this.config.rotatable = false;\n      }\n    }\n\n    if (!this.config.showNonNuclearChromosomes) {\n      this.config.showNonNuclearChromosomes = false;\n    }\n\n    this.initAnnotSettings();\n\n    this.config.chrMargin = (\n    this.config.chrMargin +\n    this.config.chrWidth +\n    this.config.annotTracksHeight * 2\n  );\n\n    if (config.onLoad) {\n      this.onLoadCallback = config.onLoad;\n    }\n\n    if (config.onDrawAnnots) {\n      this.onDrawAnnotsCallback = config.onDrawAnnots;\n    }\n\n    if (config.onBrushMove) {\n      this.onBrushMoveCallback = config.onBrushMove;\n    }\n\n    this.coordinateSystem = 'iscn';\n\n    this.maxLength = {\n      bp: 0,\n      iscn: 0\n    };\n\n    // The E-Utilies In Depth: Parameters, Syntax and More:\n    // https://www.ncbi.nlm.nih.gov/books/NBK25499/\n    this.eutils = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/';\n    this.esearch = this.eutils + 'esearch.fcgi?retmode=json';\n    this.esummary = this.eutils + 'esummary.fcgi?retmode=json';\n    this.elink = this.eutils + 'elink.fcgi?retmode=json';\n\n    this.organisms = {\n      9606: {\n        commonName: 'Human',\n        scientificName: 'Homo sapiens',\n        scientificNameAbbr: 'H. sapiens',\n        assemblies: {\n          default: 'GCF_000001405.26', // GRCh38\n          GRCh38: 'GCF_000001405.26',\n          GRCh37: 'GCF_000001405.13'\n        }\n      },\n      10090: {\n        commonName: 'Mouse',\n        scientificName: 'Mus musculus',\n        scientificNameAbbr: 'M. musculus',\n        assemblies: {\n          default: 'GCF_000001635.20'\n        }\n      },\n      4641: {\n        commonName: 'banana',\n        scientificName: 'Musa acuminata',\n        scientificNameAbbr: 'M. acuminata',\n        assemblies: {\n          default: 'mock'\n        }\n      }\n    };\n\n    // A flat array of chromosomes\n    // (this.chromosomes is an object of\n    // arrays of chromosomes, keyed by organism)\n    this.chromosomesArray = [];\n\n    this.bandsToShow = [];\n\n    this.chromosomes = {};\n    this.numChromosomes = 0;\n    this.bandData = {};\n\n    this.init();\n  }\n\n  /**\n  * Enable use of D3 in client apps, via \"d3 = Ideogram.d3\"\n  */\n  static get d3() {\n    return d3;\n  }\n\n  /**\n  * Gets chromosome band data from a\n  * TSV file, or, if band data is prefetched, from an array\n  *\n  * UCSC: #chrom chromStart  chromEnd  name  gieStain\n  * http://genome.ucsc.edu/cgi-bin/hgTables\n  *  - group: Mapping and Sequencing\n  *  - track: Chromosome Band (Ideogram)\n  *\n  * NCBI: #chromosome  arm band  iscn_start  iscn_stop bp_start  bp_stop stain density\n  * ftp://ftp.ncbi.nlm.nih.gov/pub/gdp/ideogram_9606_GCF_000001305.14_550_V1\n  */\n  getBands(content, taxid, chromosomes) {\n    var lines = {},\n      delimiter, tsvLines, columns, line, stain, chr,\n      i, init, tsvLinesLength, source,\n      start, stop, firstColumn, tmp;\n\n    if (content.slice(0, 8) === 'chrBands') {\n      source = 'native';\n    }\n\n    if (\n    chromosomes instanceof Array &&\n    typeof chromosomes[0] === 'object'\n  ) {\n      tmp = [];\n      for (i = 0; i < chromosomes.length; i++) {\n        tmp.push(chromosomes[i].name);\n      }\n      chromosomes = tmp;\n    }\n\n    if (typeof chrBands === 'undefined' && source !== 'native') {\n      delimiter = /\\t/;\n      tsvLines = content.split(/\\r\\n|\\n/);\n      init = 1;\n    } else {\n      delimiter = / /;\n      if (source === 'native') {\n        tsvLines = eval(content);\n      } else {\n        tsvLines = content;\n      }\n      init = 0;\n    }\n\n    firstColumn = tsvLines[0].split(delimiter)[0];\n    if (firstColumn === '#chromosome') {\n      source = 'ncbi';\n    } else if (firstColumn === '#chrom') {\n      source = 'ucsc';\n    } else {\n      source = 'native';\n    }\n\n    tsvLinesLength = tsvLines.length;\n\n    if (source === 'ncbi' || source === 'native') {\n      for (i = init; i < tsvLinesLength; i++) {\n        columns = tsvLines[i].split(delimiter);\n\n        chr = columns[0];\n\n        if (\n        // If a specific set of chromosomes has been requested, and\n        // the current chromosome\n        typeof (chromosomes) !== 'undefined' &&\n        chromosomes.indexOf(chr) === -1\n      ) {\n          continue;\n        }\n\n        if (chr in lines === false) {\n          lines[chr] = [];\n        }\n\n        stain = columns[7];\n        if (columns[8]) {\n          // For e.g. acen and gvar, columns[8] (density) is undefined\n          stain += columns[8];\n        }\n\n        line = {\n          chr: chr,\n          bp: {\n            start: parseInt(columns[5], 10),\n            stop: parseInt(columns[6], 10)\n          },\n          iscn: {\n            start: parseInt(columns[3], 10),\n            stop: parseInt(columns[4], 10)\n          },\n          px: {\n            start: -1,\n            stop: -1,\n            width: -1\n          },\n          name: columns[1] + columns[2],\n          stain: stain,\n          taxid: taxid\n        };\n\n        lines[chr].push(line);\n      }\n    } else if (source === 'ucsc') {\n      for (i = init; i < tsvLinesLength; i++) {\n        // #chrom chromStart  chromEnd  name  gieStain\n        // e.g. for fly:\n        // chr4\t69508\t108296\t102A1\tn/a\n        columns = tsvLines[i].split(delimiter);\n\n        if (columns[0] !== 'chr' + chromosomeName) {\n          continue;\n        }\n\n        stain = columns[4];\n        if (stain === 'n/a') {\n          stain = 'gpos100';\n        }\n        start = parseInt(columns[1], 10);\n        stop = parseInt(columns[2], 10);\n\n        line = {\n          chr: columns[0].split('chr')[1],\n          bp: {\n            start: start,\n            stop: stop\n          },\n          iscn: {\n            start: start,\n            stop: stop\n          },\n          px: {\n            start: -1,\n            stop: -1,\n            width: -1\n          },\n          name: columns[3],\n          stain: stain,\n          taxid: taxid\n        };\n\n        lines[chr].push(line);\n      }\n    }\n\n    return lines;\n  }\n\n  /**\n  * Generates a model object for each chromosome\n  * containing information on its name, DOM ID,\n  * length in base pairs or ISCN coordinates,\n  * cytogenetic bands, centromere position, etc.\n  */\n  getChromosomeModel(bands, chromosome, taxid, chrIndex) {\n    var chr = {},\n      band,\n      width, pxStop,\n      chrHeight = this.config.chrHeight,\n      maxLength = this.maxLength,\n      chrLength,\n      cs, hasBands;\n\n    cs = this.coordinateSystem;\n    hasBands = (typeof bands !== 'undefined');\n\n    if (hasBands) {\n      chr.name = chromosome;\n      chr.length = bands[bands.length - 1][cs].stop;\n      chr.type = 'nuclear';\n    } else {\n      chr = chromosome;\n    }\n\n    chr.chrIndex = chrIndex;\n\n    chr.id = 'chr' + chr.name + '-' + taxid;\n\n    if (this.config.fullChromosomeLabels === true) {\n      var orgName = this.organisms[taxid].scientificNameAbbr;\n      chr.name = orgName + ' chr' + chr.name;\n    }\n\n    chrLength = chr.length;\n\n    pxStop = 0;\n\n    if (hasBands) {\n      for (var i = 0; i < bands.length; i++) {\n        band = bands[i];\n        var csLength = band[cs].stop - band[cs].start;\n        width = chrHeight * chr.length / maxLength[cs] * csLength / chrLength;\n\n        bands[i].px = {start: pxStop, stop: pxStop + width, width: width};\n\n        pxStop = bands[i].px.stop;\n\n        if (hasBands && band.stain === 'acen' && band.name[0] === 'p') {\n          chr.pcenIndex = i;\n        }\n      }\n    } else {\n      pxStop = chrHeight * chr.length / maxLength[cs];\n    }\n\n    chr.width = pxStop;\n\n    chr.scale = {};\n\n    // TODO:\n    //\n    // A chromosome-level scale property is likely\n    // nonsensical for any chromosomes that have cytogenetic band data.\n    // Different bands tend to have ratios between number of base pairs\n    // and physical length.\n    //\n    // However, a chromosome-level scale property is likely\n    // necessary for chromosomes that do not have band data.\n    //\n    // This needs further review.\n    if (this.config.multiorganism === true) {\n      chr.scale.bp = 1;\n      // chr.scale.bp = band.iscn.stop / band.bp.stop;\n      chr.scale.iscn = chrHeight * chrLength / maxLength.bp;\n    } else {\n      chr.scale.bp = chrHeight / maxLength.bp;\n      if (hasBands) {\n        chr.scale.iscn = chrHeight / maxLength.iscn;\n      }\n    }\n    chr.bands = bands;\n\n    chr.centromerePosition = '';\n    if (\n    hasBands && bands[0].name[0] === 'p' && bands[1].name[0] === 'q' &&\n    bands[0].bp.stop - bands[0].bp.start < 2E6\n  ) {\n      // As with almost all mouse chromosome, chimpanzee chr22\n      chr.centromerePosition = 'telocentric';\n\n      // Remove placeholder pter band\n      chr.bands = chr.bands.slice(1);\n    }\n\n    if (hasBands && chr.bands.length === 1) {\n      // Encountered when processing an assembly that has chromosomes with\n      // centromere data, but this chromosome does not.\n      // Example: chromosome F1 in Felis catus.\n      delete chr.bands;\n    }\n\n    return chr;\n  }\n\n  /**\n  * Draws labels for each chromosome, e.g. \"1\", \"2\", \"X\".\n  * If ideogram configuration has 'fullChromosomeLabels: True',\n  * then labels includes name of taxon, which can help when\n  * depicting orthologs.\n  */\n  drawChromosomeLabels() {\n    var ideo = this;\n\n    var chromosomeLabelClass = ideo._layout.getChromosomeLabelClass();\n\n    var chrSetLabelXPosition = ideo._layout.getChromosomeSetLabelXPosition();\n    var chrSetLabelTranslate = ideo._layout.getChromosomeSetLabelTranslate();\n\n    // Append chromosomes set's labels\n    d3.selectAll(ideo.selector + ' .chromosome-set-container')\n      .append('text')\n      .data(ideo.chromosomesArray)\n      .attr('class', 'chromosome-set-label ' + chromosomeLabelClass)\n      .attr('transform', chrSetLabelTranslate)\n      .attr('x', chrSetLabelXPosition)\n      .attr('y', function(d, i) {\n        return ideo._layout.getChromosomeSetLabelYPosition(i);\n      })\n      .attr('text-anchor', ideo._layout.getChromosomeSetLabelAnchor())\n      .each(function(d, i) {\n          // Get label lines\n        var lines;\n        if (d.name.indexOf(' ') === -1) {\n          lines = [d.name];\n        } else {\n          lines = d.name.match(/^(.*)\\s+([^\\s]+)$/).slice(1).reverse();\n        }\n\n        if (\n          'sex' in ideo.config &&\n          ideo.config.ploidy === 2 &&\n          i === ideo.sexChromosomes.index\n        ) {\n          if (ideo.config.sex === 'male') {\n            lines = ['XY'];\n          } else {\n            lines = ['XX'];\n          }\n        }\n\n        // Render label lines\n        d3.select(this).selectAll('tspan')\n          .data(lines)\n          .enter()\n          .append('tspan')\n          .attr('dy', function(d, i) {\n            return i * -1.2 + 'em';\n          })\n          .attr('x', ideo._layout.getChromosomeSetLabelXPosition())\n          .attr('class', function(a, i) {\n            var fullLabels = ideo.config.fullChromosomeLabels;\n            return i === 1 && fullLabels ? 'italic' : null;\n          }).text(String);\n      });\n\n    var setLabelTranslate = ideo._layout.getChromosomeSetLabelTranslate();\n\n    // Append chromosomes labels\n    d3.selectAll(ideo.selector + ' .chromosome-set-container')\n      .each(function(a, chrSetNumber) {\n        d3.select(this).selectAll('.chromosome')\n          .append('text')\n          .attr('class', 'chrLabel')\n          .attr('transform', setLabelTranslate)\n          .attr('x', function(d, i) {\n            return ideo._layout.getChromosomeLabelXPosition(i);\n          }).attr('y', function(d, i) {\n            return ideo._layout.getChromosomeLabelYPosition(i);\n          }).text(function(d, chrNumber) {\n            return ideo._ploidy.getAncestor(chrSetNumber, chrNumber);\n          }).attr('text-anchor', 'middle');\n      });\n  }\n\n  /**\n  * Draws labels and stalks for cytogenetic bands.\n  *\n  * Band labels are text like \"p11.11\".\n  * Stalks are small lines that visually connect labels to their bands.\n  */\n  drawBandLabels(chromosomes) {\n    var i, chr, chrs, taxid, ideo, chrModel, chrIndex, textOffsets;\n\n    ideo = this;\n\n    chrs = [];\n\n    for (taxid in chromosomes) {\n      for (chr in chromosomes[taxid]) {\n        chrs.push(chromosomes[taxid][chr]);\n      }\n    }\n\n    textOffsets = {};\n\n    chrIndex = 0;\n    for (i = 0; i < chrs.length; i++) {\n      chrIndex += 1;\n\n      chrModel = chrs[i];\n\n      chr = d3.select(ideo.selector + ' #' + chrModel.id);\n\n      // var chrMargin = this.config.chrMargin * chrIndex,\n      //   lineY1, lineY2;\n      //\n      // lineY1 = chrMargin;\n      // lineY2 = chrMargin - 8;\n      //\n      // if (\n      //   chrIndex === 1 &&\n      //   \"perspective\" in this.config && this.config.perspective === \"comparative\"\n      // ) {\n      //   lineY1 += 18;\n      //   lineY2 += 18;\n      // }\n\n      textOffsets[chrModel.id] = [];\n\n      chr.selectAll('text')\n      .data(chrModel.bands)\n      .enter()\n      .append('g')\n        .attr('class', function(d, i) {\n          return 'bandLabel bsbsl-' + i;\n        })\n        .attr('transform', function(d) {\n          var transform = ideo._layout.getChromosomeBandLabelTranslate(d, i);\n\n          var x = transform.x;\n          // var y = transform.y;\n\n          textOffsets[chrModel.id].push(x + 13);\n\n          return transform.translate;\n        })\n        .append('text')\n        .attr('text-anchor', ideo._layout.getChromosomeBandLabelAnchor(i))\n        .text(function(d) {\n          return d.name;\n        });\n\n      // var adapter = ModelAdapter.getInstance(ideo.chromosomesArray[i]);\n      // var view = Chromosome.getInstance(adapter, ideo.config, ideo);\n\n      chr.selectAll('line.bandLabelStalk')\n        .data(chrModel.bands)\n        .enter()\n        .append('g')\n        .attr('class', function(d, i) {\n          return 'bandLabelStalk bsbsl-' + i;\n        })\n        .attr('transform', function(d) {\n          var x, y;\n\n          x = ideo.round(d.px.start + d.px.width / 2);\n\n          textOffsets[chrModel.id].push(x + 13);\n          y = -10;\n\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .append('line')\n        .attr('x1', 0)\n        .attr('y1', function() {\n          return ideo._layout.getChromosomeBandTickY1(i);\n        })\n        .attr('x2', 0)\n        .attr('y2', function() {\n          return ideo._layout.getChromosomeBandTickY2(i);\n        });\n    }\n\n    for (i = 0; i < chrs.length; i++) {\n      chrModel = chrs[i];\n\n      var textsLength = textOffsets[chrModel.id].length,\n        overlappingLabelXRight,\n        index,\n        indexesToShow = [],\n        prevHiddenBoxIndex,\n        xLeft,\n        prevLabelXRight,\n        prevTextBoxLeft,\n        prevTextBoxWidth,\n        textPadding;\n\n      overlappingLabelXRight = 0;\n\n      textPadding = 5;\n\n      for (index = 0; index < textsLength; index++) {\n        // Ensures band labels don't overlap\n\n        xLeft = textOffsets[chrModel.id][index];\n\n        if (xLeft < overlappingLabelXRight + textPadding === false) {\n          indexesToShow.push(index);\n        } else {\n          prevHiddenBoxIndex = index;\n          overlappingLabelXRight = prevLabelXRight;\n          continue;\n        }\n\n        if (prevHiddenBoxIndex !== index) {\n          // This getBoundingClientRect() forces Chrome's\n          // 'Recalculate Style' and 'Layout', which takes 30-40 ms on Chrome.\n          // TODO: This forced synchronous layout would be nice to eliminate.\n          // prevTextBox = texts[index].getBoundingClientRect();\n          // prevLabelXRight = prevTextBox.left + prevTextBox.width;\n\n          // TODO: Account for number of characters in prevTextBoxWidth,\n          // maybe also zoom.\n          prevTextBoxLeft = textOffsets[chrModel.id][index];\n          prevTextBoxWidth = 36;\n\n          prevLabelXRight = prevTextBoxLeft + prevTextBoxWidth;\n        }\n\n        if (\n          xLeft < prevLabelXRight + textPadding\n        ) {\n          prevHiddenBoxIndex = index;\n          overlappingLabelXRight = prevLabelXRight;\n        } else {\n          indexesToShow.push(index);\n        }\n      }\n\n      var selectorsToShow = [],\n        ithLength = indexesToShow.length,\n        j;\n\n      for (j = 0; j < ithLength; j++) {\n        index = indexesToShow[j];\n        selectorsToShow.push('#' + chrModel.id + ' .bsbsl-' + index);\n      }\n\n      this.bandsToShow = this.bandsToShow.concat(selectorsToShow);\n    }\n  }\n\n  // Rotates chromosome labels by 90 degrees, e.g. upon clicking a chromosome to focus.\n  rotateChromosomeLabels(chr, chrIndex, orientation, scale) {\n    var chrMargin, chrWidth, ideo, x, y,\n      numAnnotTracks, scaleSvg, tracksHeight, chrMargin2;\n\n    chrWidth = this.config.chrWidth;\n    chrMargin = this.config.chrMargin * chrIndex;\n    numAnnotTracks = this.config.numAnnotTracks;\n\n    ideo = this;\n\n    if (\n    typeof (scale) !== 'undefined' &&\n    scale.hasOwnProperty('x') &&\n    !(scale.x === 1 && scale.y === 1)\n  ) {\n      scaleSvg = 'scale(' + scale.x + ',' + scale.y + ')';\n      x = -6;\n      y = (scale === '' ? -16 : -14);\n    } else {\n      x = -8;\n      y = -16;\n      scale = {x: 1, y: 1};\n      scaleSvg = '';\n    }\n\n    if (orientation === 'vertical' || orientation === '') {\n      var ci = chrIndex - 1;\n\n      if (numAnnotTracks > 1 || orientation === '') {\n        ci -= 1;\n      }\n\n      chrMargin2 = -4;\n      if (ideo.config.showBandLabels === true) {\n        chrMargin2 = ideo.config.chrMargin + chrWidth + 26;\n      }\n\n      chrMargin = ideo.config.chrMargin * ci;\n\n      if (numAnnotTracks > 1 === false) {\n        chrMargin += 1;\n      }\n\n      y = chrMargin + chrMargin2;\n\n      chr.selectAll('text.chrLabel')\n        .attr('transform', scaleSvg)\n        .selectAll('tspan')\n          .attr('x', x)\n          .attr('y', y);\n    } else {\n      chrIndex -= 1;\n\n      chrMargin2 = -chrWidth - 2;\n      if (ideo.config.showBandLabels === true) {\n        chrMargin2 = ideo.config.chrMargin + 8;\n      }\n\n      tracksHeight = ideo.config.annotTracksHeight;\n      if (ideo.config.annotationsLayout !== 'overlay') {\n        tracksHeight *= 2;\n      }\n\n      chrMargin = ideo.config.chrMargin * chrIndex;\n      x = -(chrMargin + chrMargin2) + 3 + tracksHeight;\n      x /= scale.x;\n\n      chr.selectAll('text.chrLabel')\n        .attr('transform', 'rotate(-90)' + scaleSvg)\n        .selectAll('tspan')\n        .attr('x', x)\n        .attr('y', y);\n    }\n  }\n\n  /**\n  * Rotates band labels by 90 degrees, e.g. upon clicking a chromosome to focus.\n  *\n  * This method includes proportional scaling, which ensures that\n  * while the parent chromosome group is scaled strongly in one dimension to fill\n  * available space, the text in the chromosome's band labels is\n  * not similarly distorted, and remains readable.\n  */\n  rotateBandLabels(chr, chrIndex, scale) {\n    var chrMargin, scaleSvg,\n      orientation, bandLabels,\n      ideo = this;\n\n    bandLabels = chr.selectAll('.bandLabel');\n\n    chrWidth = this.config.chrWidth;\n    chrMargin = this.config.chrMargin * chrIndex;\n\n    orientation = chr.attr('data-orientation');\n\n    if (typeof (scale) === 'undefined') {\n      scale = {x: 1, y: 1};\n      scaleSvg = '';\n    } else {\n      scaleSvg = 'scale(' + scale.x + ',' + scale.y + ')';\n    }\n\n    if (\n      chrIndex === 1 &&\n      'perspective' in this.config && this.config.perspective === 'comparative'\n    ) {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = (8 - chrMargin) - 26;\n          y = ideo.round(2 + d.px.start + d.px.width / 2);\n          return 'rotate(-90)translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('text-anchor', 'end');\n    } else if (orientation === 'vertical') {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = 8 - chrMargin;\n          y = ideo.round(2 + d.px.start + d.px.width / 2);\n          return 'rotate(-90)translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('transform', scaleSvg);\n    } else {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = ideo.round(-8 * scale.x + d.px.start + d.px.width / 2);\n          y = chrMargin - 10;\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('transform', scaleSvg);\n\n      chr.selectAll('.bandLabelStalk line')\n        .attr('transform', scaleSvg);\n    }\n  }\n\n  round(coord) {\n    // Rounds an SVG coordinates to two decimal places\n    // e.g. 42.1234567890 -> 42.12\n    // Per http://stackoverflow.com/a/9453447, below method is fastest\n    return Math.round(coord * 100) / 100;\n  }\n\n  /**\n  * Renders all the bands and outlining boundaries of a chromosome.\n  */\n  drawChromosome(chrModel, chrIndex, container, k) {\n    var chrMargin = this.config.chrMargin;\n\n    // Get chromosome model adapter class\n    var adapter = ModelAdapter.getInstance(chrModel);\n\n    // Append chromosome's container\n    var chromosome = container\n        .append('g')\n        .attr('id', chrModel.id)\n        .attr('class', 'chromosome ' + adapter.getCssClass())\n        .attr('transform', 'translate(0, ' + k * chrMargin + ')');\n\n    // Render chromosome\n    return Chromosome.getInstance(adapter, this.config, this)\n        .render(chromosome, chrIndex, k);\n  }\n\n  /**\n  * Rotates a chromosome 90 degrees and shows or hides all other chromosomes\n  * Useful for focusing or defocusing a particular chromosome\n  */\n  rotateAndToggleDisplay(chromosome) {\n    // Do nothing if taxId not defined. But it should be defined.\n    // To fix that bug we should have a way to find chromosome set number.\n    if (!this.config.taxid) {\n      return;\n    }\n\n    var chrSetNumber =\n      Number(d3.select(chromosome.parentNode).attr('data-set-number'));\n\n    var chrNumber = Array.prototype.slice.call(\n          d3.select(chromosome.parentNode).selectAll('g.chromosome')._groups[0]\n      ).indexOf(chromosome);\n\n    return this._layout.rotate(chrSetNumber, chrNumber, chromosome);\n  }\n\n  /**\n  * Converts base pair coordinates to pixel offsets.\n  * Bp-to-pixel scales differ among cytogenetic bands.\n  */\n  convertBpToPx(chr, bp) {\n    var i, band, bpToIscnScale, iscn, px, offset, pxStart, pxLength, iscnStart,\n      iscnStop, iscnLength, bpStart, bpStop, bpLength;\n\n    for (i = 0; i < chr.bands.length; i++) {\n      band = chr.bands[i];\n\n      offset = this._bandsXOffset;\n      bpStart = band.bp.start;\n      bpStop = band.bp.stop;\n      bpLength = bpStop - bpStart;\n      iscnStart = band.iscn.start;\n      iscnStop = band.iscn.stop;\n      iscnLength = iscnStop - iscnStart;\n      pxStart = band.px.start;\n      pxLength = band.px.width;\n\n      if (bp >= bpStart && bp <= bpStop) {\n        bpToIscnScale = iscnLength / bpLength;\n        iscn = iscnStart + (bp - bpStart) * bpToIscnScale;\n\n        px = offset + pxStart + (pxLength * (iscn - iscnStart) / (iscnLength));\n\n        return px;\n      }\n    }\n\n    throw new Error(\n      'Base pair out of range.  ' +\n      'bp: ' + bp + '; length of chr' + chr.name + ': ' + band.bp.stop\n    );\n  }\n\n  /**\n  * Converts base pair coordinates to pixel offsets.\n  * Bp-to-pixel scales differ among cytogenetic bands.\n  */\n  convertPxToBp(chr, px) {\n    var i, band, pxToIscnScale, iscn, bp, pxLength,\n      pxStart, pxStop, iscnStart, iscnStop, bpLength, iscnLength;\n\n    for (i = 0; i < chr.bands.length; i++) {\n      band = chr.bands[i];\n\n      pxStart = band.px.start;\n      pxStop = band.px.stop;\n      iscnStart = band.iscn.start;\n      iscnStop = band.iscn.stop;\n\n      if (px >= pxStart && px <= pxStop) {\n        iscnLength = iscnStop - iscnStart;\n        pxLength = pxStop - pxStart;\n        bpLength = band.bp.stop - band.bp.start;\n\n        pxToIscnScale = iscnLength / pxLength;\n        iscn = iscnStart + (px - pxStart) * pxToIscnScale;\n\n        bp = band.bp.start + (bpLength * (iscn - iscnStart) / iscnLength);\n\n        return Math.round(bp);\n      }\n    }\n\n    throw new Error(\n      'Pixel out of range.  ' +\n      'px: ' + bp + '; length of chr' + chr.name + ': ' + pxStop\n    );\n  }\n\n  /**\n  * Draws a trapezoid connecting a genomic range on\n  * one chromosome to a genomic range on another chromosome;\n  * a syntenic region.\n  */\n  drawSynteny(syntenicRegions) {\n    var t0 = new Date().getTime();\n\n    var r1, r2,\n      syntenies,\n      i, color, opacity,\n      regionID, regions, syntenicRegion,\n      ideo = this;\n\n    syntenies = d3.select(ideo.selector)\n    .insert('g', ':first-child')\n    .attr('class', 'synteny');\n\n    for (i = 0; i < syntenicRegions.length; i++) {\n      regions = syntenicRegions[i];\n\n      r1 = regions.r1;\n      r2 = regions.r2;\n\n      color = '#CFC';\n      if ('color' in regions) {\n        color = regions.color;\n      }\n\n      opacity = 1;\n      if ('opacity' in regions) {\n        opacity = regions.opacity;\n      }\n\n      r1.startPx = this.convertBpToPx(r1.chr, r1.start);\n      r1.stopPx = this.convertBpToPx(r1.chr, r1.stop);\n      r2.startPx = this.convertBpToPx(r2.chr, r2.start);\n      r2.stopPx = this.convertBpToPx(r2.chr, r2.stop);\n\n      regionID = (\n      r1.chr.id + '_' + r1.start + '_' + r1.stop + '_' +\n      '__' +\n      r2.chr.id + '_' + r2.start + '_' + r2.stop\n    );\n\n      syntenicRegion = syntenies.append('g')\n        .attr('class', 'syntenicRegion')\n        .attr('id', regionID)\n        .on('click', function() {\n          var activeRegion = this;\n          var others = d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .filter(function() {\n              return (this !== activeRegion);\n            });\n\n          others.classed('hidden', !others.classed('hidden'));\n        })\n        .on('mouseover', function() {\n          var activeRegion = this;\n          d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .filter(function() {\n              return (this !== activeRegion);\n            })\n            .classed('ghost', true);\n        })\n        .on('mouseout', function() {\n          d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .classed('ghost', false);\n        });\n      var chrWidth = ideo.config.chrWidth;\n      var x1 = this._layout.getChromosomeSetYTranslate(0);\n      var x2 = this._layout.getChromosomeSetYTranslate(1) - chrWidth;\n\n      syntenicRegion.append('polygon')\n        .attr('points',\n          x1 + ', ' + r1.startPx + ' ' +\n          x1 + ', ' + r1.stopPx + ' ' +\n          x2 + ', ' + r2.stopPx + ' ' +\n          x2 + ', ' + r2.startPx\n        )\n        .attr('style', 'fill: ' + color + '; fill-opacity: ' + opacity);\n\n      syntenicRegion.append('line')\n        .attr('class', 'syntenyBorder')\n        .attr('x1', x1)\n        .attr('x2', x2)\n        .attr('y1', r1.startPx)\n        .attr('y2', r2.startPx);\n\n      syntenicRegion.append('line')\n        .attr('class', 'syntenyBorder')\n        .attr('x1', x1)\n        .attr('x2', x2)\n        .attr('y1', r1.stopPx)\n        .attr('y2', r2.stopPx);\n    }\n\n    var t1 = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time in drawSyntenicRegions: ' + (t1 - t0) + ' ms');\n    }\n  }\n\n  /**\n  * Initializes various annotation settings.  Constructor help function.\n  */\n  initAnnotSettings() {\n    if (\n      this.config.annotationsPath ||\n      this.config.localAnnotationsPath ||\n      this.annots || this.config.annotations\n    ) {\n      if (!this.config.annotationHeight) {\n        var annotHeight = Math.round(this.config.chrHeight / 100);\n        this.config.annotationHeight = annotHeight;\n      }\n\n      if (this.config.annotationTracks) {\n        this.config.numAnnotTracks = this.config.annotationTracks.length;\n      } else {\n        this.config.numAnnotTracks = 1;\n      }\n      this.config.annotTracksHeight =\n      this.config.annotationHeight * this.config.numAnnotTracks;\n\n      if (typeof this.config.barWidth === 'undefined') {\n        this.config.barWidth = 3;\n      }\n    } else {\n      this.config.annotTracksHeight = 0;\n    }\n\n    if (typeof this.config.annotationsColor === 'undefined') {\n      this.config.annotationsColor = '#F00';\n    }\n  }\n\n  /**\n  * Draws annotations defined by user\n  */\n  drawAnnots(friendlyAnnots) {\n    var ideo = this,\n      i, j, annot,\n      rawAnnots = [],\n      rawAnnot, keys,\n      chr,\n      chrs = ideo.chromosomes[ideo.config.taxid]; // TODO: multiorganism\n\n    // Occurs when filtering\n    if ('annots' in friendlyAnnots[0]) {\n      return ideo.drawProcessedAnnots(friendlyAnnots);\n    }\n\n    for (chr in chrs) {\n      rawAnnots.push({chr: chr, annots: []});\n    }\n\n    for (i = 0; i < friendlyAnnots.length; i++) {\n      annot = friendlyAnnots[i];\n\n      for (j = 0; j < rawAnnots.length; j++) {\n        if (annot.chr === rawAnnots[j].chr) {\n          rawAnnot = [\n            annot.name,\n            annot.start,\n            annot.stop - annot.start\n          ];\n          if ('color' in annot) {\n            rawAnnot.push(annot.color);\n          }\n          if ('shape' in annot) {\n            rawAnnot.push(annot.shape);\n          }\n          rawAnnots[j].annots.push(rawAnnot);\n          break;\n        }\n      }\n    }\n\n    keys = ['name', 'start', 'length'];\n    if ('color' in friendlyAnnots[0]) {\n      keys.push('color');\n    }\n    if ('shape' in friendlyAnnots[0]) {\n      keys.push('shape');\n    }\n    ideo.rawAnnots = {keys: keys, annots: rawAnnots};\n\n    ideo.annots = ideo.processAnnotData(ideo.rawAnnots);\n\n    ideo.drawProcessedAnnots(ideo.annots);\n  }\n\n  /**\n  * Proccesses genome annotation data.\n  * Genome annotations represent features like a gene, SNP, etc. as\n  * a small graphical object on or beside a chromosome.\n  * Converts raw annotation data from server, which is structured as\n  * an array of arrays, into a more verbose data structure consisting\n  * of an array of objects.\n  * Also adds pixel offset information.\n  */\n  processAnnotData(rawAnnots) {\n    var keys,\n      i, j, annot, annots, annotsByChr,\n      chr,\n      chrModel, ra,\n      startPx, stopPx, px,\n      color,\n      ideo = this;\n\n    keys = rawAnnots.keys;\n    rawAnnots = rawAnnots.annots;\n\n    annots = [];\n\n    for (i = 0; i < rawAnnots.length; i++) {\n      annotsByChr = rawAnnots[i];\n\n      annots.push({chr: annotsByChr.chr, annots: []});\n\n      for (j = 0; j < annotsByChr.annots.length; j++) {\n        chr = annotsByChr.chr;\n        ra = annotsByChr.annots[j];\n        annot = {};\n\n        for (var k = 0; k < keys.length; k++) {\n          annot[keys[k]] = ra[k];\n        }\n\n        annot.stop = annot.start + annot.length;\n\n        chrModel = ideo.chromosomes[ideo.config.taxid][chr];\n\n        startPx = ideo.convertBpToPx(chrModel, annot.start);\n        stopPx = ideo.convertBpToPx(chrModel, annot.stop);\n\n        px = Math.round((startPx + stopPx) / 2) - 28;\n\n        color = ideo.config.annotationsColor;\n        if (ideo.config.annotationTracks) {\n          annot.trackIndex = ra[3];\n          color = ideo.config.annotationTracks[annot.trackIndex].color;\n        } else {\n          annot.trackIndex = 0;\n        }\n\n        if ('color' in annot) {\n          color = annot.color;\n        }\n\n        annot.chr = chr;\n        annot.chrIndex = i;\n        annot.px = px;\n        annot.startPx = startPx - 30;\n        annot.stopPx = stopPx - 30;\n        annot.color = color;\n\n        annots[i].annots.push(annot);\n      }\n    }\n\n    return annots;\n  }\n\n  /*\n  * Can be used for bar chart or sparkline\n  */\n  getHistogramBars(annots) {\n    var t0 = new Date().getTime();\n\n    var i, j, chr,\n      chrModel, chrModels, chrPxStop, px, bp,\n      chrAnnots, chrName, chrIndex, annot,\n      bars, bar, barPx, nextBarPx, barWidth,\n      maxAnnotsPerBar, color, lastBand,\n      numBins, barAnnots, barCount, height,\n      firstGet = false,\n      histogramScaling,\n      ideo = this;\n\n    bars = [];\n\n    barWidth = ideo.config.barWidth;\n    chrModels = ideo.chromosomes[ideo.config.taxid];\n    color = ideo.config.annotationsColor;\n\n    if ('histogramScaling' in ideo.config) {\n      histogramScaling = ideo.config.histogramScaling;\n    } else {\n      histogramScaling = 'relative';\n    }\n\n    if (typeof ideo.maxAnnotsPerBar === 'undefined') {\n      ideo.maxAnnotsPerBar = {};\n      firstGet = true;\n    }\n\n    for (chr in chrModels) {\n      chrModel = chrModels[chr];\n      chrIndex = chrModel.chrIndex;\n      lastBand = chrModel.bands[chrModel.bands.length - 1];\n      chrPxStop = lastBand.px.stop;\n      numBins = Math.round(chrPxStop / barWidth);\n      bar = {chr: chr, annots: []};\n      for (i = 0; i < numBins; i++) {\n        px = i * barWidth - ideo.bump;\n        bp = ideo.convertPxToBp(chrModel, px + ideo.bump);\n        bar.annots.push({\n          bp: bp,\n          px: px - ideo.bump,\n          count: 0,\n          chrIndex: chrIndex,\n          chrName: chr,\n          color: color,\n          annots: []\n        });\n      }\n      bars.push(bar);\n    }\n\n    for (chr in annots) {\n      chrAnnots = annots[chr].annots;\n      chrName = annots[chr].chr;\n      chrModel = chrModels[chrName];\n      chrIndex = chrModel.chrIndex - 1;\n      barAnnots = bars[chrIndex].annots;\n      for (i = 0; i < chrAnnots.length; i++) {\n        annot = chrAnnots[i];\n        px = annot.px - ideo.bump;\n        for (j = 0; j < barAnnots.length; j++) {\n          barPx = barAnnots[j].px;\n          nextBarPx = barPx + barWidth;\n          if (j === barAnnots.length - 1) {\n            nextBarPx += barWidth;\n          }\n          if (px >= barPx && px < nextBarPx) {\n            bars[chrIndex].annots[j].count += 1;\n            bars[chrIndex].annots[j].annots.push(annot);\n            break;\n          }\n        }\n      }\n    }\n\n    if (firstGet === true || histogramScaling === 'relative') {\n      maxAnnotsPerBar = 0;\n      for (i = 0; i < bars.length; i++) {\n        annots = bars[i].annots;\n        for (j = 0; j < annots.length; j++) {\n          barCount = annots[j].count;\n          if (barCount > maxAnnotsPerBar) {\n            maxAnnotsPerBar = barCount;\n          }\n        }\n      }\n      ideo.maxAnnotsPerBar[chr] = maxAnnotsPerBar;\n    }\n\n  // Set each bar's height to be proportional to\n  // the height of the bar with the most annotations\n    for (i = 0; i < bars.length; i++) {\n      annots = bars[i].annots;\n      for (j = 0; j < annots.length; j++) {\n        barCount = annots[j].count;\n        height = (barCount / ideo.maxAnnotsPerBar[chr]) * ideo.config.chrMargin;\n      // console.log(height)\n        bars[i].annots[j].height = height;\n      }\n    }\n\n    var t1 = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time spent in getHistogramBars: ' + (t1 - t0) + ' ms');\n    }\n\n    ideo.bars = bars;\n\n    return bars;\n  }\n\n/**\n* Fills out annotations data structure such that its top-level list of arrays\n* matches that of this ideogram's chromosomes list in order and number\n* Fixes https://github.com/eweitz/ideogram/issues/66\n*/\n  fillAnnots(annots) {\n    var filledAnnots, chrs, chrArray, i, chr, annot, chrIndex;\n\n    filledAnnots = [];\n    chrs = [];\n    chrArray = this.chromosomesArray;\n\n    for (i = 0; i < chrArray.length; i++) {\n      chr = chrArray[i].name;\n      chrs.push(chr);\n      filledAnnots.push({chr: chr, annots: []});\n    }\n\n    for (i = 0; i < annots.length; i++) {\n      annot = annots[i];\n      chrIndex = chrs.indexOf(annot.chr);\n      if (chrIndex !== -1) {\n        filledAnnots[chrIndex] = annot;\n      }\n    }\n\n    return filledAnnots;\n  }\n\n/**\n* Draws genome annotations on chromosomes.\n* Annotations can be rendered as either overlaid directly\n* on a chromosome, or along one or more \"tracks\"\n* running parallel to each chromosome.\n*/\n  drawProcessedAnnots(annots) {\n    var chrMargin, chrWidth, layout,\n      annotHeight, triangle, circle, r, chrAnnot,\n      x1, x2, y1, y2,\n      filledAnnots,\n      ideo = this;\n\n    chrMargin = this.config.chrMargin;\n    chrWidth = this.config.chrWidth;\n\n    layout = 'tracks';\n    if (this.config.annotationsLayout) {\n      layout = this.config.annotationsLayout;\n    }\n\n    if (layout === 'histogram') {\n      annots = ideo.getHistogramBars(annots);\n    }\n\n    annotHeight = ideo.config.annotationHeight;\n\n    triangle =\n    'l -' + annotHeight + ' ' +\n    (2 * annotHeight) +\n    ' l ' + (2 * annotHeight) + ' 0 z';\n\n  // From http://stackoverflow.com/a/10477334, with a minor change (\"m -r, r\")\n  // Circles are supported natively via <circle>, but having it as a path\n  // simplifies handling triangles, circles and other shapes in the same\n  // D3 call\n    r = annotHeight;\n    circle =\n    'm -' + r + ', ' + r +\n    'a ' + r + ',' + r + ' 0 1,0 ' + (r * 2) + ',0' +\n    'a ' + r + ',' + r + ' 0 1,0 -' + (r * 2) + ',0';\n\n    filledAnnots = ideo.fillAnnots(annots);\n\n    chrAnnot = d3.selectAll(ideo.selector + ' .chromosome')\n    .data(filledAnnots)\n      .selectAll('path.annot')\n      .data(function(d) {\n        return d.annots;\n      })\n      .enter();\n\n    if (layout === 'tracks') {\n      chrAnnot\n      .append('g')\n      .attr('id', function(d) {\n        return d.id;\n      })\n      .attr('class', 'annot')\n      .attr('transform', function(d) {\n        var y = ideo.config.chrWidth + (d.trackIndex * annotHeight * 2);\n        return 'translate(' + d.px + ',' + y + ')';\n      })\n      .append('path')\n      .attr('d', function(d) {\n        if (!d.shape || d.shape === 'triangle') {\n          return 'm0,0' + triangle;\n        } else if (d.shape === 'circle') {\n          return circle;\n        }\n      })\n      .attr('fill', function(d) {\n        return d.color;\n      });\n    } else if (layout === 'overlay') {\n      // Overlaid annotations appear directly on chromosomes\n\n      chrAnnot.append('polygon')\n        .attr('id', function(d) {\n          return d.id;\n        })\n        .attr('class', 'annot')\n        .attr('points', function(d) {\n          if (d.stopPx - d.startPx > 1) {\n            x1 = d.startPx;\n            x2 = d.stopPx;\n          } else {\n            x1 = d.px - 0.5;\n            x2 = d.px + 0.5;\n          }\n          y1 = chrWidth;\n          y2 = 0;\n\n          return (\n            x1 + ',' + y1 + ' ' +\n            x2 + ',' + y1 + ' ' +\n            x2 + ',' + y2 + ' ' +\n            x1 + ',' + y2\n          );\n        })\n        .attr('fill', function(d) {\n          return d.color;\n        });\n    } else if (layout === 'histogram') {\n      chrAnnot.append('polygon')\n        // .attr('id', function(d, i) { return d.id; })\n        .attr('class', 'annot')\n        .attr('points', function(d) {\n          x1 = d.px + ideo.bump;\n          x2 = d.px + ideo.config.barWidth + ideo.bump;\n          y1 = chrWidth;\n          y2 = chrWidth + d.height;\n\n          var thisChrWidth = ideo.chromosomesArray[d.chrIndex - 1].width;\n\n          if (x2 > thisChrWidth) {\n            x2 = thisChrWidth;\n          }\n\n          return (\n            x1 + ',' + y1 + ' ' +\n            x2 + ',' + y1 + ' ' +\n            x2 + ',' + y2 + ' ' +\n            x1 + ',' + y2\n          );\n        })\n        .attr('fill', function(d) {\n          return d.color;\n        });\n    }\n\n    if (ideo.onDrawAnnotsCallback) {\n      ideo.onDrawAnnotsCallback();\n    }\n  }\n\n  onBrushMove() {\n    call(this.onBrushMoveCallback);\n  }\n\n  createBrush(from, to) {\n    var ideo = this,\n      width = ideo.config.chrWidth + 6.5,\n      length = ideo.config.chrHeight,\n      chr = ideo.chromosomesArray[0],\n      chrLengthBp = chr.bands[chr.bands.length - 1].bp.stop,\n      x0, x1,\n      xOffset = this._layout.getMargin().left,\n      xScale = d3.scaleLinear()\n          .domain([0, d3.max(chr.bands, function(band) {\n            return band.bp.stop;\n          })]).range([xOffset, d3.max(chr.bands, function(band) {\n            return band.px.stop;\n          }) + xOffset]);\n\n    if (typeof from === 'undefined') {\n      from = Math.floor(chrLengthBp / 10);\n    }\n\n    if (typeof right === 'undefined') {\n      to = Math.ceil(from * 2);\n    }\n\n    x0 = ideo.convertBpToPx(chr, from);\n    x1 = ideo.convertBpToPx(chr, to);\n\n    ideo.selectedRegion = {from: from, to: to, extent: (to - from)};\n\n    ideo.brush = d3.brushX()\n    .extent([[xOffset, 0], [length + xOffset, width]])\n    .on('brush', onBrushMove);\n\n    var yTranslate = this._layout.getChromosomeSetYTranslate(0);\n    var yOffset = yTranslate + (ideo.config.chrWidth - width) / 2;\n    d3.select(ideo.selector).append('g')\n    .attr('class', 'brush')\n    .attr('transform', 'translate(0, ' + yOffset + ')')\n    .call(ideo.brush)\n    .call(ideo.brush.move, [x0, x1]);\n\n    function onBrushMove() {\n      var extent = d3.event.selection.map(xScale.invert),\n        from = Math.floor(extent[0]),\n        to = Math.ceil(extent[1]);\n\n      ideo.selectedRegion = {from: from, to: to, extent: (to - from)};\n\n      if (ideo.onBrushMove) {\n        ideo.onBrushMoveCallback();\n      }\n    }\n  }\n\n/**\n* Called when Ideogram has finished initializing.\n* Accounts for certain ideogram properties not being set until\n* asynchronous requests succeed, etc.\n*/\n  onLoad() {\n    call(this.onLoadCallback);\n  }\n\n  onDrawAnnots() {\n    call(this.onDrawAnnotsCallback);\n  }\n\n/*\n* Returns SVG gradients that give chromosomes a polished look\n*/\n  getBandColorGradients() {\n    var colors,\n      stain, color1, color2, color3,\n      css,\n      gradients = '';\n\n    colors = [\n    ['gneg', '#FFF', '#FFF', '#DDD'],\n    ['gpos25', '#C8C8C8', '#DDD', '#BBB'],\n    ['gpos33', '#BBB', '#BBB', '#AAA'],\n    ['gpos50', '#999', '#AAA', '#888'],\n    ['gpos66', '#888', '#888', '#666'],\n    ['gpos75', '#777', '#777', '#444'],\n    ['gpos100', '#444', '#666', '#000'],\n    ['acen', '#FEE', '#FEE', '#FDD'],\n    ['noBands', '#BBB', '#BBB', '#AAA']\n    ];\n\n    for (var i = 0; i < colors.length; i++) {\n      stain = colors[i][0];\n      color1 = colors[i][1];\n      color2 = colors[i][2];\n      color3 = colors[i][3];\n      gradients +=\n      '<linearGradient id=\"' + stain + '\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">';\n      if (stain === \"gneg\") {\n        gradients +=\n        '<stop offset=\"70%\" stop-color=\"' + color2 + '\" />' +\n        '<stop offset=\"95%\" stop-color=\"' + color3 + '\" />' +\n        '<stop offset=\"100%\" stop-color=\"' + color1 + '\" />';\n      } else {\n        gradients +=\n        '<stop offset=\"5%\" stop-color=\"' + color1 + '\" />' +\n        '<stop offset=\"15%\" stop-color=\"' + color2 + '\" />' +\n        '<stop offset=\"60%\" stop-color=\"' + color3 + '\" />';\n      }\n      gradients +=\n      '</linearGradient>';\n    }\n\n    gradients +=\n    '<pattern id=\"stalk\" width=\"2\" height=\"1\" patternUnits=\"userSpaceOnUse\" ' +\n      'patternTransform=\"rotate(30 0 0)\">' +\n      '<rect x=\"0\" y=\"0\" width=\"10\" height=\"2\" fill=\"#CCE\" /> ' +\n       '<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\" style=\"stroke:#88B; ' +\n        'stroke-width:0.7;\" />' +\n    '</pattern>' +\n    '<pattern id=\"gvar\" width=\"2\" height=\"1\" patternUnits=\"userSpaceOnUse\" ' +\n      'patternTransform=\"rotate(-30 0 0)\">' +\n      '<rect x=\"0\" y=\"0\" width=\"10\" height=\"2\" fill=\"#DDF\" /> ' +\n       '<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\" style=\"stroke:#99C; ' +\n          'stroke-width:0.7;\" />' +\n    '</pattern>';\n\n    gradients = \"<defs>\" + gradients + \"</defs>\";\n    css = \"<style>\" +\n    '.gneg {fill: url(\"#gneg\")} ' +\n    '.gpos25 {fill: url(\"#gpos25\")} ' +\n    '.gpos33 {fill: url(\"#gpos33\")} ' +\n    '.gpos50 {fill: url(\"#gpos50\")} ' +\n    '.gpos66 {fill: url(\"#gpos66\")} ' +\n    '.gpos75 {fill: url(\"#gpos75\")} ' +\n    '.gpos100 {fill: url(\"#gpos100\")} ' +\n    '.gpos {fill: url(\"#gpos100\")} ' +\n    '.acen {fill: url(\"#acen\")} ' +\n    '.stalk {fill: url(\"#stalk\")} ' +\n    '.gvar {fill: url(\"#gvar\")} ' +\n    '.noBands {fill: url(\"#noBands\")} ' +\n    '.chromosome {fill: url(\"#noBands\")} ' +\n  '</style>';\n    gradients = css + gradients;\n\n  // alert(gradients)\n\n    return gradients;\n  }\n\n/*\n*  Returns an NCBI taxonomy identifier (taxid) for the configured organism\n*/\n  getTaxidFromEutils(callback) {\n    var organism, taxonomySearch, taxid,\n      ideo = this;\n\n    organism = ideo.config.organism;\n\n    taxonomySearch = ideo.esearch + '&db=taxonomy&term=' + organism;\n\n    d3.json(taxonomySearch, function(data) {\n      taxid = data.esearchresult.idlist[0];\n      return callback(taxid);\n    });\n  }\n\n/**\n* Returns an array of taxids for the current ideogram\n* Also sets configuration parameters related to taxid(s), whether ideogram is\n* multiorganism, and adjusts chromosomes parameters as needed\n**/\n  getTaxids(callback) {\n    var ideo = this,\n      taxid, taxids,\n      org, orgs, i,\n      taxidInit, tmpChrs,\n      assembly, chromosomes,\n      multiorganism, promise;\n\n    taxidInit = 'taxid' in ideo.config;\n\n    ideo.config.multiorganism = (\n    ('organism' in ideo.config && ideo.config.organism instanceof Array) ||\n    (taxidInit && ideo.config.taxid instanceof Array)\n  );\n\n    multiorganism = ideo.config.multiorganism;\n\n    if ('organism' in ideo.config) {\n    // Ideogram instance was constructed using common organism name(s)\n      if (multiorganism) {\n        orgs = ideo.config.organism;\n      } else {\n        orgs = [ideo.config.organism];\n      }\n\n      taxids = [];\n      tmpChrs = {};\n      for (i = 0; i < orgs.length; i++) {\n      // Gets a list of taxids from common organism names\n        org = orgs[i];\n        for (taxid in ideo.organisms) {\n          if (ideo.organisms[taxid].commonName.toLowerCase() === org) {\n            taxids.push(taxid);\n            if (multiorganism) {\n            // Adjusts 'chromosomes' configuration parameter to make object\n            // keys use taxid instead of common organism name\n              tmpChrs[taxid] = ideo.config.chromosomes[org];\n            }\n          }\n        }\n      }\n\n      if (taxids.length === 0) {\n        promise = new Promise(function(resolve) {\n          ideo.getTaxidFromEutils(resolve);\n        });\n\n        promise.then(function(data) {\n          var organism = ideo.config.organism,\n            dataDir = ideo.config.dataDir,\n            urlOrg = organism.replace(' ', '-');\n\n          taxid = data;\n          taxids.push(taxid);\n\n          ideo.config.taxids = taxids;\n          ideo.organisms[taxid] = {\n            commonName: '',\n            scientificName: ideo.config.organism,\n            scientificNameAbbr: ''\n          };\n\n          var fullyBandedTaxids = ['9606', '10090', '10116'];\n          if (\n          fullyBandedTaxids.indexOf(taxid) !== -1 &&\n          ideo.config.showFullyBanded === false\n        ) {\n            urlOrg += '-no-bands';\n          }\n          var chromosomesUrl = dataDir + urlOrg + '.js';\n\n          var promise = new Promise(function(resolve, reject) {\n            d3.request(chromosomesUrl).get(function(error, data) {\n              if (error) {\n                reject(Error(error));\n              }\n              resolve(data);\n            });\n          });\n\n          return promise\n          .then(\n            function(data) {\n              // Check if chromosome data exists locally.\n              // This is used for pre-processed centromere data,\n              // which is not accessible via EUtils.  See get_chromosomes.py.\n\n              var asmAndChrArray = [],\n                chromosomes = [],\n                seenChrs = {},\n                chr;\n\n              eval(data.response);\n\n              asmAndChrArray.push('');\n\n              for (var i = 0; i < chrBands.length; i++) {\n                chr = chrBands[i].split(' ')[0];\n                if (chr in seenChrs) {\n                  continue;\n                } else {\n                  chromosomes.push({name: chr, type: 'nuclear'});\n                  seenChrs[chr] = 1;\n                }\n              }\n              chromosomes = chromosomes.sort(ideo.sortChromosomes);\n              asmAndChrArray.push(chromosomes);\n              ideo.coordinateSystem = 'iscn';\n              return asmAndChrArray;\n            },\n            function() {\n              return new Promise(function(resolve) {\n                ideo.coordinateSystem = 'bp';\n                ideo.getAssemblyAndChromosomesFromEutils(resolve);\n              });\n            }\n          );\n        })\n      .then(function(asmChrArray) {\n        assembly = asmChrArray[0];\n        chromosomes = asmChrArray[1];\n\n        ideo.config.chromosomes = chromosomes;\n        ideo.organisms[taxid].assemblies = {\n          default: assembly\n        };\n\n        callback(taxids);\n      });\n      } else {\n        ideo.config.taxids = taxids;\n        if (multiorganism) {\n          ideo.config.chromosomes = tmpChrs;\n        }\n\n        callback(taxids);\n      }\n    } else {\n      if (multiorganism) {\n        ideo.coordinateSystem = 'bp';\n        if (taxidInit) {\n          taxids = ideo.config.taxid;\n        }\n      } else {\n        if (taxidInit) {\n          taxids = [ideo.config.taxid];\n        }\n        ideo.config.taxids = taxids;\n      }\n\n      callback(taxids);\n    }\n  }\n\n  sortChromosomes(a, b) {\n    var aIsNuclear = a.type === 'nuclear',\n      bIsNuclear = b.type === 'nuclear',\n      aIsCP = a.type === 'chloroplast',\n      bIsCP = b.type === 'chloroplast',\n      aIsMT = a.type === 'mitochondrion',\n      bIsMT = b.type === 'mitochondrion';\n    // aIsPlastid = aIsMT && a.name !== 'MT', // e.g. B1 in rice genome GCF_001433935.1\n    // bIsPlastid = bIsMT && b.name !== 'MT';\n\n    if (aIsNuclear && bIsNuclear) {\n      return naturalSort(a.name, b.name);\n    } else if (!aIsNuclear && bIsNuclear) {\n      return 1;\n    } else if (aIsMT && bIsCP) {\n      return 1;\n    } else if (aIsCP && bIsMT) {\n      return -1;\n    } else if (!aIsMT && !aIsCP && (bIsMT || bIsCP)) {\n      return -1;\n    }\n  }\n\n/*\n*  Returns names and lengths of chromosomes for an organism's best-known\n*  genome assembly.  Gets data from NCBI EUtils web API.\n*/\n  getAssemblyAndChromosomesFromEutils(callback) {\n    var asmAndChrArray, // [assembly_accession, chromosome_objects_array]\n      organism, assemblyAccession, chromosomes, asmSearch,\n      asmUid, asmSummary,\n      rsUid, nuccoreLink,\n      links, ntSummary,\n      results, result, cnIndex, chrName, chrLength, chromosome, type,\n      ideo = this;\n\n    organism = ideo.config.organism;\n\n    asmAndChrArray = [];\n    chromosomes = [];\n\n    asmSearch =\n      ideo.esearch +\n      '&db=assembly' +\n      '&term=%22' + organism + '%22[organism]' +\n        'AND%20(%22latest%20refseq%22[filter])%20' +\n        'AND%20(%22chromosome%20level%22[filter]%20' +\n        'OR%20%22complete%20genome%22[filter])';\n\n    var promise = d3.promise.json(asmSearch);\n\n    promise\n      .then(function(data) {\n        // NCBI Assembly database's internal identifier (uid) for this assembly\n        asmUid = data.esearchresult.idlist[0];\n        asmSummary = ideo.esummary + '&db=assembly&id=' + asmUid;\n\n        return d3.promise.json(asmSummary);\n      })\n      .then(function(data) {\n        // RefSeq UID for this assembly\n        rsUid = data.result[asmUid].rsuid;\n        assemblyAccession = data.result[asmUid].assemblyaccession;\n\n        asmAndChrArray.push(assemblyAccession);\n\n        // Get a list of IDs for the chromosomes in this genome.\n        //\n        // This information does not seem to be available from well-known\n        // NCBI databases like Assembly or Nucleotide, so we use GenColl,\n        // a lesser-known NCBI database.\n        var qs = '&db=nuccore&linkname=gencoll_nuccore_chr&from_uid=' + rsUid;\n        nuccoreLink = ideo.elink + qs;\n\n        return d3.promise.json(nuccoreLink);\n      })\n      .then(function(data) {\n        links = data.linksets[0].linksetdbs[0].links.join(',');\n        ntSummary = ideo.esummary + '&db=nucleotide&id=' + links;\n\n        return d3.promise.json(ntSummary);\n      })\n      .then(function(data) {\n        results = data.result;\n\n        for (var x in results) {\n          result = results[x];\n\n          // omit list of reult uids\n          if (x === 'uids') {\n            continue;\n          }\n\n          if (result.genome === 'mitochondrion') {\n            if (ideo.config.showNonNuclearChromosomes) {\n              type = result.genome;\n              cnIndex = result.subtype.split('|').indexOf('plasmid');\n              if (cnIndex === -1) {\n                chrName = 'MT';\n              } else {\n                // Seen in e.g. rice genome IRGSP-1.0 (GCF_001433935.1),\n                // From https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?retmode=json&db=nucleotide&id=996703432,996703431,996703430,996703429,996703428,996703427,996703426,996703425,996703424,996703423,996703422,996703421,194033210,11466763,7524755\n                // genome: 'mitochondrion',\n                // subtype: 'cell_line|plasmid',\n                // subname: 'A-58 CMS|B1',\n                chrName = result.subname.split('|')[cnIndex];\n              }\n            } else {\n              continue;\n            }\n          } else if (\n            result.genome === 'chloroplast' ||\n            result.genome === 'plastid'\n          ) {\n            type = 'chloroplast';\n            // Plastid encountered with rice genome IRGSP-1.0 (GCF_001433935.1)\n            if (ideo.config.showNonNuclearChromosomes) {\n              chrName = 'CP';\n            } else {\n              continue;\n            }\n          } else {\n            type = 'nuclear';\n            cnIndex = result.subtype.split('|').indexOf('chromosome');\n\n            chrName = result.subname.split('|')[cnIndex];\n\n            if (\n              typeof chrName !== 'undefined' &&\n              chrName.substr(0, 3) === 'chr'\n            ) {\n              // Convert \"chr12\" to \"12\", e.g. for banana (GCF_000313855.2)\n              chrName = chrName.substr(3);\n            }\n          }\n\n          chrLength = result.slen;\n\n          chromosome = {\n            name: chrName,\n            length: chrLength,\n            type: type\n          };\n\n          chromosomes.push(chromosome);\n        }\n\n        chromosomes = chromosomes.sort(ideo.sortChromosomes);\n        asmAndChrArray.push(chromosomes);\n\n        ideo.coordinateSystem = 'bp';\n\n        return callback(asmAndChrArray);\n      });\n  }\n\n  drawSexChromosomes(bandsArray, taxid, container, defs, j, chrs) {\n    var chromosome, bands, chrModel, shape, sci, k,\n      sexChromosomeIndexes,\n      ideo = this;\n\n    if (ideo.config.sex === 'male') {\n      sexChromosomeIndexes = [1, 0];\n    } else {\n      sexChromosomeIndexes = [0, 0];\n    }\n\n    for (k = 0; k < sexChromosomeIndexes.length; k++) {\n      sci = sexChromosomeIndexes[k] + j;\n      chromosome = chrs[sci];\n      bands = bandsArray[sci];\n      chrModel = ideo.getChromosomeModel(bands, chromosome, taxid, sci);\n      shape = ideo.drawChromosome(chrModel, j, container, k);\n      defs.append('clipPath')\n        .attr('id', chrModel.id + '-chromosome-set-clippath')\n        .selectAll('path')\n        .data(shape)\n        .enter()\n        .append('path')\n        .attr('d', function(d) {\n          return d.path;\n        }).attr('class', function(d) {\n          return d.class;\n        });\n    }\n  }\n\n  /*\n  * Configures chromosome data and calls downstream chromosome drawing functions\n  */\n  initDrawChromosomes(bandsArray) {\n    var ideo = this,\n      taxids = ideo.config.taxids,\n      ploidy = ideo.config.ploidy,\n      taxid,\n      chrIndex = 0,\n      chrSetNumber = 0,\n      bands,\n      i, j, chrs, chromosome, chrModel,\n      defs, transform;\n\n    defs = d3.select(ideo.selector + ' defs');\n\n    for (i = 0; i < taxids.length; i++) {\n      taxid = taxids[i];\n      chrs = ideo.config.chromosomes[taxid];\n\n      ideo.chromosomes[taxid] = {};\n\n      ideo.setSexChromosomes(chrs);\n\n      for (j = 0; j < chrs.length; j++) {\n        chromosome = chrs[j];\n        bands = bandsArray[chrIndex];\n        chrIndex += 1;\n\n        chrModel = ideo.getChromosomeModel(bands, chromosome, taxid, chrIndex);\n\n        ideo.chromosomes[taxid][chromosome] = chrModel;\n        ideo.chromosomesArray.push(chrModel);\n\n        if (\n          'sex' in ideo.config &&\n          (\n            ploidy === 2 && ideo.sexChromosomes.index + 2 === chrIndex ||\n            ideo.config.sex === 'female' && chrModel.name === 'Y'\n          )\n        ) {\n          continue;\n        }\n\n        transform = ideo._layout.getChromosomeSetTranslate(chrSetNumber);\n        chrSetNumber += 1;\n\n        // Append chromosome set container\n        var container = d3.select(ideo.selector)\n          .append('g')\n          .attr('class', 'chromosome-set-container')\n          .attr('data-set-number', j)\n          .attr('transform', transform)\n          .attr('id', chrModel.id + '-chromosome-set');\n\n        if (\n          'sex' in ideo.config &&\n          ploidy === 2 &&\n          ideo.sexChromosomes.index + 1 === chrIndex\n        ) {\n          ideo.drawSexChromosomes(bandsArray, taxid, container, defs, j, chrs);\n          continue;\n        }\n\n        var shape;\n        var numChrsInSet = 1;\n        if (ploidy > 1) {\n          numChrsInSet = this._ploidy.getChromosomesNumber(j);\n        }\n        for (var k = 0; k < numChrsInSet; k++) {\n          shape = ideo.drawChromosome(chrModel, chrIndex - 1, container, k);\n        }\n\n        defs.append('clipPath')\n          .attr('id', chrModel.id + '-chromosome-set-clippath')\n          .selectAll('path')\n          .data(shape)\n          .enter()\n          .append('path')\n          .attr('d', function(d) {\n            return d.path;\n          }).attr('class', function(d) {\n            return d.class;\n          });\n      }\n\n      if (ideo.config.showBandLabels === true) {\n        ideo.drawBandLabels(ideo.chromosomes);\n      }\n    }\n  }\n\n  // Get ideogram SVG container\n  getSvg() {\n    return d3.select(this.selector).node();\n  }\n\n  /*\n  * Sets instance properties regarding sex chromosomes.\n  * Currently only supported for mammals.\n  * TODO: Support all sexually reproducing taxa\n  *   XY sex-determination (mammals):\n  *     - Male: XY <- heterogametic\n  *     - Female: XX\n  *   ZW sex-determination (birds):\n  *     - Male: ZZ\n  *     - Female: ZW <- heterogametic\n  *   X0 sex-determination (some insects):\n  *     - Male: X0, i.e. only X <- heterogametic?\n  *     - Female: XX\n  * TODO: Support sex chromosome aneuploidies in mammals\n  *     - Turner syndrome: X0\n  *     - Klinefelter syndome: XXY\n  *  More types:\n  *  https:*en.wikipedia.org/wiki/Category:Sex_chromosome_aneuploidies\n  */\n  setSexChromosomes(chrs) {\n    if (this.config.ploidy !== 2 || !this.config.sex) {\n      return;\n    }\n\n    var ideo = this,\n      sexChrs = {X: 1, Y: 1},\n      chr, i;\n\n    ideo.sexChromosomes.list = [];\n\n    for (i = 0; i < chrs.length; i++) {\n      chr = chrs[i];\n\n      if (ideo.config.sex === 'male' && chr in sexChrs) {\n        ideo.sexChromosomes.list.push(chr);\n        if (!ideo.sexChromosomes.index) {\n          ideo.sexChromosomes.index = i;\n        }\n      } else if (chr === 'X') {\n        ideo.sexChromosomes.list.push(chr, chr);\n        ideo.sexChromosomes.index = i;\n      }\n    }\n  }\n\n  /*\n  * Completes default ideogram initialization\n  * by calling downstream functions to\n  * process raw band data into full JSON objects,\n  * render chromosome and cytoband figures and labels,\n  * apply initial graphical transformations,\n  * hide overlapping band labels, and\n  * execute callbacks defined by client code\n  */\n  processBandData() {\n    var bandsArray, maxLength, i, j, k, chromosome, bands,\n      chrLength, chr,\n      bandData, bandsByChr,\n      taxid, taxids, chrs, chrsByTaxid,\n      ideo = this;\n\n    bandsArray = [];\n    maxLength = 0;\n\n    if (ideo.config.multiorganism === true) {\n      ideo.coordinateSystem = 'bp';\n      taxids = ideo.config.taxids;\n      for (i = 0; i < taxids.length; i++) {\n        taxid = taxids[i];\n      }\n    } else {\n      if (typeof ideo.config.taxid === 'undefined') {\n        ideo.config.taxid = ideo.config.taxids[0];\n      }\n      taxid = ideo.config.taxid;\n      taxids = [taxid];\n      ideo.config.taxids = taxids;\n    }\n\n    if ('chromosomes' in ideo.config) {\n      chrs = ideo.config.chromosomes;\n    }\n    if (ideo.config.multiorganism) {\n      chrsByTaxid = chrs;\n    }\n\n    ideo.config.chromosomes = {};\n\n    var t0B = new Date().getTime();\n\n    for (j = 0; j < taxids.length; j++) {\n      taxid = taxids[j];\n\n      if (ideo.config.multiorganism) {\n        chrs = chrsByTaxid[taxid];\n      }\n\n      if (ideo.coordinateSystem === 'iscn' || ideo.config.multiorganism) {\n        bandData = ideo.bandData[taxid];\n\n        bandsByChr = ideo.getBands(bandData, taxid, chrs);\n\n        chrs = Object.keys(bandsByChr).sort(function(a, b) {\n          return naturalSort(a, b);\n        });\n\n        ideo.config.chromosomes[taxid] = chrs.slice();\n        ideo.numChromosomes += ideo.config.chromosomes[taxid].length;\n\n        for (k = 0; k < chrs.length; k++) {\n          chromosome = chrs[k];\n          bands = bandsByChr[chromosome];\n          bandsArray.push(bands);\n\n          chrLength = {\n            iscn: bands[bands.length - 1].iscn.stop,\n            bp: bands[bands.length - 1].bp.stop\n          };\n\n          if (chrLength.iscn > ideo.maxLength.iscn) {\n            ideo.maxLength.iscn = chrLength.iscn;\n          }\n\n          if (chrLength.bp > ideo.maxLength.bp) {\n            ideo.maxLength.bp = chrLength.bp;\n          }\n        }\n      } else if (ideo.coordinateSystem === 'bp') {\n        // If lacking band-level data\n\n        ideo.config.chromosomes[taxid] = chrs.slice();\n        ideo.numChromosomes += ideo.config.chromosomes[taxid].length;\n\n        for (k = 0; k < chrs.length; k++) {\n          chr = chrs[k];\n          if (chr.length > ideo.maxLength.bp) {\n            ideo.maxLength.bp = chr.length;\n          }\n        }\n      }\n    }\n\n    var t1B = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time in processBandData: ' + (t1B - t0B) + ' ms');\n    }\n\n    return bandsArray;\n  }\n\n  /**\n  * Initializes an ideogram.\n  * Sets some high-level properties based on instance configuration,\n  * fetches band and annotation data if needed, and\n  * writes an SVG element to the document to contain the ideogram\n  */\n  init() {\n    var taxid, i, svgClass;\n\n    var ideo = this;\n\n    var t0 = new Date().getTime();\n\n    var bandsArray = [],\n      numBandDataResponses = 0,\n      resolution = this.config.resolution,\n      accession;\n\n    var promise = new Promise(function(resolve) {\n      ideo.getTaxids(resolve);\n    });\n\n    promise.then(function(taxids) {\n      taxid = taxids[0];\n      ideo.config.taxid = taxid;\n      ideo.config.taxids = taxids;\n\n      var assemblies,\n        bandFileName;\n\n      var bandDataFileNames = {\n        9606: '',\n        10090: ''\n      };\n\n      for (i = 0; i < taxids.length; i++) {\n        taxid = String(taxids[i]);\n\n        if (!ideo.config.assembly) {\n          ideo.config.assembly = 'default';\n        }\n        assemblies = ideo.organisms[taxid].assemblies;\n        accession = assemblies[ideo.config.assembly];\n\n        bandFileName = [];\n        bandFileName.push(slugify(ideo.organisms[taxid].scientificName));\n        if (accession !== assemblies.default) {\n          bandFileName.push(accession);\n        }\n        if (\n          taxid === '9606' &&\n          (accession !== assemblies.default || resolution !== 850)\n        ) {\n          bandFileName.push(resolution);\n        }\n        bandFileName = bandFileName.join('-') + '.js';\n\n        if (taxid === '9606' || taxid === '10090') {\n          bandDataFileNames[taxid] = bandFileName;\n        }\n\n        if (typeof chrBands === 'undefined' && taxid in bandDataFileNames) {\n          d3.request(ideo.config.dataDir + bandDataFileNames[taxid])\n            .on('beforesend', function(data) {\n              // Ensures correct taxid is processed in response callback; using\n              // simply 'taxid' variable gives the last *requested* taxid, which\n              // fails when dealing with multiple taxa.\n              data.taxid = taxid;\n            })\n            .get(function(error, data) {\n              eval(data.response);\n\n              ideo.bandData[data.taxid] = chrBands;\n              numBandDataResponses += 1;\n\n              if (numBandDataResponses === taxids.length) {\n                bandsArray = ideo.processBandData();\n                writeContainer();\n              }\n            });\n        } else {\n          if (typeof chrBands !== 'undefined') {\n          // If bands already available,\n          // e.g. via <script> tag in initial page load\n            ideo.bandData[taxid] = chrBands;\n          }\n          bandsArray = ideo.processBandData();\n          writeContainer();\n        }\n      }\n    });\n\n    function writeContainer() {\n      if (ideo.config.annotationsPath) {\n        d3.json(\n        ideo.config.annotationsPath, // URL\n        function(data) { // Callback\n          ideo.rawAnnots = data;\n        }\n      );\n      }\n\n      // If ploidy description is a string, then convert it to the canonical\n      // array format.  String ploidyDesc is used when depicting e.g. parental\n      // origin each member of chromosome pair in a human genome.\n      // See ploidy_basic.html for usage example.\n      if (\n        'ploidyDesc' in ideo.config &&\n        typeof ideo.config.ploidyDesc === 'string'\n      ) {\n        var tmp = [];\n        for (var i = 0; i < ideo.numChromosomes; i++) {\n          tmp.push(ideo.config.ploidyDesc);\n        }\n        ideo.config.ploidyDesc = tmp;\n      }\n      // Organism ploidy description\n      ideo._ploidy = new Ploidy(ideo.config);\n\n      // Chromosome's layout\n      ideo._layout = Layout.getInstance(ideo.config, ideo);\n\n      svgClass = '';\n      if (ideo.config.showChromosomeLabels) {\n        if (ideo.config.orientation === 'horizontal') {\n          svgClass += 'labeledLeft ';\n        } else {\n          svgClass += 'labeled ';\n        }\n      }\n\n      if (\n      ideo.config.annotationsLayout &&\n      ideo.config.annotationsLayout === 'overlay'\n    ) {\n        svgClass += 'faint';\n      }\n\n      var gradients = ideo.getBandColorGradients();\n      var svgWidth = ideo._layout.getWidth(taxid);\n      var svgHeight = ideo._layout.getHeight(taxid);\n\n      d3.select(ideo.config.container)\n        .append('div')\n          .append('svg')\n            .attr('id', '_ideogram')\n            .attr('class', svgClass)\n            .attr('width', svgWidth)\n            .attr('height', svgHeight)\n            .html(gradients);\n\n      finishInit();\n    }\n\n    function finishInit() {\n      try {\n        var t0A = new Date().getTime();\n\n        var i;\n\n        ideo.initDrawChromosomes(bandsArray);\n\n        // Waits for potentially large annotation dataset\n        // to be received by the client, then triggers annotation processing\n        if (ideo.config.annotationsPath) {\n          function pa() {\n            if (typeof ideo.timeout !== 'undefined') {\n              window.clearTimeout(ideo.timeout);\n            }\n\n            ideo.annots = ideo.processAnnotData(ideo.rawAnnots);\n            ideo.drawProcessedAnnots(ideo.annots);\n\n            if (typeof crossfilter !== 'undefined' && ideo.initCrossFilter) {\n              ideo.initCrossFilter();\n            }\n          }\n\n          if (ideo.rawAnnots) {\n            pa();\n          } else {\n            (function checkAnnotData() {\n              ideo.timeout = setTimeout(function() {\n                if (!ideo.rawAnnots) {\n                  checkAnnotData();\n                } else {\n                  pa();\n                }\n              },\n            50\n          );\n            })();\n          }\n        }\n\n        if (ideo.config.showBandLabels === true) {\n          var bandsToShow = ideo.bandsToShow.join(',');\n\n          // d3.selectAll resolves to querySelectorAll (QSA).\n          // QSA takes a surprisingly long time to complete,\n          // and scales with the number of selectors.\n          // Most bands are hidden, so we can optimize by\n          // Hiding all bands, then QSA'ing and displaying the\n          // relatively few bands that are shown.\n          var t0C = new Date().getTime();\n          d3.selectAll(ideo.selector + ' .bandLabel, .bandLabelStalk')\n          .style('display', 'none');\n          d3.selectAll(bandsToShow).style('display', '');\n          var t1C = new Date().getTime();\n          if (ideo.debug) {\n            console.log('Time in showing bands: ' + (t1C - t0C) + ' ms');\n          }\n\n          if (ideo.config.orientation === 'vertical') {\n            var chrID;\n            for (i = 0; i < ideo.chromosomesArray.length; i++) {\n              chrID = '#' + ideo.chromosomesArray[i].id;\n              ideo.rotateChromosomeLabels(d3.select(chrID), i);\n            }\n          }\n        }\n\n        if (ideo.config.showChromosomeLabels === true) {\n          ideo.drawChromosomeLabels(ideo.chromosomes);\n        }\n\n        if (ideo.config.brush === true) {\n          ideo.createBrush();\n        }\n\n        if (ideo.config.annotations) {\n          ideo.drawAnnots(ideo.config.annotations);\n        }\n\n        var t1A = new Date().getTime();\n        if (ideo.debug) {\n          console.log('Time in drawChromosome: ' + (t1A - t0A) + ' ms');\n        }\n\n        var t1 = new Date().getTime();\n        if (ideo.debug) {\n          console.log('Time constructing ideogram: ' + (t1 - t0) + ' ms');\n        }\n\n        if (ideo.onLoadCallback) {\n          ideo.onLoadCallback();\n        }\n\n        if (!('rotatable' in ideo.config && ideo.config.rotatable === false)) {\n          d3.selectAll(ideo.selector + ' .chromosome').on('click', function() {\n            ideo.rotateAndToggleDisplay(this);\n          });\n        } else {\n          d3.selectAll(ideo.selector + ' .chromosome')\n            .style('cursor', 'default');\n        }\n      } catch (e) {\n        // console.log(e);\n        throw e;\n      }\n    }\n  }\n\n}\n","\nimport {Ideogram} from './core'\n\n// https://github.com/overset/javascript-natural-sort\nfunction naturalSort(a,b){var q,r,c=/(^([+\\-]?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?(?=\\D|\\s|$))|^0x[\\da-fA-F]+$|\\d+)/g,d=/^\\s+|\\s+$/g,e=/\\s+/g,f=/(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,g=/^0x[0-9a-f]+$/i,h=/^0/,i=function(a){return(naturalSort.insensitive&&(\"\"+a).toLowerCase()||\"\"+a).replace(d,\"\")},j=i(a),k=i(b),l=j.replace(c,\"\\0$1\\0\").replace(/\\0$/,\"\").replace(/^\\0/,\"\").split(\"\\0\"),m=k.replace(c,\"\\0$1\\0\").replace(/\\0$/,\"\").replace(/^\\0/,\"\").split(\"\\0\"),n=parseInt(j.match(g),16)||1!==l.length&&Date.parse(j),o=parseInt(k.match(g),16)||n&&k.match(f)&&Date.parse(k)||null,p=function(a,b){return(!a.match(h)||1==b)&&parseFloat(a)||a.replace(e,\" \").replace(d,\"\")||0};if(o){if(n<o)return-1;if(n>o)return 1}for(var s=0,t=l.length,u=m.length,v=Math.max(t,u);s<v;s++){if(q=p(l[s]||\"\",t),r=p(m[s]||\"\",u),isNaN(q)!==isNaN(r))return isNaN(q)?1:-1;if(/[^\\x00-\\x80]/.test(q+r)&&q.localeCompare){var w=q.localeCompare(r);return w/Math.abs(w)}if(q<r)return-1;if(q>r)return 1}}\n\n// e.g. \"Homo sapiens\" -> \"homo-sapiens\"\nfunction slugify(value){return value.toLowerCase().replace(' ', '-')};\n\nwindow.naturalSort = naturalSort;\nwindow.slugify = slugify;\n\nwindow.Ideogram = Ideogram;\n","\n// import {VerticalLayout} from './vertical-layout';\n// import {HorizontalLayout} from './horizontal-layout';\n// import {PairedLayout} from './paired-layout';\n// import {SmallLayout} from './small-layout';\n\nimport * as d3 from 'd3';\n\nimport {ChromosomeUtil} from './../views/chromosome-util';\n\nexport class Layout {\n\n  constructor(config, ideo) {\n    this._config = config;\n    this._ideo = ideo;\n    this._ploidy = this._ideo._ploidy;\n    this._translate = undefined;\n\n    if ('chrSetMargin' in config) {\n      this.chrSetMargin = config.chrSetMargin;\n    } else {\n      var k = this._config.chrMargin;\n      this.chrSetMargin = (this._config.ploidy > 1 ? k : 0);\n    }\n\n    // Chromosome band's size.\n    this._tickSize = 8;\n\n    // Chromosome rotation state.\n    this._isRotated = false;\n  }\n\n  // Factory method\n  static getInstance(config, ideo) {\n    if ('perspective' in config && config.perspective === 'comparative') {\n      return new PairedLayout(config, ideo);\n    } else if ('rows' in config && config.rows > 1) {\n      return new SmallLayout(config, ideo);\n    } else if (config.orientation === 'vertical') {\n      return new VerticalLayout(config, ideo);\n    } else if (config.orientation === 'horizontal') {\n      return new HorizontalLayout(config, ideo);\n    } else {\n      return new VerticalLayout(config, ideo);\n    }\n  }\n\n  // Get chart left margin\n  _getLeftMargin() {\n    return this._margin.left;\n  }\n\n  // Get rotated chromosome y scale\n  _getYScale() {\n      // 20 is width of rotated chromosome.\n    return 20 / this._config.chrWidth;\n  }\n\n  // Get chromosome labels\n  getChromosomeLabels(chrElement) {\n    var util = new ChromosomeUtil(chrElement);\n\n    return [util.getSetLabel(), util.getLabel()].filter(function(d) {\n      return d.length > 0;\n    });\n  }\n\n  // Rotate chromosome to original position\n  rotateBack() {\n    throw new Error(this._class + '#rotateBack not implemented');\n  }\n\n  // Rotate chromosome to opposite position\n  rotateForward() {\n    throw new Error(this._class + '#rotateForward not implemented');\n  }\n\n  rotate(chrSetNumber, chrNumber, chrElement) {\n    var ideo = this._ideo;\n\n      // Find chromosomes which should be hidden\n    var otherChrs = d3.selectAll(ideo.selector + ' g.chromosome')\n      .filter(function() {\n        return this !== chrElement;\n      });\n\n    if (this._isRotated) {\n          // Reset _isRotated flag\n      this._isRotated = false;\n          // Rotate chromosome back\n      this.rotateBack(chrSetNumber, chrNumber, chrElement, function() {\n              // Show all other chromosomes and chromosome labels\n        otherChrs.style('display', null);\n        d3.selectAll(ideo.selector + ' .chrSetLabel, .chrLabel')\n          .style('display', null);\n      });\n    } else {\n          // Set _isRotated flag\n      this._isRotated = true;\n\n          // Hide all other chromosomes and chromosome labels\n      otherChrs.style('display', 'none');\n      d3.selectAll(ideo.selector + ' .chrSetLabel, .chrLabel')\n        .style('display', 'none');\n\n          // Rotate chromosome\n      this.rotateForward(chrSetNumber, chrNumber, chrElement);\n    }\n  }\n\n  getChromosomeLabelClass() {\n    if (this._config.ploidy === 1) {\n      return 'chrLabel';\n    } else {\n      return 'chrSetLabel';\n    }\n  }\n\n  _getAdditionalOffset() {\n    return (\n      (this._config.annotationHeight || 0) * (this._config.numAnnotTracks || 1)\n    );\n  }\n\n  _getChromosomeSetSize(chrSetNumber) {\n    // Get last chromosome set size.\n    var setSize = this._ploidy.getSetSize(chrSetNumber);\n\n    // Increase offset by last chromosome set size\n    return (\n      setSize * this._config.chrWidth * 2 + (this.chrSetMargin)\n    );\n  }\n\n  // Get layout margin\n  getMargin() {\n    return this._margin;\n  }\n\n  // Get SVG element height\n  getHeight() {\n    throw new Error(this._class + '#getHeight not implemented');\n  }\n\n  getChromosomeBandTickY1() {\n    throw new Error(this._class + '#getChromosomeBandTickY1 not implemented');\n  }\n\n  getChromosomeBandTickY2() {\n    throw new Error(this._class + '#getChromosomeBandTickY2 not implemented');\n  }\n\n  // Get chromosome's band translate attribute\n  getChromosomeBandLabelTranslate() {\n    throw new Error(\n      this._class + '#getChromosomeBandLabelTranslate not implemented'\n    );\n  }\n\n  // Get chromosome set label anchor property\n  getChromosomeSetLabelAnchor() {\n    return 'middle';\n  }\n\n  // Get chromosome's band label text-anchor value\n  getChromosomeBandLabelAnchor() {\n    throw (\n      new Error(this._class + '#getChromosomeBandLabelAnchor not implemented')\n    );\n  }\n\n  getChromosomeLabelXPosition() {\n    throw new Error(\n      this._class + '#getChromosomeLabelXPosition not implemented'\n    );\n  }\n\n  // Get chromosome label y position.\n  getChromosomeLabelYPosition() {\n    return -5.5;\n  }\n\n  // \"i\" is chromosome number\n  getChromosomeSetLabelYPosition(i) {\n    if (this._config.ploidy === 1) {\n      return this.getChromosomeLabelYPosition(i);\n    } else {\n      return -2 * this._config.chrWidth;\n    }\n  }\n\n  getChromosomeSetLabelXPosition() {\n    throw (\n      new Error(\n        this._class + '#getChromosomeSetLabelXPosition not implemented'\n      )\n    );\n  }\n\n  getChromosomeSetLabelTranslate() {\n    throw (\n      new Error(this._class + '#getChromosomeSetLabelTranslate not implemented')\n    );\n  }\n\n  // Get chromosome set translate attribute\n  getChromosomeSetTranslate() {\n    throw new Error(this._class + '#getChromosomeSetTranslate not implemented');\n  }\n\n  // Get chromosome set translate's y offset\n  getChromosomeSetYTranslate() {\n    throw new Error(\n      this._class + '#getChromosomeSetYTranslate not implemented'\n    );\n  }\n}\n\n\n\nexport class HorizontalLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n    this._class = 'HorizontalLayout';\n    this._margin = {\n      left: 20,\n      top: 30\n    };\n  }\n\n  _getLeftMargin() {\n    var margin = Layout.prototype._getLeftMargin.call(this);\n    if (this._config.ploidy > 1) {\n      margin *= 1.8;\n    }\n\n    return margin;\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var xOffset = 30;\n\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.height / (chrBox.width + xOffset / 2)) * 0.9;\n    var scaleY = this._getYScale();\n\n    var yOffset = (chrNumber + 1) * ((this._config.chrWidth * 2) * scaleY);\n\n    var transform = (\n      'rotate(90) ' +\n      'translate(' + xOffset + ', -' + yOffset + ') ' +\n      'scale(' + scaleX + ', ' + scaleY + ')'\n    );\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", transform)\n      .on('end', callback);\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(labels)\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 30)\n      .attr('y', function(d, i) {\n        return (i + 1 + labels.length % 2) * 12;\n      })\n      .style('text-anchor', 'middle')\n      .style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber,\n             chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", translate)\n      .on('end', callback);\n\n    d3.selectAll(this._ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight(taxId) {\n    // Get last chromosome set offset.\n    var numChromosomes = this._config.chromosomes[taxId].length;\n    var lastSetOffset = this.getChromosomeSetYTranslate(numChromosomes - 1);\n\n    // Get last chromosome set size.\n    var lastSetSize = this._getChromosomeSetSize(numChromosomes - 1);\n\n    // Increase offset by last chromosome set size\n    lastSetOffset += lastSetSize;\n\n    return lastSetOffset + this._getAdditionalOffset() * 2;\n  }\n\n  getWidth() {\n    return this._config.chrHeight + this._margin.top * 1.5;\n  }\n\n  getChromosomeSetLabelAnchor() {\n    return 'end';\n  }\n\n  getChromosomeBandLabelAnchor() {\n    return null;\n  }\n\n  getChromosomeBandTickY1() {\n    return 2;\n  }\n\n  getChromosomeBandTickY2() {\n    return 10;\n  }\n\n  getChromosomeBandLabelTranslate(band) {\n    var x =\n      this._ideo.round(-this._tickSize + band.px.start + band.px.width / 2);\n    var y = -10;\n\n    return {\n      x: x,\n      y: y,\n      translate: 'translate(' + x + ',' + y + ')'\n    };\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return null;\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var leftMargin = this._getLeftMargin();\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return 'translate(' + leftMargin + ', ' + chromosomeSetYTranslate + ')';\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // If no detailed description provided just use one formula for all cases.\n    if (!this._config.ploidyDesc) {\n      return this._config.chrMargin * (setNumber + 1);\n    }\n\n    // Id detailed description provided start to calculate offsets\n    //  for each chromosome set separately. This should be done only once.\n    if (!this._translate) {\n      // First offset equals to zero.\n      this._translate = [1];\n\n      // Loop through description set\n      for (var i = 1; i < this._config.ploidyDesc.length; i++) {\n        this._translate[i] =\n          this._translate[i - 1] + this._getChromosomeSetSize(i - 1);\n      }\n    }\n\n    return this._translate[setNumber];\n  }\n\n  getChromosomeSetLabelXPosition(i) {\n    if (this._config.ploidy === 1) {\n      return this.getChromosomeLabelXPosition(i);\n    } else {\n      return -20;\n    }\n  }\n\n  getChromosomeSetLabelYPosition(i) {\n    var setSize = this._ploidy.getSetSize(i),\n      config = this._config,\n      chrMargin = config.chrMargin,\n      chrWidth = config.chrWidth,\n      y;\n\n    if (config.ploidy === 1) {\n      y = chrWidth / 2 + 3;\n    } else {\n      y = (setSize * chrMargin) / 2;\n    }\n\n    return y;\n  }\n\n  getChromosomeLabelXPosition() {\n    return -8;\n  }\n\n  getChromosomeLabelYPosition() {\n    return this._config.chrWidth;\n  }\n\n}\n\n\n\n\nexport class PairedLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n\n    this._class = 'PairedLayout';\n\n    this._margin = {\n      left: 30\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var self = this;\n    var ideo = this._ideo;\n\n    // Get ideo container and chromosome set dimensions\n    var ideoBox = d3.select(ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    // Evaluate dimensions scale coefficients\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    // Evaluate y offset of chromosome.\n    // It is different for first and the second one\n    var yOffset = setNumber ? 150 : 25;\n\n    var transform =\n      'translate(15, ' + yOffset + ') scale(' + scaleX + ', ' + scaleY + ')';\n\n    // Run rotation procedure\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", transform)\n      .on('end', function() {\n        // Run callback function if provided\n        if (callback) {\n          callback();\n        }\n\n        var translateY = (6 * Number(!setNumber));\n\n        // Rotate band labels\n        d3.select(chrElement.parentNode).selectAll('g.bandLabel text')\n          .attr('transform', 'rotate(90) translate(0, ' + translateY + ')')\n          .attr('text-anchor', 'middle');\n\n        // Hide syntenic regions\n        d3.selectAll(ideo.selector + ' .syntenicRegion')\n          .style('display', 'none');\n      });\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(this.getChromosomeLabels(chrElement))\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 0)\n      .attr('y', yOffset + (self._config.chrWidth * scaleX / 2) * 1.15)\n      .style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber, chrElement, callback) {\n    var ideo = this._ideo;\n\n    // Get intial transformation string for chromosome set\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    // Run rotation procedure\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', function() {\n        // Run callback fnuction if provided\n        callback();\n\n        // Show syntenic regions\n        d3.selectAll(ideo.select + ' .syntenicRegion')\n          .style('display', null);\n\n        // Reset changed attributes to original state\n        d3.select(chrElement.parentNode).selectAll('g.bandLabel text')\n          .attr('transform', null)\n          .attr('text-anchor', setNumber ? null : 'end');\n      });\n\n    d3.selectAll(ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight() {\n    return this._config.chrHeight + this._margin.left * 1.5;\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandTickY1(chrNumber) {\n    return chrNumber % 2 ? this._config.chrWidth : this._config.chrWidth * 2;\n  }\n\n  getChromosomeBandTickY2(chrNumber) {\n    var width = this._config.chrWidth;\n    return chrNumber % 2 ? width - this._tickSize : width * 2 + this._tickSize;\n  }\n\n  getChromosomeBandLabelAnchor(chrNumber) {\n    return chrNumber % 2 ? null : 'end';\n  }\n\n  getChromosomeBandLabelTranslate(band, chrNumber) {\n    var x = chrNumber % 2 ? 10 : -this._config.chrWidth - 10;\n    var y = this._ideo.round(band.px.start + band.px.width / 2) + 3;\n\n    return {\n      x: y,\n      y: y,\n      translate: 'rotate(-90) translate(' + x + ', ' + y + ')'\n    };\n  }\n\n  getChromosomeLabelXPosition() {\n    return -this._tickSize;\n  }\n\n  getChromosomeSetLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return (\n      'rotate(90) ' +\n      'translate(' + this._margin.left + ', -' + chromosomeSetYTranslate + ')'\n    );\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    return 200 * (setNumber + 1);\n  }\n\n}\n\n\n\nexport class SmallLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n\n    this._class = 'SmallLayout';\n\n    this._margin = {\n      left: 36.5,\n      top: 10\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    transform = 'translate(5, 25) scale(' + scaleX + ', ' + scaleY + ')';\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', transform)\n      .on('end', callback);\n  }\n\n  rotateBack(setNumber, chrNumber, chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', callback);\n  }\n\n  getHeight() {\n    var chrHeight = this._config.chrHeight;\n    return this._config.rows * (chrHeight + this._margin.top * 1.5);\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandLabelTranslate() {\n\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    // Get organisms id list\n    var organisms = [];\n    this._ideo.getTaxids(function(taxIdList) {\n      organisms = taxIdList;\n    });\n    // Get first organism chromosomes amount\n    var size = this._ideo.config.chromosomes[organisms[0]].length;\n    // Amount of chromosomes per number\n    var rowSize = size / this._config.rows;\n\n    var xOffset;\n    var yOffset;\n\n    if (setNumber > rowSize - 1) {\n      xOffset = this._margin.left + this._config.chrHeight * 1.4;\n      yOffset = this.getChromosomeSetYTranslate(setNumber - rowSize);\n    } else {\n      xOffset = this._margin.left;\n      yOffset = this.getChromosomeSetYTranslate(setNumber);\n    }\n\n    return 'rotate(90) translate(' + xOffset + ', -' + yOffset + ')';\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // Get additional padding caused by annotation tracks\n    var additionalPadding = this._getAdditionalOffset();\n    // If no detailed description provided just use one formula for all cases\n    return (\n      this._margin.left * (setNumber) + this._config.chrWidth +\n      additionalPadding * 2 + additionalPadding * setNumber\n    );\n  }\n\n  getChromosomeSetLabelXPosition(setNumber) {\n    return (\n      ((this._ploidy.getSetSize(setNumber) * this._config.chrWidth + 20) / -2) +\n      (this._config.ploidy > 1 ? 0 : this._config.chrWidth)\n    );\n  }\n\n  getChromosomeLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n\n}\n\n\n\n\nexport class VerticalLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n    this._class = 'VerticalLayout';\n    // Layout margins\n    this._margin = {\n      top: 30,\n      left: 15\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var self = this;\n\n    var xOffset = 20;\n\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    var transform =\n      'translate(' + xOffset + ', 25) scale(' + scaleX + ', ' + scaleY + ')';\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', transform)\n      .on('end', callback);\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n    var y = (xOffset + self._config.chrWidth) * 1.3;\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(labels)\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 0)\n      .attr('y', y).style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber,\n             chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', callback);\n\n    d3.selectAll(this._ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight() {\n    return this._config.chrHeight + this._margin.top * 1.5;\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandLabelTranslate() {\n\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var marginTop = this._margin.top;\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return (\n      'rotate(90) ' +\n      'translate(' + marginTop + ', -' + chromosomeSetYTranslate + ')'\n    );\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // Get additional padding caused by annotation/histogram tracks\n    var pad = this._getAdditionalOffset(),\n      margin = this._config.chrMargin,\n      width = this._config.chrWidth,\n      translate;\n\n    // If no detailed description provided just use one formula for all cases\n    if (!this._config.ploidyDesc) {\n      // TODO:\n      // This part of code contains a lot magic numbers and if\n      // statements for exactly corresponing to original ideogram examples.\n      // But all this stuff should be removed. Calculation of translate\n      // should be a simple formula applied for all cases listed below.\n      // Now they are diffirent because of Layout:_getAdditionalOffset do\n      // not meet for cases when no annotation, when annotation exists and\n      // when histogram used\n\n      if (this._config.annotationsLayout === 'histogram') {\n        return margin / 2 + setNumber * (margin + width + 2) + pad * 2 + 1;\n      } else {\n        translate = width + setNumber * (margin + width) + pad * 2;\n        if (pad > 0) {\n          return translate;\n        } else {\n          return translate + 4 + (2 * setNumber);\n        }\n      }\n    }\n\n    // If detailed description provided start to calculate offsets\n    // for each chromosome set separately. This should be done only once\n    if (!this._translate) {\n      // First offset equals to zero\n      this._translate = [this._ploidy.getSetSize(0) * width * 2];\n      var prevTranslate;\n      // Loop through description set\n      for (var i = 1; i < this._config.ploidyDesc.length; i++) {\n        prevTranslate = this._translate[i - 1];\n        this._translate[i] = prevTranslate + this._getChromosomeSetSize(i - 1);\n      }\n    }\n\n    return this._translate[setNumber];\n  }\n\n  getChromosomeSetLabelXPosition() {\n    return (this._config.chrWidth * this._config.ploidy) / -2;\n  }\n\n  getChromosomeLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n}\n","export class ModelAdapter {\n\n  constructor(model) {\n    this._model = model;\n    this._class = 'ModelAdapter';\n  }\n\n  static getInstance(model) {\n    if (model.bands) {\n      return new ModelAdapter(model);\n    } else {\n      return new ModelNoBandsAdapter(model);\n    }\n  }\n\n  getModel() {\n    return this._model;\n  }\n\n  getCssClass() {\n    return '';\n  }\n}\n\nexport class ModelNoBandsAdapter extends ModelAdapter {\n\n  constructor(model) {\n    super(model);\n    this._class = 'ModelNoBandsAdapter';\n  }\n\n  getModel() {\n    this._model.bands = [];\n\n      // If chromosome width more, then 1 add single band to bands array\n    if (this._model.width > 1) {\n      this._model.bands.push({\n        name: 'q',\n        px: {\n          start: 0,\n          stop: this._model.width,\n          width: this._model.width\n        }\n      });\n    }\n\n    return this._model;\n  }\n\n  getCssClass() {\n    return 'noBands';\n  }\n\n}\n","export class Ploidy {\n\n  constructor(config) {\n    this._config = config;\n    this._description = this._normalize(this._config.ploidyDesc);\n  }\n\n  // Get number of chromosomes in a chromosome set\n  getChromosomesNumber(setNumber) {\n    if (this._config.ploidyDesc) {\n      var chrSetCode = this._config.ploidyDesc[setNumber];\n      if (chrSetCode instanceof Object) {\n        return Object.keys(chrSetCode)[0].length;\n      } else {\n        return chrSetCode.length;\n      }\n    } else {\n      return this._config.ploidy || 1;\n    }\n  }\n\n  // Normalize use defined description\n  _normalize(description) {\n    var normalized, key, descValue;\n\n    // Return the same if no description provided\n    if (!description) {\n      return description;\n    }\n\n    // Array of normalized description objects\n    normalized = [];\n\n    // Loop through description and normalize\n    for (key in description) {\n      descValue = description[key];\n      if (typeof descValue === 'string') {\n        if (this._config.orientation === 'vertical') {\n          descValue = descValue.split('').reverse();\n        }\n        normalized.push({\n          ancestors: descValue,\n          existence: this._getexistenceArray(descValue.length)\n        });\n      } else {\n        normalized.push({\n          ancestors: Object.keys(descValue)[0],\n          existence: descValue[Object.keys(descValue)[0]]\n        });\n      }\n    }\n\n    return normalized;\n  }\n\n  // Get array filled by '11' elements\n  _getexistenceArray(length) {\n    var array = [];\n\n    for (var i = 0; i < length; i++) {\n      array.push('11');\n    }\n\n    return array;\n  }\n\n  getSetSize(chrSetNumber) {\n    if (this._description) {\n      return this._description[chrSetNumber].ancestors.length;\n    } else {\n      return 1;\n    }\n  }\n\n  // Get ancestor letter\n  getAncestor(chrSetNumber, chrNumber) {\n    if (this._description) {\n      return this._description[chrSetNumber].ancestors[chrNumber];\n    } else {\n      return '';\n    }\n  }\n\n  // Check if chromosome's arm should be rendered.\n  // If no description was provided, method returns true and\n  // something another depending on user provided description.\n  exists(chrSetNumber, chrNumber, armNumber) {\n    if (this._description) {\n      var desc =\n        this._description[chrSetNumber].existence[chrNumber][armNumber];\n      return Number(desc) > 0;\n    } else {\n      return true;\n    }\n  }\n\n}\n","export class Range {\n\n  /**\n  * Chromosome range.\n  * @public\n  * @class\n  * @param {Object} data - range data.\n  * @param {Integer} data.chr - chromosome index.\n  * @param {Integer[]} [data.ploidy] - array which controls on which chromosomes range should appear in case of ploidy.\n  * @param {Integer} data.start - range start.\n  * @param {Integer} data.stop - range end.\n  * @param {String} data.color - range color.\n  */\n  constructor(data) {\n    this._data = data;\n  }\n\n  getStart() {\n    return this._data.start;\n  }\n\n  getStop() {\n    return this._data.stop;\n  }\n\n  getLength() {\n    return this._data.stop - this._data.start;\n  }\n\n  getColor(chrNumber) {\n    if (!('ploidy' in this._data)) {\n      return this._getColor(chrNumber);\n    } else if ('ploidy' in this._data && this._data.ploidy[chrNumber]) {\n      return this._getColor(chrNumber);\n    } else {\n      return 'transparent';\n    }\n  }\n\n  _getColor(chrNumber) {\n    if (Array.isArray(this._data.color)) {\n      return this._data.color[chrNumber];\n    } else {\n      return this._data.color;\n    }\n  }\n\n}\n","import * as d3 from 'd3';\n\n// Chromosome's view utility class\nexport class ChromosomeUtil {\n\n  constructor(node) {\n    this._node = node;\n  }\n\n  getLabel() {\n    var label =\n      d3\n        .select(this._node)\n        .select('text.chrLabel')\n        .text();\n    return label;\n  }\n\n  // Get chromosome set label\n  getSetLabel() {\n    var setLabel =\n      d3\n        .select(this._node.parentNode)\n        .select('text.chromosome-set-label')\n        .text();\n    return setLabel;\n  }\n}\n","import {Color} from './../color';\nimport {Range} from './../range';\n\nexport class Chromosome {\n\n  constructor(adapter, config, ideo) {\n    this._adapter = adapter;\n    this._model = this._adapter.getModel();\n    this._config = config;\n    this._ideo = ideo;\n    this._color = new Color(this._config);\n    this._bumpCoefficient = 5;\n  }\n\n  // Factory method\n  static getInstance(adapter, config, ideo) {\n    if (adapter.getModel().centromerePosition === 'telocentric') {\n      return new TelocentricChromosome(adapter, config, ideo);\n    } else {\n      return new MetacentricChromosome(adapter, config, ideo);\n    }\n  };\n\n  _addPArmShape(clipPath, isPArmRendered) {\n    if (isPArmRendered) {\n      return clipPath.concat(this._getPArmShape());\n    } else {\n      return clipPath;\n    }\n  };\n\n  _addQArmShape(clipPath, isQArmRendered) {\n    if (isQArmRendered) {\n      return clipPath.concat(this._getQArmShape());\n    } else {\n      return clipPath;\n    }\n  };\n\n  render(container, chrSetNumber, chrNumber) {\n      // Append bands container and apply clip-path on it\n\n    var self = this;\n\n    container = container.append('g')\n      .attr('class', 'bands')\n      .attr(\"clip-path\", \"url(#\" + this._model.id + \"-chromosome-set-clippath)\");\n\n      // Render chromosome arms\n    var isPArmRendered = this._renderPArm(container, chrSetNumber, chrNumber);\n    var isQArmRendered = this._renderQArm(container, chrSetNumber, chrNumber);\n\n      // Render range set\n    this._renderRangeSet(container, chrSetNumber, chrNumber);\n\n      // Push arms shape string into clipPath array\n    var clipPath = [];\n    clipPath = this._addPArmShape(clipPath, isPArmRendered);\n    clipPath = this._addQArmShape(clipPath, isQArmRendered);\n\n    var opacity = '0';\n    var fill = '';\n    var isFullyBanded = this.isFullyBanded();\n    if ('ancestors' in this._ideo.config && !('rangeSet' in this._ideo.config)) {\n      // E.g. diploid human genome (with translucent overlay)\n      fill = self._color.getArmColor(chrSetNumber, chrNumber, 0);\n      if (isFullyBanded) {\n        opacity = '0.5';\n      }\n    } else if (isFullyBanded) {\n      // E.g. mouse reference genome\n      opacity = null;\n      fill = 'transparent';\n    } else if (!('ancestors' in this._ideo.config)) {\n      // E.g. chimpanzee assembly Pan_tro 3.0\n      opacity = '1';\n    }\n\n    // Render chromosome border\n    container.append('g')\n      .attr('class', 'chromosome-border')\n      .selectAll('path')\n      .data(clipPath)\n      .enter()\n      .append('path')\n      .attr('fill', fill)\n      .style('fill-opacity', opacity)\n      .attr('stroke', function(d, i) {\n        return self._color.getBorderColor(chrSetNumber, chrNumber, i);\n      })\n      .attr('stroke-width', function(d) {\n        return ('strokeWidth' in d ? d.strokeWidth : 1);\n      })\n      .attr('d', function(d) {\n        return d.path;\n      }).attr('class', function(d) {\n        return d.class;\n      });\n\n    return clipPath;\n  };\n\n  _renderRangeSet(container, chrSetNumber, chrNumber) {\n    if (!('rangeSet' in this._config)) {\n      return;\n    }\n\n    var rangeSet = this._config.rangeSet.filter(function(range) {\n      return range.chr - 1 === chrSetNumber;\n    }).map(function(range) {\n      return new Range(range);\n    });\n\n    var rangesContainer = container.append('g').attr('class', 'range-set');\n\n    var self = this;\n    var ideo = self._ideo;\n    var bandsXOffset = ideo._bandsXOffset;\n\n    rangesContainer.selectAll('rect.range')\n      .data(rangeSet)\n      .enter()\n      .append('rect')\n      .attr('class', 'range')\n      .attr('x', function(range) {\n        var startPx = ideo.convertBpToPx(self._model, range.getStart());\n        return startPx - bandsXOffset;\n      }).attr('y', 0)\n      .attr('width', function(range) {\n        var lengthPx = ideo.convertBpToPx(self._model, range.getLength());\n        return lengthPx - bandsXOffset;\n      }).attr('height', this._config.chrWidth)\n      .style('fill', function(range) {\n        return range.getColor(chrNumber);\n      });\n  };\n\n  // Get chromosome's shape main values\n  _getShapeData() {\n      // First q band from bands sequence\n    var firstQBand;\n    for (var i = 0; i < this._model.bands.length; i++) {\n      if (this._model.bands[i].name[0] === 'q') {\n        firstQBand = this._model.bands[i];\n        break;\n      }\n    }\n\n    // Chromosome's right position\n    var lastBand = this._model.bands.length - 1;\n    var rightTerminalPosition = this._model.bands[lastBand].px.stop;\n\n      // Properties description:\n      // x1 - left terminal start position\n      // x2 - centromere position\n      // x3 - right terminal end position\n      // w - chromosome width\n      // b - bump size\n    return {\n      x1: 0,\n      x2: firstQBand ? firstQBand.px.start : rightTerminalPosition,\n      x3: rightTerminalPosition,\n      w: this._config.chrWidth,\n      b: this._config.chrWidth / this._bumpCoefficient\n    };\n  };\n\n  _getPArmShape() {\n    var d = this._getShapeData(),\n      x = d.x2 - d.b;\n\n    if (this.isFullyBanded() || 'ancestors' in this._ideo.config) {\n      // Encountered when chromosome has any of:\n      //  - One placeholder \"band\", e.g. pig genome GCF_000003025.5\n      //  - Many (> 2) bands, e.g. human reference genome\n      //  - Ancestor colors in ploidy configuration, as in ploidy_basic.html\n      return {\n        class: '',\n        path:\n          'M' + d.b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x2 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + d.b + ',' + d.w + ' ' +\n          'Q-' + d.b + ',' + (d.w / 2) + ',' + d.b + ',0'\n      };\n    } else {\n      // e.g. chimpanzee assembly Pan_tro 3.0\n      return [{\n        class: '',\n        path:\n          'M' + d.b + ',0 ' +\n          'L' + (x - 2) + ',0 ' +\n          'L' + (x - 2) + ',' + d.w + ' ' +\n          'L' + d.b + ',' + d.w + ' ' +\n          'Q-' + d.b + ',' + (d.w / 2) + ',' + d.b + ',0'\n      }, {\n        class: 'acen',\n        path:\n          'M' + x + ',0 ' +\n          'Q' + (d.x2 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x + ',' + d.w + ' ' +\n          'L' + (x - 2) + ',' + d.w + ' ' +\n          'L' + (x - 2) + ',0'\n      }];\n    }\n  };\n\n  _getQArmShape() {\n    var d = this._getShapeData(),\n      x = d.x3 - d.b,\n      x2b = d.x2 + d.b;\n\n    if (this.isFullyBanded() || 'ancestors' in this._ideo.config) {\n      return {\n        class: '',\n        path:\n          'M' + x2b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w + ' ' +\n          'Q' + (d.x2 - d.b) + ',' + (d.w / 2) + ',' + x2b + ',0'\n      };\n    } else {\n      // e.g. chimpanzee assembly Pan_tro 3.0\n      return [{\n        path:\n          'M' + x2b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w + ' ' +\n          'L' + x2b + ',0'\n      }, {\n        class: 'acen',\n        path:\n          'M' + x2b + ',0' +\n          'Q' + (d.x2 - d.b) + ',' + (d.w / 2) + ',' + x2b + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w +\n          'L' + (x2b + 2) + ',' + d.w +\n          'L' + (x2b + 2) + ',0'\n      }];\n    }\n  };\n\n  isFullyBanded() {\n    return (\n      this._model.bands &&\n      (this._model.bands.length !== 2 || this._model.bands[0].name[0] === 'q')\n    );\n  };\n\n  // Render arm bands\n  _renderBands(container, chrSetNumber, chrNumber, bands, arm) {\n    var self = this;\n    var armNumber = arm === 'p' ? 0 : 1;\n    var fill = '';\n    if ('ancestors' in this._ideo.config && !(this.isFullyBanded())) {\n      fill = self._color.getArmColor(chrSetNumber, chrNumber, armNumber);\n    }\n\n    container.selectAll(\"path.band.\" + arm)\n      .data(bands)\n      .enter()\n      .append(\"path\")\n      .attr(\"id\", function(d) {\n        return self._model.id + \"-\" + d.name.replace(\".\", \"-\");\n      })\n      .attr(\"class\", function(d) {\n        return 'band ' + arm + '-band ' + d.stain;\n      })\n      .attr(\"d\", function(d) {\n        var start = self._ideo.round(d.px.start);\n        var length = self._ideo.round(d.px.width);\n\n        var x = start + length;\n\n        return \"M \" + start + \", 0\" +\n              \"l \" + length + \" 0 \" +\n              \"l 0 \" + self._config.chrWidth + \" \" +\n              \"l -\" + length + \" 0 z\";\n      })\n      .style('fill', fill);\n  };\n\n  // Render chromosome's p arm.\n  // Returns boolean which indicates is any bands was rendered\n  _renderPArm(container, chrSetNumber, chrNumber) {\n    var bands = this._model.bands.filter(function(band) {\n      return band.name[0] === 'p';\n    });\n\n    this._renderBands(container, chrSetNumber, chrNumber, bands, 'p');\n\n    return Boolean(bands.length);\n  };\n\n  // Render chromosome's q arm.\n  // Returns boolean which indicates is any bands was rendered\n  _renderQArm(container, chrSetNumber, chrNumber) {\n    var bands = this._model.bands.filter(function(band) {\n      return band.name[0] === 'q';\n    });\n\n    this._renderBands(container, chrSetNumber, chrNumber, bands, 'q');\n\n    return Boolean(bands.length);\n  };\n}\n\n\n\nexport class MetacentricChromosome extends Chromosome {\n\n  constructor(model, config, ideo) {\n    super(model, config, ideo);\n    this._class = 'MetacentricChromosome';\n  }\n}\n\n\n\nexport class TelocentricChromosome extends Chromosome {\n\n  constructor(model, config, ideo) {\n    super(model, config, ideo);\n    this._class = 'TelocentricChromosome';\n    this._pArmOffset = 3;\n  }\n\n  _addPArmShape(clipPath) {\n    return clipPath.concat(this._getPArmShape());\n  };\n\n  _getPArmShape() {\n    var d = this._getShapeData();\n    d.o = this._pArmOffset;\n\n    return [{\n      class: 'acen',\n      path: 'M' + (d.x2 + 2) + ',1' +\n      'L' + (d.x2 + d.o + 3.25) + ',1 ' +\n      'L' + (d.x2 + d.o + 3.25) + ',' + (d.w - 1) + ' ' +\n      'L' + (d.x2 + 2) + ',' + (d.w - 1)\n    }, {\n      class: 'gpos66',\n      path: 'M' + (d.x2 - d.o + 5) + ',0' +\n      'L' + (d.x2 - d.o + 3) + ',0 ' +\n      'L' + (d.x2 - d.o + 3) + ',' + d.w + ' ' +\n      'L' + (d.x2 - d.o + 5) + ',' + d.w,\n      strokeWidth: 0.5\n    }];\n  };\n\n  _getQArmShape() {\n    var d = this._getShapeData(),\n      x = d.x3 - d.b,\n      o = this._pArmOffset + 3;\n\n    return {\n      class: '',\n      path:\n      'M' + (d.x2 + o) + ',0 ' +\n      'L' + x + ',0 ' +\n      'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n      'L' + (d.x2 + o) + ',' + d.w\n    };\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9idWlsZC9kMy1jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL2J1aWxkL2QzLWRpc3BhdGNoLmpzIiwibm9kZV9tb2R1bGVzL2QzLWRzdi9idWlsZC9kMy1kc3YuanMiLCJub2RlX21vZHVsZXMvZDMucHJvbWlzZS9kaXN0L2QzLnByb21pc2UubWluLmpzIiwibm9kZV9tb2R1bGVzL2QzLnByb21pc2Uvbm9kZV9tb2R1bGVzL2QzLXJlcXVlc3QvYnVpbGQvZDMtcmVxdWVzdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy9idWlsZC9kMy5qcyIsIm5vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsInNyYy9qcy9jb2xvci5qcyIsInNyYy9qcy9jb3JlLmpzIiwic3JjL2pzL2luZGV4LmpzIiwic3JjL2pzL2xheW91dHMvbGF5b3V0LmpzIiwic3JjL2pzL21vZGVsLWFkYXB0ZXIuanMiLCJzcmMvanMvcGxvaWR5LmpzIiwic3JjL2pzL3JhbmdlLmpzIiwic3JjL2pzL3ZpZXdzL2Nocm9tb3NvbWUtdXRpbC5qcyIsInNyYy9qcy92aWV3cy9jaHJvbW9zb21lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hLQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNqMGZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3JvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIGh0dHBzOi8vZDNqcy5vcmcvZDMtY29sbGVjdGlvbi8gVmVyc2lvbiAxLjAuMC4gQ29weXJpZ2h0IDIwMTYgTWlrZSBCb3N0b2NrLlxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSkpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG4gIGZ1bmN0aW9uIE1hcCgpIHt9XG5cbiAgTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IE1hcCxcbiAgICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgICByZXR1cm4ga2V5cztcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgfSxcbiAgICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzaXplID0gMDtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgICByZXR1cm4gc2l6ZTtcbiAgICB9LFxuICAgIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAgIC8vIENvcHkgY29uc3RydWN0b3IuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAgIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgICAgbztcblxuICAgICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gICAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5lc3QoKSB7XG4gICAgdmFyIGtleXMgPSBbXSxcbiAgICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgICAgc29ydFZhbHVlcyxcbiAgICAgICAgcm9sbHVwLFxuICAgICAgICBuZXN0O1xuXG4gICAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gcm9sbHVwICE9IG51bGxcbiAgICAgICAgICA/IHJvbGx1cChhcnJheSkgOiAoc29ydFZhbHVlcyAhPSBudWxsXG4gICAgICAgICAgPyBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpXG4gICAgICAgICAgOiBhcnJheSk7XG5cbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICAgIGtleVZhbHVlLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5lc3QgPSB7XG4gICAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICAgIHJldHVybiBtYXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gU2V0KCkge31cblxuICB2YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG4gIFNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBTZXQsXG4gICAgaGFzOiBwcm90by5oYXMsXG4gICAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFsdWUgKz0gXCJcIjtcbiAgICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICAgIGNsZWFyOiBwcm90by5jbGVhcixcbiAgICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gICAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgICBlbXB0eTogcHJvdG8uZW1wdHksXG4gICAgZWFjaDogcHJvdG8uZWFjaFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAgIC8vIENvcHkgY29uc3RydWN0b3IuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICAgIGVsc2UgaWYgKG9iamVjdCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGtleXMobWFwKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlcyhtYXApIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtrZXk6IGtleSwgdmFsdWU6IG1hcFtrZXldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH1cblxuICBleHBvcnRzLm5lc3QgPSBuZXN0O1xuICBleHBvcnRzLnNldCA9IHNldDtcbiAgZXhwb3J0cy5tYXAgPSBtYXA7XG4gIGV4cG9ydHMua2V5cyA9IGtleXM7XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuICBleHBvcnRzLmVudHJpZXMgPSBlbnRyaWVzO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTsiLCIvLyBodHRwczovL2QzanMub3JnL2QzLWRpc3BhdGNoLyBWZXJzaW9uIDEuMC4wLiBDb3B5cmlnaHQgMjAxNiBNaWtlIEJvc3RvY2suXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KChnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pKSk7XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgICAgX1t0XSA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xuICB9XG5cbiAgZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICAgIHRoaXMuXyA9IF87XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gICAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgICB9KTtcbiAgfVxuXG4gIERpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gICAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgICAgdCxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGV4cG9ydHMuZGlzcGF0Y2ggPSBkaXNwYXRjaDtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7IiwiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy1kc3YvIFZlcnNpb24gMS4wLjAuIENvcHlyaWdodCAyMDE2IE1pa2UgQm9zdG9jay5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGZhY3RvcnkoKGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSkpKTtcbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gICAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG4gIH1cblxuICBmdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICAgIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICAgIH07XG4gIH1cblxuICAvLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbiAgZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgICAgY29sdW1ucyA9IFtdO1xuXG4gICAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjb2x1bW5zO1xuICB9XG5cbiAgZnVuY3Rpb24gZHN2KGRlbGltaXRlcikge1xuICAgIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLFxuICAgICAgICBkZWxpbWl0ZXJDb2RlID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgICB9KTtcbiAgICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgICByZXR1cm4gcm93cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LCAvLyBzZW50aW5lbCB2YWx1ZSBmb3IgZW5kLW9mLWxpbmVcbiAgICAgICAgICBFT0YgPSB7fSwgLy8gc2VudGluZWwgdmFsdWUgZm9yIGVuZC1vZi1maWxlXG4gICAgICAgICAgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgICBuID0gMCwgLy8gdGhlIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgICB0LCAvLyB0aGUgY3VycmVudCB0b2tlblxuICAgICAgICAgIGVvbDsgLy8gaXMgdGhlIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgICAgaWYgKEkgPj0gTikgcmV0dXJuIEVPRjsgLy8gc3BlY2lhbCBjYXNlOiBlbmQgb2YgZmlsZVxuICAgICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDsgLy8gc3BlY2lhbCBjYXNlOiBlbmQgb2YgbGluZVxuXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZTogcXVvdGVzXG4gICAgICAgIHZhciBqID0gSSwgYztcbiAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gMzQpIHtcbiAgICAgICAgICB2YXIgaSA9IGo7XG4gICAgICAgICAgd2hpbGUgKGkrKyA8IE4pIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgPT09IDM0KSB7XG4gICAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSArIDEpICE9PSAzNCkgYnJlYWs7XG4gICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgSSA9IGkgKyAyO1xuICAgICAgICAgIGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICAgIGlmIChjID09PSAxMykge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSArIDIpID09PSAxMCkgKytJO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gMTApIHtcbiAgICAgICAgICAgIGVvbCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbW1vbiBjYXNlOiBmaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmVcbiAgICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgICAgdmFyIGsgPSAxO1xuICAgICAgICAgIGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKTtcbiAgICAgICAgICBpZiAoYyA9PT0gMTApIGVvbCA9IHRydWU7IC8vIFxcblxuICAgICAgICAgIGVsc2UgaWYgKGMgPT09IDEzKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IDEwKSArK0ksICsrazsgfSAvLyBcXHJ8XFxyXFxuXG4gICAgICAgICAgZWxzZSBpZiAoYyAhPT0gZGVsaW1pdGVyQ29kZSkgY29udGludWU7XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgSSAtIGspO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlOiBsYXN0IHRva2VuIGJlZm9yZSBFT0ZcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2Uoaik7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcbiAgICAgICAgICBhLnB1c2godCk7XG4gICAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGYgJiYgKGEgPSBmKGEsIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICByb3dzLnB1c2goYSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByb3dzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgICB9KSkuam9pbihcIlxcblwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIlxuICAgICAgICAgIDogcmVGb3JtYXQudGVzdCh0ZXh0ICs9IFwiXCIpID8gXCJcXFwiXCIgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgICAgOiB0ZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZTogcGFyc2UsXG4gICAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICAgIH07XG4gIH1cblxuICB2YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuICB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG4gIHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuICB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbiAgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcblxuICB2YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG4gIHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbiAgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG4gIHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuICB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xuXG4gIGV4cG9ydHMuZHN2Rm9ybWF0ID0gZHN2O1xuICBleHBvcnRzLmNzdlBhcnNlID0gY3N2UGFyc2U7XG4gIGV4cG9ydHMuY3N2UGFyc2VSb3dzID0gY3N2UGFyc2VSb3dzO1xuICBleHBvcnRzLmNzdkZvcm1hdCA9IGNzdkZvcm1hdDtcbiAgZXhwb3J0cy5jc3ZGb3JtYXRSb3dzID0gY3N2Rm9ybWF0Um93cztcbiAgZXhwb3J0cy50c3ZQYXJzZSA9IHRzdlBhcnNlO1xuICBleHBvcnRzLnRzdlBhcnNlUm93cyA9IHRzdlBhcnNlUm93cztcbiAgZXhwb3J0cy50c3ZGb3JtYXQgPSB0c3ZGb3JtYXQ7XG4gIGV4cG9ydHMudHN2Rm9ybWF0Um93cyA9IHRzdkZvcm1hdFJvd3M7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpOyIsIiFmdW5jdGlvbihlLG4pe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPW4ocmVxdWlyZShcImQzLXJlcXVlc3RcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZDMtcmVxdWVzdFwiXSxuKTooZS5kMz1lLmQzfHx7fSxlLmQzLnByb21pc2U9bihlLmQzKSl9KHRoaXMsZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLG4pe3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHI9QXJyYXkodCksbz0wO3Q+bztvKyspcltvXT1hcmd1bWVudHNbb107cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbyl7dmFyIHU9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZT92b2lkIG8oRXJyb3IoZSkpOnZvaWQgdChuKX07bi5hcHBseShlLHIuY29uY2F0KHUpKX0pfX12YXIgdD17fTtyZXR1cm5bXCJjc3ZcIixcInRzdlwiLFwianNvblwiLFwieG1sXCIsXCJ0ZXh0XCIsXCJodG1sXCJdLmZvckVhY2goZnVuY3Rpb24ocil7dFtyXT1uKGUsZVtyXSl9KSx0fSk7IiwiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy1yZXF1ZXN0LyBWZXJzaW9uIDEuMC41LiBDb3B5cmlnaHQgMjAxNyBNaWtlIEJvc3RvY2suXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ2QzLWNvbGxlY3Rpb24nKSwgcmVxdWlyZSgnZDMtZGlzcGF0Y2gnKSwgcmVxdWlyZSgnZDMtZHN2JykpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdkMy1jb2xsZWN0aW9uJywgJ2QzLWRpc3BhdGNoJywgJ2QzLWRzdiddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pLGdsb2JhbC5kMyxnbG9iYWwuZDMsZ2xvYmFsLmQzKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cyxkM0NvbGxlY3Rpb24sZDNEaXNwYXRjaCxkM0RzdikgeyAndXNlIHN0cmljdCc7XG5cbnZhciByZXF1ZXN0ID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICB2YXIgcmVxdWVzdCxcbiAgICAgIGV2ZW50ID0gZDNEaXNwYXRjaC5kaXNwYXRjaChcImJlZm9yZXNlbmRcIiwgXCJwcm9ncmVzc1wiLCBcImxvYWRcIiwgXCJlcnJvclwiKSxcbiAgICAgIG1pbWVUeXBlLFxuICAgICAgaGVhZGVycyA9IGQzQ29sbGVjdGlvbi5tYXAoKSxcbiAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCxcbiAgICAgIHVzZXIgPSBudWxsLFxuICAgICAgcGFzc3dvcmQgPSBudWxsLFxuICAgICAgcmVzcG9uc2UsXG4gICAgICByZXNwb25zZVR5cGUsXG4gICAgICB0aW1lb3V0ID0gMDtcblxuICAvLyBJZiBJRSBkb2VzIG5vdCBzdXBwb3J0IENPUlMsIHVzZSBYRG9tYWluUmVxdWVzdC5cbiAgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgJiYgIShcIndpdGhDcmVkZW50aWFsc1wiIGluIHhocilcbiAgICAgICYmIC9eKGh0dHAocyk/Oik/XFwvXFwvLy50ZXN0KHVybCkpIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdDtcblxuICBcIm9ubG9hZFwiIGluIHhoclxuICAgICAgPyB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gcmVzcG9uZFxuICAgICAgOiB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24obykgeyB4aHIucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZChvKTsgfTtcblxuICBmdW5jdGlvbiByZXNwb25kKG8pIHtcbiAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cywgcmVzdWx0O1xuICAgIGlmICghc3RhdHVzICYmIGhhc1Jlc3BvbnNlKHhocilcbiAgICAgICAgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDBcbiAgICAgICAgfHwgc3RhdHVzID09PSAzMDQpIHtcbiAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlLmNhbGwocmVxdWVzdCwgeGhyKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHhocjtcbiAgICAgIH1cbiAgICAgIGV2ZW50LmNhbGwoXCJsb2FkXCIsIHJlcXVlc3QsIHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBvKTtcbiAgICB9XG4gIH1cblxuICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBldmVudC5jYWxsKFwicHJvZ3Jlc3NcIiwgcmVxdWVzdCwgZSk7XG4gIH07XG5cbiAgcmVxdWVzdCA9IHtcbiAgICBoZWFkZXI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBuYW1lID0gKG5hbWUgKyBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gaGVhZGVycy5nZXQobmFtZSk7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgaGVhZGVycy5yZW1vdmUobmFtZSk7XG4gICAgICBlbHNlIGhlYWRlcnMuc2V0KG5hbWUsIHZhbHVlICsgXCJcIik7XG4gICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9LFxuXG4gICAgLy8gSWYgbWltZVR5cGUgaXMgbm9uLW51bGwgYW5kIG5vIEFjY2VwdCBoZWFkZXIgaXMgc2V0LCBhIGRlZmF1bHQgaXMgdXNlZC5cbiAgICBtaW1lVHlwZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1pbWVUeXBlO1xuICAgICAgbWltZVR5cGUgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIjtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICAvLyBTcGVjaWZpZXMgd2hhdCB0eXBlIHRoZSByZXNwb25zZSB2YWx1ZSBzaG91bGQgdGFrZTtcbiAgICAvLyBmb3IgaW5zdGFuY2UsIGFycmF5YnVmZmVyLCBibG9iLCBkb2N1bWVudCwgb3IgdGV4dC5cbiAgICByZXNwb25zZVR5cGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByZXNwb25zZVR5cGU7XG4gICAgICByZXNwb25zZVR5cGUgPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICB0aW1lb3V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGltZW91dDtcbiAgICAgIHRpbWVvdXQgPSArdmFsdWU7XG4gICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9LFxuXG4gICAgdXNlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IHVzZXIgOiAodXNlciA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiLCByZXF1ZXN0KTtcbiAgICB9LFxuXG4gICAgcGFzc3dvcmQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyBwYXNzd29yZCA6IChwYXNzd29yZCA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiLCByZXF1ZXN0KTtcbiAgICB9LFxuXG4gICAgLy8gU3BlY2lmeSBob3cgdG8gY29udmVydCB0aGUgcmVzcG9uc2UgY29udGVudCB0byBhIHNwZWNpZmljIHR5cGU7XG4gICAgLy8gY2hhbmdlcyB0aGUgY2FsbGJhY2sgdmFsdWUgb24gXCJsb2FkXCIgZXZlbnRzLlxuICAgIHJlc3BvbnNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzcG9uc2UgPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICAvLyBBbGlhcyBmb3Igc2VuZChcIkdFVFwiLCDigKYpLlxuICAgIGdldDogZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiByZXF1ZXN0LnNlbmQoXCJHRVRcIiwgZGF0YSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvLyBBbGlhcyBmb3Igc2VuZChcIlBPU1RcIiwg4oCmKS5cbiAgICBwb3N0OiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHJlcXVlc3Quc2VuZChcIlBPU1RcIiwgZGF0YSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvLyBJZiBjYWxsYmFjayBpcyBub24tbnVsbCwgaXQgd2lsbCBiZSB1c2VkIGZvciBlcnJvciBhbmQgbG9hZCBldmVudHMuXG4gICAgc2VuZDogZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUsIHVzZXIsIHBhc3N3b3JkKTtcbiAgICAgIGlmIChtaW1lVHlwZSAhPSBudWxsICYmICFoZWFkZXJzLmhhcyhcImFjY2VwdFwiKSkgaGVhZGVycy5zZXQoXCJhY2NlcHRcIiwgbWltZVR5cGUgKyBcIiwqLypcIik7XG4gICAgICBpZiAoeGhyLnNldFJlcXVlc3RIZWFkZXIpIGhlYWRlcnMuZWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSk7IH0pO1xuICAgICAgaWYgKG1pbWVUeXBlICE9IG51bGwgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUpIHhoci5vdmVycmlkZU1pbWVUeXBlKG1pbWVUeXBlKTtcbiAgICAgIGlmIChyZXNwb25zZVR5cGUgIT0gbnVsbCkgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgIGlmICh0aW1lb3V0ID4gMCkgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkgY2FsbGJhY2sgPSBmaXhDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgcmVxdWVzdC5vbihcImVycm9yXCIsIGNhbGxiYWNrKS5vbihcImxvYWRcIiwgZnVuY3Rpb24oeGhyKSB7IGNhbGxiYWNrKG51bGwsIHhocik7IH0pO1xuICAgICAgZXZlbnQuY2FsbChcImJlZm9yZXNlbmRcIiwgcmVxdWVzdCwgeGhyKTtcbiAgICAgIHhoci5zZW5kKGRhdGEgPT0gbnVsbCA/IG51bGwgOiBkYXRhKTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICB4aHIuYWJvcnQoKTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICBvbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBldmVudC5vbi5hcHBseShldmVudCwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gZXZlbnQgPyByZXF1ZXN0IDogdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcmVxdWVzdC5nZXQoY2FsbGJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5mdW5jdGlvbiBmaXhDYWxsYmFjayhjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24oZXJyb3IsIHhocikge1xuICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyB4aHIgOiBudWxsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzUmVzcG9uc2UoeGhyKSB7XG4gIHZhciB0eXBlID0geGhyLnJlc3BvbnNlVHlwZTtcbiAgcmV0dXJuIHR5cGUgJiYgdHlwZSAhPT0gXCJ0ZXh0XCJcbiAgICAgID8geGhyLnJlc3BvbnNlIC8vIG51bGwgb24gZXJyb3JcbiAgICAgIDogeGhyLnJlc3BvbnNlVGV4dDsgLy8gXCJcIiBvbiBlcnJvclxufVxuXG52YXIgdHlwZSA9IGZ1bmN0aW9uKGRlZmF1bHRNaW1lVHlwZSwgcmVzcG9uc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpLnJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiByLmdldChjYWxsYmFjayk7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xufTtcblxudmFyIGh0bWwgPSB0eXBlKFwidGV4dC9odG1sXCIsIGZ1bmN0aW9uKHhocikge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoeGhyLnJlc3BvbnNlVGV4dCk7XG59KTtcblxudmFyIGpzb24gPSB0eXBlKFwiYXBwbGljYXRpb24vanNvblwiLCBmdW5jdGlvbih4aHIpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG59KTtcblxudmFyIHRleHQgPSB0eXBlKFwidGV4dC9wbGFpblwiLCBmdW5jdGlvbih4aHIpIHtcbiAgcmV0dXJuIHhoci5yZXNwb25zZVRleHQ7XG59KTtcblxudmFyIHhtbCA9IHR5cGUoXCJhcHBsaWNhdGlvbi94bWxcIiwgZnVuY3Rpb24oeGhyKSB7XG4gIHZhciB4bWwgPSB4aHIucmVzcG9uc2VYTUw7XG4gIGlmICgheG1sKSB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBlcnJvclwiKTtcbiAgcmV0dXJuIHhtbDtcbn0pO1xuXG52YXIgZHN2ID0gZnVuY3Rpb24oZGVmYXVsdE1pbWVUeXBlLCBwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24odXJsLCByb3csIGNhbGxiYWNrKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpO1xuICAgIHIucm93ID0gZnVuY3Rpb24oXykgeyByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHIucmVzcG9uc2UocmVzcG9uc2VPZihwYXJzZSwgcm93ID0gXykpIDogcm93OyB9O1xuICAgIHIucm93KHJvdyk7XG4gICAgcmV0dXJuIGNhbGxiYWNrID8gci5nZXQoY2FsbGJhY2spIDogcjtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIHJlc3BvbnNlT2YocGFyc2UsIHJvdykge1xuICByZXR1cm4gZnVuY3Rpb24ocmVxdWVzdCQkMSkge1xuICAgIHJldHVybiBwYXJzZShyZXF1ZXN0JCQxLnJlc3BvbnNlVGV4dCwgcm93KTtcbiAgfTtcbn1cblxudmFyIGNzdiA9IGRzdihcInRleHQvY3N2XCIsIGQzRHN2LmNzdlBhcnNlKTtcblxudmFyIHRzdiA9IGRzdihcInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcIiwgZDNEc3YudHN2UGFyc2UpO1xuXG5leHBvcnRzLnJlcXVlc3QgPSByZXF1ZXN0O1xuZXhwb3J0cy5odG1sID0gaHRtbDtcbmV4cG9ydHMuanNvbiA9IGpzb247XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuZXhwb3J0cy54bWwgPSB4bWw7XG5leHBvcnRzLmNzdiA9IGNzdjtcbmV4cG9ydHMudHN2ID0gdHN2O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZyBWZXJzaW9uIDQuMS4xLiBDb3B5cmlnaHQgMjAxNiBNaWtlIEJvc3RvY2suXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KChnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pKSk7XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdmVyc2lvbiA9IFwiNC4xLjFcIjtcblxuICBmdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpc2VjdG9yKGNvbXBhcmUpIHtcbiAgICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsbztcbiAgICAgIH0sXG4gICAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG87XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICAgIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICAgIH07XG4gIH1cblxuICB2YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbiAgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuICB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuXG4gIGZ1bmN0aW9uIGRlc2NlbmRpbmcoYSwgYikge1xuICAgIHJldHVybiBiIDwgYSA/IC0xIDogYiA+IGEgPyAxIDogYiA+PSBhID8gMCA6IE5hTjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG51bWJlcih4KSB7XG4gICAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhcmlhbmNlKGFycmF5LCBmKSB7XG4gICAgdmFyIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIG0gPSAwLFxuICAgICAgICBhLFxuICAgICAgICBkLFxuICAgICAgICBzID0gMCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBqID0gMDtcblxuICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICghaXNOYU4oYSA9IG51bWJlcihhcnJheVtpXSkpKSB7XG4gICAgICAgICAgZCA9IGEgLSBtO1xuICAgICAgICAgIG0gKz0gZCAvICsrajtcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIWlzTmFOKGEgPSBudW1iZXIoZihhcnJheVtpXSwgaSwgYXJyYXkpKSkpIHtcbiAgICAgICAgICBkID0gYSAtIG07XG4gICAgICAgICAgbSArPSBkIC8gKytqO1xuICAgICAgICAgIHMgKz0gZCAqIChhIC0gbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaiA+IDEpIHJldHVybiBzIC8gKGogLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRldmlhdGlvbihhcnJheSwgZikge1xuICAgIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICAgIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVudChhcnJheSwgZikge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGIsXG4gICAgICAgIGM7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7IGEgPSBjID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuICAgICAgICBpZiAoYyA8IGIpIGMgPSBiO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYoYXJyYXlbaV0sIGksIGFycmF5KSkgIT0gbnVsbCAmJiBiID49IGIpIHsgYSA9IGMgPSBiOyBicmVhazsgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYoYXJyYXlbaV0sIGksIGFycmF5KSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuICAgICAgICBpZiAoYyA8IGIpIGMgPSBiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbYSwgY107XG4gIH1cblxuICB2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4gIHZhciBtYXAgPSBhcnJheS5tYXA7XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZShzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG5cbiAgdmFyIGUxMCA9IE1hdGguc3FydCg1MCk7XG4gIHZhciBlNSA9IE1hdGguc3FydCgxMCk7XG4gIHZhciBlMiA9IE1hdGguc3FydCgyKTtcbiAgZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gICAgdmFyIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIHJldHVybiByYW5nZShcbiAgICAgIE1hdGguY2VpbChzdGFydCAvIHN0ZXApICogc3RlcCxcbiAgICAgIE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApICogc3RlcCArIHN0ZXAgLyAyLCAvLyBpbmNsdXNpdmVcbiAgICAgIHN0ZXBcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gICAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICAgIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICAgIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICAgIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICAgIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0dXJnZXModmFsdWVzKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yKSArIDE7XG4gIH1cblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oKSB7XG4gICAgdmFyIHZhbHVlID0gaWRlbnRpdHksXG4gICAgICAgIGRvbWFpbiA9IGV4dGVudCxcbiAgICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICAgIGZ1bmN0aW9uIGhpc3RvZ3JhbShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgeCxcbiAgICAgICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobik7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFsdWVzW2ldID0gdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICAgIHgwID0geHpbMF0sXG4gICAgICAgICAgeDEgPSB4elsxXSxcbiAgICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB0eiA9IHRpY2tzKHgwLCB4MSwgdHopO1xuXG4gICAgICAvLyBSZW1vdmUgYW55IHRocmVzaG9sZHMgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgICAgdmFyIG0gPSB0ei5sZW5ndGg7XG4gICAgICB3aGlsZSAodHpbMF0gPD0geDApIHR6LnNoaWZ0KCksIC0tbTtcbiAgICAgIHdoaWxlICh0elttIC0gMV0gPj0geDEpIHR6LnBvcCgpLCAtLW07XG5cbiAgICAgIHZhciBiaW5zID0gbmV3IEFycmF5KG0gKyAxKSxcbiAgICAgICAgICBiaW47XG5cbiAgICAgIC8vIEluaXRpYWxpemUgYmlucy5cbiAgICAgIGZvciAoaSA9IDA7IGkgPD0gbTsgKytpKSB7XG4gICAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcbiAgICAgICAgYmluLngwID0gaSA+IDAgPyB0eltpIC0gMV0gOiB4MDtcbiAgICAgICAgYmluLngxID0gaSA8IG0gPyB0eltpXSA6IHgxO1xuICAgICAgfVxuXG4gICAgICAvLyBBc3NpZ24gZGF0YSB0byBiaW5zIGJ5IHZhbHVlLCBpZ25vcmluZyBhbnkgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICB4ID0gdmFsdWVzW2ldO1xuICAgICAgICBpZiAoeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgICAgYmluc1tiaXNlY3RSaWdodCh0eiwgeCwgMCwgbSldLnB1c2goZGF0YVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJpbnM7XG4gICAgfVxuXG4gICAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdmFsdWU7XG4gICAgfTtcblxuICAgIGhpc3RvZ3JhbS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtfWzBdLCBfWzFdXSksIGhpc3RvZ3JhbSkgOiBkb21haW47XG4gICAgfTtcblxuICAgIGhpc3RvZ3JhbS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHRocmVzaG9sZDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRocmVzaG9sZChhcnJheSwgcCwgZikge1xuICAgIGlmIChmID09IG51bGwpIGYgPSBudW1iZXI7XG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICtmKGFycmF5WzBdLCAwLCBhcnJheSk7XG4gICAgaWYgKHAgPj0gMSkgcmV0dXJuICtmKGFycmF5W24gLSAxXSwgbiAtIDEsIGFycmF5KTtcbiAgICB2YXIgbixcbiAgICAgICAgaCA9IChuIC0gMSkgKiBwLFxuICAgICAgICBpID0gTWF0aC5mbG9vcihoKSxcbiAgICAgICAgYSA9ICtmKGFycmF5W2ldLCBpLCBhcnJheSksXG4gICAgICAgIGIgPSArZihhcnJheVtpICsgMV0sIGkgKyAxLCBhcnJheSk7XG4gICAgcmV0dXJuIGEgKyAoYiAtIGEpICogKGggLSBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWVkbWFuRGlhY29uaXModmFsdWVzLCBtaW4sIG1heCkge1xuICAgIHZhbHVlcyA9IG1hcC5jYWxsKHZhbHVlcywgbnVtYmVyKS5zb3J0KGFzY2VuZGluZyk7XG4gICAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgyICogKHRocmVzaG9sZCh2YWx1ZXMsIDAuNzUpIC0gdGhyZXNob2xkKHZhbHVlcywgMC4yNSkpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NvdHQodmFsdWVzLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoMy41ICogZGV2aWF0aW9uKHZhbHVlcykgKiBNYXRoLnBvdyh2YWx1ZXMubGVuZ3RoLCAtMSAvIDMpKSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXgoYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBiO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID4gYSkgYSA9IGI7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZihhcnJheVtpXSwgaSwgYXJyYXkpKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYiA+IGEpIGEgPSBiO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVhbihhcnJheSwgZikge1xuICAgIHZhciBzID0gMCxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgYSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBqID0gbjtcblxuICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWlzTmFOKGEgPSBudW1iZXIoYXJyYXlbaV0pKSkgcyArPSBhOyBlbHNlIC0tajtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWlzTmFOKGEgPSBudW1iZXIoZihhcnJheVtpXSwgaSwgYXJyYXkpKSkpIHMgKz0gYTsgZWxzZSAtLWo7XG4gICAgfVxuXG4gICAgaWYgKGopIHJldHVybiBzIC8gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lZGlhbihhcnJheSwgZikge1xuICAgIHZhciBudW1iZXJzID0gW10sXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGkgPSAtMTtcblxuICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWlzTmFOKGEgPSBudW1iZXIoYXJyYXlbaV0pKSkgbnVtYmVycy5wdXNoKGEpO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghaXNOYU4oYSA9IG51bWJlcihmKGFycmF5W2ldLCBpLCBhcnJheSkpKSkgbnVtYmVycy5wdXNoKGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aHJlc2hvbGQobnVtYmVycy5zb3J0KGFzY2VuZGluZyksIDAuNSk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZShhcnJheXMpIHtcbiAgICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgIG0sXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIG1lcmdlZCxcbiAgICAgICAgYXJyYXk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICAgIG1lcmdlZCA9IG5ldyBBcnJheShqKTtcblxuICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgICBtID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKC0tbSA+PSAwKSB7XG4gICAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1pbihhcnJheSwgZikge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGI7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7IGEgPSBiOyBicmVhazsgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYiA+PSBiKSB7IGEgPSBiOyBicmVhazsgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYoYXJyYXlbaV0sIGksIGFycmF5KSkgIT0gbnVsbCAmJiBhID4gYikgYSA9IGI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBwYWlycyhhcnJheSkge1xuICAgIHZhciBpID0gMCwgbiA9IGFycmF5Lmxlbmd0aCAtIDEsIHAgPSBhcnJheVswXSwgcGFpcnMgPSBuZXcgQXJyYXkobiA8IDAgPyAwIDogbik7XG4gICAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IFtwLCBwID0gYXJyYXlbKytpXV07XG4gICAgcmV0dXJuIHBhaXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVybXV0ZShhcnJheSwgaW5kZXhlcykge1xuICAgIHZhciBpID0gaW5kZXhlcy5sZW5ndGgsIHBlcm11dGVzID0gbmV3IEFycmF5KGkpO1xuICAgIHdoaWxlIChpLS0pIHBlcm11dGVzW2ldID0gYXJyYXlbaW5kZXhlc1tpXV07XG4gICAgcmV0dXJuIHBlcm11dGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbihhcnJheSwgY29tcGFyZSkge1xuICAgIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgeGksXG4gICAgICAgIHhqID0gYXJyYXlbal07XG5cbiAgICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbXBhcmUoeGkgPSBhcnJheVtpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHhqID0geGksIGogPSBpO1xuXG4gICAgaWYgKGNvbXBhcmUoeGosIHhqKSA9PT0gMCkgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5LCBpMCwgaTEpIHtcbiAgICB2YXIgbSA9IChpMSA9PSBudWxsID8gYXJyYXkubGVuZ3RoIDogaTEpIC0gKGkwID0gaTAgPT0gbnVsbCA/IDAgOiAraTApLFxuICAgICAgICB0LFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKG0pIHtcbiAgICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICAgIHQgPSBhcnJheVttICsgaTBdO1xuICAgICAgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF07XG4gICAgICBhcnJheVtpICsgaTBdID0gdDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICBmdW5jdGlvbiBzdW0oYXJyYXksIGYpIHtcbiAgICB2YXIgcyA9IDAsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGkgPSAtMTtcblxuICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoYSA9ICthcnJheVtpXSkgcyArPSBhOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChhID0gK2YoYXJyYXlbaV0sIGksIGFycmF5KSkgcyArPSBhO1xuICAgIH1cblxuICAgIHJldHVybiBzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNwb3NlKG1hdHJpeCkge1xuICAgIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICAgIGZvciAodmFyIGkgPSAtMSwgbSA9IG1pbihtYXRyaXgsIGxlbmd0aCksIHRyYW5zcG9zZSA9IG5ldyBBcnJheShtKTsgKytpIDwgbTspIHtcbiAgICAgIGZvciAodmFyIGogPSAtMSwgbiwgcm93ID0gdHJhbnNwb3NlW2ldID0gbmV3IEFycmF5KG4pOyArK2ogPCBuOykge1xuICAgICAgICByb3dbal0gPSBtYXRyaXhbal1baV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cmFuc3Bvc2U7XG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGgoZCkge1xuICAgIHJldHVybiBkLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHppcCgpIHtcbiAgICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG4gIH1cblxuICB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbiAgZnVuY3Rpb24gTWFwKCkge31cblxuICBNYXAucHJvdG90eXBlID0gbWFwJDEucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBNYXAsXG4gICAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICAgIH0sXG4gICAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIGtleXM7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgIH0sXG4gICAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2l6ZSA9IDA7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgICAgcmV0dXJuIHNpemU7XG4gICAgfSxcbiAgICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBtYXAkMShvYmplY3QsIGYpIHtcbiAgICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAgIC8vIENvcHkgY29uc3RydWN0b3IuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAgIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgICAgbztcblxuICAgICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gICAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5lc3QoKSB7XG4gICAgdmFyIGtleXMgPSBbXSxcbiAgICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgICAgc29ydFZhbHVlcyxcbiAgICAgICAgcm9sbHVwLFxuICAgICAgICBuZXN0O1xuXG4gICAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gcm9sbHVwICE9IG51bGxcbiAgICAgICAgICA/IHJvbGx1cChhcnJheSkgOiAoc29ydFZhbHVlcyAhPSBudWxsXG4gICAgICAgICAgPyBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpXG4gICAgICAgICAgOiBhcnJheSk7XG5cbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICAgIGtleVZhbHVlLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwJDEoKSxcbiAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmVzdCA9IHtcbiAgICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gICAgcmV0dXJuIG1hcCQxKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNldCgpIHt9XG5cbiAgdmFyIHByb3RvID0gbWFwJDEucHJvdG90eXBlO1xuXG4gIFNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBTZXQsXG4gICAgaGFzOiBwcm90by5oYXMsXG4gICAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFsdWUgKz0gXCJcIjtcbiAgICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICAgIGNsZWFyOiBwcm90by5jbGVhcixcbiAgICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gICAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgICBlbXB0eTogcHJvdG8uZW1wdHksXG4gICAgZWFjaDogcHJvdG8uZWFjaFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAgIC8vIENvcHkgY29uc3RydWN0b3IuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICAgIGVsc2UgaWYgKG9iamVjdCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGtleXMobWFwKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlcyhtYXApIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtrZXk6IGtleSwgdmFsdWU6IG1hcFtrZXldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiB1bmlmb3JtKG1pbiwgbWF4KSB7XG4gICAgbWluID0gbWluID09IG51bGwgPyAwIDogK21pbjtcbiAgICBtYXggPSBtYXggPT0gbnVsbCA/IDEgOiArbWF4O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBtYXggPSBtaW4sIG1pbiA9IDA7XG4gICAgZWxzZSBtYXggLT0gbWluO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogbWF4ICsgbWluO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICAgICAgciA9IHggKiB4ICsgeSAqIHk7XG4gICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cbiAgICAgIHJldHVybiBtdSArIHNpZ21hICogeSAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ05vcm1hbCgpIHtcbiAgICB2YXIgcmFuZG9tTm9ybWFsID0gbm9ybWFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbU5vcm1hbCgpKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaXJ3aW5IYWxsKG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IE1hdGgucmFuZG9tKCk7XG4gICAgICByZXR1cm4gc3VtO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBiYXRlcyhuKSB7XG4gICAgdmFyIHJhbmRvbUlyd2luSGFsbCA9IGlyd2luSGFsbChuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsKCkgLyBuO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBleHBvbmVudGlhbChsYW1iZGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gLU1hdGgubG9nKDEgLSBNYXRoLnJhbmRvbSgpKSAvIGxhbWJkYTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFyKHQpIHtcbiAgICByZXR1cm4gK3Q7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkSW4odCkge1xuICAgIHJldHVybiB0ICogdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YWRPdXQodCkge1xuICAgIHJldHVybiB0ICogKDIgLSB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgOiAtLXQgKiAoMiAtIHQpICsgMSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gZWFzZUN1YmljSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG4gIH1cblxuICB2YXIgZXhwb25lbnQgPSAzO1xuXG4gIHZhciBwb2x5SW4gPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgICBlID0gK2U7XG5cbiAgICBmdW5jdGlvbiBwb2x5SW4odCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICAgIH1cblxuICAgIHBvbHlJbi5leHBvbmVudCA9IGN1c3RvbTtcblxuICAgIHJldHVybiBwb2x5SW47XG4gIH0pKGV4cG9uZW50KTtcblxuICB2YXIgcG9seU91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICAgIGUgPSArZTtcblxuICAgIGZ1bmN0aW9uIHBvbHlPdXQodCkge1xuICAgICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gdCwgZSk7XG4gICAgfVxuXG4gICAgcG9seU91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICAgIHJldHVybiBwb2x5T3V0O1xuICB9KShleHBvbmVudCk7XG5cbiAgdmFyIHBvbHlJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICAgIGUgPSArZTtcblxuICAgIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XG4gICAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdyh0LCBlKSA6IDIgLSBNYXRoLnBvdygyIC0gdCwgZSkpIC8gMjtcbiAgICB9XG5cbiAgICBwb2x5SW5PdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgICByZXR1cm4gcG9seUluT3V0O1xuICB9KShleHBvbmVudCk7XG5cbiAgdmFyIHBpID0gTWF0aC5QSTtcbiAgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbiAgZnVuY3Rpb24gc2luSW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaW5PdXQodCkge1xuICAgIHJldHVybiBNYXRoLnNpbih0ICogaGFsZlBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbkluT3V0KHQpIHtcbiAgICByZXR1cm4gKDEgLSBNYXRoLmNvcyhwaSAqIHQpKSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBleHBJbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogdCAtIDEwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cE91dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygyLCAtMTAgKiB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cEluT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCkgOiAyIC0gTWF0aC5wb3coMiwgMTAgLSAxMCAqIHQpKSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGVJbih0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNpcmNsZU91dCh0KSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS10ICogdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGVJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpIDogTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSkgLyAyO1xuICB9XG5cbiAgdmFyIGIxID0gNCAvIDExO1xuICB2YXIgYjIgPSA2IC8gMTE7XG4gIHZhciBiMyA9IDggLyAxMTtcbiAgdmFyIGI0ID0gMyAvIDQ7XG4gIHZhciBiNSA9IDkgLyAxMTtcbiAgdmFyIGI2ID0gMTAgLyAxMTtcbiAgdmFyIGI3ID0gMTUgLyAxNjtcbiAgdmFyIGI4ID0gMjEgLyAyMjtcbiAgdmFyIGI5ID0gNjMgLyA2NDtcbiAgdmFyIGIwID0gMSAvIGIxIC8gYjE7XG4gIGZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcbiAgICByZXR1cm4gMSAtIGJvdW5jZU91dCgxIC0gdCk7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuY2VPdXQodCkge1xuICAgIHJldHVybiAodCA9ICt0KSA8IGIxID8gYjAgKiB0ICogdCA6IHQgPCBiMyA/IGIwICogKHQgLT0gYjIpICogdCArIGI0IDogdCA8IGI2ID8gYjAgKiAodCAtPSBiNSkgKiB0ICsgYjcgOiBiMCAqICh0IC09IGI4KSAqIHQgKyBiOTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5jZUluT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gYm91bmNlT3V0KDEgLSB0KSA6IGJvdW5jZU91dCh0IC0gMSkgKyAxKSAvIDI7XG4gIH1cblxuICB2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcblxuICB2YXIgYmFja0luID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gICAgcyA9ICtzO1xuXG4gICAgZnVuY3Rpb24gYmFja0luKHQpIHtcbiAgICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICAgIH1cblxuICAgIGJhY2tJbi5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgICByZXR1cm4gYmFja0luO1xuICB9KShvdmVyc2hvb3QpO1xuXG4gIHZhciBiYWNrT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gICAgcyA9ICtzO1xuXG4gICAgZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgICB9XG5cbiAgICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICAgIHJldHVybiBiYWNrT3V0O1xuICB9KShvdmVyc2hvb3QpO1xuXG4gIHZhciBiYWNrSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgICBzID0gK3M7XG5cbiAgICBmdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XG4gICAgfVxuXG4gICAgYmFja0luT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICAgIHJldHVybiBiYWNrSW5PdXQ7XG4gIH0pKG92ZXJzaG9vdCk7XG5cbiAgdmFyIHRhdSA9IDIgKiBNYXRoLlBJO1xuICB2YXIgYW1wbGl0dWRlID0gMTtcbiAgdmFyIHBlcmlvZCA9IDAuMztcbiAgdmFyIGVsYXN0aWNJbiA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICAgIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gICAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgMTAgKiAtLXQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApO1xuICAgIH1cblxuICAgIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gICAgZWxhc3RpY0luLnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICAgIHJldHVybiBlbGFzdGljSW47XG4gIH0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuICB2YXIgZWxhc3RpY091dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICAgIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gICAgZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XG4gICAgICByZXR1cm4gMSAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCA9ICt0KSkgKiBNYXRoLnNpbigodCArIHMpIC8gcCk7XG4gICAgfVxuXG4gICAgZWxhc3RpY091dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gICAgZWxhc3RpY091dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgICByZXR1cm4gZWxhc3RpY091dDtcbiAgfSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG4gIHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICAgIGZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG4gICAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgICA/IGEgKiBNYXRoLnBvdygyLCAxMCAqIHQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApXG4gICAgICAgICAgOiAyIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHMgKyB0KSAvIHApKSAvIDI7XG4gICAgfVxuXG4gICAgZWxhc3RpY0luT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgICBlbGFzdGljSW5PdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gICAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbiAgfSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG4gIGZ1bmN0aW9uIGFyZWEocG9seWdvbikge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgICAgYSxcbiAgICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgICBhcmVhID0gMDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgICAgYXJlYSArPSBhWzFdICogYlswXSAtIGFbMF0gKiBiWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBhcmVhIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkKHBvbHlnb24pIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIHggPSAwLFxuICAgICAgICB5ID0gMCxcbiAgICAgICAgYSxcbiAgICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgICBjLFxuICAgICAgICBrID0gMDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgICAgayArPSBjID0gYVswXSAqIGJbMV0gLSBiWzBdICogYVsxXTtcbiAgICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuICAgIH1cblxuICAgIHJldHVybiBrICo9IDMsIFt4IC8gaywgeSAvIGtdO1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgMkQgY3Jvc3MgcHJvZHVjdCBvZiBBQiBhbmQgQUMgdmVjdG9ycywgaS5lLiwgdGhlIHotY29tcG9uZW50IG9mXG4gIC8vIHRoZSAzRCBjcm9zcyBwcm9kdWN0IGluIGEgcXVhZHJhbnQgSSBDYXJ0ZXNpYW4gY29vcmRpbmF0ZSBzeXN0ZW0gKCt4IGlzXG4gIC8vIHJpZ2h0LCAreSBpcyB1cCkuIFJldHVybnMgYSBwb3NpdGl2ZSB2YWx1ZSBpZiBBQkMgaXMgY291bnRlci1jbG9ja3dpc2UsXG4gIC8vIG5lZ2F0aXZlIGlmIGNsb2Nrd2lzZSwgYW5kIHplcm8gaWYgdGhlIHBvaW50cyBhcmUgY29sbGluZWFyLlxuICBmdW5jdGlvbiBjcm9zcyhhLCBiLCBjKSB7XG4gICAgcmV0dXJuIChiWzBdIC0gYVswXSkgKiAoY1sxXSAtIGFbMV0pIC0gKGJbMV0gLSBhWzFdKSAqIChjWzBdIC0gYVswXSk7XG4gIH1cblxuICBmdW5jdGlvbiBsZXhpY29ncmFwaGljT3JkZXIoYSwgYikge1xuICAgIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIHRoZSB1cHBlciBjb252ZXggaHVsbCBwZXIgdGhlIG1vbm90b25lIGNoYWluIGFsZ29yaXRobS5cbiAgLy8gQXNzdW1lcyBwb2ludHMubGVuZ3RoID49IDMsIGlzIHNvcnRlZCBieSB4LCB1bmlxdWUgaW4geS5cbiAgLy8gUmV0dXJucyBhbiBhcnJheSBvZiBpbmRpY2VzIGludG8gcG9pbnRzIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gIGZ1bmN0aW9uIGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHBvaW50cykge1xuICAgIHZhciBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgaW5kZXhlcyA9IFswLCAxXSxcbiAgICAgICAgc2l6ZSA9IDI7XG5cbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IG47ICsraSkge1xuICAgICAgd2hpbGUgKHNpemUgPiAxICYmIGNyb3NzKHBvaW50c1tpbmRleGVzW3NpemUgLSAyXV0sIHBvaW50c1tpbmRleGVzW3NpemUgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1zaXplO1xuICAgICAgaW5kZXhlc1tzaXplKytdID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXhlcy5zbGljZSgwLCBzaXplKTsgLy8gcmVtb3ZlIHBvcHBlZCBwb2ludHNcbiAgfVxuXG4gIGZ1bmN0aW9uIGh1bGwocG9pbnRzKSB7XG4gICAgaWYgKChuID0gcG9pbnRzLmxlbmd0aCkgPCAzKSByZXR1cm4gbnVsbDtcblxuICAgIHZhciBpLFxuICAgICAgICBuLFxuICAgICAgICBzb3J0ZWRQb2ludHMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGZsaXBwZWRQb2ludHMgPSBuZXcgQXJyYXkobik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzb3J0ZWRQb2ludHNbaV0gPSBbK3BvaW50c1tpXVswXSwgK3BvaW50c1tpXVsxXSwgaV07XG4gICAgc29ydGVkUG9pbnRzLnNvcnQobGV4aWNvZ3JhcGhpY09yZGVyKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBmbGlwcGVkUG9pbnRzW2ldID0gW3NvcnRlZFBvaW50c1tpXVswXSwgLXNvcnRlZFBvaW50c1tpXVsxXV07XG5cbiAgICB2YXIgdXBwZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoc29ydGVkUG9pbnRzKSxcbiAgICAgICAgbG93ZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoZmxpcHBlZFBvaW50cyk7XG5cbiAgICAvLyBDb25zdHJ1Y3QgdGhlIGh1bGwgcG9seWdvbiwgcmVtb3ZpbmcgcG9zc2libGUgZHVwbGljYXRlIGVuZHBvaW50cy5cbiAgICB2YXIgc2tpcExlZnQgPSBsb3dlckluZGV4ZXNbMF0gPT09IHVwcGVySW5kZXhlc1swXSxcbiAgICAgICAgc2tpcFJpZ2h0ID0gbG93ZXJJbmRleGVzW2xvd2VySW5kZXhlcy5sZW5ndGggLSAxXSA9PT0gdXBwZXJJbmRleGVzW3VwcGVySW5kZXhlcy5sZW5ndGggLSAxXSxcbiAgICAgICAgaHVsbCA9IFtdO1xuXG4gICAgLy8gQWRkIHVwcGVyIGh1bGwgaW4gcmlnaHQtdG8tbCBvcmRlci5cbiAgICAvLyBUaGVuIGFkZCBsb3dlciBodWxsIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gICAgZm9yIChpID0gdXBwZXJJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1t1cHBlckluZGV4ZXNbaV1dWzJdXSk7XG4gICAgZm9yIChpID0gK3NraXBMZWZ0OyBpIDwgbG93ZXJJbmRleGVzLmxlbmd0aCAtIHNraXBSaWdodDsgKytpKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1tsb3dlckluZGV4ZXNbaV1dWzJdXSk7XG5cbiAgICByZXR1cm4gaHVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRhaW5zKHBvbHlnb24sIHBvaW50KSB7XG4gICAgdmFyIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgICAgcCA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgICB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXSxcbiAgICAgICAgeDAgPSBwWzBdLCB5MCA9IHBbMV0sXG4gICAgICAgIHgxLCB5MSxcbiAgICAgICAgaW5zaWRlID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgcCA9IHBvbHlnb25baV0sIHgxID0gcFswXSwgeTEgPSBwWzFdO1xuICAgICAgaWYgKCgoeTEgPiB5KSAhPT0gKHkwID4geSkpICYmICh4IDwgKHgwIC0geDEpICogKHkgLSB5MSkgLyAoeTAgLSB5MSkgKyB4MSkpIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICB4MCA9IHgxLCB5MCA9IHkxO1xuICAgIH1cblxuICAgIHJldHVybiBpbnNpZGU7XG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGgkMShwb2x5Z29uKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICAgIHhhLFxuICAgICAgICB5YSxcbiAgICAgICAgeGIgPSBiWzBdLFxuICAgICAgICB5YiA9IGJbMV0sXG4gICAgICAgIHBlcmltZXRlciA9IDA7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgeGEgPSB4YjtcbiAgICAgIHlhID0geWI7XG4gICAgICBiID0gcG9seWdvbltpXTtcbiAgICAgIHhiID0gYlswXTtcbiAgICAgIHliID0gYlsxXTtcbiAgICAgIHhhIC09IHhiO1xuICAgICAgeWEgLT0geWI7XG4gICAgICBwZXJpbWV0ZXIgKz0gTWF0aC5zcXJ0KHhhICogeGEgKyB5YSAqIHlhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVyaW1ldGVyO1xuICB9XG5cbnZhciAgIHBpJDEgPSBNYXRoLlBJO1xudmFyICAgdGF1JDEgPSAyICogcGkkMTtcbiAgdmFyIGVwc2lsb24gPSAxZS02O1xuICB2YXIgdGF1RXBzaWxvbiA9IHRhdSQxIC0gZXBzaWxvbjtcbiAgZnVuY3Rpb24gUGF0aCgpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXG4gICAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgICB0aGlzLl8gPSBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGgoKSB7XG4gICAgcmV0dXJuIG5ldyBQYXRoO1xuICB9XG5cbiAgUGF0aC5wcm90b3R5cGUgPSBwYXRoLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHRoaXMuXy5wdXNoKFwiTVwiLCB0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gsIFwiLFwiLCB0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICAgIH0sXG4gICAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgICB0aGlzLl8ucHVzaChcIlpcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHRoaXMuXy5wdXNoKFwiTFwiLCB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTEgPSAreSk7XG4gICAgfSxcbiAgICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICAgIHRoaXMuXy5wdXNoKFwiUVwiLCAreDEsIFwiLFwiLCAreTEsIFwiLFwiLCB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTEgPSAreSk7XG4gICAgfSxcbiAgICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgICAgdGhpcy5fLnB1c2goXCJDXCIsICt4MSwgXCIsXCIsICt5MSwgXCIsXCIsICt4MiwgXCIsXCIsICt5MiwgXCIsXCIsIHRoaXMuX3gxID0gK3gsIFwiLFwiLCB0aGlzLl95MSA9ICt5KTtcbiAgICB9LFxuICAgIGFyY1RvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Miwgcikge1xuICAgICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICAgIHkwID0gdGhpcy5feTEsXG4gICAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICAgIHgwMSA9IHgwIC0geDEsXG4gICAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgXCJNXCIsIHRoaXMuX3gxID0geDEsIFwiLFwiLCB0aGlzLl95MSA9IHkxXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxuICAgICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAgIC8vIEVxdWl2YWxlbnRseSwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgyLHkyKT9cbiAgICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiTFwiLCB0aGlzLl94MSA9IHgxLCBcIixcIiwgdGhpcy5feTEgPSB5MVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICAgIGwyMV8yID0geDIxICogeDIxICsgeTIxICogeTIxLFxuICAgICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgICAgbDAxID0gTWF0aC5zcXJ0KGwwMV8yKSxcbiAgICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpJDEgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgICAgdDAxID0gbCAvIGwwMSxcbiAgICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgICBpZiAoTWF0aC5hYnModDAxIC0gMSkgPiBlcHNpbG9uKSB7XG4gICAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgICBcIkxcIiwgeDEgKyB0MDEgKiB4MDEsIFwiLFwiLCB5MSArIHQwMSAqIHkwMVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl8ucHVzaChcbiAgICAgICAgICBcIkFcIiwgciwgXCIsXCIsIHIsIFwiLDAsMCxcIiwgKyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApLCBcIixcIiwgdGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSwgXCIsXCIsIHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgXCJNXCIsIHgwLCBcIixcIiwgeTBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgXCJMXCIsIHgwLCBcIixcIiwgeTBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiQVwiLCByLCBcIixcIiwgciwgXCIsMCwxLFwiLCBjdywgXCIsXCIsIHggLSBkeCwgXCIsXCIsIHkgLSBkeSxcbiAgICAgICAgICBcIkFcIiwgciwgXCIsXCIsIHIsIFwiLDAsMSxcIiwgY3csIFwiLFwiLCB0aGlzLl94MSA9IHgwLCBcIixcIiwgdGhpcy5feTEgPSB5MFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUkMSArIHRhdSQxO1xuICAgICAgICB0aGlzLl8ucHVzaChcbiAgICAgICAgICBcIkFcIiwgciwgXCIsXCIsIHIsIFwiLDAsXCIsICsoZGEgPj0gcGkkMSksIFwiLFwiLCBjdywgXCIsXCIsIHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSksIFwiLFwiLCB0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgICB0aGlzLl8ucHVzaChcIk1cIiwgdGhpcy5feDAgPSB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTAgPSB0aGlzLl95MSA9ICt5LCBcImhcIiwgK3csIFwidlwiLCAraCwgXCJoXCIsIC13LCBcIlpcIik7XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmpvaW4oXCJcIik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHRyZWVfYWRkKGQpIHtcbiAgICB2YXIgeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCksXG4gICAgICAgIHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpO1xuICAgIHJldHVybiBhZGQodGhpcy5jb3Zlcih4LCB5KSwgeCwgeSwgZCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGQodHJlZSwgeCwgeSwgZCkge1xuICAgIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gICAgdmFyIHBhcmVudCxcbiAgICAgICAgbm9kZSA9IHRyZWUuX3Jvb3QsXG4gICAgICAgIGxlYWYgPSB7ZGF0YTogZH0sXG4gICAgICAgIHgwID0gdHJlZS5feDAsXG4gICAgICAgIHkwID0gdHJlZS5feTAsXG4gICAgICAgIHgxID0gdHJlZS5feDEsXG4gICAgICAgIHkxID0gdHJlZS5feTEsXG4gICAgICAgIHhtLFxuICAgICAgICB5bSxcbiAgICAgICAgeHAsXG4gICAgICAgIHlwLFxuICAgICAgICByaWdodCxcbiAgICAgICAgYm90dG9tLFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICAgIGlmICghbm9kZSkgcmV0dXJuIHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gICAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxuICAgIHdoaWxlIChub2RlLmxlbmd0aCkge1xuICAgICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICAgIGlmIChwYXJlbnQgPSBub2RlLCAhKG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICAgIH1cblxuICAgIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICAgIHhwID0gK3RyZWUuX3guY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICAgIHlwID0gK3RyZWUuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICAgIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAgIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cbiAgICBkbyB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICB9IHdoaWxlICgoaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHQpID09PSAoaiA9ICh5cCA+PSB5bSkgPDwgMSB8ICh4cCA+PSB4bSkpKTtcbiAgICByZXR1cm4gcGFyZW50W2pdID0gbm9kZSwgcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEFsbChkYXRhKSB7XG4gICAgdmFyIGQsIGksIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgeHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHl6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB4MCA9IEluZmluaXR5LFxuICAgICAgICB5MCA9IEluZmluaXR5LFxuICAgICAgICB4MSA9IC1JbmZpbml0eSxcbiAgICAgICAgeTEgPSAtSW5maW5pdHk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwb2ludHMgYW5kIHRoZWlyIGV4dGVudC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCA9IGRhdGFbaV0pKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIGNvbnRpbnVlO1xuICAgICAgeHpbaV0gPSB4O1xuICAgICAgeXpbaV0gPSB5O1xuICAgICAgaWYgKHggPCB4MCkgeDAgPSB4O1xuICAgICAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICAgICAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICAgICAgaWYgKHkgPiB5MSkgeTEgPSB5O1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIHdlcmUgbm8gKHZhbGlkKSBwb2ludHMsIGluaGVyaXQgdGhlIGV4aXN0aW5nIGV4dGVudC5cbiAgICBpZiAoeDEgPCB4MCkgeDAgPSB0aGlzLl94MCwgeDEgPSB0aGlzLl94MTtcbiAgICBpZiAoeTEgPCB5MCkgeTAgPSB0aGlzLl95MCwgeTEgPSB0aGlzLl95MTtcblxuICAgIC8vIEV4cGFuZCB0aGUgdHJlZSB0byBjb3ZlciB0aGUgbmV3IHBvaW50cy5cbiAgICB0aGlzLmNvdmVyKHgwLCB5MCkuY292ZXIoeDEsIHkxKTtcblxuICAgIC8vIEFkZCB0aGUgbmV3IHBvaW50cy5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBhZGQodGhpcywgeHpbaV0sIHl6W2ldLCBkYXRhW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfY292ZXIoeCwgeSkge1xuICAgIGlmIChpc05hTih4ID0gK3gpIHx8IGlzTmFOKHkgPSAreSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICAgIHZhciB4MCA9IHRoaXMuX3gwLFxuICAgICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgICB5MSA9IHRoaXMuX3kxO1xuXG4gICAgLy8gSWYgdGhlIHF1YWR0cmVlIGhhcyBubyBleHRlbnQsIGluaXRpYWxpemUgdGhlbS5cbiAgICAvLyBJbnRlZ2VyIGV4dGVudCBhcmUgbmVjZXNzYXJ5IHNvIHRoYXQgaWYgd2UgbGF0ZXIgZG91YmxlIHRoZSBleHRlbnQsXG4gICAgLy8gdGhlIGV4aXN0aW5nIHF1YWRyYW50IGJvdW5kYXJpZXMgZG9u4oCZdCBjaGFuZ2UgZHVlIHRvIGZsb2F0aW5nIHBvaW50IGVycm9yIVxuICAgIGlmIChpc05hTih4MCkpIHtcbiAgICAgIHgxID0gKHgwID0gTWF0aC5mbG9vcih4KSkgKyAxO1xuICAgICAgeTEgPSAoeTAgPSBNYXRoLmZsb29yKHkpKSArIDE7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkb3VibGUgcmVwZWF0ZWRseSB0byBjb3Zlci5cbiAgICBlbHNlIGlmICh4MCA+IHggfHwgeCA+IHgxIHx8IHkwID4geSB8fCB5ID4geTEpIHtcbiAgICAgIHZhciB6ID0geDEgLSB4MCxcbiAgICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgaTtcblxuICAgICAgc3dpdGNoIChpID0gKHkgPCAoeTAgKyB5MSkgLyAyKSA8PCAxIHwgKHggPCAoeDAgKyB4MSkgLyAyKSkge1xuICAgICAgICBjYXNlIDA6IHtcbiAgICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgd2hpbGUgKHogKj0gMiwgeDEgPSB4MCArIHosIHkxID0geTAgKyB6LCB4ID4geDEgfHwgeSA+IHkxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE6IHtcbiAgICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgd2hpbGUgKHogKj0gMiwgeDAgPSB4MSAtIHosIHkxID0geTAgKyB6LCB4MCA+IHggfHwgeSA+IHkxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgd2hpbGUgKHogKj0gMiwgeDEgPSB4MCArIHosIHkwID0geTEgLSB6LCB4ID4geDEgfHwgeTAgPiB5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgd2hpbGUgKHogKj0gMiwgeDAgPSB4MSAtIHosIHkwID0geTEgLSB6LCB4MCA+IHggfHwgeTAgPiB5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lmxlbmd0aCkgdGhpcy5fcm9vdCA9IG5vZGU7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHF1YWR0cmVlIGNvdmVycyB0aGUgcG9pbnQgYWxyZWFkeSwganVzdCByZXR1cm4uXG4gICAgZWxzZSByZXR1cm4gdGhpcztcblxuICAgIHRoaXMuX3gwID0geDA7XG4gICAgdGhpcy5feTAgPSB5MDtcbiAgICB0aGlzLl94MSA9IHgxO1xuICAgIHRoaXMuX3kxID0geTE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX2RhdGEoKSB7XG4gICAgdmFyIGRhdGEgPSBbXTtcbiAgICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5sZW5ndGgpIGRvIGRhdGEucHVzaChub2RlLmRhdGEpOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfZXh0ZW50KF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMuY292ZXIoK19bMF1bMF0sICtfWzBdWzFdKS5jb3ZlcigrX1sxXVswXSwgK19bMV1bMV0pXG4gICAgICAgIDogaXNOYU4odGhpcy5feDApID8gdW5kZWZpbmVkIDogW1t0aGlzLl94MCwgdGhpcy5feTBdLCBbdGhpcy5feDEsIHRoaXMuX3kxXV07XG4gIH1cblxuICBmdW5jdGlvbiBRdWFkKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB0aGlzLngwID0geDA7XG4gICAgdGhpcy55MCA9IHkwO1xuICAgIHRoaXMueDEgPSB4MTtcbiAgICB0aGlzLnkxID0geTE7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX2ZpbmQoeCwgeSwgcmFkaXVzKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICAgIHgxLFxuICAgICAgICB5MSxcbiAgICAgICAgeDIsXG4gICAgICAgIHkyLFxuICAgICAgICB4MyA9IHRoaXMuX3gxLFxuICAgICAgICB5MyA9IHRoaXMuX3kxLFxuICAgICAgICBxdWFkcyA9IFtdLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcSxcbiAgICAgICAgaTtcblxuICAgIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHgwLCB5MCwgeDMsIHkzKSk7XG4gICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICBlbHNlIHtcbiAgICAgIHgwID0geCAtIHJhZGl1cywgeTAgPSB5IC0gcmFkaXVzO1xuICAgICAgeDMgPSB4ICsgcmFkaXVzLCB5MyA9IHkgKyByYWRpdXM7XG4gICAgICByYWRpdXMgKj0gcmFkaXVzO1xuICAgIH1cblxuICAgIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcblxuICAgICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW7igJl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICAgIGlmICghKG5vZGUgPSBxLm5vZGUpXG4gICAgICAgICAgfHwgKHgxID0gcS54MCkgPiB4M1xuICAgICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgICB8fCAoeDIgPSBxLngxKSA8IHgwXG4gICAgICAgICAgfHwgKHkyID0gcS55MSkgPCB5MCkgY29udGludWU7XG5cbiAgICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgICB2YXIgeG0gPSAoeDEgKyB4MikgLyAyLFxuICAgICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICAgIHF1YWRzLnB1c2goXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVszXSwgeG0sIHltLCB4MiwgeTIpLFxuICAgICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgICBuZXcgUXVhZChub2RlWzFdLCB4bSwgeTEsIHgyLCB5bSksXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVswXSwgeDEsIHkxLCB4bSwgeW0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gVmlzaXQgdGhlIGNsb3Nlc3QgcXVhZHJhbnQgZmlyc3QuXG4gICAgICAgIGlmIChpID0gKHkgPj0geW0pIDw8IDEgfCAoeCA+PSB4bSkpIHtcbiAgICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV0gPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV07XG4gICAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldID0gcTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBWaXNpdCB0aGlzIHBvaW50LiAoVmlzaXRpbmcgY29pbmNpZGVudCBwb2ludHMgaXNu4oCZdCBuZWNlc3NhcnkhKVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBkeCA9IHggLSArdGhpcy5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgICBkeSA9IHkgLSArdGhpcy5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIHtcbiAgICAgICAgICB2YXIgZCA9IE1hdGguc3FydChyYWRpdXMgPSBkMik7XG4gICAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgICB4MyA9IHggKyBkLCB5MyA9IHkgKyBkO1xuICAgICAgICAgIGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfcmVtb3ZlKGQpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gICAgdmFyIHBhcmVudCxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHJldGFpbmVyLFxuICAgICAgICBwcmV2aW91cyxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgICAgeTEgPSB0aGlzLl95MSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgeG0sXG4gICAgICAgIHltLFxuICAgICAgICByaWdodCxcbiAgICAgICAgYm90dG9tLFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICAgIGlmICghbm9kZSkgcmV0dXJuIHRoaXM7XG5cbiAgICAvLyBGaW5kIHRoZSBsZWFmIG5vZGUgZm9yIHRoZSBwb2ludC5cbiAgICAvLyBXaGlsZSBkZXNjZW5kaW5nLCBhbHNvIHJldGFpbiB0aGUgZGVlcGVzdCBwYXJlbnQgd2l0aCBhIG5vbi1yZW1vdmVkIHNpYmxpbmcuXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgICAgaWYgKCFub2RlLmxlbmd0aCkgYnJlYWs7XG4gICAgICBpZiAocGFyZW50WyhpICsgMSkgJiAzXSB8fCBwYXJlbnRbKGkgKyAyKSAmIDNdIHx8IHBhcmVudFsoaSArIDMpICYgM10pIHJldGFpbmVyID0gcGFyZW50LCBqID0gaTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBwb2ludCB0byByZW1vdmUuXG4gICAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKG5leHQgPSBub2RlLm5leHQpIGRlbGV0ZSBub2RlLm5leHQ7XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29pbmNpZGVudCBwb2ludHMsIHJlbW92ZSBqdXN0IHRoZSBwb2ludC5cbiAgICBpZiAocHJldmlvdXMpIHJldHVybiAobmV4dCA/IHByZXZpb3VzLm5leHQgPSBuZXh0IDogZGVsZXRlIHByZXZpb3VzLm5leHQpLCB0aGlzO1xuXG4gICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxuICAgIGlmICghcGFyZW50KSByZXR1cm4gdGhpcy5fcm9vdCA9IG5leHQsIHRoaXM7XG5cbiAgICAvLyBSZW1vdmUgdGhpcyBsZWFmLlxuICAgIG5leHQgPyBwYXJlbnRbaV0gPSBuZXh0IDogZGVsZXRlIHBhcmVudFtpXTtcblxuICAgIC8vIElmIHRoZSBwYXJlbnQgbm93IGNvbnRhaW5zIGV4YWN0bHkgb25lIGxlYWYsIGNvbGxhcHNlIHN1cGVyZmx1b3VzIHBhcmVudHMuXG4gICAgaWYgKChub2RlID0gcGFyZW50WzBdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzNdKVxuICAgICAgICAmJiBub2RlID09PSAocGFyZW50WzNdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzBdKVxuICAgICAgICAmJiAhbm9kZS5sZW5ndGgpIHtcbiAgICAgIGlmIChyZXRhaW5lcikgcmV0YWluZXJbal0gPSBub2RlO1xuICAgICAgZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFsbChkYXRhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBkYXRhLmxlbmd0aDsgaSA8IG47ICsraSkgdGhpcy5yZW1vdmUoZGF0YVtpXSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3Jvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3NpemUoKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gKytzaXplOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgICB9KTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfdmlzaXQoY2FsbGJhY2spIHtcbiAgICB2YXIgcXVhZHMgPSBbXSwgcSwgbm9kZSA9IHRoaXMuX3Jvb3QsIGNoaWxkLCB4MCwgeTAsIHgxLCB5MTtcbiAgICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICAgIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICAgIGlmICghY2FsbGJhY2sobm9kZSA9IHEubm9kZSwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxKSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgICB2YXIgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV92aXNpdEFmdGVyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICAgIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjaGlsZCwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxLCB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICAgIH1cbiAgICAgIG5leHQucHVzaChxKTtcbiAgICB9XG4gICAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhxLm5vZGUsIHEueDAsIHEueTAsIHEueDEsIHEueTEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcbiAgICByZXR1cm4gZFswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfeChfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feCA9IF8sIHRoaXMpIDogdGhpcy5feDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRZKGQpIHtcbiAgICByZXR1cm4gZFsxXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfeShfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feSA9IF8sIHRoaXMpIDogdGhpcy5feTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YWR0cmVlKG5vZGVzLCB4LCB5KSB7XG4gICAgdmFyIHRyZWUgPSBuZXcgUXVhZHRyZWUoeCA9PSBudWxsID8gZGVmYXVsdFggOiB4LCB5ID09IG51bGwgPyBkZWZhdWx0WSA6IHksIE5hTiwgTmFOLCBOYU4sIE5hTik7XG4gICAgcmV0dXJuIG5vZGVzID09IG51bGwgPyB0cmVlIDogdHJlZS5hZGRBbGwobm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB0aGlzLl94ID0geDtcbiAgICB0aGlzLl95ID0geTtcbiAgICB0aGlzLl94MCA9IHgwO1xuICAgIHRoaXMuX3kwID0geTA7XG4gICAgdGhpcy5feDEgPSB4MTtcbiAgICB0aGlzLl95MSA9IHkxO1xuICAgIHRoaXMuX3Jvb3QgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFmX2NvcHkobGVhZikge1xuICAgIHZhciBjb3B5ID0ge2RhdGE6IGxlYWYuZGF0YX0sIG5leHQgPSBjb3B5O1xuICAgIHdoaWxlIChsZWFmID0gbGVhZi5uZXh0KSBuZXh0ID0gbmV4dC5uZXh0ID0ge2RhdGE6IGxlYWYuZGF0YX07XG4gICAgcmV0dXJuIGNvcHk7XG4gIH1cblxuICB2YXIgdHJlZVByb3RvID0gcXVhZHRyZWUucHJvdG90eXBlID0gUXVhZHRyZWUucHJvdG90eXBlO1xuXG4gIHRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgUXVhZHRyZWUodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIGNoaWxkO1xuXG4gICAgaWYgKCFub2RlKSByZXR1cm4gY29weTtcblxuICAgIGlmICghbm9kZS5sZW5ndGgpIHJldHVybiBjb3B5Ll9yb290ID0gbGVhZl9jb3B5KG5vZGUpLCBjb3B5O1xuXG4gICAgbm9kZXMgPSBbe3NvdXJjZTogbm9kZSwgdGFyZ2V0OiBjb3B5Ll9yb290ID0gbmV3IEFycmF5KDQpfV07XG4gICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZS5zb3VyY2VbaV0pIHtcbiAgICAgICAgICBpZiAoY2hpbGQubGVuZ3RoKSBub2Rlcy5wdXNoKHtzb3VyY2U6IGNoaWxkLCB0YXJnZXQ6IG5vZGUudGFyZ2V0W2ldID0gbmV3IEFycmF5KDQpfSk7XG4gICAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICB0cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG4gIHRyZWVQcm90by5hZGRBbGwgPSBhZGRBbGw7XG4gIHRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG4gIHRyZWVQcm90by5kYXRhID0gdHJlZV9kYXRhO1xuICB0cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XG4gIHRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xuICB0cmVlUHJvdG8ucmVtb3ZlID0gdHJlZV9yZW1vdmU7XG4gIHRyZWVQcm90by5yZW1vdmVBbGwgPSByZW1vdmVBbGw7XG4gIHRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xuICB0cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbiAgdHJlZVByb3RvLnZpc2l0ID0gdHJlZV92aXNpdDtcbiAgdHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG4gIHRyZWVQcm90by54ID0gdHJlZV94O1xuICB0cmVlUHJvdG8ueSA9IHRyZWVfeTtcblxuICB2YXIgc2xpY2UkMSA9IFtdLnNsaWNlO1xuXG4gIHZhciBub2Fib3J0ID0ge307XG5cbiAgZnVuY3Rpb24gUXVldWUoc2l6ZSkge1xuICAgIGlmICghKHNpemUgPj0gMSkpIHRocm93IG5ldyBFcnJvcjtcbiAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICB0aGlzLl9jYWxsID1cbiAgICB0aGlzLl9lcnJvciA9IG51bGw7XG4gICAgdGhpcy5fdGFza3MgPSBbXTtcbiAgICB0aGlzLl9kYXRhID0gW107XG4gICAgdGhpcy5fd2FpdGluZyA9XG4gICAgdGhpcy5fYWN0aXZlID1cbiAgICB0aGlzLl9lbmRlZCA9XG4gICAgdGhpcy5fc3RhcnQgPSAwOyAvLyBpbnNpZGUgYSBzeW5jaHJvbm91cyB0YXNrIGNhbGxiYWNrP1xuICB9XG5cbiAgUXVldWUucHJvdG90eXBlID0gcXVldWUucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBRdWV1ZSxcbiAgICBkZWZlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIiB8fCB0aGlzLl9jYWxsKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgICBpZiAodGhpcy5fZXJyb3IgIT0gbnVsbCkgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgdCA9IHNsaWNlJDEuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgdC5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICsrdGhpcy5fd2FpdGluZywgdGhpcy5fdGFza3MucHVzaCh0KTtcbiAgICAgIHBva2UodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFib3J0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9lcnJvciA9PSBudWxsKSBhYm9ydCh0aGlzLCBuZXcgRXJyb3IoXCJhYm9ydFwiKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGF3YWl0OiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiIHx8IHRoaXMuX2NhbGwpIHRocm93IG5ldyBFcnJvcjtcbiAgICAgIHRoaXMuX2NhbGwgPSBmdW5jdGlvbihlcnJvciwgcmVzdWx0cykgeyBjYWxsYmFjay5hcHBseShudWxsLCBbZXJyb3JdLmNvbmNhdChyZXN1bHRzKSk7IH07XG4gICAgICBtYXliZU5vdGlmeSh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYXdhaXRBbGw6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIgfHwgdGhpcy5fY2FsbCkgdGhyb3cgbmV3IEVycm9yO1xuICAgICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgICAgbWF5YmVOb3RpZnkodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcG9rZShxKSB7XG4gICAgaWYgKCFxLl9zdGFydCkgdHJ5IHsgc3RhcnQocSk7IH0gLy8gbGV0IHRoZSBjdXJyZW50IHRhc2sgY29tcGxldGVcbiAgICBjYXRjaCAoZSkgeyBpZiAocS5fdGFza3NbcS5fZW5kZWQgKyBxLl9hY3RpdmUgLSAxXSkgYWJvcnQocSwgZSk7IH0gLy8gdGFzayBlcnJvcmVkIHN5bmNocm9ub3VzbHlcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KHEpIHtcbiAgICB3aGlsZSAocS5fc3RhcnQgPSBxLl93YWl0aW5nICYmIHEuX2FjdGl2ZSA8IHEuX3NpemUpIHtcbiAgICAgIHZhciBpID0gcS5fZW5kZWQgKyBxLl9hY3RpdmUsXG4gICAgICAgICAgdCA9IHEuX3Rhc2tzW2ldLFxuICAgICAgICAgIGogPSB0Lmxlbmd0aCAtIDEsXG4gICAgICAgICAgYyA9IHRbal07XG4gICAgICB0W2pdID0gZW5kKHEsIGkpO1xuICAgICAgLS1xLl93YWl0aW5nLCArK3EuX2FjdGl2ZTtcbiAgICAgIHQgPSBjLmFwcGx5KG51bGwsIHQpO1xuICAgICAgaWYgKCFxLl90YXNrc1tpXSkgY29udGludWU7IC8vIHRhc2sgZmluaXNoZWQgc3luY2hyb25vdXNseVxuICAgICAgcS5fdGFza3NbaV0gPSB0IHx8IG5vYWJvcnQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKHEsIGkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSwgcikge1xuICAgICAgaWYgKCFxLl90YXNrc1tpXSkgcmV0dXJuOyAvLyBpZ25vcmUgbXVsdGlwbGUgY2FsbGJhY2tzXG4gICAgICAtLXEuX2FjdGl2ZSwgKytxLl9lbmRlZDtcbiAgICAgIHEuX3Rhc2tzW2ldID0gbnVsbDtcbiAgICAgIGlmIChxLl9lcnJvciAhPSBudWxsKSByZXR1cm47IC8vIGlnbm9yZSBzZWNvbmRhcnkgZXJyb3JzXG4gICAgICBpZiAoZSAhPSBudWxsKSB7XG4gICAgICAgIGFib3J0KHEsIGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcS5fZGF0YVtpXSA9IHI7XG4gICAgICAgIGlmIChxLl93YWl0aW5nKSBwb2tlKHEpO1xuICAgICAgICBlbHNlIG1heWJlTm90aWZ5KHEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydChxLCBlKSB7XG4gICAgdmFyIGkgPSBxLl90YXNrcy5sZW5ndGgsIHQ7XG4gICAgcS5fZXJyb3IgPSBlOyAvLyBpZ25vcmUgYWN0aXZlIGNhbGxiYWNrc1xuICAgIHEuX2RhdGEgPSB1bmRlZmluZWQ7IC8vIGFsbG93IGdjXG4gICAgcS5fd2FpdGluZyA9IE5hTjsgLy8gcHJldmVudCBzdGFydGluZ1xuXG4gICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICBpZiAodCA9IHEuX3Rhc2tzW2ldKSB7XG4gICAgICAgIHEuX3Rhc2tzW2ldID0gbnVsbDtcbiAgICAgICAgaWYgKHQuYWJvcnQpIHRyeSB7IHQuYWJvcnQoKTsgfVxuICAgICAgICBjYXRjaCAoZSkgeyAvKiBpZ25vcmUgKi8gfVxuICAgICAgfVxuICAgIH1cblxuICAgIHEuX2FjdGl2ZSA9IE5hTjsgLy8gYWxsb3cgbm90aWZpY2F0aW9uXG4gICAgbWF5YmVOb3RpZnkocSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZU5vdGlmeShxKSB7XG4gICAgaWYgKCFxLl9hY3RpdmUgJiYgcS5fY2FsbCkgcS5fY2FsbChxLl9lcnJvciwgcS5fZGF0YSk7XG4gIH1cblxuICBmdW5jdGlvbiBxdWV1ZShjb25jdXJyZW5jeSkge1xuICAgIHJldHVybiBuZXcgUXVldWUoYXJndW1lbnRzLmxlbmd0aCA/ICtjb25jdXJyZW5jeSA6IEluZmluaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDEoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICB2YXIgZXBzaWxvbiQxID0gMWUtMTI7XG4gIHZhciBwaSQyID0gTWF0aC5QSTtcbiAgdmFyIGhhbGZQaSQxID0gcGkkMiAvIDI7XG4gIHZhciB0YXUkMiA9IDIgKiBwaSQyO1xuXG4gIGZ1bmN0aW9uIGFyY0lubmVyUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5pbm5lclJhZGl1cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyY091dGVyUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5vdXRlclJhZGl1cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyY1N0YXJ0QW5nbGUoZCkge1xuICAgIHJldHVybiBkLnN0YXJ0QW5nbGU7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNFbmRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQuZW5kQW5nbGU7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNQYWRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTsgLy8gTm90ZTogb3B0aW9uYWwhXG4gIH1cblxuICBmdW5jdGlvbiBhc2luKHgpIHtcbiAgICByZXR1cm4geCA+PSAxID8gaGFsZlBpJDEgOiB4IDw9IC0xID8gLWhhbGZQaSQxIDogTWF0aC5hc2luKHgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJzZWN0KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICAgIHZhciB4MTAgPSB4MSAtIHgwLCB5MTAgPSB5MSAtIHkwLFxuICAgICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLFxuICAgICAgICB0ID0gKHgzMiAqICh5MCAtIHkyKSAtIHkzMiAqICh4MCAtIHgyKSkgLyAoeTMyICogeDEwIC0geDMyICogeTEwKTtcbiAgICByZXR1cm4gW3gwICsgdCAqIHgxMCwgeTAgKyB0ICogeTEwXTtcbiAgfVxuXG4gIC8vIENvbXB1dGUgcGVycGVuZGljdWxhciBvZmZzZXQgbGluZSBvZiBsZW5ndGggcmMuXG4gIC8vIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vQ2lyY2xlLUxpbmVJbnRlcnNlY3Rpb24uaHRtbFxuICBmdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xuICAgIHZhciB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIE1hdGguc3FydCh4MDEgKiB4MDEgKyB5MDEgKiB5MDEpLFxuICAgICAgICBveCA9IGxvICogeTAxLFxuICAgICAgICBveSA9IC1sbyAqIHgwMSxcbiAgICAgICAgeDExID0geDAgKyBveCxcbiAgICAgICAgeTExID0geTAgKyBveSxcbiAgICAgICAgeDEwID0geDEgKyBveCxcbiAgICAgICAgeTEwID0geTEgKyBveSxcbiAgICAgICAgeDAwID0gKHgxMSArIHgxMCkgLyAyLFxuICAgICAgICB5MDAgPSAoeTExICsgeTEwKSAvIDIsXG4gICAgICAgIGR4ID0geDEwIC0geDExLFxuICAgICAgICBkeSA9IHkxMCAtIHkxMSxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgICAgciA9IHIxIC0gcmMsXG4gICAgICAgIEQgPSB4MTEgKiB5MTAgLSB4MTAgKiB5MTEsXG4gICAgICAgIGQgPSAoZHkgPCAwID8gLTEgOiAxKSAqIE1hdGguc3FydChNYXRoLm1heCgwLCByICogciAqIGQyIC0gRCAqIEQpKSxcbiAgICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcbiAgICAgICAgY3kwID0gKC1EICogZHggLSBkeSAqIGQpIC8gZDIsXG4gICAgICAgIGN4MSA9IChEICogZHkgKyBkeCAqIGQpIC8gZDIsXG4gICAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxuICAgICAgICBkeDAgPSBjeDAgLSB4MDAsXG4gICAgICAgIGR5MCA9IGN5MCAtIHkwMCxcbiAgICAgICAgZHgxID0gY3gxIC0geDAwLFxuICAgICAgICBkeTEgPSBjeTEgLSB5MDA7XG5cbiAgICAvLyBQaWNrIHRoZSBjbG9zZXIgb2YgdGhlIHR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAgIC8vIFRPRE8gSXMgdGhlcmUgYSBmYXN0ZXIgd2F5IHRvIGRldGVybWluZSB3aGljaCBpbnRlcnNlY3Rpb24gdG8gdXNlP1xuICAgIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGN4OiBjeDAsXG4gICAgICBjeTogY3kwLFxuICAgICAgeDAxOiAtb3gsXG4gICAgICB5MDE6IC1veSxcbiAgICAgIHgxMTogY3gwICogKHIxIC8gciAtIDEpLFxuICAgICAgeTExOiBjeTAgKiAocjEgLyByIC0gMSlcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjKCkge1xuICAgIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxuICAgICAgICBvdXRlclJhZGl1cyA9IGFyY091dGVyUmFkaXVzLFxuICAgICAgICBjb3JuZXJSYWRpdXMgPSBjb25zdGFudCQxKDApLFxuICAgICAgICBwYWRSYWRpdXMgPSBudWxsLFxuICAgICAgICBzdGFydEFuZ2xlID0gYXJjU3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgICAgcGFkQW5nbGUgPSBhcmNQYWRBbmdsZSxcbiAgICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgICB2YXIgYnVmZmVyLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICByMSA9ICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpJDEsXG4gICAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpJDEsXG4gICAgICAgICAgZGEgPSBNYXRoLmFicyhhMSAtIGEwKSxcbiAgICAgICAgICBjdyA9IGExID4gYTA7XG5cbiAgICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cbiAgICAgIGlmIChyMSA8IHIwKSByID0gcjEsIHIxID0gcjAsIHIwID0gcjtcblxuICAgICAgLy8gSXMgaXQgYSBwb2ludD9cbiAgICAgIGlmICghKHIxID4gZXBzaWxvbiQxKSkgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG5cbiAgICAgIC8vIE9yIGlzIGl0IGEgY2lyY2xlIG9yIGFubnVsdXM/XG4gICAgICBlbHNlIGlmIChkYSA+IHRhdSQyIC0gZXBzaWxvbiQxKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHIxICogTWF0aC5jb3MoYTApLCByMSAqIE1hdGguc2luKGEwKSk7XG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XG4gICAgICAgIGlmIChyMCA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHIwICogTWF0aC5jb3MoYTEpLCByMCAqIE1hdGguc2luKGExKSk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIGl0IGEgY2lyY3VsYXIgb3IgYW5udWxhciBzZWN0b3I/XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIGEwMSA9IGEwLFxuICAgICAgICAgICAgYTExID0gYTEsXG4gICAgICAgICAgICBhMDAgPSBhMCxcbiAgICAgICAgICAgIGExMCA9IGExLFxuICAgICAgICAgICAgZGEwID0gZGEsXG4gICAgICAgICAgICBkYTEgPSBkYSxcbiAgICAgICAgICAgIGFwID0gcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAvIDIsXG4gICAgICAgICAgICBycCA9IChhcCA+IGVwc2lsb24kMSkgJiYgKHBhZFJhZGl1cyA/ICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IE1hdGguc3FydChyMCAqIHIwICsgcjEgKiByMSkpLFxuICAgICAgICAgICAgcmMgPSBNYXRoLm1pbihNYXRoLmFicyhyMSAtIHIwKSAvIDIsICtjb3JuZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgICAgICByYzAgPSByYyxcbiAgICAgICAgICAgIHJjMSA9IHJjLFxuICAgICAgICAgICAgdDAsXG4gICAgICAgICAgICB0MTtcblxuICAgICAgICAvLyBBcHBseSBwYWRkaW5nPyBOb3RlIHRoYXQgc2luY2UgcjEg4omlIHIwLCBkYTEg4omlIGRhMC5cbiAgICAgICAgaWYgKHJwID4gZXBzaWxvbiQxKSB7XG4gICAgICAgICAgdmFyIHAwID0gYXNpbihycCAvIHIwICogTWF0aC5zaW4oYXApKSxcbiAgICAgICAgICAgICAgcDEgPSBhc2luKHJwIC8gcjEgKiBNYXRoLnNpbihhcCkpO1xuICAgICAgICAgIGlmICgoZGEwIC09IHAwICogMikgPiBlcHNpbG9uJDEpIHAwICo9IChjdyA/IDEgOiAtMSksIGEwMCArPSBwMCwgYTEwIC09IHAwO1xuICAgICAgICAgIGVsc2UgZGEwID0gMCwgYTAwID0gYTEwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgICBpZiAoKGRhMSAtPSBwMSAqIDIpID4gZXBzaWxvbiQxKSBwMSAqPSAoY3cgPyAxIDogLTEpLCBhMDEgKz0gcDEsIGExMSAtPSBwMTtcbiAgICAgICAgICBlbHNlIGRhMSA9IDAsIGEwMSA9IGExMSA9IChhMCArIGExKSAvIDI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgeDAxID0gcjEgKiBNYXRoLmNvcyhhMDEpLFxuICAgICAgICAgICAgeTAxID0gcjEgKiBNYXRoLnNpbihhMDEpLFxuICAgICAgICAgICAgeDEwID0gcjAgKiBNYXRoLmNvcyhhMTApLFxuICAgICAgICAgICAgeTEwID0gcjAgKiBNYXRoLnNpbihhMTApO1xuXG4gICAgICAgIC8vIEFwcGx5IHJvdW5kZWQgY29ybmVycz9cbiAgICAgICAgaWYgKHJjID4gZXBzaWxvbiQxKSB7XG4gICAgICAgICAgdmFyIHgxMSA9IHIxICogTWF0aC5jb3MoYTExKSxcbiAgICAgICAgICAgICAgeTExID0gcjEgKiBNYXRoLnNpbihhMTEpLFxuICAgICAgICAgICAgICB4MDAgPSByMCAqIE1hdGguY29zKGEwMCksXG4gICAgICAgICAgICAgIHkwMCA9IHIwICogTWF0aC5zaW4oYTAwKTtcblxuICAgICAgICAgIC8vIFJlc3RyaWN0IHRoZSBjb3JuZXIgcmFkaXVzIGFjY29yZGluZyB0byB0aGUgc2VjdG9yIGFuZ2xlLlxuICAgICAgICAgIGlmIChkYSA8IHBpJDIpIHtcbiAgICAgICAgICAgIHZhciBvYyA9IGRhMCA+IGVwc2lsb24kMSA/IGludGVyc2VjdCh4MDEsIHkwMSwgeDAwLCB5MDAsIHgxMSwgeTExLCB4MTAsIHkxMCkgOiBbeDEwLCB5MTBdLFxuICAgICAgICAgICAgICAgIGF4ID0geDAxIC0gb2NbMF0sXG4gICAgICAgICAgICAgICAgYXkgPSB5MDEgLSBvY1sxXSxcbiAgICAgICAgICAgICAgICBieCA9IHgxMSAtIG9jWzBdLFxuICAgICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXG4gICAgICAgICAgICAgICAga2MgPSAxIC8gTWF0aC5zaW4oTWF0aC5hY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5KSAqIE1hdGguc3FydChieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLFxuICAgICAgICAgICAgICAgIGxjID0gTWF0aC5zcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICAgIHJjMCA9IE1hdGgubWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG4gICAgICAgICAgICByYzEgPSBNYXRoLm1pbihyYywgKHIxIC0gbGMpIC8gKGtjICsgMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElzIHRoZSBzZWN0b3IgY29sbGFwc2VkIHRvIGEgbGluZT9cbiAgICAgICAgaWYgKCEoZGExID4gZXBzaWxvbiQxKSkgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpO1xuXG4gICAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgb3V0ZXIgcmluZyBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbiQxKSB7XG4gICAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MDAsIHkwMCwgeDAxLCB5MDEsIHIxLCByYzEsIGN3KTtcbiAgICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIE1hdGguYXRhbjIodDAueTAxLCB0MC54MDEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIE1hdGguYXRhbjIodDAueTAxLCB0MC54MDEpLCBNYXRoLmF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBNYXRoLmF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIE1hdGguYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgIWN3KTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMxLCBNYXRoLmF0YW4yKHQxLnkxMSwgdDEueDExKSwgTWF0aC5hdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3IgaXMgdGhlIG91dGVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgICAgZWxzZSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSksIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMDEsIGExMSwgIWN3KTtcblxuICAgICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgICAvLyBPciBwZXJoYXBzIGl04oCZcyBhbiBhbm51bGFyIHNlY3RvciBjb2xsYXBzZWQgZHVlIHRvIHBhZGRpbmc/XG4gICAgICAgIGlmICghKHIwID4gZXBzaWxvbiQxKSB8fCAhKGRhMCA+IGVwc2lsb24kMSkpIGNvbnRleHQubGluZVRvKHgxMCwgeTEwKTtcblxuICAgICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIGlubmVyIHJpbmcgKG9yIHBvaW50KSBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbiQxKSB7XG4gICAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MTAsIHkxMCwgeDExLCB5MTEsIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XG5cbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgICAgaWYgKHJjMCA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgTWF0aC5hdGFuMih0MC55MDEsIHQwLngwMSksIE1hdGguYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgTWF0aC5hdGFuMih0MC55MDEsIHQwLngwMSksIE1hdGguYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIE1hdGguYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgTWF0aC5hdGFuMih0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCBjdyk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMCwgTWF0aC5hdGFuMih0MS55MTEsIHQxLngxMSksIE1hdGguYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9yIGlzIHRoZSBpbm5lciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICAgIGVsc2UgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExMCwgYTAwLCBjdyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIGFyYy5jZW50cm9pZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHIgPSAoK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyLFxuICAgICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSQyIC8gMjtcbiAgICAgIHJldHVybiBbTWF0aC5jb3MoYSkgKiByLCBNYXRoLnNpbihhKSAqIHJdO1xuICAgIH07XG5cbiAgICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyYykgOiBpbm5lclJhZGl1cztcbiAgICB9O1xuXG4gICAgYXJjLm91dGVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3V0ZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gICAgfTtcblxuICAgIGFyYy5jb3JuZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogY29ybmVyUmFkaXVzO1xuICAgIH07XG5cbiAgICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkUmFkaXVzID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyYykgOiBwYWRSYWRpdXM7XG4gICAgfTtcblxuICAgIGFyYy5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICAgIH07XG5cbiAgICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyYykgOiBlbmRBbmdsZTtcbiAgICB9O1xuXG4gICAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogcGFkQW5nbGU7XG4gICAgfTtcblxuICAgIGFyYy5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIGFyYykgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gYXJjO1xuICB9XG5cbiAgZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIExpbmVhci5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGN1cnZlTGluZWFyKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHgocCkge1xuICAgIHJldHVybiBwWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24geShwKSB7XG4gICAgcmV0dXJuIHBbMV07XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKCkge1xuICAgIHZhciB4JCQgPSB4LFxuICAgICAgICB5JCQgPSB5LFxuICAgICAgICBkZWZpbmVkID0gY29uc3RhbnQkMSh0cnVlKSxcbiAgICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgICAgYnVmZmVyO1xuXG4gICAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZWxzZSBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4JCQoZCwgaSwgZGF0YSksICt5JCQoZCwgaSwgZGF0YSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgkJCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGxpbmUpIDogeCQkO1xuICAgIH07XG5cbiAgICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5JCQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBsaW5lKSA6IHkkJDtcbiAgICB9O1xuXG4gICAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gICAgfTtcblxuICAgIGxpbmUuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICAgIH07XG5cbiAgICBsaW5lLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gbGluZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWEkMSgpIHtcbiAgICB2YXIgeDAgPSB4LFxuICAgICAgICB4MSA9IG51bGwsXG4gICAgICAgIHkwID0gY29uc3RhbnQkMSgwKSxcbiAgICAgICAgeTEgPSB5LFxuICAgICAgICBkZWZpbmVkID0gY29uc3RhbnQkMSh0cnVlKSxcbiAgICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIGosXG4gICAgICAgICAgayxcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgZCxcbiAgICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgeTB6ID0gbmV3IEFycmF5KG4pO1xuXG4gICAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSB7XG4gICAgICAgICAgICBqID0gaTtcbiAgICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcbiAgICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZpbmVkMCkge1xuICAgICAgICAgIHgweltpXSA9ICt4MChkLCBpLCBkYXRhKSwgeTB6W2ldID0gK3kwKGQsIGksIGRhdGEpO1xuICAgICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXJlYWxpbmUoKSB7XG4gICAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gICAgfVxuXG4gICAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gICAgfTtcblxuICAgIGFyZWEueDAgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyZWEpIDogeDA7XG4gICAgfTtcblxuICAgIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmVhKSA6IHgxO1xuICAgIH07XG5cbiAgICBhcmVhLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgICB9O1xuXG4gICAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJlYSkgOiB5MDtcbiAgICB9O1xuXG4gICAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyZWEpIDogeTE7XG4gICAgfTtcblxuICAgIGFyZWEubGluZVgwID1cbiAgICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XG4gICAgfTtcblxuICAgIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkxKTtcbiAgICB9O1xuXG4gICAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICAgIH07XG5cbiAgICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCEhXyksIGFyZWEpIDogZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGFyZWEpIDogY3VydmU7XG4gICAgfTtcblxuICAgIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBhcmVhKSA6IGNvbnRleHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBhcmVhO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzY2VuZGluZyQxKGEsIGIpIHtcbiAgICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBpZGVudGl0eSQxKGQpIHtcbiAgICByZXR1cm4gZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBpZSgpIHtcbiAgICB2YXIgdmFsdWUgPSBpZGVudGl0eSQxLFxuICAgICAgICBzb3J0VmFsdWVzID0gZGVzY2VuZGluZyQxLFxuICAgICAgICBzb3J0ID0gbnVsbCxcbiAgICAgICAgc3RhcnRBbmdsZSA9IGNvbnN0YW50JDEoMCksXG4gICAgICAgIGVuZEFuZ2xlID0gY29uc3RhbnQkMSh0YXUkMiksXG4gICAgICAgIHBhZEFuZ2xlID0gY29uc3RhbnQkMSgwKTtcblxuICAgIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgaixcbiAgICAgICAgICBrLFxuICAgICAgICAgIHN1bSA9IDAsXG4gICAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgYXJjcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBhMCA9ICtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUkMiwgTWF0aC5tYXgoLXRhdSQyLCBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gYTApKSxcbiAgICAgICAgICBhMSxcbiAgICAgICAgICBwID0gTWF0aC5taW4oTWF0aC5hYnMoZGEpIC8gbiwgcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgICAgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksXG4gICAgICAgICAgdjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHYgPSBhcmNzW2luZGV4W2ldID0gaV0gPSArdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSkpID4gMCkge1xuICAgICAgICAgIHN1bSArPSB2O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0VmFsdWVzKGFyY3NbaV0sIGFyY3Nbal0pOyB9KTtcbiAgICAgIGVsc2UgaWYgKHNvcnQgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pOyB9KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgYXJjcyEgVGhleSBhcmUgc3RvcmVkIGluIHRoZSBvcmlnaW5hbCBkYXRhJ3Mgb3JkZXIuXG4gICAgICBmb3IgKGkgPSAwLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDA7IGkgPCBuOyArK2ksIGEwID0gYTEpIHtcbiAgICAgICAgaiA9IGluZGV4W2ldLCB2ID0gYXJjc1tqXSwgYTEgPSBhMCArICh2ID4gMCA/IHYgKiBrIDogMCkgKyBwYSwgYXJjc1tqXSA9IHtcbiAgICAgICAgICBkYXRhOiBkYXRhW2pdLFxuICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICBwYWRBbmdsZTogcFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJjcztcbiAgICB9XG5cbiAgICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgcGllLnNvcnRWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICAgIH07XG5cbiAgICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gICAgfTtcblxuICAgIHBpZS5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHBpZSkgOiBzdGFydEFuZ2xlO1xuICAgIH07XG5cbiAgICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHBpZSkgOiBlbmRBbmdsZTtcbiAgICB9O1xuXG4gICAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gICAgfTtcblxuICAgIHJldHVybiBwaWU7XG4gIH1cblxuICB2YXIgY3VydmVSYWRpYWxMaW5lYXIgPSBjdXJ2ZVJhZGlhbChjdXJ2ZUxpbmVhcik7XG5cbiAgZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gICAgdGhpcy5fY3VydmUgPSBjdXJ2ZTtcbiAgfVxuXG4gIFJhZGlhbC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2N1cnZlLmFyZWFTdGFydCgpO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5hcmVhRW5kKCk7XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY3VydmUubGluZVN0YXJ0KCk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2N1cnZlLmxpbmVFbmQoKTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbihhLCByKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5wb2ludChyICogTWF0aC5zaW4oYSksIHIgKiAtTWF0aC5jb3MoYSkpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjdXJ2ZVJhZGlhbChjdXJ2ZSkge1xuXG4gICAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgUmFkaWFsKGN1cnZlKGNvbnRleHQpKTtcbiAgICB9XG5cbiAgICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgICByZXR1cm4gcmFkaWFsO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFkaWFsTGluZShsKSB7XG4gICAgdmFyIGMgPSBsLmN1cnZlO1xuXG4gICAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgICBsLnJhZGl1cyA9IGwueSwgZGVsZXRlIGwueTtcblxuICAgIGwuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGw7XG4gIH1cblxuICBmdW5jdGlvbiByYWRpYWxMaW5lJDEoKSB7XG4gICAgcmV0dXJuIHJhZGlhbExpbmUobGluZSgpLmN1cnZlKGN1cnZlUmFkaWFsTGluZWFyKSk7XG4gIH1cblxuICBmdW5jdGlvbiByYWRpYWxBcmVhKCkge1xuICAgIHZhciBhID0gYXJlYSQxKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpLFxuICAgICAgICBjID0gYS5jdXJ2ZSxcbiAgICAgICAgeDAgPSBhLmxpbmVYMCxcbiAgICAgICAgeDEgPSBhLmxpbmVYMSxcbiAgICAgICAgeTAgPSBhLmxpbmVZMCxcbiAgICAgICAgeTEgPSBhLmxpbmVZMTtcblxuICAgIGEuYW5nbGUgPSBhLngsIGRlbGV0ZSBhLng7XG4gICAgYS5zdGFydEFuZ2xlID0gYS54MCwgZGVsZXRlIGEueDA7XG4gICAgYS5lbmRBbmdsZSA9IGEueDEsIGRlbGV0ZSBhLngxO1xuICAgIGEucmFkaXVzID0gYS55LCBkZWxldGUgYS55O1xuICAgIGEuaW5uZXJSYWRpdXMgPSBhLnkwLCBkZWxldGUgYS55MDtcbiAgICBhLm91dGVyUmFkaXVzID0gYS55MSwgZGVsZXRlIGEueTE7XG4gICAgYS5saW5lU3RhcnRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmFkaWFsTGluZSh4MCgpKTsgfSwgZGVsZXRlIGEubGluZVgwO1xuICAgIGEubGluZUVuZEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiByYWRpYWxMaW5lKHgxKCkpOyB9LCBkZWxldGUgYS5saW5lWDE7XG4gICAgYS5saW5lSW5uZXJSYWRpdXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJhZGlhbExpbmUoeTAoKSk7IH0sIGRlbGV0ZSBhLmxpbmVZMDtcbiAgICBhLmxpbmVPdXRlclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmFkaWFsTGluZSh5MSgpKTsgfSwgZGVsZXRlIGEubGluZVkxO1xuXG4gICAgYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gYyhjdXJ2ZVJhZGlhbChfKSkgOiBjKCkuX2N1cnZlO1xuICAgIH07XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjaXJjbGUgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIHBpJDIpO1xuICAgICAgY29udGV4dC5tb3ZlVG8ociwgMCk7XG4gICAgICBjb250ZXh0LmFyYygwLCAwLCByLCAwLCB0YXUkMik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjcm9zcyQxID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgICBjb250ZXh0Lm1vdmVUbygtMyAqIHIsIC1yKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgLTMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHIsIC0zICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygzICogciwgLXIpO1xuICAgICAgY29udGV4dC5saW5lVG8oMyAqIHIsIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhyLCAzICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgMyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLTMgKiByLCByKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciB0YW4zMCA9IE1hdGguc3FydCgxIC8gMyk7XG4gIHZhciB0YW4zMF8yID0gdGFuMzAgKiAyO1xuICB2YXIgZGlhbW9uZCA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgeSA9IE1hdGguc3FydChzaXplIC8gdGFuMzBfMiksXG4gICAgICAgICAgeCA9IHkgKiB0YW4zMDtcbiAgICAgIGNvbnRleHQubW92ZVRvKDAsIC15KTtcbiAgICAgIGNvbnRleHQubGluZVRvKHgsIDApO1xuICAgICAgY29udGV4dC5saW5lVG8oMCwgeSk7XG4gICAgICBjb250ZXh0LmxpbmVUbygteCwgMCk7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIga2EgPSAwLjg5MDgxMzA5MTUyOTI4NTIyODEwO1xuICB2YXIga3IgPSBNYXRoLnNpbihwaSQyIC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpJDIgLyAxMCk7XG4gIHZhciBreCA9IE1hdGguc2luKHRhdSQyIC8gMTApICoga3I7XG4gIHZhciBreSA9IC1NYXRoLmNvcyh0YXUkMiAvIDEwKSAqIGtyO1xuICB2YXIgc3RhciA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplICoga2EpLFxuICAgICAgICAgIHggPSBreCAqIHIsXG4gICAgICAgICAgeSA9IGt5ICogcjtcbiAgICAgIGNvbnRleHQubW92ZVRvKDAsIC1yKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA1OyArK2kpIHtcbiAgICAgICAgdmFyIGEgPSB0YXUkMiAqIGkgLyA1LFxuICAgICAgICAgICAgYyA9IE1hdGguY29zKGEpLFxuICAgICAgICAgICAgcyA9IE1hdGguc2luKGEpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhzICogciwgLWMgKiByKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oYyAqIHggLSBzICogeSwgcyAqIHggKyBjICogeSk7XG4gICAgICB9XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3F1YXJlID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciB3ID0gTWF0aC5zcXJ0KHNpemUpLFxuICAgICAgICAgIHggPSAtdyAvIDI7XG4gICAgICBjb250ZXh0LnJlY3QoeCwgeCwgdywgdyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzcXJ0MyA9IE1hdGguc3FydCgzKTtcblxuICB2YXIgdHJpYW5nbGUgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHkgPSAtTWF0aC5zcXJ0KHNpemUgLyAoc3FydDMgKiAzKSk7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtc3FydDMgKiB5LCAteSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzcXJ0MyAqIHksIC15KTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjID0gLTAuNTtcbiAgdmFyIHMgPSBNYXRoLnNxcnQoMykgLyAyO1xuICB2YXIgayA9IDEgLyBNYXRoLnNxcnQoMTIpO1xuICB2YXIgYSA9IChrIC8gMiArIDEpICogMztcbiAgdmFyIHd5ZSA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gYSksXG4gICAgICAgICAgeDAgPSByIC8gMixcbiAgICAgICAgICB5MCA9IHIgKiBrLFxuICAgICAgICAgIHgxID0geDAsXG4gICAgICAgICAgeTEgPSByICogayArIHIsXG4gICAgICAgICAgeDIgPSAteDEsXG4gICAgICAgICAgeTIgPSB5MTtcbiAgICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyh4MSwgeTEpO1xuICAgICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCAtIHMgKiB5MCwgcyAqIHgwICsgYyAqIHkwKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MSAtIHMgKiB5MSwgcyAqIHgxICsgYyAqIHkxKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiAtIHMgKiB5MiwgcyAqIHgyICsgYyAqIHkyKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCArIHMgKiB5MCwgYyAqIHkwIC0gcyAqIHgwKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MSArIHMgKiB5MSwgYyAqIHkxIC0gcyAqIHgxKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiArIHMgKiB5MiwgYyAqIHkyIC0gcyAqIHgyKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzeW1ib2xzID0gW1xuICAgIGNpcmNsZSxcbiAgICBjcm9zcyQxLFxuICAgIGRpYW1vbmQsXG4gICAgc3F1YXJlLFxuICAgIHN0YXIsXG4gICAgdHJpYW5nbGUsXG4gICAgd3llXG4gIF07XG5cbiAgZnVuY3Rpb24gc3ltYm9sKCkge1xuICAgIHZhciB0eXBlID0gY29uc3RhbnQkMShjaXJjbGUpLFxuICAgICAgICBzaXplID0gY29uc3RhbnQkMSg2NCksXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gc3ltYm9sKCkge1xuICAgICAgdmFyIGJ1ZmZlcjtcbiAgICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICAgIHR5cGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5kcmF3KGNvbnRleHQsICtzaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gICAgfVxuXG4gICAgc3ltYm9sLnR5cGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0eXBlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKF8pLCBzeW1ib2wpIDogdHlwZTtcbiAgICB9O1xuXG4gICAgc3ltYm9sLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzaXplID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgc3ltYm9sKSA6IHNpemU7XG4gICAgfTtcblxuICAgIHN5bWJvbC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfLCBzeW1ib2wpIDogY29udGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4gIGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgICAoMiAqIHRoYXQuX3gwICsgdGhhdC5feDEpIC8gMyxcbiAgICAgICgyICogdGhhdC5feTAgKyB0aGF0Ll95MSkgLyAzLFxuICAgICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgICAodGhhdC5feTAgKyAyICogdGhhdC5feTEpIC8gMyxcbiAgICAgICh0aGF0Ll94MCArIDQgKiB0aGF0Ll94MSArIHgpIC8gNixcbiAgICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBCYXNpcyhjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBCYXNpcy5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IC8vIHByb2NlZWRcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fY29udGV4dC5saW5lVG8oKDUgKiB0aGlzLl94MCArIHRoaXMuX3gxKSAvIDYsICg1ICogdGhpcy5feTAgKyB0aGlzLl95MSkgLyA2KTsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGJhc2lzKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IEJhc2lzKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gQmFzaXNDbG9zZWQoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgQmFzaXNDbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCxcbiAgICBhcmVhRW5kOiBub29wLFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjoge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oKHRoaXMuX3gzICsgMiAqIHRoaXMuX3gyKSAvIDMsICh0aGlzLl95MyArIDIgKiB0aGlzLl95MikgLyAzKTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzoge1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MiA9IHgsIHRoaXMuX3kyID0geTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBiYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBCYXNpc0Nsb3NlZChjb250ZXh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJhc2lzT3Blbihjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBCYXNpc09wZW4ucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB2YXIgeDAgPSAodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsIHkwID0gKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2OyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeDAsIHkwKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgwLCB5MCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGJhc2lzT3Blbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBCYXNpc09wZW4oY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBCdW5kbGUoY29udGV4dCwgYmV0YSkge1xuICAgIHRoaXMuX2Jhc2lzID0gbmV3IEJhc2lzKGNvbnRleHQpO1xuICAgIHRoaXMuX2JldGEgPSBiZXRhO1xuICB9XG5cbiAgQnVuZGxlLnByb3RvdHlwZSA9IHtcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feCA9IFtdO1xuICAgICAgdGhpcy5feSA9IFtdO1xuICAgICAgdGhpcy5fYmFzaXMubGluZVN0YXJ0KCk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgICBqID0geC5sZW5ndGggLSAxO1xuXG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgdmFyIHgwID0geFswXSxcbiAgICAgICAgICAgIHkwID0geVswXSxcbiAgICAgICAgICAgIGR4ID0geFtqXSAtIHgwLFxuICAgICAgICAgICAgZHkgPSB5W2pdIC0geTAsXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICB0O1xuXG4gICAgICAgIHdoaWxlICgrK2kgPD0gaikge1xuICAgICAgICAgIHQgPSBpIC8gajtcbiAgICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcbiAgICAgICAgICAgIHRoaXMuX2JldGEgKiB4W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh4MCArIHQgKiBkeCksXG4gICAgICAgICAgICB0aGlzLl9iZXRhICogeVtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeTAgKyB0ICogZHkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgICB0aGlzLl9iYXNpcy5saW5lRW5kKCk7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICAgIHRoaXMuX3kucHVzaCgreSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBidW5kbGUgPSAoZnVuY3Rpb24gY3VzdG9tKGJldGEpIHtcblxuICAgIGZ1bmN0aW9uIGJ1bmRsZShjb250ZXh0KSB7XG4gICAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gICAgfVxuXG4gICAgYnVuZGxlLmJldGEgPSBmdW5jdGlvbihiZXRhKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCtiZXRhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGJ1bmRsZTtcbiAgfSkoMC44NSk7XG5cbiAgZnVuY3Rpb24gcG9pbnQkMSh0aGF0LCB4LCB5KSB7XG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgICAgdGhhdC5feTEgKyB0aGF0Ll9rICogKHRoYXQuX3kyIC0gdGhhdC5feTApLFxuICAgICAgdGhhdC5feDIgKyB0aGF0Ll9rICogKHRoYXQuX3gxIC0geCksXG4gICAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICAgIHRoYXQuX3gyLFxuICAgICAgdGhhdC5feTJcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbiAgfVxuXG4gIENhcmRpbmFsLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHBvaW50JDEodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MSA9IHgsIHRoaXMuX3kxID0geTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDEodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2FyZGluYWwgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICAgIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XG4gICAgfVxuXG4gICAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2FyZGluYWw7XG4gIH0pKDApO1xuXG4gIGZ1bmN0aW9uIENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG4gIH1cblxuICBDYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBub29wLFxuICAgIGFyZWFFbmQ6IG5vb3AsXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjoge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMSh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjYXJkaW5hbENsb3NlZCA9IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gICAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgICAgcmV0dXJuIG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgICB9XG5cbiAgICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gICAgfTtcblxuICAgIHJldHVybiBjYXJkaW5hbDtcbiAgfSkoMCk7XG5cbiAgZnVuY3Rpb24gQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG4gIH1cblxuICBDYXJkaW5hbE9wZW4ucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMSh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjYXJkaW5hbE9wZW4gPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICAgIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICAgIH1cblxuICAgIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhcmRpbmFsO1xuICB9KSgwKTtcblxuICBmdW5jdGlvbiBwb2ludCQyKHRoYXQsIHgsIHkpIHtcbiAgICB2YXIgeDEgPSB0aGF0Ll94MSxcbiAgICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgICAgeDIgPSB0aGF0Ll94MixcbiAgICAgICAgeTIgPSB0aGF0Ll95MjtcblxuICAgIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24kMSkge1xuICAgICAgdmFyIGEgPSAyICogdGhhdC5fbDAxXzJhICsgMyAqIHRoYXQuX2wwMV9hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICAgIHgxID0gKHgxICogYSAtIHRoYXQuX3gwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feDIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICAgIHkxID0gKHkxICogYSAtIHRoYXQuX3kwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feTIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICB9XG5cbiAgICBpZiAodGhhdC5fbDIzX2EgPiBlcHNpbG9uJDEpIHtcbiAgICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICAgIG0gPSAzICogdGhhdC5fbDIzX2EgKiAodGhhdC5fbDIzX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgICB4MiA9ICh4MiAqIGIgKyB0aGF0Ll94MSAqIHRoYXQuX2wyM18yYSAtIHggKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIH1cblxuICAgIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MSwgeTEsIHgyLCB5MiwgdGhhdC5feDIsIHRoYXQuX3kyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9hbHBoYSA9IGFscGhhO1xuICB9XG5cbiAgQ2F0bXVsbFJvbS5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHRoaXMucG9pbnQodGhpcywgdGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OiBwb2ludCQyKHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2F0bXVsbFJvbSA9IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsKGNvbnRleHQsIDApO1xuICAgIH1cblxuICAgIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2F0bXVsbFJvbTtcbiAgfSkoMC41KTtcblxuICBmdW5jdGlvbiBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbiAgfVxuXG4gIENhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCxcbiAgICBhcmVhRW5kOiBub29wLFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjoge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiBwb2ludCQyKHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2F0bXVsbFJvbUNsb3NlZCA9IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIDApO1xuICAgIH1cblxuICAgIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2F0bXVsbFJvbTtcbiAgfSkoMC41KTtcblxuICBmdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XG4gIH1cblxuICBDYXRtdWxsUm9tT3Blbi5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb21PcGVuID0gKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gICAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcbiAgICB9XG5cbiAgICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb207XG4gIH0pKDAuNSk7XG5cbiAgZnVuY3Rpb24gTGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIExpbmVhckNsb3NlZC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBub29wLFxuICAgIGFyZWFFbmQ6IG5vb3AsXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgIGVsc2UgdGhpcy5fcG9pbnQgPSAxLCB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IExpbmVhckNsb3NlZChjb250ZXh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSB0aGUgc2xvcGVzIG9mIHRoZSB0YW5nZW50cyAoSGVybWl0ZS10eXBlIGludGVycG9sYXRpb24pIGJhc2VkIG9uXG4gIC8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4gIC8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbiAgLy8gTk9WKElJKSwgUC4gNDQzLCAxOTkwLlxuICBmdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gICAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgICAgaDEgPSB4MiAtIHRoYXQuX3gxLFxuICAgICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgICBwID0gKHMwICogaDEgKyBzMSAqIGgwKSAvIChoMCArIGgxKTtcbiAgICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxuICBmdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICAgIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XG4gIH1cblxuICAvLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4gIC8vIFwieW91IGNhbiBleHByZXNzIGN1YmljIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBpbiB0ZXJtcyBvZiBjdWJpYyBCw6l6aWVyIGN1cnZlc1xuICAvLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG4gIGZ1bmN0aW9uIHBvaW50JDModGhhdCwgdDAsIHQxKSB7XG4gICAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICAgIHgxID0gdGhhdC5feDEsXG4gICAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XG4gIH1cblxuICBmdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICAgIHRoaXMuX3QwID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogcG9pbnQkMyh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciB0MSA9IE5hTjtcblxuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBpZiAoeCA9PT0gdGhpcy5feDEgJiYgeSA9PT0gdGhpcy5feTEpIHJldHVybjsgLy8gSWdub3JlIGNvaW5jaWRlbnQgcG9pbnRzLlxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCQzKHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDModGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICAgIHRoaXMuX3QwID0gdDE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gbmV3IFJlZmxlY3RDb250ZXh0KGNvbnRleHQpO1xuICB9XG5cbiAgKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICBNb25vdG9uZVgucHJvdG90eXBlLnBvaW50LmNhbGwodGhpcywgeSwgeCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh5LCB4KTsgfSxcbiAgICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICAgIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkgeyB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8oeTEsIHgxLCB5MiwgeDIsIHksIHgpOyB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBOYXR1cmFsKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIE5hdHVyYWwucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94ID0gW107XG4gICAgICB0aGlzLl95ID0gW107XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgICBuID0geC5sZW5ndGg7XG5cbiAgICAgIGlmIChuKSB7XG4gICAgICAgIHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzBdLCB5WzBdKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHhbMF0sIHlbMF0pO1xuICAgICAgICBpZiAobiA9PT0gMikge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHhbMV0sIHlbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBweCA9IGNvbnRyb2xQb2ludHMoeCksXG4gICAgICAgICAgICAgIHB5ID0gY29udHJvbFBvaW50cyh5KTtcbiAgICAgICAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMTsgaTEgPCBuOyArK2kwLCArK2kxKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8ocHhbMF1baTBdLCBweVswXVtpMF0sIHB4WzFdW2kwXSwgcHlbMV1baTBdLCB4W2kxXSwgeVtpMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiBuID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gU2VlIGh0dHBzOi8vd3d3LnBhcnRpY2xlaW5jZWxsLmNvbS8yMDEyL2Jlemllci1zcGxpbmVzLyBmb3IgZGVyaXZhdGlvbi5cbiAgZnVuY3Rpb24gY29udHJvbFBvaW50cyh4KSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSB4Lmxlbmd0aCAtIDEsXG4gICAgICAgIG0sXG4gICAgICAgIGEgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobik7XG4gICAgYVswXSA9IDAsIGJbMF0gPSAyLCByWzBdID0geFswXSArIDIgKiB4WzFdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBuIC0gMTsgKytpKSBhW2ldID0gMSwgYltpXSA9IDQsIHJbaV0gPSA0ICogeFtpXSArIDIgKiB4W2kgKyAxXTtcbiAgICBhW24gLSAxXSA9IDIsIGJbbiAtIDFdID0gNywgcltuIC0gMV0gPSA4ICogeFtuIC0gMV0gKyB4W25dO1xuICAgIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIG0gPSBhW2ldIC8gYltpIC0gMV0sIGJbaV0gLT0gbSwgcltpXSAtPSBtICogcltpIC0gMV07XG4gICAgYVtuIC0gMV0gPSByW24gLSAxXSAvIGJbbiAtIDFdO1xuICAgIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IC0taSkgYVtpXSA9IChyW2ldIC0gYVtpICsgMV0pIC8gYltpXTtcbiAgICBiW24gLSAxXSA9ICh4W25dICsgYVtuIC0gMV0pIC8gMjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbiAtIDE7ICsraSkgYltpXSA9IDIgKiB4W2kgKyAxXSAtIGFbaSArIDFdO1xuICAgIHJldHVybiBbYSwgYl07XG4gIH1cblxuICBmdW5jdGlvbiBuYXR1cmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IE5hdHVyYWwoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBTdGVwKGNvbnRleHQsIHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl90ID0gdDtcbiAgfVxuXG4gIFN0ZXAucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94ID0gdGhpcy5feSA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKDAgPCB0aGlzLl90ICYmIHRoaXMuX3QgPCAxICYmIHRoaXMuX3BvaW50ID09PSAyKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIGlmICh0aGlzLl9saW5lID49IDApIHRoaXMuX3QgPSAxIC0gdGhpcy5fdCwgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgaWYgKHRoaXMuX3QgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgeSk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHgxID0gdGhpcy5feCAqICgxIC0gdGhpcy5fdCkgKyB4ICogdGhpcy5fdDtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB0aGlzLl95KTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX3ggPSB4LCB0aGlzLl95ID0geTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RlcChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGVwQmVmb3JlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGVwQWZ0ZXIoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAxKTtcbiAgfVxuXG4gIHZhciBzbGljZSQyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4gIGZ1bmN0aW9uIG5vbmUoc2VyaWVzLCBvcmRlcikge1xuICAgIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAxKSkgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAxLCBzMCwgczEgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBzMCA9IHMxLCBzMSA9IHNlcmllc1tvcmRlcltpXV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBzMVtqXVsxXSArPSBzMVtqXVswXSA9IGlzTmFOKHMwW2pdWzFdKSA/IHMwW2pdWzBdIDogczBbal1bMV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9uZSQxKHNlcmllcykge1xuICAgIHZhciBuID0gc2VyaWVzLmxlbmd0aCwgbyA9IG5ldyBBcnJheShuKTtcbiAgICB3aGlsZSAoLS1uID49IDApIG9bbl0gPSBuO1xuICAgIHJldHVybiBvO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhY2tWYWx1ZShkLCBrZXkpIHtcbiAgICByZXR1cm4gZFtrZXldO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhY2soKSB7XG4gICAgdmFyIGtleXMgPSBjb25zdGFudCQxKFtdKSxcbiAgICAgICAgb3JkZXIgPSBub25lJDEsXG4gICAgICAgIG9mZnNldCA9IG5vbmUsXG4gICAgICAgIHZhbHVlID0gc3RhY2tWYWx1ZTtcblxuICAgIGZ1bmN0aW9uIHN0YWNrKGRhdGEpIHtcbiAgICAgIHZhciBreiA9IGtleXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIG0gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBuID0ga3oubGVuZ3RoLFxuICAgICAgICAgIHN6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIG96O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGZvciAodmFyIGtpID0ga3pbaV0sIHNpID0gc3pbaV0gPSBuZXcgQXJyYXkobSksIGogPSAwLCBzaWo7IGogPCBtOyArK2opIHtcbiAgICAgICAgICBzaVtqXSA9IHNpaiA9IFswLCArdmFsdWUoZGF0YVtqXSwga2ksIGosIGRhdGEpXTtcbiAgICAgICAgICBzaWouZGF0YSA9IGRhdGFbal07XG4gICAgICAgIH1cbiAgICAgICAgc2kua2V5ID0ga2k7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIG96ID0gb3JkZXIoc3opOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHN6W296W2ldXS5pbmRleCA9IGk7XG4gICAgICB9XG5cbiAgICAgIG9mZnNldChzeiwgb3opO1xuICAgICAgcmV0dXJuIHN6O1xuICAgIH1cblxuICAgIHN0YWNrLmtleXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKHNsaWNlJDIuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XG4gICAgfTtcblxuICAgIHN0YWNrLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBzdGFjaykgOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgc3RhY2sub3JkZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvcmRlciA9IF8gPT0gbnVsbCA/IG5vbmUkMSA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMShzbGljZSQyLmNhbGwoXykpLCBzdGFjaykgOiBvcmRlcjtcbiAgICB9O1xuXG4gICAgc3RhY2sub2Zmc2V0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gXyA9PSBudWxsID8gbm9uZSA6IF8sIHN0YWNrKSA6IG9mZnNldDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0YWNrO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwYW5kKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgICBmb3IgKHZhciBpLCBuLCBqID0gMCwgbSA9IHNlcmllc1swXS5sZW5ndGgsIHk7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoeSA9IGkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgICAgaWYgKHkpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNlcmllc1tpXVtqXVsxXSAvPSB5O1xuICAgIH1cbiAgICBub25lKHNlcmllcywgb3JkZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2lsaG91ZXR0ZShzZXJpZXMsIG9yZGVyKSB7XG4gICAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIHMwID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMwLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgICAgczBbal1bMV0gKz0gczBbal1bMF0gPSAteSAvIDI7XG4gICAgfVxuICAgIG5vbmUoc2VyaWVzLCBvcmRlcik7XG4gIH1cblxuICBmdW5jdGlvbiB3aWdnbGUoc2VyaWVzLCBvcmRlcikge1xuICAgIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSB8fCAhKChtID0gKHMwID0gc2VyaWVzW29yZGVyWzBdXSkubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gICAgZm9yICh2YXIgeSA9IDAsIGogPSAxLCBzMCwgbSwgbjsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHMxID0gMCwgczIgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHZhciBzaSA9IHNlcmllc1tvcmRlcltpXV0sXG4gICAgICAgICAgICBzaWowID0gc2lbal1bMV0gfHwgMCxcbiAgICAgICAgICAgIHNpajEgPSBzaVtqIC0gMV1bMV0gfHwgMCxcbiAgICAgICAgICAgIHMzID0gKHNpajAgLSBzaWoxKSAvIDI7XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaTsgKytrKSB7XG4gICAgICAgICAgdmFyIHNrID0gc2VyaWVzW29yZGVyW2tdXSxcbiAgICAgICAgICAgICAgc2tqMCA9IHNrW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICAgIHNrajEgPSBza1tqIC0gMV1bMV0gfHwgMDtcbiAgICAgICAgICBzMyArPSBza2owIC0gc2tqMTtcbiAgICAgICAgfVxuICAgICAgICBzMSArPSBzaWowLCBzMiArPSBzMyAqIHNpajA7XG4gICAgICB9XG4gICAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICAgIGlmIChzMSkgeSAtPSBzMiAvIHMxO1xuICAgIH1cbiAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICBub25lKHNlcmllcywgb3JkZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNjZW5kaW5nJDEoc2VyaWVzKSB7XG4gICAgdmFyIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQxKTtcbiAgICByZXR1cm4gbm9uZSQxKHNlcmllcykuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzdW1zW2FdIC0gc3Vtc1tiXTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdW0kMShzZXJpZXMpIHtcbiAgICB2YXIgcyA9IDAsIGkgPSAtMSwgbiA9IHNlcmllcy5sZW5ndGgsIHY7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICh2ID0gK3Nlcmllc1tpXVsxXSkgcyArPSB2O1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzY2VuZGluZyQyKHNlcmllcykge1xuICAgIHJldHVybiBhc2NlbmRpbmckMShzZXJpZXMpLnJldmVyc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2lkZU91dChzZXJpZXMpIHtcbiAgICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICAgIGksXG4gICAgICAgIGosXG4gICAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQxKSxcbiAgICAgICAgb3JkZXIgPSBub25lJDEoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYl0gLSBzdW1zW2FdOyB9KSxcbiAgICAgICAgdG9wID0gMCxcbiAgICAgICAgYm90dG9tID0gMCxcbiAgICAgICAgdG9wcyA9IFtdLFxuICAgICAgICBib3R0b21zID0gW107XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBqID0gb3JkZXJbaV07XG4gICAgICBpZiAodG9wIDwgYm90dG9tKSB7XG4gICAgICAgIHRvcCArPSBzdW1zW2pdO1xuICAgICAgICB0b3BzLnB1c2goaik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib3R0b20gKz0gc3Vtc1tqXTtcbiAgICAgICAgYm90dG9tcy5wdXNoKGopO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnNlKHNlcmllcykge1xuICAgIHJldHVybiBub25lJDEoc2VyaWVzKS5yZXZlcnNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZpbmUoY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICAgIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICAgIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgICByZXR1cm4gcHJvdG90eXBlO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG4gIHZhciBkYXJrZXIgPSAwLjc7XG4gIHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbiAgdmFyIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLztcbiAgdmFyIHJlSGV4NiA9IC9eIyhbMC05YS1mXXs2fSkkLztcbiAgdmFyIHJlUmdiSW50ZWdlciA9IC9ecmdiXFwoXFxzKihbLStdP1xcZCspXFxzKixcXHMqKFstK10/XFxkKylcXHMqLFxccyooWy0rXT9cXGQrKVxccypcXCkkLztcbiAgdmFyIHJlUmdiUGVyY2VudCA9IC9ecmdiXFwoXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccypcXCkkLztcbiAgdmFyIHJlUmdiYUludGVnZXIgPSAvXnJnYmFcXChcXHMqKFstK10/XFxkKylcXHMqLFxccyooWy0rXT9cXGQrKVxccyosXFxzKihbLStdP1xcZCspXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPylcXHMqXFwpJC87XG4gIHZhciByZVJnYmFQZXJjZW50ID0gL15yZ2JhXFwoXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKlxcKSQvO1xuICB2YXIgcmVIc2xQZXJjZW50ID0gL15oc2xcXChcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPylcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqXFwpJC87XG4gIHZhciByZUhzbGFQZXJjZW50ID0gL15oc2xhXFwoXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPylcXHMqXFwpJC87XG4gIHZhciBuYW1lZCA9IHtcbiAgICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICAgIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gICAgYXF1YTogMHgwMGZmZmYsXG4gICAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gICAgYXp1cmU6IDB4ZjBmZmZmLFxuICAgIGJlaWdlOiAweGY1ZjVkYyxcbiAgICBiaXNxdWU6IDB4ZmZlNGM0LFxuICAgIGJsYWNrOiAweDAwMDAwMCxcbiAgICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gICAgYmx1ZTogMHgwMDAwZmYsXG4gICAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gICAgYnJvd246IDB4YTUyYTJhLFxuICAgIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gICAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICAgIGNvcmFsOiAweGZmN2Y1MCxcbiAgICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gICAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICAgIGNyaW1zb246IDB4ZGMxNDNjLFxuICAgIGN5YW46IDB4MDBmZmZmLFxuICAgIGRhcmtibHVlOiAweDAwMDA4YixcbiAgICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gICAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gICAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICAgIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gICAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICAgIGRhcmtraGFraTogMHhiZGI3NmIsXG4gICAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICAgIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICAgIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICAgIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICAgIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICAgIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICAgIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gICAgZGltZ3JheTogMHg2OTY5NjksXG4gICAgZGltZ3JleTogMHg2OTY5NjksXG4gICAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gICAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gICAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICAgIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICAgIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gICAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gICAgZ29sZDogMHhmZmQ3MDAsXG4gICAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgICBncmF5OiAweDgwODA4MCxcbiAgICBncmVlbjogMHgwMDgwMDAsXG4gICAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICAgIGdyZXk6IDB4ODA4MDgwLFxuICAgIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgICBob3RwaW5rOiAweGZmNjliNCxcbiAgICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICAgIGluZGlnbzogMHg0YjAwODIsXG4gICAgaXZvcnk6IDB4ZmZmZmYwLFxuICAgIGtoYWtpOiAweGYwZTY4YyxcbiAgICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gICAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gICAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICAgIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gICAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gICAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gICAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICAgIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gICAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICAgIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICAgIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gICAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICAgIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gICAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICAgIGxpbWU6IDB4MDBmZjAwLFxuICAgIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gICAgbGluZW46IDB4ZmFmMGU2LFxuICAgIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICAgIG1hcm9vbjogMHg4MDAwMDAsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gICAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gICAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICAgIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gICAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICAgIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gICAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICAgIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgICBuYXZ5OiAweDAwMDA4MCxcbiAgICBvbGRsYWNlOiAweGZkZjVlNixcbiAgICBvbGl2ZTogMHg4MDgwMDAsXG4gICAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICAgIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gICAgb3JjaGlkOiAweGRhNzBkNixcbiAgICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICAgIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICAgIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICAgIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICAgIHBlYWNocHVmZjogMHhmZmRhYjksXG4gICAgcGVydTogMHhjZDg1M2YsXG4gICAgcGluazogMHhmZmMwY2IsXG4gICAgcGx1bTogMHhkZGEwZGQsXG4gICAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gICAgcHVycGxlOiAweDgwMDA4MCxcbiAgICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgICByZWQ6IDB4ZmYwMDAwLFxuICAgIHJvc3licm93bjogMHhiYzhmOGYsXG4gICAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gICAgc2FsbW9uOiAweGZhODA3MixcbiAgICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgICBzZWFncmVlbjogMHgyZThiNTcsXG4gICAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICAgIHNpZW5uYTogMHhhMDUyMmQsXG4gICAgc2lsdmVyOiAweGMwYzBjMCxcbiAgICBza3libHVlOiAweDg3Y2VlYixcbiAgICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICAgIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gICAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgICBzbm93OiAweGZmZmFmYSxcbiAgICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gICAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgICB0YW46IDB4ZDJiNDhjLFxuICAgIHRlYWw6IDB4MDA4MDgwLFxuICAgIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICAgIHRvbWF0bzogMHhmZjYzNDcsXG4gICAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICAgIHdoZWF0OiAweGY1ZGViMyxcbiAgICB3aGl0ZTogMHhmZmZmZmYsXG4gICAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gICAgeWVsbG93OiAweGZmZmYwMCxcbiAgICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbiAgfTtcblxuICBkZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gICAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICAgIHZhciBtO1xuICAgIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4MGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSkgLy8gI2YwMFxuICAgICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKVxuICAgICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgICA6IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiByZ2JuKG4pIHtcbiAgICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gICAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICAgIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICAgIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gICAgbyA9IG8ucmdiKCk7XG4gICAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbG9yUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gICAgdGhpcy5yID0gK3I7XG4gICAgdGhpcy5nID0gK2c7XG4gICAgdGhpcy5iID0gK2I7XG4gICAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG4gIH1cblxuICBkZWZpbmUoUmdiLCBjb2xvclJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgICAmJiAoMCA8PSB0aGlzLmcgJiYgdGhpcy5nIDw9IDI1NSlcbiAgICAgICAgICAmJiAoMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSlcbiAgICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICAgIH1cbiAgfSkpO1xuXG4gIGZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICAgIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gICAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG4gIH1cblxuICBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gICAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gICAgbyA9IG8ucmdiKCk7XG4gICAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgICAgaCA9IE5hTixcbiAgICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICBpZiAocykge1xuICAgICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgICAgaCAqPSA2MDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvckhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICAgIHRoaXMuaCA9ICtoO1xuICAgIHRoaXMucyA9ICtzO1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKEhzbCwgY29sb3JIc2wsIGV4dGVuZChDb2xvciwge1xuICAgIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICAgIHRoaXMub3BhY2l0eVxuICAgICAgKTtcbiAgICB9LFxuICAgIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgICB9XG4gIH0pKTtcblxuICAvKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG4gIGZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gICAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICAgIDogbTEpICogMjU1O1xuICB9XG5cbiAgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuICB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG5cbiAgdmFyIEtuID0gMTg7XG4gIHZhciBYbiA9IDAuOTUwNDcwO1xuICB2YXIgWW4gPSAxO1xuICB2YXIgWm4gPSAxLjA4ODgzMDtcbiAgdmFyIHQwID0gNCAvIDI5O1xuICB2YXIgdDEgPSA2IC8gMjk7XG4gIHZhciB0MiA9IDMgKiB0MSAqIHQxO1xuICB2YXIgdDMgPSB0MSAqIHQxICogdDE7XG4gIGZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICAgIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICAgIGlmIChvIGluc3RhbmNlb2YgSGNsKSB7XG4gICAgICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gICAgICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbiAgICB9XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICAgIHZhciBiID0gcmdiMnh5eihvLnIpLFxuICAgICAgICBhID0gcmdiMnh5eihvLmcpLFxuICAgICAgICBsID0gcmdiMnh5eihvLmIpLFxuICAgICAgICB4ID0geHl6MmxhYigoMC40MTI0NTY0ICogYiArIDAuMzU3NTc2MSAqIGEgKyAwLjE4MDQzNzUgKiBsKSAvIFhuKSxcbiAgICAgICAgeSA9IHh5ejJsYWIoKDAuMjEyNjcyOSAqIGIgKyAwLjcxNTE1MjIgKiBhICsgMC4wNzIxNzUwICogbCkgLyBZbiksXG4gICAgICAgIHogPSB4eXoybGFiKCgwLjAxOTMzMzkgKiBiICsgMC4xMTkxOTIwICogYSArIDAuOTUwMzA0MSAqIGwpIC8gWm4pO1xuICAgIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBMYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMuYSA9ICthO1xuICAgIHRoaXMuYiA9ICtiO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcbiAgICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAgIHh5ejJyZ2IoIDMuMjQwNDU0MiAqIHggLSAxLjUzNzEzODUgKiB5IC0gMC40OTg1MzE0ICogeiksIC8vIEQ2NSAtPiBzUkdCXG4gICAgICAgIHh5ejJyZ2IoLTAuOTY5MjY2MCAqIHggKyAxLjg3NjAxMDggKiB5ICsgMC4wNDE1NTYwICogeiksXG4gICAgICAgIHh5ejJyZ2IoIDAuMDU1NjQzNCAqIHggLSAwLjIwNDAyNTkgKiB5ICsgMS4wNTcyMjUyICogeiksXG4gICAgICAgIHRoaXMub3BhY2l0eVxuICAgICAgKTtcbiAgICB9XG4gIH0pKTtcblxuICBmdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XG4gIH1cblxuICBmdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgICByZXR1cm4gdCA+IHQxID8gdCAqIHQgKiB0IDogdDIgKiAodCAtIHQwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHh5ejJyZ2IoeCkge1xuICAgIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmdiMnh5eih4KSB7XG4gICAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH1cblxuICBmdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgICBpZiAoIShvIGluc3RhbmNlb2YgTGFiKSkgbyA9IGxhYkNvbnZlcnQobyk7XG4gICAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gICAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbG9ySGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gICAgdGhpcy5oID0gK2g7XG4gICAgdGhpcy5jID0gK2M7XG4gICAgdGhpcy5sID0gK2w7XG4gICAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG4gIH1cblxuICBkZWZpbmUoSGNsLCBjb2xvckhjbCwgZXh0ZW5kKENvbG9yLCB7XG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLbiAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLbiAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGxhYkNvbnZlcnQodGhpcykucmdiKCk7XG4gICAgfVxuICB9KSk7XG5cbiAgdmFyIEEgPSAtMC4xNDg2MTtcbiAgdmFyIEIgPSArMS43ODI3NztcbiAgdmFyIEMgPSAtMC4yOTIyNztcbiAgdmFyIEQgPSAtMC45MDY0OTtcbiAgdmFyIEUgPSArMS45NzI5NDtcbiAgdmFyIEVEID0gRSAqIEQ7XG4gIHZhciBFQiA9IEUgKiBCO1xuICB2YXIgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuICBmdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gICAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgICBibCA9IGIgLSBsLFxuICAgICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gICAgdGhpcy5oID0gK2g7XG4gICAgdGhpcy5zID0gK3M7XG4gICAgdGhpcy5sID0gK2w7XG4gICAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG4gIH1cblxuICBkZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICAgIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICAgIHRoaXMub3BhY2l0eVxuICAgICAgKTtcbiAgICB9XG4gIH0pKTtcblxuICBmdW5jdGlvbiBiYXNpcyQxKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICAgIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICAgICsgdDMgKiB2MykgLyA2O1xuICB9XG5cbiAgZnVuY3Rpb24gYmFzaXMkMih2YWx1ZXMpIHtcbiAgICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgICAgcmV0dXJuIGJhc2lzJDEoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJhc2lzQ2xvc2VkJDEodmFsdWVzKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICAgIHJldHVybiBiYXNpcyQxKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQyKHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFyJDEoYSwgZCkge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYSArIHQgKiBkO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBleHBvbmVudGlhbCQxKGEsIGIsIHkpIHtcbiAgICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBodWUoYSwgYikge1xuICAgIHZhciBkID0gYiAtIGE7XG4gICAgcmV0dXJuIGQgPyBsaW5lYXIkMShhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50JDIoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH1cblxuICBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gICAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsJDEoYSwgYiwgeSkgOiBjb25zdGFudCQyKGlzTmFOKGEpID8gYiA6IGEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgICB2YXIgZCA9IGIgLSBhO1xuICAgIHJldHVybiBkID8gbGluZWFyJDEoYSwgZCkgOiBjb25zdGFudCQyKGlzTmFOKGEpID8gYiA6IGEpO1xuICB9XG5cbiAgdmFyIGludGVycG9sYXRlUmdiID0gKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICAgIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gICAgcmV0dXJuIHJnYjtcbiAgfSkoMSk7XG5cbiAgZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBpLCBjb2xvcjtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgICAgfVxuICAgICAgciA9IHNwbGluZShyKTtcbiAgICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgICBiID0gc3BsaW5lKGIpO1xuICAgICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzJDIpO1xuICB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQkMSk7XG5cbiAgZnVuY3Rpb24gYXJyYXkkMShhLCBiKSB7XG4gICAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICAgIHggPSBuZXcgQXJyYXkobmIpLFxuICAgICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgICAgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gaW50ZXJwb2xhdGUoYVtpXSwgYltpXSk7XG4gICAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgICByZXR1cm4gYztcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGF0ZShhLCBiKSB7XG4gICAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVOdW1iZXIoYSwgYikge1xuICAgIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGEgKyBiICogdDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gb2JqZWN0KGEsIGIpIHtcbiAgICB2YXIgaSA9IHt9LFxuICAgICAgICBjID0ge30sXG4gICAgICAgIGs7XG5cbiAgICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICAgIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgICBmb3IgKGsgaW4gYikge1xuICAgICAgaWYgKGsgaW4gYSkge1xuICAgICAgICBpW2tdID0gaW50ZXJwb2xhdGUoYVtrXSwgYltrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjW2tdID0gYltrXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuXG4gIHZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2c7XG4gIHZhciByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcbiAgZnVuY3Rpb24gemVybyhiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZShiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVTdHJpbmcoYSwgYikge1xuICAgIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gICAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICAgIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgICAgfVxuICAgICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgICBzWysraV0gPSBudWxsO1xuICAgICAgICBxLnB1c2goe2k6IGksIHg6IGludGVycG9sYXRlTnVtYmVyKGFtLCBibSl9KTtcbiAgICAgIH1cbiAgICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICAgIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cblxuICAgIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAgIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICAgID8gb25lKHFbMF0ueClcbiAgICAgICAgOiB6ZXJvKGIpKVxuICAgICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gICAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50JDIoYilcbiAgICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpIDogaW50ZXJwb2xhdGVTdHJpbmcpXG4gICAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXkkMVxuICAgICAgICA6IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICAgIDogaW50ZXJwb2xhdGVOdW1iZXIpKGEsIGIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVSb3VuZChhLCBiKSB7XG4gICAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICAgIH07XG4gIH1cblxuICB2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbiAgdmFyIGlkZW50aXR5JDIgPSB7XG4gICAgdHJhbnNsYXRlWDogMCxcbiAgICB0cmFuc2xhdGVZOiAwLFxuICAgIHJvdGF0ZTogMCxcbiAgICBza2V3WDogMCxcbiAgICBzY2FsZVg6IDEsXG4gICAgc2NhbGVZOiAxXG4gIH07XG5cbiAgZnVuY3Rpb24gZGVjb21wb3NlKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICAgIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gICAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gICAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNsYXRlWDogZSxcbiAgICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgICBzY2FsZVk6IHNjYWxlWVxuICAgIH07XG4gIH1cblxuICB2YXIgY3NzTm9kZTtcbiAgdmFyIGNzc1Jvb3Q7XG4gIHZhciBjc3NWaWV3O1xuICB2YXIgc3ZnTm9kZTtcbiAgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHkkMjtcbiAgICBpZiAoIWNzc05vZGUpIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBjc3NSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjc3NWaWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICAgIGNzc1Jvb3QucmVtb3ZlQ2hpbGQoY3NzTm9kZSk7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICAgIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHkkMjtcbiAgICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gICAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICAgIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5JDI7XG4gICAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gICAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gICAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IGludGVycG9sYXRlTnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IGludGVycG9sYXRlTnVtYmVyKHlhLCB5Yil9KTtcbiAgICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBpbnRlcnBvbGF0ZU51bWJlcihhLCBiKX0pO1xuICAgICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogaW50ZXJwb2xhdGVOdW1iZXIoYSwgYil9KTtcbiAgICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IGludGVycG9sYXRlTnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IGludGVycG9sYXRlTnVtYmVyKHlhLCB5Yil9KTtcbiAgICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtJDEgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbiAgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtJDIgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuXG4gIHZhciByaG8gPSBNYXRoLlNRUlQyO1xuICB2YXIgcmhvMiA9IDI7XG4gIHZhciByaG80ID0gNDtcbiAgdmFyIGVwc2lsb24yID0gMWUtMTI7XG4gIGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbiAgfVxuXG4gIC8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbiAgLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVpvb20ocDAsIHAxKSB7XG4gICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgICBkeCA9IHV4MSAtIHV4MCxcbiAgICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICAgIGksXG4gICAgICAgIFM7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgICBpZiAoZDIgPCBlcHNpbG9uMikge1xuICAgICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICAgIHcwICogTWF0aC5leHAocmhvICogdCAqIFMpXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhbCBjYXNlLlxuICAgIGVsc2Uge1xuICAgICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gICAgcmV0dXJuIGk7XG4gIH1cblxuICBmdW5jdGlvbiBoc2woaHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySHNsKGVuZCkpLmgpLFxuICAgICAgICAgIHMgPSBub2dhbW1hKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBoc2wkMSA9IGhzbChodWUpO1xuICB2YXIgaHNsTG9uZyA9IGhzbChub2dhbW1hKTtcblxuICBmdW5jdGlvbiBsYWIkMShzdGFydCwgZW5kKSB7XG4gICAgdmFyIGwgPSBub2dhbW1hKChzdGFydCA9IGxhYihzdGFydCkpLmwsIChlbmQgPSBsYWIoZW5kKSkubCksXG4gICAgICAgIGEgPSBub2dhbW1hKHN0YXJ0LmEsIGVuZC5hKSxcbiAgICAgICAgYiA9IG5vZ2FtbWEoc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQuYSA9IGEodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGNsKGh1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhjbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhjbChlbmQpKS5oKSxcbiAgICAgICAgICBjID0gbm9nYW1tYShzdGFydC5jLCBlbmQuYyksXG4gICAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5jID0gYyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgaGNsJDEgPSBoY2woaHVlKTtcbiAgdmFyIGhjbExvbmcgPSBoY2wobm9nYW1tYSk7XG5cbiAgZnVuY3Rpb24gY3ViZWhlbGl4JDEoaHVlKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBjdWJlaGVsaXhHYW1tYSh5KSB7XG4gICAgICB5ID0gK3k7XG5cbiAgICAgIGZ1bmN0aW9uIGN1YmVoZWxpeCQkKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICAgIHMgPSBub2dhbW1hKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICAgIGwgPSBub2dhbW1hKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgICBzdGFydC5sID0gbChNYXRoLnBvdyh0LCB5KSk7XG4gICAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY3ViZWhlbGl4JCQuZ2FtbWEgPSBjdWJlaGVsaXhHYW1tYTtcblxuICAgICAgcmV0dXJuIGN1YmVoZWxpeCQkO1xuICAgIH0pKDEpO1xuICB9XG5cbiAgdmFyIGN1YmVoZWxpeCQyID0gY3ViZWhlbGl4JDEoaHVlKTtcbiAgdmFyIGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeCQxKG5vZ2FtbWEpO1xuXG4gIGZ1bmN0aW9uIHF1YW50aXplKGludGVycG9sYXRvciwgbikge1xuICAgIHZhciBzYW1wbGVzID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBzYW1wbGVzW2ldID0gaW50ZXJwb2xhdG9yKGkgLyAobiAtIDEpKTtcbiAgICByZXR1cm4gc2FtcGxlcztcbiAgfVxuXG4gIHZhciBub29wJDEgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICAgIF9bdF0gPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgICB0aGlzLl8gPSBfO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICAgIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gICAgfSk7XG4gIH1cblxuICBEaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICAgIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICAgIHQsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0JDEoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldCQxKF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gICAgfSxcbiAgICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH0sXG4gICAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0JDEodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHR5cGVbaV0gPSBub29wJDEsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gICAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG4gIH1cblxuICBmdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICAgIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICAgIH07XG4gIH1cblxuICAvLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbiAgZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgICAgY29sdW1ucyA9IFtdO1xuXG4gICAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjb2x1bW5zO1xuICB9XG5cbiAgZnVuY3Rpb24gZHN2KGRlbGltaXRlcikge1xuICAgIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLFxuICAgICAgICBkZWxpbWl0ZXJDb2RlID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgICB9KTtcbiAgICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgICByZXR1cm4gcm93cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LCAvLyBzZW50aW5lbCB2YWx1ZSBmb3IgZW5kLW9mLWxpbmVcbiAgICAgICAgICBFT0YgPSB7fSwgLy8gc2VudGluZWwgdmFsdWUgZm9yIGVuZC1vZi1maWxlXG4gICAgICAgICAgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgICBuID0gMCwgLy8gdGhlIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgICB0LCAvLyB0aGUgY3VycmVudCB0b2tlblxuICAgICAgICAgIGVvbDsgLy8gaXMgdGhlIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgICAgaWYgKEkgPj0gTikgcmV0dXJuIEVPRjsgLy8gc3BlY2lhbCBjYXNlOiBlbmQgb2YgZmlsZVxuICAgICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDsgLy8gc3BlY2lhbCBjYXNlOiBlbmQgb2YgbGluZVxuXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZTogcXVvdGVzXG4gICAgICAgIHZhciBqID0gSSwgYztcbiAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gMzQpIHtcbiAgICAgICAgICB2YXIgaSA9IGo7XG4gICAgICAgICAgd2hpbGUgKGkrKyA8IE4pIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgPT09IDM0KSB7XG4gICAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSArIDEpICE9PSAzNCkgYnJlYWs7XG4gICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgSSA9IGkgKyAyO1xuICAgICAgICAgIGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICAgIGlmIChjID09PSAxMykge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSArIDIpID09PSAxMCkgKytJO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gMTApIHtcbiAgICAgICAgICAgIGVvbCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbW1vbiBjYXNlOiBmaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmVcbiAgICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgICAgdmFyIGsgPSAxO1xuICAgICAgICAgIGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKTtcbiAgICAgICAgICBpZiAoYyA9PT0gMTApIGVvbCA9IHRydWU7IC8vIFxcblxuICAgICAgICAgIGVsc2UgaWYgKGMgPT09IDEzKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IDEwKSArK0ksICsrazsgfSAvLyBcXHJ8XFxyXFxuXG4gICAgICAgICAgZWxzZSBpZiAoYyAhPT0gZGVsaW1pdGVyQ29kZSkgY29udGludWU7XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgSSAtIGspO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlOiBsYXN0IHRva2VuIGJlZm9yZSBFT0ZcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2Uoaik7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcbiAgICAgICAgICBhLnB1c2godCk7XG4gICAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGYgJiYgKGEgPSBmKGEsIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICByb3dzLnB1c2goYSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByb3dzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgICB9KSkuam9pbihcIlxcblwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIlxuICAgICAgICAgIDogcmVGb3JtYXQudGVzdCh0ZXh0ICs9IFwiXCIpID8gXCJcXFwiXCIgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgICAgOiB0ZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZTogcGFyc2UsXG4gICAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICAgIH07XG4gIH1cblxuICB2YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuICB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG4gIHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuICB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbiAgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcblxuICB2YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG4gIHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbiAgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG4gIHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuICB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xuXG4gIGZ1bmN0aW9uIHJlcXVlc3QodXJsLCBjYWxsYmFjaykge1xuICAgIHZhciByZXF1ZXN0LFxuICAgICAgICBldmVudCA9IGRpc3BhdGNoKFwiYmVmb3Jlc2VuZFwiLCBcInByb2dyZXNzXCIsIFwibG9hZFwiLCBcImVycm9yXCIpLFxuICAgICAgICBtaW1lVHlwZSxcbiAgICAgICAgaGVhZGVycyA9IG1hcCQxKCksXG4gICAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCxcbiAgICAgICAgdXNlciA9IG51bGwsXG4gICAgICAgIHBhc3N3b3JkID0gbnVsbCxcbiAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgIHJlc3BvbnNlVHlwZSxcbiAgICAgICAgdGltZW91dCA9IDA7XG5cbiAgICAvLyBJZiBJRSBkb2VzIG5vdCBzdXBwb3J0IENPUlMsIHVzZSBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICYmICEoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHIpXG4gICAgICAgICYmIC9eKGh0dHAocyk/Oik/XFwvXFwvLy50ZXN0KHVybCkpIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdDtcblxuICAgIFwib25sb2FkXCIgaW4geGhyXG4gICAgICAgID8geGhyLm9ubG9hZCA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IHJlc3BvbmRcbiAgICAgICAgOiB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24obykgeyB4aHIucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZChvKTsgfTtcblxuICAgIGZ1bmN0aW9uIHJlc3BvbmQobykge1xuICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMsIHJlc3VsdDtcbiAgICAgIGlmICghc3RhdHVzICYmIGhhc1Jlc3BvbnNlKHhocilcbiAgICAgICAgICB8fCBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMFxuICAgICAgICAgIHx8IHN0YXR1cyA9PT0gMzA0KSB7XG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5jYWxsKHJlcXVlc3QsIHhocik7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXZlbnQuY2FsbChcImVycm9yXCIsIHJlcXVlc3QsIGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSB4aHI7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQuY2FsbChcImxvYWRcIiwgcmVxdWVzdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBvKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGV2ZW50LmNhbGwoXCJwcm9ncmVzc1wiLCByZXF1ZXN0LCBlKTtcbiAgICB9O1xuXG4gICAgcmVxdWVzdCA9IHtcbiAgICAgIGhlYWRlcjogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgbmFtZSA9IChuYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gaGVhZGVycy5nZXQobmFtZSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSBoZWFkZXJzLnJlbW92ZShuYW1lKTtcbiAgICAgICAgZWxzZSBoZWFkZXJzLnNldChuYW1lLCB2YWx1ZSArIFwiXCIpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIElmIG1pbWVUeXBlIGlzIG5vbi1udWxsIGFuZCBubyBBY2NlcHQgaGVhZGVyIGlzIHNldCwgYSBkZWZhdWx0IGlzIHVzZWQuXG4gICAgICBtaW1lVHlwZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWltZVR5cGU7XG4gICAgICAgIG1pbWVUeXBlID0gdmFsdWUgPT0gbnVsbCA/IG51bGwgOiB2YWx1ZSArIFwiXCI7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgICAgfSxcblxuICAgICAgLy8gU3BlY2lmaWVzIHdoYXQgdHlwZSB0aGUgcmVzcG9uc2UgdmFsdWUgc2hvdWxkIHRha2U7XG4gICAgICAvLyBmb3IgaW5zdGFuY2UsIGFycmF5YnVmZmVyLCBibG9iLCBkb2N1bWVudCwgb3IgdGV4dC5cbiAgICAgIHJlc3BvbnNlVHlwZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmVzcG9uc2VUeXBlO1xuICAgICAgICByZXNwb25zZVR5cGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICB0aW1lb3V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aW1lb3V0O1xuICAgICAgICB0aW1lb3V0ID0gK3ZhbHVlO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIHVzZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IHVzZXIgOiAodXNlciA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiLCByZXF1ZXN0KTtcbiAgICAgIH0sXG5cbiAgICAgIHBhc3N3b3JkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyBwYXNzd29yZCA6IChwYXNzd29yZCA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiLCByZXF1ZXN0KTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIFNwZWNpZnkgaG93IHRvIGNvbnZlcnQgdGhlIHJlc3BvbnNlIGNvbnRlbnQgdG8gYSBzcGVjaWZpYyB0eXBlO1xuICAgICAgLy8gY2hhbmdlcyB0aGUgY2FsbGJhY2sgdmFsdWUgb24gXCJsb2FkXCIgZXZlbnRzLlxuICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3BvbnNlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgICAgfSxcblxuICAgICAgLy8gQWxpYXMgZm9yIHNlbmQoXCJHRVRcIiwg4oCmKS5cbiAgICAgIGdldDogZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Quc2VuZChcIkdFVFwiLCBkYXRhLCBjYWxsYmFjayk7XG4gICAgICB9LFxuXG4gICAgICAvLyBBbGlhcyBmb3Igc2VuZChcIlBPU1RcIiwg4oCmKS5cbiAgICAgIHBvc3Q6IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0LnNlbmQoXCJQT1NUXCIsIGRhdGEsIGNhbGxiYWNrKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIElmIGNhbGxiYWNrIGlzIG5vbi1udWxsLCBpdCB3aWxsIGJlIHVzZWQgZm9yIGVycm9yIGFuZCBsb2FkIGV2ZW50cy5cbiAgICAgIHNlbmQ6IGZ1bmN0aW9uKG1ldGhvZCwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUsIHVzZXIsIHBhc3N3b3JkKTtcbiAgICAgICAgaWYgKG1pbWVUeXBlICE9IG51bGwgJiYgIWhlYWRlcnMuaGFzKFwiYWNjZXB0XCIpKSBoZWFkZXJzLnNldChcImFjY2VwdFwiLCBtaW1lVHlwZSArIFwiLCovKlwiKTtcbiAgICAgICAgaWYgKHhoci5zZXRSZXF1ZXN0SGVhZGVyKSBoZWFkZXJzLmVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpOyB9KTtcbiAgICAgICAgaWYgKG1pbWVUeXBlICE9IG51bGwgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUpIHhoci5vdmVycmlkZU1pbWVUeXBlKG1pbWVUeXBlKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPSBudWxsKSB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgICBpZiAodGltZW91dCA+IDApIHhoci50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgY2FsbGJhY2subGVuZ3RoID09PSAxKSBjYWxsYmFjayA9IGZpeENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHJlcXVlc3Qub24oXCJlcnJvclwiLCBjYWxsYmFjaykub24oXCJsb2FkXCIsIGZ1bmN0aW9uKHhocikgeyBjYWxsYmFjayhudWxsLCB4aHIpOyB9KTtcbiAgICAgICAgZXZlbnQuY2FsbChcImJlZm9yZXNlbmRcIiwgcmVxdWVzdCwgeGhyKTtcbiAgICAgICAgeGhyLnNlbmQoZGF0YSA9PSBudWxsID8gbnVsbCA6IGRhdGEpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIGFib3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgICAgfSxcblxuICAgICAgb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBldmVudC5vbi5hcHBseShldmVudCwgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBldmVudCA/IHJlcXVlc3QgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgICByZXR1cm4gcmVxdWVzdC5nZXQoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiByZXF1ZXN0O1xuICB9XG5cbiAgZnVuY3Rpb24gZml4Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXJyb3IsIHhocikge1xuICAgICAgY2FsbGJhY2soZXJyb3IgPT0gbnVsbCA/IHhociA6IG51bGwpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBoYXNSZXNwb25zZSh4aHIpIHtcbiAgICB2YXIgdHlwZSA9IHhoci5yZXNwb25zZVR5cGU7XG4gICAgcmV0dXJuIHR5cGUgJiYgdHlwZSAhPT0gXCJ0ZXh0XCJcbiAgICAgICAgPyB4aHIucmVzcG9uc2UgLy8gbnVsbCBvbiBlcnJvclxuICAgICAgICA6IHhoci5yZXNwb25zZVRleHQ7IC8vIFwiXCIgb24gZXJyb3JcbiAgfVxuXG4gIGZ1bmN0aW9uIHR5cGUoZGVmYXVsdE1pbWVUeXBlLCByZXNwb25zZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpLnJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiByLmdldChjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGh0bWwgPSB0eXBlKFwidGV4dC9odG1sXCIsIGZ1bmN0aW9uKHhocikge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCh4aHIucmVzcG9uc2VUZXh0KTtcbiAgfSk7XG5cbiAgdmFyIGpzb24gPSB0eXBlKFwiYXBwbGljYXRpb24vanNvblwiLCBmdW5jdGlvbih4aHIpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgfSk7XG5cbiAgdmFyIHRleHQgPSB0eXBlKFwidGV4dC9wbGFpblwiLCBmdW5jdGlvbih4aHIpIHtcbiAgICByZXR1cm4geGhyLnJlc3BvbnNlVGV4dDtcbiAgfSk7XG5cbiAgdmFyIHhtbCA9IHR5cGUoXCJhcHBsaWNhdGlvbi94bWxcIiwgZnVuY3Rpb24oeGhyKSB7XG4gICAgdmFyIHhtbCA9IHhoci5yZXNwb25zZVhNTDtcbiAgICBpZiAoIXhtbCkgdGhyb3cgbmV3IEVycm9yKFwicGFyc2UgZXJyb3JcIik7XG4gICAgcmV0dXJuIHhtbDtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZHN2JDEoZGVmYXVsdE1pbWVUeXBlLCBwYXJzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih1cmwsIHJvdywgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgY2FsbGJhY2sgPSByb3csIHJvdyA9IG51bGw7XG4gICAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpO1xuICAgICAgci5yb3cgPSBmdW5jdGlvbihfKSB7IHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gci5yZXNwb25zZShyZXNwb25zZU9mKHBhcnNlLCByb3cgPSBfKSkgOiByb3c7IH07XG4gICAgICByLnJvdyhyb3cpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrID8gci5nZXQoY2FsbGJhY2spIDogcjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzcG9uc2VPZihwYXJzZSwgcm93KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgICAgIHJldHVybiBwYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCwgcm93KTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNzdiQxID0gZHN2JDEoXCJ0ZXh0L2NzdlwiLCBjc3ZQYXJzZSk7XG5cbiAgdmFyIHRzdiQxID0gZHN2JDEoXCJ0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzXCIsIHRzdlBhcnNlKTtcblxuICB2YXIgZnJhbWUgPSAwO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBpbnRlcnZhbCA9IDA7XG4gIHZhciBwb2tlRGVsYXkgPSAxMDAwO1xuICB2YXIgdGFza0hlYWQ7XG4gIHZhciB0YXNrVGFpbDtcbiAgdmFyIGNsb2NrTGFzdCA9IDA7XG4gIHZhciBjbG9ja05vdyA9IDA7XG4gIHZhciBjbG9ja1NrZXcgPSAwO1xuICB2YXIgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlO1xuICB2YXIgc2V0RnJhbWUgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IChjbG9jayA9PT0gRGF0ZSA/IGZ1bmN0aW9uKGYpIHsgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkgeyBmKGNsb2NrLm5vdygpKTsgfSk7IH0gOiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpXG4gICAgICAgICAgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuICBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gVGltZXIoKSB7XG4gICAgdGhpcy5fY2FsbCA9XG4gICAgdGhpcy5fdGltZSA9XG4gICAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIH1cblxuICBUaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFRpbWVyLFxuICAgIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgICAgc2xlZXAoKTtcbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgICAgc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgdmFyIHQgPSBuZXcgVGltZXI7XG4gICAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICAgIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICAgICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICAgIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gICAgd2hpbGUgKHQpIHtcbiAgICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgICAgdCA9IHQuX25leHQ7XG4gICAgfVxuICAgIC0tZnJhbWU7XG4gIH1cblxuICBmdW5jdGlvbiB3YWtlKHRpbWUpIHtcbiAgICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSB0aW1lIHx8IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICAgIHRyeSB7XG4gICAgICB0aW1lckZsdXNoKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGZyYW1lID0gMDtcbiAgICAgIG5hcCgpO1xuICAgICAgY2xvY2tOb3cgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBva2UkMSgpIHtcbiAgICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICAgIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG4gIH1cblxuICBmdW5jdGlvbiBuYXAoKSB7XG4gICAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICAgIHdoaWxlICh0MSkge1xuICAgICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgICAgfVxuICAgIH1cbiAgICB0YXNrVGFpbCA9IHQwO1xuICAgIHNsZWVwKHRpbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICAgIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICAgIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdztcbiAgICBpZiAoZGVsYXkgPiAyNCkge1xuICAgICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgZGVsYXkpO1xuICAgICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWludGVydmFsKSBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UkMSwgcG9rZURlbGF5KTtcbiAgICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGltZW91dCQxKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIHZhciB0ID0gbmV3IFRpbWVyO1xuICAgIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gICAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICAgIHQuc3RvcCgpO1xuICAgICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgICB9LCBkZWxheSwgdGltZSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnZhbCQxKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIHZhciB0ID0gbmV3IFRpbWVyLCB0b3RhbCA9IGRlbGF5O1xuICAgIGlmIChkZWxheSA9PSBudWxsKSByZXR1cm4gdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSksIHQ7XG4gICAgZGVsYXkgPSArZGVsYXksIHRpbWUgPSB0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lO1xuICAgIHQucmVzdGFydChmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICAgIGVsYXBzZWQgKz0gdG90YWw7XG4gICAgICB0LnJlc3RhcnQodGljaywgdG90YWwgKz0gZGVsYXksIHRpbWUpO1xuICAgICAgY2FsbGJhY2soZWxhcHNlZCk7XG4gICAgfSwgZGVsYXksIHRpbWUpO1xuICAgIHJldHVybiB0O1xuICB9XG5cbnZhciAgIHQwJDEgPSBuZXcgRGF0ZTtcbnZhciAgIHQxJDEgPSBuZXcgRGF0ZTtcbiAgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICAgIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gICAgfVxuXG4gICAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcblxuICAgIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gICAgfTtcblxuICAgIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gICAgfTtcblxuICAgIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgICAgdmFyIHJhbmdlID0gW107XG4gICAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgICBkbyByYW5nZS5wdXNoKG5ldyBEYXRlKCtzdGFydCkpOyB3aGlsZSAob2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCksIHN0YXJ0IDwgc3RvcClcbiAgICAgIHJldHVybiByYW5nZTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICAgIHdoaWxlICgtLXN0ZXAgPj0gMCkgd2hpbGUgKG9mZnNldGkoZGF0ZSwgMSksICF0ZXN0KGRhdGUpKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgICB0MCQxLnNldFRpbWUoK3N0YXJ0KSwgdDEkMS5zZXRUaW1lKCtlbmQpO1xuICAgICAgICBmbG9vcmkodDAkMSksIGZsb29yaSh0MSQxKTtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAkMSwgdDEkMSkpO1xuICAgICAgfTtcblxuICAgICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1cblxuICB2YXIgbWlsbGlzZWNvbmQgPSBuZXdJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAvLyBub29wXG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBlbmQgLSBzdGFydDtcbiAgfSk7XG5cbiAgLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxuICBtaWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5mbG9vcihrKTtcbiAgICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICAgIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG5cbiAgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuICB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XG4gIHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuICB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbiAgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcblxuICB2YXIgc2Vjb25kID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvblNlY29uZCkgKiBkdXJhdGlvblNlY29uZCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvblNlY29uZDtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgfSk7XG5cbiAgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG5cbiAgdmFyIG1pbnV0ZSA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25NaW51dGUpICogZHVyYXRpb25NaW51dGUpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG4gIH0pO1xuXG4gIHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuXG4gIHZhciBob3VyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBvZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiBkdXJhdGlvbk1pbnV0ZSAlIGR1cmF0aW9uSG91cjtcbiAgICBpZiAob2Zmc2V0IDwgMCkgb2Zmc2V0ICs9IGR1cmF0aW9uSG91cjtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcigoK2RhdGUgLSBvZmZzZXQpIC8gZHVyYXRpb25Ib3VyKSAqIGR1cmF0aW9uSG91ciArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbiAgfSk7XG5cbiAgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcblxuICB2YXIgZGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbiAgfSk7XG5cbiAgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG5cbiAgZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdGltZVdlZWsgPSB3ZWVrZGF5KDApO1xuICB2YXIgdGltZU1vbmRheSA9IHdlZWtkYXkoMSk7XG4gIHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbiAgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG4gIHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG4gIHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuICB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG4gIHZhciBzdW5kYXlzID0gdGltZVdlZWsucmFuZ2U7XG4gIHZhciBtb25kYXlzID0gdGltZU1vbmRheS5yYW5nZTtcbiAgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbiAgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG4gIHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbiAgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG4gIHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcblxuICB2YXIgbW9udGggPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGVuZC5nZXRNb250aCgpIC0gc3RhcnQuZ2V0TW9udGgoKSArIChlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCkpICogMTI7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xuICB9KTtcblxuICB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG5cbiAgdmFyIHllYXIgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9KTtcblxuICAvLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG4gIHllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuXG4gIHZhciB1dGNNaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG4gIH0pO1xuXG4gIHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuXG4gIHZhciB1dGNIb3VyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xuICB9KTtcblxuICB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuXG4gIHZhciB1dGNEYXkgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG4gIH0pO1xuXG4gIHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuXG4gIGZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gICAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdXRjV2VlayA9IHV0Y1dlZWtkYXkoMCk7XG4gIHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuICB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG4gIHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuICB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuICB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbiAgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuICB2YXIgdXRjU3VuZGF5cyA9IHV0Y1dlZWsucmFuZ2U7XG4gIHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuICB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuICB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbiAgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuICB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbiAgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuXG4gIHZhciB1dGNNb250aCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG4gIH0pO1xuXG4gIHZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcblxuICB2YXIgdXRjWWVhciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIH0pO1xuXG4gIC8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbiAgdXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG5cbiAgLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuICAvLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbiAgLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWwoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG4gIGZ1bmN0aW9uIGZvcm1hdERlY2ltYWwoeCwgcCkge1xuICAgIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgwrFJbmZpbml0eVxuICAgIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gICAgLy8gKGUuZy4sIDEuMmUrMykgb3IgdGhlIGZvcm0gXFxkZVstK11cXGQrIChlLmcuLCAxZSszKS5cbiAgICByZXR1cm4gW1xuICAgICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAgICt4LnNsaWNlKGkgKyAxKVxuICAgIF07XG4gIH1cblxuICBmdW5jdGlvbiBleHBvbmVudCQxKHgpIHtcbiAgICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEdyb3VwKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgICB0ID0gW10sXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0RGVmYXVsdCh4LCBwKSB7XG4gICAgeCA9IHgudG9QcmVjaXNpb24ocCk7XG5cbiAgICBvdXQ6IGZvciAodmFyIG4gPSB4Lmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgICBzd2l0Y2ggKHhbaV0pIHtcbiAgICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgICAgY2FzZSBcImVcIjogYnJlYWsgb3V0O1xuICAgICAgICBkZWZhdWx0OiBpZiAoaTAgPiAwKSBpMCA9IDA7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpMCA+IDAgPyB4LnNsaWNlKDAsIGkwKSArIHguc2xpY2UoaTEgKyAxKSA6IHg7XG4gIH1cblxuICB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4QXV0byh4LCBwKSB7XG4gICAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICAgIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICAgIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICAgIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3VuZGVkKHgsIHApIHtcbiAgICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gICAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gICAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICAgIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG4gIH1cblxuICB2YXIgZm9ybWF0VHlwZXMgPSB7XG4gICAgXCJcIjogZm9ybWF0RGVmYXVsdCxcbiAgICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gICAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gICAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICAgIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICAgIFwiZlwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRml4ZWQocCk7IH0sXG4gICAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gICAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gICAgXCJwXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCk7IH0sXG4gICAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gICAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gICAgXCJYXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH0sXG4gICAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG4gIH07XG5cbiAgLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt0eXBlXVxuICB2YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtXFwoIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KFthLXolXSk/JC9pO1xuXG4gIGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICAgIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcblxuICAgIHZhciBtYXRjaCxcbiAgICAgICAgZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiLFxuICAgICAgICBhbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiLFxuICAgICAgICBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsXG4gICAgICAgIHN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCIsXG4gICAgICAgIHplcm8gPSAhIW1hdGNoWzVdLFxuICAgICAgICB3aWR0aCA9IG1hdGNoWzZdICYmICttYXRjaFs2XSxcbiAgICAgICAgY29tbWEgPSAhIW1hdGNoWzddLFxuICAgICAgICBwcmVjaXNpb24gPSBtYXRjaFs4XSAmJiArbWF0Y2hbOF0uc2xpY2UoMSksXG4gICAgICAgIHR5cGUgPSBtYXRjaFs5XSB8fCBcIlwiO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gTWFwIGludmFsaWQgdHlwZXMgdG8gdGhlIGRlZmF1bHQgZm9ybWF0LlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgdHlwZSA9IFwiXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIHRoaXMuZmlsbCA9IGZpbGw7XG4gICAgdGhpcy5hbGlnbiA9IGFsaWduO1xuICAgIHRoaXMuc2lnbiA9IHNpZ247XG4gICAgdGhpcy5zeW1ib2wgPSBzeW1ib2w7XG4gICAgdGhpcy56ZXJvID0gemVybztcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5jb21tYSA9IGNvbW1hO1xuICAgIHRoaXMucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cblxuICBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgICArIHRoaXMuYWxpZ25cbiAgICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICAgICsgKHRoaXMud2lkdGggPT0gbnVsbCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICAgICsgKHRoaXMucHJlY2lzaW9uID09IG51bGwgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgICArIHRoaXMudHlwZTtcbiAgfTtcblxuICB2YXIgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCJcXHhCNVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG4gIGZ1bmN0aW9uIGlkZW50aXR5JDMoeCkge1xuICAgIHJldHVybiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICAgIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyAmJiBsb2NhbGUudGhvdXNhbmRzID8gZm9ybWF0R3JvdXAobG9jYWxlLmdyb3VwaW5nLCBsb2NhbGUudGhvdXNhbmRzKSA6IGlkZW50aXR5JDMsXG4gICAgICAgIGN1cnJlbmN5ID0gbG9jYWxlLmN1cnJlbmN5LFxuICAgICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWw7XG5cbiAgICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzBdIDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVsxXSA6IC9bJXBdLy50ZXN0KHR5cGUpID8gXCIlXCIgOiBcIlwiO1xuXG4gICAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgICBtYXliZVN1ZmZpeCA9ICF0eXBlIHx8IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAodHlwZSA/IDYgOiAxMilcbiAgICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgICAgaSwgbiwgYztcblxuICAgICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgICAgLy8gQ29udmVydCBuZWdhdGl2ZSB0byBwb3NpdGl2ZSwgYW5kIGNvbXB1dGUgdGhlIHByZWZpeC5cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gKHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwKSAmJiAodmFsdWUgKj0gLTEsIHRydWUpO1xuXG4gICAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZSh2YWx1ZSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAgIC8vIElmIHRoZSBvcmlnaW5hbCB2YWx1ZSB3YXMgbmVnYXRpdmUsIGl0IG1heSBiZSByb3VuZGVkIHRvIHplcm8gZHVyaW5nXG4gICAgICAgICAgLy8gZm9ybWF0dGluZzsgdHJlYXQgdGhpcyBhcyAocG9zaXRpdmUpIHplcm8uXG4gICAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUpIHtcbiAgICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgKDQ4IDwgYyAmJiBjIDwgNTgpXG4gICAgICAgICAgICAgICAgICB8fCAodHlwZSA9PT0gXCJ4XCIgJiYgOTYgPCBjICYmIGMgPCAxMDMpXG4gICAgICAgICAgICAgICAgICB8fCAodHlwZSA9PT0gXCJYXCIgJiYgNjQgPCBjICYmIGMgPCA3MSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZU5lZ2F0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHZhbHVlU3VmZml4ICsgKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgICAgY2FzZSBcIjxcIjogcmV0dXJuIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7XG4gICAgICAgICAgY2FzZSBcIj1cIjogcmV0dXJuIHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgY2FzZSBcIl5cIjogcmV0dXJuIHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7XG4gICAgICB9XG5cbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50JDEodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICAgIH07XG4gIH1cblxuICB2YXIgbG9jYWxlO1xuICBleHBvcnRzLmZvcm1hdDtcbiAgZXhwb3J0cy5mb3JtYXRQcmVmaXg7XG5cbiAgZGVmYXVsdExvY2FsZSh7XG4gICAgZGVjaW1hbDogXCIuXCIsXG4gICAgdGhvdXNhbmRzOiBcIixcIixcbiAgICBncm91cGluZzogWzNdLFxuICAgIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICAgIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgICBleHBvcnRzLmZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gICAgZXhwb3J0cy5mb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICAgIHJldHVybiBsb2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVjaXNpb25GaXhlZChzdGVwKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudCQxKE1hdGguYWJzKHN0ZXApKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQkMSh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50JDEoTWF0aC5hYnMoc3RlcCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWNpc2lvblJvdW5kKHN0ZXAsIG1heCkge1xuICAgIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50JDEobWF4KSAtIGV4cG9uZW50JDEoc3RlcCkpICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gICAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gIH1cblxuICBmdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3WWVhcih5KSB7XG4gICAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdExvY2FsZSQxKGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICAgIHZhciBmb3JtYXRzID0ge1xuICAgICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgICBcImNcIjogbnVsbCxcbiAgICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyLFxuICAgICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgICBcInhcIjogbnVsbCxcbiAgICAgIFwiWFwiOiBudWxsLFxuICAgICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICAgIH07XG5cbiAgICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgICAgXCJjXCI6IG51bGwsXG4gICAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlcixcbiAgICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgICAgXCJ4XCI6IG51bGwsXG4gICAgICBcIlhcIjogbnVsbCxcbiAgICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlcyA9IHtcbiAgICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyLFxuICAgICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gICAgfTtcblxuICAgIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICAgIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gICAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gICAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICAgIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gICAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBwYWQsXG4gICAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHZhciBkID0gbmV3WWVhcigxOTAwKSxcbiAgICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKTtcbiAgICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgICBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgICB2YXIgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3WWVhcihkLnkpKS5nZXRVVENEYXkoKSA6IG5ld0RhdGUobmV3WWVhcihkLnkpKS5nZXREYXkoKTtcbiAgICAgICAgICBkLm0gPSAwO1xuICAgICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgICAgcmV0dXJuIG5ld0RhdGUoZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYXJzZTtcblxuICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH0sXG4gICAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9LFxuICAgICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICAgIHJldHVybiBmO1xuICAgICAgfSxcbiAgICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIsIHV0Y0RhdGUpO1xuICAgICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9O1xuICB2YXIgbnVtYmVyUmUgPSAvXlxccypcXGQrLztcbiAgdmFyIHBlcmNlbnRSZSA9IC9eJS87XG4gIHZhciByZXF1b3RlUmUgPSAvW1xcXFxcXF5cXCRcXCpcXCtcXD9cXHxcXFtcXF1cXChcXClcXC5cXHtcXH1dL2c7XG4gIGZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICAgIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gICAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86XFw6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gICAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoMSArIGRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKHRpbWVXZWVrLmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXIoZCkge1xuICAgIHJldHVybiBkLmdldERheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICAgIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh1dGNXZWVrLmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXIoZCkge1xuICAgIHJldHVybiBkLmdldFVUQ0RheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgICByZXR1cm4gXCIrMDAwMFwiO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gICAgcmV0dXJuIFwiJVwiO1xuICB9XG5cbiAgdmFyIGxvY2FsZSQxO1xuICBleHBvcnRzLnRpbWVGb3JtYXQ7XG4gIGV4cG9ydHMudGltZVBhcnNlO1xuICBleHBvcnRzLnV0Y0Zvcm1hdDtcbiAgZXhwb3J0cy51dGNQYXJzZTtcblxuICBkZWZhdWx0TG9jYWxlJDEoe1xuICAgIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICAgIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICAgIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gICAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICAgIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gZGVmYXVsdExvY2FsZSQxKGRlZmluaXRpb24pIHtcbiAgICBsb2NhbGUkMSA9IGZvcm1hdExvY2FsZSQxKGRlZmluaXRpb24pO1xuICAgIGV4cG9ydHMudGltZUZvcm1hdCA9IGxvY2FsZSQxLmZvcm1hdDtcbiAgICBleHBvcnRzLnRpbWVQYXJzZSA9IGxvY2FsZSQxLnBhcnNlO1xuICAgIGV4cG9ydHMudXRjRm9ybWF0ID0gbG9jYWxlJDEudXRjRm9ybWF0O1xuICAgIGV4cG9ydHMudXRjUGFyc2UgPSBsb2NhbGUkMS51dGNQYXJzZTtcbiAgICByZXR1cm4gbG9jYWxlJDE7XG4gIH1cblxuICB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuICBmdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cblxuICB2YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgICA6IGV4cG9ydHMudXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbiAgZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICAgIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xuICB9XG5cbiAgdmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgICA6IGV4cG9ydHMudXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuICB2YXIgYXJyYXkkMiA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgbWFwJDIgPSBhcnJheSQyLm1hcDtcbiAgdmFyIHNsaWNlJDMgPSBhcnJheSQyLnNsaWNlO1xuXG4gIHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG4gIGZ1bmN0aW9uIG9yZGluYWwocmFuZ2UpIHtcbiAgICB2YXIgaW5kZXggPSBtYXAkMSgpLFxuICAgICAgICBkb21haW4gPSBbXSxcbiAgICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gICAgcmFuZ2UgPSByYW5nZSA9PSBudWxsID8gW10gOiBzbGljZSQzLmNhbGwocmFuZ2UpO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgICBpZiAoIWkpIHtcbiAgICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCQxKCk7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gb3JkaW5hbCgpXG4gICAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAgIC51bmtub3duKHVua25vd24pO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBiYW5kKCkge1xuICAgIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICAgIHJhbmdlJCQgPSBbMCwgMV0sXG4gICAgICAgIHN0ZXAsXG4gICAgICAgIGJhbmR3aWR0aCxcbiAgICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgICByZXZlcnNlID0gcmFuZ2UkJFsxXSA8IHJhbmdlJCRbMF0sXG4gICAgICAgICAgc3RhcnQgPSByYW5nZSQkW3JldmVyc2UgLSAwXSxcbiAgICAgICAgICBzdG9wID0gcmFuZ2UkJFsxIC0gcmV2ZXJzZV07XG4gICAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgICB2YXIgdmFsdWVzID0gcmFuZ2UobikubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7IH0pO1xuICAgICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UkJCA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2UkJC5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIHJhbmdlJCQgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgICB9O1xuXG4gICAgc2NhbGUuc3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfTtcblxuICAgIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgICB9O1xuXG4gICAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgICB9O1xuXG4gICAgc2NhbGUucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICAgIH07XG5cbiAgICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gICAgfTtcblxuICAgIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJhbmQoKVxuICAgICAgICAgIC5kb21haW4oZG9tYWluKCkpXG4gICAgICAgICAgLnJhbmdlKHJhbmdlJCQpXG4gICAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAgIC5wYWRkaW5nT3V0ZXIocGFkZGluZ091dGVyKVxuICAgICAgICAgIC5hbGlnbihhbGlnbik7XG4gICAgfTtcblxuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICAgIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICAgIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gICAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBvaW50aXNoKGNvcHkoKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50JDQoKSB7XG4gICAgcmV0dXJuIHBvaW50aXNoKGJhbmQoKS5wYWRkaW5nSW5uZXIoMSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMyh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG51bWJlciQxKHgpIHtcbiAgICByZXR1cm4gK3g7XG4gIH1cblxuICB2YXIgdW5pdCA9IFswLCAxXTtcblxuICBmdW5jdGlvbiBkZWludGVycG9sYXRlKGEsIGIpIHtcbiAgICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgICAgOiBjb25zdGFudCQzKGIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgdmFyIGQgPSBkZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB4IDw9IGEgPyAwIDogeCA+PSBiID8gMSA6IGQoeCk7IH07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHZhciByID0gcmVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gICAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgICBpZiAoZDEgPCBkMCkgZDAgPSBkZWludGVycG9sYXRlKGQxLCBkMCksIHIwID0gcmVpbnRlcnBvbGF0ZShyMSwgcjApO1xuICAgIGVsc2UgZDAgPSBkZWludGVycG9sYXRlKGQwLCBkMSksIHIwID0gcmVpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG4gIH1cblxuICBmdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgICBpID0gLTE7XG5cbiAgICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIH1cblxuICAgIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgICBkW2ldID0gZGVpbnRlcnBvbGF0ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgICAgcltpXSA9IHJlaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHZhciBpID0gYmlzZWN0UmlnaHQoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXRcbiAgICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpO1xuICB9XG5cbiAgLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuICAvLyByZWludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0uXG4gIGZ1bmN0aW9uIGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSQkLCByZWludGVycG9sYXRlKSB7XG4gICAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgICAgaW50ZXJwb2xhdGUkJCA9IGludGVycG9sYXRlLFxuICAgICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgICBwaWVjZXdpc2UsXG4gICAgICAgIG91dHB1dCxcbiAgICAgICAgaW5wdXQ7XG5cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4sIHJhbmdlLCBjbGFtcCA/IGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlJCQpIDogZGVpbnRlcnBvbGF0ZSQkLCBpbnRlcnBvbGF0ZSQkKSkpKCt4KTtcbiAgICB9XG5cbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4gKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLCBkZWludGVycG9sYXRlLCBjbGFtcCA/IHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSA6IHJlaW50ZXJwb2xhdGUpKSkoK3kpO1xuICAgIH07XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAkMi5jYWxsKF8sIG51bWJlciQxKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkMy5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiByYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgaW50ZXJwb2xhdGUkJCA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgcmVzY2FsZSgpKSA6IGNsYW1wO1xuICAgIH07XG5cbiAgICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlJCQgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGUkJDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZG9tYWluLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgICBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSxcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCksXG4gICAgICAgIHByZWNpc2lvbjtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICAgIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5mb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiXCI6XG4gICAgICBjYXNlIFwiZVwiOlxuICAgICAgY2FzZSBcImdcIjpcbiAgICAgIGNhc2UgXCJwXCI6XG4gICAgICBjYXNlIFwiclwiOiB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZlwiOlxuICAgICAgY2FzZSBcIiVcIjoge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0cy5mb3JtYXQoc3BlY2lmaWVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICAgIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgICAgcmV0dXJuIHRpY2tGb3JtYXQoZG9tYWluKCksIGNvdW50LCBzcGVjaWZpZXIpO1xuICAgIH07XG5cbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgICAgaSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgICBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsXG4gICAgICAgICAgc3RhcnQgPSBkWzBdLFxuICAgICAgICAgIHN0b3AgPSBkW2ldLFxuICAgICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgbik7XG5cbiAgICAgIGlmIChzdGVwKSB7XG4gICAgICAgIHN0ZXAgPSB0aWNrU3RlcChNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwLCBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcCwgbik7XG4gICAgICAgIGRbMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgICBkW2ldID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIGRvbWFpbihkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lYXIkMigpIHtcbiAgICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlTnVtYmVyKTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIkMigpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpZGVudGl0eSQ0KCkge1xuICAgIHZhciBkb21haW4gPSBbMCwgMV07XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gK3g7XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0ID0gc2NhbGU7XG5cbiAgICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcCQyLmNhbGwoXywgbnVtYmVyJDEpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlkZW50aXR5JDQoKS5kb21haW4oZG9tYWluKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBuaWNlKGRvbWFpbiwgaW50ZXJ2YWwpIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcblxuICAgIHZhciBpMCA9IDAsXG4gICAgICAgIGkxID0gZG9tYWluLmxlbmd0aCAtIDEsXG4gICAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgICB0O1xuXG4gICAgaWYgKHgxIDwgeDApIHtcbiAgICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgICAgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG4gICAgfVxuXG4gICAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgICBkb21haW5baTFdID0gaW50ZXJ2YWwuY2VpbCh4MSk7XG4gICAgcmV0dXJuIGRvbWFpbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGUkMShhLCBiKSB7XG4gICAgcmV0dXJuIChiID0gTWF0aC5sb2coYiAvIGEpKVxuICAgICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHggLyBhKSAvIGI7IH1cbiAgICAgICAgOiBjb25zdGFudCQzKGIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCAwXG4gICAgICAgID8gZnVuY3Rpb24odCkgeyByZXR1cm4gLU1hdGgucG93KC1iLCB0KSAqIE1hdGgucG93KC1hLCAxIC0gdCk7IH1cbiAgICAgICAgOiBmdW5jdGlvbih0KSB7IHJldHVybiBNYXRoLnBvdyhiLCB0KSAqIE1hdGgucG93KGEsIDEgLSB0KTsgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvdzEwKHgpIHtcbiAgICByZXR1cm4gaXNGaW5pdGUoeCkgPyArKFwiMWVcIiArIHgpIDogeCA8IDAgPyAwIDogeDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvd3AoYmFzZSkge1xuICAgIHJldHVybiBiYXNlID09PSAxMCA/IHBvdzEwXG4gICAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcbiAgICAgICAgOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnBvdyhiYXNlLCB4KTsgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ3AoYmFzZSkge1xuICAgIHJldHVybiBiYXNlID09PSBNYXRoLkUgPyBNYXRoLmxvZ1xuICAgICAgICA6IGJhc2UgPT09IDEwICYmIE1hdGgubG9nMTBcbiAgICAgICAgfHwgYmFzZSA9PT0gMiAmJiBNYXRoLmxvZzJcbiAgICAgICAgfHwgKGJhc2UgPSBNYXRoLmxvZyhiYXNlKSwgZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5sb2coeCkgLyBiYXNlOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gLWYoLXgpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsb2coKSB7XG4gICAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlJDEsIHJlaW50ZXJwb2xhdGUpLmRvbWFpbihbMSwgMTBdKSxcbiAgICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgICBiYXNlID0gMTAsXG4gICAgICAgIGxvZ3MgPSBsb2dwKDEwKSxcbiAgICAgICAgcG93cyA9IHBvd3AoMTApO1xuXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIGxvZ3MgPSBsb2dwKGJhc2UpLCBwb3dzID0gcG93cChiYXNlKTtcbiAgICAgIGlmIChkb21haW4oKVswXSA8IDApIGxvZ3MgPSByZWZsZWN0KGxvZ3MpLCBwb3dzID0gcmVmbGVjdChwb3dzKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYmFzZSA9ICtfLCByZXNjYWxlKCkpIDogYmFzZTtcbiAgICB9O1xuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgICAgdSA9IGRbMF0sXG4gICAgICAgICAgdiA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgICByO1xuXG4gICAgICBpZiAociA9IHYgPCB1KSBpID0gdSwgdSA9IHYsIHYgPSBpO1xuXG4gICAgICB2YXIgaSA9IGxvZ3ModSksXG4gICAgICAgICAgaiA9IGxvZ3ModiksXG4gICAgICAgICAgcCxcbiAgICAgICAgICBrLFxuICAgICAgICAgIHQsXG4gICAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6ICtjb3VudCxcbiAgICAgICAgICB6ID0gW107XG5cbiAgICAgIGlmICghKGJhc2UgJSAxKSAmJiBqIC0gaSA8IG4pIHtcbiAgICAgICAgaSA9IE1hdGgucm91bmQoaSkgLSAxLCBqID0gTWF0aC5yb3VuZChqKSArIDE7XG4gICAgICAgIGlmICh1ID4gMCkgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgICBmb3IgKGsgPSAxLCBwID0gcG93cyhpKTsgayA8IGJhc2U7ICsraykge1xuICAgICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XG4gICAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgICBmb3IgKGsgPSBiYXNlIC0gMSwgcCA9IHBvd3MoaSk7IGsgPj0gMTsgLS1rKSB7XG4gICAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHogPSB0aWNrcyhpLCBqLCBNYXRoLm1pbihqIC0gaSwgbikpLm1hcChwb3dzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgICAgaWYgKHR5cGVvZiBzcGVjaWZpZXIgIT09IFwiZnVuY3Rpb25cIikgc3BlY2lmaWVyID0gZXhwb3J0cy5mb3JtYXQoc3BlY2lmaWVyKTtcbiAgICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcbiAgICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIGNvdW50IC8gc2NhbGUudGlja3MoKS5sZW5ndGgpOyAvLyBUT0RPIGZhc3QgZXN0aW1hdGU/XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgaSA9IGQgLyBwb3dzKE1hdGgucm91bmQobG9ncyhkKSkpO1xuICAgICAgICBpZiAoaSAqIGJhc2UgPCBiYXNlIC0gMC41KSBpICo9IGJhc2U7XG4gICAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRvbWFpbihuaWNlKGRvbWFpbigpLCB7XG4gICAgICAgIGZsb29yOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguZmxvb3IobG9ncyh4KSkpOyB9LFxuICAgICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxvZygpLmJhc2UoYmFzZSkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiByYWlzZSh4LCBleHBvbmVudCkge1xuICAgIHJldHVybiB4IDwgMCA/IC1NYXRoLnBvdygteCwgZXhwb25lbnQpIDogTWF0aC5wb3coeCwgZXhwb25lbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG93KCkge1xuICAgIHZhciBleHBvbmVudCA9IDEsXG4gICAgICAgIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSxcbiAgICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gICAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgICByZXR1cm4gKGIgPSByYWlzZShiLCBleHBvbmVudCkgLSAoYSA9IHJhaXNlKGEsIGV4cG9uZW50KSkpXG4gICAgICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAocmFpc2UoeCwgZXhwb25lbnQpIC0gYSkgLyBiOyB9XG4gICAgICAgICAgOiBjb25zdGFudCQzKGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGUoYSwgYikge1xuICAgICAgYiA9IHJhaXNlKGIsIGV4cG9uZW50KSAtIChhID0gcmFpc2UoYSwgZXhwb25lbnQpKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7IHJldHVybiByYWlzZShhICsgYiAqIHQsIDEgLyBleHBvbmVudCk7IH07XG4gICAgfVxuXG4gICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHBvbmVudCA9ICtfLCBkb21haW4oZG9tYWluKCkpKSA6IGV4cG9uZW50O1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29weShzY2FsZSwgcG93KCkuZXhwb25lbnQoZXhwb25lbnQpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzcXJ0KCkge1xuICAgIHJldHVybiBwb3coKS5leHBvbmVudCgwLjUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhbnRpbGUoKSB7XG4gICAgdmFyIGRvbWFpbiA9IFtdLFxuICAgICAgICByYW5nZSA9IFtdLFxuICAgICAgICB0aHJlc2hvbGRzID0gW107XG5cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgdmFyIGkgPSAwLCBuID0gTWF0aC5tYXgoMSwgcmFuZ2UubGVuZ3RoKTtcbiAgICAgIHRocmVzaG9sZHMgPSBuZXcgQXJyYXkobiAtIDEpO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHRocmVzaG9sZHNbaSAtIDFdID0gdGhyZXNob2xkKGRvbWFpbiwgaSAvIG4pO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIGlmICghaXNOYU4oeCA9ICt4KSkgcmV0dXJuIHJhbmdlW2Jpc2VjdFJpZ2h0KHRocmVzaG9sZHMsIHgpXTtcbiAgICB9XG5cbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dIDogW1xuICAgICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxuICAgICAgICBpIDwgdGhyZXNob2xkcy5sZW5ndGggPyB0aHJlc2hvbGRzW2ldIDogZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXVxuICAgICAgXTtcbiAgICB9O1xuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgICBkb21haW4gPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gXy5sZW5ndGgsIGQ7IGkgPCBuOyArK2kpIGlmIChkID0gX1tpXSwgZCAhPSBudWxsICYmICFpc05hTihkID0gK2QpKSBkb21haW4ucHVzaChkKTtcbiAgICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkMy5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucXVhbnRpbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcXVhbnRpbGUoKVxuICAgICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAgIC5yYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YW50aXplJDEoKSB7XG4gICAgdmFyIHgwID0gMCxcbiAgICAgICAgeDEgPSAxLFxuICAgICAgICBuID0gMSxcbiAgICAgICAgZG9tYWluID0gWzAuNV0sXG4gICAgICAgIHJhbmdlID0gWzAsIDFdO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgaWYgKHggPD0geCkgcmV0dXJuIHJhbmdlW2Jpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMCwgbildO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgZG9tYWluID0gbmV3IEFycmF5KG4pO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGRvbWFpbltpXSA9ICgoaSArIDEpICogeDEgLSAoaSAtIG4pICogeDApIC8gKG4gKyAxKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdLCB4MSA9ICtfWzFdLCByZXNjYWxlKCkpIDogW3gwLCB4MV07XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobiA9IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSkubGVuZ3RoIC0gMSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl1cbiAgICAgICAgICA6IGkgPCAxID8gW3gwLCBkb21haW5bMF1dXG4gICAgICAgICAgOiBpID49IG4gPyBbZG9tYWluW24gLSAxXSwgeDFdXG4gICAgICAgICAgOiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHF1YW50aXplJDEoKVxuICAgICAgICAgIC5kb21haW4oW3gwLCB4MV0pXG4gICAgICAgICAgLnJhbmdlKHJhbmdlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aHJlc2hvbGQkMSgpIHtcbiAgICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgICBuID0gMTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIGlmICh4IDw9IHgpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodChkb21haW4sIHgsIDAsIG4pXTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBzbGljZSQzLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogZG9tYWluLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZSQzLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgcmV0dXJuIFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhyZXNob2xkJDEoKVxuICAgICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAgIC5yYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG52YXIgICBkdXJhdGlvblNlY29uZCQxID0gMTAwMDtcbnZhciAgIGR1cmF0aW9uTWludXRlJDEgPSBkdXJhdGlvblNlY29uZCQxICogNjA7XG52YXIgICBkdXJhdGlvbkhvdXIkMSA9IGR1cmF0aW9uTWludXRlJDEgKiA2MDtcbnZhciAgIGR1cmF0aW9uRGF5JDEgPSBkdXJhdGlvbkhvdXIkMSAqIDI0O1xudmFyICAgZHVyYXRpb25XZWVrJDEgPSBkdXJhdGlvbkRheSQxICogNztcbiAgdmFyIGR1cmF0aW9uTW9udGggPSBkdXJhdGlvbkRheSQxICogMzA7XG4gIHZhciBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSQxICogMzY1O1xuICBmdW5jdGlvbiBkYXRlJDEodCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG51bWJlciQyKHQpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIERhdGUgPyArdCA6ICtuZXcgRGF0ZSgrdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkge1xuICAgIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGVOdW1iZXIpLFxuICAgICAgICBpbnZlcnQgPSBzY2FsZS5pbnZlcnQsXG4gICAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICAgIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgICAgZm9ybWF0U2Vjb25kID0gZm9ybWF0KFwiOiVTXCIpLFxuICAgICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcbiAgICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgICBmb3JtYXREYXkgPSBmb3JtYXQoXCIlYSAlZFwiKSxcbiAgICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxuICAgICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgICBmb3JtYXRZZWFyID0gZm9ybWF0KFwiJVlcIik7XG5cbiAgICB2YXIgdGlja0ludGVydmFscyA9IFtcbiAgICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kJDFdLFxuICAgICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmQkMV0sXG4gICAgICBbc2Vjb25kLCAxNSwgMTUgKiBkdXJhdGlvblNlY29uZCQxXSxcbiAgICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kJDFdLFxuICAgICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGUkMV0sXG4gICAgICBbbWludXRlLCAgNSwgIDUgKiBkdXJhdGlvbk1pbnV0ZSQxXSxcbiAgICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlJDFdLFxuICAgICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGUkMV0sXG4gICAgICBbICBob3VyLCAgMSwgICAgICBkdXJhdGlvbkhvdXIkMSAgXSxcbiAgICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciQxICBdLFxuICAgICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgICBbICBob3VyLCAxMiwgMTIgKiBkdXJhdGlvbkhvdXIkMSAgXSxcbiAgICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5JDEgICBdLFxuICAgICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkkMSAgIF0sXG4gICAgICBbICB3ZWVrLCAgMSwgICAgICBkdXJhdGlvbldlZWskMSAgXSxcbiAgICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICAgIFsgbW9udGgsICAzLCAgMyAqIGR1cmF0aW9uTW9udGggXSxcbiAgICAgIFsgIHllYXIsICAxLCAgICAgIGR1cmF0aW9uWWVhciAgXVxuICAgIF07XG5cbiAgICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRhdGUpIHtcbiAgICAgIHJldHVybiAoc2Vjb25kKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbGxpc2Vjb25kXG4gICAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgICAgOiBob3VyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbnV0ZVxuICAgICAgICAgIDogZGF5KGRhdGUpIDwgZGF0ZSA/IGZvcm1hdEhvdXJcbiAgICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgICAgOiB5ZWFyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1vbnRoXG4gICAgICAgICAgOiBmb3JtYXRZZWFyKShkYXRlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwgPT0gbnVsbCkgaW50ZXJ2YWwgPSAxMDtcblxuICAgICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgICAvLyBiYXNlZCBvbiB0aGUgZXh0ZW50IG9mIHRoZSBkb21haW4gYW5kIGEgcm91Z2ggZXN0aW1hdGUgb2YgdGljayBzaXplLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaW50ZXJ2YWwgaXMgYWxyZWFkeSBhIHRpbWUgaW50ZXJ2YWwgYW5kIHVzZSBpdC5cbiAgICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBpbnRlcnZhbCxcbiAgICAgICAgICAgIGkgPSBiaXNlY3RvcihmdW5jdGlvbihpKSB7IHJldHVybiBpWzJdOyB9KS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGludGVydmFsKTtcbiAgICAgICAgICBpbnRlcnZhbCA9IHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICAgIGkgPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgICAgaW50ZXJ2YWwgPSBpWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgaW50ZXJ2YWwpO1xuICAgICAgICAgIGludGVydmFsID0gbWlsbGlzZWNvbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0ZXAgPT0gbnVsbCA/IGludGVydmFsIDogaW50ZXJ2YWwuZXZlcnkoc3RlcCk7XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGludmVydCh5KSk7XG4gICAgfTtcblxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZG9tYWluKG1hcCQyLmNhbGwoXywgbnVtYmVyJDIpKSA6IGRvbWFpbigpLm1hcChkYXRlJDEpO1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgICByID0gdDEgPCB0MCxcbiAgICAgICAgICB0O1xuICAgICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgICAgdCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgdDAsIHQxLCBzdGVwKTtcbiAgICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gICAgfTtcblxuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICAgIHJldHVybiAoaW50ZXJ2YWwgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgc3RlcCkpXG4gICAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpXG4gICAgICAgICAgOiBzY2FsZTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvcHkoc2NhbGUsIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWUoKSB7XG4gICAgcmV0dXJuIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB0aW1lV2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGV4cG9ydHMudGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHV0Y1RpbWUoKSB7XG4gICAgcmV0dXJuIGNhbGVuZGFyKHV0Y1llYXIsIHV0Y01vbnRoLCB1dGNXZWVrLCB1dGNEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZXhwb3J0cy51dGNGb3JtYXQpLmRvbWFpbihbRGF0ZS5VVEMoMjAwMCwgMCwgMSksIERhdGUuVVRDKDIwMDAsIDAsIDIpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvcnMocykge1xuICAgIHJldHVybiBzLm1hdGNoKC8uezZ9L2cpLm1hcChmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gXCIjXCIgKyB4O1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGNhdGVnb3J5MTAgPSBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG5cbiAgdmFyIGNhdGVnb3J5MjBiID0gY29sb3JzKFwiMzkzYjc5NTI1NGEzNmI2ZWNmOWM5ZWRlNjM3OTM5OGNhMjUyYjVjZjZiY2VkYjljOGM2ZDMxYmQ5ZTM5ZTdiYTUyZTdjYjk0ODQzYzM5YWQ0OTRhZDY2MTZiZTc5NjljN2I0MTczYTU1MTk0Y2U2ZGJkZGU5ZWQ2XCIpO1xuXG4gIHZhciBjYXRlZ29yeTIwYyA9IGNvbG9ycyhcIjMxODJiZDZiYWVkNjllY2FlMWM2ZGJlZmU2NTUwZGZkOGQzY2ZkYWU2YmZkZDBhMjMxYTM1NDc0YzQ3NmExZDk5YmM3ZTljMDc1NmJiMTllOWFjOGJjYmRkY2RhZGFlYjYzNjM2Mzk2OTY5NmJkYmRiZGQ5ZDlkOVwiKTtcblxuICB2YXIgY2F0ZWdvcnkyMCA9IGNvbG9ycyhcIjFmNzdiNGFlYzdlOGZmN2YwZWZmYmI3ODJjYTAyYzk4ZGY4YWQ2MjcyOGZmOTg5Njk0NjdiZGM1YjBkNThjNTY0YmM0OWM5NGUzNzdjMmY3YjZkMjdmN2Y3ZmM3YzdjN2JjYmQyMmRiZGI4ZDE3YmVjZjllZGFlNVwiKTtcblxuICB2YXIgY3ViZWhlbGl4JDMgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDMwMCwgMC41LCAwLjApLCBjdWJlaGVsaXgoLTI0MCwgMC41LCAxLjApKTtcblxuICB2YXIgd2FybSA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbiAgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbiAgdmFyIHJhaW5ib3cgPSBjdWJlaGVsaXgoKTtcblxuICBmdW5jdGlvbiByYWluYm93JDEodCkge1xuICAgIGlmICh0IDwgMCB8fCB0ID4gMSkgdCAtPSBNYXRoLmZsb29yKHQpO1xuICAgIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICAgIHJhaW5ib3cuaCA9IDM2MCAqIHQgLSAxMDA7XG4gICAgcmFpbmJvdy5zID0gMS41IC0gMS41ICogdHM7XG4gICAgcmFpbmJvdy5sID0gMC44IC0gMC45ICogdHM7XG4gICAgcmV0dXJuIHJhaW5ib3cgKyBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFtcChyYW5nZSkge1xuICAgIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICAgIH07XG4gIH1cblxuICB2YXIgdmlyaWRpcyA9IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuICB2YXIgbWFnbWEgPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwOTAyMDIwYjAyMDIwZDAzMDMwZjAzMDMxMjA0MDQxNDA1MDQxNjA2MDUxODA2MDUxYTA3MDYxYzA4MDcxZTA5MDcyMDBhMDgyMjBiMDkyNDBjMDkyNjBkMGEyOTBlMGIyYjEwMGIyZDExMGMyZjEyMGQzMTEzMGQzNDE0MGUzNjE1MGUzODE2MGYzYjE4MGYzZDE5MTAzZjFhMTA0MjFjMTA0NDFkMTE0NzFlMTE0OTIwMTE0YjIxMTE0ZTIyMTE1MDI0MTI1MzI1MTI1NTI3MTI1ODI5MTE1YTJhMTE1YzJjMTE1ZjJkMTE2MTJmMTE2MzMxMTE2NTMzMTA2NzM0MTA2OTM2MTA2YjM4MTA2YzM5MGY2ZTNiMGY3MDNkMGY3MTNmMGY3MjQwMGY3NDQyMGY3NTQ0MGY3NjQ1MTA3NzQ3MTA3ODQ5MTA3ODRhMTA3OTRjMTE3YTRlMTE3YjRmMTI3YjUxMTI3YzUyMTM3YzU0MTM3ZDU2MTQ3ZDU3MTU3ZTU5MTU3ZTVhMTY3ZTVjMTY3ZjVkMTc3ZjVmMTg3ZjYwMTg4MDYyMTk4MDY0MWE4MDY1MWE4MDY3MWI4MDY4MWM4MTZhMWM4MTZiMWQ4MTZkMWQ4MTZlMWU4MTcwMWY4MTcyMWY4MTczMjA4MTc1MjE4MTc2MjE4MTc4MjI4MTc5MjI4MjdiMjM4MjdjMjM4MjdlMjQ4MjgwMjU4MjgxMjU4MTgzMjY4MTg0MjY4MTg2Mjc4MTg4Mjc4MTg5Mjg4MThiMjk4MThjMjk4MThlMmE4MTkwMmE4MTkxMmI4MTkzMmI4MDk0MmM4MDk2MmM4MDk4MmQ4MDk5MmQ4MDliMmU3ZjljMmU3ZjllMmY3ZmEwMmY3ZmExMzA3ZWEzMzA3ZWE1MzE3ZWE2MzE3ZGE4MzI3ZGFhMzM3ZGFiMzM3Y2FkMzQ3Y2FlMzQ3YmIwMzU3YmIyMzU3YmIzMzY3YWI1MzY3YWI3Mzc3OWI4Mzc3OWJhMzg3OGJjMzk3OGJkMzk3N2JmM2E3N2MwM2E3NmMyM2I3NWM0M2M3NWM1M2M3NGM3M2Q3M2M4M2U3M2NhM2U3MmNjM2Y3MWNkNDA3MWNmNDA3MGQwNDE2ZmQyNDI2ZmQzNDM2ZWQ1NDQ2ZGQ2NDU2Y2Q4NDU2Y2Q5NDY2YmRiNDc2YWRjNDg2OWRlNDk2OGRmNGE2OGUwNGM2N2UyNGQ2NmUzNGU2NWU0NGY2NGU1NTA2NGU3NTI2M2U4NTM2MmU5NTQ2MmVhNTY2MWViNTc2MGVjNTg2MGVkNWE1ZmVlNWI1ZWVmNWQ1ZWYwNWY1ZWYxNjA1ZGYyNjI1ZGYyNjQ1Y2YzNjU1Y2Y0Njc1Y2Y0Njk1Y2Y1NmI1Y2Y2NmM1Y2Y2NmU1Y2Y3NzA1Y2Y3NzI1Y2Y4NzQ1Y2Y4NzY1Y2Y5Nzg1ZGY5Nzk1ZGY5N2I1ZGZhN2Q1ZWZhN2Y1ZWZhODE1ZmZiODM1ZmZiODU2MGZiODc2MWZjODk2MWZjOGE2MmZjOGM2M2ZjOGU2NGZjOTA2NWZkOTI2NmZkOTQ2N2ZkOTY2OGZkOTg2OWZkOWE2YWZkOWI2YmZlOWQ2Y2ZlOWY2ZGZlYTE2ZWZlYTM2ZmZlYTU3MWZlYTc3MmZlYTk3M2ZlYWE3NGZlYWM3NmZlYWU3N2ZlYjA3OGZlYjI3YWZlYjQ3YmZlYjY3Y2ZlYjc3ZWZlYjk3ZmZlYmI4MWZlYmQ4MmZlYmY4NGZlYzE4NWZlYzI4N2ZlYzQ4OGZlYzY4YWZlYzg4Y2ZlY2E4ZGZlY2M4ZmZlY2Q5MGZlY2Y5MmZlZDE5NGZlZDM5NWZlZDU5N2ZlZDc5OWZlZDg5YWZkZGE5Y2ZkZGM5ZWZkZGVhMGZkZTBhMWZkZTJhM2ZkZTNhNWZkZTVhN2ZkZTdhOWZkZTlhYWZkZWJhY2ZjZWNhZWZjZWViMGZjZjBiMmZjZjJiNGZjZjRiNmZjZjZiOGZjZjdiOWZjZjliYmZjZmJiZGZjZmRiZlwiKSk7XG5cbiAgdmFyIGluZmVybm8gPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwYTAyMDIwYzAyMDIwZTAzMDIxMDA0MDMxMjA0MDMxNDA1MDQxNzA2MDQxOTA3MDUxYjA4MDUxZDA5MDYxZjBhMDcyMjBiMDcyNDBjMDgyNjBkMDgyOTBlMDkyYjEwMDkyZDExMGEzMDEyMGEzMjE0MGIzNDE1MGIzNzE2MGIzOTE4MGMzYzE5MGMzZTFiMGM0MTFjMGM0MzFlMGM0NTFmMGM0ODIxMGM0YTIzMGM0YzI0MGM0ZjI2MGM1MTI4MGI1MzI5MGI1NTJiMGI1NzJkMGI1OTJmMGE1YjMxMGE1YzMyMGE1ZTM0MGE1ZjM2MDk2MTM4MDk2MjM5MDk2MzNiMDk2NDNkMDk2NTNlMDk2NjQwMGE2NzQyMGE2ODQ0MGE2ODQ1MGE2OTQ3MGI2YTQ5MGI2YTRhMGM2YjRjMGM2YjRkMGQ2YzRmMGQ2YzUxMGU2YzUyMGU2ZDU0MGY2ZDU1MGY2ZDU3MTA2ZTU5MTA2ZTVhMTE2ZTVjMTI2ZTVkMTI2ZTVmMTM2ZTYxMTM2ZTYyMTQ2ZTY0MTU2ZTY1MTU2ZTY3MTY2ZTY5MTY2ZTZhMTc2ZTZjMTg2ZTZkMTg2ZTZmMTk2ZTcxMTk2ZTcyMWE2ZTc0MWE2ZTc1MWI2ZTc3MWM2ZDc4MWM2ZDdhMWQ2ZDdjMWQ2ZDdkMWU2ZDdmMWU2YzgwMWY2YzgyMjA2Yzg0MjA2Yjg1MjE2Yjg3MjE2Yjg4MjI2YThhMjI2YThjMjM2OThkMjM2OThmMjQ2OTkwMjU2ODkyMjU2ODkzMjY2Nzk1MjY2Nzk3Mjc2Njk4Mjc2NjlhMjg2NTliMjk2NDlkMjk2NDlmMmE2M2EwMmE2M2EyMmI2MmEzMmM2MWE1MmM2MGE2MmQ2MGE4MmU1ZmE5MmU1ZWFiMmY1ZWFkMzA1ZGFlMzA1Y2IwMzE1YmIxMzI1YWIzMzI1YWI0MzM1OWI2MzQ1OGI3MzU1N2I5MzU1NmJhMzY1NWJjMzc1NGJkMzg1M2JmMzk1MmMwM2E1MWMxM2E1MGMzM2I0ZmM0M2M0ZWM2M2Q0ZGM3M2U0Y2M4M2Y0YmNhNDA0YWNiNDE0OWNjNDI0OGNlNDM0N2NmNDQ0NmQwNDU0NWQyNDY0NGQzNDc0M2Q0NDg0MmQ1NGE0MWQ3NGIzZmQ4NGMzZWQ5NGQzZGRhNGUzY2RiNTAzYmRkNTEzYWRlNTIzOGRmNTMzN2UwNTUzNmUxNTYzNWUyNTczNGUzNTkzM2U0NWEzMWU1NWMzMGU2NWQyZmU3NWUyZWU4NjAyZGU5NjEyYmVhNjMyYWViNjQyOWViNjYyOGVjNjcyNmVkNjkyNWVlNmEyNGVmNmMyM2VmNmUyMWYwNmYyMGYxNzExZmYxNzMxZGYyNzQxY2YzNzYxYmYzNzgxOWY0NzkxOGY1N2IxN2Y1N2QxNWY2N2UxNGY2ODAxM2Y3ODIxMmY3ODQxMGY4ODUwZmY4ODcwZWY4ODkwY2Y5OGIwYmY5OGMwYWY5OGUwOWZhOTAwOGZhOTIwN2ZhOTQwN2ZiOTYwNmZiOTcwNmZiOTkwNmZiOWIwNmZiOWQwN2ZjOWYwN2ZjYTEwOGZjYTMwOWZjYTUwYWZjYTYwY2ZjYTgwZGZjYWEwZmZjYWMxMWZjYWUxMmZjYjAxNGZjYjIxNmZjYjQxOGZiYjYxYWZiYjgxZGZiYmExZmZiYmMyMWZiYmUyM2ZhYzAyNmZhYzIyOGZhYzQyYWZhYzYyZGY5YzcyZmY5YzkzMmY5Y2IzNWY4Y2QzN2Y4Y2YzYWY3ZDEzZGY3ZDM0MGY2ZDU0M2Y2ZDc0NmY1ZDk0OWY1ZGI0Y2Y0ZGQ0ZmY0ZGY1M2Y0ZTE1NmYzZTM1YWYzZTU1ZGYyZTY2MWYyZTg2NWYyZWE2OWYxZWM2ZGYxZWQ3MWYxZWY3NWYxZjE3OWYyZjI3ZGYyZjQ4MmYzZjU4NmYzZjY4YWY0Zjg4ZWY1Zjk5MmY2ZmE5NmY4ZmI5YWY5ZmM5ZGZhZmRhMWZjZmZhNFwiKSk7XG5cbiAgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcblxuICBmdW5jdGlvbiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikge1xuICAgIHZhciB4MCA9IDAsXG4gICAgICAgIHgxID0gMSxcbiAgICAgICAgY2xhbXAgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHZhciB0ID0gKHggLSB4MCkgLyAoeDEgLSB4MCk7XG4gICAgICByZXR1cm4gaW50ZXJwb2xhdG9yKGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpIDogdCk7XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgc2NhbGUpIDogW3gwLCB4MV07XG4gICAgfTtcblxuICAgIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICAgIH07XG5cbiAgICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikuZG9tYWluKFt4MCwgeDFdKS5jbGFtcChjbGFtcCk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbiAgdmFyIG5hbWVzcGFjZXMgPSB7XG4gICAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgeGh0bWw6IHhodG1sLFxuICAgIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxuICB9O1xuXG4gIGZ1bmN0aW9uIG5hbWVzcGFjZShuYW1lKSB7XG4gICAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRvcihuYW1lKSB7XG4gICAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICAgIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xuICB9XG5cbiAgdmFyIG5leHRJZCA9IDA7XG5cbiAgZnVuY3Rpb24gbG9jYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIExvY2FsKCkge1xuICAgIHRoaXMuXyA9IFwiQFwiICsgKCsrbmV4dElkKS50b1N0cmluZygzNik7XG4gIH1cblxuICBMb2NhbC5wcm90b3R5cGUgPSBsb2NhbC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IExvY2FsLFxuICAgIGdldDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGlkID0gdGhpcy5fO1xuICAgICAgd2hpbGUgKCEoaWQgaW4gbm9kZSkpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gICAgICByZXR1cm4gbm9kZVtpZF07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZVt0aGlzLl9dID0gdmFsdWU7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl8gaW4gbm9kZSAmJiBkZWxldGUgbm9kZVt0aGlzLl9dO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXztcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIH07XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGlmICghZWxlbWVudC5tYXRjaGVzKSB7XG4gICAgICB2YXIgdmVuZG9yTWF0Y2hlcyA9IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICAgIHx8IGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgfHwgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgICAgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdmVuZG9yTWF0Y2hlcy5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIG1hdGNoZXIkMSA9IG1hdGNoZXI7XG5cbiAgdmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG4gIGV4cG9ydHMuZXZlbnQgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZWxlbWVudCQxID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCQxKSkge1xuICAgICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgICAgdmFyIGV2ZW50MCA9IGV4cG9ydHMuZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQxO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXMkMSh0eXBlbmFtZXMpIHtcbiAgICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgICAgaWYgKCFvbikgcmV0dXJuO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgICBlbHNlIG9uLnB1c2gobyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9vbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXMkMSh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICAgIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICAgIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50O1xuICAgIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV4cG9ydHMuZXZlbnQ7XG4gICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNvdXJjZUV2ZW50KCkge1xuICAgIHZhciBjdXJyZW50ID0gZXhwb3J0cy5ldmVudCwgc291cmNlO1xuICAgIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnQkNShub2RlLCBldmVudCkge1xuICAgIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlKG5vZGUpIHtcbiAgICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICByZXR1cm4gcG9pbnQkNShub2RlLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBub25lJDIoKSB7fVxuXG4gIGZ1bmN0aW9uIHNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lJDIgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0KHNlbGVjdCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0QWxsKHNlbGVjdCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZmlsdGVyKG1hdGNoKSB7XG4gICAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIkMShtYXRjaCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGFyc2UodXBkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9lbnRlcigpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gICAgdGhpcy5fbmV4dCA9IG51bGw7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbiAgfVxuXG4gIEVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICAgIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gICAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDQoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICB2YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG4gIGZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBub2RlLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gICAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gICAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICAgIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICAgIHZhciBpLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAgICBrZXlWYWx1ZTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAgIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgICAgaWYgKGtleVZhbHVlIGluIG5vZGVCeUtleVZhbHVlKSB7XG4gICAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAgIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSkge1xuICAgICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICAgIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9kYXRhKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGQpIHsgZGF0YVsrK2pdID0gZDsgfSk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQkNCh2YWx1ZSk7XG5cbiAgICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdLFxuICAgICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICAgIGRhdGEgPSB2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cyksXG4gICAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gICAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICAgIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gICAgcmV0dXJuIHVwZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9leGl0KCkge1xuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9tZXJnZShzZWxlY3Rpb24pIHtcblxuICAgIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX29yZGVyKCkge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3NvcnQoY29tcGFyZSkge1xuICAgIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZyQyO1xuXG4gICAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICAgIH1cblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNjZW5kaW5nJDIoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9jYWxsKCkge1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fbm9kZXMoKSB7XG4gICAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICAgIHJldHVybiBub2RlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9ub2RlKCkge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc2l6ZSgpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICAgIHJldHVybiBzaXplO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2VtcHR5KCkge1xuICAgIHJldHVybiAhdGhpcy5ub2RlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZWFjaChjYWxsYmFjaykge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2F0dHIobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2luZG93KG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbm9kZTtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgICAgOiB3aW5kb3cobm9kZSA9IHRoaXMubm9kZSgpKVxuICAgICAgICAgICAgLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbClcbiAgICAgICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fcHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gICAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gICAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG4gIH1cblxuICBDbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICAgIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3RleHQodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25faHRtbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFpc2UkMSgpIHtcbiAgICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3JhaXNlKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2gocmFpc2UkMSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb3dlcigpIHtcbiAgICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2xvd2VyKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2FwcGVuZChuYW1lKSB7XG4gICAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25faW5zZXJ0KG5hbWUsIGJlZm9yZSkge1xuICAgIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3JlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZGF0dW0odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gICAgdmFyIHdpbmRvdyQkID0gd2luZG93KG5vZGUpLFxuICAgICAgICBldmVudCA9IHdpbmRvdyQkLkN1c3RvbUV2ZW50O1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudCA9IHdpbmRvdyQkLmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9kaXNwYXRjaCh0eXBlLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG4gIH1cblxuICB2YXIgcm9vdCA9IFtudWxsXTtcblxuICBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gICAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICAgIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xuICB9XG5cbiAgU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gICAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICAgIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICAgIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICAgIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gICAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICAgIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICAgIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICAgIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gICAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gICAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gICAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICAgIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICAgIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICAgIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICAgIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gICAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gICAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICAgIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICAgIG9uOiBzZWxlY3Rpb25fb24sXG4gICAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0QWxsKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IG5ldyBTZWxlY3Rpb24oW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoKG5vZGUsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBwb2ludCQ1KG5vZGUsIHRvdWNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZXMobm9kZSwgdG91Y2hlcykge1xuICAgIGlmICh0b3VjaGVzID09IG51bGwpIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLnRvdWNoZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHBvaW50cyA9IG5ldyBBcnJheShuKTsgaSA8IG47ICsraSkge1xuICAgICAgcG9pbnRzW2ldID0gcG9pbnQkNShub2RlLCB0b3VjaGVzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgdmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xuICB2YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG4gIHZhciBDUkVBVEVEID0gMDtcbiAgdmFyIFNDSEVEVUxFRCA9IDE7XG4gIHZhciBTVEFSVElORyA9IDI7XG4gIHZhciBTVEFSVEVEID0gMztcbiAgdmFyIEVORElORyA9IDQ7XG4gIHZhciBFTkRFRCA9IDU7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICAgIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICAgIGNyZWF0ZShub2RlLCBpZCwge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgICBvbjogZW1wdHlPbixcbiAgICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgICAgdGltZXI6IG51bGwsXG4gICAgICBzdGF0ZTogQ1JFQVRFRFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkgfHwgc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZVwiKTtcbiAgICByZXR1cm4gc2NoZWR1bGU7XG4gIH1cblxuICBmdW5jdGlvbiBzZXQkMihub2RlLCBpZCkge1xuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkgfHwgc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORykgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGVcIik7XG4gICAgcmV0dXJuIHNjaGVkdWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0JDEobm9kZSwgaWQpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZVwiKTtcbiAgICByZXR1cm4gc2NoZWR1bGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICAgIHR3ZWVuO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gICAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gICAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gICAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGRlbGF5IGlzIGdyZWF0ZXIgdGhhbiB0aGlzIGZpcnN0IHNsZWVwLCBzbGVlcCBzb21lIG1vcmU7XG4gICAgLy8gb3RoZXJ3aXNlLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICAgICAgZWxzZSBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBpbnRlcnJ1cHQgZXZlbnQuXG4gICAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBjYW5jZWxsZWQgdHJhbnNpdGlvbnMgbmV2ZXIgc3RhcnRlZC4gTm90ZSB0aGF0IHRoaXMgYWxzb1xuICAgICAgICAvLyByZW1vdmVzIHRoaXMgdHJhbnNpdGlvbiBmcm9tIHRoZSBwZW5kaW5nIGxpc3QhXG4gICAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBtYm9zdG9jay9kMyMxNTc2LlxuICAgICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICAgIHRpbWVvdXQkMShmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgdHdlZW5baV0uY2FsbChudWxsLCB0KTtcbiAgICAgIH1cblxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSBpZiAoK2kgIT09IGlkKSByZXR1cm4gdm9pZCBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICAgICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdChub2RlLCBuYW1lKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgICBzY2hlZHVsZSxcbiAgICAgICAgYWN0aXZlLFxuICAgICAgICBlbXB0eSA9IHRydWUsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gICAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID09PSBTVEFSVEVEO1xuICAgICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgfVxuXG4gICAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25faW50ZXJydXB0KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0JDIodGhpcywgaWQpLFxuICAgICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQkMih0aGlzLCBpZCksXG4gICAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fdHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIG5hbWUgKz0gXCJcIjtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIHR3ZWVuID0gZ2V0JDEodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gICAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0JDIodGhpcywgaWQpO1xuICAgICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBnZXQkMShub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlJDEoYSwgYikge1xuICAgIHZhciBjO1xuICAgIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmUkMShuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmVOUyQxKGZ1bGxuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQkMShuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gICAgdmFyIHZhbHVlMDAsXG4gICAgICAgIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TJDEoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbiQxKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICAgIHZhciB2YWx1ZTAwLFxuICAgICAgICB2YWx1ZTEwLFxuICAgICAgICBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMkMShmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlMDAsXG4gICAgICAgIHZhbHVlMTAsXG4gICAgICAgIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMiA6IGludGVycG9sYXRlJDE7XG4gICAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMkMSA6IGF0dHJGdW5jdGlvbiQxKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyQxIDogYXR0clJlbW92ZSQxKShmdWxsbmFtZSlcbiAgICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyQxIDogYXR0ckNvbnN0YW50JDEpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gICAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgICB9O1xuICAgIH1cbiAgICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdHdlZW47XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9hdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9kZWxheSh2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgICAgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xuICB9XG5cbiAgZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZXQkMih0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgc2V0JDIodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fZHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICAgIDogZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZXQkMih0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX2Vhc2UodmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgICA6IGdldCQxKHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fZmlsdGVyKG1hdGNoKSB7XG4gICAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIkMShtYXRjaCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fbWVyZ2UodHJhbnNpdGlvbikge1xuICAgIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICAgIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQkMShuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICAgIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQkMShuYW1lKSA/IGluaXQgOiBzZXQkMjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX29uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgICAgPyBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXG4gICAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fcmVtb3ZlKCkge1xuICAgIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zZWxlY3Qoc2VsZWN0KSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldCQxKG5vZGUsIGlkKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdEFsbChzZWxlY3QpIHtcbiAgICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0JDEobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG4gIH1cblxuICB2YXIgU2VsZWN0aW9uJDEgPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fc2VsZWN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uJDEodGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlUmVtb3ZlJDEobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgdmFsdWUxMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLFxuICAgICAgICAgIHZhbHVlMCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSksXG4gICAgICAgICAgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlUmVtb3ZlRW5kKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZUNvbnN0YW50JDEobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICAgIHZhciB2YWx1ZTAwLFxuICAgICAgICBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlMCA9IHdpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24kMShuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgdmFsdWUxMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLFxuICAgICAgICAgIHZhbHVlMCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSksXG4gICAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICBpZiAodmFsdWUxID09IG51bGwpIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpKTtcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxIDogaW50ZXJwb2xhdGUkMTtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgICAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlUmVtb3ZlJDEobmFtZSwgaSkpXG4gICAgICAgICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZUVuZChuYW1lKSlcbiAgICAgICAgOiB0aGlzLnN0eWxlVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvbiQxKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCQxKG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRDb25zdGFudCQxKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0RnVuY3Rpb24kMSh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fdGV4dCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IHRleHRGdW5jdGlvbiQxKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgICAgOiB0ZXh0Q29uc3RhbnQkMSh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl90cmFuc2l0aW9uKCkge1xuICAgIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB2YXIgaW5oZXJpdCA9IGdldCQxKG5vZGUsIGlkMCk7XG4gICAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xuICB9XG5cbiAgdmFyIGlkID0gMDtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gICAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICAgIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3SWQoKSB7XG4gICAgcmV0dXJuICsraWQ7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICAgIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gICAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gICAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gICAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICAgIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gICAgb246IHRyYW5zaXRpb25fb24sXG4gICAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICAgIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gICAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gICAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICAgIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICAgIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICAgIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICAgIGVhc2U6IHRyYW5zaXRpb25fZWFzZVxuICB9O1xuXG4gIHZhciBkZWZhdWx0VGltaW5nID0ge1xuICAgIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gICAgZGVsYXk6IDAsXG4gICAgZHVyYXRpb246IDI1MCxcbiAgICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxuICB9O1xuXG4gIGZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgICB2YXIgdGltaW5nO1xuICAgIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aW1pbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fdHJhbnNpdGlvbihuYW1lKSB7XG4gICAgdmFyIGlkLFxuICAgICAgICB0aW1pbmc7XG5cbiAgICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xuICB9XG5cbiAgc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuICBzZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcblxuICB2YXIgcm9vdCQxID0gW251bGxdO1xuXG4gIGZ1bmN0aW9uIGFjdGl2ZShub2RlLCBuYW1lKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgICBzY2hlZHVsZSxcbiAgICAgICAgaTtcblxuICAgIGlmIChzY2hlZHVsZXMpIHtcbiAgICAgIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gICAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLnN0YXRlID4gU0NIRURVTEVEICYmIHNjaGVkdWxlLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oW1tub2RlXV0sIHJvb3QkMSwgbmFtZSwgK2kpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc2xpY2UkNCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBpZGVudGl0eSQ1KHgpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuXG4gIHZhciB0b3AgPSAxO1xuICB2YXIgcmlnaHQgPSAyO1xuICB2YXIgYm90dG9tID0gMztcbiAgdmFyIGxlZnQgPSA0O1xudmFyICAgZXBzaWxvbiQyID0gMWUtNjtcbiAgZnVuY3Rpb24gdHJhbnNsYXRlWChzY2FsZTAsIHNjYWxlMSwgZCkge1xuICAgIHZhciB4ID0gc2NhbGUwKGQpO1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIChpc0Zpbml0ZSh4KSA/IHggOiBzY2FsZTEoZCkpICsgXCIsMClcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZVkoc2NhbGUwLCBzY2FsZTEsIGQpIHtcbiAgICB2YXIgeSA9IHNjYWxlMChkKTtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArIChpc0Zpbml0ZSh5KSA/IHkgOiBzY2FsZTEoZCkpICsgXCIpXCI7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIoc2NhbGUpIHtcbiAgICB2YXIgd2lkdGggPSBzY2FsZS5iYW5kd2lkdGgoKSAvIDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBzY2FsZShkKSArIHdpZHRoO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbnRlcmluZygpIHtcbiAgICByZXR1cm4gIXRoaXMuX19heGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gYXhpcyhvcmllbnQsIHNjYWxlKSB7XG4gICAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICAgIHRpY2tGb3JtYXQgPSBudWxsLFxuICAgICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICAgIHRpY2tQYWRkaW5nID0gMztcblxuICAgIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgICAgZm9ybWF0ID0gdGlja0Zvcm1hdCA9PSBudWxsID8gKHNjYWxlLnRpY2tGb3JtYXQgPyBzY2FsZS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IGlkZW50aXR5JDUpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZLFxuICAgICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgICByYW5nZTAgPSByYW5nZVswXSArIDAuNSxcbiAgICAgICAgICByYW5nZTEgPSByYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgICBwb3NpdGlvbiA9IChzY2FsZS5iYW5kd2lkdGggPyBjZW50ZXIgOiBpZGVudGl0eSQ1KShzY2FsZS5jb3B5KCkpLFxuICAgICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpLFxuICAgICAgICAgIGsgPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGxlZnQgPyAtMSA6IDEsXG4gICAgICAgICAgeCwgeSA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gKHggPSBcInhcIiwgXCJ5XCIpIDogKHggPSBcInlcIiwgXCJ4XCIpO1xuXG4gICAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKSk7XG5cbiAgICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjMDAwXCIpXG4gICAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcilcbiAgICAgICAgICAuYXR0cih5ICsgXCIxXCIsIDAuNSlcbiAgICAgICAgICAuYXR0cih5ICsgXCIyXCIsIDAuNSkpO1xuXG4gICAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMwMDBcIilcbiAgICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgICAuYXR0cih5LCAwLjUpXG4gICAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiLjcxZW1cIiA6IFwiLjMyZW1cIikpO1xuXG4gICAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbiQyKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uLCB0aGlzLnBhcmVudE5vZGUuX19heGlzIHx8IHBvc2l0aW9uLCBkKTsgfSk7XG5cbiAgICAgICAgdGlja0VudGVyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbiQyKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHRoaXMucGFyZW50Tm9kZS5fX2F4aXMgfHwgcG9zaXRpb24sIHBvc2l0aW9uLCBkKTsgfSk7XG4gICAgICB9XG5cbiAgICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgICBwYXRoXG4gICAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgICAgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyXG4gICAgICAgICAgICAgIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlcik7XG5cbiAgICAgIHRpY2tcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24sIHBvc2l0aW9uLCBkKTsgfSk7XG5cbiAgICAgIGxpbmVcbiAgICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKTtcblxuICAgICAgdGV4dFxuICAgICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAgIC50ZXh0KGZvcm1hdCk7XG5cbiAgICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgICBzZWxlY3Rpb25cbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gICAgfVxuXG4gICAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZSQ0LmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UkNC5jYWxsKF8pLCBheGlzKSA6IHRpY2tBcmd1bWVudHMuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1ZhbHVlcyA9IF8gPT0gbnVsbCA/IG51bGwgOiBzbGljZSQ0LmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gICAgfTtcblxuICAgIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gICAgfTtcblxuICAgIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gICAgfTtcblxuICAgIHJldHVybiBheGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICAgIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gICAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgICByZXR1cm4gYXhpcyhib3R0b20sIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gICAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICAgIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lYW5YKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShtZWFuWFJlZHVjZSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBtZWFuWFJlZHVjZSh4LCBjKSB7XG4gICAgcmV0dXJuIHggKyBjLng7XG4gIH1cblxuICBmdW5jdGlvbiBtYXhZKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIDEgKyBjaGlsZHJlbi5yZWR1Y2UobWF4WVJlZHVjZSwgMCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXhZUmVkdWNlKHksIGMpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoeSwgYy55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWZMZWZ0KG5vZGUpIHtcbiAgICB2YXIgY2hpbGRyZW47XG4gICAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuWzBdO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZlJpZ2h0KG5vZGUpIHtcbiAgICB2YXIgY2hpbGRyZW47XG4gICAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2x1c3RlcigpIHtcbiAgICB2YXIgc2VwYXJhdGlvbiA9IGRlZmF1bHRTZXBhcmF0aW9uLFxuICAgICAgICBkeCA9IDEsXG4gICAgICAgIGR5ID0gMSxcbiAgICAgICAgbm9kZVNpemUgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNsdXN0ZXIocm9vdCkge1xuICAgICAgdmFyIHByZXZpb3VzTm9kZSxcbiAgICAgICAgICB4ID0gMDtcblxuICAgICAgLy8gRmlyc3Qgd2FsaywgY29tcHV0aW5nIHRoZSBpbml0aWFsIHggJiB5IHZhbHVlcy5cbiAgICAgIHJvb3QuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgbm9kZS54ID0gbWVhblgoY2hpbGRyZW4pO1xuICAgICAgICAgIG5vZGUueSA9IG1heFkoY2hpbGRyZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcbiAgICAgICAgICBub2RlLnkgPSAwO1xuICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbGVmdCA9IGxlYWZMZWZ0KHJvb3QpLFxuICAgICAgICAgIHJpZ2h0ID0gbGVhZlJpZ2h0KHJvb3QpLFxuICAgICAgICAgIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICAgIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcblxuICAgICAgLy8gU2Vjb25kIHdhbGssIG5vcm1hbGl6aW5nIHggJiB5IHRvIHRoZSBkZXNpcmVkIHNpemUuXG4gICAgICByZXR1cm4gcm9vdC5lYWNoQWZ0ZXIobm9kZVNpemUgPyBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogZHg7XG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogZHk7XG4gICAgICB9IDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogZHg7XG4gICAgICAgIG5vZGUueSA9ICgxIC0gKHJvb3QueSA/IG5vZGUueSAvIHJvb3QueSA6IDEpKSAqIGR5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2x1c3Rlci5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIGNsdXN0ZXIpIDogc2VwYXJhdGlvbjtcbiAgICB9O1xuXG4gICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICAgIH07XG5cbiAgICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBjbHVzdGVyKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBjbHVzdGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9lYWNoKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50ID0gbmV4dC5yZXZlcnNlKCksIG5leHQgPSBbXTtcbiAgICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9lYWNoQmVmb3JlKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGk7XG4gICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9lYWNoQWZ0ZXIoY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBuZXh0ID0gW10sIGNoaWxkcmVuLCBpLCBuO1xuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfc3VtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgICBub2RlLnZhbHVlID0gc3VtO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9zb3J0KGNvbXBhcmUpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfcGF0aChlbmQpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICAgIH1cbiAgICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgICBlbmQgPSBlbmQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gICAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICAgIGMgPSBudWxsO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgICB3aGlsZSAoYSA9PT0gYikge1xuICAgICAgYyA9IGE7XG4gICAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX2FuY2VzdG9ycygpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICAgIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfZGVzY2VuZGFudHMoKSB7XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9sZWF2ZXMoKSB7XG4gICAgdmFyIGxlYXZlcyA9IFtdO1xuICAgIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxlYXZlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfbGlua3MoKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICAgIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZSAhPT0gcm9vdCkgeyAvLyBEb27igJl0IGluY2x1ZGUgdGhlIHJvb3TigJlzIHBhcmVudCwgaWYgYW55LlxuICAgICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbGlua3M7XG4gIH1cblxuICBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIGNoaWxkcyxcbiAgICAgICAgaSxcbiAgICAgICAgbjtcblxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcblxuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobik7XG4gICAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IE5vZGUoY2hpbGRzW2ldKSk7XG4gICAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3QuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgICByZXR1cm4gZC5jaGlsZHJlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgICBub2RlLmRhdGEgPSBub2RlLmRhdGEuZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICAgIHZhciBoZWlnaHQgPSAwO1xuICAgIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmRlcHRoID1cbiAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICB9XG5cbiAgTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBOb2RlLFxuICAgIGVhY2g6IG5vZGVfZWFjaCxcbiAgICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICAgIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgICBzdW06IG5vZGVfc3VtLFxuICAgIHNvcnQ6IG5vZGVfc29ydCxcbiAgICBwYXRoOiBub2RlX3BhdGgsXG4gICAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcbiAgICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICAgIGxpbmtzOiBub2RlX2xpbmtzLFxuICAgIGNvcHk6IG5vZGVfY29weVxuICB9O1xuXG4gIGZ1bmN0aW9uIE5vZGUkMih2YWx1ZSkge1xuICAgIHRoaXMuXyA9IHZhbHVlO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBzaHVmZmxlJDEoYXJyYXkpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IChhcnJheSA9IGFycmF5LnNsaWNlKCkpLmxlbmd0aCxcbiAgICAgICAgaGVhZCA9IG51bGwsXG4gICAgICAgIG5vZGUgPSBoZWFkO1xuXG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIHZhciBuZXh0ID0gbmV3IE5vZGUkMihhcnJheVtuIC0gMV0pO1xuICAgICAgaWYgKG5vZGUpIG5vZGUgPSBub2RlLm5leHQgPSBuZXh0O1xuICAgICAgZWxzZSBub2RlID0gaGVhZCA9IG5leHQ7XG4gICAgICBhcnJheVtpXSA9IGFycmF5Wy0tbl07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhlYWQ6IGhlYWQsXG4gICAgICB0YWlsOiBub2RlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2UoY2lyY2xlcykge1xuICAgIHJldHVybiBlbmNsb3NlTihzaHVmZmxlJDEoY2lyY2xlcyksIFtdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2VzKGEsIGIpIHtcbiAgICB2YXIgZHggPSBiLnggLSBhLngsXG4gICAgICAgIGR5ID0gYi55IC0gYS55LFxuICAgICAgICBkciA9IGEuciAtIGIucjtcbiAgICByZXR1cm4gZHIgKiBkciArIDFlLTYgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIHNtYWxsZXN0IGNpcmNsZSB0aGF0IGNvbnRhaW5zIGNpcmNsZXMgTCBhbmQgaW50ZXJzZWN0cyBjaXJjbGVzIEIuXG4gIGZ1bmN0aW9uIGVuY2xvc2VOKEwsIEIpIHtcbiAgICB2YXIgY2lyY2xlLFxuICAgICAgICBsMCA9IG51bGwsXG4gICAgICAgIGwxID0gTC5oZWFkLFxuICAgICAgICBsMixcbiAgICAgICAgcDE7XG5cbiAgICBzd2l0Y2ggKEIubGVuZ3RoKSB7XG4gICAgICBjYXNlIDE6IGNpcmNsZSA9IGVuY2xvc2UxKEJbMF0pOyBicmVhaztcbiAgICAgIGNhc2UgMjogY2lyY2xlID0gZW5jbG9zZTIoQlswXSwgQlsxXSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBjaXJjbGUgPSBlbmNsb3NlMyhCWzBdLCBCWzFdLCBCWzJdKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgd2hpbGUgKGwxKSB7XG4gICAgICBwMSA9IGwxLl8sIGwyID0gbDEubmV4dDtcbiAgICAgIGlmICghY2lyY2xlIHx8ICFlbmNsb3NlcyhjaXJjbGUsIHAxKSkge1xuXG4gICAgICAgIC8vIFRlbXBvcmFyaWx5IHRydW5jYXRlIEwgYmVmb3JlIGwxLlxuICAgICAgICBpZiAobDApIEwudGFpbCA9IGwwLCBsMC5uZXh0ID0gbnVsbDtcbiAgICAgICAgZWxzZSBMLmhlYWQgPSBMLnRhaWwgPSBudWxsO1xuXG4gICAgICAgIEIucHVzaChwMSk7XG4gICAgICAgIGNpcmNsZSA9IGVuY2xvc2VOKEwsIEIpOyAvLyBOb3RlOiByZW9yZGVycyBMIVxuICAgICAgICBCLnBvcCgpO1xuXG4gICAgICAgIC8vIE1vdmUgbDEgdG8gdGhlIGZyb250IG9mIEwgYW5kIHJlY29ubmVjdCB0aGUgdHJ1bmNhdGVkIGxpc3QgTC5cbiAgICAgICAgaWYgKEwuaGVhZCkgbDEubmV4dCA9IEwuaGVhZCwgTC5oZWFkID0gbDE7XG4gICAgICAgIGVsc2UgbDEubmV4dCA9IG51bGwsIEwuaGVhZCA9IEwudGFpbCA9IGwxO1xuICAgICAgICBsMCA9IEwudGFpbCwgbDAubmV4dCA9IGwyO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsMCA9IGwxO1xuICAgICAgfVxuICAgICAgbDEgPSBsMjtcbiAgICB9XG5cbiAgICBMLnRhaWwgPSBsMDtcbiAgICByZXR1cm4gY2lyY2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jbG9zZTEoYSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBhLngsXG4gICAgICB5OiBhLnksXG4gICAgICByOiBhLnJcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jbG9zZTIoYSwgYikge1xuICAgIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLCB5MjEgPSB5MiAtIHkxLCByMjEgPSByMiAtIHIxLFxuICAgICAgICBsID0gTWF0aC5zcXJ0KHgyMSAqIHgyMSArIHkyMSAqIHkyMSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6ICh4MSArIHgyICsgeDIxIC8gbCAqIHIyMSkgLyAyLFxuICAgICAgeTogKHkxICsgeTIgKyB5MjEgLyBsICogcjIxKSAvIDIsXG4gICAgICByOiAobCArIHIxICsgcjIpIC8gMlxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbmNsb3NlMyhhLCBiLCBjKSB7XG4gICAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICAgIHgzID0gYy54LCB5MyA9IGMueSwgcjMgPSBjLnIsXG4gICAgICAgIGEyID0gMiAqICh4MSAtIHgyKSxcbiAgICAgICAgYjIgPSAyICogKHkxIC0geTIpLFxuICAgICAgICBjMiA9IDIgKiAocjIgLSByMSksXG4gICAgICAgIGQyID0geDEgKiB4MSArIHkxICogeTEgLSByMSAqIHIxIC0geDIgKiB4MiAtIHkyICogeTIgKyByMiAqIHIyLFxuICAgICAgICBhMyA9IDIgKiAoeDEgLSB4MyksXG4gICAgICAgIGIzID0gMiAqICh5MSAtIHkzKSxcbiAgICAgICAgYzMgPSAyICogKHIzIC0gcjEpLFxuICAgICAgICBkMyA9IHgxICogeDEgKyB5MSAqIHkxIC0gcjEgKiByMSAtIHgzICogeDMgLSB5MyAqIHkzICsgcjMgKiByMyxcbiAgICAgICAgYWIgPSBhMyAqIGIyIC0gYTIgKiBiMyxcbiAgICAgICAgeGEgPSAoYjIgKiBkMyAtIGIzICogZDIpIC8gYWIgLSB4MSxcbiAgICAgICAgeGIgPSAoYjMgKiBjMiAtIGIyICogYzMpIC8gYWIsXG4gICAgICAgIHlhID0gKGEzICogZDIgLSBhMiAqIGQzKSAvIGFiIC0geTEsXG4gICAgICAgIHliID0gKGEyICogYzMgLSBhMyAqIGMyKSAvIGFiLFxuICAgICAgICBBID0geGIgKiB4YiArIHliICogeWIgLSAxLFxuICAgICAgICBCID0gMiAqICh4YSAqIHhiICsgeWEgKiB5YiArIHIxKSxcbiAgICAgICAgQyA9IHhhICogeGEgKyB5YSAqIHlhIC0gcjEgKiByMSxcbiAgICAgICAgciA9ICgtQiAtIE1hdGguc3FydChCICogQiAtIDQgKiBBICogQykpIC8gKDIgKiBBKTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeGEgKyB4YiAqIHIgKyB4MSxcbiAgICAgIHk6IHlhICsgeWIgKiByICsgeTEsXG4gICAgICByOiByXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlKGEsIGIsIGMpIHtcbiAgICB2YXIgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBkYSA9IGIuciArIGMucixcbiAgICAgICAgZGIgPSBhLnIgKyBjLnIsXG4gICAgICAgIGR4ID0gYi54IC0gYXgsXG4gICAgICAgIGR5ID0gYi55IC0gYXksXG4gICAgICAgIGRjID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgaWYgKGRjKSB7XG4gICAgICB2YXIgeCA9IDAuNSArICgoZGIgKj0gZGIpIC0gKGRhICo9IGRhKSkgLyAoMiAqIGRjKSxcbiAgICAgICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIDIgKiBkYSAqIChkYiArIGRjKSAtIChkYiAtPSBkYykgKiBkYiAtIGRhICogZGEpKSAvICgyICogZGMpO1xuICAgICAgYy54ID0gYXggKyB4ICogZHggKyB5ICogZHk7XG4gICAgICBjLnkgPSBheSArIHggKiBkeSAtIHkgKiBkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgYy54ID0gYXggKyBkYjtcbiAgICAgIGMueSA9IGF5O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdHMoYSwgYikge1xuICAgIHZhciBkeCA9IGIueCAtIGEueCxcbiAgICAgICAgZHkgPSBiLnkgLSBhLnksXG4gICAgICAgIGRyID0gYS5yICsgYi5yO1xuICAgIHJldHVybiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXN0YW5jZTIoY2lyY2xlLCB4LCB5KSB7XG4gICAgdmFyIGR4ID0gY2lyY2xlLnggLSB4LFxuICAgICAgICBkeSA9IGNpcmNsZS55IC0geTtcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cblxuICBmdW5jdGlvbiBOb2RlJDEoY2lyY2xlKSB7XG4gICAgdGhpcy5fID0gY2lyY2xlO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgdGhpcy5wcmV2aW91cyA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gICAgaWYgKCEobiA9IGNpcmNsZXMubGVuZ3RoKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgYSwgYiwgYywgbjtcblxuICAgIC8vIFBsYWNlIHRoZSBmaXJzdCBjaXJjbGUuXG4gICAgYSA9IGNpcmNsZXNbMF0sIGEueCA9IDAsIGEueSA9IDA7XG4gICAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gICAgLy8gUGxhY2UgdGhlIHNlY29uZCBjaXJjbGUuXG4gICAgYiA9IGNpcmNsZXNbMV0sIGEueCA9IC1iLnIsIGIueCA9IGEuciwgYi55ID0gMDtcbiAgICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgICAvLyBQbGFjZSB0aGUgdGhpcmQgY2lyY2xlLlxuICAgIHBsYWNlKGIsIGEsIGMgPSBjaXJjbGVzWzJdKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHdlaWdodGVkIGNlbnRyb2lkLlxuICAgIHZhciBhYSA9IGEuciAqIGEucixcbiAgICAgICAgYmEgPSBiLnIgKiBiLnIsXG4gICAgICAgIGNhID0gYy5yICogYy5yLFxuICAgICAgICBvYSA9IGFhICsgYmEgKyBjYSxcbiAgICAgICAgb3ggPSBhYSAqIGEueCArIGJhICogYi54ICsgY2EgKiBjLngsXG4gICAgICAgIG95ID0gYWEgKiBhLnkgKyBiYSAqIGIueSArIGNhICogYy55LFxuICAgICAgICBjeCwgY3ksIGksIGosIGssIHNqLCBzaztcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gICAgYSA9IG5ldyBOb2RlJDEoYSksIGIgPSBuZXcgTm9kZSQxKGIpLCBjID0gbmV3IE5vZGUkMShjKTtcbiAgICBhLm5leHQgPSBjLnByZXZpb3VzID0gYjtcbiAgICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgICBjLm5leHQgPSBiLnByZXZpb3VzID0gYTtcblxuICAgIC8vIEF0dGVtcHQgdG8gcGxhY2UgZWFjaCByZW1haW5pbmcgY2lyY2xl4oCmXG4gICAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgICAgcGxhY2UoYS5fLCBiLl8sIGMgPSBjaXJjbGVzW2ldKSwgYyA9IG5ldyBOb2RlJDEoYyk7XG5cbiAgICAgIC8vIElmIHRoZXJlIGFyZSBvbmx5IHRocmVlIGVsZW1lbnRzIGluIHRoZSBmcm9udC1jaGFpbuKAplxuICAgICAgaWYgKChrID0gYS5wcmV2aW91cykgPT09IChqID0gYi5uZXh0KSkge1xuICAgICAgICAvLyBJZiB0aGUgbmV3IGNpcmNsZSBpbnRlcnNlY3RzIHRoZSB0aGlyZCBjaXJjbGUsXG4gICAgICAgIC8vIHJvdGF0ZSB0aGUgZnJvbnQgY2hhaW4gdG8gdHJ5IHRoZSBuZXh0IHBvc2l0aW9uLlxuICAgICAgICBpZiAoaW50ZXJzZWN0cyhqLl8sIGMuXykpIHtcbiAgICAgICAgICBhID0gYiwgYiA9IGosIC0taTtcbiAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW5nIGNpcmNsZSBvbiB0aGUgZnJvbnQtY2hhaW4sIGlmIGFueS5cbiAgICAgIGVsc2Uge1xuICAgICAgICBzaiA9IGouXy5yLCBzayA9IGsuXy5yO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHNqIDw9IHNrKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0cyhqLl8sIGMuXykpIHtcbiAgICAgICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqID0gai5uZXh0LCBzaiArPSBqLl8ucjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoay5fLCBjLl8pKSB7XG4gICAgICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgayA9IGsucHJldmlvdXMsIHNrICs9IGsuXy5yO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoaiAhPT0gay5uZXh0KTtcbiAgICAgIH1cblxuICAgICAgLy8gU3VjY2VzcyEgSW5zZXJ0IHRoZSBuZXcgY2lyY2xlIGMgYmV0d2VlbiBhIGFuZCBiLlxuICAgICAgYy5wcmV2aW91cyA9IGEsIGMubmV4dCA9IGIsIGEubmV4dCA9IGIucHJldmlvdXMgPSBiID0gYztcblxuICAgICAgLy8gVXBkYXRlIHRoZSB3ZWlnaHRlZCBjZW50cm9pZC5cbiAgICAgIG9hICs9IGNhID0gYy5fLnIgKiBjLl8ucjtcbiAgICAgIG94ICs9IGNhICogYy5fLng7XG4gICAgICBveSArPSBjYSAqIGMuXy55O1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBuZXcgY2xvc2VzdCBjaXJjbGUgYSB0byBjZW50cm9pZC5cbiAgICAgIGFhID0gZGlzdGFuY2UyKGEuXywgY3ggPSBveCAvIG9hLCBjeSA9IG95IC8gb2EpO1xuICAgICAgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikge1xuICAgICAgICBpZiAoKGNhID0gZGlzdGFuY2UyKGMuXywgY3gsIGN5KSkgPCBhYSkge1xuICAgICAgICAgIGEgPSBjLCBhYSA9IGNhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiID0gYS5uZXh0O1xuICAgIH1cblxuICAgIC8vIENvbXB1dGUgdGhlIGVuY2xvc2luZyBjaXJjbGUgb2YgdGhlIGZyb250IGNoYWluLlxuICAgIGEgPSBbYi5fXSwgYyA9IGI7IHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIGEucHVzaChjLl8pOyBjID0gZW5jbG9zZShhKTtcblxuICAgIC8vIFRyYW5zbGF0ZSB0aGUgY2lyY2xlcyB0byBwdXQgdGhlIGVuY2xvc2luZyBjaXJjbGUgYXJvdW5kIHRoZSBvcmlnaW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XG5cbiAgICByZXR1cm4gYy5yO1xuICB9XG5cbiAgZnVuY3Rpb24gc2libGluZ3MoY2lyY2xlcykge1xuICAgIHBhY2tFbmNsb3NlKGNpcmNsZXMpO1xuICAgIHJldHVybiBjaXJjbGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gb3B0aW9uYWwoZikge1xuICAgIHJldHVybiBmID09IG51bGwgPyBudWxsIDogcmVxdWlyZWQoZik7XG4gIH1cblxuICBmdW5jdGlvbiByZXF1aXJlZChmKSB7XG4gICAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50WmVybygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDUoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGQudmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgdmFyIHJhZGl1cyA9IG51bGwsXG4gICAgICAgIGR4ID0gMSxcbiAgICAgICAgZHkgPSAxLFxuICAgICAgICBwYWRkaW5nID0gY29uc3RhbnRaZXJvO1xuXG4gICAgZnVuY3Rpb24gcGFjayhyb290KSB7XG4gICAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYocmFkaXVzKSlcbiAgICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIDAuNSkpXG4gICAgICAgICAgICAuZWFjaEJlZm9yZSh0cmFuc2xhdGVDaGlsZCgxKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihkZWZhdWx0UmFkaXVzKSlcbiAgICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKGNvbnN0YW50WmVybywgMSkpXG4gICAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCByb290LnIgLyBNYXRoLm1pbihkeCwgZHkpKSlcbiAgICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gb3B0aW9uYWwoeCksIHBhY2spIDogcmFkaXVzO1xuICAgIH07XG5cbiAgICBwYWNrLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYWNrKSA6IFtkeCwgZHldO1xuICAgIH07XG5cbiAgICBwYWNrLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xuICAgIH07XG5cbiAgICByZXR1cm4gcGFjaztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhZGl1c0xlYWYocmFkaXVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBub2RlLnIgPSBNYXRoLm1heCgwLCArcmFkaXVzKG5vZGUpIHx8IDApO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYWNrQ2hpbGRyZW4ocGFkZGluZywgaykge1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgICAgciA9IHBhZGRpbmcobm9kZSkgKiBrIHx8IDAsXG4gICAgICAgICAgICBlO1xuXG4gICAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yICs9IHI7XG4gICAgICAgIGUgPSBwYWNrRW5jbG9zZShjaGlsZHJlbik7XG4gICAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yIC09IHI7XG4gICAgICAgIG5vZGUuciA9IGUgKyByO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGVDaGlsZChrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICAgIG5vZGUuciAqPSBrO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBub2RlLnggPSBwYXJlbnQueCArIGsgKiBub2RlLng7XG4gICAgICAgIG5vZGUueSA9IHBhcmVudC55ICsgayAqIG5vZGUueTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcm91bmROb2RlKG5vZGUpIHtcbiAgICBub2RlLngwID0gTWF0aC5yb3VuZChub2RlLngwKTtcbiAgICBub2RlLnkwID0gTWF0aC5yb3VuZChub2RlLnkwKTtcbiAgICBub2RlLngxID0gTWF0aC5yb3VuZChub2RlLngxKTtcbiAgICBub2RlLnkxID0gTWF0aC5yb3VuZChub2RlLnkxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVtYXBEaWNlKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeDEgLSB4MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MTtcbiAgICAgIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgwICs9IG5vZGUudmFsdWUgKiBrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnRpdGlvbigpIHtcbiAgICB2YXIgZHggPSAxLFxuICAgICAgICBkeSA9IDEsXG4gICAgICAgIHBhZGRpbmcgPSAwLFxuICAgICAgICByb3VuZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcGFydGl0aW9uKHJvb3QpIHtcbiAgICAgIHZhciBuID0gcm9vdC5oZWlnaHQgKyAxO1xuICAgICAgcm9vdC54MCA9XG4gICAgICByb290LnkwID0gcGFkZGluZztcbiAgICAgIHJvb3QueDEgPSBkeDtcbiAgICAgIHJvb3QueTEgPSBkeSAvIG47XG4gICAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKGR5LCBuKSk7XG4gICAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKGR5LCBuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIHRyZWVtYXBEaWNlKG5vZGUsIG5vZGUueDAsIGR5ICogKG5vZGUuZGVwdGggKyAxKSAvIG4sIG5vZGUueDEsIGR5ICogKG5vZGUuZGVwdGggKyAyKSAvIG4pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4MCA9IG5vZGUueDAsXG4gICAgICAgICAgICB5MCA9IG5vZGUueTAsXG4gICAgICAgICAgICB4MSA9IG5vZGUueDEgLSBwYWRkaW5nLFxuICAgICAgICAgICAgeTEgPSBub2RlLnkxIC0gcGFkZGluZztcbiAgICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICAgIG5vZGUueDAgPSB4MDtcbiAgICAgICAgbm9kZS55MCA9IHkwO1xuICAgICAgICBub2RlLngxID0geDE7XG4gICAgICAgIG5vZGUueTEgPSB5MTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcGFydGl0aW9uLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHBhcnRpdGlvbikgOiByb3VuZDtcbiAgICB9O1xuXG4gICAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYXJ0aXRpb24pIDogW2R4LCBkeV07XG4gICAgfTtcblxuICAgIHBhcnRpdGlvbi5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9ICt4LCBwYXJ0aXRpb24pIDogcGFkZGluZztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBhcnRpdGlvbjtcbiAgfVxuXG52YXIgICBrZXlQcmVmaXgkMSA9IFwiJFwiO1xuICB2YXIgcHJlcm9vdCA9IHtkZXB0aDogLTF9O1xuICB2YXIgYW1iaWd1b3VzID0ge307XG4gIGZ1bmN0aW9uIGRlZmF1bHRJZChkKSB7XG4gICAgcmV0dXJuIGQuaWQ7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0UGFyZW50SWQoZCkge1xuICAgIHJldHVybiBkLnBhcmVudElkO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyYXRpZnkoKSB7XG4gICAgdmFyIGlkID0gZGVmYXVsdElkLFxuICAgICAgICBwYXJlbnRJZCA9IGRlZmF1bHRQYXJlbnRJZDtcblxuICAgIGZ1bmN0aW9uIHN0cmF0aWZ5KGRhdGEpIHtcbiAgICAgIHZhciBkLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgcGFyZW50LFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgbm9kZXMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgbm9kZUlkLFxuICAgICAgICAgIG5vZGVLZXksXG4gICAgICAgICAgbm9kZUJ5S2V5ID0ge307XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgZCA9IGRhdGFbaV0sIG5vZGUgPSBub2Rlc1tpXSA9IG5ldyBOb2RlKGQpO1xuICAgICAgICBpZiAoKG5vZGVJZCA9IGlkKGQsIGksIGRhdGEpKSAhPSBudWxsICYmIChub2RlSWQgKz0gXCJcIikpIHtcbiAgICAgICAgICBub2RlS2V5ID0ga2V5UHJlZml4JDEgKyAobm9kZS5pZCA9IG5vZGVJZCk7XG4gICAgICAgICAgbm9kZUJ5S2V5W25vZGVLZXldID0gbm9kZUtleSBpbiBub2RlQnlLZXkgPyBhbWJpZ3VvdXMgOiBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlSWQgPSBwYXJlbnRJZChkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgICAgaWYgKG5vZGVJZCA9PSBudWxsIHx8ICEobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgICAgaWYgKHJvb3QpIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIHJvb3RzXCIpO1xuICAgICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudCA9IG5vZGVCeUtleVtrZXlQcmVmaXgkMSArIG5vZGVJZF07XG4gICAgICAgICAgaWYgKCFwYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgICBpZiAocGFyZW50ID09PSBhbWJpZ3VvdXMpIHRocm93IG5ldyBFcnJvcihcImFtYmlndW91czogXCIgKyBub2RlSWQpO1xuICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICAgIGVsc2UgcGFyZW50LmNoaWxkcmVuID0gW25vZGVdO1xuICAgICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcm9vdFwiKTtcbiAgICAgIHJvb3QucGFyZW50ID0gcHJlcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7IG5vZGUuZGVwdGggPSBub2RlLnBhcmVudC5kZXB0aCArIDE7IC0tbjsgfSkuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbiAgICAgIHJvb3QucGFyZW50ID0gbnVsbDtcbiAgICAgIGlmIChuID4gMCkgdGhyb3cgbmV3IEVycm9yKFwiY3ljbGVcIik7XG5cbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIHN0cmF0aWZ5LmlkID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogaWQ7XG4gICAgfTtcblxuICAgIHN0cmF0aWZ5LnBhcmVudElkID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFyZW50SWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogcGFyZW50SWQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJhdGlmeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xuICAvLyAgIHJldHVybiAoYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDIpIC8gYS5kZXB0aDtcbiAgLy8gfVxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgbGVmdCBjb250b3VyIG9mIGEgc3VidHJlZSAob3JcbiAgLy8gc3ViZm9yZXN0KS4gSXQgcmV0dXJucyB0aGUgc3VjY2Vzc29yIG9mIHYgb24gdGhpcyBjb250b3VyLiBUaGlzIHN1Y2Nlc3NvciBpc1xuICAvLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbiAgLy8gcmV0dXJucyBudWxsIGlmIGFuZCBvbmx5IGlmIHYgaXMgb24gdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgaXRzIHN1YnRyZWUuXG4gIGZ1bmN0aW9uIG5leHRMZWZ0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogdi50O1xuICB9XG5cbiAgLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbiAgZnVuY3Rpb24gbmV4dFJpZ2h0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xuICB9XG5cbiAgLy8gU2hpZnRzIHRoZSBjdXJyZW50IHN1YnRyZWUgcm9vdGVkIGF0IHcrLiBUaGlzIGlzIGRvbmUgYnkgaW5jcmVhc2luZ1xuICAvLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuICBmdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XG4gICAgdmFyIGNoYW5nZSA9IHNoaWZ0IC8gKHdwLmkgLSB3bS5pKTtcbiAgICB3cC5jIC09IGNoYW5nZTtcbiAgICB3cC5zICs9IHNoaWZ0O1xuICAgIHdtLmMgKz0gY2hhbmdlO1xuICAgIHdwLnogKz0gc2hpZnQ7XG4gICAgd3AubSArPSBzaGlmdDtcbiAgfVxuXG4gIC8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuICAvLyBwZXJmb3JtZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gcHJlcGFyZSB0aGUgc2hpZnRzLCB3ZSBoYXZlIHRvIGFkanVzdFxuICAvLyBjaGFuZ2UodyspLCBzaGlmdCh3KyksIGFuZCBjaGFuZ2Uody0pLlxuICBmdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgICB2YXIgc2hpZnQgPSAwLFxuICAgICAgICBjaGFuZ2UgPSAwLFxuICAgICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgIHc7XG4gICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgICB3LnogKz0gc2hpZnQ7XG4gICAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdmkt4oCZcyBhbmNlc3RvciBpcyBhIHNpYmxpbmcgb2YgdiwgcmV0dXJucyB2aS3igJlzIGFuY2VzdG9yLiBPdGhlcndpc2UsXG4gIC8vIHJldHVybnMgdGhlIHNwZWNpZmllZCAoZGVmYXVsdCkgYW5jZXN0b3IuXG4gIGZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gICAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICAgIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcbiAgICB0aGlzLmEgPSB0aGlzOyAvLyBhbmNlc3RvclxuICAgIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICAgIHRoaXMubSA9IDA7IC8vIG1vZFxuICAgIHRoaXMuYyA9IDA7IC8vIGNoYW5nZVxuICAgIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gICAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXG4gICAgdGhpcy5pID0gaTsgLy8gbnVtYmVyXG4gIH1cblxuICBUcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiB0cmVlUm9vdChyb290KSB7XG4gICAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG5vZGVzID0gW3RyZWVdLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGksXG4gICAgICAgIG47XG5cbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgICBpZiAoY2hpbGRyZW4gPSBub2RlLl8uY2hpbGRyZW4pIHtcbiAgICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgVHJlZU5vZGUoY2hpbGRyZW5baV0sIGkpKTtcbiAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgKHRyZWUucGFyZW50ID0gbmV3IFRyZWVOb2RlKG51bGwsIDApKS5jaGlsZHJlbiA9IFt0cmVlXTtcbiAgICByZXR1cm4gdHJlZTtcbiAgfVxuXG4gIC8vIE5vZGUtbGluayB0cmVlIGRpYWdyYW0gdXNpbmcgdGhlIFJlaW5nb2xkLVRpbGZvcmQgXCJ0aWR5XCIgYWxnb3JpdGhtXG4gIGZ1bmN0aW9uIHRyZWUoKSB7XG4gICAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbiQxLFxuICAgICAgICBkeCA9IDEsXG4gICAgICAgIGR5ID0gMSxcbiAgICAgICAgbm9kZVNpemUgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBsYXlvdXQgdXNpbmcgQnVjaGhlaW0gZXQgYWwu4oCZcyBhbGdvcml0aG0uXG4gICAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgICAgLy8gSWYgYSBmaXhlZCBub2RlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5LlxuICAgICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGxlZnQtbW9zdCwgcmlnaHQtbW9zdCwgYW5kIGRlcHRoLW1vc3Qgbm9kZXMgZm9yIGV4dGVudHMuXG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIGxlZnQgPSByb290LFxuICAgICAgICAgICAgcmlnaHQgPSByb290LFxuICAgICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcbiAgICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAgICBreCA9IGR4IC8gKHJpZ2h0LnggKyBzICsgdHgpLFxuICAgICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuICAgICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIC8vIENvbXB1dGVzIGEgcHJlbGltaW5hcnkgeC1jb29yZGluYXRlIGZvciB2LiBCZWZvcmUgdGhhdCwgRklSU1QgV0FMSyBpc1xuICAgIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gICAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gICAgLy8gbm9kZSB2IGlzIHBsYWNlZCB0byB0aGUgbWlkcG9pbnQgb2YgaXRzIG91dGVybW9zdCBjaGlsZHJlbi5cbiAgICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgICBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLFxuICAgICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgZXhlY3V0ZVNoaWZ0cyh2KTtcbiAgICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdi56ID0gbWlkcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgIH1cbiAgICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gICAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG4gICAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgICB9XG5cbiAgICAvLyBUaGUgY29yZSBvZiB0aGUgYWxnb3JpdGhtLiBIZXJlLCBhIG5ldyBzdWJ0cmVlIGlzIGNvbWJpbmVkIHdpdGggdGhlXG4gICAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAgIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gICAgLy8gdmVydGljZXMgdXNlZCBmb3IgdGhlIHRyYXZlcnNhbHMgYXJlIHZpKywgdmktLCB2by0sIGFuZCB2byssIHdoZXJlIHRoZVxuICAgIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gICAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAgIC8vIGNvbnRvdXIsIHdlIHVzZSByZXNwZWN0aXZlIHZhcmlhYmxlcyBzaSssIHNpLSwgc28tLCBhbmQgc28rLiBXaGVuZXZlciB0d29cbiAgICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgICAvLyBTVUJUUkVFIHRvIHNoaWZ0IHRoZSBzdWJ0cmVlIGFuZCBwcmVwYXJlIHRoZSBzaGlmdHMgb2Ygc21hbGxlciBzdWJ0cmVlcy5cbiAgICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICAgIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgICAgaWYgKHcpIHtcbiAgICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgICAgdmltID0gdyxcbiAgICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICAgIHNvcCA9IHZvcC5tLFxuICAgICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICAgIHNoaWZ0O1xuICAgICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICAgIHZvcCA9IG5leHRSaWdodCh2b3ApO1xuICAgICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgICAgdm9tLnQgPSB2aXA7XG4gICAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFuY2VzdG9yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICAgIG5vZGUueCAqPSBkeDtcbiAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBkeTtcbiAgICB9XG5cbiAgICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgdHJlZSkgOiBzZXBhcmF0aW9uO1xuICAgIH07XG5cbiAgICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gICAgfTtcblxuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRyZWU7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlbWFwU2xpY2UocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgbm9kZSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBrID0gcGFyZW50LnZhbHVlICYmICh5MSAtIHkwKSAvIHBhcmVudC52YWx1ZTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgICAgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbiAgZnVuY3Rpb24gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciByb3dzID0gW10sXG4gICAgICAgIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgICByb3csXG4gICAgICAgIG5vZGVWYWx1ZSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgZHgsIGR5LFxuICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgICAgc3VtVmFsdWUsXG4gICAgICAgIG1pblZhbHVlLFxuICAgICAgICBtYXhWYWx1ZSxcbiAgICAgICAgbmV3UmF0aW8sXG4gICAgICAgIG1pblJhdGlvLFxuICAgICAgICBhbHBoYSxcbiAgICAgICAgYmV0YTtcblxuICAgIHdoaWxlIChpMCA8IG4pIHtcbiAgICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuICAgICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlID0gbm9kZXNbaTBdLnZhbHVlO1xuICAgICAgYWxwaGEgPSBNYXRoLm1heChkeSAvIGR4LCBkeCAvIGR5KSAvICh2YWx1ZSAqIHJhdGlvKTtcbiAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcblxuICAgICAgLy8gS2VlcCBhZGRpbmcgbm9kZXMgd2hpbGUgdGhlIGFzcGVjdCByYXRpbyBtYWludGFpbnMgb3IgaW1wcm92ZXMuXG4gICAgICBmb3IgKGkxID0gaTAgKyAxOyBpMSA8IG47ICsraTEpIHtcbiAgICAgICAgc3VtVmFsdWUgKz0gbm9kZVZhbHVlID0gbm9kZXNbaTFdLnZhbHVlO1xuICAgICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxuICAgICAgICBtaW5SYXRpbyA9IG5ld1JhdGlvO1xuICAgICAgfVxuXG4gICAgICAvLyBQb3NpdGlvbiBhbmQgcmVjb3JkIHRoZSByb3cgb3JpZW50YXRpb24uXG4gICAgICByb3dzLnB1c2gocm93ID0ge3ZhbHVlOiBzdW1WYWx1ZSwgZGljZTogZHggPCBkeSwgY2hpbGRyZW46IG5vZGVzLnNsaWNlKGkwLCBpMSl9KTtcbiAgICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcbiAgICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB2YWx1ZSA/IHgwICs9IGR4ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgICB2YWx1ZSAtPSBzdW1WYWx1ZSwgaTAgPSBpMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIHZhciBzcXVhcmlmeSA9IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICAgIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cblxuICAgIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzcXVhcmlmeTtcbiAgfSkocGhpKTtcblxuICBmdW5jdGlvbiBpbmRleCQxKCkge1xuICAgIHZhciB0aWxlID0gc3F1YXJpZnksXG4gICAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICAgIGR4ID0gMSxcbiAgICAgICAgZHkgPSAxLFxuICAgICAgICBwYWRkaW5nU3RhY2sgPSBbMF0sXG4gICAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcbiAgICAgICAgcGFkZGluZ1RvcCA9IGNvbnN0YW50WmVybyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gY29uc3RhbnRaZXJvLFxuICAgICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxuICAgICAgICBwYWRkaW5nTGVmdCA9IGNvbnN0YW50WmVybztcblxuICAgIGZ1bmN0aW9uIHRyZWVtYXAocm9vdCkge1xuICAgICAgcm9vdC54MCA9XG4gICAgICByb290LnkwID0gMDtcbiAgICAgIHJvb3QueDEgPSBkeDtcbiAgICAgIHJvb3QueTEgPSBkeTtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShwb3NpdGlvbk5vZGUpO1xuICAgICAgcGFkZGluZ1N0YWNrID0gWzBdO1xuICAgICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShub2RlKSB7XG4gICAgICB2YXIgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoXSxcbiAgICAgICAgICB4MCA9IG5vZGUueDAgKyBwLFxuICAgICAgICAgIHkwID0gbm9kZS55MCArIHAsXG4gICAgICAgICAgeDEgPSBub2RlLngxIC0gcCxcbiAgICAgICAgICB5MSA9IG5vZGUueTEgLSBwO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgbm9kZS54MCA9IHgwO1xuICAgICAgbm9kZS55MCA9IHkwO1xuICAgICAgbm9kZS54MSA9IHgxO1xuICAgICAgbm9kZS55MSA9IHkxO1xuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoICsgMV0gPSBwYWRkaW5nSW5uZXIobm9kZSkgLyAyO1xuICAgICAgICB4MCArPSBwYWRkaW5nTGVmdChub2RlKSAtIHA7XG4gICAgICAgIHkwICs9IHBhZGRpbmdUb3Aobm9kZSkgLSBwO1xuICAgICAgICB4MSAtPSBwYWRkaW5nUmlnaHQobm9kZSkgLSBwO1xuICAgICAgICB5MSAtPSBwYWRkaW5nQm90dG9tKG5vZGUpIC0gcDtcbiAgICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICAgIHRpbGUobm9kZSwgeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC50aWxlID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlsZSA9IHJlcXVpcmVkKHgpLCB0cmVlbWFwKSA6IHRpbGU7XG4gICAgfTtcblxuICAgIHRyZWVtYXAucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDUoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdJbm5lcjtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ1RvcCh4KS5wYWRkaW5nUmlnaHQoeCkucGFkZGluZ0JvdHRvbSh4KS5wYWRkaW5nTGVmdCh4KSA6IHRyZWVtYXAucGFkZGluZ1RvcCgpO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdUb3AgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nVG9wID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nVG9wO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdSaWdodCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdSaWdodCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkNSgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdCb3R0b20gPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nQm90dG9tID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nQm90dG9tO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdMZWZ0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0xlZnQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDUoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdMZWZ0O1xuICAgIH07XG5cbiAgICByZXR1cm4gdHJlZW1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbmFyeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgICBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBzdW0sIHN1bXMgPSBuZXcgQXJyYXkobiArIDEpO1xuXG4gICAgZm9yIChzdW1zWzBdID0gc3VtID0gaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN1bXNbaSArIDFdID0gc3VtICs9IG5vZGVzW2ldLnZhbHVlO1xuICAgIH1cblxuICAgIHBhcnRpdGlvbigwLCBuLCBwYXJlbnQudmFsdWUsIHgwLCB5MCwgeDEsIHkxKTtcblxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihpLCBqLCB2YWx1ZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIGlmIChpID49IGogLSAxKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIG5vZGUueDAgPSB4MCwgbm9kZS55MCA9IHkwO1xuICAgICAgICBub2RlLngxID0geDEsIG5vZGUueTEgPSB5MTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWVPZmZzZXQgPSBzdW1zW2ldLFxuICAgICAgICAgIHZhbHVlVGFyZ2V0ID0gKHZhbHVlIC8gMikgKyB2YWx1ZU9mZnNldCxcbiAgICAgICAgICBrID0gaSArIDEsXG4gICAgICAgICAgaGkgPSBqIC0gMTtcblxuICAgICAgd2hpbGUgKGsgPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gayArIGhpID4+PiAxO1xuICAgICAgICBpZiAoc3Vtc1ttaWRdIDwgdmFsdWVUYXJnZXQpIGsgPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWVMZWZ0ID0gc3Vtc1trXSAtIHZhbHVlT2Zmc2V0LFxuICAgICAgICAgIHZhbHVlUmlnaHQgPSB2YWx1ZSAtIHZhbHVlTGVmdDtcblxuICAgICAgaWYgKCh5MSAtIHkwKSA+ICh4MSAtIHgwKSkge1xuICAgICAgICB2YXIgeWsgPSAoeTAgKiB2YWx1ZVJpZ2h0ICsgeTEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeDEsIHlrKTtcbiAgICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHgwLCB5aywgeDEsIHkxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB4ayA9ICh4MCAqIHZhbHVlUmlnaHQgKyB4MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZTtcbiAgICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4aywgeTEpO1xuICAgICAgICBwYXJ0aXRpb24oaywgaiwgdmFsdWVSaWdodCwgeGssIHkwLCB4MSwgeTEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWNlRGljZShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgKHBhcmVudC5kZXB0aCAmIDEgPyB0cmVlbWFwU2xpY2UgOiB0cmVlbWFwRGljZSkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICB2YXIgcmVzcXVhcmlmeSA9IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICAgIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgaWYgKChyb3dzID0gcGFyZW50Ll9zcXVhcmlmeSkgJiYgKHJvd3MucmF0aW8gPT09IHJhdGlvKSkge1xuICAgICAgICB2YXIgcm93cyxcbiAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgIG5vZGVzLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBtID0gcm93cy5sZW5ndGgsXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICAgIHJvdyA9IHJvd3Nbal0sIG5vZGVzID0gcm93LmNoaWxkcmVuO1xuICAgICAgICAgIGZvciAoaSA9IHJvdy52YWx1ZSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHJvdy52YWx1ZSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICAgICAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgeTAgKz0gKHkxIC0geTApICogcm93LnZhbHVlIC8gdmFsdWUpO1xuICAgICAgICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB4MCArPSAoeDEgLSB4MCkgKiByb3cudmFsdWUgLyB2YWx1ZSwgeTEpO1xuICAgICAgICAgIHZhbHVlIC09IHJvdy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50Ll9zcXVhcmlmeSA9IHJvd3MgPSBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgICAgcm93cy5yYXRpbyA9IHJhdGlvO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3F1YXJpZnk7XG4gIH0pKHBoaSk7XG5cbiAgZnVuY3Rpb24gY2VudGVyJDEoeCwgeSkge1xuICAgIHZhciBub2RlcztcblxuICAgIGlmICh4ID09IG51bGwpIHggPSAwO1xuICAgIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgc3ggPSAwLFxuICAgICAgICAgIHN5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIHN4ICs9IG5vZGUueCwgc3kgKz0gbm9kZS55O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueCAtPSBzeCwgbm9kZS55IC09IHN5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBub2RlcyA9IF87XG4gICAgfTtcblxuICAgIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gICAgfTtcblxuICAgIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDYoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBqaWdnbGUoKSB7XG4gICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG4gIH1cblxuICBmdW5jdGlvbiB4JDEoZCkge1xuICAgIHJldHVybiBkLnggKyBkLnZ4O1xuICB9XG5cbiAgZnVuY3Rpb24geSQxKGQpIHtcbiAgICByZXR1cm4gZC55ICsgZC52eTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbGxpZGUocmFkaXVzKSB7XG4gICAgdmFyIG5vZGVzLFxuICAgICAgICByYWRpaSxcbiAgICAgICAgc3RyZW5ndGggPSAxLFxuICAgICAgICBpdGVyYXRpb25zID0gMTtcblxuICAgIGlmICh0eXBlb2YgcmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIHJhZGl1cyA9IGNvbnN0YW50JDYocmFkaXVzID09IG51bGwgPyAxIDogK3JhZGl1cyk7XG5cbiAgICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIHRyZWUsXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB4aSxcbiAgICAgICAgICB5aSxcbiAgICAgICAgICByaSxcbiAgICAgICAgICByaTI7XG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICAgIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCQxLCB5JDEpLnZpc2l0QWZ0ZXIocHJlcGFyZSk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgcmkgPSByYWRpaVtpXSwgcmkyID0gcmkgKiByaTtcbiAgICAgICAgICB4aSA9IG5vZGUueCArIG5vZGUudng7XG4gICAgICAgICAgeWkgPSBub2RlLnkgKyBub2RlLnZ5O1xuICAgICAgICAgIHRyZWUudmlzaXQoYXBwbHkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICAgIHZhciBkYXRhID0gcXVhZC5kYXRhLCByaiA9IHF1YWQuciwgciA9IHJpICsgcmo7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgaWYgKGRhdGEuaW5kZXggPiBpKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHhpIC0gZGF0YS54IC0gZGF0YS52eCxcbiAgICAgICAgICAgICAgICB5ID0geWkgLSBkYXRhLnkgLSBkYXRhLnZ5LFxuICAgICAgICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuICAgICAgICAgICAgaWYgKGwgPCByICogcikge1xuICAgICAgICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZSgpLCBsICs9IHggKiB4O1xuICAgICAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICAgICAgICBsID0gKHIgLSAobCA9IE1hdGguc3FydChsKSkpIC8gbCAqIHN0cmVuZ3RoO1xuICAgICAgICAgICAgICBub2RlLnZ4ICs9ICh4ICo9IGwpICogKHIgPSAocmogKj0gcmopIC8gKHJpMiArIHJqKSk7XG4gICAgICAgICAgICAgIG5vZGUudnkgKz0gKHkgKj0gbCkgKiByO1xuICAgICAgICAgICAgICBkYXRhLnZ4IC09IHggKiAociA9IDEgLSByKTtcbiAgICAgICAgICAgICAgZGF0YS52eSAtPSB5ICogcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4MCA+IHhpICsgciB8fCB4MSA8IHhpIC0gciB8fCB5MCA+IHlpICsgciB8fCB5MSA8IHlpIC0gcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlKHF1YWQpIHtcbiAgICAgIGlmIChxdWFkLmRhdGEpIHJldHVybiBxdWFkLnIgPSByYWRpaVtxdWFkLmRhdGEuaW5kZXhdO1xuICAgICAgZm9yICh2YXIgaSA9IHF1YWQuciA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgaWYgKHF1YWRbaV0gJiYgcXVhZFtpXS5yID4gcXVhZC5yKSB7XG4gICAgICAgICAgcXVhZC5yID0gcXVhZFtpXS5yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHZhciBpLCBuID0gKG5vZGVzID0gXykubGVuZ3RoOyByYWRpaSA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHJhZGlpW2ldID0gK3JhZGl1cyhub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH07XG5cbiAgICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gK18sIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBmb3JjZSkgOiByYWRpdXM7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4JDIoZCwgaSkge1xuICAgIHJldHVybiBpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluayhsaW5rcykge1xuICAgIHZhciBpZCA9IGluZGV4JDIsXG4gICAgICAgIHN0cmVuZ3RoID0gZGVmYXVsdFN0cmVuZ3RoLFxuICAgICAgICBzdHJlbmd0aHMsXG4gICAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQkNigzMCksXG4gICAgICAgIGRpc3RhbmNlcyxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIGNvdW50LFxuICAgICAgICBiaWFzLFxuICAgICAgICBpdGVyYXRpb25zID0gMTtcblxuICAgIGlmIChsaW5rcyA9PSBudWxsKSBsaW5rcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFN0cmVuZ3RoKGxpbmspIHtcbiAgICAgIHJldHVybiAxIC8gTWF0aC5taW4oY291bnRbbGluay5zb3VyY2UuaW5kZXhdLCBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgICBmb3IgKHZhciBrID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGluaywgc291cmNlLCB0YXJnZXQsIHgsIHksIGwsIGI7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBsaW5rID0gbGlua3NbaV0sIHNvdXJjZSA9IGxpbmsuc291cmNlLCB0YXJnZXQgPSBsaW5rLnRhcmdldDtcbiAgICAgICAgICB4ID0gdGFyZ2V0LnggKyB0YXJnZXQudnggLSBzb3VyY2UueCAtIHNvdXJjZS52eCB8fCBqaWdnbGUoKTtcbiAgICAgICAgICB5ID0gdGFyZ2V0LnkgKyB0YXJnZXQudnkgLSBzb3VyY2UueSAtIHNvdXJjZS52eSB8fCBqaWdnbGUoKTtcbiAgICAgICAgICBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgIGwgPSAobCAtIGRpc3RhbmNlc1tpXSkgLyBsICogYWxwaGEgKiBzdHJlbmd0aHNbaV07XG4gICAgICAgICAgeCAqPSBsLCB5ICo9IGw7XG4gICAgICAgICAgdGFyZ2V0LnZ4IC09IHggKiAoYiA9IGJpYXNbaV0pO1xuICAgICAgICAgIHRhcmdldC52eSAtPSB5ICogYjtcbiAgICAgICAgICBzb3VyY2UudnggKz0geCAqIChiID0gMSAtIGIpO1xuICAgICAgICAgIHNvdXJjZS52eSArPSB5ICogYjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICAgIHZhciBpLFxuICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgbSA9IGxpbmtzLmxlbmd0aCxcbiAgICAgICAgICBub2RlQnlJZCA9IG1hcCQxKG5vZGVzLCBpZCksXG4gICAgICAgICAgbGluaztcblxuICAgICAgZm9yIChpID0gMCwgY291bnQgPSBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgY291bnRbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgbGluay5pbmRleCA9IGk7XG4gICAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gbm9kZUJ5SWQuZ2V0KGxpbmsuc291cmNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBsaW5rLnRhcmdldCAhPT0gXCJvYmplY3RcIikgbGluay50YXJnZXQgPSBub2RlQnlJZC5nZXQobGluay50YXJnZXQpO1xuICAgICAgICArK2NvdW50W2xpbmsuc291cmNlLmluZGV4XSwgKytjb3VudFtsaW5rLnRhcmdldC5pbmRleF07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgICAgbGluayA9IGxpbmtzW2ldLCBiaWFzW2ldID0gY291bnRbbGluay5zb3VyY2UuaW5kZXhdIC8gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSArIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgICBkaXN0YW5jZXMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVEaXN0YW5jZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH07XG5cbiAgICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxpbmtzID0gXywgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBsaW5rcztcbiAgICB9O1xuXG4gICAgZm9yY2UuaWQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xuICAgIH07XG5cbiAgICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS5kaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCksIGZvcmNlKSA6IGRpc3RhbmNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBmdW5jdGlvbiB4JDIoZCkge1xuICAgIHJldHVybiBkLng7XG4gIH1cblxuICBmdW5jdGlvbiB5JDIoZCkge1xuICAgIHJldHVybiBkLnk7XG4gIH1cblxuICB2YXIgaW5pdGlhbFJhZGl1cyA9IDEwO1xuICB2YXIgaW5pdGlhbEFuZ2xlID0gTWF0aC5QSSAqICgzIC0gTWF0aC5zcXJ0KDUpKTtcbiAgZnVuY3Rpb24gc2ltdWxhdGlvbihub2Rlcykge1xuICAgIHZhciBzaW11bGF0aW9uLFxuICAgICAgICBhbHBoYSA9IDEsXG4gICAgICAgIGFscGhhTWluID0gMC4wMDEsXG4gICAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgICBhbHBoYVRhcmdldCA9IDAsXG4gICAgICAgIHZlbG9jaXR5RGVjYXkgPSAwLjYsXG4gICAgICAgIGZvcmNlcyA9IG1hcCQxKCksXG4gICAgICAgIHN0ZXBwZXIgPSB0aW1lcihzdGVwKSxcbiAgICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHN0ZXAoKSB7XG4gICAgICB0aWNrKCk7XG4gICAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICAgIGlmIChhbHBoYSA8IGFscGhhTWluKSB7XG4gICAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcblxuICAgICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgICAgZm9yY2VzLmVhY2goZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgICAgZm9yY2UoYWxwaGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgICBpZiAobm9kZS5meSA9PSBudWxsKSBub2RlLnkgKz0gbm9kZS52eSAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVOb2RlcygpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS5pbmRleCA9IGk7XG4gICAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICAgIG5vZGUueCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmFOKG5vZGUudngpIHx8IGlzTmFOKG5vZGUudnkpKSB7XG4gICAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgICBpZiAoZm9yY2UuaW5pdGlhbGl6ZSkgZm9yY2UuaW5pdGlhbGl6ZShub2Rlcyk7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZU5vZGVzKCk7XG5cbiAgICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICAgIHRpY2s6IHRpY2ssXG5cbiAgICAgIHJlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgICAgfSxcblxuICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICAgIH0sXG5cbiAgICAgIG5vZGVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgICB9LFxuXG4gICAgICBhbHBoYTogZnVuY3Rpb24oXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgICAgfSxcblxuICAgICAgYWxwaGFNaW46IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICAgIH0sXG5cbiAgICAgIGFscGhhRGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgICAgfSxcblxuICAgICAgYWxwaGFUYXJnZXQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICAgIH0sXG5cbiAgICAgIHZlbG9jaXR5RGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgICAgfSxcblxuICAgICAgZm9yY2U6IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgICAgfSxcblxuICAgICAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgICBkeCxcbiAgICAgICAgICAgIGR5LFxuICAgICAgICAgICAgZDIsXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICAgICAgICBlbHNlIHJhZGl1cyAqPSByYWRpdXM7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICBkeCA9IHggLSBub2RlLng7XG4gICAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSBjbG9zZXN0ID0gbm9kZSwgcmFkaXVzID0gZDI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xvc2VzdDtcbiAgICAgIH0sXG5cbiAgICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IChldmVudC5vbihuYW1lLCBfKSwgc2ltdWxhdGlvbikgOiBldmVudC5vbihuYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWFueUJvZHkoKSB7XG4gICAgdmFyIG5vZGVzLFxuICAgICAgICBub2RlLFxuICAgICAgICBhbHBoYSxcbiAgICAgICAgc3RyZW5ndGggPSBjb25zdGFudCQ2KC0zMCksXG4gICAgICAgIHN0cmVuZ3RocyxcbiAgICAgICAgZGlzdGFuY2VNaW4yID0gMSxcbiAgICAgICAgZGlzdGFuY2VNYXgyID0gSW5maW5pdHksXG4gICAgICAgIHRoZXRhMiA9IDAuODE7XG5cbiAgICBmdW5jdGlvbiBmb3JjZShfKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4JDIsIHkkMikudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcbiAgICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlbmd0aHNbaV0gPSArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICAgIHZhciBzdHJlbmd0aCA9IDAsIHEsIGMsIHgsIHksIGk7XG5cbiAgICAgIC8vIEZvciBpbnRlcm5hbCBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjaGlsZCBxdWFkcmFudHMuXG4gICAgICBpZiAocXVhZC5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh4ID0geSA9IGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgICAgaWYgKChxID0gcXVhZFtpXSkgJiYgKGMgPSBxLnZhbHVlKSkge1xuICAgICAgICAgICAgc3RyZW5ndGggKz0gYywgeCArPSBjICogcS54LCB5ICs9IGMgKiBxLnk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1YWQueCA9IHggLyBzdHJlbmd0aDtcbiAgICAgICAgcXVhZC55ID0geSAvIHN0cmVuZ3RoO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3IgbGVhZiBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjb2luY2lkZW50IHF1YWRyYW50cy5cbiAgICAgIGVsc2Uge1xuICAgICAgICBxID0gcXVhZDtcbiAgICAgICAgcS54ID0gcS5kYXRhLng7XG4gICAgICAgIHEueSA9IHEuZGF0YS55O1xuICAgICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgICAgd2hpbGUgKHEgPSBxLm5leHQpO1xuICAgICAgfVxuXG4gICAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgICB2YXIgeCA9IHF1YWQueCAtIG5vZGUueCxcbiAgICAgICAgICB5ID0gcXVhZC55IC0gbm9kZS55LFxuICAgICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuXG4gICAgICAvLyBBcHBseSB0aGUgQmFybmVzLUh1dCBhcHByb3hpbWF0aW9uIGlmIHBvc3NpYmxlLlxuICAgICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgICBpZiAodyAqIHcgLyB0aGV0YTIgPCBsKSB7XG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNYXgyKSB7XG4gICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgICAgbm9kZS52eSArPSB5ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIHBvaW50cyBkaXJlY3RseS5cbiAgICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgICAgaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSB8fCBxdWFkLm5leHQpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICB9XG5cbiAgICAgIGRvIGlmIChxdWFkLmRhdGEgIT09IG5vZGUpIHtcbiAgICAgICAgdyA9IHN0cmVuZ3Roc1txdWFkLmRhdGEuaW5kZXhdICogYWxwaGEgLyBsO1xuICAgICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgICBub2RlLnZ5ICs9IHkgKiB3O1xuICAgICAgfSB3aGlsZSAocXVhZCA9IHF1YWQubmV4dCk7XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIG5vZGVzID0gXztcbiAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNaW4yID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1pbjIpO1xuICAgIH07XG5cbiAgICBmb3JjZS5kaXN0YW5jZU1heCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWF4MiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNYXgyKTtcbiAgICB9O1xuXG4gICAgZm9yY2UudGhldGEgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHgkMyh4KSB7XG4gICAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQkNigwLjEpLFxuICAgICAgICBub2RlcyxcbiAgICAgICAgc3RyZW5ndGhzLFxuICAgICAgICB4ejtcblxuICAgIGlmICh0eXBlb2YgeCAhPT0gXCJmdW5jdGlvblwiKSB4ID0gY29uc3RhbnQkNih4ID09IG51bGwgPyAwIDogK3gpO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS52eCArPSAoeHpbaV0gLSBub2RlLngpICogc3RyZW5ndGhzW2ldICogYWxwaGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgICAgeHogPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHh6W2ldID0gK3gobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIG5vZGVzID0gXztcbiAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB4O1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBmdW5jdGlvbiB5JDMoeSkge1xuICAgIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50JDYoMC4xKSxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIHN0cmVuZ3RocyxcbiAgICAgICAgeXo7XG5cbiAgICBpZiAodHlwZW9mIHkgIT09IFwiZnVuY3Rpb25cIikgeSA9IGNvbnN0YW50JDYoeSA9PSBudWxsID8gMCA6ICt5KTtcblxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnkgKz0gKHl6W2ldIC0gbm9kZS55KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICAgIHl6ID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih5eltpXSA9ICt5KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBub2RlcyA9IF87XG4gICAgICBpbml0aWFsaXplKCk7XG4gICAgfTtcblxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ldmVudCgpIHtcbiAgICBleHBvcnRzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWdEaXNhYmxlKHZpZXcpIHtcbiAgICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhZ0VuYWJsZSh2aWV3LCBub2NsaWNrKSB7XG4gICAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gICAgaWYgKG5vY2xpY2spIHtcbiAgICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgICB9XG4gICAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkNyh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgdGhpcy5pZGVudGlmaWVyID0gaWQ7XG4gICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMuZHggPSBkeDtcbiAgICB0aGlzLmR5ID0gZHk7XG4gICAgdGhpcy5fID0gZGlzcGF0Y2g7XG4gIH1cblxuICBEcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IHRoaXMuXyA/IHRoaXMgOiB2YWx1ZTtcbiAgfTtcblxuICAvLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbiAgZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgICByZXR1cm4gIWV4cG9ydHMuZXZlbnQuYnV0dG9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdENvbnRhaW5lcigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN1YmplY3QoZCkge1xuICAgIHJldHVybiBkID09IG51bGwgPyB7eDogZXhwb3J0cy5ldmVudC54LCB5OiBleHBvcnRzLmV2ZW50Lnl9IDogZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWcoKSB7XG4gICAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgICB0b3VjaGVuZGluZztcblxuICAgIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XG4gICAgICBzZWxlY3Rpb25cbiAgICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAgIC5vbihcInRvdWNobW92ZS5kcmFnXCIsIHRvdWNobW92ZWQpXG4gICAgICAgICAgLm9uKFwidG91Y2hlbmQuZHJhZyB0b3VjaGNhbmNlbC5kcmFnXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcbiAgICAgIHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW91c2Vtb3ZpbmcgPSB0cnVlO1xuICAgICAgZ2VzdHVyZXMubW91c2UoXCJkcmFnXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgICBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcbiAgICAgIGRyYWdFbmFibGUoZXhwb3J0cy5ldmVudC52aWV3LCBtb3VzZW1vdmluZyk7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBnZXN0dXJlcy5tb3VzZShcImVuZFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgICB2YXIgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgYyA9IGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRvdWNoZXNbaV0uaWRlbnRpZmllciwgYywgdG91Y2gsIHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICAgIHZhciB0b3VjaGVzID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgbm9ldmVudCgpO1xuICAgICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICAgIHZhciB0b3VjaGVzID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQoaWQsIGNvbnRhaW5lciwgcG9pbnQsIHRoYXQsIGFyZ3MpIHtcbiAgICAgIHZhciBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIHMsIGR4LCBkeSxcbiAgICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgICBpZiAoIWN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgXCJiZWZvcmVzdGFydFwiLCBzLCBpZCwgYWN0aXZlLCBwWzBdLCBwWzFdLCAwLCAwLCBzdWJsaXN0ZW5lcnMpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKChleHBvcnRzLmV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkeCA9IHMueCAtIHBbMF0gfHwgMDtcbiAgICAgICAgZHkgPSBzLnkgLSBwWzFdIHx8IDA7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSkpIHJldHVybjtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGdlc3R1cmUodHlwZSkge1xuICAgICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwic3RhcnRcIjogZ2VzdHVyZXNbaWRdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgICAgY2FzZSBcImRyYWdcIjogcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNyghIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgICB9O1xuXG4gICAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDcoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICAgIH07XG5cbiAgICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gICAgfTtcblxuICAgIGRyYWcub24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGRyYWcgOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRyYWc7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQ4KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24geCQ0KGQpIHtcbiAgICByZXR1cm4gZFswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHkkNChkKSB7XG4gICAgcmV0dXJuIGRbMV07XG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja1RyZWUoKSB7XG4gICAgdGhpcy5fID0gbnVsbDsgLy8gcm9vdCBub2RlXG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICAgIG5vZGUuVSA9IC8vIHBhcmVudCBub2RlXG4gICAgbm9kZS5DID0gLy8gY29sb3IgLSB0cnVlIGZvciByZWQsIGZhbHNlIGZvciBibGFja1xuICAgIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICAgIG5vZGUuUiA9IC8vIHJpZ2h0IG5vZGVcbiAgICBub2RlLlAgPSAvLyBwcmV2aW91cyBub2RlXG4gICAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG4gIH1cblxuICBSZWRCbGFja1RyZWUucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgICB2YXIgcGFyZW50LCBncmFuZHBhLCB1bmNsZTtcblxuICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xuICAgICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICAgIGlmIChhZnRlci5SKSB7XG4gICAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgICBhZnRlciA9IFJlZEJsYWNrRmlyc3QodGhpcy5fKTtcbiAgICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuICAgICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgICBwYXJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIG5vZGUuQyA9IHRydWU7XG5cbiAgICAgIGFmdGVyID0gbm9kZTtcbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgICAgZ3JhbmRwYSA9IHBhcmVudC5VO1xuICAgICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLkw7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICB9XG4gICAgICB0aGlzLl8uQyA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLk4pIG5vZGUuTi5QID0gbm9kZS5QO1xuICAgICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5VLFxuICAgICAgICAgIHNpYmxpbmcsXG4gICAgICAgICAgbGVmdCA9IG5vZGUuTCxcbiAgICAgICAgICByaWdodCA9IG5vZGUuUixcbiAgICAgICAgICBuZXh0LFxuICAgICAgICAgIHJlZDtcblxuICAgICAgaWYgKCFsZWZ0KSBuZXh0ID0gcmlnaHQ7XG4gICAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcbiAgICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICAgIG5leHQuTCA9IGxlZnQ7XG4gICAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcbiAgICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG4gICAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkID0gbm9kZS5DO1xuICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUpIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIGlmIChyZWQpIHJldHVybjtcbiAgICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5SIHx8ICFzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgICBpZiAobm9kZSkgbm9kZS5DID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlTGVmdCh0cmVlLCBub2RlKSB7XG4gICAgdmFyIHAgPSBub2RlLFxuICAgICAgICBxID0gbm9kZS5SLFxuICAgICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlLl8gPSBxO1xuICAgIH1cblxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuUiA9IHEuTDtcbiAgICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gICAgcS5MID0gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICAgIHZhciBwID0gbm9kZSxcbiAgICAgICAgcSA9IG5vZGUuTCxcbiAgICAgICAgcGFyZW50ID0gcC5VO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZS5fID0gcTtcbiAgICB9XG5cbiAgICBxLlUgPSBwYXJlbnQ7XG4gICAgcC5VID0gcTtcbiAgICBwLkwgPSBxLlI7XG4gICAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICAgIHEuUiA9IHA7XG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgICB3aGlsZSAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWRnZShsZWZ0LCByaWdodCwgdjAsIHYxKSB7XG4gICAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICAgIGluZGV4ID0gZWRnZXMucHVzaChlZGdlKSAtIDE7XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gICAgaWYgKHYwKSBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2MCk7XG4gICAgaWYgKHYxKSBzZXRFZGdlRW5kKGVkZ2UsIHJpZ2h0LCBsZWZ0LCB2MSk7XG4gICAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICAgIGNlbGxzW3JpZ2h0LmluZGV4XS5oYWxmZWRnZXMucHVzaChpbmRleCk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCb3JkZXJFZGdlKGxlZnQsIHYwLCB2MSkge1xuICAgIHZhciBlZGdlID0gW3YwLCB2MV07XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICAgIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xuICAgICAgZWRnZVswXSA9IHZlcnRleDtcbiAgICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfSBlbHNlIGlmIChlZGdlLmxlZnQgPT09IHJpZ2h0KSB7XG4gICAgICBlZGdlWzFdID0gdmVydGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIH1cbiAgfVxuXG4gIC8vIExpYW5n4oCTQmFyc2t5IGxpbmUgY2xpcHBpbmcuXG4gIGZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIGEgPSBlZGdlWzBdLFxuICAgICAgICBiID0gZWRnZVsxXSxcbiAgICAgICAgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICB0MCA9IDAsXG4gICAgICAgIHQxID0gMSxcbiAgICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICAgIHI7XG5cbiAgICByID0geDAgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geDEgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICByID0geTAgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geTEgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xuXG4gICAgaWYgKHQwID4gMCkgZWRnZVswXSA9IFtheCArIHQwICogZHgsIGF5ICsgdDAgKiBkeV07XG4gICAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciB2MSA9IGVkZ2VbMV07XG4gICAgaWYgKHYxKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXG4gICAgICAgIHJpZ2h0ID0gZWRnZS5yaWdodCxcbiAgICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgICBseSA9IGxlZnRbMV0sXG4gICAgICAgIHJ4ID0gcmlnaHRbMF0sXG4gICAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcbiAgICAgICAgZnkgPSAobHkgKyByeSkgLyAyLFxuICAgICAgICBmbSxcbiAgICAgICAgZmI7XG5cbiAgICBpZiAocnkgPT09IGx5KSB7XG4gICAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkwXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbZngsIHkxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgdjEgPSBbZngsIHkwXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm0gPSAobHggLSByeCkgLyAocnkgLSBseSk7XG4gICAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuICAgICAgICBpZiAobHggPiByeCkge1xuICAgICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgICB2MSA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdjApIHYwID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICAgICAgZWxzZSBpZiAodjBbMV0gPCB5MCkgcmV0dXJuO1xuICAgICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgICAgZWxzZSBpZiAodjBbMF0gPj0geDEpIHJldHVybjtcbiAgICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXYwKSB2MCA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgICAgdjEgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBlZGdlWzBdID0gdjA7XG4gICAgZWRnZVsxXSA9IHYxO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIGkgPSBlZGdlcy5sZW5ndGgsXG4gICAgICAgIGVkZ2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoIWNvbm5lY3RFZGdlKGVkZ2UgPSBlZGdlc1tpXSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgICAgfHwgIWNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvbiQzXG4gICAgICAgICAgICAgIHx8IE1hdGguYWJzKGVkZ2VbMF1bMV0gLSBlZGdlWzFdWzFdKSA+IGVwc2lsb24kMykpIHtcbiAgICAgICAgZGVsZXRlIGVkZ2VzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICAgIHJldHVybiBjZWxsc1tzaXRlLmluZGV4XSA9IHtcbiAgICAgIHNpdGU6IHNpdGUsXG4gICAgICBoYWxmZWRnZXM6IFtdXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgdmEgPSBlZGdlLmxlZnQsXG4gICAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgICBpZiAoc2l0ZSA9PT0gdmIpIHZiID0gdmEsIHZhID0gc2l0ZTtcbiAgICBpZiAodmIpIHJldHVybiBNYXRoLmF0YW4yKHZiWzFdIC0gdmFbMV0sIHZiWzBdIC0gdmFbMF0pO1xuICAgIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gICAgZWxzZSB2YSA9IGVkZ2VbMF0sIHZiID0gZWRnZVsxXTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMih2YVswXSAtIHZiWzBdLCB2YlsxXSAtIHZhWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2UpIHtcbiAgICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG4gIH1cblxuICBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICAgIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ID09PSBjZWxsLnNpdGUpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnRDZWxsSGFsZmVkZ2VzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBoYWxmZWRnZXMsIGosIG07IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaW5kZXggPSBuZXcgQXJyYXkobSksXG4gICAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShtKTtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgICBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIGFycmF5W2pdIC0gYXJyYXlbaV07IH0pO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBhcnJheVtqXSA9IGhhbGZlZGdlc1tpbmRleFtqXV07XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBuQ2VsbHMgPSBjZWxscy5sZW5ndGgsXG4gICAgICAgIGlDZWxsLFxuICAgICAgICBjZWxsLFxuICAgICAgICBzaXRlLFxuICAgICAgICBpSGFsZmVkZ2UsXG4gICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgbkhhbGZlZGdlcyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHN0YXJ0WCxcbiAgICAgICAgc3RhcnRZLFxuICAgICAgICBlbmQsXG4gICAgICAgIGVuZFgsXG4gICAgICAgIGVuZFksXG4gICAgICAgIGNvdmVyID0gdHJ1ZTtcblxuICAgIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXM7XG4gICAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFueSBkYW5nbGluZyBjbGlwcGVkIGVkZ2VzLlxuICAgICAgICB3aGlsZSAoaUhhbGZlZGdlLS0pIHtcbiAgICAgICAgICBpZiAoIWVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSkge1xuICAgICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc2VydCBhbnkgYm9yZGVyIGVkZ2VzIGFzIG5lY2Vzc2FyeS5cbiAgICAgICAgaUhhbGZlZGdlID0gMCwgbkhhbGZlZGdlcyA9IGhhbGZlZGdlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpSGFsZmVkZ2UgPCBuSGFsZmVkZ2VzKSB7XG4gICAgICAgICAgZW5kID0gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSksIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XG4gICAgICAgICAgc3RhcnQgPSBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1toYWxmZWRnZXNbKytpSGFsZmVkZ2UgJSBuSGFsZmVkZ2VzXV0pLCBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgICAgICAgaWYgKE1hdGguYWJzKGVuZFggLSBzdGFydFgpID4gZXBzaWxvbiQzIHx8IE1hdGguYWJzKGVuZFkgLSBzdGFydFkpID4gZXBzaWxvbiQzKSB7XG4gICAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhlbmRYIC0geDApIDwgZXBzaWxvbiQzICYmIHkxIC0gZW5kWSA+IGVwc2lsb24kMyA/IFt4MCwgTWF0aC5hYnMoc3RhcnRYIC0geDApIDwgZXBzaWxvbiQzID8gc3RhcnRZIDogeTFdXG4gICAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTEpIDwgZXBzaWxvbiQzICYmIHgxIC0gZW5kWCA+IGVwc2lsb24kMyA/IFtNYXRoLmFicyhzdGFydFkgLSB5MSkgPCBlcHNpbG9uJDMgPyBzdGFydFggOiB4MSwgeTFdXG4gICAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiQzICYmIGVuZFkgLSB5MCA+IGVwc2lsb24kMyA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiQzID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTApIDwgZXBzaWxvbiQzICYmIGVuZFggLSB4MCA+IGVwc2lsb24kMyA/IFtNYXRoLmFicyhzdGFydFkgLSB5MCkgPCBlcHNpbG9uJDMgPyBzdGFydFggOiB4MCwgeTBdXG4gICAgICAgICAgICAgICAgOiBudWxsKSkgLSAxKTtcbiAgICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgICAvLyBJdCBkb2VzbuKAmXQgbWF0dGVyIHdoaWNoIGNvcm5lciBvZiB0aGUgZXh0ZW50IHdlIG1lYXN1cmUhXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgICAgZm9yIChpQ2VsbCA9IDAsIGNvdmVyID0gbnVsbDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICAgIGR4ID0gc2l0ZVswXSAtIHgwO1xuICAgICAgICAgIGR5ID0gc2l0ZVsxXSAtIHkwO1xuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGQyIDwgZGMpIGRjID0gZDIsIGNvdmVyID0gY2VsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY292ZXIpIHtcbiAgICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLCB2MDEgPSBbeDAsIHkxXSwgdjExID0gW3gxLCB5MV0sIHYxMCA9IFt4MSwgeTBdO1xuICAgICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSA9IGNvdmVyLnNpdGUsIHYwMCwgdjAxKSkgLSAxLFxuICAgICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MDEsIHYxMSkpIC0gMSxcbiAgICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMCwgdjAwKSkgLSAxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGFzdGx5IGRlbGV0ZSBhbnkgY2VsbHMgd2l0aCBubyBlZGdlczsgdGhlc2Ugd2VyZSBlbnRpcmVseSBjbGlwcGVkLlxuICAgIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgaWYgKCFjZWxsLmhhbGZlZGdlcy5sZW5ndGgpIHtcbiAgICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGNpcmNsZVBvb2wgPSBbXTtcblxuICB2YXIgZmlyc3RDaXJjbGU7XG5cbiAgZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLnggPVxuICAgIHRoaXMueSA9XG4gICAgdGhpcy5hcmMgPVxuICAgIHRoaXMuc2l0ZSA9XG4gICAgdGhpcy5jeSA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgICAgckFyYyA9IGFyYy5OO1xuXG4gICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICAgIGNTaXRlID0gYXJjLnNpdGUsXG4gICAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gICAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gICAgdmFyIGJ4ID0gY1NpdGVbMF0sXG4gICAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgICAgYXkgPSBsU2l0ZVsxXSAtIGJ5LFxuICAgICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICAgIHZhciBkID0gMiAqIChheCAqIGN5IC0gYXkgKiBjeCk7XG4gICAgaWYgKGQgPj0gLWVwc2lsb24yJDEpIHJldHVybjtcblxuICAgIHZhciBoYSA9IGF4ICogYXggKyBheSAqIGF5LFxuICAgICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICAgIHkgPSAoYXggKiBoYyAtIGN4ICogaGEpIC8gZDtcblxuICAgIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGU7XG4gICAgY2lyY2xlLmFyYyA9IGFyYztcbiAgICBjaXJjbGUuc2l0ZSA9IGNTaXRlO1xuICAgIGNpcmNsZS54ID0geCArIGJ4O1xuICAgIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgICBhcmMuY2lyY2xlID0gY2lyY2xlO1xuXG4gICAgdmFyIGJlZm9yZSA9IG51bGwsXG4gICAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IChjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkpIHtcbiAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgICAgZWxzZSB7IGJlZm9yZSA9IG5vZGUuUDsgYnJlYWs7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlOyBicmVhazsgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgICBpZiAoIWJlZm9yZSkgZmlyc3RDaXJjbGUgPSBjaXJjbGU7XG4gIH1cblxuICBmdW5jdGlvbiBkZXRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gICAgaWYgKGNpcmNsZSkge1xuICAgICAgaWYgKCFjaXJjbGUuUCkgZmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgICBjaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcbiAgICAgIFJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJlYWNoUG9vbCA9IFtdO1xuXG4gIGZ1bmN0aW9uIEJlYWNoKCkge1xuICAgIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLmVkZ2UgPVxuICAgIHRoaXMuc2l0ZSA9XG4gICAgdGhpcy5jaXJjbGUgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICAgIHZhciBiZWFjaCA9IGJlYWNoUG9vbC5wb3AoKSB8fCBuZXcgQmVhY2g7XG4gICAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gICAgcmV0dXJuIGJlYWNoO1xuICB9XG5cbiAgZnVuY3Rpb24gZGV0YWNoQmVhY2goYmVhY2gpIHtcbiAgICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICAgIGJlYWNoZXMucmVtb3ZlKGJlYWNoKTtcbiAgICBiZWFjaFBvb2wucHVzaChiZWFjaCk7XG4gICAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gICAgdmFyIGNpcmNsZSA9IGJlYWNoLmNpcmNsZSxcbiAgICAgICAgeCA9IGNpcmNsZS54LFxuICAgICAgICB5ID0gY2lyY2xlLmN5LFxuICAgICAgICB2ZXJ0ZXggPSBbeCwgeV0sXG4gICAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcbiAgICAgICAgbmV4dCA9IGJlYWNoLk4sXG4gICAgICAgIGRpc2FwcGVhcmluZyA9IFtiZWFjaF07XG5cbiAgICBkZXRhY2hCZWFjaChiZWFjaCk7XG5cbiAgICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICAgIHdoaWxlIChsQXJjLmNpcmNsZVxuICAgICAgICAmJiBNYXRoLmFicyh4IC0gbEFyYy5jaXJjbGUueCkgPCBlcHNpbG9uJDNcbiAgICAgICAgJiYgTWF0aC5hYnMoeSAtIGxBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24kMykge1xuICAgICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICAgIGRldGFjaEJlYWNoKGxBcmMpO1xuICAgICAgbEFyYyA9IHByZXZpb3VzO1xuICAgIH1cblxuICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgIGRldGFjaENpcmNsZShsQXJjKTtcblxuICAgIHZhciByQXJjID0gbmV4dDtcbiAgICB3aGlsZSAockFyYy5jaXJjbGVcbiAgICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQzXG4gICAgICAgICYmIE1hdGguYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uJDMpIHtcbiAgICAgIG5leHQgPSByQXJjLk47XG4gICAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICAgIGRldGFjaEJlYWNoKHJBcmMpO1xuICAgICAgckFyYyA9IG5leHQ7XG4gICAgfVxuXG4gICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gICAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgICAgaUFyYztcbiAgICBmb3IgKGlBcmMgPSAxOyBpQXJjIDwgbkFyY3M7ICsraUFyYykge1xuICAgICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xuICAgICAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxBcmMuc2l0ZSwgckFyYy5zaXRlLCB2ZXJ0ZXgpO1xuICAgIH1cblxuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tuQXJjcyAtIDFdO1xuICAgIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQmVhY2goc2l0ZSkge1xuICAgIHZhciB4ID0gc2l0ZVswXSxcbiAgICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgICAgbEFyYyxcbiAgICAgICAgckFyYyxcbiAgICAgICAgZHhsLFxuICAgICAgICBkeHIsXG4gICAgICAgIG5vZGUgPSBiZWFjaGVzLl87XG5cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgZHhsID0gbGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG4gICAgICBpZiAoZHhsID4gZXBzaWxvbiQzKSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgICAgZHhyID0geCAtIHJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgICBpZiAoZHhyID4gZXBzaWxvbiQzKSB7XG4gICAgICAgICAgaWYgKCFub2RlLlIpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGR4bCA+IC1lcHNpbG9uJDMpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgICByQXJjID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC1lcHNpbG9uJDMpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUNlbGwoc2l0ZSk7XG4gICAgdmFyIG5ld0FyYyA9IGNyZWF0ZUJlYWNoKHNpdGUpO1xuICAgIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcblxuICAgIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgICByQXJjID0gY3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICAgIGJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFyQXJjKSB7IC8vICYmIGxBcmNcbiAgICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBlbHNlIGxBcmMgIT09IHJBcmNcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgICBheCA9IGxTaXRlWzBdLFxuICAgICAgICBheSA9IGxTaXRlWzFdLFxuICAgICAgICBieCA9IHNpdGVbMF0gLSBheCxcbiAgICAgICAgYnkgPSBzaXRlWzFdIC0gYXksXG4gICAgICAgIHJTaXRlID0gckFyYy5zaXRlLFxuICAgICAgICBjeCA9IHJTaXRlWzBdIC0gYXgsXG4gICAgICAgIGN5ID0gclNpdGVbMV0gLSBheSxcbiAgICAgICAgZCA9IDIgKiAoYnggKiBjeSAtIGJ5ICogY3gpLFxuICAgICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgICB2ZXJ0ZXggPSBbKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCwgKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheV07XG5cbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsU2l0ZSwgc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICAgIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gIH1cblxuICBmdW5jdGlvbiBsZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGUsXG4gICAgICAgIHJmb2N4ID0gc2l0ZVswXSxcbiAgICAgICAgcmZvY3kgPSBzaXRlWzFdLFxuICAgICAgICBwYnkyID0gcmZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcblxuICAgIHZhciBsQXJjID0gYXJjLlA7XG4gICAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuXG4gICAgc2l0ZSA9IGxBcmMuc2l0ZTtcbiAgICB2YXIgbGZvY3ggPSBzaXRlWzBdLFxuICAgICAgICBsZm9jeSA9IHNpdGVbMV0sXG4gICAgICAgIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cbiAgICB2YXIgaGwgPSBsZm9jeCAtIHJmb2N4LFxuICAgICAgICBhYnkyID0gMSAvIHBieTIgLSAxIC8gcGxieTIsXG4gICAgICAgIGIgPSBobCAvIHBsYnkyO1xuXG4gICAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICogcGxieTIpIC0gbGZvY3kgKyBwbGJ5MiAvIDIgKyByZm9jeSAtIHBieTIgLyAyKSkpIC8gYWJ5MiArIHJmb2N4O1xuXG4gICAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiByaWdodEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgICB2YXIgckFyYyA9IGFyYy5OO1xuICAgIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcbiAgICB2YXIgc2l0ZSA9IGFyYy5zaXRlO1xuICAgIHJldHVybiBzaXRlWzFdID09PSBkaXJlY3RyaXggPyBzaXRlWzBdIDogSW5maW5pdHk7XG4gIH1cblxuICB2YXIgZXBzaWxvbiQzID0gMWUtNjtcbiAgdmFyIGVwc2lsb24yJDEgPSAxZS0xMjtcbiAgdmFyIGJlYWNoZXM7XG4gIHZhciBjZWxscztcbiAgdmFyIGNpcmNsZXM7XG4gIHZhciBlZGdlcztcblxuICBmdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICAgIHJldHVybiAoYVswXSAtIGNbMF0pICogKGJbMV0gLSBhWzFdKSAtIChhWzBdIC0gYlswXSkgKiAoY1sxXSAtIGFbMV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gICAgcmV0dXJuIGJbMV0gLSBhWzFdXG4gICAgICAgIHx8IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gRGlhZ3JhbShzaXRlcywgZXh0ZW50KSB7XG4gICAgdmFyIHNpdGUgPSBzaXRlcy5zb3J0KGxleGljb2dyYXBoaWMpLnBvcCgpLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBjaXJjbGU7XG5cbiAgICBlZGdlcyA9IFtdO1xuICAgIGNlbGxzID0gbmV3IEFycmF5KHNpdGVzLmxlbmd0aCk7XG4gICAgYmVhY2hlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG4gICAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY2lyY2xlID0gZmlyc3RDaXJjbGU7XG4gICAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICAgIGlmIChzaXRlWzBdICE9PSB4IHx8IHNpdGVbMV0gIT09IHkpIHtcbiAgICAgICAgICBhZGRCZWFjaChzaXRlKTtcbiAgICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICAgIH1cbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgICAgcmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gICAgaWYgKGV4dGVudCkge1xuICAgICAgdmFyIHgwID0gK2V4dGVudFswXVswXSxcbiAgICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgICAgeDEgPSArZXh0ZW50WzFdWzBdLFxuICAgICAgICAgIHkxID0gK2V4dGVudFsxXVsxXTtcbiAgICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgICBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cblxuICAgIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgICB0aGlzLmNlbGxzID0gY2VsbHM7XG5cbiAgICBiZWFjaGVzID1cbiAgICBjaXJjbGVzID1cbiAgICBlZGdlcyA9XG4gICAgY2VsbHMgPSBudWxsO1xuICB9XG5cbiAgRGlhZ3JhbS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IERpYWdyYW0sXG5cbiAgICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgICByZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgICBwb2x5Z29uLmRhdGEgPSBjZWxsLnNpdGUuZGF0YTtcbiAgICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgdHJpYW5nbGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgICBlZGdlcyA9IHRoaXMuZWRnZXM7XG5cbiAgICAgIHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMsXG4gICAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgICBtID0gaGFsZmVkZ2VzLmxlbmd0aCxcbiAgICAgICAgICAgIHMwLFxuICAgICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbbSAtIDFdXSxcbiAgICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcbiAgICAgICAgICBpZiAoaSA8IHMwLmluZGV4ICYmIGkgPCBzMS5pbmRleCAmJiB0cmlhbmdsZUFyZWEoc2l0ZSwgczAsIHMxKSA8IDApIHtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdHJpYW5nbGVzO1xuICAgIH0sXG5cbiAgICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4gZWRnZS5yaWdodDtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBlZGdlLmxlZnQuZGF0YSxcbiAgICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdm9yb25vaSgpIHtcbiAgICB2YXIgeCA9IHgkNCxcbiAgICAgICAgeSA9IHkkNCxcbiAgICAgICAgZXh0ZW50ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHZvcm9ub2koZGF0YSkge1xuICAgICAgcmV0dXJuIG5ldyBEaWFncmFtKGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgdmFyIHMgPSBbTWF0aC5yb3VuZCh4KGQsIGksIGRhdGEpIC8gZXBzaWxvbiQzKSAqIGVwc2lsb24kMywgTWF0aC5yb3VuZCh5KGQsIGksIGRhdGEpIC8gZXBzaWxvbiQzKSAqIGVwc2lsb24kM107XG4gICAgICAgIHMuaW5kZXggPSBpO1xuICAgICAgICBzLmRhdGEgPSBkO1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH0pLCBleHRlbnQpO1xuICAgIH1cblxuICAgIHZvcm9ub2kucG9seWdvbnMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gdm9yb25vaShkYXRhKS5wb2x5Z29ucygpO1xuICAgIH07XG5cbiAgICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHZvcm9ub2koZGF0YSkubGlua3MoKTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS50cmlhbmdsZXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gdm9yb25vaShkYXRhKS50cmlhbmdsZXMoKTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkOCgrXyksIHZvcm9ub2kpIDogeDtcbiAgICB9O1xuXG4gICAgdm9yb25vaS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkOCgrXyksIHZvcm9ub2kpIDogeTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtbZXh0ZW50WzBdWzBdLCBleHRlbnRbMF1bMV1dLCBbZXh0ZW50WzFdWzBdLCBleHRlbnRbMV1bMV1dXTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbMCwgMF0sIFsrX1swXSwgK19bMV1dXSwgdm9yb25vaSkgOiBleHRlbnQgJiYgW2V4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHZvcm9ub2k7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQ5KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gWm9vbUV2ZW50KHRhcmdldCwgdHlwZSwgdHJhbnNmb3JtKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gICAgdGhpcy5rID0gaztcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBUcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gICAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICAgIH0sXG4gICAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gICAgfSxcbiAgICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICAgIH0sXG4gICAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgICB9LFxuICAgIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gICAgfSxcbiAgICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICAgIH0sXG4gICAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgICB9LFxuICAgIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgICB9LFxuICAgIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpZGVudGl0eSQ2ID0gbmV3IFRyYW5zZm9ybSgxLCAwLCAwKTtcblxuICB0cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICAgIHJldHVybiBub2RlLl9fem9vbSB8fCBpZGVudGl0eSQ2O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbiQxKCkge1xuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBmdW5jdGlvbiBub2V2ZW50JDEoKSB7XG4gICAgZXhwb3J0cy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICAvLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbiAgZnVuY3Rpb24gZGVmYXVsdEZpbHRlciQxKCkge1xuICAgIHJldHVybiAhZXhwb3J0cy5ldmVudC5idXR0b247XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICAgIHZhciBlID0gdGhpcywgdywgaDtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgICAgdyA9IGUud2lkdGguYmFzZVZhbC52YWx1ZTtcbiAgICAgIGggPSBlLmhlaWdodC5iYXNlVmFsLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB3ID0gZS5jbGllbnRXaWR0aDtcbiAgICAgIGggPSBlLmNsaWVudEhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIFtbMCwgMF0sIFt3LCBoXV07XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLl9fem9vbSB8fCBpZGVudGl0eSQ2O1xuICB9XG5cbiAgZnVuY3Rpb24gem9vbSgpIHtcbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlciQxLFxuICAgICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgICBrMCA9IDAsXG4gICAgICAgIGsxID0gSW5maW5pdHksXG4gICAgICAgIHgwID0gLWsxLFxuICAgICAgICB4MSA9IGsxLFxuICAgICAgICB5MCA9IHgwLFxuICAgICAgICB5MSA9IHgxLFxuICAgICAgICBkdXJhdGlvbiA9IDI1MCxcbiAgICAgICAgZ2VzdHVyZXMgPSBbXSxcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcInpvb21cIiwgXCJlbmRcIiksXG4gICAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgICB0b3VjaERlbGF5ID0gNTAwLFxuICAgICAgICB3aGVlbERlbGF5ID0gMTUwO1xuXG4gICAgZnVuY3Rpb24gem9vbShzZWxlY3Rpb24pIHtcbiAgICAgIHNlbGVjdGlvblxuICAgICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZClcbiAgICAgICAgICAub24oXCJtb3VzZWRvd24uem9vbVwiLCBtb3VzZWRvd25lZClcbiAgICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpXG4gICAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgICAub24oXCJ0b3VjaG1vdmUuem9vbVwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLnpvb20gdG91Y2hjYW5jZWwuem9vbVwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIilcbiAgICAgICAgICAucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSk7XG4gICAgfVxuXG4gICAgem9vbS50cmFuc2Zvcm0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCB0cmFuc2Zvcm0pIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgICAgc2VsZWN0aW9uLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgICAgaWYgKGNvbGxlY3Rpb24gIT09IHNlbGVjdGlvbikge1xuICAgICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0aW9uLmludGVycnVwdCgpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgICAgIC56b29tKG51bGwsIHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdHJhbnNmb3JtKVxuICAgICAgICAgICAgICAuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB6b29tLnNjYWxlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIGspIHtcbiAgICAgIHpvb20uc2NhbGVUbyhzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxuICAgICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgICAgcmV0dXJuIGswICogazE7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgem9vbS5zY2FsZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrKSB7XG4gICAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICAgIHAwID0gY2VudHJvaWQoZSksXG4gICAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgICByZXR1cm4gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB6b29tLnRyYW5zbGF0ZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5KSB7XG4gICAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeCxcbiAgICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8geS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeVxuICAgICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtLCBrKSB7XG4gICAgICBrID0gTWF0aC5tYXgoazAsIE1hdGgubWluKGsxLCBrKSk7XG4gICAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtLmsgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zZm9ybSwgcDAsIHAxKSB7XG4gICAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0uaywgeSA9IHAwWzFdIC0gcDFbMV0gKiB0cmFuc2Zvcm0uaztcbiAgICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0cmFpbih0cmFuc2Zvcm0sIGV4dGVudCkge1xuICAgICAgdmFyIGR4ID0gTWF0aC5taW4oMCwgdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHgwKSB8fCBNYXRoLm1heCgwLCB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMV1bMF0pIC0geDEpLFxuICAgICAgICAgIGR5ID0gTWF0aC5taW4oMCwgdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHkwKSB8fCBNYXRoLm1heCgwLCB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMV1bMV0pIC0geTEpO1xuICAgICAgcmV0dXJuIGR4IHx8IGR5ID8gdHJhbnNmb3JtLnRyYW5zbGF0ZShkeCwgZHkpIDogdHJhbnNmb3JtO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xuICAgICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlKHRyYW5zaXRpb24sIHRyYW5zZm9ybSwgY2VudGVyKSB7XG4gICAgICB0cmFuc2l0aW9uXG4gICAgICAgICAgLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0Lnpvb20gZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJ6b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgZyA9IGdlc3R1cmUodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgICAgZSA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgICBwID0gY2VudGVyIHx8IGNlbnRyb2lkKGUpLFxuICAgICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICAgIGEgPSB0aGF0Ll9fem9vbSxcbiAgICAgICAgICAgICAgICBiID0gdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoYXQsIGFyZ3MpIDogdHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZVpvb20oYS5pbnZlcnQocCkuY29uY2F0KHcgLyBhLmspLCBiLmludmVydChwKS5jb25jYXQodyAvIGIuaykpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgaWYgKHQgPT09IDEpIHQgPSBiOyAvLyBBdm9pZCByb3VuZGluZyBlcnJvciBvbiBlbmQuXG4gICAgICAgICAgICAgIGVsc2UgeyB2YXIgbCA9IGkodCksIGsgPSB3IC8gbFsyXTsgdCA9IG5ldyBUcmFuc2Zvcm0oaywgcFswXSAtIGxbMF0gKiBrLCBwWzFdIC0gbFsxXSAqIGspOyB9XG4gICAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdlc3R1cmVzLmxlbmd0aCwgZzsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKGcgPSBnZXN0dXJlc1tpXSkudGhhdCA9PT0gdGhhdCkge1xuICAgICAgICAgIHJldHVybiBnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEdlc3R1cmUodGhhdCwgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH1cblxuICAgIEdlc3R1cmUucHJvdG90eXBlID0ge1xuICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuaW5kZXggPSBnZXN0dXJlcy5wdXNoKHRoaXMpIC0gMTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSkge1xuICAgICAgICBpZiAodGhpcy5tb3VzZSAmJiBrZXkgIT09IFwibW91c2VcIikgdGhpcy5tb3VzZVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy5tb3VzZVswXSk7XG4gICAgICAgIGlmICh0aGlzLnRvdWNoMCAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDBbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gwWzBdKTtcbiAgICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xuICAgICAgICB0aGlzLnRoYXQuX196b29tID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLmVtaXQoXCJ6b29tXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICAgIGdlc3R1cmVzLnNwbGljZSh0aGlzLmluZGV4LCAxKTtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgY3VzdG9tRXZlbnQobmV3IFpvb21FdmVudCh6b29tLCB0eXBlLCB0aGlzLnRoYXQuX196b29tKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB3aGVlbGVkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIGsgPSBNYXRoLm1heChrMCwgTWF0aC5taW4oazEsIHQuayAqIE1hdGgucG93KDIsIC1leHBvcnRzLmV2ZW50LmRlbHRhWSAqIChleHBvcnRzLmV2ZW50LmRlbHRhTW9kZSA/IDEyMCA6IDEpIC8gNTAwKSkpLFxuICAgICAgICAgIHAgPSBtb3VzZSh0aGlzKTtcblxuICAgICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgICAvLyBJZiB0aGVyZSB3ZXJlIHJlY2VudCB3aGVlbCBldmVudHMsIHJlc2V0IHRoZSB3aGVlbCBpZGxlIHRpbWVvdXQuXG4gICAgICBpZiAoZy53aGVlbCkge1xuICAgICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgICAgZy5tb3VzZVsxXSA9IHQuaW52ZXJ0KGcubW91c2VbMF0gPSBwKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29u4oCZdCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgY2FwdHVyZSB0aGUgbW91c2UgcG9pbnQgYW5kIGxvY2F0aW9uIGF0IHRoZSBzdGFydC5cbiAgICAgIGVsc2Uge1xuICAgICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcbiAgICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgICBnLnN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIG5vZXZlbnQkMSgpO1xuICAgICAgZy53aGVlbCA9IHNldFRpbWVvdXQod2hlZWxpZGxlZCwgd2hlZWxEZWxheSk7XG4gICAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQsIGspLCBnLm1vdXNlWzBdLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQpKTtcblxuICAgICAgZnVuY3Rpb24gd2hlZWxpZGxlZCgpIHtcbiAgICAgICAgZy53aGVlbCA9IG51bGw7XG4gICAgICAgIGcuZW5kKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB2ID0gc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuem9vbVwiLCBtb3VzZXVwcGVkLCB0cnVlKSxcbiAgICAgICAgICBwID0gbW91c2UodGhpcyk7XG5cbiAgICAgIGRyYWdEaXNhYmxlKGV4cG9ydHMuZXZlbnQudmlldyk7XG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcblxuICAgICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICAgICAgbm9ldmVudCQxKCk7XG4gICAgICAgIGcubW92ZWQgPSB0cnVlO1xuICAgICAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKGcudGhhdC5fX3pvb20sIGcubW91c2VbMF0gPSBtb3VzZShnLnRoYXQpLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICAgICAgdi5vbihcIm1vdXNlbW92ZS56b29tIG1vdXNldXAuem9vbVwiLCBudWxsKTtcbiAgICAgICAgZHJhZ0VuYWJsZShleHBvcnRzLmV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgICBub2V2ZW50JDEoKTtcbiAgICAgICAgZy5lbmQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYmxjbGlja2VkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0MC5rICogKGV4cG9ydHMuZXZlbnQuc2hpZnRLZXkgPyAwLjUgOiAyKSxcbiAgICAgICAgICB0MSA9IGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgICBub2V2ZW50JDEoKTtcbiAgICAgIGlmIChkdXJhdGlvbiA+IDApIHNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmNhbGwoc2NoZWR1bGUsIHQxLCBwMCk7XG4gICAgICBlbHNlIHNlbGVjdCh0aGlzKS5jYWxsKHpvb20udHJhbnNmb3JtLCB0MSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwO1xuXG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcbiAgICAgICAgaWYgKCFnLnRvdWNoMCkgZy50b3VjaDAgPSBwO1xuICAgICAgICBlbHNlIGlmICghZy50b3VjaDEpIGcudG91Y2gxID0gcDtcbiAgICAgIH1cbiAgICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB7XG4gICAgICAgIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgICAgIGlmICghZy50b3VjaDEpIHJldHVybiBnLmVuZCgpLCBkYmxjbGlja2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzLmxlbmd0aCA9PT0gbikge1xuICAgICAgICB0b3VjaHN0YXJ0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hzdGFydGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICAgIGcuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgICBub2V2ZW50JDEoKTtcbiAgICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMsIHQuaWRlbnRpZmllcik7XG4gICAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMFswXSA9IHA7XG4gICAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICAgIH1cbiAgICAgIHQgPSBnLnRoYXQuX196b29tO1xuICAgICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICAgIHZhciBwMCA9IGcudG91Y2gwWzBdLCBsMCA9IGcudG91Y2gwWzFdLFxuICAgICAgICAgICAgcDEgPSBnLnRvdWNoMVswXSwgbDEgPSBnLnRvdWNoMVsxXSxcbiAgICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgICBkbCA9IChkbCA9IGwxWzBdIC0gbDBbMF0pICogZGwgKyAoZGwgPSBsMVsxXSAtIGwwWzFdKSAqIGRsO1xuICAgICAgICB0ID0gc2NhbGUodCwgTWF0aC5zcXJ0KGRwIC8gZGwpKTtcbiAgICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgICAgbCA9IFsobDBbMF0gKyBsMVswXSkgLyAyLCAobDBbMV0gKyBsMVsxXSkgLyAyXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgZy56b29tKFwidG91Y2hcIiwgY29uc3RyYWluKHRyYW5zbGF0ZSh0LCBwLCBsKSwgZy5leHRlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0O1xuXG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdCA9IHRvdWNoZXNbaV07XG4gICAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDA7XG4gICAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICAgIH1cbiAgICAgIGlmIChnLnRvdWNoMSAmJiAhZy50b3VjaDApIGcudG91Y2gwID0gZy50b3VjaDEsIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICAgIGlmICghZy50b3VjaDApIGcuZW5kKCk7XG4gICAgfVxuXG4gICAgem9vbS5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDkoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gICAgfTtcblxuICAgIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ5KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgem9vbSkgOiBleHRlbnQ7XG4gICAgfTtcblxuICAgIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrMCA9ICtfWzBdLCBrMSA9ICtfWzFdLCB6b29tKSA6IFtrMCwgazFdO1xuICAgIH07XG5cbiAgICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF0sIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV0sIHpvb20pIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgfTtcblxuICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkdXJhdGlvbiA9ICtfLCB6b29tKSA6IGR1cmF0aW9uO1xuICAgIH07XG5cbiAgICB6b29tLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyB6b29tIDogdmFsdWU7XG4gICAgfTtcblxuICAgIHJldHVybiB6b29tO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMTAoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBCcnVzaEV2ZW50KHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24kMigpIHtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ldmVudCQyKCkge1xuICAgIGV4cG9ydHMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgdmFyIE1PREVfRFJBRyA9IHtuYW1lOiBcImRyYWdcIn07XG4gIHZhciBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn07XG4gIHZhciBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifTtcbiAgdmFyIE1PREVfQ0VOVEVSID0ge25hbWU6IFwiY2VudGVyXCJ9O1xuICB2YXIgWCA9IHtcbiAgICBuYW1lOiBcInhcIixcbiAgICBoYW5kbGVzOiBbXCJlXCIsIFwid1wiXS5tYXAodHlwZSQxKSxcbiAgICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCAmJiBbW3hbMF0sIGVbMF1bMV1dLCBbeFsxXSwgZVsxXVsxXV1dOyB9LFxuICAgIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG4gIH07XG5cbiAgdmFyIFkgPSB7XG4gICAgbmFtZTogXCJ5XCIsXG4gICAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUkMSksXG4gICAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgJiYgW1tlWzBdWzBdLCB5WzBdXSwgW2VbMV1bMF0sIHlbMV1dXTsgfSxcbiAgICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMV0sIHh5WzFdWzFdXTsgfVxuICB9O1xuXG4gIHZhciBYWSA9IHtcbiAgICBuYW1lOiBcInh5XCIsXG4gICAgaGFuZGxlczogW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLm1hcCh0eXBlJDEpLFxuICAgIGlucHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH0sXG4gICAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbiAgfTtcblxuICB2YXIgY3Vyc29ycyA9IHtcbiAgICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICAgIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gICAgbjogXCJucy1yZXNpemVcIixcbiAgICBlOiBcImV3LXJlc2l6ZVwiLFxuICAgIHM6IFwibnMtcmVzaXplXCIsXG4gICAgdzogXCJldy1yZXNpemVcIixcbiAgICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICAgIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gICAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgICBzdzogXCJuZXN3LXJlc2l6ZVwiXG4gIH07XG5cbiAgdmFyIGZsaXBYID0ge1xuICAgIGU6IFwid1wiLFxuICAgIHc6IFwiZVwiLFxuICAgIG53OiBcIm5lXCIsXG4gICAgbmU6IFwibndcIixcbiAgICBzZTogXCJzd1wiLFxuICAgIHN3OiBcInNlXCJcbiAgfTtcblxuICB2YXIgZmxpcFkgPSB7XG4gICAgbjogXCJzXCIsXG4gICAgczogXCJuXCIsXG4gICAgbnc6IFwic3dcIixcbiAgICBuZTogXCJzZVwiLFxuICAgIHNlOiBcIm5lXCIsXG4gICAgc3c6IFwibndcIlxuICB9O1xuXG4gIHZhciBzaWduc1ggPSB7XG4gICAgb3ZlcmxheTogKzEsXG4gICAgc2VsZWN0aW9uOiArMSxcbiAgICBuOiBudWxsLFxuICAgIGU6ICsxLFxuICAgIHM6IG51bGwsXG4gICAgdzogLTEsXG4gICAgbnc6IC0xLFxuICAgIG5lOiArMSxcbiAgICBzZTogKzEsXG4gICAgc3c6IC0xXG4gIH07XG5cbiAgdmFyIHNpZ25zWSA9IHtcbiAgICBvdmVybGF5OiArMSxcbiAgICBzZWxlY3Rpb246ICsxLFxuICAgIG46IC0xLFxuICAgIGU6IG51bGwsXG4gICAgczogKzEsXG4gICAgdzogbnVsbCxcbiAgICBudzogLTEsXG4gICAgbmU6IC0xLFxuICAgIHNlOiArMSxcbiAgICBzdzogKzFcbiAgfTtcblxuICBmdW5jdGlvbiB0eXBlJDEodCkge1xuICAgIHJldHVybiB7dHlwZTogdH07XG4gIH1cblxuICAvLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbiAgZnVuY3Rpb24gZGVmYXVsdEZpbHRlciQyKCkge1xuICAgIHJldHVybiAhZXhwb3J0cy5ldmVudC5idXR0b247XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RXh0ZW50JDEoKSB7XG4gICAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gICAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG4gIH1cblxuICAvLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuICBmdW5jdGlvbiBsb2NhbCQxKG5vZGUpIHtcbiAgICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgICByZXR1cm4gbm9kZS5fX2JydXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHkkMShleHRlbnQpIHtcbiAgICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gICAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICAgIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaFgoKSB7XG4gICAgcmV0dXJuIGJydXNoJDEoWCk7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaFkoKSB7XG4gICAgcmV0dXJuIGJydXNoJDEoWSk7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaCgpIHtcbiAgICByZXR1cm4gYnJ1c2gkMShYWSk7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaCQxKGRpbSkge1xuICAgIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50JDEsXG4gICAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIkMixcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goYnJ1c2gsIFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICAgIHRvdWNoZW5kaW5nO1xuXG4gICAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuZGF0YShbdHlwZSQxKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwkMSh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAuZGF0YShbdHlwZSQxKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoIHRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZCk7XG4gICAgfVxuXG4gICAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIGVtcHR5JDEoc2VsZWN0aW9uMSkgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAmJiBzZWxlY3Rpb24xID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09IG51bGwgfHwgZW1wdHkkMShzZWxlY3Rpb24xKSA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsJDEodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgICAgfVxuXG4gICAgICBlbHNlIHtcbiAgICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgICAgcmV0dXJuIHRoYXQuX19icnVzaC5lbWl0dGVyIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIH1cblxuICAgIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcykgeyBpZiAoZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCBleHBvcnRzLmV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm4gbm9ldmVudCQyKCk7IH1cbiAgICAgIGVsc2UgaWYgKHRvdWNoZW5kaW5nKSByZXR1cm47XG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICB0eXBlID0gZXhwb3J0cy5ldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgICBtb2RlID0gKGV4cG9ydHMuZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGV4cG9ydHMuZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2FsJDEodGhhdCksXG4gICAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgbW92aW5nLFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYgZXhwb3J0cy5ldmVudC5zaGlmdEtleSxcbiAgICAgICAgICBsb2NrWCxcbiAgICAgICAgICBsb2NrWSxcbiAgICAgICAgICBwb2ludDAgPSBtb3VzZSh0aGF0KSxcbiAgICAgICAgICBwb2ludCA9IHBvaW50MCxcbiAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgICBbZTAgPSBkaW0gPT09IFkgPyBFIDogdzAsIHMwID0gZGltID09PSBYID8gUyA6IG4wXVxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XG4gICAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XG4gICAgICB9XG5cbiAgICAgIHcxID0gdzA7XG4gICAgICBuMSA9IG4wO1xuICAgICAgZTEgPSBlMDtcbiAgICAgIHMxID0gczA7XG5cbiAgICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGF0KVxuICAgICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG5cbiAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldylcbiAgICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXG4gICAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgICAub24oXCJtb3VzZXVwLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcblxuICAgICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgICAgfVxuXG4gICAgICBub3Byb3BhZ2F0aW9uJDIoKTtcbiAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5zdGFydCgpO1xuXG4gICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IG1vdXNlKHRoYXQpO1xuICAgICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludCA9IHBvaW50MTtcbiAgICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgICAgbm9ldmVudCQyKCk7XG4gICAgICAgIG1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICAgICAgdmFyIHQ7XG5cbiAgICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgICAgZHkgPSBwb2ludFsxXSAtIHBvaW50MFsxXTtcblxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgICAgY2FzZSBNT0RFX0RSQUc6IHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgICAgZWxzZSBpZiAoc2lnblkgPiAwKSBkeSA9IE1hdGgubWF4KE4gLSBzMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBNT0RFX0NFTlRFUjoge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuXG4gICAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbiQyKCk7XG4gICAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgICAgIGdyb3VwLm9uKFwidG91Y2htb3ZlLmJydXNoIHRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYWdFbmFibGUoZXhwb3J0cy5ldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICAgIGlmIChlbXB0eSQxKHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmVuZCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICAgIHN3aXRjaCAoZXhwb3J0cy5ldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSB8fCBtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2V2ZW50JDIoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICAgIHN3aXRjaCAoZXhwb3J0cy5ldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgICAgaWYgKHNoaWZ0aW5nKSB7XG4gICAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgICAgaWYgKGV4cG9ydHMuZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2V2ZW50JDIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgICAgc3RhdGUuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIGJydXNoKSA6IGV4dGVudDtcbiAgICB9O1xuXG4gICAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gICAgfTtcblxuICAgIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gICAgfTtcblxuICAgIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gYnJ1c2g7XG4gIH1cblxuICB2YXIgY29zID0gTWF0aC5jb3M7XG4gIHZhciBzaW4gPSBNYXRoLnNpbjtcbiAgdmFyIHBpJDMgPSBNYXRoLlBJO1xuICB2YXIgaGFsZlBpJDIgPSBwaSQzIC8gMjtcbiAgdmFyIHRhdSQzID0gcGkkMyAqIDI7XG4gIHZhciBtYXgkMSA9IE1hdGgubWF4O1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBjb21wYXJlKFxuICAgICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgICBiLnNvdXJjZS52YWx1ZSArIGIudGFyZ2V0LnZhbHVlXG4gICAgICApO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjaG9yZCgpIHtcbiAgICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgICBzb3J0R3JvdXBzID0gbnVsbCxcbiAgICAgICAgc29ydFN1Ymdyb3VwcyA9IG51bGwsXG4gICAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gY2hvcmQobWF0cml4KSB7XG4gICAgICB2YXIgbiA9IG1hdHJpeC5sZW5ndGgsXG4gICAgICAgICAgZ3JvdXBTdW1zID0gW10sXG4gICAgICAgICAgZ3JvdXBJbmRleCA9IHJhbmdlKG4pLFxuICAgICAgICAgIHN1Ymdyb3VwSW5kZXggPSBbXSxcbiAgICAgICAgICBjaG9yZHMgPSBbXSxcbiAgICAgICAgICBncm91cHMgPSBjaG9yZHMuZ3JvdXBzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShuICogbiksXG4gICAgICAgICAgayxcbiAgICAgICAgICB4LFxuICAgICAgICAgIHgwLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGksXG4gICAgICAgICAgajtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxuICAgICAgayA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgeCA9IDAsIGogPSAtMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgICAgfVxuICAgICAgICBncm91cFN1bXMucHVzaCh4KTtcbiAgICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHJhbmdlKG4pKTtcbiAgICAgICAgayArPSB4O1xuICAgICAgfVxuXG4gICAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgICAgaWYgKHNvcnRHcm91cHMpIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTb3J0IHN1Ymdyb3Vwc+KAplxuICAgICAgaWYgKHNvcnRTdWJncm91cHMpIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRTdWJncm91cHMobWF0cml4W2ldW2FdLCBtYXRyaXhbaV1bYl0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb252ZXJ0IHRoZSBzdW0gdG8gc2NhbGluZyBmYWN0b3IgZm9yIFswLCAycGldLlxuICAgICAgLy8gVE9ETyBBbGxvdyBzdGFydCBhbmQgZW5kIGFuZ2xlIHRvIGJlIHNwZWNpZmllZD9cbiAgICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICAgIGsgPSBtYXgkMSgwLCB0YXUkMyAtIHBhZEFuZ2xlICogbikgLyBrO1xuICAgICAgZHggPSBrID8gcGFkQW5nbGUgOiB0YXUkMyAvIG47XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgICAgLy8gTm90ZTogT3BlcmEgaGFzIGEgYnVnIHJlb3JkZXJpbmcgb2JqZWN0IGxpdGVyYWwgcHJvcGVydGllcyFcbiAgICAgIHggPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHgwID0geCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHZhciBkaSA9IGdyb3VwSW5kZXhbaV0sXG4gICAgICAgICAgICAgIGRqID0gc3ViZ3JvdXBJbmRleFtkaV1bal0sXG4gICAgICAgICAgICAgIHYgPSBtYXRyaXhbZGldW2RqXSxcbiAgICAgICAgICAgICAgYTAgPSB4LFxuICAgICAgICAgICAgICBhMSA9IHggKz0gdiAqIGs7XG4gICAgICAgICAgc3ViZ3JvdXBzW2RqICogbiArIGRpXSA9IHtcbiAgICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICAgIHN1YmluZGV4OiBkaixcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICAgICAgdmFsdWU6IHZcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGdyb3Vwc1tkaV0gPSB7XG4gICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IHgwLFxuICAgICAgICAgIGVuZEFuZ2xlOiB4LFxuICAgICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICAgIH07XG4gICAgICAgIHggKz0gZHg7XG4gICAgICB9XG5cbiAgICAgIC8vIEdlbmVyYXRlIGNob3JkcyBmb3IgZWFjaCAobm9uLWVtcHR5KSBzdWJncm91cC1zdWJncm91cCBsaW5rLlxuICAgICAgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBqID0gaSAtIDE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHN1Ymdyb3Vwc1tqICogbiArIGldLFxuICAgICAgICAgICAgICB0YXJnZXQgPSBzdWJncm91cHNbaSAqIG4gKyBqXTtcbiAgICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgPyB7c291cmNlOiB0YXJnZXQsIHRhcmdldDogc291cmNlfVxuICAgICAgICAgICAgICAgIDoge3NvdXJjZTogc291cmNlLCB0YXJnZXQ6IHRhcmdldH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc29ydENob3JkcyA/IGNob3Jkcy5zb3J0KHNvcnRDaG9yZHMpIDogY2hvcmRzO1xuICAgIH1cblxuICAgIGNob3JkLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSBtYXgkMSgwLCBfKSwgY2hvcmQpIDogcGFkQW5nbGU7XG4gICAgfTtcblxuICAgIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0R3JvdXBzID0gXywgY2hvcmQpIDogc29ydEdyb3VwcztcbiAgICB9O1xuXG4gICAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRTdWJncm91cHMgPSBfLCBjaG9yZCkgOiBzb3J0U3ViZ3JvdXBzO1xuICAgIH07XG5cbiAgICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gc29ydENob3JkcyA9IG51bGwgOiAoc29ydENob3JkcyA9IGNvbXBhcmVWYWx1ZShfKSkuXyA9IF8sIGNob3JkKSA6IHNvcnRDaG9yZHMgJiYgc29ydENob3Jkcy5fO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2hvcmQ7XG4gIH1cblxuICB2YXIgc2xpY2UkNSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBjb25zdGFudCQxMSh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTb3VyY2UoZCkge1xuICAgIHJldHVybiBkLnNvdXJjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUYXJnZXQoZCkge1xuICAgIHJldHVybiBkLnRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRSYWRpdXMkMShkKSB7XG4gICAgcmV0dXJuIGQucmFkaXVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN0YXJ0QW5nbGUoZCkge1xuICAgIHJldHVybiBkLnN0YXJ0QW5nbGU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RW5kQW5nbGUoZCkge1xuICAgIHJldHVybiBkLmVuZEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmliYm9uKCkge1xuICAgIHZhciBzb3VyY2UgPSBkZWZhdWx0U291cmNlLFxuICAgICAgICB0YXJnZXQgPSBkZWZhdWx0VGFyZ2V0LFxuICAgICAgICByYWRpdXMgPSBkZWZhdWx0UmFkaXVzJDEsXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBkZWZhdWx0U3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUgPSBkZWZhdWx0RW5kQW5nbGUsXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gcmliYm9uKCkge1xuICAgICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgICBhcmd2ID0gc2xpY2UkNS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgcyA9IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgICB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICAgIHNyID0gK3JhZGl1cy5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSxcbiAgICAgICAgICBzYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDIsXG4gICAgICAgICAgc2ExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMixcbiAgICAgICAgICBzeDAgPSBzciAqIGNvcyhzYTApLFxuICAgICAgICAgIHN5MCA9IHNyICogc2luKHNhMCksXG4gICAgICAgICAgdHIgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLFxuICAgICAgICAgIHRhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMixcbiAgICAgICAgICB0YTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQyO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAgIGNvbnRleHQubW92ZVRvKHN4MCwgc3kwKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHNyLCBzYTAsIHNhMSk7XG4gICAgICBpZiAoc2EwICE9PSB0YTAgfHwgc2ExICE9PSB0YTEpIHsgLy8gVE9ETyBzciAhPT0gdHI/XG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCB0ciAqIGNvcyh0YTApLCB0ciAqIHNpbih0YTApKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdHIsIHRhMCwgdGExKTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCBzeDAsIHN5MCk7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICByaWJib24ucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMSgrXyksIHJpYmJvbikgOiByYWRpdXM7XG4gICAgfTtcblxuICAgIHJpYmJvbi5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTEoK18pLCByaWJib24pIDogc3RhcnRBbmdsZTtcbiAgICB9O1xuXG4gICAgcmliYm9uLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDExKCtfKSwgcmliYm9uKSA6IGVuZEFuZ2xlO1xuICAgIH07XG5cbiAgICByaWJib24uc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlID0gXywgcmliYm9uKSA6IHNvdXJjZTtcbiAgICB9O1xuXG4gICAgcmliYm9uLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIHJpYmJvbikgOiB0YXJnZXQ7XG4gICAgfTtcblxuICAgIHJpYmJvbi5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIHJpYmJvbikgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gcmliYm9uO1xuICB9XG5cbiAgLy8gQWRkcyBmbG9hdGluZyBwb2ludCBudW1iZXJzIHdpdGggdHdpY2UgdGhlIG5vcm1hbCBwcmVjaXNpb24uXG4gIC8vIFJlZmVyZW5jZTogSi4gUi4gU2hld2NodWssIEFkYXB0aXZlIFByZWNpc2lvbiBGbG9hdGluZy1Qb2ludCBBcml0aG1ldGljIGFuZFxuICAvLyBGYXN0IFJvYnVzdCBHZW9tZXRyaWMgUHJlZGljYXRlcywgRGlzY3JldGUgJiBDb21wdXRhdGlvbmFsIEdlb21ldHJ5IDE4KDMpXG4gIC8vIDMwNeKAkzM2MyAoMTk5NykuXG4gIC8vIENvZGUgYWRhcHRlZCBmcm9tIEdlb2dyYXBoaWNMaWIgYnkgQ2hhcmxlcyBGLiBGLiBLYXJuZXksXG4gIC8vIGh0dHA6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLm5ldC9cblxuICBmdW5jdGlvbiBhZGRlcigpIHtcbiAgICByZXR1cm4gbmV3IEFkZGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gQWRkZXIoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgQWRkZXIucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnMgPSAvLyByb3VuZGVkIHZhbHVlXG4gICAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbih5KSB7XG4gICAgICBhZGQkMSh0ZW1wLCB5LCB0aGlzLnQpO1xuICAgICAgYWRkJDEodGhpcywgdGVtcC5zLCB0aGlzLnMpO1xuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IHRlbXAudDtcbiAgICAgIGVsc2UgdGhpcy5zID0gdGVtcC50O1xuICAgIH0sXG4gICAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdGVtcCA9IG5ldyBBZGRlcjtcblxuICBmdW5jdGlvbiBhZGQkMShhZGRlciwgYSwgYikge1xuICAgIHZhciB4ID0gYWRkZXIucyA9IGEgKyBiLFxuICAgICAgICBidiA9IHggLSBhLFxuICAgICAgICBhdiA9IHggLSBidjtcbiAgICBhZGRlci50ID0gKGEgLSBhdikgKyAoYiAtIGJ2KTtcbiAgfVxuXG4gIHZhciBlcHNpbG9uJDQgPSAxZS02O1xuICB2YXIgZXBzaWxvbjIkMiA9IDFlLTEyO1xuICB2YXIgcGkkNCA9IE1hdGguUEk7XG4gIHZhciBoYWxmUGkkMyA9IHBpJDQgLyAyO1xuICB2YXIgcXVhcnRlclBpID0gcGkkNCAvIDQ7XG4gIHZhciB0YXUkNCA9IHBpJDQgKiAyO1xuXG4gIHZhciBkZWdyZWVzJDEgPSAxODAgLyBwaSQ0O1xuICB2YXIgcmFkaWFucyA9IHBpJDQgLyAxODA7XG5cbiAgdmFyIGFicyA9IE1hdGguYWJzO1xuICB2YXIgYXRhbiA9IE1hdGguYXRhbjtcbiAgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbiAgdmFyIGNvcyQxID0gTWF0aC5jb3M7XG4gIHZhciBjZWlsID0gTWF0aC5jZWlsO1xuICB2YXIgZXhwID0gTWF0aC5leHA7XG4gIHZhciBsb2ckMSA9IE1hdGgubG9nO1xuICB2YXIgcG93JDEgPSBNYXRoLnBvdztcbiAgdmFyIHNpbiQxID0gTWF0aC5zaW47XG4gIHZhciBzaWduJDEgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24oeCkgeyByZXR1cm4geCA+IDAgPyAxIDogeCA8IDAgPyAtMSA6IDA7IH07XG4gIHZhciBzcXJ0JDEgPSBNYXRoLnNxcnQ7XG4gIHZhciB0YW4gPSBNYXRoLnRhbjtcblxuICBmdW5jdGlvbiBhY29zKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkkNCA6IE1hdGguYWNvcyh4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzaW4kMSh4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gaGFsZlBpJDMgOiB4IDwgLTEgPyAtaGFsZlBpJDMgOiBNYXRoLmFzaW4oeCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXZlcnNpbih4KSB7XG4gICAgcmV0dXJuICh4ID0gc2luJDEoeCAvIDIpKSAqIHg7XG4gIH1cblxuICBmdW5jdGlvbiBub29wJDIoKSB7fVxuXG4gIGZ1bmN0aW9uIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBzdHJlYW0pIHtcbiAgICBpZiAoZ2VvbWV0cnkgJiYgc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gICAgRmVhdHVyZTogZnVuY3Rpb24oZmVhdHVyZSwgc3RyZWFtKSB7XG4gICAgICBzdHJlYW1HZW9tZXRyeShmZWF0dXJlLmdlb21ldHJ5LCBzdHJlYW0pO1xuICAgIH0sXG4gICAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0cmVhbUdlb21ldHJ5VHlwZSA9IHtcbiAgICBTcGhlcmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICBzdHJlYW0uc3BoZXJlKCk7XG4gICAgfSxcbiAgICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICAgIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgICB9LFxuICAgIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICAgIH0sXG4gICAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIHN0cmVhbUxpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0sIDApO1xuICAgIH0sXG4gICAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcbiAgICB9LFxuICAgIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSk7XG4gICAgfSxcbiAgICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBzdHJlYW0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzLCBzdHJlYW0sIGNsb3NlZCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG4gICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCBjb29yZGluYXRlWzJdKTtcbiAgICBzdHJlYW0ubGluZUVuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgc3RyZWFtKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMSk7XG4gICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmVhbShvYmplY3QsIHN0cmVhbSkge1xuICAgIGlmIChvYmplY3QgJiYgc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICAgIHN0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgc3RyZWFtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBzdHJlYW0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhcmVhUmluZ1N1bTtcblxuICB2YXIgYXJlYVN1bTtcbiAgdmFyIGxhbWJkYTAwO1xuICB2YXIgcGhpMDA7XG4gIHZhciBsYW1iZGEwO1xuICB2YXIgY29zUGhpMDtcbiAgdmFyIHNpblBoaTA7XG4gIHZhciBhcmVhU3RyZWFtID0ge1xuICAgIHBvaW50OiBub29wJDIsXG4gICAgbGluZVN0YXJ0OiBub29wJDIsXG4gICAgbGluZUVuZDogbm9vcCQyLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBhcmVhUmluZ1N1bS5yZXNldCgpO1xuICAgICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0O1xuICAgICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmVhUmluZyA9ICthcmVhUmluZ1N1bTtcbiAgICAgIGFyZWFTdW0uYWRkKGFyZWFSaW5nIDwgMCA/IHRhdSQ0ICsgYXJlYVJpbmcgOiBhcmVhUmluZyk7XG4gICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMubGluZUVuZCA9IHRoaXMucG9pbnQgPSBub29wJDI7XG4gICAgfSxcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgYXJlYVN1bS5hZGQodGF1JDQpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBhcmVhUmluZ1N0YXJ0KCkge1xuICAgIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICAgIGFyZWFQb2ludChsYW1iZGEwMCwgcGhpMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICAgIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvcyQxKHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGkpLCBzaW5QaGkwID0gc2luJDEocGhpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICBwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpOyAvLyBoYWxmIHRoZSBhbmd1bGFyIGRpc3RhbmNlIGZyb20gc291dGggcG9sZVxuXG4gICAgLy8gU3BoZXJpY2FsIGV4Y2VzcyBFIGZvciBhIHNwaGVyaWNhbCB0cmlhbmdsZSB3aXRoIHZlcnRpY2VzOiBzb3V0aCBwb2xlLFxuICAgIC8vIHByZXZpb3VzIHBvaW50LCBjdXJyZW50IHBvaW50LiAgVXNlcyBhIGZvcm11bGEgZGVyaXZlZCBmcm9tIENhZ25vbGnigJlzXG4gICAgLy8gdGhlb3JlbS4gIFNlZSBUb2RodW50ZXIsIFNwaGVyaWNhbCBUcmlnLiAoMTg3MSksIFNlYy4gMTAzLCBFcS4gKDIpLlxuICAgIHZhciBkTGFtYmRhID0gbGFtYmRhIC0gbGFtYmRhMCxcbiAgICAgICAgc2RMYW1iZGEgPSBkTGFtYmRhID49IDAgPyAxIDogLTEsXG4gICAgICAgIGFkTGFtYmRhID0gc2RMYW1iZGEgKiBkTGFtYmRhLFxuICAgICAgICBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICBzaW5QaGkgPSBzaW4kMShwaGkpLFxuICAgICAgICBrID0gc2luUGhpMCAqIHNpblBoaSxcbiAgICAgICAgdSA9IGNvc1BoaTAgKiBjb3NQaGkgKyBrICogY29zJDEoYWRMYW1iZGEpLFxuICAgICAgICB2ID0gayAqIHNkTGFtYmRhICogc2luJDEoYWRMYW1iZGEpO1xuICAgIGFyZWFSaW5nU3VtLmFkZChhdGFuMih2LCB1KSk7XG5cbiAgICAvLyBBZHZhbmNlIHRoZSBwcmV2aW91cyBwb2ludHMuXG4gICAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvc1BoaSwgc2luUGhpMCA9IHNpblBoaTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWEkMihvYmplY3QpIHtcbiAgICBpZiAoYXJlYVN1bSkgYXJlYVN1bS5yZXNldCgpO1xuICAgIGVsc2UgYXJlYVN1bSA9IGFkZGVyKCksIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcbiAgICBzdHJlYW0ob2JqZWN0LCBhcmVhU3RyZWFtKTtcbiAgICByZXR1cm4gYXJlYVN1bSAqIDI7XG4gIH1cblxuICBmdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gICAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4kMShjYXJ0ZXNpYW5bMl0pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgICB2YXIgbGFtYmRhID0gc3BoZXJpY2FsWzBdLCBwaGkgPSBzcGhlcmljYWxbMV0sIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gICAgcmV0dXJuIFtjb3NQaGkgKiBjb3MkMShsYW1iZGEpLCBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLCBzaW4kMShwaGkpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbkRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xuICB9XG5cbiAgLy8gVE9ETyByZXR1cm4gYVxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5BZGRJblBsYWNlKGEsIGIpIHtcbiAgICBhWzBdICs9IGJbMF0sIGFbMV0gKz0gYlsxXSwgYVsyXSArPSBiWzJdO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FydGVzaWFuU2NhbGUodmVjdG9yLCBrKSB7XG4gICAgcmV0dXJuIFt2ZWN0b3JbMF0gKiBrLCB2ZWN0b3JbMV0gKiBrLCB2ZWN0b3JbMl0gKiBrXTtcbiAgfVxuXG4gIC8vIFRPRE8gcmV0dXJuIGRcbiAgZnVuY3Rpb24gY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShkKSB7XG4gICAgdmFyIGwgPSBzcXJ0JDEoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSArIGRbMl0gKiBkWzJdKTtcbiAgICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xuICB9XG5cbnZhciAgIGxhbWJkYTAkMTtcbiAgdmFyIHBoaTA7XG4gIHZhciBsYW1iZGExO1xuICB2YXIgcGhpMTtcbiAgdmFyIGxhbWJkYTI7XG52YXIgICBsYW1iZGEwMCQxO1xudmFyICAgcGhpMDAkMTtcbiAgdmFyIHAwO1xuICB2YXIgZGVsdGFTdW07XG4gIHZhciByYW5nZXM7XG52YXIgICByYW5nZSQxO1xuICB2YXIgYm91bmRzU3RyZWFtID0ge1xuICAgIHBvaW50OiBib3VuZHNQb2ludCxcbiAgICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgICBsaW5lRW5kOiBib3VuZHNMaW5lRW5kLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzUmluZ1N0YXJ0O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVFbmQgPSBib3VuZHNSaW5nRW5kO1xuICAgICAgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICAgIGFyZWFTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGFyZWFTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gICAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVFbmQgPSBib3VuZHNMaW5lRW5kO1xuICAgICAgaWYgKGFyZWFSaW5nU3VtIDwgMCkgbGFtYmRhMCQxID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgICAgIGVsc2UgaWYgKGRlbHRhU3VtID4gZXBzaWxvbiQ0KSBwaGkxID0gOTA7XG4gICAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uJDQpIHBoaTAgPSAtOTA7XG4gICAgICByYW5nZSQxWzBdID0gbGFtYmRhMCQxLCByYW5nZSQxWzFdID0gbGFtYmRhMTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYm91bmRzUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICByYW5nZXMucHVzaChyYW5nZSQxID0gW2xhbWJkYTAkMSA9IGxhbWJkYSwgbGFtYmRhMSA9IGxhbWJkYV0pO1xuICAgIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIHAgPSBjYXJ0ZXNpYW4oW2xhbWJkYSAqIHJhZGlhbnMsIHBoaSAqIHJhZGlhbnNdKTtcbiAgICBpZiAocDApIHtcbiAgICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgICAgZXF1YXRvcmlhbCA9IFtub3JtYWxbMV0sIC1ub3JtYWxbMF0sIDBdLFxuICAgICAgICAgIGluZmxlY3Rpb24gPSBjYXJ0ZXNpYW5Dcm9zcyhlcXVhdG9yaWFsLCBub3JtYWwpO1xuICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICAgIGluZmxlY3Rpb24gPSBzcGhlcmljYWwoaW5mbGVjdGlvbik7XG4gICAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyLFxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgICAgbGFtYmRhaSA9IGluZmxlY3Rpb25bMF0gKiBkZWdyZWVzJDEgKiBzaWduLFxuICAgICAgICAgIHBoaWksXG4gICAgICAgICAgYW50aW1lcmlkaWFuID0gYWJzKGRlbHRhKSA+IDE4MDtcbiAgICAgIGlmIChhbnRpbWVyaWRpYW4gXiAoc2lnbiAqIGxhbWJkYTIgPCBsYW1iZGFpICYmIGxhbWJkYWkgPCBzaWduICogbGFtYmRhKSkge1xuICAgICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXMkMTtcbiAgICAgICAgaWYgKHBoaWkgPiBwaGkxKSBwaGkxID0gcGhpaTtcbiAgICAgIH0gZWxzZSBpZiAobGFtYmRhaSA9IChsYW1iZGFpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgICAgcGhpaSA9IC1pbmZsZWN0aW9uWzFdICogZGVncmVlcyQxO1xuICAgICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gICAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgICAgfVxuICAgICAgaWYgKGFudGltZXJpZGlhbikge1xuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwJDEsIGxhbWJkYSkgPiBhbmdsZShsYW1iZGEwJDEsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMCQxID0gbGFtYmRhO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhMSA+PSBsYW1iZGEwJDEpIHtcbiAgICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMCQxKSBsYW1iZGEwJDEgPSBsYW1iZGE7XG4gICAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTIpIHtcbiAgICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwJDEsIGxhbWJkYSkgPiBhbmdsZShsYW1iZGEwJDEsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhLCBsYW1iZGExKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTAkMSA9IGxhbWJkYTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRzUG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cbiAgICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuZHNMaW5lU3RhcnQoKSB7XG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzTGluZUVuZCgpIHtcbiAgICByYW5nZSQxWzBdID0gbGFtYmRhMCQxLCByYW5nZSQxWzFdID0gbGFtYmRhMTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBwMCA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuZHNSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBpZiAocDApIHtcbiAgICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgICBkZWx0YVN1bS5hZGQoYWJzKGRlbHRhKSA+IDE4MCA/IGRlbHRhICsgKGRlbHRhID4gMCA/IDM2MCA6IC0zNjApIDogZGVsdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW1iZGEwMCQxID0gbGFtYmRhLCBwaGkwMCQxID0gcGhpO1xuICAgIH1cbiAgICBhcmVhU3RyZWFtLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICBsaW5lUG9pbnQobGFtYmRhLCBwaGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzUmluZ1N0YXJ0KCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuZHNSaW5nRW5kKCkge1xuICAgIGJvdW5kc1JpbmdQb2ludChsYW1iZGEwMCQxLCBwaGkwMCQxKTtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQoKTtcbiAgICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24kNCkgbGFtYmRhMCQxID0gLShsYW1iZGExID0gMTgwKTtcbiAgICByYW5nZSQxWzBdID0gbGFtYmRhMCQxLCByYW5nZSQxWzFdID0gbGFtYmRhMTtcbiAgICBwMCA9IG51bGw7XG4gIH1cblxuICAvLyBGaW5kcyB0aGUgbGVmdC1yaWdodCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsb25naXR1ZGVzLlxuICAvLyBUaGlzIGlzIGFsbW9zdCB0aGUgc2FtZSBhcyAobGFtYmRhMSAtIGxhbWJkYTAgKyAzNjDCsCkgJSAzNjDCsCwgZXhjZXB0IHRoYXQgd2Ugd2FudFxuICAvLyB0aGUgZGlzdGFuY2UgYmV0d2VlbiDCsTE4MMKwIHRvIGJlIDM2MMKwLlxuICBmdW5jdGlvbiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSB7XG4gICAgcmV0dXJuIChsYW1iZGExIC09IGxhbWJkYTApIDwgMCA/IGxhbWJkYTEgKyAzNjAgOiBsYW1iZGExO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZUNvbnRhaW5zKHJhbmdlLCB4KSB7XG4gICAgcmV0dXJuIHJhbmdlWzBdIDw9IHJhbmdlWzFdID8gcmFuZ2VbMF0gPD0geCAmJiB4IDw9IHJhbmdlWzFdIDogeCA8IHJhbmdlWzBdIHx8IHJhbmdlWzFdIDwgeDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5kcyhmZWF0dXJlKSB7XG4gICAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gICAgaWYgKGRlbHRhU3VtKSBkZWx0YVN1bS5yZXNldCgpO1xuICAgIGVsc2UgZGVsdGFTdW0gPSBhZGRlcigpO1xuICAgIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwJDEgPSBwaGkwID0gSW5maW5pdHkpO1xuICAgIHJhbmdlcyA9IFtdO1xuICAgIHN0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gICAgLy8gRmlyc3QsIHNvcnQgcmFuZ2VzIGJ5IHRoZWlyIG1pbmltdW0gbG9uZ2l0dWRlcy5cbiAgICBpZiAobiA9IHJhbmdlcy5sZW5ndGgpIHtcbiAgICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAgIC8vIFRoZW4sIG1lcmdlIGFueSByYW5nZXMgdGhhdCBvdmVybGFwLlxuICAgICAgZm9yIChpID0gMSwgYSA9IHJhbmdlc1swXSwgbWVyZ2VkID0gW2FdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICAgIGlmIChyYW5nZUNvbnRhaW5zKGEsIGJbMF0pIHx8IHJhbmdlQ29udGFpbnMoYSwgYlsxXSkpIHtcbiAgICAgICAgICBpZiAoYW5nbGUoYVswXSwgYlsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVsxXSA9IGJbMV07XG4gICAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lcmdlZC5wdXNoKGEgPSBiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGaW5hbGx5LCBmaW5kIHRoZSBsYXJnZXN0IGdhcCBiZXR3ZWVuIHRoZSBtZXJnZWQgcmFuZ2VzLlxuICAgICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgICAgZm9yIChkZWx0YU1heCA9IC1JbmZpbml0eSwgbiA9IG1lcmdlZC5sZW5ndGggLSAxLCBpID0gMCwgYSA9IG1lcmdlZFtuXTsgaSA8PSBuOyBhID0gYiwgKytpKSB7XG4gICAgICAgIGIgPSBtZXJnZWRbaV07XG4gICAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCQxID0gYlswXSwgbGFtYmRhMSA9IGFbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmFuZ2VzID0gcmFuZ2UkMSA9IG51bGw7XG5cbiAgICByZXR1cm4gbGFtYmRhMCQxID09PSBJbmZpbml0eSB8fCBwaGkwID09PSBJbmZpbml0eVxuICAgICAgICA/IFtbTmFOLCBOYU5dLCBbTmFOLCBOYU5dXVxuICAgICAgICA6IFtbbGFtYmRhMCQxLCBwaGkwXSwgW2xhbWJkYTEsIHBoaTFdXTtcbiAgfVxuXG4gIHZhciBXMDtcbiAgdmFyIFcxO1xuICB2YXIgWDA7XG4gIHZhciBZMDtcbiAgdmFyIFowO1xuICB2YXIgWDE7XG4gIHZhciBZMTtcbiAgdmFyIFoxO1xuICB2YXIgWDI7XG4gIHZhciBZMjtcbiAgdmFyIFoyO1xudmFyICAgbGFtYmRhMDAkMjtcbnZhciAgIHBoaTAwJDI7XG4gIHZhciB4MDtcbiAgdmFyIHkwO1xuICB2YXIgejA7XG4gIC8vIHByZXZpb3VzIHBvaW50XG5cbiAgdmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICAgIHNwaGVyZTogbm9vcCQyLFxuICAgIHBvaW50OiBjZW50cm9pZFBvaW50LFxuICAgIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0O1xuICAgICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgICB9XG4gIH07XG5cbiAgLy8gQXJpdGhtZXRpYyBtZWFuIG9mIENhcnRlc2lhbiB2ZWN0b3JzLlxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oY29zUGhpICogY29zJDEobGFtYmRhKSwgY29zUGhpICogc2luJDEobGFtYmRhKSwgc2luJDEocGhpKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgsIHksIHopIHtcbiAgICArK1cwO1xuICAgIFgwICs9ICh4IC0gWDApIC8gVzA7XG4gICAgWTAgKz0gKHkgLSBZMCkgLyBXMDtcbiAgICBaMCArPSAoeiAtIFowKSAvIFcwO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludEZpcnN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKTtcbiAgICB4MCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSk7XG4gICAgeTAgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpO1xuICAgIHowID0gc2luJDEocGhpKTtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50O1xuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgICAgeCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksXG4gICAgICAgIHkgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLFxuICAgICAgICB6ID0gc2luJDEocGhpKSxcbiAgICAgICAgdyA9IGF0YW4yKHNxcnQkMSgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICAgIFcxICs9IHc7XG4gICAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gICAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG4gIH1cblxuICAvLyBTZWUgSi4gRS4gQnJvY2ssIFRoZSBJbmVydGlhIFRlbnNvciBmb3IgYSBTcGhlcmljYWwgVHJpYW5nbGUsXG4gIC8vIEouIEFwcGxpZWQgTWVjaGFuaWNzIDQyLCAyMzkgKDE5NzUpLlxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50Rmlyc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gICAgY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhMDAkMiwgcGhpMDAkMik7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYTAwJDIgPSBsYW1iZGEsIHBoaTAwJDIgPSBwaGk7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnQ7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gICAgeDAgPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpO1xuICAgIHkwID0gY29zUGhpICogc2luJDEobGFtYmRhKTtcbiAgICB6MCA9IHNpbiQxKHBoaSk7XG4gICAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICB4ID0gY29zUGhpICogY29zJDEobGFtYmRhKSxcbiAgICAgICAgeSA9IGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksXG4gICAgICAgIHogPSBzaW4kMShwaGkpLFxuICAgICAgICBjeCA9IHkwICogeiAtIHowICogeSxcbiAgICAgICAgY3kgPSB6MCAqIHggLSB4MCAqIHosXG4gICAgICAgIGN6ID0geDAgKiB5IC0geTAgKiB4LFxuICAgICAgICBtID0gc3FydCQxKGN4ICogY3ggKyBjeSAqIGN5ICsgY3ogKiBjeiksXG4gICAgICAgIHUgPSB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHosXG4gICAgICAgIHYgPSBtICYmIC1hY29zKHUpIC8gbSwgLy8gYXJlYSB3ZWlnaHRcbiAgICAgICAgdyA9IGF0YW4yKG0sIHUpOyAvLyBsaW5lIHdlaWdodFxuICAgIFgyICs9IHYgKiBjeDtcbiAgICBZMiArPSB2ICogY3k7XG4gICAgWjIgKz0gdiAqIGN6O1xuICAgIFcxICs9IHc7XG4gICAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gICAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkJDEob2JqZWN0KSB7XG4gICAgVzAgPSBXMSA9XG4gICAgWDAgPSBZMCA9IFowID1cbiAgICBYMSA9IFkxID0gWjEgPVxuICAgIFgyID0gWTIgPSBaMiA9IDA7XG4gICAgc3RyZWFtKG9iamVjdCwgY2VudHJvaWRTdHJlYW0pO1xuXG4gICAgdmFyIHggPSBYMixcbiAgICAgICAgeSA9IFkyLFxuICAgICAgICB6ID0gWjIsXG4gICAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgICAvLyBJZiB0aGUgYXJlYS13ZWlnaHRlZCBjY2VudHJvaWQgaXMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbGVuZ3RoLXdlaWdodGVkIGNjZW50cm9pZC5cbiAgICBpZiAobSA8IGVwc2lsb24yJDIpIHtcbiAgICAgIHggPSBYMSwgeSA9IFkxLCB6ID0gWjE7XG4gICAgICAvLyBJZiB0aGUgZmVhdHVyZSBoYXMgemVybyBsZW5ndGgsIGZhbGwgYmFjayB0byBhcml0aG1ldGljIG1lYW4gb2YgcG9pbnQgdmVjdG9ycy5cbiAgICAgIGlmIChXMSA8IGVwc2lsb24kNCkgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcbiAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgICAvLyBJZiB0aGUgZmVhdHVyZSBzdGlsbCBoYXMgYW4gdW5kZWZpbmVkIGNjZW50cm9pZCwgdGhlbiByZXR1cm4uXG4gICAgICBpZiAobSA8IGVwc2lsb24yJDIpIHJldHVybiBbTmFOLCBOYU5dO1xuICAgIH1cblxuICAgIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzJDEsIGFzaW4kMSh6IC8gc3FydCQxKG0pKSAqIGRlZ3JlZXMkMV07XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQxMih4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBvc2UoYSwgYikge1xuXG4gICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gICAgfVxuXG4gICAgaWYgKGEuaW52ZXJ0ICYmIGIuaW52ZXJ0KSBjb21wb3NlLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHJldHVybiB4ID0gYi5pbnZlcnQoeCwgeSksIHggJiYgYS5pbnZlcnQoeFswXSwgeFsxXSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjb21wb3NlO1xuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRpb25JZGVudGl0eShsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhID4gcGkkNCA/IGxhbWJkYSAtIHRhdSQ0IDogbGFtYmRhIDwgLXBpJDQgPyBsYW1iZGEgKyB0YXUkNCA6IGxhbWJkYSwgcGhpXTtcbiAgfVxuXG4gIHJvdGF0aW9uSWRlbnRpdHkuaW52ZXJ0ID0gcm90YXRpb25JZGVudGl0eTtcblxuICBmdW5jdGlvbiByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICAgIHJldHVybiAoZGVsdGFMYW1iZGEgJT0gdGF1JDQpID8gKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpXG4gICAgICA6IHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSlcbiAgICAgIDogKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKVxuICAgICAgOiByb3RhdGlvbklkZW50aXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgcmV0dXJuIGxhbWJkYSArPSBkZWx0YUxhbWJkYSwgW2xhbWJkYSA+IHBpJDQgPyBsYW1iZGEgLSB0YXUkNCA6IGxhbWJkYSA8IC1waSQ0ID8gbGFtYmRhICsgdGF1JDQgOiBsYW1iZGEsIHBoaV07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gICAgdmFyIHJvdGF0aW9uID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKTtcbiAgICByb3RhdGlvbi5pbnZlcnQgPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoLWRlbHRhTGFtYmRhKTtcbiAgICByZXR1cm4gcm90YXRpb247XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gICAgdmFyIGNvc0RlbHRhUGhpID0gY29zJDEoZGVsdGFQaGkpLFxuICAgICAgICBzaW5EZWx0YVBoaSA9IHNpbiQxKGRlbHRhUGhpKSxcbiAgICAgICAgY29zRGVsdGFHYW1tYSA9IGNvcyQxKGRlbHRhR2FtbWEpLFxuICAgICAgICBzaW5EZWx0YUdhbW1hID0gc2luJDEoZGVsdGFHYW1tYSk7XG5cbiAgICBmdW5jdGlvbiByb3RhdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgICAgeCA9IGNvcyQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeSA9IHNpbiQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgICAgayA9IHogKiBjb3NEZWx0YVBoaSArIHggKiBzaW5EZWx0YVBoaTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXG4gICAgICAgIGFzaW4kMShrICogY29zRGVsdGFHYW1tYSArIHkgKiBzaW5EZWx0YUdhbW1hKVxuICAgICAgXTtcbiAgICB9XG5cbiAgICByb3RhdGlvbi5pbnZlcnQgPSBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgICAgeCA9IGNvcyQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeSA9IHNpbiQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgICAgayA9IHogKiBjb3NEZWx0YUdhbW1hIC0geSAqIHNpbkRlbHRhR2FtbWE7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSArIHogKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgKyBrICogc2luRGVsdGFQaGkpLFxuICAgICAgICBhc2luJDEoayAqIGNvc0RlbHRhUGhpIC0geCAqIHNpbkRlbHRhUGhpKVxuICAgICAgXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJvdGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRpb24ocm90YXRlKSB7XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucyhyb3RhdGVbMF0gKiByYWRpYW5zLCByb3RhdGVbMV0gKiByYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIHJhZGlhbnMgOiAwKTtcblxuICAgIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXM7XG4gICAgfVxuXG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXM7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3J3YXJkO1xuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbiAgZnVuY3Rpb24gY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCB0MCwgdDEpIHtcbiAgICBpZiAoIWRlbHRhKSByZXR1cm47XG4gICAgdmFyIGNvc1JhZGl1cyA9IGNvcyQxKHJhZGl1cyksXG4gICAgICAgIHNpblJhZGl1cyA9IHNpbiQxKHJhZGl1cyksXG4gICAgICAgIHN0ZXAgPSBkaXJlY3Rpb24gKiBkZWx0YTtcbiAgICBpZiAodDAgPT0gbnVsbCkge1xuICAgICAgdDAgPSByYWRpdXMgKyBkaXJlY3Rpb24gKiB0YXUkNDtcbiAgICAgIHQxID0gcmFkaXVzIC0gc3RlcCAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQwID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDApO1xuICAgICAgdDEgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MSk7XG4gICAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXUkNDtcbiAgICB9XG4gICAgZm9yICh2YXIgcG9pbnQsIHQgPSB0MDsgZGlyZWN0aW9uID4gMCA/IHQgPiB0MSA6IHQgPCB0MTsgdCAtPSBzdGVwKSB7XG4gICAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zJDEodCksIC1zaW5SYWRpdXMgKiBzaW4kMSh0KV0pO1xuICAgICAgc3RyZWFtLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgc2lnbmVkIGFuZ2xlIG9mIGEgY2FydGVzaWFuIHBvaW50IHJlbGF0aXZlIHRvIFtjb3NSYWRpdXMsIDAsIDBdLlxuICBmdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xuICAgIHBvaW50ID0gY2FydGVzaWFuKHBvaW50KSwgcG9pbnRbMF0gLT0gY29zUmFkaXVzO1xuICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UocG9pbnQpO1xuICAgIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XG4gICAgcmV0dXJuICgoLXBvaW50WzJdIDwgMCA/IC1yYWRpdXMgOiByYWRpdXMpICsgdGF1JDQgLSBlcHNpbG9uJDQpICUgdGF1JDQ7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGUkMSgpIHtcbiAgICB2YXIgY2VudGVyID0gY29uc3RhbnQkMTIoWzAsIDBdKSxcbiAgICAgICAgcmFkaXVzID0gY29uc3RhbnQkMTIoOTApLFxuICAgICAgICBwcmVjaXNpb24gPSBjb25zdGFudCQxMig2KSxcbiAgICAgICAgcmluZyxcbiAgICAgICAgcm90YXRlLFxuICAgICAgICBzdHJlYW0gPSB7cG9pbnQ6IHBvaW50fTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHJpbmcucHVzaCh4ID0gcm90YXRlKHgsIHkpKTtcbiAgICAgIHhbMF0gKj0gZGVncmVlcyQxLCB4WzFdICo9IGRlZ3JlZXMkMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaXJjbGUoKSB7XG4gICAgICB2YXIgYyA9IGNlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHIgPSByYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnMsXG4gICAgICAgICAgcCA9IHByZWNpc2lvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucztcbiAgICAgIHJpbmcgPSBbXTtcbiAgICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoLWNbMF0gKiByYWRpYW5zLCAtY1sxXSAqIHJhZGlhbnMsIDApLmludmVydDtcbiAgICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHIsIHAsIDEpO1xuICAgICAgYyA9IHt0eXBlOiBcIlBvbHlnb25cIiwgY29vcmRpbmF0ZXM6IFtyaW5nXX07XG4gICAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEyKFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcbiAgICB9O1xuXG4gICAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoK18pLCBjaXJjbGUpIDogcmFkaXVzO1xuICAgIH07XG5cbiAgICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2lzaW9uID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMigrXyksIGNpcmNsZSkgOiBwcmVjaXNpb247XG4gICAgfTtcblxuICAgIHJldHVybiBjaXJjbGU7XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwQnVmZmVyKCkge1xuICAgIHZhciBsaW5lcyA9IFtdLFxuICAgICAgICBsaW5lO1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICBsaW5lLnB1c2goW3gsIHldKTtcbiAgICAgIH0sXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogbm9vcCQyLFxuICAgICAgcmVqb2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIGxpbmVzLnB1c2gobGluZXMucG9wKCkuY29uY2F0KGxpbmVzLnNoaWZ0KCkpKTtcbiAgICAgIH0sXG4gICAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbGluZXM7XG4gICAgICAgIGxpbmVzID0gW107XG4gICAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIHQwID0gMCxcbiAgICAgICAgdDEgPSAxLFxuICAgICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICAgIGR5ID0gYnkgLSBheSxcbiAgICAgICAgcjtcblxuICAgIHIgPSB4MCAtIGF4O1xuICAgIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgICByIC89IGR4O1xuICAgIGlmIChkeCA8IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgIH1cblxuICAgIHIgPSB4MSAtIGF4O1xuICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgICByIC89IGR4O1xuICAgIGlmIChkeCA8IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgIH1cblxuICAgIHIgPSB5MCAtIGF5O1xuICAgIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgICByIC89IGR5O1xuICAgIGlmIChkeSA8IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgIH1cblxuICAgIHIgPSB5MSAtIGF5O1xuICAgIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgICByIC89IGR5O1xuICAgIGlmIChkeSA8IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgIH1cblxuICAgIGlmICh0MCA+IDApIGFbMF0gPSBheCArIHQwICogZHgsIGFbMV0gPSBheSArIHQwICogZHk7XG4gICAgaWYgKHQxIDwgMSkgYlswXSA9IGF4ICsgdDEgKiBkeCwgYlsxXSA9IGF5ICsgdDEgKiBkeTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50RXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhYnMoYVswXSAtIGJbMF0pIDwgZXBzaWxvbiQ0ICYmIGFicyhhWzFdIC0gYlsxXSkgPCBlcHNpbG9uJDQ7XG4gIH1cblxuICBmdW5jdGlvbiBJbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gICAgdGhpcy54ID0gcG9pbnQ7XG4gICAgdGhpcy56ID0gcG9pbnRzO1xuICAgIHRoaXMubyA9IG90aGVyOyAvLyBhbm90aGVyIGludGVyc2VjdGlvblxuICAgIHRoaXMuZSA9IGVudHJ5OyAvLyBpcyBhbiBlbnRyeT9cbiAgICB0aGlzLnYgPSBmYWxzZTsgLy8gdmlzaXRlZFxuICAgIHRoaXMubiA9IHRoaXMucCA9IG51bGw7IC8vIG5leHQgJiBwcmV2aW91c1xuICB9XG5cbiAgLy8gQSBnZW5lcmFsaXplZCBwb2x5Z29uIGNsaXBwaW5nIGFsZ29yaXRobTogZ2l2ZW4gYSBwb2x5Z29uIHRoYXQgaGFzIGJlZW4gY3V0XG4gIC8vIGludG8gaXRzIHZpc2libGUgbGluZSBzZWdtZW50cywgYW5kIHJlam9pbnMgdGhlIHNlZ21lbnRzIGJ5IGludGVycG9sYXRpbmdcbiAgLy8gYWxvbmcgdGhlIGNsaXAgZWRnZS5cbiAgZnVuY3Rpb24gY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gICAgdmFyIHN1YmplY3QgPSBbXSxcbiAgICAgICAgY2xpcCA9IFtdLFxuICAgICAgICBpLFxuICAgICAgICBuO1xuXG4gICAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbihzZWdtZW50KSB7XG4gICAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICAgIHZhciBuLCBwMCA9IHNlZ21lbnRbMF0sIHAxID0gc2VnbWVudFtuXSwgeDtcblxuICAgICAgLy8gSWYgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50cyBvZiBhIHNlZ21lbnQgYXJlIGNvaW5jaWRlbnQsIHRoZW4gdHJlYXQgYXMgYVxuICAgICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgICAvLyBleHRlcmlvciByaW5nIHNob3VsZCBiZSBjaGVja2VkLlxuICAgICAgaWYgKHBvaW50RXF1YWwocDAsIHAxKSkge1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1YmplY3QucHVzaCh4ID0gbmV3IEludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSkpO1xuICAgICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKSk7XG4gICAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMSwgbnVsbCwgeCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgY2xpcC5zb3J0KGNvbXBhcmVJbnRlcnNlY3Rpb24pO1xuICAgIGxpbmskMShzdWJqZWN0KTtcbiAgICBsaW5rJDEoY2xpcCk7XG5cbiAgICBmb3IgKGkgPSAwLCBuID0gY2xpcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNsaXBbaV0uZSA9IHN0YXJ0SW5zaWRlID0gIXN0YXJ0SW5zaWRlO1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IHN1YmplY3RbMF0sXG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgcG9pbnQ7XG5cbiAgICB3aGlsZSAoMSkge1xuICAgICAgLy8gRmluZCBmaXJzdCB1bnZpc2l0ZWQgaW50ZXJzZWN0aW9uLlxuICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydCxcbiAgICAgICAgICBpc1N1YmplY3QgPSB0cnVlO1xuICAgICAgd2hpbGUgKGN1cnJlbnQudikgaWYgKChjdXJyZW50ID0gY3VycmVudC5uKSA9PT0gc3RhcnQpIHJldHVybjtcbiAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG4gICAgICAgICAgICBmb3IgKGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsaW5rJDEoYXJyYXkpIHtcbiAgICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuICAgIHZhciBuLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgYSA9IGFycmF5WzBdLFxuICAgICAgICBiO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhLm4gPSBiID0gYXJyYXlbaV07XG4gICAgICBiLnAgPSBhO1xuICAgICAgYSA9IGI7XG4gICAgfVxuICAgIGEubiA9IGIgPSBhcnJheVswXTtcbiAgICBiLnAgPSBhO1xuICB9XG5cbiAgdmFyIGNsaXBNYXggPSAxZTk7XG4gIHZhciBjbGlwTWluID0gLWNsaXBNYXg7XG4gIC8vIFRPRE8gVXNlIGQzLXBvbHlnb27igJlzIHBvbHlnb25Db250YWlucyBoZXJlIGZvciB0aGUgcmluZyBjaGVjaz9cbiAgLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbiAgZnVuY3Rpb24gY2xpcEV4dGVudCh4MCwgeTAsIHgxLCB5MSkge1xuXG4gICAgZnVuY3Rpb24gdmlzaWJsZSh4LCB5KSB7XG4gICAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgICAgaWYgKGZyb20gPT0gbnVsbFxuICAgICAgICAgIHx8IChhID0gY29ybmVyKGZyb20sIGRpcmVjdGlvbikpICE9PSAoYTEgPSBjb3JuZXIodG8sIGRpcmVjdGlvbikpXG4gICAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgIGRvIHN0cmVhbS5wb2ludChhID09PSAwIHx8IGEgPT09IDMgPyB4MCA6IHgxLCBhID4gMSA/IHkxIDogeTApO1xuICAgICAgICB3aGlsZSAoKGEgPSAoYSArIGRpcmVjdGlvbiArIDQpICUgNCkgIT09IGExKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IGVwc2lsb24kNCA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xuICAgICAgICAgIDogYWJzKHBbMF0gLSB4MSkgPCBlcHNpbG9uJDQgPyBkaXJlY3Rpb24gPiAwID8gMiA6IDFcbiAgICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiQ0ID8gZGlyZWN0aW9uID4gMCA/IDEgOiAwXG4gICAgICAgICAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7IC8vIGFicyhwWzFdIC0geTEpIDwgZXBzaWxvblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludChhLngsIGIueCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGFyZVBvaW50KGEsIGIpIHtcbiAgICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSxcbiAgICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICAgIHJldHVybiBjYSAhPT0gY2IgPyBjYSAtIGNiXG4gICAgICAgICAgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdXG4gICAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgICAgOiBjYSA9PT0gMiA/IGFbMV0gLSBiWzFdXG4gICAgICAgICAgOiBiWzBdIC0gYVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgYWN0aXZlU3RyZWFtID0gc3RyZWFtLFxuICAgICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgICBwb2x5Z29uLFxuICAgICAgICAgIHJpbmcsXG4gICAgICAgICAgeF9fLCB5X18sIHZfXywgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgICB4XywgeV8sIHZfLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICAgIGZpcnN0LFxuICAgICAgICAgIGNsZWFuO1xuXG4gICAgICB2YXIgY2xpcFN0cmVhbSA9IHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICAgIHBvbHlnb25FbmQ6IHBvbHlnb25FbmRcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgICAgaWYgKHZpc2libGUoeCwgeSkpIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgICAgdmFyIHdpbmRpbmcgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICAgIGEwID0gYjAsIGExID0gYjEsIHBvaW50ID0gcmluZ1tqXSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTtcbiAgICAgICAgICAgIGlmIChhMSA8PSB5MSkgeyBpZiAoYjEgPiB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPiAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpICsrd2luZGluZzsgfVxuICAgICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgICAgfVxuXG4gICAgICAvLyBCdWZmZXIgZ2VvbWV0cnkgd2l0aGluIGEgcG9seWdvbiBhbmQgdGhlbiBjbGlwIGl0IGVuIG1hc3NlLlxuICAgICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgICBhY3RpdmVTdHJlYW0gPSBidWZmZXJTdHJlYW0sIHNlZ21lbnRzID0gW10sIHBvbHlnb24gPSBbXSwgY2xlYW4gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uSW5zaWRlKCksXG4gICAgICAgICAgICBjbGVhbkluc2lkZSA9IGNsZWFuICYmIHN0YXJ0SW5zaWRlLFxuICAgICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUgfHwgdmlzaWJsZSkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgICB2XyA9IGZhbHNlO1xuICAgICAgICB4XyA9IHlfID0gTmFOO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPIHJhdGhlciB0aGFuIHNwZWNpYWwtY2FzZSBwb2x5Z29ucywgc2ltcGx5IGhhbmRsZSB0aGVtIHNlcGFyYXRlbHkuXG4gICAgICAvLyBJZGVhbGx5LCBjb2luY2lkZW50IGludGVyc2VjdGlvbiBwb2ludHMgc2hvdWxkIGJlIGppdHRlcmVkIHRvIGF2b2lkXG4gICAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBpZiAoc2VnbWVudHMpIHtcbiAgICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlclN0cmVhbS5yZWpvaW4oKTtcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlclN0cmVhbS5yZXN1bHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgICBpZiAodl8pIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICAgIHZhciB2ID0gdmlzaWJsZSh4LCB5KTtcbiAgICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhID0gW3hfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeF8pKSwgeV8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5XykpXSxcbiAgICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xuICAgICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVudCQxKCkge1xuICAgIHZhciB4MCA9IDAsXG4gICAgICAgIHkwID0gMCxcbiAgICAgICAgeDEgPSA5NjAsXG4gICAgICAgIHkxID0gNTAwLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICAgIGNsaXA7XG5cbiAgICByZXR1cm4gY2xpcCA9IHtcbiAgICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IGNsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpKGNhY2hlU3RyZWFtID0gc3RyZWFtKTtcbiAgICAgIH0sXG4gICAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSwgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGwsIGNsaXApIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBsZW5ndGhTdW07XG52YXIgICBsYW1iZGEwJDI7XG52YXIgICBzaW5QaGkwJDE7XG52YXIgICBjb3NQaGkwJDE7XG4gIHZhciBsZW5ndGhTdHJlYW0gPSB7XG4gICAgc3BoZXJlOiBub29wJDIsXG4gICAgcG9pbnQ6IG5vb3AkMixcbiAgICBsaW5lU3RhcnQ6IGxlbmd0aExpbmVTdGFydCxcbiAgICBsaW5lRW5kOiBub29wJDIsXG4gICAgcG9seWdvblN0YXJ0OiBub29wJDIsXG4gICAgcG9seWdvbkVuZDogbm9vcCQyXG4gIH07XG5cbiAgZnVuY3Rpb24gbGVuZ3RoTGluZVN0YXJ0KCkge1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gICAgbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBsZW5ndGhMaW5lRW5kO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoTGluZUVuZCgpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IG5vb3AkMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgbGFtYmRhMCQyID0gbGFtYmRhLCBzaW5QaGkwJDEgPSBzaW4kMShwaGkpLCBjb3NQaGkwJDEgPSBjb3MkMShwaGkpO1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgdmFyIHNpblBoaSA9IHNpbiQxKHBoaSksXG4gICAgICAgIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgIGRlbHRhID0gYWJzKGxhbWJkYSAtIGxhbWJkYTAkMiksXG4gICAgICAgIGNvc0RlbHRhID0gY29zJDEoZGVsdGEpLFxuICAgICAgICBzaW5EZWx0YSA9IHNpbiQxKGRlbHRhKSxcbiAgICAgICAgeCA9IGNvc1BoaSAqIHNpbkRlbHRhLFxuICAgICAgICB5ID0gY29zUGhpMCQxICogc2luUGhpIC0gc2luUGhpMCQxICogY29zUGhpICogY29zRGVsdGEsXG4gICAgICAgIHogPSBzaW5QaGkwJDEgKiBzaW5QaGkgKyBjb3NQaGkwJDEgKiBjb3NQaGkgKiBjb3NEZWx0YTtcbiAgICBsZW5ndGhTdW0uYWRkKGF0YW4yKHNxcnQkMSh4ICogeCArIHkgKiB5KSwgeikpO1xuICAgIGxhbWJkYTAkMiA9IGxhbWJkYSwgc2luUGhpMCQxID0gc2luUGhpLCBjb3NQaGkwJDEgPSBjb3NQaGk7XG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGgkMihvYmplY3QpIHtcbiAgICBpZiAobGVuZ3RoU3VtKSBsZW5ndGhTdW0ucmVzZXQoKTtcbiAgICBlbHNlIGxlbmd0aFN1bSA9IGFkZGVyKCk7XG4gICAgc3RyZWFtKG9iamVjdCwgbGVuZ3RoU3RyZWFtKTtcbiAgICByZXR1cm4gK2xlbmd0aFN1bTtcbiAgfVxuXG4gIHZhciBjb29yZGluYXRlcyA9IFtudWxsLCBudWxsXTtcbnZhciAgIG9iamVjdCQxID0ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICAgIGNvb3JkaW5hdGVzWzFdID0gYjtcbiAgICByZXR1cm4gbGVuZ3RoJDIob2JqZWN0JDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gICAgdmFyIHkgPSByYW5nZSh5MCwgeTEgLSBlcHNpbG9uJDQsIGR5KS5jb25jYXQoeTEpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlWSh4MCwgeDEsIGR4KSB7XG4gICAgdmFyIHggPSByYW5nZSh4MCwgeDEgLSBlcHNpbG9uJDQsIGR4KS5jb25jYXQoeDEpO1xuICAgIHJldHVybiBmdW5jdGlvbih5KSB7IHJldHVybiB4Lm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuICAgIHZhciB4MSwgeDAsIFgxLCBYMCxcbiAgICAgICAgeTEsIHkwLCBZMSwgWTAsXG4gICAgICAgIGR4ID0gMTAsIGR5ID0gZHgsIERYID0gOTAsIERZID0gMzYwLFxuICAgICAgICB4LCB5LCBYLCBZLFxuICAgICAgICBwcmVjaXNpb24gPSAyLjU7XG5cbiAgICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gICAgICByZXR1cm4ge3R5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBsaW5lcygpfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgIHJldHVybiByYW5nZShjZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpXG4gICAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKFkwIC8gRFkpICogRFksIFkxLCBEWSkubWFwKFkpKVxuICAgICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbCh4MCAvIGR4KSAqIGR4LCB4MSwgZHgpLmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiBhYnMoeCAlIERYKSA+IGVwc2lsb24kNDsgfSkubWFwKHgpKVxuICAgICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbCh5MCAvIGR5KSAqIGR5LCB5MSwgZHkpLmZpbHRlcihmdW5jdGlvbih5KSB7IHJldHVybiBhYnMoeSAlIERZKSA+IGVwc2lsb24kNDsgfSkubWFwKHkpKTtcbiAgICB9XG5cbiAgICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykgeyByZXR1cm4ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9OyB9KTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgICBjb29yZGluYXRlczogW1xuICAgICAgICAgIFgoWDApLmNvbmNhdChcbiAgICAgICAgICBZKFkxKS5zbGljZSgxKSxcbiAgICAgICAgICBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksXG4gICAgICAgICAgWShZMCkucmV2ZXJzZSgpLnNsaWNlKDEpKVxuICAgICAgICBdXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1pbm9yKCk7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1ham9yKF8pLmV4dGVudE1pbm9yKF8pO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuZXh0ZW50TWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbW1gwLCBZMF0sIFtYMSwgWTFdXTtcbiAgICAgIFgwID0gK19bMF1bMF0sIFgxID0gK19bMV1bMF07XG4gICAgICBZMCA9ICtfWzBdWzFdLCBZMSA9ICtfWzFdWzFdO1xuICAgICAgaWYgKFgwID4gWDEpIF8gPSBYMCwgWDAgPSBYMSwgWDEgPSBfO1xuICAgICAgaWYgKFkwID4gWTEpIF8gPSBZMCwgWTAgPSBZMSwgWTEgPSBfO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLmV4dGVudE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgICB4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdO1xuICAgICAgeTAgPSArX1swXVsxXSwgeTEgPSArX1sxXVsxXTtcbiAgICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcbiAgICAgIGlmICh5MCA+IHkxKSBfID0geTAsIHkwID0geTEsIHkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNaW5vcigpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWFqb3IoXykuc3RlcE1pbm9yKF8pO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuc3RlcE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW0RYLCBEWV07XG4gICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLnN0ZXBNaW5vciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcmVjaXNpb247XG4gICAgICBwcmVjaXNpb24gPSArXztcbiAgICAgIHggPSBncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuICAgICAgeSA9IGdyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuICAgICAgWCA9IGdyYXRpY3VsZVgoWTAsIFkxLCA5MCk7XG4gICAgICBZID0gZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG5cbiAgICByZXR1cm4gZ3JhdGljdWxlXG4gICAgICAgIC5leHRlbnRNYWpvcihbWy0xODAsIC05MCArIGVwc2lsb24kNF0sIFsxODAsIDkwIC0gZXBzaWxvbiQ0XV0pXG4gICAgICAgIC5leHRlbnRNaW5vcihbWy0xODAsIC04MCAtIGVwc2lsb24kNF0sIFsxODAsIDgwICsgZXBzaWxvbiQ0XV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUkMihhLCBiKSB7XG4gICAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICAgIHkwID0gYVsxXSAqIHJhZGlhbnMsXG4gICAgICAgIHgxID0gYlswXSAqIHJhZGlhbnMsXG4gICAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICAgIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgc3kwID0gc2luJDEoeTApLFxuICAgICAgICBjeTEgPSBjb3MkMSh5MSksXG4gICAgICAgIHN5MSA9IHNpbiQxKHkxKSxcbiAgICAgICAga3gwID0gY3kwICogY29zJDEoeDApLFxuICAgICAgICBreTAgPSBjeTAgKiBzaW4kMSh4MCksXG4gICAgICAgIGt4MSA9IGN5MSAqIGNvcyQxKHgxKSxcbiAgICAgICAga3kxID0gY3kxICogc2luJDEoeDEpLFxuICAgICAgICBkID0gMiAqIGFzaW4kMShzcXJ0JDEoaGF2ZXJzaW4oeTEgLSB5MCkgKyBjeTAgKiBjeTEgKiBoYXZlcnNpbih4MSAtIHgwKSkpLFxuICAgICAgICBrID0gc2luJDEoZCk7XG5cbiAgICB2YXIgaW50ZXJwb2xhdGUgPSBkID8gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIEIgPSBzaW4kMSh0ICo9IGQpIC8gayxcbiAgICAgICAgICBBID0gc2luJDEoZCAtIHQpIC8gayxcbiAgICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgICAgeSA9IEEgKiBreTAgKyBCICoga3kxLFxuICAgICAgICAgIHogPSBBICogc3kwICsgQiAqIHN5MTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGF0YW4yKHksIHgpICogZGVncmVlcyQxLFxuICAgICAgICBhdGFuMih6LCBzcXJ0JDEoeCAqIHggKyB5ICogeSkpICogZGVncmVlcyQxXG4gICAgICBdO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbeDAgKiBkZWdyZWVzJDEsIHkwICogZGVncmVlcyQxXTtcbiAgICB9O1xuXG4gICAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXG4gICAgcmV0dXJuIGludGVycG9sYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkkNyh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cblxudmFyICAgYXJlYVN1bSQxID0gYWRkZXIoKTtcbnZhciAgIGFyZWFSaW5nU3VtJDEgPSBhZGRlcigpO1xuICB2YXIgeDAwO1xuICB2YXIgeTAwO1xudmFyICAgeDAkMTtcbnZhciAgIHkwJDE7XG4gIHZhciBhcmVhU3RyZWFtJDEgPSB7XG4gICAgcG9pbnQ6IG5vb3AkMixcbiAgICBsaW5lU3RhcnQ6IG5vb3AkMixcbiAgICBsaW5lRW5kOiBub29wJDIsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGFyZWFTdHJlYW0kMS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0JDE7XG4gICAgICBhcmVhU3RyZWFtJDEubGluZUVuZCA9IGFyZWFSaW5nRW5kJDE7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGFyZWFTdHJlYW0kMS5saW5lU3RhcnQgPSBhcmVhU3RyZWFtJDEubGluZUVuZCA9IGFyZWFTdHJlYW0kMS5wb2ludCA9IG5vb3AkMjtcbiAgICAgIGFyZWFTdW0kMS5hZGQoYWJzKGFyZWFSaW5nU3VtJDEpKTtcbiAgICAgIGFyZWFSaW5nU3VtJDEucmVzZXQoKTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJlYSA9IGFyZWFTdW0kMSAvIDI7XG4gICAgICBhcmVhU3VtJDEucmVzZXQoKTtcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBhcmVhUmluZ1N0YXJ0JDEoKSB7XG4gICAgYXJlYVN0cmVhbSQxLnBvaW50ID0gYXJlYVBvaW50Rmlyc3QkMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0JDEoeCwgeSkge1xuICAgIGFyZWFTdHJlYW0kMS5wb2ludCA9IGFyZWFQb2ludCQxO1xuICAgIHgwMCA9IHgwJDEgPSB4LCB5MDAgPSB5MCQxID0geTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludCQxKHgsIHkpIHtcbiAgICBhcmVhUmluZ1N1bSQxLmFkZCh5MCQxICogeCAtIHgwJDEgKiB5KTtcbiAgICB4MCQxID0geCwgeTAkMSA9IHk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUmluZ0VuZCQxKCkge1xuICAgIGFyZWFQb2ludCQxKHgwMCwgeTAwKTtcbiAgfVxuXG52YXIgICB4MCQyID0gSW5maW5pdHk7XG52YXIgICB5MCQyID0geDAkMjtcbiAgdmFyIHgxID0gLXgwJDI7XG4gIHZhciB5MSA9IHgxO1xuICB2YXIgYm91bmRzU3RyZWFtJDEgPSB7XG4gICAgcG9pbnQ6IGJvdW5kc1BvaW50JDEsXG4gICAgbGluZVN0YXJ0OiBub29wJDIsXG4gICAgbGluZUVuZDogbm9vcCQyLFxuICAgIHBvbHlnb25TdGFydDogbm9vcCQyLFxuICAgIHBvbHlnb25FbmQ6IG5vb3AkMixcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGJvdW5kcyA9IFtbeDAkMiwgeTAkMl0sIFt4MSwgeTFdXTtcbiAgICAgIHgxID0geTEgPSAtKHkwJDIgPSB4MCQyID0gSW5maW5pdHkpO1xuICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYm91bmRzUG9pbnQkMSh4LCB5KSB7XG4gICAgaWYgKHggPCB4MCQyKSB4MCQyID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCQyKSB5MCQyID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxudmFyICAgWDAkMSA9IDA7XG52YXIgICBZMCQxID0gMDtcbnZhciAgIFowJDEgPSAwO1xudmFyICAgWDEkMSA9IDA7XG52YXIgICBZMSQxID0gMDtcbnZhciAgIFoxJDEgPSAwO1xudmFyICAgWDIkMSA9IDA7XG52YXIgICBZMiQxID0gMDtcbnZhciAgIFoyJDEgPSAwO1xudmFyICAgeDAwJDE7XG52YXIgICB5MDAkMTtcbnZhciAgIHgwJDM7XG52YXIgICB5MCQzO1xuICB2YXIgY2VudHJvaWRTdHJlYW0kMSA9IHtcbiAgICBwb2ludDogY2VudHJvaWRQb2ludCQxLFxuICAgIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQkMSxcbiAgICBsaW5lRW5kOiBjZW50cm9pZExpbmVFbmQkMSxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydCQxO1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kJDE7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50JDE7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0JDE7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQkMTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2VudHJvaWQgPSBaMiQxID8gW1gyJDEgLyBaMiQxLCBZMiQxIC8gWjIkMV1cbiAgICAgICAgICA6IFoxJDEgPyBbWDEkMSAvIFoxJDEsIFkxJDEgLyBaMSQxXVxuICAgICAgICAgIDogWjAkMSA/IFtYMCQxIC8gWjAkMSwgWTAkMSAvIFowJDFdXG4gICAgICAgICAgOiBbTmFOLCBOYU5dO1xuICAgICAgWDAkMSA9IFkwJDEgPSBaMCQxID1cbiAgICAgIFgxJDEgPSBZMSQxID0gWjEkMSA9XG4gICAgICBYMiQxID0gWTIkMSA9IFoyJDEgPSAwO1xuICAgICAgcmV0dXJuIGNlbnRyb2lkO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50JDEoeCwgeSkge1xuICAgIFgwJDEgKz0geDtcbiAgICBZMCQxICs9IHk7XG4gICAgKytaMCQxO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQkMSgpIHtcbiAgICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0TGluZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50TGluZTtcbiAgICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRMaW5lKHgsIHkpIHtcbiAgICB2YXIgZHggPSB4IC0geDAkMywgZHkgPSB5IC0geTAkMywgeiA9IHNxcnQkMShkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgWDEkMSArPSB6ICogKHgwJDMgKyB4KSAvIDI7XG4gICAgWTEkMSArPSB6ICogKHkwJDMgKyB5KSAvIDI7XG4gICAgWjEkMSArPSB6O1xuICAgIGNlbnRyb2lkUG9pbnQkMSh4MCQzID0geCwgeTAkMyA9IHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kJDEoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnQkMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0JDEoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdFJpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQkMSgpIHtcbiAgICBjZW50cm9pZFBvaW50UmluZyh4MDAkMSwgeTAwJDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0UmluZyh4LCB5KSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRSaW5nO1xuICAgIGNlbnRyb2lkUG9pbnQkMSh4MDAkMSA9IHgwJDMgPSB4LCB5MDAkMSA9IHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRSaW5nKHgsIHkpIHtcbiAgICB2YXIgZHggPSB4IC0geDAkMyxcbiAgICAgICAgZHkgPSB5IC0geTAkMyxcbiAgICAgICAgeiA9IHNxcnQkMShkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICBYMSQxICs9IHogKiAoeDAkMyArIHgpIC8gMjtcbiAgICBZMSQxICs9IHogKiAoeTAkMyArIHkpIC8gMjtcbiAgICBaMSQxICs9IHo7XG5cbiAgICB6ID0geTAkMyAqIHggLSB4MCQzICogeTtcbiAgICBYMiQxICs9IHogKiAoeDAkMyArIHgpO1xuICAgIFkyJDEgKz0geiAqICh5MCQzICsgeSk7XG4gICAgWjIkMSArPSB6ICogMztcbiAgICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFBhdGhDb250ZXh0KGNvbnRleHQpIHtcbiAgICB2YXIgcG9pbnRSYWRpdXMgPSA0LjU7XG5cbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuXG4gICAgICAvLyBXaGlsZSBpbnNpZGUgYSBsaW5lLCBvdmVycmlkZSBwb2ludCB0byBtb3ZlVG8gdGhlbiBsaW5lVG8uXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmVTdGFydDsgfSxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG5cbiAgICAgIC8vIFdoaWxlIGluc2lkZSBhIHBvbHlnb24sIG92ZXJyaWRlIGxpbmVFbmQgdG8gY2xvc2VQYXRoLlxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kUG9seWdvbjsgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7IHN0cmVhbS5wb2ludCA9IHBvaW50OyB9LFxuXG4gICAgICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgICAgICBwb2ludFJhZGl1cyA9IF87XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuXG4gICAgICByZXN1bHQ6IG5vb3AkMlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcG9pbnRSYWRpdXMsIHkpO1xuICAgICAgY29udGV4dC5hcmMoeCwgeSwgcG9pbnRSYWRpdXMsIDAsIHRhdSQ0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmVTdGFydCh4LCB5KSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG5cbiAgZnVuY3Rpb24gUGF0aFN0cmluZygpIHtcbiAgICB2YXIgcG9pbnRDaXJjbGUgPSBjaXJjbGUkMig0LjUpLFxuICAgICAgICBzdHJpbmcgPSBbXTtcblxuICAgIHZhciBzdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgfSxcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHBvaW50Q2lyY2xlID0gY2lyY2xlJDIoXyk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICAgICAgc3RyaW5nID0gW107XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICBzdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHksIHBvaW50Q2lyY2xlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmVTdGFydCh4LCB5KSB7XG4gICAgICBzdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZSh4LCB5KSB7XG4gICAgICBzdHJpbmcucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcbiAgICAgIHN0cmluZy5wdXNoKFwiWlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlJDIocmFkaXVzKSB7XG4gICAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIC0yICogcmFkaXVzXG4gICAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAyICogcmFkaXVzXG4gICAgICAgICsgXCJ6XCI7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleCQzKCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNSxcbiAgICAgICAgcHJvamVjdGlvbixcbiAgICAgICAgcHJvamVjdGlvblN0cmVhbSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY29udGV4dFN0cmVhbTtcblxuICAgIGZ1bmN0aW9uIHBhdGgob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY29udGV4dFN0cmVhbSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XG4gICAgfVxuXG4gICAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGFyZWFTdHJlYW0kMSkpO1xuICAgICAgcmV0dXJuIGFyZWFTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5ib3VuZHMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oYm91bmRzU3RyZWFtJDEpKTtcbiAgICAgIHJldHVybiBib3VuZHNTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjZW50cm9pZFN0cmVhbSQxKSk7XG4gICAgICByZXR1cm4gY2VudHJvaWRTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdGlvblN0cmVhbSA9IChwcm9qZWN0aW9uID0gXykgPT0gbnVsbCA/IGlkZW50aXR5JDcgOiBfLnN0cmVhbSwgcGF0aCkgOiBwcm9qZWN0aW9uO1xuICAgIH07XG5cbiAgICBwYXRoLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuICAgICAgY29udGV4dFN0cmVhbSA9IChjb250ZXh0ID0gXykgPT0gbnVsbCA/IG5ldyBQYXRoU3RyaW5nIDogbmV3IFBhdGhDb250ZXh0KF8pO1xuICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKHBvaW50UmFkaXVzKTtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH07XG5cbiAgICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBhdGgucHJvamVjdGlvbihudWxsKS5jb250ZXh0KG51bGwpO1xuICB9XG5cbiAgdmFyIHN1bSQyID0gYWRkZXIoKTtcblxuICBmdW5jdGlvbiBwb2x5Z29uQ29udGFpbnMocG9seWdvbiwgcG9pbnQpIHtcbiAgICB2YXIgbGFtYmRhID0gcG9pbnRbMF0sXG4gICAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgICBub3JtYWwgPSBbc2luJDEobGFtYmRhKSwgLWNvcyQxKGxhbWJkYSksIDBdLFxuICAgICAgICBhbmdsZSA9IDAsXG4gICAgICAgIHdpbmRpbmcgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCEobSA9IChyaW5nID0gcG9seWdvbltpXSkubGVuZ3RoKSkgY29udGludWU7XG4gICAgICB2YXIgcmluZyxcbiAgICAgICAgICBtLFxuICAgICAgICAgIHBvaW50MCA9IHJpbmdbbSAtIDFdLFxuICAgICAgICAgIGxhbWJkYTAgPSBwb2ludDBbMF0sXG4gICAgICAgICAgcGhpMCA9IHBvaW50MFsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgICAgc2luUGhpMCA9IHNpbiQxKHBoaTApLFxuICAgICAgICAgIGNvc1BoaTAgPSBjb3MkMShwaGkwKTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2osIGxhbWJkYTAgPSBsYW1iZGExLCBzaW5QaGkwID0gc2luUGhpMSwgY29zUGhpMCA9IGNvc1BoaTEsIHBvaW50MCA9IHBvaW50MSkge1xuICAgICAgICB2YXIgcG9pbnQxID0gcmluZ1tqXSxcbiAgICAgICAgICAgIGxhbWJkYTEgPSBwb2ludDFbMF0sXG4gICAgICAgICAgICBwaGkxID0gcG9pbnQxWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgICAgIHNpblBoaTEgPSBzaW4kMShwaGkxKSxcbiAgICAgICAgICAgIGNvc1BoaTEgPSBjb3MkMShwaGkxKSxcbiAgICAgICAgICAgIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgICAgICBzaWduID0gZGVsdGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxuICAgICAgICAgICAgYW50aW1lcmlkaWFuID0gYWJzRGVsdGEgPiBwaSQ0LFxuICAgICAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGkxO1xuXG4gICAgICAgIHN1bSQyLmFkZChhdGFuMihrICogc2lnbiAqIHNpbiQxKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zJDEoYWJzRGVsdGEpKSk7XG4gICAgICAgIGFuZ2xlICs9IGFudGltZXJpZGlhbiA/IGRlbHRhICsgc2lnbiAqIHRhdSQ0IDogZGVsdGE7XG5cbiAgICAgICAgLy8gQXJlIHRoZSBsb25naXR1ZGVzIGVpdGhlciBzaWRlIG9mIHRoZSBwb2ludOKAmXMgbWVyaWRpYW4gKGxhbWJkYSksXG4gICAgICAgIC8vIGFuZCBhcmUgdGhlIGxhdGl0dWRlcyBzbWFsbGVyIHRoYW4gdGhlIHBhcmFsbGVsIChwaGkpP1xuICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICAgIHZhciBhcmMgPSBjYXJ0ZXNpYW5Dcm9zcyhjYXJ0ZXNpYW4ocG9pbnQwKSwgY2FydGVzaWFuKHBvaW50MSkpO1xuICAgICAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoYXJjKTtcbiAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICB2YXIgcGhpQXJjID0gKGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAtMSA6IDEpICogYXNpbiQxKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgICAgaWYgKHBoaSA+IHBoaUFyYyB8fCBwaGkgPT09IHBoaUFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcbiAgICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IDEgOiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaXJzdCwgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIFNvdXRoIHBvbGUgaXMgaW5zaWRlIG9yIG91dHNpZGU6XG4gICAgLy9cbiAgICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gICAgLy8gKiB0aGUgcG9seWdvbiB3aW5kcyBhcm91bmQgaXQgaW4gYSBjbG9ja3dpc2UgZGlyZWN0aW9uLlxuICAgIC8vICogdGhlIHBvbHlnb24gZG9lcyBub3QgKGN1bXVsYXRpdmVseSkgd2luZCBhcm91bmQgaXQsIGJ1dCBoYXMgYSBuZWdhdGl2ZVxuICAgIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAgIC8vXG4gICAgLy8gU2Vjb25kLCBjb3VudCB0aGUgKHNpZ25lZCkgbnVtYmVyIG9mIHRpbWVzIGEgc2VnbWVudCBjcm9zc2VzIGEgbGFtYmRhXG4gICAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgICAvLyBzYW1lIHNpZGUgYXMgdGhlIFNvdXRoIHBvbGUuXG5cbiAgICB2YXIgY29udGFpbnMgPSAoYW5nbGUgPCAtZXBzaWxvbiQ0IHx8IGFuZ2xlIDwgZXBzaWxvbiQ0ICYmIHN1bSQyIDwgLWVwc2lsb24kNCkgXiAod2luZGluZyAmIDEpO1xuICAgIHN1bSQyLnJlc2V0KCk7XG4gICAgcmV0dXJuIGNvbnRhaW5zO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcChwb2ludFZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc3RhcnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ocm90YXRlLCBzaW5rKSB7XG4gICAgICB2YXIgbGluZSA9IGNsaXBMaW5lKHNpbmspLFxuICAgICAgICAgIHJvdGF0ZWRTdGFydCA9IHJvdGF0ZS5pbnZlcnQoc3RhcnRbMF0sIHN0YXJ0WzFdKSxcbiAgICAgICAgICByaW5nQnVmZmVyID0gY2xpcEJ1ZmZlcigpLFxuICAgICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgICAgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSxcbiAgICAgICAgICBwb2x5Z29uLFxuICAgICAgICAgIHNlZ21lbnRzLFxuICAgICAgICAgIHJpbmc7XG5cbiAgICAgIHZhciBjbGlwID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludFJpbmc7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICAgIGNsaXAubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgICAgc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cyk7XG4gICAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHJvdGF0ZWRTdGFydCk7XG4gICAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc2luayk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFydEluc2lkZSkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uRW5kKCksIHBvbHlnb25TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgICAgc2luay5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZShsYW1iZGEsIHBoaSk7XG4gICAgICAgIGlmIChwb2ludFZpc2libGUobGFtYmRhID0gcG9pbnRbMF0sIHBoaSA9IHBvaW50WzFdKSkgc2luay5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xuICAgICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgICAgbGluZS5saW5lU3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgICBsaW5lLmxpbmVFbmQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9pbnRSaW5nKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHJpbmcucHVzaChbbGFtYmRhLCBwaGldKTtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKGxhbWJkYSwgcGhpKTtcbiAgICAgICAgcmluZ1NpbmsucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICByaW5nU2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgcmluZyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICAgIHJpbmdTaW5rLmxpbmVFbmQoKTtcblxuICAgICAgICB2YXIgY2xlYW4gPSByaW5nU2luay5jbGVhbigpLFxuICAgICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICAgIGksIG4gPSByaW5nU2VnbWVudHMubGVuZ3RoLCBtLFxuICAgICAgICAgICAgc2VnbWVudCxcbiAgICAgICAgICAgIHBvaW50O1xuXG4gICAgICAgIHJpbmcucG9wKCk7XG4gICAgICAgIHBvbHlnb24ucHVzaChyaW5nKTtcbiAgICAgICAgcmluZyA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFuKSByZXR1cm47XG5cbiAgICAgICAgLy8gTm8gaW50ZXJzZWN0aW9ucy5cbiAgICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICAgIHNlZ21lbnQgPSByaW5nU2VnbWVudHNbMF07XG4gICAgICAgICAgaWYgKChtID0gc2VnbWVudC5sZW5ndGggLSAxKSA+IDApIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBzaW5rLnBvaW50KChwb2ludCA9IHNlZ21lbnRbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVqb2luIGNvbm5lY3RlZCBzZWdtZW50cy5cbiAgICAgICAgLy8gVE9ETyByZXVzZSByaW5nQnVmZmVyLnJlam9pbigpP1xuICAgICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cbiAgICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKHZhbGlkU2VnbWVudCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgICByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAxO1xuICB9XG5cbiAgLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4gIC8vIGFuZCBjaXJjbGUgY2xpcHBpbmcsIHRoZSBzYW1lIGNvbXBhcmlzb24gaXMgdXNlZC5cbiAgZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSQzIC0gZXBzaWxvbiQ0IDogaGFsZlBpJDMgLSBhWzFdKVxuICAgICAgICAgLSAoKGIgPSBiLngpWzBdIDwgMCA/IGJbMV0gLSBoYWxmUGkkMyAtIGVwc2lsb24kNCA6IGhhbGZQaSQzIC0gYlsxXSk7XG4gIH1cblxuICB2YXIgY2xpcEFudGltZXJpZGlhbiA9IGNsaXAoXG4gICAgZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIGNsaXBBbnRpbWVyaWRpYW5MaW5lLFxuICAgIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSxcbiAgICBbLXBpJDQsIC1oYWxmUGkkM11cbiAgKTtcblxuICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzOiAwIC0gdGhlcmUgd2VyZVxuICAvLyBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vIGludGVyc2VjdGlvbnM7IDIgLSB0aGVyZSB3ZXJlXG4gIC8vIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgc2hvdWxkIGJlIHJlam9pbmVkLlxuICBmdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuTGluZShzdHJlYW0pIHtcbiAgICB2YXIgbGFtYmRhMCA9IE5hTixcbiAgICAgICAgcGhpMCA9IE5hTixcbiAgICAgICAgc2lnbjAgPSBOYU4sXG4gICAgICAgIGNsZWFuOyAvLyBubyBpbnRlcnNlY3Rpb25zXG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBjbGVhbiA9IDE7XG4gICAgICB9LFxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYTEsIHBoaTEpIHtcbiAgICAgICAgdmFyIHNpZ24xID0gbGFtYmRhMSA+IDAgPyBwaSQ0IDogLXBpJDQsXG4gICAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICAgIGlmIChhYnMoZGVsdGEgLSBwaSQ0KSA8IGVwc2lsb24kNCkgeyAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXG4gICAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAsIHBoaTAgPSAocGhpMCArIHBoaTEpIC8gMiA+IDAgPyBoYWxmUGkkMyA6IC1oYWxmUGkkMyk7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGExLCBwaGkwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc2lnbjAgIT09IHNpZ24xICYmIGRlbHRhID49IHBpJDQpIHsgLy8gbGluZSBjcm9zc2VzIGFudGltZXJpZGlhblxuICAgICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24kNCkgbGFtYmRhMCAtPSBzaWduMCAqIGVwc2lsb24kNDsgLy8gaGFuZGxlIGRlZ2VuZXJhY2llc1xuICAgICAgICAgIGlmIChhYnMobGFtYmRhMSAtIHNpZ24xKSA8IGVwc2lsb24kNCkgbGFtYmRhMSAtPSBzaWduMSAqIGVwc2lsb24kNDtcbiAgICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwID0gbGFtYmRhMSwgcGhpMCA9IHBoaTEpO1xuICAgICAgICBzaWduMCA9IHNpZ24xO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICAgIH0sXG4gICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEpIHtcbiAgICB2YXIgY29zUGhpMCxcbiAgICAgICAgY29zUGhpMSxcbiAgICAgICAgc2luTGFtYmRhMExhbWJkYTEgPSBzaW4kMShsYW1iZGEwIC0gbGFtYmRhMSk7XG4gICAgcmV0dXJuIGFicyhzaW5MYW1iZGEwTGFtYmRhMSkgPiBlcHNpbG9uJDRcbiAgICAgICAgPyBhdGFuKChzaW4kMShwaGkwKSAqIChjb3NQaGkxID0gY29zJDEocGhpMSkpICogc2luJDEobGFtYmRhMSlcbiAgICAgICAgICAgIC0gc2luJDEocGhpMSkgKiAoY29zUGhpMCA9IGNvcyQxKHBoaTApKSAqIHNpbiQxKGxhbWJkYTApKVxuICAgICAgICAgICAgLyAoY29zUGhpMCAqIGNvc1BoaTEgKiBzaW5MYW1iZGEwTGFtYmRhMSkpXG4gICAgICAgIDogKHBoaTAgKyBwaGkxKSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgdmFyIHBoaTtcbiAgICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgICBwaGkgPSBkaXJlY3Rpb24gKiBoYWxmUGkkMztcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkNCwgcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgICAgc3RyZWFtLnBvaW50KHBpJDQsIHBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQocGkkNCwgMCk7XG4gICAgICBzdHJlYW0ucG9pbnQocGkkNCwgLXBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQoMCwgLXBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQoLXBpJDQsIC1waGkpO1xuICAgICAgc3RyZWFtLnBvaW50KC1waSQ0LCAwKTtcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkNCwgcGhpKTtcbiAgICB9IGVsc2UgaWYgKGFicyhmcm9tWzBdIC0gdG9bMF0pID4gZXBzaWxvbiQ0KSB7XG4gICAgICB2YXIgbGFtYmRhID0gZnJvbVswXSA8IHRvWzBdID8gcGkkNCA6IC1waSQ0O1xuICAgICAgcGhpID0gZGlyZWN0aW9uICogbGFtYmRhIC8gMjtcbiAgICAgIHN0cmVhbS5wb2ludCgtbGFtYmRhLCBwaGkpO1xuICAgICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwQ2lyY2xlKHJhZGl1cywgZGVsdGEpIHtcbiAgICB2YXIgY3IgPSBjb3MkMShyYWRpdXMpLFxuICAgICAgICBzbWFsbFJhZGl1cyA9IGNyID4gMCxcbiAgICAgICAgbm90SGVtaXNwaGVyZSA9IGFicyhjcikgPiBlcHNpbG9uJDQ7IC8vIFRPRE8gb3B0aW1pc2UgZm9yIHRoaXMgY29tbW9uIGNhc2VcblxuICAgIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCBmcm9tLCB0byk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmlzaWJsZShsYW1iZGEsIHBoaSkge1xuICAgICAgcmV0dXJuIGNvcyQxKGxhbWJkYSkgKiBjb3MkMShwaGkpID4gY3I7XG4gICAgfVxuXG4gICAgLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlcyB1c2VkIGZvciBwb2x5Z29uXG4gICAgLy8gY2xpcHBpbmc6IDAgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm9cbiAgICAvLyBpbnRlcnNlY3Rpb25zIDIgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgICAvLyBzaG91bGQgYmUgcmVqb2luZWQuXG4gICAgZnVuY3Rpb24gY2xpcExpbmUoc3RyZWFtKSB7XG4gICAgICB2YXIgcG9pbnQwLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICAgIGMwLCAvLyBjb2RlIGZvciBwcmV2aW91cyBwb2ludFxuICAgICAgICAgIHYwLCAvLyB2aXNpYmlsaXR5IG9mIHByZXZpb3VzIHBvaW50XG4gICAgICAgICAgdjAwLCAvLyB2aXNpYmlsaXR5IG9mIGZpcnN0IHBvaW50XG4gICAgICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdjAwID0gdjAgPSBmYWxzZTtcbiAgICAgICAgICBjbGVhbiA9IDE7XG4gICAgICAgIH0sXG4gICAgICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgICAgIHZhciBwb2ludDEgPSBbbGFtYmRhLCBwaGldLFxuICAgICAgICAgICAgICBwb2ludDIsXG4gICAgICAgICAgICAgIHYgPSB2aXNpYmxlKGxhbWJkYSwgcGhpKSxcbiAgICAgICAgICAgICAgYyA9IHNtYWxsUmFkaXVzXG4gICAgICAgICAgICAgICAgPyB2ID8gMCA6IGNvZGUobGFtYmRhLCBwaGkpXG4gICAgICAgICAgICAgICAgOiB2ID8gY29kZShsYW1iZGEgKyAobGFtYmRhIDwgMCA/IHBpJDQgOiAtcGkkNCksIHBoaSkgOiAwO1xuICAgICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgLy8gSGFuZGxlIGRlZ2VuZXJhY2llcy5cbiAgICAgICAgICAvLyBUT0RPIGlnbm9yZSBpZiBub3QgY2xpcHBpbmcgcG9seWdvbnMuXG4gICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgICAgaWYgKHBvaW50RXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IHBvaW50RXF1YWwocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgICAgICAgIHBvaW50MVswXSArPSBlcHNpbG9uJDQ7XG4gICAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uJDQ7XG4gICAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAvLyBvdXRzaWRlIGdvaW5nIGluXG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGluc2lkZSBnb2luZyBvdXRcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvaW50MCA9IHBvaW50MjtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vdEhlbWlzcGhlcmUgJiYgcG9pbnQwICYmIHNtYWxsUmFkaXVzIF4gdikge1xuICAgICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY29kZXMgZm9yIHR3byBwb2ludHMgYXJlIGRpZmZlcmVudCwgb3IgYXJlIGJvdGggemVybyxcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB0aGlzIHNlZ21lbnQgaW50ZXJzZWN0cyB3aXRoIHRoZSBzbWFsbCBjaXJjbGUuXG4gICAgICAgICAgICBpZiAoIShjICYgYzApICYmICh0ID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwLCB0cnVlKSkpIHtcbiAgICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgICBpZiAoc21hbGxSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgJiYgKCFwb2ludDAgfHwgIXBvaW50RXF1YWwocG9pbnQwLCBwb2ludDEpKSkge1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcbiAgICAgICAgfSxcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHYwKSBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBpZiB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgYW5kIHRoZSBmaXJzdFxuICAgICAgICAvLyBhbmQgbGFzdCBwb2ludHMgd2VyZSB2aXNpYmxlLlxuICAgICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGNsZWFuIHwgKCh2MDAgJiYgdjApIDw8IDEpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEludGVyc2VjdHMgdGhlIGdyZWF0IGNpcmNsZSBiZXR3ZWVuIGEgYW5kIGIgd2l0aCB0aGUgY2xpcCBjaXJjbGUuXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIHR3bykge1xuICAgICAgdmFyIHBhID0gY2FydGVzaWFuKGEpLFxuICAgICAgICAgIHBiID0gY2FydGVzaWFuKGIpO1xuXG4gICAgICAvLyBXZSBoYXZlIHR3byBwbGFuZXMsIG4xLnAgPSBkMSBhbmQgbjIucCA9IGQyLlxuICAgICAgLy8gRmluZCBpbnRlcnNlY3Rpb24gbGluZSBwKHQpID0gYzEgbjEgKyBjMiBuMiArIHQgKG4xIOKoryBuMikuXG4gICAgICB2YXIgbjEgPSBbMSwgMCwgMF0sIC8vIG5vcm1hbFxuICAgICAgICAgIG4yID0gY2FydGVzaWFuQ3Jvc3MocGEsIHBiKSxcbiAgICAgICAgICBuMm4yID0gY2FydGVzaWFuRG90KG4yLCBuMiksXG4gICAgICAgICAgbjFuMiA9IG4yWzBdLCAvLyBjYXJ0ZXNpYW5Eb3QobjEsIG4yKSxcbiAgICAgICAgICBkZXRlcm1pbmFudCA9IG4ybjIgLSBuMW4yICogbjFuMjtcblxuICAgICAgLy8gVHdvIHBvbGFyIHBvaW50cy5cbiAgICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG5cbiAgICAgIHZhciBjMSA9ICBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgICBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgICBuMXhuMiA9IGNhcnRlc2lhbkNyb3NzKG4xLCBuMiksXG4gICAgICAgICAgQSA9IGNhcnRlc2lhblNjYWxlKG4xLCBjMSksXG4gICAgICAgICAgQiA9IGNhcnRlc2lhblNjYWxlKG4yLCBjMik7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKEEsIEIpO1xuXG4gICAgICAvLyBTb2x2ZSB8cCh0KXxeMiA9IDEuXG4gICAgICB2YXIgdSA9IG4xeG4yLFxuICAgICAgICAgIHcgPSBjYXJ0ZXNpYW5Eb3QoQSwgdSksXG4gICAgICAgICAgdXUgPSBjYXJ0ZXNpYW5Eb3QodSwgdSksXG4gICAgICAgICAgdDIgPSB3ICogdyAtIHV1ICogKGNhcnRlc2lhbkRvdChBLCBBKSAtIDEpO1xuXG4gICAgICBpZiAodDIgPCAwKSByZXR1cm47XG5cbiAgICAgIHZhciB0ID0gc3FydCQxKHQyKSxcbiAgICAgICAgICBxID0gY2FydGVzaWFuU2NhbGUodSwgKC13IC0gdCkgLyB1dSk7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHEsIEEpO1xuICAgICAgcSA9IHNwaGVyaWNhbChxKTtcblxuICAgICAgaWYgKCF0d28pIHJldHVybiBxO1xuXG4gICAgICAvLyBUd28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICAgIHZhciBsYW1iZGEwID0gYVswXSxcbiAgICAgICAgICBsYW1iZGExID0gYlswXSxcbiAgICAgICAgICBwaGkwID0gYVsxXSxcbiAgICAgICAgICBwaGkxID0gYlsxXSxcbiAgICAgICAgICB6O1xuXG4gICAgICBpZiAobGFtYmRhMSA8IGxhbWJkYTApIHogPSBsYW1iZGEwLCBsYW1iZGEwID0gbGFtYmRhMSwgbGFtYmRhMSA9IHo7XG5cbiAgICAgIHZhciBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHBvbGFyID0gYWJzKGRlbHRhIC0gcGkkNCkgPCBlcHNpbG9uJDQsXG4gICAgICAgICAgbWVyaWRpYW4gPSBwb2xhciB8fCBkZWx0YSA8IGVwc2lsb24kNDtcblxuICAgICAgaWYgKCFwb2xhciAmJiBwaGkxIDwgcGhpMCkgeiA9IHBoaTAsIHBoaTAgPSBwaGkxLCBwaGkxID0gejtcblxuICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgZmlyc3QgcG9pbnQgaXMgYmV0d2VlbiBhIGFuZCBiLlxuICAgICAgaWYgKG1lcmlkaWFuXG4gICAgICAgICAgPyBwb2xhclxuICAgICAgICAgICAgPyBwaGkwICsgcGhpMSA+IDAgXiBxWzFdIDwgKGFicyhxWzBdIC0gbGFtYmRhMCkgPCBlcHNpbG9uJDQgPyBwaGkwIDogcGhpMSlcbiAgICAgICAgICAgIDogcGhpMCA8PSBxWzFdICYmIHFbMV0gPD0gcGhpMVxuICAgICAgICAgIDogZGVsdGEgPiBwaSQ0IF4gKGxhbWJkYTAgPD0gcVswXSAmJiBxWzBdIDw9IGxhbWJkYTEpKSB7XG4gICAgICAgIHZhciBxMSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuICAgICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcbiAgICAgICAgcmV0dXJuIFtxLCBzcGhlcmljYWwocTEpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZXMgYSA0LWJpdCB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBsb2NhdGlvbiBvZiBhIHBvaW50IHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHNtYWxsIGNpcmNsZSdzIGJvdW5kaW5nIGJveC5cbiAgICBmdW5jdGlvbiBjb2RlKGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgciA9IHNtYWxsUmFkaXVzID8gcmFkaXVzIDogcGkkNCAtIHJhZGl1cyxcbiAgICAgICAgICBjb2RlID0gMDtcbiAgICAgIGlmIChsYW1iZGEgPCAtcikgY29kZSB8PSAxOyAvLyBsZWZ0XG4gICAgICBlbHNlIGlmIChsYW1iZGEgPiByKSBjb2RlIHw9IDI7IC8vIHJpZ2h0XG4gICAgICBpZiAocGhpIDwgLXIpIGNvZGUgfD0gNDsgLy8gYmVsb3dcbiAgICAgIGVsc2UgaWYgKHBoaSA+IHIpIGNvZGUgfD0gODsgLy8gYWJvdmVcbiAgICAgIHJldHVybiBjb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBjbGlwKHZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc21hbGxSYWRpdXMgPyBbMCwgLXJhZGl1c10gOiBbLXBpJDQsIHJhZGl1cyAtIHBpJDRdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSQxKHByb3RvdHlwZSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHJlYW06IHRyYW5zZm9ybSQyKHByb3RvdHlwZSlcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtJDIocHJvdG90eXBlKSB7XG4gICAgZnVuY3Rpb24gVCgpIHt9XG4gICAgdmFyIHAgPSBULnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVHJhbnNmb3JtJDEucHJvdG90eXBlKTtcbiAgICBmb3IgKHZhciBrIGluIHByb3RvdHlwZSkgcFtrXSA9IHByb3RvdHlwZVtrXTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgdCA9IG5ldyBUO1xuICAgICAgdC5zdHJlYW0gPSBzdHJlYW07XG4gICAgICByZXR1cm4gdDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gVHJhbnNmb3JtJDEoKSB7fVxuXG4gIFRyYW5zZm9ybSQxLnByb3RvdHlwZSA9IHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTsgfSxcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5zcGhlcmUoKTsgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTsgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZUVuZCgpOyB9LFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpOyB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7IH1cbiAgfTtcblxuICB2YXIgbWF4RGVwdGggPSAxNjtcbiAgdmFyIGNvc01pbkRpc3RhbmNlID0gY29zJDEoMzAgKiByYWRpYW5zKTtcbiAgLy8gY29zKG1pbmltdW0gYW5ndWxhciBkaXN0YW5jZSlcblxuICBmdW5jdGlvbiByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIHtcbiAgICByZXR1cm4gK2RlbHRhMiA/IHJlc2FtcGxlJDEocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlTm9uZShwcm9qZWN0KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybSQyKHtcbiAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgICB0aGlzLnN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlJDEocHJvamVjdCwgZGVsdGEyKSB7XG5cbiAgICBmdW5jdGlvbiByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSkge1xuICAgICAgdmFyIGR4ID0geDEgLSB4MCxcbiAgICAgICAgICBkeSA9IHkxIC0geTAsXG4gICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGlmIChkMiA+IDQgKiBkZWx0YTIgJiYgZGVwdGgtLSkge1xuICAgICAgICB2YXIgYSA9IGEwICsgYTEsXG4gICAgICAgICAgICBiID0gYjAgKyBiMSxcbiAgICAgICAgICAgIGMgPSBjMCArIGMxLFxuICAgICAgICAgICAgbSA9IHNxcnQkMShhICogYSArIGIgKiBiICsgYyAqIGMpLFxuICAgICAgICAgICAgcGhpMiA9IGFzaW4kMShjIC89IG0pLFxuICAgICAgICAgICAgbGFtYmRhMiA9IGFicyhhYnMoYykgLSAxKSA8IGVwc2lsb24kNCB8fCBhYnMobGFtYmRhMCAtIGxhbWJkYTEpIDwgZXBzaWxvbiQ0ID8gKGxhbWJkYTAgKyBsYW1iZGExKSAvIDIgOiBhdGFuMihiLCBhKSxcbiAgICAgICAgICAgIHAgPSBwcm9qZWN0KGxhbWJkYTIsIHBoaTIpLFxuICAgICAgICAgICAgeDIgPSBwWzBdLFxuICAgICAgICAgICAgeTIgPSBwWzFdLFxuICAgICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICAgIGR5MiA9IHkyIC0geTAsXG4gICAgICAgICAgICBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG4gICAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiBkZWx0YTIgLy8gcGVycGVuZGljdWxhciBwcm9qZWN0ZWQgZGlzdGFuY2VcbiAgICAgICAgICAgIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIDAuNSkgPiAwLjMgLy8gbWlkcG9pbnQgY2xvc2UgdG8gYW4gZW5kXG4gICAgICAgICAgICB8fCBhMCAqIGExICsgYjAgKiBiMSArIGMwICogYzEgPCBjb3NNaW5EaXN0YW5jZSkgeyAvLyBhbmd1bGFyIGRpc3RhbmNlXG4gICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MiwgeTIsIGxhbWJkYTIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIGxhbWJkYTIsIGEsIGIsIGMsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgdmFyIGxhbWJkYTAwLCB4MDAsIHkwMCwgYTAwLCBiMDAsIGMwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgICBsYW1iZGEwLCB4MCwgeTAsIGEwLCBiMCwgYzA7IC8vIHByZXZpb3VzIHBvaW50XG5cbiAgICAgIHZhciByZXNhbXBsZVN0cmVhbSA9IHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25TdGFydCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7IH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9seWdvbkVuZCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7IH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICB4MCA9IE5hTjtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBjID0gY2FydGVzaWFuKFtsYW1iZGEsIHBoaV0pLCBwID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIGxhbWJkYTAgPSBsYW1iZGEsIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICBsaW5lU3RhcnQoKTtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCBsYW1iZGEwMCwgYTAwLCBiMDAsIGMwMCwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBsaW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNhbXBsZVN0cmVhbTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHRyYW5zZm9ybVJhZGlhbnMgPSB0cmFuc2Zvcm0kMih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiByYWRpYW5zLCB5ICogcmFkaWFucyk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7IHJldHVybiBwcm9qZWN0OyB9KSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSB7XG4gICAgdmFyIHByb2plY3QsXG4gICAgICAgIGsgPSAxNTAsIC8vIHNjYWxlXG4gICAgICAgIHggPSA0ODAsIHkgPSAyNTAsIC8vIHRyYW5zbGF0ZVxuICAgICAgICBkeCwgZHksIGxhbWJkYSA9IDAsIHBoaSA9IDAsIC8vIGNlbnRlclxuICAgICAgICBkZWx0YUxhbWJkYSA9IDAsIGRlbHRhUGhpID0gMCwgZGVsdGFHYW1tYSA9IDAsIHJvdGF0ZSwgcHJvamVjdFJvdGF0ZSwgLy8gcm90YXRlXG4gICAgICAgIHRoZXRhID0gbnVsbCwgcHJlY2xpcCA9IGNsaXBBbnRpbWVyaWRpYW4sIC8vIGNsaXAgYW5nbGVcbiAgICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxLCBwb3N0Y2xpcCA9IGlkZW50aXR5JDcsIC8vIGNsaXAgZXh0ZW50XG4gICAgICAgIGRlbHRhMiA9IDAuNSwgcHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyKSwgLy8gcHJlY2lzaW9uXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBjYWNoZVN0cmVhbTtcblxuICAgIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcbiAgICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZShwb2ludFswXSAqIHJhZGlhbnMsIHBvaW50WzFdICogcmFkaWFucyk7XG4gICAgICByZXR1cm4gW3BvaW50WzBdICogayArIGR4LCBkeSAtIHBvaW50WzFdICoga107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG4gICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUuaW52ZXJ0KChwb2ludFswXSAtIGR4KSAvIGssIChkeSAtIHBvaW50WzFdKSAvIGspO1xuICAgICAgcmV0dXJuIHBvaW50ICYmIFtwb2ludFswXSAqIGRlZ3JlZXMkMSwgcG9pbnRbMV0gKiBkZWdyZWVzJDFdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2plY3RUcmFuc2Zvcm0oeCwgeSkge1xuICAgICAgcmV0dXJuIHggPSBwcm9qZWN0KHgsIHkpLCBbeFswXSAqIGsgKyBkeCwgZHkgLSB4WzFdICoga107XG4gICAgfVxuXG4gICAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybVJhZGlhbnMocHJlY2xpcChyb3RhdGUsIHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpKSk7XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9ICtfID8gY2xpcENpcmNsZSh0aGV0YSA9IF8gKiByYWRpYW5zLCA2ICogcmFkaWFucykgOiAodGhldGEgPSBudWxsLCBjbGlwQW50aW1lcmlkaWFuKSwgcmVzZXQoKSkgOiB0aGV0YSAqIGRlZ3JlZXMkMTtcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSQ3KSA6IGNsaXBFeHRlbnQoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSksIHJlc2V0KCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGsgPSArXywgcmVjZW50ZXIoKSkgOiBrO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArX1swXSwgeSA9ICtfWzFdLCByZWNlbnRlcigpKSA6IFt4LCB5XTtcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgcGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogW2xhbWJkYSAqIGRlZ3JlZXMkMSwgcGhpICogZGVncmVlcyQxXTtcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWx0YUxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YVBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YUdhbW1hID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIHJhZGlhbnMgOiAwLCByZWNlbnRlcigpKSA6IFtkZWx0YUxhbWJkYSAqIGRlZ3JlZXMkMSwgZGVsdGFQaGkgKiBkZWdyZWVzJDEsIGRlbHRhR2FtbWEgKiBkZWdyZWVzJDFdO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiA9IF8gKiBfKSwgcmVzZXQoKSkgOiBzcXJ0JDEoZGVsdGEyKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVjZW50ZXIoKSB7XG4gICAgICBwcm9qZWN0Um90YXRlID0gY29tcG9zZShyb3RhdGUgPSByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSksIHByb2plY3QpO1xuICAgICAgdmFyIGNlbnRlciA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgICAgZHggPSB4IC0gY2VudGVyWzBdICogaztcbiAgICAgIGR5ID0geSArIGNlbnRlclsxXSAqIGs7XG4gICAgICByZXR1cm4gcmVzZXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIHByb2plY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcHJvamVjdCA9IHByb2plY3RBdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcHJvamVjdGlvbi5pbnZlcnQgPSBwcm9qZWN0LmludmVydCAmJiBpbnZlcnQ7XG4gICAgICByZXR1cm4gcmVjZW50ZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNQcm9qZWN0aW9uKHByb2plY3RBdCkge1xuICAgIHZhciBwaGkwID0gMCxcbiAgICAgICAgcGhpMSA9IHBpJDQgLyAzLFxuICAgICAgICBtID0gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSxcbiAgICAgICAgcCA9IG0ocGhpMCwgcGhpMSk7XG5cbiAgICBwLnBhcmFsbGVscyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gbShwaGkwID0gX1swXSAqIHJhZGlhbnMsIHBoaTEgPSBfWzFdICogcmFkaWFucykgOiBbcGhpMCAqIGRlZ3JlZXMkMSwgcGhpMSAqIGRlZ3JlZXMkMV07XG4gICAgfTtcblxuICAgIHJldHVybiBwO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNFcXVhbEFyZWFSYXcoeTAsIHkxKSB7XG4gICAgdmFyIHN5MCA9IHNpbiQxKHkwKSxcbiAgICAgICAgbiA9IChzeTAgKyBzaW4kMSh5MSkpIC8gMixcbiAgICAgICAgYyA9IDEgKyBzeTAgKiAoMiAqIG4gLSBzeTApLFxuICAgICAgICByMCA9IHNxcnQkMShjKSAvIG47XG5cbiAgICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICAgIHZhciByID0gc3FydCQxKGMgLSAyICogbiAqIHNpbiQxKHkpKSAvIG47XG4gICAgICByZXR1cm4gW3IgKiBzaW4kMSh4ICo9IG4pLCByMCAtIHIgKiBjb3MkMSh4KV07XG4gICAgfVxuXG4gICAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgcjB5ID0gcjAgLSB5O1xuICAgICAgcmV0dXJuIFthdGFuMih4LCByMHkpIC8gbiwgYXNpbiQxKChjIC0gKHggKiB4ICsgcjB5ICogcjB5KSAqIG4gKiBuKSAvICgyICogbikpXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb2plY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBjb25pY0VxdWFsQXJlYSgpIHtcbiAgICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1YWxBcmVhUmF3KVxuICAgICAgICAuc2NhbGUoMTU1LjQyNClcbiAgICAgICAgLmNlbnRlcihbMCwgMzMuNjQ0Ml0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWxiZXJzKCkge1xuICAgIHJldHVybiBjb25pY0VxdWFsQXJlYSgpXG4gICAgICAgIC5wYXJhbGxlbHMoWzI5LjUsIDQ1LjVdKVxuICAgICAgICAuc2NhbGUoMTA3MClcbiAgICAgICAgLnRyYW5zbGF0ZShbNDgwLCAyNTBdKVxuICAgICAgICAucm90YXRlKFs5NiwgMF0pXG4gICAgICAgIC5jZW50ZXIoWy0wLjYsIDM4LjddKTtcbiAgfVxuXG4gIC8vIFRoZSBwcm9qZWN0aW9ucyBtdXN0IGhhdmUgbXV0dWFsbHkgZXhjbHVzaXZlIGNsaXAgcmVnaW9ucyBvbiB0aGUgc3BoZXJlLFxuICAvLyBhcyB0aGlzIHdpbGwgYXZvaWQgZW1pdHRpbmcgaW50ZXJsZWF2aW5nIGxpbmVzIGFuZCBwb2x5Z29ucy5cbiAgZnVuY3Rpb24gbXVsdGlwbGV4KHN0cmVhbXMpIHtcbiAgICB2YXIgbiA9IHN0cmVhbXMubGVuZ3RoO1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2ludCh4LCB5KTsgfSxcbiAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnNwaGVyZSgpOyB9LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ubGluZVN0YXJ0KCk7IH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ubGluZUVuZCgpOyB9LFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvblN0YXJ0KCk7IH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvbkVuZCgpOyB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEEgY29tcG9zaXRlIHByb2plY3Rpb24gZm9yIHRoZSBVbml0ZWQgU3RhdGVzLCBjb25maWd1cmVkIGJ5IGRlZmF1bHQgZm9yXG4gIC8vIDk2MMOXNTAwLiBUaGUgcHJvamVjdGlvbiBhbHNvIHdvcmtzIHF1aXRlIHdlbGwgYXQgOTYww5c2MDAgaWYgeW91IGNoYW5nZSB0aGVcbiAgLy8gc2NhbGUgdG8gMTI4NSBhbmQgYWRqdXN0IHRoZSB0cmFuc2xhdGUgYWNjb3JkaW5nbHkuIFRoZSBzZXQgb2Ygc3RhbmRhcmRcbiAgLy8gcGFyYWxsZWxzIGZvciBlYWNoIHJlZ2lvbiBjb21lcyBmcm9tIFVTR1MsIHdoaWNoIGlzIHB1Ymxpc2hlZCBoZXJlOlxuICAvLyBodHRwOi8vZWdzYy51c2dzLmdvdi9pc2IvcHVicy9NYXBQcm9qZWN0aW9ucy9wcm9qZWN0aW9ucy5odG1sI2FsYmVyc1xuICBmdW5jdGlvbiBhbGJlcnNVc2EoKSB7XG4gICAgdmFyIGNhY2hlLFxuICAgICAgICBjYWNoZVN0cmVhbSxcbiAgICAgICAgbG93ZXI0OCA9IGFsYmVycygpLCBsb3dlcjQ4UG9pbnQsXG4gICAgICAgIGFsYXNrYSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTQsIDBdKS5jZW50ZXIoWy0yLCA1OC41XSkucGFyYWxsZWxzKFs1NSwgNjVdKSwgYWxhc2thUG9pbnQsIC8vIEVQU0c6MzMzOFxuICAgICAgICBoYXdhaWkgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU3LCAwXSkuY2VudGVyKFstMywgMTkuOV0pLnBhcmFsbGVscyhbOCwgMThdKSwgaGF3YWlpUG9pbnQsIC8vIEVTUkk6MTAyMDA3XG4gICAgICAgIHBvaW50LCBwb2ludFN0cmVhbSA9IHtwb2ludDogZnVuY3Rpb24oeCwgeSkgeyBwb2ludCA9IFt4LCB5XTsgfX07XG5cbiAgICBmdW5jdGlvbiBhbGJlcnNVc2EoY29vcmRpbmF0ZXMpIHtcbiAgICAgIHZhciB4ID0gY29vcmRpbmF0ZXNbMF0sIHkgPSBjb29yZGluYXRlc1sxXTtcbiAgICAgIHJldHVybiBwb2ludCA9IG51bGwsXG4gICAgICAgICAgKGxvd2VyNDhQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpXG4gICAgICAgICAgfHwgKGFsYXNrYVBvaW50LnBvaW50KHgsIHkpLCBwb2ludClcbiAgICAgICAgICB8fCAoaGF3YWlpUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KTtcbiAgICB9XG5cbiAgICBhbGJlcnNVc2EuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICAgIHQgPSBsb3dlcjQ4LnRyYW5zbGF0ZSgpLFxuICAgICAgICAgIHggPSAoY29vcmRpbmF0ZXNbMF0gLSB0WzBdKSAvIGssXG4gICAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICAgIHJldHVybiAoeSA+PSAwLjEyMCAmJiB5IDwgMC4yMzQgJiYgeCA+PSAtMC40MjUgJiYgeCA8IC0wLjIxNCA/IGFsYXNrYVxuICAgICAgICAgIDogeSA+PSAwLjE2NiAmJiB5IDwgMC4yMzQgJiYgeCA+PSAtMC4yMTQgJiYgeCA8IC0wLjExNSA/IGhhd2FpaVxuICAgICAgICAgIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcbiAgICB9O1xuXG4gICAgYWxiZXJzVXNhLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gbXVsdGlwbGV4KFtsb3dlcjQ4LnN0cmVhbShjYWNoZVN0cmVhbSA9IHN0cmVhbSksIGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpLnN0cmVhbShzdHJlYW0pXSk7XG4gICAgfTtcblxuICAgIGFsYmVyc1VzYS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgICAgbG93ZXI0OC5wcmVjaXNpb24oXyksIGFsYXNrYS5wcmVjaXNpb24oXyksIGhhd2FpaS5wcmVjaXNpb24oXyk7XG4gICAgICByZXR1cm4gYWxiZXJzVXNhO1xuICAgIH07XG5cbiAgICBhbGJlcnNVc2Euc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgICBsb3dlcjQ4LnNjYWxlKF8pLCBhbGFza2Euc2NhbGUoXyAqIDAuMzUpLCBoYXdhaWkuc2NhbGUoXyk7XG4gICAgICByZXR1cm4gYWxiZXJzVXNhLnRyYW5zbGF0ZShsb3dlcjQ4LnRyYW5zbGF0ZSgpKTtcbiAgICB9O1xuXG4gICAgYWxiZXJzVXNhLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgudHJhbnNsYXRlKCk7XG4gICAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSwgeCA9ICtfWzBdLCB5ID0gK19bMV07XG5cbiAgICAgIGxvd2VyNDhQb2ludCA9IGxvd2VyNDhcbiAgICAgICAgICAudHJhbnNsYXRlKF8pXG4gICAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40NTUgKiBrLCB5IC0gMC4yMzggKiBrXSwgW3ggKyAwLjQ1NSAqIGssIHkgKyAwLjIzOCAqIGtdXSlcbiAgICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgICAgYWxhc2thUG9pbnQgPSBhbGFza2FcbiAgICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4zMDcgKiBrLCB5ICsgMC4yMDEgKiBrXSlcbiAgICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQyNSAqIGsgKyBlcHNpbG9uJDQsIHkgKyAwLjEyMCAqIGsgKyBlcHNpbG9uJDRdLCBbeCAtIDAuMjE0ICogayAtIGVwc2lsb24kNCwgeSArIDAuMjM0ICogayAtIGVwc2lsb24kNF1dKVxuICAgICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaVxuICAgICAgICAgIC50cmFuc2xhdGUoW3ggLSAwLjIwNSAqIGssIHkgKyAwLjIxMiAqIGtdKVxuICAgICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuMjE0ICogayArIGVwc2lsb24kNCwgeSArIDAuMTY2ICogayArIGVwc2lsb24kNF0sIFt4IC0gMC4xMTUgKiBrIC0gZXBzaWxvbiQ0LCB5ICsgMC4yMzQgKiBrIC0gZXBzaWxvbiQ0XV0pXG4gICAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICAgIHJldHVybiBhbGJlcnNVc2E7XG4gICAgfTtcblxuICAgIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG4gIH1cblxuICBmdW5jdGlvbiBhemltdXRoYWxSYXcoc2NhbGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIGN4ID0gY29zJDEoeCksXG4gICAgICAgICAgY3kgPSBjb3MkMSh5KSxcbiAgICAgICAgICBrID0gc2NhbGUoY3ggKiBjeSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBrICogY3kgKiBzaW4kMSh4KSxcbiAgICAgICAgayAqIHNpbiQxKHkpXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGF6aW11dGhhbEludmVydChhbmdsZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgeiA9IHNxcnQkMSh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgICBjID0gYW5nbGUoeiksXG4gICAgICAgICAgc2MgPSBzaW4kMShjKSxcbiAgICAgICAgICBjYyA9IGNvcyQxKGMpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYXRhbjIoeCAqIHNjLCB6ICogY2MpLFxuICAgICAgICBhc2luJDEoeiAmJiB5ICogc2MgLyB6KVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXppbXV0aGFsRXF1YWxBcmVhUmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uKGN4Y3kpIHtcbiAgICByZXR1cm4gc3FydCQxKDIgLyAoMSArIGN4Y3kpKTtcbiAgfSk7XG5cbiAgYXppbXV0aGFsRXF1YWxBcmVhUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gICAgcmV0dXJuIDIgKiBhc2luJDEoeiAvIDIpO1xuICB9KTtcblxuICBmdW5jdGlvbiBhemltdXRoYWxFcXVhbEFyZWEoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1YWxBcmVhUmF3KVxuICAgICAgICAuc2NhbGUoMTI0Ljc1KVxuICAgICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xuICB9XG5cbiAgdmFyIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gKGMgPSBhY29zKGMpKSAmJiBjIC8gc2luJDEoYyk7XG4gIH0pO1xuXG4gIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gICAgcmV0dXJuIHo7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGF6aW11dGhhbEVxdWlkaXN0YW50KCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWlkaXN0YW50UmF3KVxuICAgICAgICAuc2NhbGUoNzkuNDE4OClcbiAgICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIFtsYW1iZGEsIGxvZyQxKHRhbigoaGFsZlBpJDMgKyBwaGkpIC8gMikpXTtcbiAgfVxuXG4gIG1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGkkM107XG4gIH07XG5cbiAgZnVuY3Rpb24gbWVyY2F0b3IoKSB7XG4gICAgcmV0dXJuIG1lcmNhdG9yUHJvamVjdGlvbihtZXJjYXRvclJhdylcbiAgICAgICAgLnNjYWxlKDk2MSAvIHRhdSQ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gICAgdmFyIG0gPSBwcm9qZWN0aW9uKHByb2plY3QpLFxuICAgICAgICBzY2FsZSA9IG0uc2NhbGUsXG4gICAgICAgIHRyYW5zbGF0ZSA9IG0udHJhbnNsYXRlLFxuICAgICAgICBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LFxuICAgICAgICBjbGlwQXV0bztcblxuICAgIG0uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZShfKSwgY2xpcEF1dG8gJiYgbS5jbGlwRXh0ZW50KG51bGwpLCBtKSA6IHNjYWxlKCk7XG4gICAgfTtcblxuICAgIG0udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlKF8pLCBjbGlwQXV0byAmJiBtLmNsaXBFeHRlbnQobnVsbCksIG0pIDogdHJhbnNsYXRlKCk7XG4gICAgfTtcblxuICAgIG0uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsaXBBdXRvID8gbnVsbCA6IGNsaXBFeHRlbnQoKTtcbiAgICAgIGlmIChjbGlwQXV0byA9IF8gPT0gbnVsbCkge1xuICAgICAgICB2YXIgayA9IHBpJDQgKiBzY2FsZSgpLFxuICAgICAgICAgICAgdCA9IHRyYW5zbGF0ZSgpO1xuICAgICAgICBfID0gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV07XG4gICAgICB9XG4gICAgICBjbGlwRXh0ZW50KF8pO1xuICAgICAgcmV0dXJuIG07XG4gICAgfTtcblxuICAgIHJldHVybiBtLmNsaXBFeHRlbnQobnVsbCk7XG4gIH1cblxuICBmdW5jdGlvbiB0YW55KHkpIHtcbiAgICByZXR1cm4gdGFuKChoYWxmUGkkMyArIHkpIC8gMik7XG4gIH1cblxuICBmdW5jdGlvbiBjb25pY0NvbmZvcm1hbFJhdyh5MCwgeTEpIHtcbiAgICB2YXIgY3kwID0gY29zJDEoeTApLFxuICAgICAgICBuID0geTAgPT09IHkxID8gc2luJDEoeTApIDogbG9nJDEoY3kwIC8gY29zJDEoeTEpKSAvIGxvZyQxKHRhbnkoeTEpIC8gdGFueSh5MCkpLFxuICAgICAgICBmID0gY3kwICogcG93JDEodGFueSh5MCksIG4pIC8gbjtcblxuICAgIGlmICghbikgcmV0dXJuIG1lcmNhdG9yUmF3O1xuXG4gICAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgICBpZiAoZiA+IDApIHsgaWYgKHkgPCAtaGFsZlBpJDMgKyBlcHNpbG9uJDQpIHkgPSAtaGFsZlBpJDMgKyBlcHNpbG9uJDQ7IH1cbiAgICAgIGVsc2UgeyBpZiAoeSA+IGhhbGZQaSQzIC0gZXBzaWxvbiQ0KSB5ID0gaGFsZlBpJDMgLSBlcHNpbG9uJDQ7IH1cbiAgICAgIHZhciByID0gZiAvIHBvdyQxKHRhbnkoeSksIG4pO1xuICAgICAgcmV0dXJuIFtyICogc2luJDEobiAqIHgpLCBmIC0gciAqIGNvcyQxKG4gKiB4KV07XG4gICAgfVxuXG4gICAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgZnkgPSBmIC0geSwgciA9IHNpZ24kMShuKSAqIHNxcnQkMSh4ICogeCArIGZ5ICogZnkpO1xuICAgICAgcmV0dXJuIFthdGFuMih4LCBmeSkgLyBuLCAyICogYXRhbihwb3ckMShmIC8gciwgMSAvIG4pKSAtIGhhbGZQaSQzXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb2plY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBjb25pY0NvbmZvcm1hbCgpIHtcbiAgICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljQ29uZm9ybWFsUmF3KVxuICAgICAgICAuc2NhbGUoMTA5LjUpXG4gICAgICAgIC5wYXJhbGxlbHMoWzMwLCAzMF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZXF1aXJlY3Rhbmd1bGFyUmF3KGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XG4gIH1cblxuICBlcXVpcmVjdGFuZ3VsYXJSYXcuaW52ZXJ0ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gIGZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhcigpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXG4gICAgICAgIC5zY2FsZSgxNTIuNjMpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNFcXVpZGlzdGFudFJhdyh5MCwgeTEpIHtcbiAgICB2YXIgY3kwID0gY29zJDEoeTApLFxuICAgICAgICBuID0geTAgPT09IHkxID8gc2luJDEoeTApIDogKGN5MCAtIGNvcyQxKHkxKSkgLyAoeTEgLSB5MCksXG4gICAgICAgIGcgPSBjeTAgLyBuICsgeTA7XG5cbiAgICBpZiAoYWJzKG4pIDwgZXBzaWxvbiQ0KSByZXR1cm4gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gICAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgICB2YXIgZ3kgPSBnIC0geSwgbnggPSBuICogeDtcbiAgICAgIHJldHVybiBbZ3kgKiBzaW4kMShueCksIGcgLSBneSAqIGNvcyQxKG54KV07XG4gICAgfVxuXG4gICAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgZ3kgPSBnIC0geTtcbiAgICAgIHJldHVybiBbYXRhbjIoeCwgZ3kpIC8gbiwgZyAtIHNpZ24kMShuKSAqIHNxcnQkMSh4ICogeCArIGd5ICogZ3kpXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb2plY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBjb25pY0VxdWlkaXN0YW50KCkge1xuICAgIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVpZGlzdGFudFJhdylcbiAgICAgICAgLnNjYWxlKDEzMS4xNTQpXG4gICAgICAgIC5jZW50ZXIoWzAsIDEzLjkzODldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdub21vbmljUmF3KHgsIHkpIHtcbiAgICB2YXIgY3kgPSBjb3MkMSh5KSwgayA9IGNvcyQxKHgpICogY3k7XG4gICAgcmV0dXJuIFtjeSAqIHNpbiQxKHgpIC8gaywgc2luJDEoeSkgLyBrXTtcbiAgfVxuXG4gIGdub21vbmljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhdGFuKTtcblxuICBmdW5jdGlvbiBnbm9tb25pYygpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbihnbm9tb25pY1JhdylcbiAgICAgICAgLnNjYWxlKDE0NC4wNDkpXG4gICAgICAgIC5jbGlwQW5nbGUoNjApO1xuICB9XG5cbiAgZnVuY3Rpb24gb3J0aG9ncmFwaGljUmF3KHgsIHkpIHtcbiAgICByZXR1cm4gW2NvcyQxKHkpICogc2luJDEoeCksIHNpbiQxKHkpXTtcbiAgfVxuXG4gIG9ydGhvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXNpbiQxKTtcblxuICBmdW5jdGlvbiBvcnRob2dyYXBoaWMoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24ob3J0aG9ncmFwaGljUmF3KVxuICAgICAgICAuc2NhbGUoMjQ5LjUpXG4gICAgICAgIC5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uJDQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcmVvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gICAgdmFyIGN5ID0gY29zJDEoeSksIGsgPSAxICsgY29zJDEoeCkgKiBjeTtcbiAgICByZXR1cm4gW2N5ICogc2luJDEoeCkgLyBrLCBzaW4kMSh5KSAvIGtdO1xuICB9XG5cbiAgc3RlcmVvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICAgIHJldHVybiAyICsgYXRhbih6KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc3RlcmVvZ3JhcGhpYygpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbihzdGVyZW9ncmFwaGljUmF3KVxuICAgICAgICAuc2NhbGUoMjUwKVxuICAgICAgICAuY2xpcEFuZ2xlKDE0Mik7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xvZyQxKHRhbigoaGFsZlBpJDMgKyBwaGkpIC8gMikpLCAtbGFtYmRhXTtcbiAgfVxuXG4gIHRyYW5zdmVyc2VNZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsteSwgMiAqIGF0YW4oZXhwKHgpKSAtIGhhbGZQaSQzXTtcbiAgfTtcblxuICBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3IoKSB7XG4gICAgdmFyIG0gPSBtZXJjYXRvclByb2plY3Rpb24odHJhbnN2ZXJzZU1lcmNhdG9yUmF3KSxcbiAgICAgICAgY2VudGVyID0gbS5jZW50ZXIsXG4gICAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xuXG4gICAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGNlbnRlcihbLV9bMV0sIF9bMF1dKSA6IChfID0gY2VudGVyKCksIFtfWzFdLCAtX1swXV0pO1xuICAgIH07XG5cbiAgICBtLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcm90YXRlKFtfWzBdLCBfWzFdLCBfLmxlbmd0aCA+IDIgPyBfWzJdICsgOTAgOiA5MF0pIDogKF8gPSByb3RhdGUoKSwgW19bMF0sIF9bMV0sIF9bMl0gLSA5MF0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gcm90YXRlKFswLCAwLCA5MF0pXG4gICAgICAgIC5zY2FsZSgxNTkuMTU1KTtcbiAgfVxuXG4gIGV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb247XG4gIGV4cG9ydHMuYmlzZWN0ID0gYmlzZWN0UmlnaHQ7XG4gIGV4cG9ydHMuYmlzZWN0UmlnaHQgPSBiaXNlY3RSaWdodDtcbiAgZXhwb3J0cy5iaXNlY3RMZWZ0ID0gYmlzZWN0TGVmdDtcbiAgZXhwb3J0cy5hc2NlbmRpbmcgPSBhc2NlbmRpbmc7XG4gIGV4cG9ydHMuYmlzZWN0b3IgPSBiaXNlY3RvcjtcbiAgZXhwb3J0cy5kZXNjZW5kaW5nID0gZGVzY2VuZGluZztcbiAgZXhwb3J0cy5kZXZpYXRpb24gPSBkZXZpYXRpb247XG4gIGV4cG9ydHMuZXh0ZW50ID0gZXh0ZW50O1xuICBleHBvcnRzLmhpc3RvZ3JhbSA9IGhpc3RvZ3JhbTtcbiAgZXhwb3J0cy50aHJlc2hvbGRGcmVlZG1hbkRpYWNvbmlzID0gZnJlZWRtYW5EaWFjb25pcztcbiAgZXhwb3J0cy50aHJlc2hvbGRTY290dCA9IHNjb3R0O1xuICBleHBvcnRzLnRocmVzaG9sZFN0dXJnZXMgPSBzdHVyZ2VzO1xuICBleHBvcnRzLm1heCA9IG1heDtcbiAgZXhwb3J0cy5tZWFuID0gbWVhbjtcbiAgZXhwb3J0cy5tZWRpYW4gPSBtZWRpYW47XG4gIGV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbiAgZXhwb3J0cy5taW4gPSBtaW47XG4gIGV4cG9ydHMucGFpcnMgPSBwYWlycztcbiAgZXhwb3J0cy5wZXJtdXRlID0gcGVybXV0ZTtcbiAgZXhwb3J0cy5xdWFudGlsZSA9IHRocmVzaG9sZDtcbiAgZXhwb3J0cy5yYW5nZSA9IHJhbmdlO1xuICBleHBvcnRzLnNjYW4gPSBzY2FuO1xuICBleHBvcnRzLnNodWZmbGUgPSBzaHVmZmxlO1xuICBleHBvcnRzLnN1bSA9IHN1bTtcbiAgZXhwb3J0cy50aWNrcyA9IHRpY2tzO1xuICBleHBvcnRzLnRpY2tTdGVwID0gdGlja1N0ZXA7XG4gIGV4cG9ydHMudHJhbnNwb3NlID0gdHJhbnNwb3NlO1xuICBleHBvcnRzLnZhcmlhbmNlID0gdmFyaWFuY2U7XG4gIGV4cG9ydHMuemlwID0gemlwO1xuICBleHBvcnRzLmVudHJpZXMgPSBlbnRyaWVzO1xuICBleHBvcnRzLmtleXMgPSBrZXlzO1xuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcbiAgZXhwb3J0cy5tYXAgPSBtYXAkMTtcbiAgZXhwb3J0cy5zZXQgPSBzZXQ7XG4gIGV4cG9ydHMubmVzdCA9IG5lc3Q7XG4gIGV4cG9ydHMucmFuZG9tVW5pZm9ybSA9IHVuaWZvcm07XG4gIGV4cG9ydHMucmFuZG9tTm9ybWFsID0gbm9ybWFsO1xuICBleHBvcnRzLnJhbmRvbUxvZ05vcm1hbCA9IGxvZ05vcm1hbDtcbiAgZXhwb3J0cy5yYW5kb21CYXRlcyA9IGJhdGVzO1xuICBleHBvcnRzLnJhbmRvbUlyd2luSGFsbCA9IGlyd2luSGFsbDtcbiAgZXhwb3J0cy5yYW5kb21FeHBvbmVudGlhbCA9IGV4cG9uZW50aWFsO1xuICBleHBvcnRzLmVhc2VMaW5lYXIgPSBsaW5lYXI7XG4gIGV4cG9ydHMuZWFzZVF1YWQgPSBxdWFkSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVF1YWRJbiA9IHF1YWRJbjtcbiAgZXhwb3J0cy5lYXNlUXVhZE91dCA9IHF1YWRPdXQ7XG4gIGV4cG9ydHMuZWFzZVF1YWRJbk91dCA9IHF1YWRJbk91dDtcbiAgZXhwb3J0cy5lYXNlQ3ViaWMgPSBlYXNlQ3ViaWNJbk91dDtcbiAgZXhwb3J0cy5lYXNlQ3ViaWNJbiA9IGN1YmljSW47XG4gIGV4cG9ydHMuZWFzZUN1YmljT3V0ID0gY3ViaWNPdXQ7XG4gIGV4cG9ydHMuZWFzZUN1YmljSW5PdXQgPSBlYXNlQ3ViaWNJbk91dDtcbiAgZXhwb3J0cy5lYXNlUG9seSA9IHBvbHlJbk91dDtcbiAgZXhwb3J0cy5lYXNlUG9seUluID0gcG9seUluO1xuICBleHBvcnRzLmVhc2VQb2x5T3V0ID0gcG9seU91dDtcbiAgZXhwb3J0cy5lYXNlUG9seUluT3V0ID0gcG9seUluT3V0O1xuICBleHBvcnRzLmVhc2VTaW4gPSBzaW5Jbk91dDtcbiAgZXhwb3J0cy5lYXNlU2luSW4gPSBzaW5JbjtcbiAgZXhwb3J0cy5lYXNlU2luT3V0ID0gc2luT3V0O1xuICBleHBvcnRzLmVhc2VTaW5Jbk91dCA9IHNpbkluT3V0O1xuICBleHBvcnRzLmVhc2VFeHAgPSBleHBJbk91dDtcbiAgZXhwb3J0cy5lYXNlRXhwSW4gPSBleHBJbjtcbiAgZXhwb3J0cy5lYXNlRXhwT3V0ID0gZXhwT3V0O1xuICBleHBvcnRzLmVhc2VFeHBJbk91dCA9IGV4cEluT3V0O1xuICBleHBvcnRzLmVhc2VDaXJjbGUgPSBjaXJjbGVJbk91dDtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlSW4gPSBjaXJjbGVJbjtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlT3V0ID0gY2lyY2xlT3V0O1xuICBleHBvcnRzLmVhc2VDaXJjbGVJbk91dCA9IGNpcmNsZUluT3V0O1xuICBleHBvcnRzLmVhc2VCb3VuY2UgPSBib3VuY2VPdXQ7XG4gIGV4cG9ydHMuZWFzZUJvdW5jZUluID0gYm91bmNlSW47XG4gIGV4cG9ydHMuZWFzZUJvdW5jZU91dCA9IGJvdW5jZU91dDtcbiAgZXhwb3J0cy5lYXNlQm91bmNlSW5PdXQgPSBib3VuY2VJbk91dDtcbiAgZXhwb3J0cy5lYXNlQmFjayA9IGJhY2tJbk91dDtcbiAgZXhwb3J0cy5lYXNlQmFja0luID0gYmFja0luO1xuICBleHBvcnRzLmVhc2VCYWNrT3V0ID0gYmFja091dDtcbiAgZXhwb3J0cy5lYXNlQmFja0luT3V0ID0gYmFja0luT3V0O1xuICBleHBvcnRzLmVhc2VFbGFzdGljID0gZWxhc3RpY091dDtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpY0luID0gZWxhc3RpY0luO1xuICBleHBvcnRzLmVhc2VFbGFzdGljT3V0ID0gZWxhc3RpY091dDtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpY0luT3V0ID0gZWxhc3RpY0luT3V0O1xuICBleHBvcnRzLnBvbHlnb25BcmVhID0gYXJlYTtcbiAgZXhwb3J0cy5wb2x5Z29uQ2VudHJvaWQgPSBjZW50cm9pZDtcbiAgZXhwb3J0cy5wb2x5Z29uSHVsbCA9IGh1bGw7XG4gIGV4cG9ydHMucG9seWdvbkNvbnRhaW5zID0gY29udGFpbnM7XG4gIGV4cG9ydHMucG9seWdvbkxlbmd0aCA9IGxlbmd0aCQxO1xuICBleHBvcnRzLnBhdGggPSBwYXRoO1xuICBleHBvcnRzLnF1YWR0cmVlID0gcXVhZHRyZWU7XG4gIGV4cG9ydHMucXVldWUgPSBxdWV1ZTtcbiAgZXhwb3J0cy5hcmMgPSBhcmM7XG4gIGV4cG9ydHMuYXJlYSA9IGFyZWEkMTtcbiAgZXhwb3J0cy5saW5lID0gbGluZTtcbiAgZXhwb3J0cy5waWUgPSBwaWU7XG4gIGV4cG9ydHMucmFkaWFsQXJlYSA9IHJhZGlhbEFyZWE7XG4gIGV4cG9ydHMucmFkaWFsTGluZSA9IHJhZGlhbExpbmUkMTtcbiAgZXhwb3J0cy5zeW1ib2wgPSBzeW1ib2w7XG4gIGV4cG9ydHMuc3ltYm9scyA9IHN5bWJvbHM7XG4gIGV4cG9ydHMuc3ltYm9sQ2lyY2xlID0gY2lyY2xlO1xuICBleHBvcnRzLnN5bWJvbENyb3NzID0gY3Jvc3MkMTtcbiAgZXhwb3J0cy5zeW1ib2xEaWFtb25kID0gZGlhbW9uZDtcbiAgZXhwb3J0cy5zeW1ib2xTcXVhcmUgPSBzcXVhcmU7XG4gIGV4cG9ydHMuc3ltYm9sU3RhciA9IHN0YXI7XG4gIGV4cG9ydHMuc3ltYm9sVHJpYW5nbGUgPSB0cmlhbmdsZTtcbiAgZXhwb3J0cy5zeW1ib2xXeWUgPSB3eWU7XG4gIGV4cG9ydHMuY3VydmVCYXNpc0Nsb3NlZCA9IGJhc2lzQ2xvc2VkO1xuICBleHBvcnRzLmN1cnZlQmFzaXNPcGVuID0gYmFzaXNPcGVuO1xuICBleHBvcnRzLmN1cnZlQmFzaXMgPSBiYXNpcztcbiAgZXhwb3J0cy5jdXJ2ZUJ1bmRsZSA9IGJ1bmRsZTtcbiAgZXhwb3J0cy5jdXJ2ZUNhcmRpbmFsQ2xvc2VkID0gY2FyZGluYWxDbG9zZWQ7XG4gIGV4cG9ydHMuY3VydmVDYXJkaW5hbE9wZW4gPSBjYXJkaW5hbE9wZW47XG4gIGV4cG9ydHMuY3VydmVDYXJkaW5hbCA9IGNhcmRpbmFsO1xuICBleHBvcnRzLmN1cnZlQ2F0bXVsbFJvbUNsb3NlZCA9IGNhdG11bGxSb21DbG9zZWQ7XG4gIGV4cG9ydHMuY3VydmVDYXRtdWxsUm9tT3BlbiA9IGNhdG11bGxSb21PcGVuO1xuICBleHBvcnRzLmN1cnZlQ2F0bXVsbFJvbSA9IGNhdG11bGxSb207XG4gIGV4cG9ydHMuY3VydmVMaW5lYXJDbG9zZWQgPSBsaW5lYXJDbG9zZWQ7XG4gIGV4cG9ydHMuY3VydmVMaW5lYXIgPSBjdXJ2ZUxpbmVhcjtcbiAgZXhwb3J0cy5jdXJ2ZU1vbm90b25lWCA9IG1vbm90b25lWDtcbiAgZXhwb3J0cy5jdXJ2ZU1vbm90b25lWSA9IG1vbm90b25lWTtcbiAgZXhwb3J0cy5jdXJ2ZU5hdHVyYWwgPSBuYXR1cmFsO1xuICBleHBvcnRzLmN1cnZlU3RlcCA9IHN0ZXA7XG4gIGV4cG9ydHMuY3VydmVTdGVwQWZ0ZXIgPSBzdGVwQWZ0ZXI7XG4gIGV4cG9ydHMuY3VydmVTdGVwQmVmb3JlID0gc3RlcEJlZm9yZTtcbiAgZXhwb3J0cy5zdGFjayA9IHN0YWNrO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0RXhwYW5kID0gZXhwYW5kO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0Tm9uZSA9IG5vbmU7XG4gIGV4cG9ydHMuc3RhY2tPZmZzZXRTaWxob3VldHRlID0gc2lsaG91ZXR0ZTtcbiAgZXhwb3J0cy5zdGFja09mZnNldFdpZ2dsZSA9IHdpZ2dsZTtcbiAgZXhwb3J0cy5zdGFja09yZGVyQXNjZW5kaW5nID0gYXNjZW5kaW5nJDE7XG4gIGV4cG9ydHMuc3RhY2tPcmRlckRlc2NlbmRpbmcgPSBkZXNjZW5kaW5nJDI7XG4gIGV4cG9ydHMuc3RhY2tPcmRlckluc2lkZU91dCA9IGluc2lkZU91dDtcbiAgZXhwb3J0cy5zdGFja09yZGVyTm9uZSA9IG5vbmUkMTtcbiAgZXhwb3J0cy5zdGFja09yZGVyUmV2ZXJzZSA9IHJldmVyc2U7XG4gIGV4cG9ydHMuY29sb3IgPSBjb2xvcjtcbiAgZXhwb3J0cy5yZ2IgPSBjb2xvclJnYjtcbiAgZXhwb3J0cy5oc2wgPSBjb2xvckhzbDtcbiAgZXhwb3J0cy5sYWIgPSBsYWI7XG4gIGV4cG9ydHMuaGNsID0gY29sb3JIY2w7XG4gIGV4cG9ydHMuY3ViZWhlbGl4ID0gY3ViZWhlbGl4O1xuICBleHBvcnRzLmludGVycG9sYXRlID0gaW50ZXJwb2xhdGU7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVBcnJheSA9IGFycmF5JDE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVEYXRlID0gZGF0ZTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU51bWJlciA9IGludGVycG9sYXRlTnVtYmVyO1xuICBleHBvcnRzLmludGVycG9sYXRlT2JqZWN0ID0gb2JqZWN0O1xuICBleHBvcnRzLmludGVycG9sYXRlUm91bmQgPSBpbnRlcnBvbGF0ZVJvdW5kO1xuICBleHBvcnRzLmludGVycG9sYXRlU3RyaW5nID0gaW50ZXJwb2xhdGVTdHJpbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxO1xuICBleHBvcnRzLmludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVpvb20gPSBpbnRlcnBvbGF0ZVpvb207XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVSZ2IgPSBpbnRlcnBvbGF0ZVJnYjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJnYkJhc2lzID0gcmdiQmFzaXM7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpc0Nsb3NlZCA9IHJnYkJhc2lzQ2xvc2VkO1xuICBleHBvcnRzLmludGVycG9sYXRlSHNsID0gaHNsJDE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVIc2xMb25nID0gaHNsTG9uZztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUxhYiA9IGxhYiQxO1xuICBleHBvcnRzLmludGVycG9sYXRlSGNsID0gaGNsJDE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVIY2xMb25nID0gaGNsTG9uZztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUN1YmVoZWxpeCA9IGN1YmVoZWxpeCQyO1xuICBleHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUJhc2lzID0gYmFzaXMkMjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUJhc2lzQ2xvc2VkID0gYmFzaXNDbG9zZWQkMTtcbiAgZXhwb3J0cy5xdWFudGl6ZSA9IHF1YW50aXplO1xuICBleHBvcnRzLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gIGV4cG9ydHMuZHN2Rm9ybWF0ID0gZHN2O1xuICBleHBvcnRzLmNzdlBhcnNlID0gY3N2UGFyc2U7XG4gIGV4cG9ydHMuY3N2UGFyc2VSb3dzID0gY3N2UGFyc2VSb3dzO1xuICBleHBvcnRzLmNzdkZvcm1hdCA9IGNzdkZvcm1hdDtcbiAgZXhwb3J0cy5jc3ZGb3JtYXRSb3dzID0gY3N2Rm9ybWF0Um93cztcbiAgZXhwb3J0cy50c3ZQYXJzZSA9IHRzdlBhcnNlO1xuICBleHBvcnRzLnRzdlBhcnNlUm93cyA9IHRzdlBhcnNlUm93cztcbiAgZXhwb3J0cy50c3ZGb3JtYXQgPSB0c3ZGb3JtYXQ7XG4gIGV4cG9ydHMudHN2Rm9ybWF0Um93cyA9IHRzdkZvcm1hdFJvd3M7XG4gIGV4cG9ydHMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGV4cG9ydHMuaHRtbCA9IGh0bWw7XG4gIGV4cG9ydHMuanNvbiA9IGpzb247XG4gIGV4cG9ydHMudGV4dCA9IHRleHQ7XG4gIGV4cG9ydHMueG1sID0geG1sO1xuICBleHBvcnRzLmNzdiA9IGNzdiQxO1xuICBleHBvcnRzLnRzdiA9IHRzdiQxO1xuICBleHBvcnRzLm5vdyA9IG5vdztcbiAgZXhwb3J0cy50aW1lciA9IHRpbWVyO1xuICBleHBvcnRzLnRpbWVyRmx1c2ggPSB0aW1lckZsdXNoO1xuICBleHBvcnRzLnRpbWVvdXQgPSB0aW1lb3V0JDE7XG4gIGV4cG9ydHMuaW50ZXJ2YWwgPSBpbnRlcnZhbCQxO1xuICBleHBvcnRzLnRpbWVJbnRlcnZhbCA9IG5ld0ludGVydmFsO1xuICBleHBvcnRzLnRpbWVNaWxsaXNlY29uZCA9IG1pbGxpc2Vjb25kO1xuICBleHBvcnRzLnRpbWVNaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG4gIGV4cG9ydHMudGltZVNlY29uZCA9IHNlY29uZDtcbiAgZXhwb3J0cy50aW1lU2Vjb25kcyA9IHNlY29uZHM7XG4gIGV4cG9ydHMudGltZU1pbnV0ZSA9IG1pbnV0ZTtcbiAgZXhwb3J0cy50aW1lTWludXRlcyA9IG1pbnV0ZXM7XG4gIGV4cG9ydHMudGltZUhvdXIgPSBob3VyO1xuICBleHBvcnRzLnRpbWVIb3VycyA9IGhvdXJzO1xuICBleHBvcnRzLnRpbWVEYXkgPSBkYXk7XG4gIGV4cG9ydHMudGltZURheXMgPSBkYXlzO1xuICBleHBvcnRzLnRpbWVXZWVrID0gdGltZVdlZWs7XG4gIGV4cG9ydHMudGltZVdlZWtzID0gc3VuZGF5cztcbiAgZXhwb3J0cy50aW1lU3VuZGF5ID0gdGltZVdlZWs7XG4gIGV4cG9ydHMudGltZVN1bmRheXMgPSBzdW5kYXlzO1xuICBleHBvcnRzLnRpbWVNb25kYXkgPSB0aW1lTW9uZGF5O1xuICBleHBvcnRzLnRpbWVNb25kYXlzID0gbW9uZGF5cztcbiAgZXhwb3J0cy50aW1lVHVlc2RheSA9IHR1ZXNkYXk7XG4gIGV4cG9ydHMudGltZVR1ZXNkYXlzID0gdHVlc2RheXM7XG4gIGV4cG9ydHMudGltZVdlZG5lc2RheSA9IHdlZG5lc2RheTtcbiAgZXhwb3J0cy50aW1lV2VkbmVzZGF5cyA9IHdlZG5lc2RheXM7XG4gIGV4cG9ydHMudGltZVRodXJzZGF5ID0gdGh1cnNkYXk7XG4gIGV4cG9ydHMudGltZVRodXJzZGF5cyA9IHRodXJzZGF5cztcbiAgZXhwb3J0cy50aW1lRnJpZGF5ID0gZnJpZGF5O1xuICBleHBvcnRzLnRpbWVGcmlkYXlzID0gZnJpZGF5cztcbiAgZXhwb3J0cy50aW1lU2F0dXJkYXkgPSBzYXR1cmRheTtcbiAgZXhwb3J0cy50aW1lU2F0dXJkYXlzID0gc2F0dXJkYXlzO1xuICBleHBvcnRzLnRpbWVNb250aCA9IG1vbnRoO1xuICBleHBvcnRzLnRpbWVNb250aHMgPSBtb250aHM7XG4gIGV4cG9ydHMudGltZVllYXIgPSB5ZWFyO1xuICBleHBvcnRzLnRpbWVZZWFycyA9IHllYXJzO1xuICBleHBvcnRzLnV0Y01pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XG4gIGV4cG9ydHMudXRjTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICBleHBvcnRzLnV0Y1NlY29uZCA9IHNlY29uZDtcbiAgZXhwb3J0cy51dGNTZWNvbmRzID0gc2Vjb25kcztcbiAgZXhwb3J0cy51dGNNaW51dGUgPSB1dGNNaW51dGU7XG4gIGV4cG9ydHMudXRjTWludXRlcyA9IHV0Y01pbnV0ZXM7XG4gIGV4cG9ydHMudXRjSG91ciA9IHV0Y0hvdXI7XG4gIGV4cG9ydHMudXRjSG91cnMgPSB1dGNIb3VycztcbiAgZXhwb3J0cy51dGNEYXkgPSB1dGNEYXk7XG4gIGV4cG9ydHMudXRjRGF5cyA9IHV0Y0RheXM7XG4gIGV4cG9ydHMudXRjV2VlayA9IHV0Y1dlZWs7XG4gIGV4cG9ydHMudXRjV2Vla3MgPSB1dGNTdW5kYXlzO1xuICBleHBvcnRzLnV0Y1N1bmRheSA9IHV0Y1dlZWs7XG4gIGV4cG9ydHMudXRjU3VuZGF5cyA9IHV0Y1N1bmRheXM7XG4gIGV4cG9ydHMudXRjTW9uZGF5ID0gdXRjTW9uZGF5O1xuICBleHBvcnRzLnV0Y01vbmRheXMgPSB1dGNNb25kYXlzO1xuICBleHBvcnRzLnV0Y1R1ZXNkYXkgPSB1dGNUdWVzZGF5O1xuICBleHBvcnRzLnV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheXM7XG4gIGV4cG9ydHMudXRjV2VkbmVzZGF5ID0gdXRjV2VkbmVzZGF5O1xuICBleHBvcnRzLnV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXlzO1xuICBleHBvcnRzLnV0Y1RodXJzZGF5ID0gdXRjVGh1cnNkYXk7XG4gIGV4cG9ydHMudXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXlzO1xuICBleHBvcnRzLnV0Y0ZyaWRheSA9IHV0Y0ZyaWRheTtcbiAgZXhwb3J0cy51dGNGcmlkYXlzID0gdXRjRnJpZGF5cztcbiAgZXhwb3J0cy51dGNTYXR1cmRheSA9IHV0Y1NhdHVyZGF5O1xuICBleHBvcnRzLnV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5cztcbiAgZXhwb3J0cy51dGNNb250aCA9IHV0Y01vbnRoO1xuICBleHBvcnRzLnV0Y01vbnRocyA9IHV0Y01vbnRocztcbiAgZXhwb3J0cy51dGNZZWFyID0gdXRjWWVhcjtcbiAgZXhwb3J0cy51dGNZZWFycyA9IHV0Y1llYXJzO1xuICBleHBvcnRzLmZvcm1hdExvY2FsZSA9IGZvcm1hdExvY2FsZTtcbiAgZXhwb3J0cy5mb3JtYXREZWZhdWx0TG9jYWxlID0gZGVmYXVsdExvY2FsZTtcbiAgZXhwb3J0cy5mb3JtYXRTcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXI7XG4gIGV4cG9ydHMucHJlY2lzaW9uRml4ZWQgPSBwcmVjaXNpb25GaXhlZDtcbiAgZXhwb3J0cy5wcmVjaXNpb25QcmVmaXggPSBwcmVjaXNpb25QcmVmaXg7XG4gIGV4cG9ydHMucHJlY2lzaW9uUm91bmQgPSBwcmVjaXNpb25Sb3VuZDtcbiAgZXhwb3J0cy5pc29Gb3JtYXQgPSBmb3JtYXRJc287XG4gIGV4cG9ydHMuaXNvUGFyc2UgPSBwYXJzZUlzbztcbiAgZXhwb3J0cy50aW1lRm9ybWF0TG9jYWxlID0gZm9ybWF0TG9jYWxlJDE7XG4gIGV4cG9ydHMudGltZUZvcm1hdERlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlJDE7XG4gIGV4cG9ydHMuc2NhbGVCYW5kID0gYmFuZDtcbiAgZXhwb3J0cy5zY2FsZVBvaW50ID0gcG9pbnQkNDtcbiAgZXhwb3J0cy5zY2FsZUlkZW50aXR5ID0gaWRlbnRpdHkkNDtcbiAgZXhwb3J0cy5zY2FsZUxpbmVhciA9IGxpbmVhciQyO1xuICBleHBvcnRzLnNjYWxlTG9nID0gbG9nO1xuICBleHBvcnRzLnNjYWxlT3JkaW5hbCA9IG9yZGluYWw7XG4gIGV4cG9ydHMuc2NhbGVJbXBsaWNpdCA9IGltcGxpY2l0O1xuICBleHBvcnRzLnNjYWxlUG93ID0gcG93O1xuICBleHBvcnRzLnNjYWxlU3FydCA9IHNxcnQ7XG4gIGV4cG9ydHMuc2NhbGVRdWFudGlsZSA9IHF1YW50aWxlO1xuICBleHBvcnRzLnNjYWxlUXVhbnRpemUgPSBxdWFudGl6ZSQxO1xuICBleHBvcnRzLnNjYWxlVGhyZXNob2xkID0gdGhyZXNob2xkJDE7XG4gIGV4cG9ydHMuc2NhbGVUaW1lID0gdGltZTtcbiAgZXhwb3J0cy5zY2FsZVV0YyA9IHV0Y1RpbWU7XG4gIGV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkxMCA9IGNhdGVnb3J5MTA7XG4gIGV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMGIgPSBjYXRlZ29yeTIwYjtcbiAgZXhwb3J0cy5zY2hlbWVDYXRlZ29yeTIwYyA9IGNhdGVnb3J5MjBjO1xuICBleHBvcnRzLnNjaGVtZUNhdGVnb3J5MjAgPSBjYXRlZ29yeTIwO1xuICBleHBvcnRzLnNjYWxlU2VxdWVudGlhbCA9IHNlcXVlbnRpYWw7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDdWJlaGVsaXhEZWZhdWx0ID0gY3ViZWhlbGl4JDM7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVSYWluYm93ID0gcmFpbmJvdyQxO1xuICBleHBvcnRzLmludGVycG9sYXRlV2FybSA9IHdhcm07XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDb29sID0gY29vbDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVZpcmlkaXMgPSB2aXJpZGlzO1xuICBleHBvcnRzLmludGVycG9sYXRlTWFnbWEgPSBtYWdtYTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUluZmVybm8gPSBpbmZlcm5vO1xuICBleHBvcnRzLmludGVycG9sYXRlUGxhc21hID0gcGxhc21hO1xuICBleHBvcnRzLmNyZWF0b3IgPSBjcmVhdG9yO1xuICBleHBvcnRzLmN1c3RvbUV2ZW50ID0gY3VzdG9tRXZlbnQ7XG4gIGV4cG9ydHMubG9jYWwgPSBsb2NhbDtcbiAgZXhwb3J0cy5tYXRjaGVyID0gbWF0Y2hlciQxO1xuICBleHBvcnRzLm1vdXNlID0gbW91c2U7XG4gIGV4cG9ydHMubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBleHBvcnRzLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuICBleHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbiAgZXhwb3J0cy5zZWxlY3RBbGwgPSBzZWxlY3RBbGw7XG4gIGV4cG9ydHMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICBleHBvcnRzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gIGV4cG9ydHMuc2VsZWN0b3JBbGwgPSBzZWxlY3RvckFsbDtcbiAgZXhwb3J0cy50b3VjaCA9IHRvdWNoO1xuICBleHBvcnRzLnRvdWNoZXMgPSB0b3VjaGVzO1xuICBleHBvcnRzLndpbmRvdyA9IHdpbmRvdztcbiAgZXhwb3J0cy5hY3RpdmUgPSBhY3RpdmU7XG4gIGV4cG9ydHMuaW50ZXJydXB0ID0gaW50ZXJydXB0O1xuICBleHBvcnRzLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICBleHBvcnRzLmF4aXNUb3AgPSBheGlzVG9wO1xuICBleHBvcnRzLmF4aXNSaWdodCA9IGF4aXNSaWdodDtcbiAgZXhwb3J0cy5heGlzQm90dG9tID0gYXhpc0JvdHRvbTtcbiAgZXhwb3J0cy5heGlzTGVmdCA9IGF4aXNMZWZ0O1xuICBleHBvcnRzLmNsdXN0ZXIgPSBjbHVzdGVyO1xuICBleHBvcnRzLmhpZXJhcmNoeSA9IGhpZXJhcmNoeTtcbiAgZXhwb3J0cy5wYWNrID0gaW5kZXg7XG4gIGV4cG9ydHMucGFja1NpYmxpbmdzID0gc2libGluZ3M7XG4gIGV4cG9ydHMucGFja0VuY2xvc2UgPSBlbmNsb3NlO1xuICBleHBvcnRzLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgZXhwb3J0cy5zdHJhdGlmeSA9IHN0cmF0aWZ5O1xuICBleHBvcnRzLnRyZWUgPSB0cmVlO1xuICBleHBvcnRzLnRyZWVtYXAgPSBpbmRleCQxO1xuICBleHBvcnRzLnRyZWVtYXBCaW5hcnkgPSBiaW5hcnk7XG4gIGV4cG9ydHMudHJlZW1hcERpY2UgPSB0cmVlbWFwRGljZTtcbiAgZXhwb3J0cy50cmVlbWFwU2xpY2UgPSB0cmVlbWFwU2xpY2U7XG4gIGV4cG9ydHMudHJlZW1hcFNsaWNlRGljZSA9IHNsaWNlRGljZTtcbiAgZXhwb3J0cy50cmVlbWFwU3F1YXJpZnkgPSBzcXVhcmlmeTtcbiAgZXhwb3J0cy50cmVlbWFwUmVzcXVhcmlmeSA9IHJlc3F1YXJpZnk7XG4gIGV4cG9ydHMuZm9yY2VDZW50ZXIgPSBjZW50ZXIkMTtcbiAgZXhwb3J0cy5mb3JjZUNvbGxpZGUgPSBjb2xsaWRlO1xuICBleHBvcnRzLmZvcmNlTGluayA9IGxpbms7XG4gIGV4cG9ydHMuZm9yY2VNYW55Qm9keSA9IG1hbnlCb2R5O1xuICBleHBvcnRzLmZvcmNlU2ltdWxhdGlvbiA9IHNpbXVsYXRpb247XG4gIGV4cG9ydHMuZm9yY2VYID0geCQzO1xuICBleHBvcnRzLmZvcmNlWSA9IHkkMztcbiAgZXhwb3J0cy5kcmFnID0gZHJhZztcbiAgZXhwb3J0cy5kcmFnRGlzYWJsZSA9IGRyYWdEaXNhYmxlO1xuICBleHBvcnRzLmRyYWdFbmFibGUgPSBkcmFnRW5hYmxlO1xuICBleHBvcnRzLnZvcm9ub2kgPSB2b3Jvbm9pO1xuICBleHBvcnRzLnpvb20gPSB6b29tO1xuICBleHBvcnRzLnpvb21JZGVudGl0eSA9IGlkZW50aXR5JDY7XG4gIGV4cG9ydHMuem9vbVRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgZXhwb3J0cy5icnVzaCA9IGJydXNoO1xuICBleHBvcnRzLmJydXNoWCA9IGJydXNoWDtcbiAgZXhwb3J0cy5icnVzaFkgPSBicnVzaFk7XG4gIGV4cG9ydHMuYnJ1c2hTZWxlY3Rpb24gPSBicnVzaFNlbGVjdGlvbjtcbiAgZXhwb3J0cy5jaG9yZCA9IGNob3JkO1xuICBleHBvcnRzLnJpYmJvbiA9IHJpYmJvbjtcbiAgZXhwb3J0cy5nZW9BbGJlcnMgPSBhbGJlcnM7XG4gIGV4cG9ydHMuZ2VvQWxiZXJzVXNhID0gYWxiZXJzVXNhO1xuICBleHBvcnRzLmdlb0FyZWEgPSBhcmVhJDI7XG4gIGV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1YWxBcmVhID0gYXppbXV0aGFsRXF1YWxBcmVhO1xuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbEVxdWFsQXJlYVJhdztcbiAgZXhwb3J0cy5nZW9BemltdXRoYWxFcXVpZGlzdGFudCA9IGF6aW11dGhhbEVxdWlkaXN0YW50O1xuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWlkaXN0YW50UmF3ID0gYXppbXV0aGFsRXF1aWRpc3RhbnRSYXc7XG4gIGV4cG9ydHMuZ2VvQm91bmRzID0gYm91bmRzO1xuICBleHBvcnRzLmdlb0NlbnRyb2lkID0gY2VudHJvaWQkMTtcbiAgZXhwb3J0cy5nZW9DaXJjbGUgPSBjaXJjbGUkMTtcbiAgZXhwb3J0cy5nZW9DbGlwRXh0ZW50ID0gZXh0ZW50JDE7XG4gIGV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWwgPSBjb25pY0NvbmZvcm1hbDtcbiAgZXhwb3J0cy5nZW9Db25pY0NvbmZvcm1hbFJhdyA9IGNvbmljQ29uZm9ybWFsUmF3O1xuICBleHBvcnRzLmdlb0NvbmljRXF1YWxBcmVhID0gY29uaWNFcXVhbEFyZWE7XG4gIGV4cG9ydHMuZ2VvQ29uaWNFcXVhbEFyZWFSYXcgPSBjb25pY0VxdWFsQXJlYVJhdztcbiAgZXhwb3J0cy5nZW9Db25pY0VxdWlkaXN0YW50ID0gY29uaWNFcXVpZGlzdGFudDtcbiAgZXhwb3J0cy5nZW9Db25pY0VxdWlkaXN0YW50UmF3ID0gY29uaWNFcXVpZGlzdGFudFJhdztcbiAgZXhwb3J0cy5nZW9EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICBleHBvcnRzLmdlb0VxdWlyZWN0YW5ndWxhciA9IGVxdWlyZWN0YW5ndWxhcjtcbiAgZXhwb3J0cy5nZW9FcXVpcmVjdGFuZ3VsYXJSYXcgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XG4gIGV4cG9ydHMuZ2VvR25vbW9uaWMgPSBnbm9tb25pYztcbiAgZXhwb3J0cy5nZW9Hbm9tb25pY1JhdyA9IGdub21vbmljUmF3O1xuICBleHBvcnRzLmdlb0dyYXRpY3VsZSA9IGdyYXRpY3VsZTtcbiAgZXhwb3J0cy5nZW9JbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlJDI7XG4gIGV4cG9ydHMuZ2VvTGVuZ3RoID0gbGVuZ3RoJDI7XG4gIGV4cG9ydHMuZ2VvTWVyY2F0b3IgPSBtZXJjYXRvcjtcbiAgZXhwb3J0cy5nZW9NZXJjYXRvclJhdyA9IG1lcmNhdG9yUmF3O1xuICBleHBvcnRzLmdlb09ydGhvZ3JhcGhpYyA9IG9ydGhvZ3JhcGhpYztcbiAgZXhwb3J0cy5nZW9PcnRob2dyYXBoaWNSYXcgPSBvcnRob2dyYXBoaWNSYXc7XG4gIGV4cG9ydHMuZ2VvUGF0aCA9IGluZGV4JDM7XG4gIGV4cG9ydHMuZ2VvUHJvamVjdGlvbiA9IHByb2plY3Rpb247XG4gIGV4cG9ydHMuZ2VvUHJvamVjdGlvbk11dGF0b3IgPSBwcm9qZWN0aW9uTXV0YXRvcjtcbiAgZXhwb3J0cy5nZW9Sb3RhdGlvbiA9IHJvdGF0aW9uO1xuICBleHBvcnRzLmdlb1N0ZXJlb2dyYXBoaWMgPSBzdGVyZW9ncmFwaGljO1xuICBleHBvcnRzLmdlb1N0ZXJlb2dyYXBoaWNSYXcgPSBzdGVyZW9ncmFwaGljUmF3O1xuICBleHBvcnRzLmdlb1N0cmVhbSA9IHN0cmVhbTtcbiAgZXhwb3J0cy5nZW9UcmFuc2Zvcm0gPSB0cmFuc2Zvcm0kMTtcbiAgZXhwb3J0cy5nZW9UcmFuc3ZlcnNlTWVyY2F0b3IgPSB0cmFuc3ZlcnNlTWVyY2F0b3I7XG4gIGV4cG9ydHMuZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yUmF3ID0gdHJhbnN2ZXJzZU1lcmNhdG9yUmF3O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTsiLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDQuMS4xXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB4O1xuICByZXR1cm4geCAhPT0gbnVsbCAmJiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDtcbmlmIChBcnJheS5pc0FycmF5KSB7XG4gIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbn0gZWxzZSB7XG4gIF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xufVxuXG52YXIgaXNBcnJheSA9IF9pc0FycmF5O1xuXG52YXIgbGVuID0gMDtcbnZhciB2ZXJ0eE5leHQgPSB1bmRlZmluZWQ7XG52YXIgY3VzdG9tU2NoZWR1bGVyRm4gPSB1bmRlZmluZWQ7XG5cbnZhciBhc2FwID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gIHF1ZXVlW2xlbl0gPSBjYWxsYmFjaztcbiAgcXVldWVbbGVuICsgMV0gPSBhcmc7XG4gIGxlbiArPSAyO1xuICBpZiAobGVuID09PSAyKSB7XG4gICAgLy8gSWYgbGVuIGlzIDIsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgLy8gd2lsbCBiZSBwcm9jZXNzZWQgYnkgdGhpcyBmbHVzaCB0aGF0IHdlIGFyZSBzY2hlZHVsaW5nLlxuICAgIGlmIChjdXN0b21TY2hlZHVsZXJGbikge1xuICAgICAgY3VzdG9tU2NoZWR1bGVyRm4oZmx1c2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTY2hlZHVsZXIoc2NoZWR1bGVGbikge1xuICBjdXN0b21TY2hlZHVsZXJGbiA9IHNjaGVkdWxlRm47XG59XG5cbmZ1bmN0aW9uIHNldEFzYXAoYXNhcEZuKSB7XG4gIGFzYXAgPSBhc2FwRm47XG59XG5cbnZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG52YXIgYnJvd3Nlckdsb2JhbCA9IGJyb3dzZXJXaW5kb3cgfHwge307XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBicm93c2VyR2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHt9KS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIGlmICh0eXBlb2YgdmVydHhOZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2ZXJ0eE5leHQoZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gZXM2LXByb21pc2Ugd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4gIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZVtpICsgMV07XG5cbiAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgcXVldWVbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkge1xuICB0cnkge1xuICAgIHZhciByID0gcmVxdWlyZTtcbiAgICB2YXIgdmVydHggPSByKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2ggPSB1bmRlZmluZWQ7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTmV4dFRpY2soKTtcbn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gIHZhciBwYXJlbnQgPSB0aGlzO1xuXG4gIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICB9XG5cbiAgdmFyIF9zdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cbiAgaWYgKF9zdGF0ZSkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBfYXJndW1lbnRzW19zdGF0ZSAtIDFdO1xuICAgICAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhfc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcGFyZW50Ll9yZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkO1xufVxuXG4vKipcbiAgYFByb21pc2UucmVzb2x2ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSByZXNvbHZlZCB3aXRoIHRoZVxuICBwYXNzZWQgYHZhbHVlYC4gSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlc29sdmUoMSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKDEpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVzb2x2ZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSB2YWx1ZSB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aFxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSBnaXZlblxuICBgdmFsdWVgXG4qL1xuZnVuY3Rpb24gcmVzb2x2ZSQxKG9iamVjdCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxudmFyIFBST01JU0VfSUQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbnZhciBHRVRfVEhFTl9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gZXJyb3I7XG4gICAgcmV0dXJuIEdFVF9USEVOX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiQkMSwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4kJDEuY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbiQkMSkge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiQkMSwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkMSA9PT0gdGhlbiAmJiBtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yLnJlc29sdmUgPT09IHJlc29sdmUkMSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQxID09PSBHRVRfVEhFTl9FUlJPUikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIEdFVF9USEVOX0VSUk9SLmVycm9yKTtcbiAgICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHRoZW4kJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhlbiQkMSkpIHtcbiAgICAgIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICByZWplY3QocHJvbWlzZSwgc2VsZkZ1bGZpbGxtZW50KCkpO1xuICB9IGVsc2UgaWYgKG9iamVjdE9yRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgZ2V0VGhlbih2YWx1ZSkpO1xuICB9IGVsc2Uge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5fb25lcnJvcikge1xuICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgfVxuXG4gIHB1Ymxpc2gocHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvbWlzZS5fcmVzdWx0ID0gdmFsdWU7XG4gIHByb21pc2UuX3N0YXRlID0gRlVMRklMTEVEO1xuXG4gIGlmIChwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggIT09IDApIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHByb21pc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICBhc2FwKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9zdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gIHZhciBsZW5ndGggPSBfc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG4gIHBhcmVudC5fb25lcnJvciA9IG51bGw7XG5cbiAgX3N1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgUkVKRUNURURdID0gb25SZWplY3Rpb247XG5cbiAgaWYgKGxlbmd0aCA9PT0gMCAmJiBwYXJlbnQuX3N0YXRlKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwYXJlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2gocHJvbWlzZSkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBwcm9taXNlLl9zdWJzY3JpYmVycztcbiAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcblxuICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gdW5kZWZpbmVkLFxuICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQsXG4gICAgICBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICB9XG4gIH1cblxuICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBFcnJvck9iamVjdCgpIHtcbiAgdGhpcy5lcnJvciA9IG51bGw7XG59XG5cbnZhciBUUllfQ0FUQ0hfRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVycm9yID0gdW5kZWZpbmVkLFxuICAgICAgc3VjY2VlZGVkID0gdW5kZWZpbmVkLFxuICAgICAgZmFpbGVkID0gdW5kZWZpbmVkO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZS5lcnJvciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChmYWlsZWQpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICB0cnkge1xuICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKSB7XG4gICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiByZWplY3RQcm9taXNlKHJlYXNvbikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZWplY3QocHJvbWlzZSwgZSk7XG4gIH1cbn1cblxudmFyIGlkID0gMDtcbmZ1bmN0aW9uIG5leHRJZCgpIHtcbiAgcmV0dXJuIGlkKys7XG59XG5cbmZ1bmN0aW9uIG1ha2VQcm9taXNlKHByb21pc2UpIHtcbiAgcHJvbWlzZVtQUk9NSVNFX0lEXSA9IGlkKys7XG4gIHByb21pc2UuX3N0YXRlID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9yZXN1bHQgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3N1YnNjcmliZXJzID0gW107XG59XG5cbmZ1bmN0aW9uIEVudW1lcmF0b3IkMShDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICB0aGlzLnByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKCF0aGlzLnByb21pc2VbUFJPTUlTRV9JRF0pIHtcbiAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdGhpcy5fcmVtYWluaW5nID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgIHRoaXMuX2VudW1lcmF0ZShpbnB1dCk7XG4gICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZWplY3QodGhpcy5wcm9taXNlLCB2YWxpZGF0aW9uRXJyb3IoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn1cblxuRW51bWVyYXRvciQxLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLl9lYWNoRW50cnkoaW5wdXRbaV0sIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yJDEucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiAoZW50cnksIGkpIHtcbiAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICB2YXIgcmVzb2x2ZSQkMSA9IGMucmVzb2x2ZTtcblxuICBpZiAocmVzb2x2ZSQkMSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgdmFyIF90aGVuID0gZ2V0VGhlbihlbnRyeSk7XG5cbiAgICBpZiAoX3RoZW4gPT09IHRoZW4gJiYgZW50cnkuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UkMikge1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgYyhub29wKTtcbiAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBjKGZ1bmN0aW9uIChyZXNvbHZlJCQxKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlJCQxKGVudHJ5KTtcbiAgICAgIH0pLCBpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fd2lsbFNldHRsZUF0KHJlc29sdmUkJDEoZW50cnkpLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvciQxLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gKHN0YXRlLCBpLCB2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgIGlmIChzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IkMS5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBpKSB7XG4gIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICBzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgfSk7XG59O1xuXG4vKipcbiAgYFByb21pc2UuYWxsYCBhY2NlcHRzIGFuIGFycmF5IG9mIHByb21pc2VzLCBhbmQgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoXG4gIGlzIGZ1bGZpbGxlZCB3aXRoIGFuIGFycmF5IG9mIGZ1bGZpbGxtZW50IHZhbHVlcyBmb3IgdGhlIHBhc3NlZCBwcm9taXNlcywgb3JcbiAgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uIG9mIHRoZSBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBiZSByZWplY3RlZC4gSXQgY2FzdHMgYWxsXG4gIGVsZW1lbnRzIG9mIHRoZSBwYXNzZWQgaXRlcmFibGUgdG8gcHJvbWlzZXMgYXMgaXQgcnVucyB0aGlzIGFsZ29yaXRobS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVzb2x2ZSgyKTtcbiAgbGV0IHByb21pc2UzID0gcmVzb2x2ZSgzKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIFRoZSBhcnJheSBoZXJlIHdvdWxkIGJlIFsgMSwgMiwgMyBdO1xuICB9KTtcbiAgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBhbGxgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlcydzXG4gIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZTpcblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVqZWN0KG5ldyBFcnJvcihcIjJcIikpO1xuICBsZXQgcHJvbWlzZTMgPSByZWplY3QobmV3IEVycm9yKFwiM1wiKSk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVucyBiZWNhdXNlIHRoZXJlIGFyZSByZWplY3RlZCBwcm9taXNlcyFcbiAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAvLyBlcnJvci5tZXNzYWdlID09PSBcIjJcIlxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBhbGxcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBlbnRyaWVzIGFycmF5IG9mIHByb21pc2VzXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgYHByb21pc2VzYCBoYXZlIGJlZW5cbiAgZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBhbGwkMShlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvciQxKHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yYWNlYCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2ggaXMgc2V0dGxlZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlXG4gIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIHNldHRsZS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcigncHJvbWlzZSAyJykpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2Ugd2hpY2ggc2V0dGxlcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIGZpcnN0IHBhc3NlZFxuICBwcm9taXNlIHRvIHNldHRsZS5cbiovXG5mdW5jdGlvbiByYWNlJDEoZW50cmllcykge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmICghaXNBcnJheShlbnRyaWVzKSkge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIHJhY2UuJykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAgYFByb21pc2UucmVqZWN0YCByZXR1cm5zIGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWQgYHJlYXNvbmAuXG4gIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlamVjdFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSByZWFzb24gdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGguXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIGdpdmVuIGByZWFzb25gLlxuKi9cbmZ1bmN0aW9uIHJlamVjdCQxKHJlYXNvbikge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBuZWVkc1Jlc29sdmVyKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmV3KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xufVxuXG4vKipcbiAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgVGVybWlub2xvZ3lcbiAgLS0tLS0tLS0tLS1cblxuICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAtIGB0aGVuYWJsZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBhIGB0aGVuYCBtZXRob2QuXG4gIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gIC0gYHJlYXNvbmAgaXMgYSB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aHkgYSBwcm9taXNlIHdhcyByZWplY3RlZC5cbiAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkXG4gIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgUHJvbWlzZXMgY2FuIGFsc28gYmUgc2FpZCB0byAqcmVzb2x2ZSogYSB2YWx1ZS4gIElmIHRoaXMgdmFsdWUgaXMgYWxzbyBhXG4gIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gIGl0c2VsZiByZWplY3QsIGFuZCBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpbGxcbiAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICBCYXNpYyBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tXG5cbiAgYGBganNcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBvbiBzdWNjZXNzXG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAvLyBvbiBmYWlsdXJlXG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgQWR2YW5jZWQgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLS0tLVxuXG4gIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgYGBganNcbiAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gIGBgYGpzXG4gIFByb21pc2UuYWxsKFtcbiAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICBnZXRKU09OKCcvY29tbWVudHMnKVxuICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgIHZhbHVlc1sxXSAvLyA9PiBjb21tZW50c0pTT05cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0pO1xuICBgYGBcblxuICBAY2xhc3MgUHJvbWlzZVxuICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEBjb25zdHJ1Y3RvclxuKi9cbmZ1bmN0aW9uIFByb21pc2UkMihyZXNvbHZlcikge1xuICB0aGlzW1BST01JU0VfSURdID0gbmV4dElkKCk7XG4gIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuXG4gIGlmIChub29wICE9PSByZXNvbHZlcikge1xuICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgdGhpcyBpbnN0YW5jZW9mIFByb21pc2UkMiA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gIH1cbn1cblxuUHJvbWlzZSQyLmFsbCA9IGFsbCQxO1xuUHJvbWlzZSQyLnJhY2UgPSByYWNlJDE7XG5Qcm9taXNlJDIucmVzb2x2ZSA9IHJlc29sdmUkMTtcblByb21pc2UkMi5yZWplY3QgPSByZWplY3QkMTtcblByb21pc2UkMi5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZSQyLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UkMi5fYXNhcCA9IGFzYXA7XG5cblByb21pc2UkMi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQcm9taXNlJDIsXG5cbiAgLyoqXG4gICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQ2hhaW5pbmdcbiAgICAtLS0tLS0tLVxuICBcbiAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgICB9KTtcbiAgXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gICAgfSk7XG4gICAgYGBgXG4gICAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFzc2ltaWxhdGlvblxuICAgIC0tLS0tLS0tLS0tLVxuICBcbiAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICAgIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBTaW1wbGUgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCByZXN1bHQ7XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRSZXN1bHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQWR2YW5jZWQgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCBhdXRob3IsIGJvb2tzO1xuICBcbiAgICB0cnkge1xuICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gIFxuICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcbiAgXG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuICBcbiAgICB9XG4gIFxuICAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZEF1dGhvcigpLlxuICAgICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgICAgLy8gZm91bmQgYm9va3NcbiAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCB0aGVuXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gIHRoZW46IHRoZW4sXG5cbiAgLyoqXG4gICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICAgIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG4gIFxuICAgIGBgYGpzXG4gICAgZnVuY3Rpb24gZmluZEF1dGhvcigpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgfVxuICBcbiAgICAvLyBzeW5jaHJvbm91c1xuICAgIHRyeSB7XG4gICAgICBmaW5kQXV0aG9yKCk7XG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfVxuICBcbiAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGNhdGNoXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgJ2NhdGNoJzogZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7XG4gIH1cbn07XG5cbi8qZ2xvYmFsIHNlbGYqL1xuZnVuY3Rpb24gcG9seWZpbGwkMSgpIHtcbiAgICB2YXIgbG9jYWwgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBnbG9iYWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgICBpZiAoUCkge1xuICAgICAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNlVG9TdHJpbmcgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZSQyO1xufVxuXG4vLyBTdHJhbmdlIGNvbXBhdC4uXG5Qcm9taXNlJDIucG9seWZpbGwgPSBwb2x5ZmlsbCQxO1xuUHJvbWlzZSQyLlByb21pc2UgPSBQcm9taXNlJDI7XG5cbnJldHVybiBQcm9taXNlJDI7XG5cbn0pKSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzNi1wcm9taXNlLm1hcFxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImltcG9ydCB7UGxvaWR5fSBmcm9tICcuL3Bsb2lkeSc7XG5cbmV4cG9ydCBjbGFzcyBDb2xvciB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAvLyBJZGVvZ3JhbSBjb25maWdcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5fcGxvaWR5ID0gbmV3IFBsb2lkeSh0aGlzLl9jb25maWcpO1xuICB9XG5cbiAgZ2V0QXJtQ29sb3IoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcikge1xuICAgIGlmICh0aGlzLl9jb25maWcuYXJtQ29sb3JzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmFybUNvbG9yc1thcm1OdW1iZXJdO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY29uZmlnLmFuY2VzdG9ycykge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldFBvbHlwbG9pZEFybUNvbG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBhcm1OdW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBnZXRCb3JkZXJDb2xvcihjaHJTZXROdW1iZXIsIGNock51bWJlciwgYXJtTnVtYmVyKSB7XG4gICAgaWYgKGNock51bWJlciA8IHRoaXMuX2NvbmZpZy5wbG9pZHkpIHtcbiAgICAgIHJldHVybiAnIzAwMCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9wbG9pZHkuZXhpc3RzKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBhcm1OdW1iZXIpKSB7XG4gICAgICByZXR1cm4gJyMwMDAnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyNmZmYnO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRQb2x5cGxvaWRBcm1Db2xvcihjaHJTZXROdW1iZXIsIGNock51bWJlciwgYXJtTnVtYmVyKSB7XG4gICAgaWYgKCF0aGlzLl9wbG9pZHkuZXhpc3RzKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBhcm1OdW1iZXIpKSB7XG4gICAgICByZXR1cm4gJ3RyYW5zcGFyZW50JztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID1cbiAgICAgICAgdGhpcy5fcGxvaWR5LmdldEFuY2VzdG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBhcm1OdW1iZXIpO1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5hbmNlc3RvcnNbYW5jZXN0b3JdO1xuICAgIH1cbiAgfVxuXG59XG4iLCIvLyBEZXZlbG9wZWQgYnkgRXJpYyBXZWl0eiAoaHR0cHM6Ly9naXRodWIuY29tL2V3ZWl0eilcblxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICogYXMgZDNwcm9taXNlIGZyb20gJ2QzLnByb21pc2UnO1xuaW1wb3J0IHtQcm9taXNlfSBmcm9tICdlczYtcHJvbWlzZSc7XG5cbmltcG9ydCB7UGxvaWR5fSBmcm9tICcuL3Bsb2lkeSc7XG5pbXBvcnQge0xheW91dH0gZnJvbSAnLi9sYXlvdXRzL2xheW91dCc7XG5pbXBvcnQge01vZGVsQWRhcHRlcn0gZnJvbSAnLi9tb2RlbC1hZGFwdGVyJztcbmltcG9ydCB7Q2hyb21vc29tZX0gZnJvbSAnLi92aWV3cy9jaHJvbW9zb21lJztcblxuZDMucHJvbWlzZSA9IGQzcHJvbWlzZTtcblxuZXhwb3J0IGNsYXNzIElkZW9ncmFtIHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgb3JpZW50YXRpb24sXG4gICAgICBjaHJXaWR0aCwgY2hySGVpZ2h0LFxuICAgICAgY29udGFpbmVyLCByZWN0O1xuXG4gICAgLy8gQ2xvbmUgdGhlIGNvbmZpZyBvYmplY3QsIHRvIGFsbG93IG11bHRpcGxlIGluc3RhbnRpYXRpb25zXG4gICAgLy8gd2l0aG91dCBwaWNraW5nIHVwIHByaW9yIGlkZW9ncmFtJ3Mgc2V0dGluZ3NcbiAgICB0aGlzLmNvbmZpZyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XG5cbiAgICAvLyBUT0RPOiBEb2N1bWVudCB0aGlzXG4gICAgdGhpcy5fYmFuZHNYT2Zmc2V0ID0gMzA7XG5cbiAgICB0aGlzLmRlYnVnID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLmRhdGFEaXIpIHtcbiAgICAgIHRoaXMuY29uZmlnLmRhdGFEaXIgPSAnLi4vZGF0YS9iYW5kcy9uYXRpdmUvJztcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnBsb2lkeSkge1xuICAgICAgdGhpcy5jb25maWcucGxvaWR5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcucGxvaWR5ID4gMSkge1xuICAgICAgdGhpcy5zZXhDaHJvbW9zb21lcyA9IHt9O1xuICAgICAgaWYgKCF0aGlzLmNvbmZpZy5zZXgpIHtcbiAgICAgICAgLy8gRGVmYXVsdCB0byAnbWFsZScgcGVyIGh1bWFuLCBtb3VzZSByZWZlcmVuY2UgZ2Vub21lcy5cbiAgICAgICAgLy8gVE9ETzogVGhlIGRlZmF1bHQgc2V4IHZhbHVlIHNob3VsZCBwcm9iYWJseSBiZSB0aGUgaGV0ZXJvZ2FtZXRpYyBzZXgsXG4gICAgICAgIC8vIGkuZS4gd2hpY2hldmVyIHNleCBoYXMgYWxsb3NvbWVzIHRoYXQgZGlmZmVyIGluIG1vcnBob2xvZ3kuXG4gICAgICAgIC8vIEluIG1hbW1hbHMgYW5kIG1vc3QgaW5zZWN0cyB0aGF0IGlzIHRoZSBtYWxlLlxuICAgICAgICAvLyBIb3dldmVyLCBpbiBiaXJkcyBhbmQgcmVwdGlsZXMsIHRoYXQgaXMgZmVtYWxlLlxuICAgICAgICB0aGlzLmNvbmZpZy5zZXggPSAnbWFsZSc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb25maWcucGxvaWR5ID09PSAyICYmICF0aGlzLmNvbmZpZy5hbmNlc3RvcnMpIHtcbiAgICAgICAgdGhpcy5jb25maWcuYW5jZXN0b3JzID0ge006ICcjZmZiNmMxJywgUDogJyNhZGQ4ZTYnfTtcbiAgICAgICAgdGhpcy5jb25maWcucGxvaWR5RGVzYyA9ICdNUCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuY29uZmlnLmNvbnRhaW5lciA9ICdib2R5JztcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdG9yID0gdGhpcy5jb25maWcuY29udGFpbmVyICsgJyAjX2lkZW9ncmFtJztcblxuICAgIGlmICghdGhpcy5jb25maWcucmVzb2x1dGlvbikge1xuICAgICAgdGhpcy5jb25maWcucmVzb2x1dGlvbiA9IDg1MDtcbiAgICB9XG5cbiAgICBpZiAoJ3Nob3dDaHJvbW9zb21lTGFiZWxzJyBpbiB0aGlzLmNvbmZpZyA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dDaHJvbW9zb21lTGFiZWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLm9yaWVudGF0aW9uKSB7XG4gICAgICBvcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgICB0aGlzLmNvbmZpZy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25maWcuY2hySGVpZ2h0KSB7XG4gICAgICBjb250YWluZXIgPSB0aGlzLmNvbmZpZy5jb250YWluZXI7XG4gICAgICByZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgY2hySGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaHJIZWlnaHQgPSByZWN0LndpZHRoO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGFpbmVyID09PSAnYm9keScpIHtcbiAgICAgICAgY2hySGVpZ2h0ID0gNDAwO1xuICAgICAgfVxuICAgICAgdGhpcy5jb25maWcuY2hySGVpZ2h0ID0gY2hySGVpZ2h0O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25maWcuY2hyV2lkdGgpIHtcbiAgICAgIGNocldpZHRoID0gMTA7XG4gICAgICBjaHJIZWlnaHQgPSB0aGlzLmNvbmZpZy5jaHJIZWlnaHQ7XG5cbiAgICAgIGlmIChjaHJIZWlnaHQgPCA5MDAgJiYgY2hySGVpZ2h0ID4gNTAwKSB7XG4gICAgICAgIGNocldpZHRoID0gTWF0aC5yb3VuZChjaHJIZWlnaHQgLyA0MCk7XG4gICAgICB9IGVsc2UgaWYgKGNockhlaWdodCA+PSA5MDApIHtcbiAgICAgICAgY2hyV2lkdGggPSBNYXRoLnJvdW5kKGNockhlaWdodCAvIDQ1KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29uZmlnLmNocldpZHRoID0gY2hyV2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5jaHJNYXJnaW4pIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5wbG9pZHkgPT09IDEpIHtcbiAgICAgICAgdGhpcy5jb25maWcuY2hyTWFyZ2luID0gMTA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0cyBwb2x5cGxvaWQgY2hyb21vc29tZXMgdG8gcmVsYXRpdmVseSBzbWFsbCBpbnRlcmNocm9tYXRpZCBnYXBcbiAgICAgICAgdGhpcy5jb25maWcuY2hyTWFyZ2luID0gTWF0aC5yb3VuZCh0aGlzLmNvbmZpZy5jaHJXaWR0aCAvIDQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25maWcuc2hvd0JhbmRMYWJlbHMpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dCYW5kTGFiZWxzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCdzaG93RnVsbHlCYW5kZWQnIGluIHRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZy5zaG93RnVsbHlCYW5kZWQgPSB0aGlzLmNvbmZpZy5zaG93RnVsbHlCYW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dGdWxseUJhbmRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5icnVzaCkge1xuICAgICAgdGhpcy5jb25maWcuYnJ1c2ggPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnJvd3MpIHtcbiAgICAgIHRoaXMuY29uZmlnLnJvd3MgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuYnVtcCA9IE1hdGgucm91bmQodGhpcy5jb25maWcuY2hySGVpZ2h0IC8gMTI1KTtcbiAgICB0aGlzLmFkanVzdGVkQnVtcCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmNvbmZpZy5jaHJIZWlnaHQgPCAyMDApIHtcbiAgICAgIHRoaXMuYWRqdXN0ZWRCdW1wID0gdHJ1ZTtcbiAgICAgIHRoaXMuYnVtcCA9IDQ7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5zaG93QmFuZExhYmVscykge1xuICAgICAgdGhpcy5jb25maWcuY2hyTWFyZ2luICs9IDIwO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2hyb21vc29tZSkge1xuICAgICAgdGhpcy5jb25maWcuY2hyb21vc29tZXMgPSBbY29uZmlnLmNocm9tb3NvbWVdO1xuICAgICAgaWYgKCdzaG93QmFuZExhYmVscycgaW4gY29uZmlnID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5zaG93QmFuZExhYmVscyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoJ3JvdGF0YWJsZScgaW4gY29uZmlnID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5yb3RhdGFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnNob3dOb25OdWNsZWFyQ2hyb21vc29tZXMpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dOb25OdWNsZWFyQ2hyb21vc29tZXMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRBbm5vdFNldHRpbmdzKCk7XG5cbiAgICB0aGlzLmNvbmZpZy5jaHJNYXJnaW4gPSAoXG4gICAgdGhpcy5jb25maWcuY2hyTWFyZ2luICtcbiAgICB0aGlzLmNvbmZpZy5jaHJXaWR0aCArXG4gICAgdGhpcy5jb25maWcuYW5ub3RUcmFja3NIZWlnaHQgKiAyXG4gICk7XG5cbiAgICBpZiAoY29uZmlnLm9uTG9hZCkge1xuICAgICAgdGhpcy5vbkxvYWRDYWxsYmFjayA9IGNvbmZpZy5vbkxvYWQ7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5vbkRyYXdBbm5vdHMpIHtcbiAgICAgIHRoaXMub25EcmF3QW5ub3RzQ2FsbGJhY2sgPSBjb25maWcub25EcmF3QW5ub3RzO1xuICAgIH1cblxuICAgIGlmIChjb25maWcub25CcnVzaE1vdmUpIHtcbiAgICAgIHRoaXMub25CcnVzaE1vdmVDYWxsYmFjayA9IGNvbmZpZy5vbkJydXNoTW92ZTtcbiAgICB9XG5cbiAgICB0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSAnaXNjbic7XG5cbiAgICB0aGlzLm1heExlbmd0aCA9IHtcbiAgICAgIGJwOiAwLFxuICAgICAgaXNjbjogMFxuICAgIH07XG5cbiAgICAvLyBUaGUgRS1VdGlsaWVzIEluIERlcHRoOiBQYXJhbWV0ZXJzLCBTeW50YXggYW5kIE1vcmU6XG4gICAgLy8gaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9ib29rcy9OQksyNTQ5OS9cbiAgICB0aGlzLmV1dGlscyA9ICdodHRwczovL2V1dGlscy5uY2JpLm5sbS5uaWguZ292L2VudHJlei9ldXRpbHMvJztcbiAgICB0aGlzLmVzZWFyY2ggPSB0aGlzLmV1dGlscyArICdlc2VhcmNoLmZjZ2k/cmV0bW9kZT1qc29uJztcbiAgICB0aGlzLmVzdW1tYXJ5ID0gdGhpcy5ldXRpbHMgKyAnZXN1bW1hcnkuZmNnaT9yZXRtb2RlPWpzb24nO1xuICAgIHRoaXMuZWxpbmsgPSB0aGlzLmV1dGlscyArICdlbGluay5mY2dpP3JldG1vZGU9anNvbic7XG5cbiAgICB0aGlzLm9yZ2FuaXNtcyA9IHtcbiAgICAgIDk2MDY6IHtcbiAgICAgICAgY29tbW9uTmFtZTogJ0h1bWFuJyxcbiAgICAgICAgc2NpZW50aWZpY05hbWU6ICdIb21vIHNhcGllbnMnLFxuICAgICAgICBzY2llbnRpZmljTmFtZUFiYnI6ICdILiBzYXBpZW5zJyxcbiAgICAgICAgYXNzZW1ibGllczoge1xuICAgICAgICAgIGRlZmF1bHQ6ICdHQ0ZfMDAwMDAxNDA1LjI2JywgLy8gR1JDaDM4XG4gICAgICAgICAgR1JDaDM4OiAnR0NGXzAwMDAwMTQwNS4yNicsXG4gICAgICAgICAgR1JDaDM3OiAnR0NGXzAwMDAwMTQwNS4xMydcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIDEwMDkwOiB7XG4gICAgICAgIGNvbW1vbk5hbWU6ICdNb3VzZScsXG4gICAgICAgIHNjaWVudGlmaWNOYW1lOiAnTXVzIG11c2N1bHVzJyxcbiAgICAgICAgc2NpZW50aWZpY05hbWVBYmJyOiAnTS4gbXVzY3VsdXMnLFxuICAgICAgICBhc3NlbWJsaWVzOiB7XG4gICAgICAgICAgZGVmYXVsdDogJ0dDRl8wMDAwMDE2MzUuMjAnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICA0NjQxOiB7XG4gICAgICAgIGNvbW1vbk5hbWU6ICdiYW5hbmEnLFxuICAgICAgICBzY2llbnRpZmljTmFtZTogJ011c2EgYWN1bWluYXRhJyxcbiAgICAgICAgc2NpZW50aWZpY05hbWVBYmJyOiAnTS4gYWN1bWluYXRhJyxcbiAgICAgICAgYXNzZW1ibGllczoge1xuICAgICAgICAgIGRlZmF1bHQ6ICdtb2NrJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEEgZmxhdCBhcnJheSBvZiBjaHJvbW9zb21lc1xuICAgIC8vICh0aGlzLmNocm9tb3NvbWVzIGlzIGFuIG9iamVjdCBvZlxuICAgIC8vIGFycmF5cyBvZiBjaHJvbW9zb21lcywga2V5ZWQgYnkgb3JnYW5pc20pXG4gICAgdGhpcy5jaHJvbW9zb21lc0FycmF5ID0gW107XG5cbiAgICB0aGlzLmJhbmRzVG9TaG93ID0gW107XG5cbiAgICB0aGlzLmNocm9tb3NvbWVzID0ge307XG4gICAgdGhpcy5udW1DaHJvbW9zb21lcyA9IDA7XG4gICAgdGhpcy5iYW5kRGF0YSA9IHt9O1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgKiBFbmFibGUgdXNlIG9mIEQzIGluIGNsaWVudCBhcHBzLCB2aWEgXCJkMyA9IElkZW9ncmFtLmQzXCJcbiAgKi9cbiAgc3RhdGljIGdldCBkMygpIHtcbiAgICByZXR1cm4gZDM7XG4gIH1cblxuICAvKipcbiAgKiBHZXRzIGNocm9tb3NvbWUgYmFuZCBkYXRhIGZyb20gYVxuICAqIFRTViBmaWxlLCBvciwgaWYgYmFuZCBkYXRhIGlzIHByZWZldGNoZWQsIGZyb20gYW4gYXJyYXlcbiAgKlxuICAqIFVDU0M6ICNjaHJvbSBjaHJvbVN0YXJ0ICBjaHJvbUVuZCAgbmFtZSAgZ2llU3RhaW5cbiAgKiBodHRwOi8vZ2Vub21lLnVjc2MuZWR1L2NnaS1iaW4vaGdUYWJsZXNcbiAgKiAgLSBncm91cDogTWFwcGluZyBhbmQgU2VxdWVuY2luZ1xuICAqICAtIHRyYWNrOiBDaHJvbW9zb21lIEJhbmQgKElkZW9ncmFtKVxuICAqXG4gICogTkNCSTogI2Nocm9tb3NvbWUgIGFybSBiYW5kICBpc2NuX3N0YXJ0ICBpc2NuX3N0b3AgYnBfc3RhcnQgIGJwX3N0b3Agc3RhaW4gZGVuc2l0eVxuICAqIGZ0cDovL2Z0cC5uY2JpLm5sbS5uaWguZ292L3B1Yi9nZHAvaWRlb2dyYW1fOTYwNl9HQ0ZfMDAwMDAxMzA1LjE0XzU1MF9WMVxuICAqL1xuICBnZXRCYW5kcyhjb250ZW50LCB0YXhpZCwgY2hyb21vc29tZXMpIHtcbiAgICB2YXIgbGluZXMgPSB7fSxcbiAgICAgIGRlbGltaXRlciwgdHN2TGluZXMsIGNvbHVtbnMsIGxpbmUsIHN0YWluLCBjaHIsXG4gICAgICBpLCBpbml0LCB0c3ZMaW5lc0xlbmd0aCwgc291cmNlLFxuICAgICAgc3RhcnQsIHN0b3AsIGZpcnN0Q29sdW1uLCB0bXA7XG5cbiAgICBpZiAoY29udGVudC5zbGljZSgwLCA4KSA9PT0gJ2NockJhbmRzJykge1xuICAgICAgc291cmNlID0gJ25hdGl2ZSc7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgIGNocm9tb3NvbWVzIGluc3RhbmNlb2YgQXJyYXkgJiZcbiAgICB0eXBlb2YgY2hyb21vc29tZXNbMF0gPT09ICdvYmplY3QnXG4gICkge1xuICAgICAgdG1wID0gW107XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2hyb21vc29tZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdG1wLnB1c2goY2hyb21vc29tZXNbaV0ubmFtZSk7XG4gICAgICB9XG4gICAgICBjaHJvbW9zb21lcyA9IHRtcDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNockJhbmRzID09PSAndW5kZWZpbmVkJyAmJiBzb3VyY2UgIT09ICduYXRpdmUnKSB7XG4gICAgICBkZWxpbWl0ZXIgPSAvXFx0LztcbiAgICAgIHRzdkxpbmVzID0gY29udGVudC5zcGxpdCgvXFxyXFxufFxcbi8pO1xuICAgICAgaW5pdCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGltaXRlciA9IC8gLztcbiAgICAgIGlmIChzb3VyY2UgPT09ICduYXRpdmUnKSB7XG4gICAgICAgIHRzdkxpbmVzID0gZXZhbChjb250ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRzdkxpbmVzID0gY29udGVudDtcbiAgICAgIH1cbiAgICAgIGluaXQgPSAwO1xuICAgIH1cblxuICAgIGZpcnN0Q29sdW1uID0gdHN2TGluZXNbMF0uc3BsaXQoZGVsaW1pdGVyKVswXTtcbiAgICBpZiAoZmlyc3RDb2x1bW4gPT09ICcjY2hyb21vc29tZScpIHtcbiAgICAgIHNvdXJjZSA9ICduY2JpJztcbiAgICB9IGVsc2UgaWYgKGZpcnN0Q29sdW1uID09PSAnI2Nocm9tJykge1xuICAgICAgc291cmNlID0gJ3Vjc2MnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2UgPSAnbmF0aXZlJztcbiAgICB9XG5cbiAgICB0c3ZMaW5lc0xlbmd0aCA9IHRzdkxpbmVzLmxlbmd0aDtcblxuICAgIGlmIChzb3VyY2UgPT09ICduY2JpJyB8fCBzb3VyY2UgPT09ICduYXRpdmUnKSB7XG4gICAgICBmb3IgKGkgPSBpbml0OyBpIDwgdHN2TGluZXNMZW5ndGg7IGkrKykge1xuICAgICAgICBjb2x1bW5zID0gdHN2TGluZXNbaV0uc3BsaXQoZGVsaW1pdGVyKTtcblxuICAgICAgICBjaHIgPSBjb2x1bW5zWzBdO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gSWYgYSBzcGVjaWZpYyBzZXQgb2YgY2hyb21vc29tZXMgaGFzIGJlZW4gcmVxdWVzdGVkLCBhbmRcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgY2hyb21vc29tZVxuICAgICAgICB0eXBlb2YgKGNocm9tb3NvbWVzKSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgY2hyb21vc29tZXMuaW5kZXhPZihjaHIpID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hyIGluIGxpbmVzID09PSBmYWxzZSkge1xuICAgICAgICAgIGxpbmVzW2Nocl0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YWluID0gY29sdW1uc1s3XTtcbiAgICAgICAgaWYgKGNvbHVtbnNbOF0pIHtcbiAgICAgICAgICAvLyBGb3IgZS5nLiBhY2VuIGFuZCBndmFyLCBjb2x1bW5zWzhdIChkZW5zaXR5KSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBzdGFpbiArPSBjb2x1bW5zWzhdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGluZSA9IHtcbiAgICAgICAgICBjaHI6IGNocixcbiAgICAgICAgICBicDoge1xuICAgICAgICAgICAgc3RhcnQ6IHBhcnNlSW50KGNvbHVtbnNbNV0sIDEwKSxcbiAgICAgICAgICAgIHN0b3A6IHBhcnNlSW50KGNvbHVtbnNbNl0sIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaXNjbjoge1xuICAgICAgICAgICAgc3RhcnQ6IHBhcnNlSW50KGNvbHVtbnNbM10sIDEwKSxcbiAgICAgICAgICAgIHN0b3A6IHBhcnNlSW50KGNvbHVtbnNbNF0sIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHg6IHtcbiAgICAgICAgICAgIHN0YXJ0OiAtMSxcbiAgICAgICAgICAgIHN0b3A6IC0xLFxuICAgICAgICAgICAgd2lkdGg6IC0xXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiBjb2x1bW5zWzFdICsgY29sdW1uc1syXSxcbiAgICAgICAgICBzdGFpbjogc3RhaW4sXG4gICAgICAgICAgdGF4aWQ6IHRheGlkXG4gICAgICAgIH07XG5cbiAgICAgICAgbGluZXNbY2hyXS5wdXNoKGxpbmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc291cmNlID09PSAndWNzYycpIHtcbiAgICAgIGZvciAoaSA9IGluaXQ7IGkgPCB0c3ZMaW5lc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vICNjaHJvbSBjaHJvbVN0YXJ0ICBjaHJvbUVuZCAgbmFtZSAgZ2llU3RhaW5cbiAgICAgICAgLy8gZS5nLiBmb3IgZmx5OlxuICAgICAgICAvLyBjaHI0XHQ2OTUwOFx0MTA4Mjk2XHQxMDJBMVx0bi9hXG4gICAgICAgIGNvbHVtbnMgPSB0c3ZMaW5lc1tpXS5zcGxpdChkZWxpbWl0ZXIpO1xuXG4gICAgICAgIGlmIChjb2x1bW5zWzBdICE9PSAnY2hyJyArIGNocm9tb3NvbWVOYW1lKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFpbiA9IGNvbHVtbnNbNF07XG4gICAgICAgIGlmIChzdGFpbiA9PT0gJ24vYScpIHtcbiAgICAgICAgICBzdGFpbiA9ICdncG9zMTAwJztcbiAgICAgICAgfVxuICAgICAgICBzdGFydCA9IHBhcnNlSW50KGNvbHVtbnNbMV0sIDEwKTtcbiAgICAgICAgc3RvcCA9IHBhcnNlSW50KGNvbHVtbnNbMl0sIDEwKTtcblxuICAgICAgICBsaW5lID0ge1xuICAgICAgICAgIGNocjogY29sdW1uc1swXS5zcGxpdCgnY2hyJylbMV0sXG4gICAgICAgICAgYnA6IHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgIHN0b3A6IHN0b3BcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzY246IHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgIHN0b3A6IHN0b3BcbiAgICAgICAgICB9LFxuICAgICAgICAgIHB4OiB7XG4gICAgICAgICAgICBzdGFydDogLTEsXG4gICAgICAgICAgICBzdG9wOiAtMSxcbiAgICAgICAgICAgIHdpZHRoOiAtMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogY29sdW1uc1szXSxcbiAgICAgICAgICBzdGFpbjogc3RhaW4sXG4gICAgICAgICAgdGF4aWQ6IHRheGlkXG4gICAgICAgIH07XG5cbiAgICAgICAgbGluZXNbY2hyXS5wdXNoKGxpbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsaW5lcztcbiAgfVxuXG4gIC8qKlxuICAqIEdlbmVyYXRlcyBhIG1vZGVsIG9iamVjdCBmb3IgZWFjaCBjaHJvbW9zb21lXG4gICogY29udGFpbmluZyBpbmZvcm1hdGlvbiBvbiBpdHMgbmFtZSwgRE9NIElELFxuICAqIGxlbmd0aCBpbiBiYXNlIHBhaXJzIG9yIElTQ04gY29vcmRpbmF0ZXMsXG4gICogY3l0b2dlbmV0aWMgYmFuZHMsIGNlbnRyb21lcmUgcG9zaXRpb24sIGV0Yy5cbiAgKi9cbiAgZ2V0Q2hyb21vc29tZU1vZGVsKGJhbmRzLCBjaHJvbW9zb21lLCB0YXhpZCwgY2hySW5kZXgpIHtcbiAgICB2YXIgY2hyID0ge30sXG4gICAgICBiYW5kLFxuICAgICAgd2lkdGgsIHB4U3RvcCxcbiAgICAgIGNockhlaWdodCA9IHRoaXMuY29uZmlnLmNockhlaWdodCxcbiAgICAgIG1heExlbmd0aCA9IHRoaXMubWF4TGVuZ3RoLFxuICAgICAgY2hyTGVuZ3RoLFxuICAgICAgY3MsIGhhc0JhbmRzO1xuXG4gICAgY3MgPSB0aGlzLmNvb3JkaW5hdGVTeXN0ZW07XG4gICAgaGFzQmFuZHMgPSAodHlwZW9mIGJhbmRzICE9PSAndW5kZWZpbmVkJyk7XG5cbiAgICBpZiAoaGFzQmFuZHMpIHtcbiAgICAgIGNoci5uYW1lID0gY2hyb21vc29tZTtcbiAgICAgIGNoci5sZW5ndGggPSBiYW5kc1tiYW5kcy5sZW5ndGggLSAxXVtjc10uc3RvcDtcbiAgICAgIGNoci50eXBlID0gJ251Y2xlYXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaHIgPSBjaHJvbW9zb21lO1xuICAgIH1cblxuICAgIGNoci5jaHJJbmRleCA9IGNockluZGV4O1xuXG4gICAgY2hyLmlkID0gJ2NocicgKyBjaHIubmFtZSArICctJyArIHRheGlkO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmZ1bGxDaHJvbW9zb21lTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICB2YXIgb3JnTmFtZSA9IHRoaXMub3JnYW5pc21zW3RheGlkXS5zY2llbnRpZmljTmFtZUFiYnI7XG4gICAgICBjaHIubmFtZSA9IG9yZ05hbWUgKyAnIGNocicgKyBjaHIubmFtZTtcbiAgICB9XG5cbiAgICBjaHJMZW5ndGggPSBjaHIubGVuZ3RoO1xuXG4gICAgcHhTdG9wID0gMDtcblxuICAgIGlmIChoYXNCYW5kcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBiYW5kID0gYmFuZHNbaV07XG4gICAgICAgIHZhciBjc0xlbmd0aCA9IGJhbmRbY3NdLnN0b3AgLSBiYW5kW2NzXS5zdGFydDtcbiAgICAgICAgd2lkdGggPSBjaHJIZWlnaHQgKiBjaHIubGVuZ3RoIC8gbWF4TGVuZ3RoW2NzXSAqIGNzTGVuZ3RoIC8gY2hyTGVuZ3RoO1xuXG4gICAgICAgIGJhbmRzW2ldLnB4ID0ge3N0YXJ0OiBweFN0b3AsIHN0b3A6IHB4U3RvcCArIHdpZHRoLCB3aWR0aDogd2lkdGh9O1xuXG4gICAgICAgIHB4U3RvcCA9IGJhbmRzW2ldLnB4LnN0b3A7XG5cbiAgICAgICAgaWYgKGhhc0JhbmRzICYmIGJhbmQuc3RhaW4gPT09ICdhY2VuJyAmJiBiYW5kLm5hbWVbMF0gPT09ICdwJykge1xuICAgICAgICAgIGNoci5wY2VuSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB4U3RvcCA9IGNockhlaWdodCAqIGNoci5sZW5ndGggLyBtYXhMZW5ndGhbY3NdO1xuICAgIH1cblxuICAgIGNoci53aWR0aCA9IHB4U3RvcDtcblxuICAgIGNoci5zY2FsZSA9IHt9O1xuXG4gICAgLy8gVE9ETzpcbiAgICAvL1xuICAgIC8vIEEgY2hyb21vc29tZS1sZXZlbCBzY2FsZSBwcm9wZXJ0eSBpcyBsaWtlbHlcbiAgICAvLyBub25zZW5zaWNhbCBmb3IgYW55IGNocm9tb3NvbWVzIHRoYXQgaGF2ZSBjeXRvZ2VuZXRpYyBiYW5kIGRhdGEuXG4gICAgLy8gRGlmZmVyZW50IGJhbmRzIHRlbmQgdG8gaGF2ZSByYXRpb3MgYmV0d2VlbiBudW1iZXIgb2YgYmFzZSBwYWlyc1xuICAgIC8vIGFuZCBwaHlzaWNhbCBsZW5ndGguXG4gICAgLy9cbiAgICAvLyBIb3dldmVyLCBhIGNocm9tb3NvbWUtbGV2ZWwgc2NhbGUgcHJvcGVydHkgaXMgbGlrZWx5XG4gICAgLy8gbmVjZXNzYXJ5IGZvciBjaHJvbW9zb21lcyB0aGF0IGRvIG5vdCBoYXZlIGJhbmQgZGF0YS5cbiAgICAvL1xuICAgIC8vIFRoaXMgbmVlZHMgZnVydGhlciByZXZpZXcuXG4gICAgaWYgKHRoaXMuY29uZmlnLm11bHRpb3JnYW5pc20gPT09IHRydWUpIHtcbiAgICAgIGNoci5zY2FsZS5icCA9IDE7XG4gICAgICAvLyBjaHIuc2NhbGUuYnAgPSBiYW5kLmlzY24uc3RvcCAvIGJhbmQuYnAuc3RvcDtcbiAgICAgIGNoci5zY2FsZS5pc2NuID0gY2hySGVpZ2h0ICogY2hyTGVuZ3RoIC8gbWF4TGVuZ3RoLmJwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaHIuc2NhbGUuYnAgPSBjaHJIZWlnaHQgLyBtYXhMZW5ndGguYnA7XG4gICAgICBpZiAoaGFzQmFuZHMpIHtcbiAgICAgICAgY2hyLnNjYWxlLmlzY24gPSBjaHJIZWlnaHQgLyBtYXhMZW5ndGguaXNjbjtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hyLmJhbmRzID0gYmFuZHM7XG5cbiAgICBjaHIuY2VudHJvbWVyZVBvc2l0aW9uID0gJyc7XG4gICAgaWYgKFxuICAgIGhhc0JhbmRzICYmIGJhbmRzWzBdLm5hbWVbMF0gPT09ICdwJyAmJiBiYW5kc1sxXS5uYW1lWzBdID09PSAncScgJiZcbiAgICBiYW5kc1swXS5icC5zdG9wIC0gYmFuZHNbMF0uYnAuc3RhcnQgPCAyRTZcbiAgKSB7XG4gICAgICAvLyBBcyB3aXRoIGFsbW9zdCBhbGwgbW91c2UgY2hyb21vc29tZSwgY2hpbXBhbnplZSBjaHIyMlxuICAgICAgY2hyLmNlbnRyb21lcmVQb3NpdGlvbiA9ICd0ZWxvY2VudHJpYyc7XG5cbiAgICAgIC8vIFJlbW92ZSBwbGFjZWhvbGRlciBwdGVyIGJhbmRcbiAgICAgIGNoci5iYW5kcyA9IGNoci5iYW5kcy5zbGljZSgxKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzQmFuZHMgJiYgY2hyLmJhbmRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gRW5jb3VudGVyZWQgd2hlbiBwcm9jZXNzaW5nIGFuIGFzc2VtYmx5IHRoYXQgaGFzIGNocm9tb3NvbWVzIHdpdGhcbiAgICAgIC8vIGNlbnRyb21lcmUgZGF0YSwgYnV0IHRoaXMgY2hyb21vc29tZSBkb2VzIG5vdC5cbiAgICAgIC8vIEV4YW1wbGU6IGNocm9tb3NvbWUgRjEgaW4gRmVsaXMgY2F0dXMuXG4gICAgICBkZWxldGUgY2hyLmJhbmRzO1xuICAgIH1cblxuICAgIHJldHVybiBjaHI7XG4gIH1cblxuICAvKipcbiAgKiBEcmF3cyBsYWJlbHMgZm9yIGVhY2ggY2hyb21vc29tZSwgZS5nLiBcIjFcIiwgXCIyXCIsIFwiWFwiLlxuICAqIElmIGlkZW9ncmFtIGNvbmZpZ3VyYXRpb24gaGFzICdmdWxsQ2hyb21vc29tZUxhYmVsczogVHJ1ZScsXG4gICogdGhlbiBsYWJlbHMgaW5jbHVkZXMgbmFtZSBvZiB0YXhvbiwgd2hpY2ggY2FuIGhlbHAgd2hlblxuICAqIGRlcGljdGluZyBvcnRob2xvZ3MuXG4gICovXG4gIGRyYXdDaHJvbW9zb21lTGFiZWxzKCkge1xuICAgIHZhciBpZGVvID0gdGhpcztcblxuICAgIHZhciBjaHJvbW9zb21lTGFiZWxDbGFzcyA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lTGFiZWxDbGFzcygpO1xuXG4gICAgdmFyIGNoclNldExhYmVsWFBvc2l0aW9uID0gaWRlby5fbGF5b3V0LmdldENocm9tb3NvbWVTZXRMYWJlbFhQb3NpdGlvbigpO1xuICAgIHZhciBjaHJTZXRMYWJlbFRyYW5zbGF0ZSA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKTtcblxuICAgIC8vIEFwcGVuZCBjaHJvbW9zb21lcyBzZXQncyBsYWJlbHNcbiAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUtc2V0LWNvbnRhaW5lcicpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5kYXRhKGlkZW8uY2hyb21vc29tZXNBcnJheSlcbiAgICAgIC5hdHRyKCdjbGFzcycsICdjaHJvbW9zb21lLXNldC1sYWJlbCAnICsgY2hyb21vc29tZUxhYmVsQ2xhc3MpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgY2hyU2V0TGFiZWxUcmFuc2xhdGUpXG4gICAgICAuYXR0cigneCcsIGNoclNldExhYmVsWFBvc2l0aW9uKVxuICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldExhYmVsWVBvc2l0aW9uKGkpO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxBbmNob3IoKSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAvLyBHZXQgbGFiZWwgbGluZXNcbiAgICAgICAgdmFyIGxpbmVzO1xuICAgICAgICBpZiAoZC5uYW1lLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgICBsaW5lcyA9IFtkLm5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpbmVzID0gZC5uYW1lLm1hdGNoKC9eKC4qKVxccysoW15cXHNdKykkLykuc2xpY2UoMSkucmV2ZXJzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICdzZXgnIGluIGlkZW8uY29uZmlnICYmXG4gICAgICAgICAgaWRlby5jb25maWcucGxvaWR5ID09PSAyICYmXG4gICAgICAgICAgaSA9PT0gaWRlby5zZXhDaHJvbW9zb21lcy5pbmRleFxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaWRlby5jb25maWcuc2V4ID09PSAnbWFsZScpIHtcbiAgICAgICAgICAgIGxpbmVzID0gWydYWSddO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lcyA9IFsnWFgnXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW5kZXIgbGFiZWwgbGluZXNcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbCgndHNwYW4nKVxuICAgICAgICAgIC5kYXRhKGxpbmVzKVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZCgndHNwYW4nKVxuICAgICAgICAgIC5hdHRyKCdkeScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpICogLTEuMiArICdlbSc7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cigneCcsIGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxYUG9zaXRpb24oKSlcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihhLCBpKSB7XG4gICAgICAgICAgICB2YXIgZnVsbExhYmVscyA9IGlkZW8uY29uZmlnLmZ1bGxDaHJvbW9zb21lTGFiZWxzO1xuICAgICAgICAgICAgcmV0dXJuIGkgPT09IDEgJiYgZnVsbExhYmVscyA/ICdpdGFsaWMnIDogbnVsbDtcbiAgICAgICAgICB9KS50ZXh0KFN0cmluZyk7XG4gICAgICB9KTtcblxuICAgIHZhciBzZXRMYWJlbFRyYW5zbGF0ZSA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKTtcblxuICAgIC8vIEFwcGVuZCBjaHJvbW9zb21lcyBsYWJlbHNcbiAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUtc2V0LWNvbnRhaW5lcicpXG4gICAgICAuZWFjaChmdW5jdGlvbihhLCBjaHJTZXROdW1iZXIpIHtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbCgnLmNocm9tb3NvbWUnKVxuICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjaHJMYWJlbCcpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHNldExhYmVsVHJhbnNsYXRlKVxuICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lTGFiZWxYUG9zaXRpb24oaSk7XG4gICAgICAgICAgfSkuYXR0cigneScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZUxhYmVsWVBvc2l0aW9uKGkpO1xuICAgICAgICAgIH0pLnRleHQoZnVuY3Rpb24oZCwgY2hyTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gaWRlby5fcGxvaWR5LmdldEFuY2VzdG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyKTtcbiAgICAgICAgICB9KS5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogRHJhd3MgbGFiZWxzIGFuZCBzdGFsa3MgZm9yIGN5dG9nZW5ldGljIGJhbmRzLlxuICAqXG4gICogQmFuZCBsYWJlbHMgYXJlIHRleHQgbGlrZSBcInAxMS4xMVwiLlxuICAqIFN0YWxrcyBhcmUgc21hbGwgbGluZXMgdGhhdCB2aXN1YWxseSBjb25uZWN0IGxhYmVscyB0byB0aGVpciBiYW5kcy5cbiAgKi9cbiAgZHJhd0JhbmRMYWJlbHMoY2hyb21vc29tZXMpIHtcbiAgICB2YXIgaSwgY2hyLCBjaHJzLCB0YXhpZCwgaWRlbywgY2hyTW9kZWwsIGNockluZGV4LCB0ZXh0T2Zmc2V0cztcblxuICAgIGlkZW8gPSB0aGlzO1xuXG4gICAgY2hycyA9IFtdO1xuXG4gICAgZm9yICh0YXhpZCBpbiBjaHJvbW9zb21lcykge1xuICAgICAgZm9yIChjaHIgaW4gY2hyb21vc29tZXNbdGF4aWRdKSB7XG4gICAgICAgIGNocnMucHVzaChjaHJvbW9zb21lc1t0YXhpZF1bY2hyXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGV4dE9mZnNldHMgPSB7fTtcblxuICAgIGNockluZGV4ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY2hycy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hySW5kZXggKz0gMTtcblxuICAgICAgY2hyTW9kZWwgPSBjaHJzW2ldO1xuXG4gICAgICBjaHIgPSBkMy5zZWxlY3QoaWRlby5zZWxlY3RvciArICcgIycgKyBjaHJNb2RlbC5pZCk7XG5cbiAgICAgIC8vIHZhciBjaHJNYXJnaW4gPSB0aGlzLmNvbmZpZy5jaHJNYXJnaW4gKiBjaHJJbmRleCxcbiAgICAgIC8vICAgbGluZVkxLCBsaW5lWTI7XG4gICAgICAvL1xuICAgICAgLy8gbGluZVkxID0gY2hyTWFyZ2luO1xuICAgICAgLy8gbGluZVkyID0gY2hyTWFyZ2luIC0gODtcbiAgICAgIC8vXG4gICAgICAvLyBpZiAoXG4gICAgICAvLyAgIGNockluZGV4ID09PSAxICYmXG4gICAgICAvLyAgIFwicGVyc3BlY3RpdmVcIiBpbiB0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5wZXJzcGVjdGl2ZSA9PT0gXCJjb21wYXJhdGl2ZVwiXG4gICAgICAvLyApIHtcbiAgICAgIC8vICAgbGluZVkxICs9IDE4O1xuICAgICAgLy8gICBsaW5lWTIgKz0gMTg7XG4gICAgICAvLyB9XG5cbiAgICAgIHRleHRPZmZzZXRzW2Nock1vZGVsLmlkXSA9IFtdO1xuXG4gICAgICBjaHIuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgIC5kYXRhKGNock1vZGVsLmJhbmRzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgcmV0dXJuICdiYW5kTGFiZWwgYnNic2wtJyArIGk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIHRyYW5zZm9ybSA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlKGQsIGkpO1xuXG4gICAgICAgICAgdmFyIHggPSB0cmFuc2Zvcm0ueDtcbiAgICAgICAgICAvLyB2YXIgeSA9IHRyYW5zZm9ybS55O1xuXG4gICAgICAgICAgdGV4dE9mZnNldHNbY2hyTW9kZWwuaWRdLnB1c2goeCArIDEzKTtcblxuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm0udHJhbnNsYXRlO1xuICAgICAgICB9KVxuICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgaWRlby5fbGF5b3V0LmdldENocm9tb3NvbWVCYW5kTGFiZWxBbmNob3IoaSkpXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gZC5uYW1lO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gdmFyIGFkYXB0ZXIgPSBNb2RlbEFkYXB0ZXIuZ2V0SW5zdGFuY2UoaWRlby5jaHJvbW9zb21lc0FycmF5W2ldKTtcbiAgICAgIC8vIHZhciB2aWV3ID0gQ2hyb21vc29tZS5nZXRJbnN0YW5jZShhZGFwdGVyLCBpZGVvLmNvbmZpZywgaWRlbyk7XG5cbiAgICAgIGNoci5zZWxlY3RBbGwoJ2xpbmUuYmFuZExhYmVsU3RhbGsnKVxuICAgICAgICAuZGF0YShjaHJNb2RlbC5iYW5kcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICByZXR1cm4gJ2JhbmRMYWJlbFN0YWxrIGJzYnNsLScgKyBpO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciB4LCB5O1xuXG4gICAgICAgICAgeCA9IGlkZW8ucm91bmQoZC5weC5zdGFydCArIGQucHgud2lkdGggLyAyKTtcblxuICAgICAgICAgIHRleHRPZmZzZXRzW2Nock1vZGVsLmlkXS5wdXNoKHggKyAxMyk7XG4gICAgICAgICAgeSA9IC0xMDtcblxuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB4ICsgJywnICsgeSArICcpJztcbiAgICAgICAgfSlcbiAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgIC5hdHRyKCd4MScsIDApXG4gICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTEoaSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCd4MicsIDApXG4gICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTIoaSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjaHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaHJNb2RlbCA9IGNocnNbaV07XG5cbiAgICAgIHZhciB0ZXh0c0xlbmd0aCA9IHRleHRPZmZzZXRzW2Nock1vZGVsLmlkXS5sZW5ndGgsXG4gICAgICAgIG92ZXJsYXBwaW5nTGFiZWxYUmlnaHQsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBpbmRleGVzVG9TaG93ID0gW10sXG4gICAgICAgIHByZXZIaWRkZW5Cb3hJbmRleCxcbiAgICAgICAgeExlZnQsXG4gICAgICAgIHByZXZMYWJlbFhSaWdodCxcbiAgICAgICAgcHJldlRleHRCb3hMZWZ0LFxuICAgICAgICBwcmV2VGV4dEJveFdpZHRoLFxuICAgICAgICB0ZXh0UGFkZGluZztcblxuICAgICAgb3ZlcmxhcHBpbmdMYWJlbFhSaWdodCA9IDA7XG5cbiAgICAgIHRleHRQYWRkaW5nID0gNTtcblxuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGV4dHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgLy8gRW5zdXJlcyBiYW5kIGxhYmVscyBkb24ndCBvdmVybGFwXG5cbiAgICAgICAgeExlZnQgPSB0ZXh0T2Zmc2V0c1tjaHJNb2RlbC5pZF1baW5kZXhdO1xuXG4gICAgICAgIGlmICh4TGVmdCA8IG92ZXJsYXBwaW5nTGFiZWxYUmlnaHQgKyB0ZXh0UGFkZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpbmRleGVzVG9TaG93LnB1c2goaW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZIaWRkZW5Cb3hJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG92ZXJsYXBwaW5nTGFiZWxYUmlnaHQgPSBwcmV2TGFiZWxYUmlnaHQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldkhpZGRlbkJveEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgICAgIC8vIFRoaXMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgZm9yY2VzIENocm9tZSdzXG4gICAgICAgICAgLy8gJ1JlY2FsY3VsYXRlIFN0eWxlJyBhbmQgJ0xheW91dCcsIHdoaWNoIHRha2VzIDMwLTQwIG1zIG9uIENocm9tZS5cbiAgICAgICAgICAvLyBUT0RPOiBUaGlzIGZvcmNlZCBzeW5jaHJvbm91cyBsYXlvdXQgd291bGQgYmUgbmljZSB0byBlbGltaW5hdGUuXG4gICAgICAgICAgLy8gcHJldlRleHRCb3ggPSB0ZXh0c1tpbmRleF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgLy8gcHJldkxhYmVsWFJpZ2h0ID0gcHJldlRleHRCb3gubGVmdCArIHByZXZUZXh0Qm94LndpZHRoO1xuXG4gICAgICAgICAgLy8gVE9ETzogQWNjb3VudCBmb3IgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gcHJldlRleHRCb3hXaWR0aCxcbiAgICAgICAgICAvLyBtYXliZSBhbHNvIHpvb20uXG4gICAgICAgICAgcHJldlRleHRCb3hMZWZ0ID0gdGV4dE9mZnNldHNbY2hyTW9kZWwuaWRdW2luZGV4XTtcbiAgICAgICAgICBwcmV2VGV4dEJveFdpZHRoID0gMzY7XG5cbiAgICAgICAgICBwcmV2TGFiZWxYUmlnaHQgPSBwcmV2VGV4dEJveExlZnQgKyBwcmV2VGV4dEJveFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHhMZWZ0IDwgcHJldkxhYmVsWFJpZ2h0ICsgdGV4dFBhZGRpbmdcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJldkhpZGRlbkJveEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgb3ZlcmxhcHBpbmdMYWJlbFhSaWdodCA9IHByZXZMYWJlbFhSaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmRleGVzVG9TaG93LnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RvcnNUb1Nob3cgPSBbXSxcbiAgICAgICAgaXRoTGVuZ3RoID0gaW5kZXhlc1RvU2hvdy5sZW5ndGgsXG4gICAgICAgIGo7XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBpdGhMZW5ndGg7IGorKykge1xuICAgICAgICBpbmRleCA9IGluZGV4ZXNUb1Nob3dbal07XG4gICAgICAgIHNlbGVjdG9yc1RvU2hvdy5wdXNoKCcjJyArIGNock1vZGVsLmlkICsgJyAuYnNic2wtJyArIGluZGV4KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5iYW5kc1RvU2hvdyA9IHRoaXMuYmFuZHNUb1Nob3cuY29uY2F0KHNlbGVjdG9yc1RvU2hvdyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUm90YXRlcyBjaHJvbW9zb21lIGxhYmVscyBieSA5MCBkZWdyZWVzLCBlLmcuIHVwb24gY2xpY2tpbmcgYSBjaHJvbW9zb21lIHRvIGZvY3VzLlxuICByb3RhdGVDaHJvbW9zb21lTGFiZWxzKGNociwgY2hySW5kZXgsIG9yaWVudGF0aW9uLCBzY2FsZSkge1xuICAgIHZhciBjaHJNYXJnaW4sIGNocldpZHRoLCBpZGVvLCB4LCB5LFxuICAgICAgbnVtQW5ub3RUcmFja3MsIHNjYWxlU3ZnLCB0cmFja3NIZWlnaHQsIGNock1hcmdpbjI7XG5cbiAgICBjaHJXaWR0aCA9IHRoaXMuY29uZmlnLmNocldpZHRoO1xuICAgIGNock1hcmdpbiA9IHRoaXMuY29uZmlnLmNock1hcmdpbiAqIGNockluZGV4O1xuICAgIG51bUFubm90VHJhY2tzID0gdGhpcy5jb25maWcubnVtQW5ub3RUcmFja3M7XG5cbiAgICBpZGVvID0gdGhpcztcblxuICAgIGlmIChcbiAgICB0eXBlb2YgKHNjYWxlKSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBzY2FsZS5oYXNPd25Qcm9wZXJ0eSgneCcpICYmXG4gICAgIShzY2FsZS54ID09PSAxICYmIHNjYWxlLnkgPT09IDEpXG4gICkge1xuICAgICAgc2NhbGVTdmcgPSAnc2NhbGUoJyArIHNjYWxlLnggKyAnLCcgKyBzY2FsZS55ICsgJyknO1xuICAgICAgeCA9IC02O1xuICAgICAgeSA9IChzY2FsZSA9PT0gJycgPyAtMTYgOiAtMTQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gLTg7XG4gICAgICB5ID0gLTE2O1xuICAgICAgc2NhbGUgPSB7eDogMSwgeTogMX07XG4gICAgICBzY2FsZVN2ZyA9ICcnO1xuICAgIH1cblxuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyB8fCBvcmllbnRhdGlvbiA9PT0gJycpIHtcbiAgICAgIHZhciBjaSA9IGNockluZGV4IC0gMTtcblxuICAgICAgaWYgKG51bUFubm90VHJhY2tzID4gMSB8fCBvcmllbnRhdGlvbiA9PT0gJycpIHtcbiAgICAgICAgY2kgLT0gMTtcbiAgICAgIH1cblxuICAgICAgY2hyTWFyZ2luMiA9IC00O1xuICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dCYW5kTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICAgIGNock1hcmdpbjIgPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKyBjaHJXaWR0aCArIDI2O1xuICAgICAgfVxuXG4gICAgICBjaHJNYXJnaW4gPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKiBjaTtcblxuICAgICAgaWYgKG51bUFubm90VHJhY2tzID4gMSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2hyTWFyZ2luICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHkgPSBjaHJNYXJnaW4gKyBjaHJNYXJnaW4yO1xuXG4gICAgICBjaHIuc2VsZWN0QWxsKCd0ZXh0LmNockxhYmVsJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHNjYWxlU3ZnKVxuICAgICAgICAuc2VsZWN0QWxsKCd0c3BhbicpXG4gICAgICAgICAgLmF0dHIoJ3gnLCB4KVxuICAgICAgICAgIC5hdHRyKCd5JywgeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNockluZGV4IC09IDE7XG5cbiAgICAgIGNock1hcmdpbjIgPSAtY2hyV2lkdGggLSAyO1xuICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dCYW5kTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICAgIGNock1hcmdpbjIgPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKyA4O1xuICAgICAgfVxuXG4gICAgICB0cmFja3NIZWlnaHQgPSBpZGVvLmNvbmZpZy5hbm5vdFRyYWNrc0hlaWdodDtcbiAgICAgIGlmIChpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc0xheW91dCAhPT0gJ292ZXJsYXknKSB7XG4gICAgICAgIHRyYWNrc0hlaWdodCAqPSAyO1xuICAgICAgfVxuXG4gICAgICBjaHJNYXJnaW4gPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKiBjaHJJbmRleDtcbiAgICAgIHggPSAtKGNock1hcmdpbiArIGNock1hcmdpbjIpICsgMyArIHRyYWNrc0hlaWdodDtcbiAgICAgIHggLz0gc2NhbGUueDtcblxuICAgICAgY2hyLnNlbGVjdEFsbCgndGV4dC5jaHJMYWJlbCcpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAncm90YXRlKC05MCknICsgc2NhbGVTdmcpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RzcGFuJylcbiAgICAgICAgLmF0dHIoJ3gnLCB4KVxuICAgICAgICAuYXR0cigneScsIHkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFJvdGF0ZXMgYmFuZCBsYWJlbHMgYnkgOTAgZGVncmVlcywgZS5nLiB1cG9uIGNsaWNraW5nIGEgY2hyb21vc29tZSB0byBmb2N1cy5cbiAgKlxuICAqIFRoaXMgbWV0aG9kIGluY2x1ZGVzIHByb3BvcnRpb25hbCBzY2FsaW5nLCB3aGljaCBlbnN1cmVzIHRoYXRcbiAgKiB3aGlsZSB0aGUgcGFyZW50IGNocm9tb3NvbWUgZ3JvdXAgaXMgc2NhbGVkIHN0cm9uZ2x5IGluIG9uZSBkaW1lbnNpb24gdG8gZmlsbFxuICAqIGF2YWlsYWJsZSBzcGFjZSwgdGhlIHRleHQgaW4gdGhlIGNocm9tb3NvbWUncyBiYW5kIGxhYmVscyBpc1xuICAqIG5vdCBzaW1pbGFybHkgZGlzdG9ydGVkLCBhbmQgcmVtYWlucyByZWFkYWJsZS5cbiAgKi9cbiAgcm90YXRlQmFuZExhYmVscyhjaHIsIGNockluZGV4LCBzY2FsZSkge1xuICAgIHZhciBjaHJNYXJnaW4sIHNjYWxlU3ZnLFxuICAgICAgb3JpZW50YXRpb24sIGJhbmRMYWJlbHMsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIGJhbmRMYWJlbHMgPSBjaHIuc2VsZWN0QWxsKCcuYmFuZExhYmVsJyk7XG5cbiAgICBjaHJXaWR0aCA9IHRoaXMuY29uZmlnLmNocldpZHRoO1xuICAgIGNock1hcmdpbiA9IHRoaXMuY29uZmlnLmNock1hcmdpbiAqIGNockluZGV4O1xuXG4gICAgb3JpZW50YXRpb24gPSBjaHIuYXR0cignZGF0YS1vcmllbnRhdGlvbicpO1xuXG4gICAgaWYgKHR5cGVvZiAoc2NhbGUpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc2NhbGUgPSB7eDogMSwgeTogMX07XG4gICAgICBzY2FsZVN2ZyA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZVN2ZyA9ICdzY2FsZSgnICsgc2NhbGUueCArICcsJyArIHNjYWxlLnkgKyAnKSc7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY2hySW5kZXggPT09IDEgJiZcbiAgICAgICdwZXJzcGVjdGl2ZScgaW4gdGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcucGVyc3BlY3RpdmUgPT09ICdjb21wYXJhdGl2ZSdcbiAgICApIHtcbiAgICAgIGJhbmRMYWJlbHNcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgeCwgeTtcbiAgICAgICAgICB4ID0gKDggLSBjaHJNYXJnaW4pIC0gMjY7XG4gICAgICAgICAgeSA9IGlkZW8ucm91bmQoMiArIGQucHguc3RhcnQgKyBkLnB4LndpZHRoIC8gMik7XG4gICAgICAgICAgcmV0dXJuICdyb3RhdGUoLTkwKXRyYW5zbGF0ZSgnICsgeCArICcsJyArIHkgKyAnKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdlbmQnKTtcbiAgICB9IGVsc2UgaWYgKG9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICBiYW5kTGFiZWxzXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIHgsIHk7XG4gICAgICAgICAgeCA9IDggLSBjaHJNYXJnaW47XG4gICAgICAgICAgeSA9IGlkZW8ucm91bmQoMiArIGQucHguc3RhcnQgKyBkLnB4LndpZHRoIC8gMik7XG4gICAgICAgICAgcmV0dXJuICdyb3RhdGUoLTkwKXRyYW5zbGF0ZSgnICsgeCArICcsJyArIHkgKyAnKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBzY2FsZVN2Zyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhbmRMYWJlbHNcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgeCwgeTtcbiAgICAgICAgICB4ID0gaWRlby5yb3VuZCgtOCAqIHNjYWxlLnggKyBkLnB4LnN0YXJ0ICsgZC5weC53aWR0aCAvIDIpO1xuICAgICAgICAgIHkgPSBjaHJNYXJnaW4gLSAxMDtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgeCArICcsJyArIHkgKyAnKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBzY2FsZVN2Zyk7XG5cbiAgICAgIGNoci5zZWxlY3RBbGwoJy5iYW5kTGFiZWxTdGFsayBsaW5lJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHNjYWxlU3ZnKTtcbiAgICB9XG4gIH1cblxuICByb3VuZChjb29yZCkge1xuICAgIC8vIFJvdW5kcyBhbiBTVkcgY29vcmRpbmF0ZXMgdG8gdHdvIGRlY2ltYWwgcGxhY2VzXG4gICAgLy8gZS5nLiA0Mi4xMjM0NTY3ODkwIC0+IDQyLjEyXG4gICAgLy8gUGVyIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzk0NTM0NDcsIGJlbG93IG1ldGhvZCBpcyBmYXN0ZXN0XG4gICAgcmV0dXJuIE1hdGgucm91bmQoY29vcmQgKiAxMDApIC8gMTAwO1xuICB9XG5cbiAgLyoqXG4gICogUmVuZGVycyBhbGwgdGhlIGJhbmRzIGFuZCBvdXRsaW5pbmcgYm91bmRhcmllcyBvZiBhIGNocm9tb3NvbWUuXG4gICovXG4gIGRyYXdDaHJvbW9zb21lKGNock1vZGVsLCBjaHJJbmRleCwgY29udGFpbmVyLCBrKSB7XG4gICAgdmFyIGNock1hcmdpbiA9IHRoaXMuY29uZmlnLmNock1hcmdpbjtcblxuICAgIC8vIEdldCBjaHJvbW9zb21lIG1vZGVsIGFkYXB0ZXIgY2xhc3NcbiAgICB2YXIgYWRhcHRlciA9IE1vZGVsQWRhcHRlci5nZXRJbnN0YW5jZShjaHJNb2RlbCk7XG5cbiAgICAvLyBBcHBlbmQgY2hyb21vc29tZSdzIGNvbnRhaW5lclxuICAgIHZhciBjaHJvbW9zb21lID0gY29udGFpbmVyXG4gICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignaWQnLCBjaHJNb2RlbC5pZClcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Nocm9tb3NvbWUgJyArIGFkYXB0ZXIuZ2V0Q3NzQ2xhc3MoKSlcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwgJyArIGsgKiBjaHJNYXJnaW4gKyAnKScpO1xuXG4gICAgLy8gUmVuZGVyIGNocm9tb3NvbWVcbiAgICByZXR1cm4gQ2hyb21vc29tZS5nZXRJbnN0YW5jZShhZGFwdGVyLCB0aGlzLmNvbmZpZywgdGhpcylcbiAgICAgICAgLnJlbmRlcihjaHJvbW9zb21lLCBjaHJJbmRleCwgayk7XG4gIH1cblxuICAvKipcbiAgKiBSb3RhdGVzIGEgY2hyb21vc29tZSA5MCBkZWdyZWVzIGFuZCBzaG93cyBvciBoaWRlcyBhbGwgb3RoZXIgY2hyb21vc29tZXNcbiAgKiBVc2VmdWwgZm9yIGZvY3VzaW5nIG9yIGRlZm9jdXNpbmcgYSBwYXJ0aWN1bGFyIGNocm9tb3NvbWVcbiAgKi9cbiAgcm90YXRlQW5kVG9nZ2xlRGlzcGxheShjaHJvbW9zb21lKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiB0YXhJZCBub3QgZGVmaW5lZC4gQnV0IGl0IHNob3VsZCBiZSBkZWZpbmVkLlxuICAgIC8vIFRvIGZpeCB0aGF0IGJ1ZyB3ZSBzaG91bGQgaGF2ZSBhIHdheSB0byBmaW5kIGNocm9tb3NvbWUgc2V0IG51bWJlci5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnRheGlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoclNldE51bWJlciA9XG4gICAgICBOdW1iZXIoZDMuc2VsZWN0KGNocm9tb3NvbWUucGFyZW50Tm9kZSkuYXR0cignZGF0YS1zZXQtbnVtYmVyJykpO1xuXG4gICAgdmFyIGNock51bWJlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuICAgICAgICAgIGQzLnNlbGVjdChjaHJvbW9zb21lLnBhcmVudE5vZGUpLnNlbGVjdEFsbCgnZy5jaHJvbW9zb21lJykuX2dyb3Vwc1swXVxuICAgICAgKS5pbmRleE9mKGNocm9tb3NvbWUpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xheW91dC5yb3RhdGUoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNocm9tb3NvbWUpO1xuICB9XG5cbiAgLyoqXG4gICogQ29udmVydHMgYmFzZSBwYWlyIGNvb3JkaW5hdGVzIHRvIHBpeGVsIG9mZnNldHMuXG4gICogQnAtdG8tcGl4ZWwgc2NhbGVzIGRpZmZlciBhbW9uZyBjeXRvZ2VuZXRpYyBiYW5kcy5cbiAgKi9cbiAgY29udmVydEJwVG9QeChjaHIsIGJwKSB7XG4gICAgdmFyIGksIGJhbmQsIGJwVG9Jc2NuU2NhbGUsIGlzY24sIHB4LCBvZmZzZXQsIHB4U3RhcnQsIHB4TGVuZ3RoLCBpc2NuU3RhcnQsXG4gICAgICBpc2NuU3RvcCwgaXNjbkxlbmd0aCwgYnBTdGFydCwgYnBTdG9wLCBicExlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjaHIuYmFuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhbmQgPSBjaHIuYmFuZHNbaV07XG5cbiAgICAgIG9mZnNldCA9IHRoaXMuX2JhbmRzWE9mZnNldDtcbiAgICAgIGJwU3RhcnQgPSBiYW5kLmJwLnN0YXJ0O1xuICAgICAgYnBTdG9wID0gYmFuZC5icC5zdG9wO1xuICAgICAgYnBMZW5ndGggPSBicFN0b3AgLSBicFN0YXJ0O1xuICAgICAgaXNjblN0YXJ0ID0gYmFuZC5pc2NuLnN0YXJ0O1xuICAgICAgaXNjblN0b3AgPSBiYW5kLmlzY24uc3RvcDtcbiAgICAgIGlzY25MZW5ndGggPSBpc2NuU3RvcCAtIGlzY25TdGFydDtcbiAgICAgIHB4U3RhcnQgPSBiYW5kLnB4LnN0YXJ0O1xuICAgICAgcHhMZW5ndGggPSBiYW5kLnB4LndpZHRoO1xuXG4gICAgICBpZiAoYnAgPj0gYnBTdGFydCAmJiBicCA8PSBicFN0b3ApIHtcbiAgICAgICAgYnBUb0lzY25TY2FsZSA9IGlzY25MZW5ndGggLyBicExlbmd0aDtcbiAgICAgICAgaXNjbiA9IGlzY25TdGFydCArIChicCAtIGJwU3RhcnQpICogYnBUb0lzY25TY2FsZTtcblxuICAgICAgICBweCA9IG9mZnNldCArIHB4U3RhcnQgKyAocHhMZW5ndGggKiAoaXNjbiAtIGlzY25TdGFydCkgLyAoaXNjbkxlbmd0aCkpO1xuXG4gICAgICAgIHJldHVybiBweDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQmFzZSBwYWlyIG91dCBvZiByYW5nZS4gICcgK1xuICAgICAgJ2JwOiAnICsgYnAgKyAnOyBsZW5ndGggb2YgY2hyJyArIGNoci5uYW1lICsgJzogJyArIGJhbmQuYnAuc3RvcFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgKiBDb252ZXJ0cyBiYXNlIHBhaXIgY29vcmRpbmF0ZXMgdG8gcGl4ZWwgb2Zmc2V0cy5cbiAgKiBCcC10by1waXhlbCBzY2FsZXMgZGlmZmVyIGFtb25nIGN5dG9nZW5ldGljIGJhbmRzLlxuICAqL1xuICBjb252ZXJ0UHhUb0JwKGNociwgcHgpIHtcbiAgICB2YXIgaSwgYmFuZCwgcHhUb0lzY25TY2FsZSwgaXNjbiwgYnAsIHB4TGVuZ3RoLFxuICAgICAgcHhTdGFydCwgcHhTdG9wLCBpc2NuU3RhcnQsIGlzY25TdG9wLCBicExlbmd0aCwgaXNjbkxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjaHIuYmFuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhbmQgPSBjaHIuYmFuZHNbaV07XG5cbiAgICAgIHB4U3RhcnQgPSBiYW5kLnB4LnN0YXJ0O1xuICAgICAgcHhTdG9wID0gYmFuZC5weC5zdG9wO1xuICAgICAgaXNjblN0YXJ0ID0gYmFuZC5pc2NuLnN0YXJ0O1xuICAgICAgaXNjblN0b3AgPSBiYW5kLmlzY24uc3RvcDtcblxuICAgICAgaWYgKHB4ID49IHB4U3RhcnQgJiYgcHggPD0gcHhTdG9wKSB7XG4gICAgICAgIGlzY25MZW5ndGggPSBpc2NuU3RvcCAtIGlzY25TdGFydDtcbiAgICAgICAgcHhMZW5ndGggPSBweFN0b3AgLSBweFN0YXJ0O1xuICAgICAgICBicExlbmd0aCA9IGJhbmQuYnAuc3RvcCAtIGJhbmQuYnAuc3RhcnQ7XG5cbiAgICAgICAgcHhUb0lzY25TY2FsZSA9IGlzY25MZW5ndGggLyBweExlbmd0aDtcbiAgICAgICAgaXNjbiA9IGlzY25TdGFydCArIChweCAtIHB4U3RhcnQpICogcHhUb0lzY25TY2FsZTtcblxuICAgICAgICBicCA9IGJhbmQuYnAuc3RhcnQgKyAoYnBMZW5ndGggKiAoaXNjbiAtIGlzY25TdGFydCkgLyBpc2NuTGVuZ3RoKTtcblxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChicCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1BpeGVsIG91dCBvZiByYW5nZS4gICcgK1xuICAgICAgJ3B4OiAnICsgYnAgKyAnOyBsZW5ndGggb2YgY2hyJyArIGNoci5uYW1lICsgJzogJyArIHB4U3RvcFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgKiBEcmF3cyBhIHRyYXBlem9pZCBjb25uZWN0aW5nIGEgZ2Vub21pYyByYW5nZSBvblxuICAqIG9uZSBjaHJvbW9zb21lIHRvIGEgZ2Vub21pYyByYW5nZSBvbiBhbm90aGVyIGNocm9tb3NvbWU7XG4gICogYSBzeW50ZW5pYyByZWdpb24uXG4gICovXG4gIGRyYXdTeW50ZW55KHN5bnRlbmljUmVnaW9ucykge1xuICAgIHZhciB0MCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgdmFyIHIxLCByMixcbiAgICAgIHN5bnRlbmllcyxcbiAgICAgIGksIGNvbG9yLCBvcGFjaXR5LFxuICAgICAgcmVnaW9uSUQsIHJlZ2lvbnMsIHN5bnRlbmljUmVnaW9uLFxuICAgICAgaWRlbyA9IHRoaXM7XG5cbiAgICBzeW50ZW5pZXMgPSBkMy5zZWxlY3QoaWRlby5zZWxlY3RvcilcbiAgICAuaW5zZXJ0KCdnJywgJzpmaXJzdC1jaGlsZCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3N5bnRlbnknKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzeW50ZW5pY1JlZ2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlZ2lvbnMgPSBzeW50ZW5pY1JlZ2lvbnNbaV07XG5cbiAgICAgIHIxID0gcmVnaW9ucy5yMTtcbiAgICAgIHIyID0gcmVnaW9ucy5yMjtcblxuICAgICAgY29sb3IgPSAnI0NGQyc7XG4gICAgICBpZiAoJ2NvbG9yJyBpbiByZWdpb25zKSB7XG4gICAgICAgIGNvbG9yID0gcmVnaW9ucy5jb2xvcjtcbiAgICAgIH1cblxuICAgICAgb3BhY2l0eSA9IDE7XG4gICAgICBpZiAoJ29wYWNpdHknIGluIHJlZ2lvbnMpIHtcbiAgICAgICAgb3BhY2l0eSA9IHJlZ2lvbnMub3BhY2l0eTtcbiAgICAgIH1cblxuICAgICAgcjEuc3RhcnRQeCA9IHRoaXMuY29udmVydEJwVG9QeChyMS5jaHIsIHIxLnN0YXJ0KTtcbiAgICAgIHIxLnN0b3BQeCA9IHRoaXMuY29udmVydEJwVG9QeChyMS5jaHIsIHIxLnN0b3ApO1xuICAgICAgcjIuc3RhcnRQeCA9IHRoaXMuY29udmVydEJwVG9QeChyMi5jaHIsIHIyLnN0YXJ0KTtcbiAgICAgIHIyLnN0b3BQeCA9IHRoaXMuY29udmVydEJwVG9QeChyMi5jaHIsIHIyLnN0b3ApO1xuXG4gICAgICByZWdpb25JRCA9IChcbiAgICAgIHIxLmNoci5pZCArICdfJyArIHIxLnN0YXJ0ICsgJ18nICsgcjEuc3RvcCArICdfJyArXG4gICAgICAnX18nICtcbiAgICAgIHIyLmNoci5pZCArICdfJyArIHIyLnN0YXJ0ICsgJ18nICsgcjIuc3RvcFxuICAgICk7XG5cbiAgICAgIHN5bnRlbmljUmVnaW9uID0gc3ludGVuaWVzLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdzeW50ZW5pY1JlZ2lvbicpXG4gICAgICAgIC5hdHRyKCdpZCcsIHJlZ2lvbklEKVxuICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFjdGl2ZVJlZ2lvbiA9IHRoaXM7XG4gICAgICAgICAgdmFyIG90aGVycyA9IGQzLnNlbGVjdEFsbChpZGVvLnNlbGVjdG9yICsgJyAuc3ludGVuaWNSZWdpb24nKVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICh0aGlzICE9PSBhY3RpdmVSZWdpb24pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBvdGhlcnMuY2xhc3NlZCgnaGlkZGVuJywgIW90aGVycy5jbGFzc2VkKCdoaWRkZW4nKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFjdGl2ZVJlZ2lvbiA9IHRoaXM7XG4gICAgICAgICAgZDMuc2VsZWN0QWxsKGlkZW8uc2VsZWN0b3IgKyAnIC5zeW50ZW5pY1JlZ2lvbicpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gKHRoaXMgIT09IGFjdGl2ZVJlZ2lvbik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNsYXNzZWQoJ2dob3N0JywgdHJ1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLnN5bnRlbmljUmVnaW9uJylcbiAgICAgICAgICAgIC5jbGFzc2VkKCdnaG9zdCcsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB2YXIgY2hyV2lkdGggPSBpZGVvLmNvbmZpZy5jaHJXaWR0aDtcbiAgICAgIHZhciB4MSA9IHRoaXMuX2xheW91dC5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZSgwKTtcbiAgICAgIHZhciB4MiA9IHRoaXMuX2xheW91dC5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZSgxKSAtIGNocldpZHRoO1xuXG4gICAgICBzeW50ZW5pY1JlZ2lvbi5hcHBlbmQoJ3BvbHlnb24nKVxuICAgICAgICAuYXR0cigncG9pbnRzJyxcbiAgICAgICAgICB4MSArICcsICcgKyByMS5zdGFydFB4ICsgJyAnICtcbiAgICAgICAgICB4MSArICcsICcgKyByMS5zdG9wUHggKyAnICcgK1xuICAgICAgICAgIHgyICsgJywgJyArIHIyLnN0b3BQeCArICcgJyArXG4gICAgICAgICAgeDIgKyAnLCAnICsgcjIuc3RhcnRQeFxuICAgICAgICApXG4gICAgICAgIC5hdHRyKCdzdHlsZScsICdmaWxsOiAnICsgY29sb3IgKyAnOyBmaWxsLW9wYWNpdHk6ICcgKyBvcGFjaXR5KTtcblxuICAgICAgc3ludGVuaWNSZWdpb24uYXBwZW5kKCdsaW5lJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3N5bnRlbnlCb3JkZXInKVxuICAgICAgICAuYXR0cigneDEnLCB4MSlcbiAgICAgICAgLmF0dHIoJ3gyJywgeDIpXG4gICAgICAgIC5hdHRyKCd5MScsIHIxLnN0YXJ0UHgpXG4gICAgICAgIC5hdHRyKCd5MicsIHIyLnN0YXJ0UHgpO1xuXG4gICAgICBzeW50ZW5pY1JlZ2lvbi5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnc3ludGVueUJvcmRlcicpXG4gICAgICAgIC5hdHRyKCd4MScsIHgxKVxuICAgICAgICAuYXR0cigneDInLCB4MilcbiAgICAgICAgLmF0dHIoJ3kxJywgcjEuc3RvcFB4KVxuICAgICAgICAuYXR0cigneTInLCByMi5zdG9wUHgpO1xuICAgIH1cblxuICAgIHZhciB0MSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChpZGVvLmRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZygnVGltZSBpbiBkcmF3U3ludGVuaWNSZWdpb25zOiAnICsgKHQxIC0gdDApICsgJyBtcycpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIEluaXRpYWxpemVzIHZhcmlvdXMgYW5ub3RhdGlvbiBzZXR0aW5ncy4gIENvbnN0cnVjdG9yIGhlbHAgZnVuY3Rpb24uXG4gICovXG4gIGluaXRBbm5vdFNldHRpbmdzKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuY29uZmlnLmFubm90YXRpb25zUGF0aCB8fFxuICAgICAgdGhpcy5jb25maWcubG9jYWxBbm5vdGF0aW9uc1BhdGggfHxcbiAgICAgIHRoaXMuYW5ub3RzIHx8IHRoaXMuY29uZmlnLmFubm90YXRpb25zXG4gICAgKSB7XG4gICAgICBpZiAoIXRoaXMuY29uZmlnLmFubm90YXRpb25IZWlnaHQpIHtcbiAgICAgICAgdmFyIGFubm90SGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLmNvbmZpZy5jaHJIZWlnaHQgLyAxMDApO1xuICAgICAgICB0aGlzLmNvbmZpZy5hbm5vdGF0aW9uSGVpZ2h0ID0gYW5ub3RIZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5hbm5vdGF0aW9uVHJhY2tzKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLm51bUFubm90VHJhY2tzID0gdGhpcy5jb25maWcuYW5ub3RhdGlvblRyYWNrcy5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbmZpZy5udW1Bbm5vdFRyYWNrcyA9IDE7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbmZpZy5hbm5vdFRyYWNrc0hlaWdodCA9XG4gICAgICB0aGlzLmNvbmZpZy5hbm5vdGF0aW9uSGVpZ2h0ICogdGhpcy5jb25maWcubnVtQW5ub3RUcmFja3M7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcuYmFyV2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmJhcldpZHRoID0gMztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb25maWcuYW5ub3RUcmFja3NIZWlnaHQgPSAwO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcuYW5ub3RhdGlvbnNDb2xvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuY29uZmlnLmFubm90YXRpb25zQ29sb3IgPSAnI0YwMCc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogRHJhd3MgYW5ub3RhdGlvbnMgZGVmaW5lZCBieSB1c2VyXG4gICovXG4gIGRyYXdBbm5vdHMoZnJpZW5kbHlBbm5vdHMpIHtcbiAgICB2YXIgaWRlbyA9IHRoaXMsXG4gICAgICBpLCBqLCBhbm5vdCxcbiAgICAgIHJhd0Fubm90cyA9IFtdLFxuICAgICAgcmF3QW5ub3QsIGtleXMsXG4gICAgICBjaHIsXG4gICAgICBjaHJzID0gaWRlby5jaHJvbW9zb21lc1tpZGVvLmNvbmZpZy50YXhpZF07IC8vIFRPRE86IG11bHRpb3JnYW5pc21cblxuICAgIC8vIE9jY3VycyB3aGVuIGZpbHRlcmluZ1xuICAgIGlmICgnYW5ub3RzJyBpbiBmcmllbmRseUFubm90c1swXSkge1xuICAgICAgcmV0dXJuIGlkZW8uZHJhd1Byb2Nlc3NlZEFubm90cyhmcmllbmRseUFubm90cyk7XG4gICAgfVxuXG4gICAgZm9yIChjaHIgaW4gY2hycykge1xuICAgICAgcmF3QW5ub3RzLnB1c2goe2NocjogY2hyLCBhbm5vdHM6IFtdfSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGZyaWVuZGx5QW5ub3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhbm5vdCA9IGZyaWVuZGx5QW5ub3RzW2ldO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgcmF3QW5ub3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChhbm5vdC5jaHIgPT09IHJhd0Fubm90c1tqXS5jaHIpIHtcbiAgICAgICAgICByYXdBbm5vdCA9IFtcbiAgICAgICAgICAgIGFubm90Lm5hbWUsXG4gICAgICAgICAgICBhbm5vdC5zdGFydCxcbiAgICAgICAgICAgIGFubm90LnN0b3AgLSBhbm5vdC5zdGFydFxuICAgICAgICAgIF07XG4gICAgICAgICAgaWYgKCdjb2xvcicgaW4gYW5ub3QpIHtcbiAgICAgICAgICAgIHJhd0Fubm90LnB1c2goYW5ub3QuY29sb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJ3NoYXBlJyBpbiBhbm5vdCkge1xuICAgICAgICAgICAgcmF3QW5ub3QucHVzaChhbm5vdC5zaGFwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJhd0Fubm90c1tqXS5hbm5vdHMucHVzaChyYXdBbm5vdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZXlzID0gWyduYW1lJywgJ3N0YXJ0JywgJ2xlbmd0aCddO1xuICAgIGlmICgnY29sb3InIGluIGZyaWVuZGx5QW5ub3RzWzBdKSB7XG4gICAgICBrZXlzLnB1c2goJ2NvbG9yJyk7XG4gICAgfVxuICAgIGlmICgnc2hhcGUnIGluIGZyaWVuZGx5QW5ub3RzWzBdKSB7XG4gICAgICBrZXlzLnB1c2goJ3NoYXBlJyk7XG4gICAgfVxuICAgIGlkZW8ucmF3QW5ub3RzID0ge2tleXM6IGtleXMsIGFubm90czogcmF3QW5ub3RzfTtcblxuICAgIGlkZW8uYW5ub3RzID0gaWRlby5wcm9jZXNzQW5ub3REYXRhKGlkZW8ucmF3QW5ub3RzKTtcblxuICAgIGlkZW8uZHJhd1Byb2Nlc3NlZEFubm90cyhpZGVvLmFubm90cyk7XG4gIH1cblxuICAvKipcbiAgKiBQcm9jY2Vzc2VzIGdlbm9tZSBhbm5vdGF0aW9uIGRhdGEuXG4gICogR2Vub21lIGFubm90YXRpb25zIHJlcHJlc2VudCBmZWF0dXJlcyBsaWtlIGEgZ2VuZSwgU05QLCBldGMuIGFzXG4gICogYSBzbWFsbCBncmFwaGljYWwgb2JqZWN0IG9uIG9yIGJlc2lkZSBhIGNocm9tb3NvbWUuXG4gICogQ29udmVydHMgcmF3IGFubm90YXRpb24gZGF0YSBmcm9tIHNlcnZlciwgd2hpY2ggaXMgc3RydWN0dXJlZCBhc1xuICAqIGFuIGFycmF5IG9mIGFycmF5cywgaW50byBhIG1vcmUgdmVyYm9zZSBkYXRhIHN0cnVjdHVyZSBjb25zaXN0aW5nXG4gICogb2YgYW4gYXJyYXkgb2Ygb2JqZWN0cy5cbiAgKiBBbHNvIGFkZHMgcGl4ZWwgb2Zmc2V0IGluZm9ybWF0aW9uLlxuICAqL1xuICBwcm9jZXNzQW5ub3REYXRhKHJhd0Fubm90cykge1xuICAgIHZhciBrZXlzLFxuICAgICAgaSwgaiwgYW5ub3QsIGFubm90cywgYW5ub3RzQnlDaHIsXG4gICAgICBjaHIsXG4gICAgICBjaHJNb2RlbCwgcmEsXG4gICAgICBzdGFydFB4LCBzdG9wUHgsIHB4LFxuICAgICAgY29sb3IsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIGtleXMgPSByYXdBbm5vdHMua2V5cztcbiAgICByYXdBbm5vdHMgPSByYXdBbm5vdHMuYW5ub3RzO1xuXG4gICAgYW5ub3RzID0gW107XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3QW5ub3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhbm5vdHNCeUNociA9IHJhd0Fubm90c1tpXTtcblxuICAgICAgYW5ub3RzLnB1c2goe2NocjogYW5ub3RzQnlDaHIuY2hyLCBhbm5vdHM6IFtdfSk7XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBhbm5vdHNCeUNoci5hbm5vdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY2hyID0gYW5ub3RzQnlDaHIuY2hyO1xuICAgICAgICByYSA9IGFubm90c0J5Q2hyLmFubm90c1tqXTtcbiAgICAgICAgYW5ub3QgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGtleXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBhbm5vdFtrZXlzW2tdXSA9IHJhW2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5ub3Quc3RvcCA9IGFubm90LnN0YXJ0ICsgYW5ub3QubGVuZ3RoO1xuXG4gICAgICAgIGNock1vZGVsID0gaWRlby5jaHJvbW9zb21lc1tpZGVvLmNvbmZpZy50YXhpZF1bY2hyXTtcblxuICAgICAgICBzdGFydFB4ID0gaWRlby5jb252ZXJ0QnBUb1B4KGNock1vZGVsLCBhbm5vdC5zdGFydCk7XG4gICAgICAgIHN0b3BQeCA9IGlkZW8uY29udmVydEJwVG9QeChjaHJNb2RlbCwgYW5ub3Quc3RvcCk7XG5cbiAgICAgICAgcHggPSBNYXRoLnJvdW5kKChzdGFydFB4ICsgc3RvcFB4KSAvIDIpIC0gMjg7XG5cbiAgICAgICAgY29sb3IgPSBpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc0NvbG9yO1xuICAgICAgICBpZiAoaWRlby5jb25maWcuYW5ub3RhdGlvblRyYWNrcykge1xuICAgICAgICAgIGFubm90LnRyYWNrSW5kZXggPSByYVszXTtcbiAgICAgICAgICBjb2xvciA9IGlkZW8uY29uZmlnLmFubm90YXRpb25UcmFja3NbYW5ub3QudHJhY2tJbmRleF0uY29sb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYW5ub3QudHJhY2tJbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2NvbG9yJyBpbiBhbm5vdCkge1xuICAgICAgICAgIGNvbG9yID0gYW5ub3QuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBhbm5vdC5jaHIgPSBjaHI7XG4gICAgICAgIGFubm90LmNockluZGV4ID0gaTtcbiAgICAgICAgYW5ub3QucHggPSBweDtcbiAgICAgICAgYW5ub3Quc3RhcnRQeCA9IHN0YXJ0UHggLSAzMDtcbiAgICAgICAgYW5ub3Quc3RvcFB4ID0gc3RvcFB4IC0gMzA7XG4gICAgICAgIGFubm90LmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgYW5ub3RzW2ldLmFubm90cy5wdXNoKGFubm90KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYW5ub3RzO1xuICB9XG5cbiAgLypcbiAgKiBDYW4gYmUgdXNlZCBmb3IgYmFyIGNoYXJ0IG9yIHNwYXJrbGluZVxuICAqL1xuICBnZXRIaXN0b2dyYW1CYXJzKGFubm90cykge1xuICAgIHZhciB0MCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgdmFyIGksIGosIGNocixcbiAgICAgIGNock1vZGVsLCBjaHJNb2RlbHMsIGNoclB4U3RvcCwgcHgsIGJwLFxuICAgICAgY2hyQW5ub3RzLCBjaHJOYW1lLCBjaHJJbmRleCwgYW5ub3QsXG4gICAgICBiYXJzLCBiYXIsIGJhclB4LCBuZXh0QmFyUHgsIGJhcldpZHRoLFxuICAgICAgbWF4QW5ub3RzUGVyQmFyLCBjb2xvciwgbGFzdEJhbmQsXG4gICAgICBudW1CaW5zLCBiYXJBbm5vdHMsIGJhckNvdW50LCBoZWlnaHQsXG4gICAgICBmaXJzdEdldCA9IGZhbHNlLFxuICAgICAgaGlzdG9ncmFtU2NhbGluZyxcbiAgICAgIGlkZW8gPSB0aGlzO1xuXG4gICAgYmFycyA9IFtdO1xuXG4gICAgYmFyV2lkdGggPSBpZGVvLmNvbmZpZy5iYXJXaWR0aDtcbiAgICBjaHJNb2RlbHMgPSBpZGVvLmNocm9tb3NvbWVzW2lkZW8uY29uZmlnLnRheGlkXTtcbiAgICBjb2xvciA9IGlkZW8uY29uZmlnLmFubm90YXRpb25zQ29sb3I7XG5cbiAgICBpZiAoJ2hpc3RvZ3JhbVNjYWxpbmcnIGluIGlkZW8uY29uZmlnKSB7XG4gICAgICBoaXN0b2dyYW1TY2FsaW5nID0gaWRlby5jb25maWcuaGlzdG9ncmFtU2NhbGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9ncmFtU2NhbGluZyA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpZGVvLm1heEFubm90c1BlckJhciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlkZW8ubWF4QW5ub3RzUGVyQmFyID0ge307XG4gICAgICBmaXJzdEdldCA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChjaHIgaW4gY2hyTW9kZWxzKSB7XG4gICAgICBjaHJNb2RlbCA9IGNock1vZGVsc1tjaHJdO1xuICAgICAgY2hySW5kZXggPSBjaHJNb2RlbC5jaHJJbmRleDtcbiAgICAgIGxhc3RCYW5kID0gY2hyTW9kZWwuYmFuZHNbY2hyTW9kZWwuYmFuZHMubGVuZ3RoIC0gMV07XG4gICAgICBjaHJQeFN0b3AgPSBsYXN0QmFuZC5weC5zdG9wO1xuICAgICAgbnVtQmlucyA9IE1hdGgucm91bmQoY2hyUHhTdG9wIC8gYmFyV2lkdGgpO1xuICAgICAgYmFyID0ge2NocjogY2hyLCBhbm5vdHM6IFtdfTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1CaW5zOyBpKyspIHtcbiAgICAgICAgcHggPSBpICogYmFyV2lkdGggLSBpZGVvLmJ1bXA7XG4gICAgICAgIGJwID0gaWRlby5jb252ZXJ0UHhUb0JwKGNock1vZGVsLCBweCArIGlkZW8uYnVtcCk7XG4gICAgICAgIGJhci5hbm5vdHMucHVzaCh7XG4gICAgICAgICAgYnA6IGJwLFxuICAgICAgICAgIHB4OiBweCAtIGlkZW8uYnVtcCxcbiAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICBjaHJJbmRleDogY2hySW5kZXgsXG4gICAgICAgICAgY2hyTmFtZTogY2hyLFxuICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICBhbm5vdHM6IFtdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYmFycy5wdXNoKGJhcik7XG4gICAgfVxuXG4gICAgZm9yIChjaHIgaW4gYW5ub3RzKSB7XG4gICAgICBjaHJBbm5vdHMgPSBhbm5vdHNbY2hyXS5hbm5vdHM7XG4gICAgICBjaHJOYW1lID0gYW5ub3RzW2Nocl0uY2hyO1xuICAgICAgY2hyTW9kZWwgPSBjaHJNb2RlbHNbY2hyTmFtZV07XG4gICAgICBjaHJJbmRleCA9IGNock1vZGVsLmNockluZGV4IC0gMTtcbiAgICAgIGJhckFubm90cyA9IGJhcnNbY2hySW5kZXhdLmFubm90cztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjaHJBbm5vdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYW5ub3QgPSBjaHJBbm5vdHNbaV07XG4gICAgICAgIHB4ID0gYW5ub3QucHggLSBpZGVvLmJ1bXA7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBiYXJBbm5vdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBiYXJQeCA9IGJhckFubm90c1tqXS5weDtcbiAgICAgICAgICBuZXh0QmFyUHggPSBiYXJQeCArIGJhcldpZHRoO1xuICAgICAgICAgIGlmIChqID09PSBiYXJBbm5vdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgbmV4dEJhclB4ICs9IGJhcldpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHggPj0gYmFyUHggJiYgcHggPCBuZXh0QmFyUHgpIHtcbiAgICAgICAgICAgIGJhcnNbY2hySW5kZXhdLmFubm90c1tqXS5jb3VudCArPSAxO1xuICAgICAgICAgICAgYmFyc1tjaHJJbmRleF0uYW5ub3RzW2pdLmFubm90cy5wdXNoKGFubm90KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmaXJzdEdldCA9PT0gdHJ1ZSB8fCBoaXN0b2dyYW1TY2FsaW5nID09PSAncmVsYXRpdmUnKSB7XG4gICAgICBtYXhBbm5vdHNQZXJCYXIgPSAwO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGJhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYW5ub3RzID0gYmFyc1tpXS5hbm5vdHM7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBhbm5vdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBiYXJDb3VudCA9IGFubm90c1tqXS5jb3VudDtcbiAgICAgICAgICBpZiAoYmFyQ291bnQgPiBtYXhBbm5vdHNQZXJCYXIpIHtcbiAgICAgICAgICAgIG1heEFubm90c1BlckJhciA9IGJhckNvdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWRlby5tYXhBbm5vdHNQZXJCYXJbY2hyXSA9IG1heEFubm90c1BlckJhcjtcbiAgICB9XG5cbiAgLy8gU2V0IGVhY2ggYmFyJ3MgaGVpZ2h0IHRvIGJlIHByb3BvcnRpb25hbCB0b1xuICAvLyB0aGUgaGVpZ2h0IG9mIHRoZSBiYXIgd2l0aCB0aGUgbW9zdCBhbm5vdGF0aW9uc1xuICAgIGZvciAoaSA9IDA7IGkgPCBiYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhbm5vdHMgPSBiYXJzW2ldLmFubm90cztcbiAgICAgIGZvciAoaiA9IDA7IGogPCBhbm5vdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgYmFyQ291bnQgPSBhbm5vdHNbal0uY291bnQ7XG4gICAgICAgIGhlaWdodCA9IChiYXJDb3VudCAvIGlkZW8ubWF4QW5ub3RzUGVyQmFyW2Nocl0pICogaWRlby5jb25maWcuY2hyTWFyZ2luO1xuICAgICAgLy8gY29uc29sZS5sb2coaGVpZ2h0KVxuICAgICAgICBiYXJzW2ldLmFubm90c1tqXS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHQxID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKGlkZW8uZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdUaW1lIHNwZW50IGluIGdldEhpc3RvZ3JhbUJhcnM6ICcgKyAodDEgLSB0MCkgKyAnIG1zJyk7XG4gICAgfVxuXG4gICAgaWRlby5iYXJzID0gYmFycztcblxuICAgIHJldHVybiBiYXJzO1xuICB9XG5cbi8qKlxuKiBGaWxscyBvdXQgYW5ub3RhdGlvbnMgZGF0YSBzdHJ1Y3R1cmUgc3VjaCB0aGF0IGl0cyB0b3AtbGV2ZWwgbGlzdCBvZiBhcnJheXNcbiogbWF0Y2hlcyB0aGF0IG9mIHRoaXMgaWRlb2dyYW0ncyBjaHJvbW9zb21lcyBsaXN0IGluIG9yZGVyIGFuZCBudW1iZXJcbiogRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2V3ZWl0ei9pZGVvZ3JhbS9pc3N1ZXMvNjZcbiovXG4gIGZpbGxBbm5vdHMoYW5ub3RzKSB7XG4gICAgdmFyIGZpbGxlZEFubm90cywgY2hycywgY2hyQXJyYXksIGksIGNociwgYW5ub3QsIGNockluZGV4O1xuXG4gICAgZmlsbGVkQW5ub3RzID0gW107XG4gICAgY2hycyA9IFtdO1xuICAgIGNockFycmF5ID0gdGhpcy5jaHJvbW9zb21lc0FycmF5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNockFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaHIgPSBjaHJBcnJheVtpXS5uYW1lO1xuICAgICAgY2hycy5wdXNoKGNocik7XG4gICAgICBmaWxsZWRBbm5vdHMucHVzaCh7Y2hyOiBjaHIsIGFubm90czogW119KTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgYW5ub3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhbm5vdCA9IGFubm90c1tpXTtcbiAgICAgIGNockluZGV4ID0gY2hycy5pbmRleE9mKGFubm90LmNocik7XG4gICAgICBpZiAoY2hySW5kZXggIT09IC0xKSB7XG4gICAgICAgIGZpbGxlZEFubm90c1tjaHJJbmRleF0gPSBhbm5vdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmlsbGVkQW5ub3RzO1xuICB9XG5cbi8qKlxuKiBEcmF3cyBnZW5vbWUgYW5ub3RhdGlvbnMgb24gY2hyb21vc29tZXMuXG4qIEFubm90YXRpb25zIGNhbiBiZSByZW5kZXJlZCBhcyBlaXRoZXIgb3ZlcmxhaWQgZGlyZWN0bHlcbiogb24gYSBjaHJvbW9zb21lLCBvciBhbG9uZyBvbmUgb3IgbW9yZSBcInRyYWNrc1wiXG4qIHJ1bm5pbmcgcGFyYWxsZWwgdG8gZWFjaCBjaHJvbW9zb21lLlxuKi9cbiAgZHJhd1Byb2Nlc3NlZEFubm90cyhhbm5vdHMpIHtcbiAgICB2YXIgY2hyTWFyZ2luLCBjaHJXaWR0aCwgbGF5b3V0LFxuICAgICAgYW5ub3RIZWlnaHQsIHRyaWFuZ2xlLCBjaXJjbGUsIHIsIGNockFubm90LFxuICAgICAgeDEsIHgyLCB5MSwgeTIsXG4gICAgICBmaWxsZWRBbm5vdHMsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIGNock1hcmdpbiA9IHRoaXMuY29uZmlnLmNock1hcmdpbjtcbiAgICBjaHJXaWR0aCA9IHRoaXMuY29uZmlnLmNocldpZHRoO1xuXG4gICAgbGF5b3V0ID0gJ3RyYWNrcyc7XG4gICAgaWYgKHRoaXMuY29uZmlnLmFubm90YXRpb25zTGF5b3V0KSB7XG4gICAgICBsYXlvdXQgPSB0aGlzLmNvbmZpZy5hbm5vdGF0aW9uc0xheW91dDtcbiAgICB9XG5cbiAgICBpZiAobGF5b3V0ID09PSAnaGlzdG9ncmFtJykge1xuICAgICAgYW5ub3RzID0gaWRlby5nZXRIaXN0b2dyYW1CYXJzKGFubm90cyk7XG4gICAgfVxuXG4gICAgYW5ub3RIZWlnaHQgPSBpZGVvLmNvbmZpZy5hbm5vdGF0aW9uSGVpZ2h0O1xuXG4gICAgdHJpYW5nbGUgPVxuICAgICdsIC0nICsgYW5ub3RIZWlnaHQgKyAnICcgK1xuICAgICgyICogYW5ub3RIZWlnaHQpICtcbiAgICAnIGwgJyArICgyICogYW5ub3RIZWlnaHQpICsgJyAwIHonO1xuXG4gIC8vIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA0NzczMzQsIHdpdGggYSBtaW5vciBjaGFuZ2UgKFwibSAtciwgclwiKVxuICAvLyBDaXJjbGVzIGFyZSBzdXBwb3J0ZWQgbmF0aXZlbHkgdmlhIDxjaXJjbGU+LCBidXQgaGF2aW5nIGl0IGFzIGEgcGF0aFxuICAvLyBzaW1wbGlmaWVzIGhhbmRsaW5nIHRyaWFuZ2xlcywgY2lyY2xlcyBhbmQgb3RoZXIgc2hhcGVzIGluIHRoZSBzYW1lXG4gIC8vIEQzIGNhbGxcbiAgICByID0gYW5ub3RIZWlnaHQ7XG4gICAgY2lyY2xlID1cbiAgICAnbSAtJyArIHIgKyAnLCAnICsgciArXG4gICAgJ2EgJyArIHIgKyAnLCcgKyByICsgJyAwIDEsMCAnICsgKHIgKiAyKSArICcsMCcgK1xuICAgICdhICcgKyByICsgJywnICsgciArICcgMCAxLDAgLScgKyAociAqIDIpICsgJywwJztcblxuICAgIGZpbGxlZEFubm90cyA9IGlkZW8uZmlsbEFubm90cyhhbm5vdHMpO1xuXG4gICAgY2hyQW5ub3QgPSBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUnKVxuICAgIC5kYXRhKGZpbGxlZEFubm90cylcbiAgICAgIC5zZWxlY3RBbGwoJ3BhdGguYW5ub3QnKVxuICAgICAgLmRhdGEoZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZC5hbm5vdHM7XG4gICAgICB9KVxuICAgICAgLmVudGVyKCk7XG5cbiAgICBpZiAobGF5b3V0ID09PSAndHJhY2tzJykge1xuICAgICAgY2hyQW5ub3RcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2lkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZC5pZDtcbiAgICAgIH0pXG4gICAgICAuYXR0cignY2xhc3MnLCAnYW5ub3QnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIHkgPSBpZGVvLmNvbmZpZy5jaHJXaWR0aCArIChkLnRyYWNrSW5kZXggKiBhbm5vdEhlaWdodCAqIDIpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgZC5weCArICcsJyArIHkgKyAnKSc7XG4gICAgICB9KVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgaWYgKCFkLnNoYXBlIHx8IGQuc2hhcGUgPT09ICd0cmlhbmdsZScpIHtcbiAgICAgICAgICByZXR1cm4gJ20wLDAnICsgdHJpYW5nbGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZC5zaGFwZSA9PT0gJ2NpcmNsZScpIHtcbiAgICAgICAgICByZXR1cm4gY2lyY2xlO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLmNvbG9yO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChsYXlvdXQgPT09ICdvdmVybGF5Jykge1xuICAgICAgLy8gT3ZlcmxhaWQgYW5ub3RhdGlvbnMgYXBwZWFyIGRpcmVjdGx5IG9uIGNocm9tb3NvbWVzXG5cbiAgICAgIGNockFubm90LmFwcGVuZCgncG9seWdvbicpXG4gICAgICAgIC5hdHRyKCdpZCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gZC5pZDtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Fubm90JylcbiAgICAgICAgLmF0dHIoJ3BvaW50cycsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBpZiAoZC5zdG9wUHggLSBkLnN0YXJ0UHggPiAxKSB7XG4gICAgICAgICAgICB4MSA9IGQuc3RhcnRQeDtcbiAgICAgICAgICAgIHgyID0gZC5zdG9wUHg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHgxID0gZC5weCAtIDAuNTtcbiAgICAgICAgICAgIHgyID0gZC5weCArIDAuNTtcbiAgICAgICAgICB9XG4gICAgICAgICAgeTEgPSBjaHJXaWR0aDtcbiAgICAgICAgICB5MiA9IDA7XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgeDEgKyAnLCcgKyB5MSArICcgJyArXG4gICAgICAgICAgICB4MiArICcsJyArIHkxICsgJyAnICtcbiAgICAgICAgICAgIHgyICsgJywnICsgeTIgKyAnICcgK1xuICAgICAgICAgICAgeDEgKyAnLCcgKyB5MlxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkLmNvbG9yO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGxheW91dCA9PT0gJ2hpc3RvZ3JhbScpIHtcbiAgICAgIGNockFubm90LmFwcGVuZCgncG9seWdvbicpXG4gICAgICAgIC8vIC5hdHRyKCdpZCcsIGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGQuaWQ7IH0pXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdhbm5vdCcpXG4gICAgICAgIC5hdHRyKCdwb2ludHMnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgeDEgPSBkLnB4ICsgaWRlby5idW1wO1xuICAgICAgICAgIHgyID0gZC5weCArIGlkZW8uY29uZmlnLmJhcldpZHRoICsgaWRlby5idW1wO1xuICAgICAgICAgIHkxID0gY2hyV2lkdGg7XG4gICAgICAgICAgeTIgPSBjaHJXaWR0aCArIGQuaGVpZ2h0O1xuXG4gICAgICAgICAgdmFyIHRoaXNDaHJXaWR0aCA9IGlkZW8uY2hyb21vc29tZXNBcnJheVtkLmNockluZGV4IC0gMV0ud2lkdGg7XG5cbiAgICAgICAgICBpZiAoeDIgPiB0aGlzQ2hyV2lkdGgpIHtcbiAgICAgICAgICAgIHgyID0gdGhpc0NocldpZHRoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB4MSArICcsJyArIHkxICsgJyAnICtcbiAgICAgICAgICAgIHgyICsgJywnICsgeTEgKyAnICcgK1xuICAgICAgICAgICAgeDIgKyAnLCcgKyB5MiArICcgJyArXG4gICAgICAgICAgICB4MSArICcsJyArIHkyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQuY29sb3I7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpZGVvLm9uRHJhd0Fubm90c0NhbGxiYWNrKSB7XG4gICAgICBpZGVvLm9uRHJhd0Fubm90c0NhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgb25CcnVzaE1vdmUoKSB7XG4gICAgY2FsbCh0aGlzLm9uQnJ1c2hNb3ZlQ2FsbGJhY2spO1xuICB9XG5cbiAgY3JlYXRlQnJ1c2goZnJvbSwgdG8pIHtcbiAgICB2YXIgaWRlbyA9IHRoaXMsXG4gICAgICB3aWR0aCA9IGlkZW8uY29uZmlnLmNocldpZHRoICsgNi41LFxuICAgICAgbGVuZ3RoID0gaWRlby5jb25maWcuY2hySGVpZ2h0LFxuICAgICAgY2hyID0gaWRlby5jaHJvbW9zb21lc0FycmF5WzBdLFxuICAgICAgY2hyTGVuZ3RoQnAgPSBjaHIuYmFuZHNbY2hyLmJhbmRzLmxlbmd0aCAtIDFdLmJwLnN0b3AsXG4gICAgICB4MCwgeDEsXG4gICAgICB4T2Zmc2V0ID0gdGhpcy5fbGF5b3V0LmdldE1hcmdpbigpLmxlZnQsXG4gICAgICB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgLmRvbWFpbihbMCwgZDMubWF4KGNoci5iYW5kcywgZnVuY3Rpb24oYmFuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJhbmQuYnAuc3RvcDtcbiAgICAgICAgICB9KV0pLnJhbmdlKFt4T2Zmc2V0LCBkMy5tYXgoY2hyLmJhbmRzLCBmdW5jdGlvbihiYW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFuZC5weC5zdG9wO1xuICAgICAgICAgIH0pICsgeE9mZnNldF0pO1xuXG4gICAgaWYgKHR5cGVvZiBmcm9tID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZnJvbSA9IE1hdGguZmxvb3IoY2hyTGVuZ3RoQnAgLyAxMCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByaWdodCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRvID0gTWF0aC5jZWlsKGZyb20gKiAyKTtcbiAgICB9XG5cbiAgICB4MCA9IGlkZW8uY29udmVydEJwVG9QeChjaHIsIGZyb20pO1xuICAgIHgxID0gaWRlby5jb252ZXJ0QnBUb1B4KGNociwgdG8pO1xuXG4gICAgaWRlby5zZWxlY3RlZFJlZ2lvbiA9IHtmcm9tOiBmcm9tLCB0bzogdG8sIGV4dGVudDogKHRvIC0gZnJvbSl9O1xuXG4gICAgaWRlby5icnVzaCA9IGQzLmJydXNoWCgpXG4gICAgLmV4dGVudChbW3hPZmZzZXQsIDBdLCBbbGVuZ3RoICsgeE9mZnNldCwgd2lkdGhdXSlcbiAgICAub24oJ2JydXNoJywgb25CcnVzaE1vdmUpO1xuXG4gICAgdmFyIHlUcmFuc2xhdGUgPSB0aGlzLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoMCk7XG4gICAgdmFyIHlPZmZzZXQgPSB5VHJhbnNsYXRlICsgKGlkZW8uY29uZmlnLmNocldpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICBkMy5zZWxlY3QoaWRlby5zZWxlY3RvcikuYXBwZW5kKCdnJylcbiAgICAuYXR0cignY2xhc3MnLCAnYnJ1c2gnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsICcgKyB5T2Zmc2V0ICsgJyknKVxuICAgIC5jYWxsKGlkZW8uYnJ1c2gpXG4gICAgLmNhbGwoaWRlby5icnVzaC5tb3ZlLCBbeDAsIHgxXSk7XG5cbiAgICBmdW5jdGlvbiBvbkJydXNoTW92ZSgpIHtcbiAgICAgIHZhciBleHRlbnQgPSBkMy5ldmVudC5zZWxlY3Rpb24ubWFwKHhTY2FsZS5pbnZlcnQpLFxuICAgICAgICBmcm9tID0gTWF0aC5mbG9vcihleHRlbnRbMF0pLFxuICAgICAgICB0byA9IE1hdGguY2VpbChleHRlbnRbMV0pO1xuXG4gICAgICBpZGVvLnNlbGVjdGVkUmVnaW9uID0ge2Zyb206IGZyb20sIHRvOiB0bywgZXh0ZW50OiAodG8gLSBmcm9tKX07XG5cbiAgICAgIGlmIChpZGVvLm9uQnJ1c2hNb3ZlKSB7XG4gICAgICAgIGlkZW8ub25CcnVzaE1vdmVDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4vKipcbiogQ2FsbGVkIHdoZW4gSWRlb2dyYW0gaGFzIGZpbmlzaGVkIGluaXRpYWxpemluZy5cbiogQWNjb3VudHMgZm9yIGNlcnRhaW4gaWRlb2dyYW0gcHJvcGVydGllcyBub3QgYmVpbmcgc2V0IHVudGlsXG4qIGFzeW5jaHJvbm91cyByZXF1ZXN0cyBzdWNjZWVkLCBldGMuXG4qL1xuICBvbkxvYWQoKSB7XG4gICAgY2FsbCh0aGlzLm9uTG9hZENhbGxiYWNrKTtcbiAgfVxuXG4gIG9uRHJhd0Fubm90cygpIHtcbiAgICBjYWxsKHRoaXMub25EcmF3QW5ub3RzQ2FsbGJhY2spO1xuICB9XG5cbi8qXG4qIFJldHVybnMgU1ZHIGdyYWRpZW50cyB0aGF0IGdpdmUgY2hyb21vc29tZXMgYSBwb2xpc2hlZCBsb29rXG4qL1xuICBnZXRCYW5kQ29sb3JHcmFkaWVudHMoKSB7XG4gICAgdmFyIGNvbG9ycyxcbiAgICAgIHN0YWluLCBjb2xvcjEsIGNvbG9yMiwgY29sb3IzLFxuICAgICAgY3NzLFxuICAgICAgZ3JhZGllbnRzID0gJyc7XG5cbiAgICBjb2xvcnMgPSBbXG4gICAgWydnbmVnJywgJyNGRkYnLCAnI0ZGRicsICcjREREJ10sXG4gICAgWydncG9zMjUnLCAnI0M4QzhDOCcsICcjREREJywgJyNCQkInXSxcbiAgICBbJ2dwb3MzMycsICcjQkJCJywgJyNCQkInLCAnI0FBQSddLFxuICAgIFsnZ3BvczUwJywgJyM5OTknLCAnI0FBQScsICcjODg4J10sXG4gICAgWydncG9zNjYnLCAnIzg4OCcsICcjODg4JywgJyM2NjYnXSxcbiAgICBbJ2dwb3M3NScsICcjNzc3JywgJyM3NzcnLCAnIzQ0NCddLFxuICAgIFsnZ3BvczEwMCcsICcjNDQ0JywgJyM2NjYnLCAnIzAwMCddLFxuICAgIFsnYWNlbicsICcjRkVFJywgJyNGRUUnLCAnI0ZERCddLFxuICAgIFsnbm9CYW5kcycsICcjQkJCJywgJyNCQkInLCAnI0FBQSddXG4gICAgXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdGFpbiA9IGNvbG9yc1tpXVswXTtcbiAgICAgIGNvbG9yMSA9IGNvbG9yc1tpXVsxXTtcbiAgICAgIGNvbG9yMiA9IGNvbG9yc1tpXVsyXTtcbiAgICAgIGNvbG9yMyA9IGNvbG9yc1tpXVszXTtcbiAgICAgIGdyYWRpZW50cyArPVxuICAgICAgJzxsaW5lYXJHcmFkaWVudCBpZD1cIicgKyBzdGFpbiArICdcIiB4MT1cIjAlXCIgeTE9XCIwJVwiIHgyPVwiMCVcIiB5Mj1cIjEwMCVcIj4nO1xuICAgICAgaWYgKHN0YWluID09PSBcImduZWdcIikge1xuICAgICAgICBncmFkaWVudHMgKz1cbiAgICAgICAgJzxzdG9wIG9mZnNldD1cIjcwJVwiIHN0b3AtY29sb3I9XCInICsgY29sb3IyICsgJ1wiIC8+JyArXG4gICAgICAgICc8c3RvcCBvZmZzZXQ9XCI5NSVcIiBzdG9wLWNvbG9yPVwiJyArIGNvbG9yMyArICdcIiAvPicgK1xuICAgICAgICAnPHN0b3Agb2Zmc2V0PVwiMTAwJVwiIHN0b3AtY29sb3I9XCInICsgY29sb3IxICsgJ1wiIC8+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyYWRpZW50cyArPVxuICAgICAgICAnPHN0b3Agb2Zmc2V0PVwiNSVcIiBzdG9wLWNvbG9yPVwiJyArIGNvbG9yMSArICdcIiAvPicgK1xuICAgICAgICAnPHN0b3Agb2Zmc2V0PVwiMTUlXCIgc3RvcC1jb2xvcj1cIicgKyBjb2xvcjIgKyAnXCIgLz4nICtcbiAgICAgICAgJzxzdG9wIG9mZnNldD1cIjYwJVwiIHN0b3AtY29sb3I9XCInICsgY29sb3IzICsgJ1wiIC8+JztcbiAgICAgIH1cbiAgICAgIGdyYWRpZW50cyArPVxuICAgICAgJzwvbGluZWFyR3JhZGllbnQ+JztcbiAgICB9XG5cbiAgICBncmFkaWVudHMgKz1cbiAgICAnPHBhdHRlcm4gaWQ9XCJzdGFsa1wiIHdpZHRoPVwiMlwiIGhlaWdodD1cIjFcIiBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiICcgK1xuICAgICAgJ3BhdHRlcm5UcmFuc2Zvcm09XCJyb3RhdGUoMzAgMCAwKVwiPicgK1xuICAgICAgJzxyZWN0IHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjEwXCIgaGVpZ2h0PVwiMlwiIGZpbGw9XCIjQ0NFXCIgLz4gJyArXG4gICAgICAgJzxsaW5lIHgxPVwiMFwiIHkxPVwiMFwiIHgyPVwiMFwiIHkyPVwiMTAwJVwiIHN0eWxlPVwic3Ryb2tlOiM4OEI7ICcgK1xuICAgICAgICAnc3Ryb2tlLXdpZHRoOjAuNztcIiAvPicgK1xuICAgICc8L3BhdHRlcm4+JyArXG4gICAgJzxwYXR0ZXJuIGlkPVwiZ3ZhclwiIHdpZHRoPVwiMlwiIGhlaWdodD1cIjFcIiBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiICcgK1xuICAgICAgJ3BhdHRlcm5UcmFuc2Zvcm09XCJyb3RhdGUoLTMwIDAgMClcIj4nICtcbiAgICAgICc8cmVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMFwiIGhlaWdodD1cIjJcIiBmaWxsPVwiI0RERlwiIC8+ICcgK1xuICAgICAgICc8bGluZSB4MT1cIjBcIiB5MT1cIjBcIiB4Mj1cIjBcIiB5Mj1cIjEwMCVcIiBzdHlsZT1cInN0cm9rZTojOTlDOyAnICtcbiAgICAgICAgICAnc3Ryb2tlLXdpZHRoOjAuNztcIiAvPicgK1xuICAgICc8L3BhdHRlcm4+JztcblxuICAgIGdyYWRpZW50cyA9IFwiPGRlZnM+XCIgKyBncmFkaWVudHMgKyBcIjwvZGVmcz5cIjtcbiAgICBjc3MgPSBcIjxzdHlsZT5cIiArXG4gICAgJy5nbmVnIHtmaWxsOiB1cmwoXCIjZ25lZ1wiKX0gJyArXG4gICAgJy5ncG9zMjUge2ZpbGw6IHVybChcIiNncG9zMjVcIil9ICcgK1xuICAgICcuZ3BvczMzIHtmaWxsOiB1cmwoXCIjZ3BvczMzXCIpfSAnICtcbiAgICAnLmdwb3M1MCB7ZmlsbDogdXJsKFwiI2dwb3M1MFwiKX0gJyArXG4gICAgJy5ncG9zNjYge2ZpbGw6IHVybChcIiNncG9zNjZcIil9ICcgK1xuICAgICcuZ3Bvczc1IHtmaWxsOiB1cmwoXCIjZ3Bvczc1XCIpfSAnICtcbiAgICAnLmdwb3MxMDAge2ZpbGw6IHVybChcIiNncG9zMTAwXCIpfSAnICtcbiAgICAnLmdwb3Mge2ZpbGw6IHVybChcIiNncG9zMTAwXCIpfSAnICtcbiAgICAnLmFjZW4ge2ZpbGw6IHVybChcIiNhY2VuXCIpfSAnICtcbiAgICAnLnN0YWxrIHtmaWxsOiB1cmwoXCIjc3RhbGtcIil9ICcgK1xuICAgICcuZ3ZhciB7ZmlsbDogdXJsKFwiI2d2YXJcIil9ICcgK1xuICAgICcubm9CYW5kcyB7ZmlsbDogdXJsKFwiI25vQmFuZHNcIil9ICcgK1xuICAgICcuY2hyb21vc29tZSB7ZmlsbDogdXJsKFwiI25vQmFuZHNcIil9ICcgK1xuICAnPC9zdHlsZT4nO1xuICAgIGdyYWRpZW50cyA9IGNzcyArIGdyYWRpZW50cztcblxuICAvLyBhbGVydChncmFkaWVudHMpXG5cbiAgICByZXR1cm4gZ3JhZGllbnRzO1xuICB9XG5cbi8qXG4qICBSZXR1cm5zIGFuIE5DQkkgdGF4b25vbXkgaWRlbnRpZmllciAodGF4aWQpIGZvciB0aGUgY29uZmlndXJlZCBvcmdhbmlzbVxuKi9cbiAgZ2V0VGF4aWRGcm9tRXV0aWxzKGNhbGxiYWNrKSB7XG4gICAgdmFyIG9yZ2FuaXNtLCB0YXhvbm9teVNlYXJjaCwgdGF4aWQsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIG9yZ2FuaXNtID0gaWRlby5jb25maWcub3JnYW5pc207XG5cbiAgICB0YXhvbm9teVNlYXJjaCA9IGlkZW8uZXNlYXJjaCArICcmZGI9dGF4b25vbXkmdGVybT0nICsgb3JnYW5pc207XG5cbiAgICBkMy5qc29uKHRheG9ub215U2VhcmNoLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB0YXhpZCA9IGRhdGEuZXNlYXJjaHJlc3VsdC5pZGxpc3RbMF07XG4gICAgICByZXR1cm4gY2FsbGJhY2sodGF4aWQpO1xuICAgIH0pO1xuICB9XG5cbi8qKlxuKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRheGlkcyBmb3IgdGhlIGN1cnJlbnQgaWRlb2dyYW1cbiogQWxzbyBzZXRzIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyByZWxhdGVkIHRvIHRheGlkKHMpLCB3aGV0aGVyIGlkZW9ncmFtIGlzXG4qIG11bHRpb3JnYW5pc20sIGFuZCBhZGp1c3RzIGNocm9tb3NvbWVzIHBhcmFtZXRlcnMgYXMgbmVlZGVkXG4qKi9cbiAgZ2V0VGF4aWRzKGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkZW8gPSB0aGlzLFxuICAgICAgdGF4aWQsIHRheGlkcyxcbiAgICAgIG9yZywgb3JncywgaSxcbiAgICAgIHRheGlkSW5pdCwgdG1wQ2hycyxcbiAgICAgIGFzc2VtYmx5LCBjaHJvbW9zb21lcyxcbiAgICAgIG11bHRpb3JnYW5pc20sIHByb21pc2U7XG5cbiAgICB0YXhpZEluaXQgPSAndGF4aWQnIGluIGlkZW8uY29uZmlnO1xuXG4gICAgaWRlby5jb25maWcubXVsdGlvcmdhbmlzbSA9IChcbiAgICAoJ29yZ2FuaXNtJyBpbiBpZGVvLmNvbmZpZyAmJiBpZGVvLmNvbmZpZy5vcmdhbmlzbSBpbnN0YW5jZW9mIEFycmF5KSB8fFxuICAgICh0YXhpZEluaXQgJiYgaWRlby5jb25maWcudGF4aWQgaW5zdGFuY2VvZiBBcnJheSlcbiAgKTtcblxuICAgIG11bHRpb3JnYW5pc20gPSBpZGVvLmNvbmZpZy5tdWx0aW9yZ2FuaXNtO1xuXG4gICAgaWYgKCdvcmdhbmlzbScgaW4gaWRlby5jb25maWcpIHtcbiAgICAvLyBJZGVvZ3JhbSBpbnN0YW5jZSB3YXMgY29uc3RydWN0ZWQgdXNpbmcgY29tbW9uIG9yZ2FuaXNtIG5hbWUocylcbiAgICAgIGlmIChtdWx0aW9yZ2FuaXNtKSB7XG4gICAgICAgIG9yZ3MgPSBpZGVvLmNvbmZpZy5vcmdhbmlzbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yZ3MgPSBbaWRlby5jb25maWcub3JnYW5pc21dO1xuICAgICAgfVxuXG4gICAgICB0YXhpZHMgPSBbXTtcbiAgICAgIHRtcENocnMgPSB7fTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBHZXRzIGEgbGlzdCBvZiB0YXhpZHMgZnJvbSBjb21tb24gb3JnYW5pc20gbmFtZXNcbiAgICAgICAgb3JnID0gb3Jnc1tpXTtcbiAgICAgICAgZm9yICh0YXhpZCBpbiBpZGVvLm9yZ2FuaXNtcykge1xuICAgICAgICAgIGlmIChpZGVvLm9yZ2FuaXNtc1t0YXhpZF0uY29tbW9uTmFtZS50b0xvd2VyQ2FzZSgpID09PSBvcmcpIHtcbiAgICAgICAgICAgIHRheGlkcy5wdXNoKHRheGlkKTtcbiAgICAgICAgICAgIGlmIChtdWx0aW9yZ2FuaXNtKSB7XG4gICAgICAgICAgICAvLyBBZGp1c3RzICdjaHJvbW9zb21lcycgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIgdG8gbWFrZSBvYmplY3RcbiAgICAgICAgICAgIC8vIGtleXMgdXNlIHRheGlkIGluc3RlYWQgb2YgY29tbW9uIG9yZ2FuaXNtIG5hbWVcbiAgICAgICAgICAgICAgdG1wQ2hyc1t0YXhpZF0gPSBpZGVvLmNvbmZpZy5jaHJvbW9zb21lc1tvcmddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGF4aWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgIGlkZW8uZ2V0VGF4aWRGcm9tRXV0aWxzKHJlc29sdmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHZhciBvcmdhbmlzbSA9IGlkZW8uY29uZmlnLm9yZ2FuaXNtLFxuICAgICAgICAgICAgZGF0YURpciA9IGlkZW8uY29uZmlnLmRhdGFEaXIsXG4gICAgICAgICAgICB1cmxPcmcgPSBvcmdhbmlzbS5yZXBsYWNlKCcgJywgJy0nKTtcblxuICAgICAgICAgIHRheGlkID0gZGF0YTtcbiAgICAgICAgICB0YXhpZHMucHVzaCh0YXhpZCk7XG5cbiAgICAgICAgICBpZGVvLmNvbmZpZy50YXhpZHMgPSB0YXhpZHM7XG4gICAgICAgICAgaWRlby5vcmdhbmlzbXNbdGF4aWRdID0ge1xuICAgICAgICAgICAgY29tbW9uTmFtZTogJycsXG4gICAgICAgICAgICBzY2llbnRpZmljTmFtZTogaWRlby5jb25maWcub3JnYW5pc20sXG4gICAgICAgICAgICBzY2llbnRpZmljTmFtZUFiYnI6ICcnXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBmdWxseUJhbmRlZFRheGlkcyA9IFsnOTYwNicsICcxMDA5MCcsICcxMDExNiddO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICBmdWxseUJhbmRlZFRheGlkcy5pbmRleE9mKHRheGlkKSAhPT0gLTEgJiZcbiAgICAgICAgICBpZGVvLmNvbmZpZy5zaG93RnVsbHlCYW5kZWQgPT09IGZhbHNlXG4gICAgICAgICkge1xuICAgICAgICAgICAgdXJsT3JnICs9ICctbm8tYmFuZHMnO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2hyb21vc29tZXNVcmwgPSBkYXRhRGlyICsgdXJsT3JnICsgJy5qcyc7XG5cbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgZDMucmVxdWVzdChjaHJvbW9zb21lc1VybCkuZ2V0KGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XG4gICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcihlcnJvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBwcm9taXNlXG4gICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIC8vIENoZWNrIGlmIGNocm9tb3NvbWUgZGF0YSBleGlzdHMgbG9jYWxseS5cbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyB1c2VkIGZvciBwcmUtcHJvY2Vzc2VkIGNlbnRyb21lcmUgZGF0YSxcbiAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgbm90IGFjY2Vzc2libGUgdmlhIEVVdGlscy4gIFNlZSBnZXRfY2hyb21vc29tZXMucHkuXG5cbiAgICAgICAgICAgICAgdmFyIGFzbUFuZENockFycmF5ID0gW10sXG4gICAgICAgICAgICAgICAgY2hyb21vc29tZXMgPSBbXSxcbiAgICAgICAgICAgICAgICBzZWVuQ2hycyA9IHt9LFxuICAgICAgICAgICAgICAgIGNocjtcblxuICAgICAgICAgICAgICBldmFsKGRhdGEucmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgIGFzbUFuZENockFycmF5LnB1c2goJycpO1xuXG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hyQmFuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaHIgPSBjaHJCYW5kc1tpXS5zcGxpdCgnICcpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChjaHIgaW4gc2VlbkNocnMpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjaHJvbW9zb21lcy5wdXNoKHtuYW1lOiBjaHIsIHR5cGU6ICdudWNsZWFyJ30pO1xuICAgICAgICAgICAgICAgICAgc2VlbkNocnNbY2hyXSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNocm9tb3NvbWVzID0gY2hyb21vc29tZXMuc29ydChpZGVvLnNvcnRDaHJvbW9zb21lcyk7XG4gICAgICAgICAgICAgIGFzbUFuZENockFycmF5LnB1c2goY2hyb21vc29tZXMpO1xuICAgICAgICAgICAgICBpZGVvLmNvb3JkaW5hdGVTeXN0ZW0gPSAnaXNjbic7XG4gICAgICAgICAgICAgIHJldHVybiBhc21BbmRDaHJBcnJheTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBpZGVvLmNvb3JkaW5hdGVTeXN0ZW0gPSAnYnAnO1xuICAgICAgICAgICAgICAgIGlkZW8uZ2V0QXNzZW1ibHlBbmRDaHJvbW9zb21lc0Zyb21FdXRpbHMocmVzb2x2ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbihhc21DaHJBcnJheSkge1xuICAgICAgICBhc3NlbWJseSA9IGFzbUNockFycmF5WzBdO1xuICAgICAgICBjaHJvbW9zb21lcyA9IGFzbUNockFycmF5WzFdO1xuXG4gICAgICAgIGlkZW8uY29uZmlnLmNocm9tb3NvbWVzID0gY2hyb21vc29tZXM7XG4gICAgICAgIGlkZW8ub3JnYW5pc21zW3RheGlkXS5hc3NlbWJsaWVzID0ge1xuICAgICAgICAgIGRlZmF1bHQ6IGFzc2VtYmx5XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FsbGJhY2sodGF4aWRzKTtcbiAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWRlby5jb25maWcudGF4aWRzID0gdGF4aWRzO1xuICAgICAgICBpZiAobXVsdGlvcmdhbmlzbSkge1xuICAgICAgICAgIGlkZW8uY29uZmlnLmNocm9tb3NvbWVzID0gdG1wQ2hycztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKHRheGlkcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtdWx0aW9yZ2FuaXNtKSB7XG4gICAgICAgIGlkZW8uY29vcmRpbmF0ZVN5c3RlbSA9ICdicCc7XG4gICAgICAgIGlmICh0YXhpZEluaXQpIHtcbiAgICAgICAgICB0YXhpZHMgPSBpZGVvLmNvbmZpZy50YXhpZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRheGlkSW5pdCkge1xuICAgICAgICAgIHRheGlkcyA9IFtpZGVvLmNvbmZpZy50YXhpZF07XG4gICAgICAgIH1cbiAgICAgICAgaWRlby5jb25maWcudGF4aWRzID0gdGF4aWRzO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayh0YXhpZHMpO1xuICAgIH1cbiAgfVxuXG4gIHNvcnRDaHJvbW9zb21lcyhhLCBiKSB7XG4gICAgdmFyIGFJc051Y2xlYXIgPSBhLnR5cGUgPT09ICdudWNsZWFyJyxcbiAgICAgIGJJc051Y2xlYXIgPSBiLnR5cGUgPT09ICdudWNsZWFyJyxcbiAgICAgIGFJc0NQID0gYS50eXBlID09PSAnY2hsb3JvcGxhc3QnLFxuICAgICAgYklzQ1AgPSBiLnR5cGUgPT09ICdjaGxvcm9wbGFzdCcsXG4gICAgICBhSXNNVCA9IGEudHlwZSA9PT0gJ21pdG9jaG9uZHJpb24nLFxuICAgICAgYklzTVQgPSBiLnR5cGUgPT09ICdtaXRvY2hvbmRyaW9uJztcbiAgICAvLyBhSXNQbGFzdGlkID0gYUlzTVQgJiYgYS5uYW1lICE9PSAnTVQnLCAvLyBlLmcuIEIxIGluIHJpY2UgZ2Vub21lIEdDRl8wMDE0MzM5MzUuMVxuICAgIC8vIGJJc1BsYXN0aWQgPSBiSXNNVCAmJiBiLm5hbWUgIT09ICdNVCc7XG5cbiAgICBpZiAoYUlzTnVjbGVhciAmJiBiSXNOdWNsZWFyKSB7XG4gICAgICByZXR1cm4gbmF0dXJhbFNvcnQoYS5uYW1lLCBiLm5hbWUpO1xuICAgIH0gZWxzZSBpZiAoIWFJc051Y2xlYXIgJiYgYklzTnVjbGVhcikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChhSXNNVCAmJiBiSXNDUCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChhSXNDUCAmJiBiSXNNVCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoIWFJc01UICYmICFhSXNDUCAmJiAoYklzTVQgfHwgYklzQ1ApKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbi8qXG4qICBSZXR1cm5zIG5hbWVzIGFuZCBsZW5ndGhzIG9mIGNocm9tb3NvbWVzIGZvciBhbiBvcmdhbmlzbSdzIGJlc3Qta25vd25cbiogIGdlbm9tZSBhc3NlbWJseS4gIEdldHMgZGF0YSBmcm9tIE5DQkkgRVV0aWxzIHdlYiBBUEkuXG4qL1xuICBnZXRBc3NlbWJseUFuZENocm9tb3NvbWVzRnJvbUV1dGlscyhjYWxsYmFjaykge1xuICAgIHZhciBhc21BbmRDaHJBcnJheSwgLy8gW2Fzc2VtYmx5X2FjY2Vzc2lvbiwgY2hyb21vc29tZV9vYmplY3RzX2FycmF5XVxuICAgICAgb3JnYW5pc20sIGFzc2VtYmx5QWNjZXNzaW9uLCBjaHJvbW9zb21lcywgYXNtU2VhcmNoLFxuICAgICAgYXNtVWlkLCBhc21TdW1tYXJ5LFxuICAgICAgcnNVaWQsIG51Y2NvcmVMaW5rLFxuICAgICAgbGlua3MsIG50U3VtbWFyeSxcbiAgICAgIHJlc3VsdHMsIHJlc3VsdCwgY25JbmRleCwgY2hyTmFtZSwgY2hyTGVuZ3RoLCBjaHJvbW9zb21lLCB0eXBlLFxuICAgICAgaWRlbyA9IHRoaXM7XG5cbiAgICBvcmdhbmlzbSA9IGlkZW8uY29uZmlnLm9yZ2FuaXNtO1xuXG4gICAgYXNtQW5kQ2hyQXJyYXkgPSBbXTtcbiAgICBjaHJvbW9zb21lcyA9IFtdO1xuXG4gICAgYXNtU2VhcmNoID1cbiAgICAgIGlkZW8uZXNlYXJjaCArXG4gICAgICAnJmRiPWFzc2VtYmx5JyArXG4gICAgICAnJnRlcm09JTIyJyArIG9yZ2FuaXNtICsgJyUyMltvcmdhbmlzbV0nICtcbiAgICAgICAgJ0FORCUyMCglMjJsYXRlc3QlMjByZWZzZXElMjJbZmlsdGVyXSklMjAnICtcbiAgICAgICAgJ0FORCUyMCglMjJjaHJvbW9zb21lJTIwbGV2ZWwlMjJbZmlsdGVyXSUyMCcgK1xuICAgICAgICAnT1IlMjAlMjJjb21wbGV0ZSUyMGdlbm9tZSUyMltmaWx0ZXJdKSc7XG5cbiAgICB2YXIgcHJvbWlzZSA9IGQzLnByb21pc2UuanNvbihhc21TZWFyY2gpO1xuXG4gICAgcHJvbWlzZVxuICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAvLyBOQ0JJIEFzc2VtYmx5IGRhdGFiYXNlJ3MgaW50ZXJuYWwgaWRlbnRpZmllciAodWlkKSBmb3IgdGhpcyBhc3NlbWJseVxuICAgICAgICBhc21VaWQgPSBkYXRhLmVzZWFyY2hyZXN1bHQuaWRsaXN0WzBdO1xuICAgICAgICBhc21TdW1tYXJ5ID0gaWRlby5lc3VtbWFyeSArICcmZGI9YXNzZW1ibHkmaWQ9JyArIGFzbVVpZDtcblxuICAgICAgICByZXR1cm4gZDMucHJvbWlzZS5qc29uKGFzbVN1bW1hcnkpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgLy8gUmVmU2VxIFVJRCBmb3IgdGhpcyBhc3NlbWJseVxuICAgICAgICByc1VpZCA9IGRhdGEucmVzdWx0W2FzbVVpZF0ucnN1aWQ7XG4gICAgICAgIGFzc2VtYmx5QWNjZXNzaW9uID0gZGF0YS5yZXN1bHRbYXNtVWlkXS5hc3NlbWJseWFjY2Vzc2lvbjtcblxuICAgICAgICBhc21BbmRDaHJBcnJheS5wdXNoKGFzc2VtYmx5QWNjZXNzaW9uKTtcblxuICAgICAgICAvLyBHZXQgYSBsaXN0IG9mIElEcyBmb3IgdGhlIGNocm9tb3NvbWVzIGluIHRoaXMgZ2Vub21lLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGluZm9ybWF0aW9uIGRvZXMgbm90IHNlZW0gdG8gYmUgYXZhaWxhYmxlIGZyb20gd2VsbC1rbm93blxuICAgICAgICAvLyBOQ0JJIGRhdGFiYXNlcyBsaWtlIEFzc2VtYmx5IG9yIE51Y2xlb3RpZGUsIHNvIHdlIHVzZSBHZW5Db2xsLFxuICAgICAgICAvLyBhIGxlc3Nlci1rbm93biBOQ0JJIGRhdGFiYXNlLlxuICAgICAgICB2YXIgcXMgPSAnJmRiPW51Y2NvcmUmbGlua25hbWU9Z2VuY29sbF9udWNjb3JlX2NociZmcm9tX3VpZD0nICsgcnNVaWQ7XG4gICAgICAgIG51Y2NvcmVMaW5rID0gaWRlby5lbGluayArIHFzO1xuXG4gICAgICAgIHJldHVybiBkMy5wcm9taXNlLmpzb24obnVjY29yZUxpbmspO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgbGlua3MgPSBkYXRhLmxpbmtzZXRzWzBdLmxpbmtzZXRkYnNbMF0ubGlua3Muam9pbignLCcpO1xuICAgICAgICBudFN1bW1hcnkgPSBpZGVvLmVzdW1tYXJ5ICsgJyZkYj1udWNsZW90aWRlJmlkPScgKyBsaW5rcztcblxuICAgICAgICByZXR1cm4gZDMucHJvbWlzZS5qc29uKG50U3VtbWFyeSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICByZXN1bHRzID0gZGF0YS5yZXN1bHQ7XG5cbiAgICAgICAgZm9yICh2YXIgeCBpbiByZXN1bHRzKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1t4XTtcblxuICAgICAgICAgIC8vIG9taXQgbGlzdCBvZiByZXVsdCB1aWRzXG4gICAgICAgICAgaWYgKHggPT09ICd1aWRzJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdC5nZW5vbWUgPT09ICdtaXRvY2hvbmRyaW9uJykge1xuICAgICAgICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dOb25OdWNsZWFyQ2hyb21vc29tZXMpIHtcbiAgICAgICAgICAgICAgdHlwZSA9IHJlc3VsdC5nZW5vbWU7XG4gICAgICAgICAgICAgIGNuSW5kZXggPSByZXN1bHQuc3VidHlwZS5zcGxpdCgnfCcpLmluZGV4T2YoJ3BsYXNtaWQnKTtcbiAgICAgICAgICAgICAgaWYgKGNuSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY2hyTmFtZSA9ICdNVCc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2VlbiBpbiBlLmcuIHJpY2UgZ2Vub21lIElSR1NQLTEuMCAoR0NGXzAwMTQzMzkzNS4xKSxcbiAgICAgICAgICAgICAgICAvLyBGcm9tIGh0dHBzOi8vZXV0aWxzLm5jYmkubmxtLm5paC5nb3YvZW50cmV6L2V1dGlscy9lc3VtbWFyeS5mY2dpP3JldG1vZGU9anNvbiZkYj1udWNsZW90aWRlJmlkPTk5NjcwMzQzMiw5OTY3MDM0MzEsOTk2NzAzNDMwLDk5NjcwMzQyOSw5OTY3MDM0MjgsOTk2NzAzNDI3LDk5NjcwMzQyNiw5OTY3MDM0MjUsOTk2NzAzNDI0LDk5NjcwMzQyMyw5OTY3MDM0MjIsOTk2NzAzNDIxLDE5NDAzMzIxMCwxMTQ2Njc2Myw3NTI0NzU1XG4gICAgICAgICAgICAgICAgLy8gZ2Vub21lOiAnbWl0b2Nob25kcmlvbicsXG4gICAgICAgICAgICAgICAgLy8gc3VidHlwZTogJ2NlbGxfbGluZXxwbGFzbWlkJyxcbiAgICAgICAgICAgICAgICAvLyBzdWJuYW1lOiAnQS01OCBDTVN8QjEnLFxuICAgICAgICAgICAgICAgIGNock5hbWUgPSByZXN1bHQuc3VibmFtZS5zcGxpdCgnfCcpW2NuSW5kZXhdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgcmVzdWx0Lmdlbm9tZSA9PT0gJ2NobG9yb3BsYXN0JyB8fFxuICAgICAgICAgICAgcmVzdWx0Lmdlbm9tZSA9PT0gJ3BsYXN0aWQnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0eXBlID0gJ2NobG9yb3BsYXN0JztcbiAgICAgICAgICAgIC8vIFBsYXN0aWQgZW5jb3VudGVyZWQgd2l0aCByaWNlIGdlbm9tZSBJUkdTUC0xLjAgKEdDRl8wMDE0MzM5MzUuMSlcbiAgICAgICAgICAgIGlmIChpZGVvLmNvbmZpZy5zaG93Tm9uTnVjbGVhckNocm9tb3NvbWVzKSB7XG4gICAgICAgICAgICAgIGNock5hbWUgPSAnQ1AnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPSAnbnVjbGVhcic7XG4gICAgICAgICAgICBjbkluZGV4ID0gcmVzdWx0LnN1YnR5cGUuc3BsaXQoJ3wnKS5pbmRleE9mKCdjaHJvbW9zb21lJyk7XG5cbiAgICAgICAgICAgIGNock5hbWUgPSByZXN1bHQuc3VibmFtZS5zcGxpdCgnfCcpW2NuSW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHR5cGVvZiBjaHJOYW1lICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICBjaHJOYW1lLnN1YnN0cigwLCAzKSA9PT0gJ2NocidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBDb252ZXJ0IFwiY2hyMTJcIiB0byBcIjEyXCIsIGUuZy4gZm9yIGJhbmFuYSAoR0NGXzAwMDMxMzg1NS4yKVxuICAgICAgICAgICAgICBjaHJOYW1lID0gY2hyTmFtZS5zdWJzdHIoMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hyTGVuZ3RoID0gcmVzdWx0LnNsZW47XG5cbiAgICAgICAgICBjaHJvbW9zb21lID0ge1xuICAgICAgICAgICAgbmFtZTogY2hyTmFtZSxcbiAgICAgICAgICAgIGxlbmd0aDogY2hyTGVuZ3RoLFxuICAgICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjaHJvbW9zb21lcy5wdXNoKGNocm9tb3NvbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hyb21vc29tZXMgPSBjaHJvbW9zb21lcy5zb3J0KGlkZW8uc29ydENocm9tb3NvbWVzKTtcbiAgICAgICAgYXNtQW5kQ2hyQXJyYXkucHVzaChjaHJvbW9zb21lcyk7XG5cbiAgICAgICAgaWRlby5jb29yZGluYXRlU3lzdGVtID0gJ2JwJztcblxuICAgICAgICByZXR1cm4gY2FsbGJhY2soYXNtQW5kQ2hyQXJyYXkpO1xuICAgICAgfSk7XG4gIH1cblxuICBkcmF3U2V4Q2hyb21vc29tZXMoYmFuZHNBcnJheSwgdGF4aWQsIGNvbnRhaW5lciwgZGVmcywgaiwgY2hycykge1xuICAgIHZhciBjaHJvbW9zb21lLCBiYW5kcywgY2hyTW9kZWwsIHNoYXBlLCBzY2ksIGssXG4gICAgICBzZXhDaHJvbW9zb21lSW5kZXhlcyxcbiAgICAgIGlkZW8gPSB0aGlzO1xuXG4gICAgaWYgKGlkZW8uY29uZmlnLnNleCA9PT0gJ21hbGUnKSB7XG4gICAgICBzZXhDaHJvbW9zb21lSW5kZXhlcyA9IFsxLCAwXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V4Q2hyb21vc29tZUluZGV4ZXMgPSBbMCwgMF07XG4gICAgfVxuXG4gICAgZm9yIChrID0gMDsgayA8IHNleENocm9tb3NvbWVJbmRleGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICBzY2kgPSBzZXhDaHJvbW9zb21lSW5kZXhlc1trXSArIGo7XG4gICAgICBjaHJvbW9zb21lID0gY2hyc1tzY2ldO1xuICAgICAgYmFuZHMgPSBiYW5kc0FycmF5W3NjaV07XG4gICAgICBjaHJNb2RlbCA9IGlkZW8uZ2V0Q2hyb21vc29tZU1vZGVsKGJhbmRzLCBjaHJvbW9zb21lLCB0YXhpZCwgc2NpKTtcbiAgICAgIHNoYXBlID0gaWRlby5kcmF3Q2hyb21vc29tZShjaHJNb2RlbCwgaiwgY29udGFpbmVyLCBrKTtcbiAgICAgIGRlZnMuYXBwZW5kKCdjbGlwUGF0aCcpXG4gICAgICAgIC5hdHRyKCdpZCcsIGNock1vZGVsLmlkICsgJy1jaHJvbW9zb21lLXNldC1jbGlwcGF0aCcpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgICAuZGF0YShzaGFwZSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkLnBhdGg7XG4gICAgICAgIH0pLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkLmNsYXNzO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAqIENvbmZpZ3VyZXMgY2hyb21vc29tZSBkYXRhIGFuZCBjYWxscyBkb3duc3RyZWFtIGNocm9tb3NvbWUgZHJhd2luZyBmdW5jdGlvbnNcbiAgKi9cbiAgaW5pdERyYXdDaHJvbW9zb21lcyhiYW5kc0FycmF5KSB7XG4gICAgdmFyIGlkZW8gPSB0aGlzLFxuICAgICAgdGF4aWRzID0gaWRlby5jb25maWcudGF4aWRzLFxuICAgICAgcGxvaWR5ID0gaWRlby5jb25maWcucGxvaWR5LFxuICAgICAgdGF4aWQsXG4gICAgICBjaHJJbmRleCA9IDAsXG4gICAgICBjaHJTZXROdW1iZXIgPSAwLFxuICAgICAgYmFuZHMsXG4gICAgICBpLCBqLCBjaHJzLCBjaHJvbW9zb21lLCBjaHJNb2RlbCxcbiAgICAgIGRlZnMsIHRyYW5zZm9ybTtcblxuICAgIGRlZnMgPSBkMy5zZWxlY3QoaWRlby5zZWxlY3RvciArICcgZGVmcycpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRheGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGF4aWQgPSB0YXhpZHNbaV07XG4gICAgICBjaHJzID0gaWRlby5jb25maWcuY2hyb21vc29tZXNbdGF4aWRdO1xuXG4gICAgICBpZGVvLmNocm9tb3NvbWVzW3RheGlkXSA9IHt9O1xuXG4gICAgICBpZGVvLnNldFNleENocm9tb3NvbWVzKGNocnMpO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgY2hycy5sZW5ndGg7IGorKykge1xuICAgICAgICBjaHJvbW9zb21lID0gY2hyc1tqXTtcbiAgICAgICAgYmFuZHMgPSBiYW5kc0FycmF5W2NockluZGV4XTtcbiAgICAgICAgY2hySW5kZXggKz0gMTtcblxuICAgICAgICBjaHJNb2RlbCA9IGlkZW8uZ2V0Q2hyb21vc29tZU1vZGVsKGJhbmRzLCBjaHJvbW9zb21lLCB0YXhpZCwgY2hySW5kZXgpO1xuXG4gICAgICAgIGlkZW8uY2hyb21vc29tZXNbdGF4aWRdW2Nocm9tb3NvbWVdID0gY2hyTW9kZWw7XG4gICAgICAgIGlkZW8uY2hyb21vc29tZXNBcnJheS5wdXNoKGNock1vZGVsKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgJ3NleCcgaW4gaWRlby5jb25maWcgJiZcbiAgICAgICAgICAoXG4gICAgICAgICAgICBwbG9pZHkgPT09IDIgJiYgaWRlby5zZXhDaHJvbW9zb21lcy5pbmRleCArIDIgPT09IGNockluZGV4IHx8XG4gICAgICAgICAgICBpZGVvLmNvbmZpZy5zZXggPT09ICdmZW1hbGUnICYmIGNock1vZGVsLm5hbWUgPT09ICdZJ1xuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2Zvcm0gPSBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZShjaHJTZXROdW1iZXIpO1xuICAgICAgICBjaHJTZXROdW1iZXIgKz0gMTtcblxuICAgICAgICAvLyBBcHBlbmQgY2hyb21vc29tZSBzZXQgY29udGFpbmVyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkMy5zZWxlY3QoaWRlby5zZWxlY3RvcilcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2hyb21vc29tZS1zZXQtY29udGFpbmVyJylcbiAgICAgICAgICAuYXR0cignZGF0YS1zZXQtbnVtYmVyJywgailcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKVxuICAgICAgICAgIC5hdHRyKCdpZCcsIGNock1vZGVsLmlkICsgJy1jaHJvbW9zb21lLXNldCcpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAnc2V4JyBpbiBpZGVvLmNvbmZpZyAmJlxuICAgICAgICAgIHBsb2lkeSA9PT0gMiAmJlxuICAgICAgICAgIGlkZW8uc2V4Q2hyb21vc29tZXMuaW5kZXggKyAxID09PSBjaHJJbmRleFxuICAgICAgICApIHtcbiAgICAgICAgICBpZGVvLmRyYXdTZXhDaHJvbW9zb21lcyhiYW5kc0FycmF5LCB0YXhpZCwgY29udGFpbmVyLCBkZWZzLCBqLCBjaHJzKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgdmFyIG51bUNocnNJblNldCA9IDE7XG4gICAgICAgIGlmIChwbG9pZHkgPiAxKSB7XG4gICAgICAgICAgbnVtQ2hyc0luU2V0ID0gdGhpcy5fcGxvaWR5LmdldENocm9tb3NvbWVzTnVtYmVyKGopO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbnVtQ2hyc0luU2V0OyBrKyspIHtcbiAgICAgICAgICBzaGFwZSA9IGlkZW8uZHJhd0Nocm9tb3NvbWUoY2hyTW9kZWwsIGNockluZGV4IC0gMSwgY29udGFpbmVyLCBrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZnMuYXBwZW5kKCdjbGlwUGF0aCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgY2hyTW9kZWwuaWQgKyAnLWNocm9tb3NvbWUtc2V0LWNsaXBwYXRoJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgICAuZGF0YShzaGFwZSlcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQucGF0aDtcbiAgICAgICAgICB9KS5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLmNsYXNzO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWRlby5jb25maWcuc2hvd0JhbmRMYWJlbHMgPT09IHRydWUpIHtcbiAgICAgICAgaWRlby5kcmF3QmFuZExhYmVscyhpZGVvLmNocm9tb3NvbWVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBHZXQgaWRlb2dyYW0gU1ZHIGNvbnRhaW5lclxuICBnZXRTdmcoKSB7XG4gICAgcmV0dXJuIGQzLnNlbGVjdCh0aGlzLnNlbGVjdG9yKS5ub2RlKCk7XG4gIH1cblxuICAvKlxuICAqIFNldHMgaW5zdGFuY2UgcHJvcGVydGllcyByZWdhcmRpbmcgc2V4IGNocm9tb3NvbWVzLlxuICAqIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBmb3IgbWFtbWFscy5cbiAgKiBUT0RPOiBTdXBwb3J0IGFsbCBzZXh1YWxseSByZXByb2R1Y2luZyB0YXhhXG4gICogICBYWSBzZXgtZGV0ZXJtaW5hdGlvbiAobWFtbWFscyk6XG4gICogICAgIC0gTWFsZTogWFkgPC0gaGV0ZXJvZ2FtZXRpY1xuICAqICAgICAtIEZlbWFsZTogWFhcbiAgKiAgIFpXIHNleC1kZXRlcm1pbmF0aW9uIChiaXJkcyk6XG4gICogICAgIC0gTWFsZTogWlpcbiAgKiAgICAgLSBGZW1hbGU6IFpXIDwtIGhldGVyb2dhbWV0aWNcbiAgKiAgIFgwIHNleC1kZXRlcm1pbmF0aW9uIChzb21lIGluc2VjdHMpOlxuICAqICAgICAtIE1hbGU6IFgwLCBpLmUuIG9ubHkgWCA8LSBoZXRlcm9nYW1ldGljP1xuICAqICAgICAtIEZlbWFsZTogWFhcbiAgKiBUT0RPOiBTdXBwb3J0IHNleCBjaHJvbW9zb21lIGFuZXVwbG9pZGllcyBpbiBtYW1tYWxzXG4gICogICAgIC0gVHVybmVyIHN5bmRyb21lOiBYMFxuICAqICAgICAtIEtsaW5lZmVsdGVyIHN5bmRvbWU6IFhYWVxuICAqICBNb3JlIHR5cGVzOlxuICAqICBodHRwczoqZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhdGVnb3J5OlNleF9jaHJvbW9zb21lX2FuZXVwbG9pZGllc1xuICAqL1xuICBzZXRTZXhDaHJvbW9zb21lcyhjaHJzKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLnBsb2lkeSAhPT0gMiB8fCAhdGhpcy5jb25maWcuc2V4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlkZW8gPSB0aGlzLFxuICAgICAgc2V4Q2hycyA9IHtYOiAxLCBZOiAxfSxcbiAgICAgIGNociwgaTtcblxuICAgIGlkZW8uc2V4Q2hyb21vc29tZXMubGlzdCA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNocnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNociA9IGNocnNbaV07XG5cbiAgICAgIGlmIChpZGVvLmNvbmZpZy5zZXggPT09ICdtYWxlJyAmJiBjaHIgaW4gc2V4Q2hycykge1xuICAgICAgICBpZGVvLnNleENocm9tb3NvbWVzLmxpc3QucHVzaChjaHIpO1xuICAgICAgICBpZiAoIWlkZW8uc2V4Q2hyb21vc29tZXMuaW5kZXgpIHtcbiAgICAgICAgICBpZGVvLnNleENocm9tb3NvbWVzLmluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaHIgPT09ICdYJykge1xuICAgICAgICBpZGVvLnNleENocm9tb3NvbWVzLmxpc3QucHVzaChjaHIsIGNocik7XG4gICAgICAgIGlkZW8uc2V4Q2hyb21vc29tZXMuaW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qXG4gICogQ29tcGxldGVzIGRlZmF1bHQgaWRlb2dyYW0gaW5pdGlhbGl6YXRpb25cbiAgKiBieSBjYWxsaW5nIGRvd25zdHJlYW0gZnVuY3Rpb25zIHRvXG4gICogcHJvY2VzcyByYXcgYmFuZCBkYXRhIGludG8gZnVsbCBKU09OIG9iamVjdHMsXG4gICogcmVuZGVyIGNocm9tb3NvbWUgYW5kIGN5dG9iYW5kIGZpZ3VyZXMgYW5kIGxhYmVscyxcbiAgKiBhcHBseSBpbml0aWFsIGdyYXBoaWNhbCB0cmFuc2Zvcm1hdGlvbnMsXG4gICogaGlkZSBvdmVybGFwcGluZyBiYW5kIGxhYmVscywgYW5kXG4gICogZXhlY3V0ZSBjYWxsYmFja3MgZGVmaW5lZCBieSBjbGllbnQgY29kZVxuICAqL1xuICBwcm9jZXNzQmFuZERhdGEoKSB7XG4gICAgdmFyIGJhbmRzQXJyYXksIG1heExlbmd0aCwgaSwgaiwgaywgY2hyb21vc29tZSwgYmFuZHMsXG4gICAgICBjaHJMZW5ndGgsIGNocixcbiAgICAgIGJhbmREYXRhLCBiYW5kc0J5Q2hyLFxuICAgICAgdGF4aWQsIHRheGlkcywgY2hycywgY2hyc0J5VGF4aWQsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIGJhbmRzQXJyYXkgPSBbXTtcbiAgICBtYXhMZW5ndGggPSAwO1xuXG4gICAgaWYgKGlkZW8uY29uZmlnLm11bHRpb3JnYW5pc20gPT09IHRydWUpIHtcbiAgICAgIGlkZW8uY29vcmRpbmF0ZVN5c3RlbSA9ICdicCc7XG4gICAgICB0YXhpZHMgPSBpZGVvLmNvbmZpZy50YXhpZHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGF4aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRheGlkID0gdGF4aWRzW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGlkZW8uY29uZmlnLnRheGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZGVvLmNvbmZpZy50YXhpZCA9IGlkZW8uY29uZmlnLnRheGlkc1swXTtcbiAgICAgIH1cbiAgICAgIHRheGlkID0gaWRlby5jb25maWcudGF4aWQ7XG4gICAgICB0YXhpZHMgPSBbdGF4aWRdO1xuICAgICAgaWRlby5jb25maWcudGF4aWRzID0gdGF4aWRzO1xuICAgIH1cblxuICAgIGlmICgnY2hyb21vc29tZXMnIGluIGlkZW8uY29uZmlnKSB7XG4gICAgICBjaHJzID0gaWRlby5jb25maWcuY2hyb21vc29tZXM7XG4gICAgfVxuICAgIGlmIChpZGVvLmNvbmZpZy5tdWx0aW9yZ2FuaXNtKSB7XG4gICAgICBjaHJzQnlUYXhpZCA9IGNocnM7XG4gICAgfVxuXG4gICAgaWRlby5jb25maWcuY2hyb21vc29tZXMgPSB7fTtcblxuICAgIHZhciB0MEIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGZvciAoaiA9IDA7IGogPCB0YXhpZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHRheGlkID0gdGF4aWRzW2pdO1xuXG4gICAgICBpZiAoaWRlby5jb25maWcubXVsdGlvcmdhbmlzbSkge1xuICAgICAgICBjaHJzID0gY2hyc0J5VGF4aWRbdGF4aWRdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWRlby5jb29yZGluYXRlU3lzdGVtID09PSAnaXNjbicgfHwgaWRlby5jb25maWcubXVsdGlvcmdhbmlzbSkge1xuICAgICAgICBiYW5kRGF0YSA9IGlkZW8uYmFuZERhdGFbdGF4aWRdO1xuXG4gICAgICAgIGJhbmRzQnlDaHIgPSBpZGVvLmdldEJhbmRzKGJhbmREYXRhLCB0YXhpZCwgY2hycyk7XG5cbiAgICAgICAgY2hycyA9IE9iamVjdC5rZXlzKGJhbmRzQnlDaHIpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBuYXR1cmFsU29ydChhLCBiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWRlby5jb25maWcuY2hyb21vc29tZXNbdGF4aWRdID0gY2hycy5zbGljZSgpO1xuICAgICAgICBpZGVvLm51bUNocm9tb3NvbWVzICs9IGlkZW8uY29uZmlnLmNocm9tb3NvbWVzW3RheGlkXS5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChrID0gMDsgayA8IGNocnMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBjaHJvbW9zb21lID0gY2hyc1trXTtcbiAgICAgICAgICBiYW5kcyA9IGJhbmRzQnlDaHJbY2hyb21vc29tZV07XG4gICAgICAgICAgYmFuZHNBcnJheS5wdXNoKGJhbmRzKTtcblxuICAgICAgICAgIGNockxlbmd0aCA9IHtcbiAgICAgICAgICAgIGlzY246IGJhbmRzW2JhbmRzLmxlbmd0aCAtIDFdLmlzY24uc3RvcCxcbiAgICAgICAgICAgIGJwOiBiYW5kc1tiYW5kcy5sZW5ndGggLSAxXS5icC5zdG9wXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChjaHJMZW5ndGguaXNjbiA+IGlkZW8ubWF4TGVuZ3RoLmlzY24pIHtcbiAgICAgICAgICAgIGlkZW8ubWF4TGVuZ3RoLmlzY24gPSBjaHJMZW5ndGguaXNjbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2hyTGVuZ3RoLmJwID4gaWRlby5tYXhMZW5ndGguYnApIHtcbiAgICAgICAgICAgIGlkZW8ubWF4TGVuZ3RoLmJwID0gY2hyTGVuZ3RoLmJwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZGVvLmNvb3JkaW5hdGVTeXN0ZW0gPT09ICdicCcpIHtcbiAgICAgICAgLy8gSWYgbGFja2luZyBiYW5kLWxldmVsIGRhdGFcblxuICAgICAgICBpZGVvLmNvbmZpZy5jaHJvbW9zb21lc1t0YXhpZF0gPSBjaHJzLnNsaWNlKCk7XG4gICAgICAgIGlkZW8ubnVtQ2hyb21vc29tZXMgKz0gaWRlby5jb25maWcuY2hyb21vc29tZXNbdGF4aWRdLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY2hycy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgIGNociA9IGNocnNba107XG4gICAgICAgICAgaWYgKGNoci5sZW5ndGggPiBpZGVvLm1heExlbmd0aC5icCkge1xuICAgICAgICAgICAgaWRlby5tYXhMZW5ndGguYnAgPSBjaHIubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0MUIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoaWRlby5kZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coJ1RpbWUgaW4gcHJvY2Vzc0JhbmREYXRhOiAnICsgKHQxQiAtIHQwQikgKyAnIG1zJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhbmRzQXJyYXk7XG4gIH1cblxuICAvKipcbiAgKiBJbml0aWFsaXplcyBhbiBpZGVvZ3JhbS5cbiAgKiBTZXRzIHNvbWUgaGlnaC1sZXZlbCBwcm9wZXJ0aWVzIGJhc2VkIG9uIGluc3RhbmNlIGNvbmZpZ3VyYXRpb24sXG4gICogZmV0Y2hlcyBiYW5kIGFuZCBhbm5vdGF0aW9uIGRhdGEgaWYgbmVlZGVkLCBhbmRcbiAgKiB3cml0ZXMgYW4gU1ZHIGVsZW1lbnQgdG8gdGhlIGRvY3VtZW50IHRvIGNvbnRhaW4gdGhlIGlkZW9ncmFtXG4gICovXG4gIGluaXQoKSB7XG4gICAgdmFyIHRheGlkLCBpLCBzdmdDbGFzcztcblxuICAgIHZhciBpZGVvID0gdGhpcztcblxuICAgIHZhciB0MCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgdmFyIGJhbmRzQXJyYXkgPSBbXSxcbiAgICAgIG51bUJhbmREYXRhUmVzcG9uc2VzID0gMCxcbiAgICAgIHJlc29sdXRpb24gPSB0aGlzLmNvbmZpZy5yZXNvbHV0aW9uLFxuICAgICAgYWNjZXNzaW9uO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICBpZGVvLmdldFRheGlkcyhyZXNvbHZlKTtcbiAgICB9KTtcblxuICAgIHByb21pc2UudGhlbihmdW5jdGlvbih0YXhpZHMpIHtcbiAgICAgIHRheGlkID0gdGF4aWRzWzBdO1xuICAgICAgaWRlby5jb25maWcudGF4aWQgPSB0YXhpZDtcbiAgICAgIGlkZW8uY29uZmlnLnRheGlkcyA9IHRheGlkcztcblxuICAgICAgdmFyIGFzc2VtYmxpZXMsXG4gICAgICAgIGJhbmRGaWxlTmFtZTtcblxuICAgICAgdmFyIGJhbmREYXRhRmlsZU5hbWVzID0ge1xuICAgICAgICA5NjA2OiAnJyxcbiAgICAgICAgMTAwOTA6ICcnXG4gICAgICB9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGF4aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRheGlkID0gU3RyaW5nKHRheGlkc1tpXSk7XG5cbiAgICAgICAgaWYgKCFpZGVvLmNvbmZpZy5hc3NlbWJseSkge1xuICAgICAgICAgIGlkZW8uY29uZmlnLmFzc2VtYmx5ID0gJ2RlZmF1bHQnO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VtYmxpZXMgPSBpZGVvLm9yZ2FuaXNtc1t0YXhpZF0uYXNzZW1ibGllcztcbiAgICAgICAgYWNjZXNzaW9uID0gYXNzZW1ibGllc1tpZGVvLmNvbmZpZy5hc3NlbWJseV07XG5cbiAgICAgICAgYmFuZEZpbGVOYW1lID0gW107XG4gICAgICAgIGJhbmRGaWxlTmFtZS5wdXNoKHNsdWdpZnkoaWRlby5vcmdhbmlzbXNbdGF4aWRdLnNjaWVudGlmaWNOYW1lKSk7XG4gICAgICAgIGlmIChhY2Nlc3Npb24gIT09IGFzc2VtYmxpZXMuZGVmYXVsdCkge1xuICAgICAgICAgIGJhbmRGaWxlTmFtZS5wdXNoKGFjY2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRheGlkID09PSAnOTYwNicgJiZcbiAgICAgICAgICAoYWNjZXNzaW9uICE9PSBhc3NlbWJsaWVzLmRlZmF1bHQgfHwgcmVzb2x1dGlvbiAhPT0gODUwKVxuICAgICAgICApIHtcbiAgICAgICAgICBiYW5kRmlsZU5hbWUucHVzaChyZXNvbHV0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBiYW5kRmlsZU5hbWUgPSBiYW5kRmlsZU5hbWUuam9pbignLScpICsgJy5qcyc7XG5cbiAgICAgICAgaWYgKHRheGlkID09PSAnOTYwNicgfHwgdGF4aWQgPT09ICcxMDA5MCcpIHtcbiAgICAgICAgICBiYW5kRGF0YUZpbGVOYW1lc1t0YXhpZF0gPSBiYW5kRmlsZU5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNockJhbmRzID09PSAndW5kZWZpbmVkJyAmJiB0YXhpZCBpbiBiYW5kRGF0YUZpbGVOYW1lcykge1xuICAgICAgICAgIGQzLnJlcXVlc3QoaWRlby5jb25maWcuZGF0YURpciArIGJhbmREYXRhRmlsZU5hbWVzW3RheGlkXSlcbiAgICAgICAgICAgIC5vbignYmVmb3Jlc2VuZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy8gRW5zdXJlcyBjb3JyZWN0IHRheGlkIGlzIHByb2Nlc3NlZCBpbiByZXNwb25zZSBjYWxsYmFjazsgdXNpbmdcbiAgICAgICAgICAgICAgLy8gc2ltcGx5ICd0YXhpZCcgdmFyaWFibGUgZ2l2ZXMgdGhlIGxhc3QgKnJlcXVlc3RlZCogdGF4aWQsIHdoaWNoXG4gICAgICAgICAgICAgIC8vIGZhaWxzIHdoZW4gZGVhbGluZyB3aXRoIG11bHRpcGxlIHRheGEuXG4gICAgICAgICAgICAgIGRhdGEudGF4aWQgPSB0YXhpZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZ2V0KGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XG4gICAgICAgICAgICAgIGV2YWwoZGF0YS5yZXNwb25zZSk7XG5cbiAgICAgICAgICAgICAgaWRlby5iYW5kRGF0YVtkYXRhLnRheGlkXSA9IGNockJhbmRzO1xuICAgICAgICAgICAgICBudW1CYW5kRGF0YVJlc3BvbnNlcyArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChudW1CYW5kRGF0YVJlc3BvbnNlcyA9PT0gdGF4aWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGJhbmRzQXJyYXkgPSBpZGVvLnByb2Nlc3NCYW5kRGF0YSgpO1xuICAgICAgICAgICAgICAgIHdyaXRlQ29udGFpbmVyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgY2hyQmFuZHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gSWYgYmFuZHMgYWxyZWFkeSBhdmFpbGFibGUsXG4gICAgICAgICAgLy8gZS5nLiB2aWEgPHNjcmlwdD4gdGFnIGluIGluaXRpYWwgcGFnZSBsb2FkXG4gICAgICAgICAgICBpZGVvLmJhbmREYXRhW3RheGlkXSA9IGNockJhbmRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiYW5kc0FycmF5ID0gaWRlby5wcm9jZXNzQmFuZERhdGEoKTtcbiAgICAgICAgICB3cml0ZUNvbnRhaW5lcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB3cml0ZUNvbnRhaW5lcigpIHtcbiAgICAgIGlmIChpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc1BhdGgpIHtcbiAgICAgICAgZDMuanNvbihcbiAgICAgICAgaWRlby5jb25maWcuYW5ub3RhdGlvbnNQYXRoLCAvLyBVUkxcbiAgICAgICAgZnVuY3Rpb24oZGF0YSkgeyAvLyBDYWxsYmFja1xuICAgICAgICAgIGlkZW8ucmF3QW5ub3RzID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgcGxvaWR5IGRlc2NyaXB0aW9uIGlzIGEgc3RyaW5nLCB0aGVuIGNvbnZlcnQgaXQgdG8gdGhlIGNhbm9uaWNhbFxuICAgICAgLy8gYXJyYXkgZm9ybWF0LiAgU3RyaW5nIHBsb2lkeURlc2MgaXMgdXNlZCB3aGVuIGRlcGljdGluZyBlLmcuIHBhcmVudGFsXG4gICAgICAvLyBvcmlnaW4gZWFjaCBtZW1iZXIgb2YgY2hyb21vc29tZSBwYWlyIGluIGEgaHVtYW4gZ2Vub21lLlxuICAgICAgLy8gU2VlIHBsb2lkeV9iYXNpYy5odG1sIGZvciB1c2FnZSBleGFtcGxlLlxuICAgICAgaWYgKFxuICAgICAgICAncGxvaWR5RGVzYycgaW4gaWRlby5jb25maWcgJiZcbiAgICAgICAgdHlwZW9mIGlkZW8uY29uZmlnLnBsb2lkeURlc2MgPT09ICdzdHJpbmcnXG4gICAgICApIHtcbiAgICAgICAgdmFyIHRtcCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkZW8ubnVtQ2hyb21vc29tZXM7IGkrKykge1xuICAgICAgICAgIHRtcC5wdXNoKGlkZW8uY29uZmlnLnBsb2lkeURlc2MpO1xuICAgICAgICB9XG4gICAgICAgIGlkZW8uY29uZmlnLnBsb2lkeURlc2MgPSB0bXA7XG4gICAgICB9XG4gICAgICAvLyBPcmdhbmlzbSBwbG9pZHkgZGVzY3JpcHRpb25cbiAgICAgIGlkZW8uX3Bsb2lkeSA9IG5ldyBQbG9pZHkoaWRlby5jb25maWcpO1xuXG4gICAgICAvLyBDaHJvbW9zb21lJ3MgbGF5b3V0XG4gICAgICBpZGVvLl9sYXlvdXQgPSBMYXlvdXQuZ2V0SW5zdGFuY2UoaWRlby5jb25maWcsIGlkZW8pO1xuXG4gICAgICBzdmdDbGFzcyA9ICcnO1xuICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dDaHJvbW9zb21lTGFiZWxzKSB7XG4gICAgICAgIGlmIChpZGVvLmNvbmZpZy5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc3ZnQ2xhc3MgKz0gJ2xhYmVsZWRMZWZ0ICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ZnQ2xhc3MgKz0gJ2xhYmVsZWQgJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICBpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc0xheW91dCAmJlxuICAgICAgaWRlby5jb25maWcuYW5ub3RhdGlvbnNMYXlvdXQgPT09ICdvdmVybGF5J1xuICAgICkge1xuICAgICAgICBzdmdDbGFzcyArPSAnZmFpbnQnO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ3JhZGllbnRzID0gaWRlby5nZXRCYW5kQ29sb3JHcmFkaWVudHMoKTtcbiAgICAgIHZhciBzdmdXaWR0aCA9IGlkZW8uX2xheW91dC5nZXRXaWR0aCh0YXhpZCk7XG4gICAgICB2YXIgc3ZnSGVpZ2h0ID0gaWRlby5fbGF5b3V0LmdldEhlaWdodCh0YXhpZCk7XG5cbiAgICAgIGQzLnNlbGVjdChpZGVvLmNvbmZpZy5jb250YWluZXIpXG4gICAgICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgICAgICAgLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICdfaWRlb2dyYW0nKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgc3ZnQ2xhc3MpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBzdmdXaWR0aClcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBzdmdIZWlnaHQpXG4gICAgICAgICAgICAuaHRtbChncmFkaWVudHMpO1xuXG4gICAgICBmaW5pc2hJbml0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluaXNoSW5pdCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciB0MEEgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgICB2YXIgaTtcblxuICAgICAgICBpZGVvLmluaXREcmF3Q2hyb21vc29tZXMoYmFuZHNBcnJheSk7XG5cbiAgICAgICAgLy8gV2FpdHMgZm9yIHBvdGVudGlhbGx5IGxhcmdlIGFubm90YXRpb24gZGF0YXNldFxuICAgICAgICAvLyB0byBiZSByZWNlaXZlZCBieSB0aGUgY2xpZW50LCB0aGVuIHRyaWdnZXJzIGFubm90YXRpb24gcHJvY2Vzc2luZ1xuICAgICAgICBpZiAoaWRlby5jb25maWcuYW5ub3RhdGlvbnNQYXRoKSB7XG4gICAgICAgICAgZnVuY3Rpb24gcGEoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlkZW8udGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChpZGVvLnRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZGVvLmFubm90cyA9IGlkZW8ucHJvY2Vzc0Fubm90RGF0YShpZGVvLnJhd0Fubm90cyk7XG4gICAgICAgICAgICBpZGVvLmRyYXdQcm9jZXNzZWRBbm5vdHMoaWRlby5hbm5vdHMpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNyb3NzZmlsdGVyICE9PSAndW5kZWZpbmVkJyAmJiBpZGVvLmluaXRDcm9zc0ZpbHRlcikge1xuICAgICAgICAgICAgICBpZGVvLmluaXRDcm9zc0ZpbHRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpZGVvLnJhd0Fubm90cykge1xuICAgICAgICAgICAgcGEoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKGZ1bmN0aW9uIGNoZWNrQW5ub3REYXRhKCkge1xuICAgICAgICAgICAgICBpZGVvLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICghaWRlby5yYXdBbm5vdHMpIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrQW5ub3REYXRhKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgNTBcbiAgICAgICAgICApO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaWRlby5jb25maWcuc2hvd0JhbmRMYWJlbHMgPT09IHRydWUpIHtcbiAgICAgICAgICB2YXIgYmFuZHNUb1Nob3cgPSBpZGVvLmJhbmRzVG9TaG93LmpvaW4oJywnKTtcblxuICAgICAgICAgIC8vIGQzLnNlbGVjdEFsbCByZXNvbHZlcyB0byBxdWVyeVNlbGVjdG9yQWxsIChRU0EpLlxuICAgICAgICAgIC8vIFFTQSB0YWtlcyBhIHN1cnByaXNpbmdseSBsb25nIHRpbWUgdG8gY29tcGxldGUsXG4gICAgICAgICAgLy8gYW5kIHNjYWxlcyB3aXRoIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzLlxuICAgICAgICAgIC8vIE1vc3QgYmFuZHMgYXJlIGhpZGRlbiwgc28gd2UgY2FuIG9wdGltaXplIGJ5XG4gICAgICAgICAgLy8gSGlkaW5nIGFsbCBiYW5kcywgdGhlbiBRU0EnaW5nIGFuZCBkaXNwbGF5aW5nIHRoZVxuICAgICAgICAgIC8vIHJlbGF0aXZlbHkgZmV3IGJhbmRzIHRoYXQgYXJlIHNob3duLlxuICAgICAgICAgIHZhciB0MEMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmJhbmRMYWJlbCwgLmJhbmRMYWJlbFN0YWxrJylcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgIGQzLnNlbGVjdEFsbChiYW5kc1RvU2hvdykuc3R5bGUoJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgdmFyIHQxQyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgIGlmIChpZGVvLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVGltZSBpbiBzaG93aW5nIGJhbmRzOiAnICsgKHQxQyAtIHQwQykgKyAnIG1zJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlkZW8uY29uZmlnLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICB2YXIgY2hySUQ7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWRlby5jaHJvbW9zb21lc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNocklEID0gJyMnICsgaWRlby5jaHJvbW9zb21lc0FycmF5W2ldLmlkO1xuICAgICAgICAgICAgICBpZGVvLnJvdGF0ZUNocm9tb3NvbWVMYWJlbHMoZDMuc2VsZWN0KGNocklEKSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dDaHJvbW9zb21lTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICAgICAgaWRlby5kcmF3Q2hyb21vc29tZUxhYmVscyhpZGVvLmNocm9tb3NvbWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZGVvLmNvbmZpZy5icnVzaCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlkZW8uY3JlYXRlQnJ1c2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZGVvLmNvbmZpZy5hbm5vdGF0aW9ucykge1xuICAgICAgICAgIGlkZW8uZHJhd0Fubm90cyhpZGVvLmNvbmZpZy5hbm5vdGF0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdDFBID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGlmIChpZGVvLmRlYnVnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1RpbWUgaW4gZHJhd0Nocm9tb3NvbWU6ICcgKyAodDFBIC0gdDBBKSArICcgbXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0MSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoaWRlby5kZWJ1Zykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdUaW1lIGNvbnN0cnVjdGluZyBpZGVvZ3JhbTogJyArICh0MSAtIHQwKSArICcgbXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZGVvLm9uTG9hZENhbGxiYWNrKSB7XG4gICAgICAgICAgaWRlby5vbkxvYWRDYWxsYmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEoJ3JvdGF0YWJsZScgaW4gaWRlby5jb25maWcgJiYgaWRlby5jb25maWcucm90YXRhYmxlID09PSBmYWxzZSkpIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlkZW8ucm90YXRlQW5kVG9nZ2xlRGlzcGxheSh0aGlzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUnKVxuICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAnZGVmYXVsdCcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iLCJcbmltcG9ydCB7SWRlb2dyYW19IGZyb20gJy4vY29yZSdcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL292ZXJzZXQvamF2YXNjcmlwdC1uYXR1cmFsLXNvcnRcbmZ1bmN0aW9uIG5hdHVyYWxTb3J0KGEsYil7dmFyIHEscixjPS8oXihbK1xcLV0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/KD89XFxEfFxcc3wkKSl8XjB4W1xcZGEtZkEtRl0rJHxcXGQrKS9nLGQ9L15cXHMrfFxccyskL2csZT0vXFxzKy9nLGY9LyheKFtcXHcgXSssP1tcXHcgXSspP1tcXHcgXSssP1tcXHcgXStcXGQrOlxcZCsoOlxcZCspP1tcXHcgXT98XlxcZHsxLDR9W1xcL1xcLV1cXGR7MSw0fVtcXC9cXC1dXFxkezEsNH18XlxcdyssIFxcdysgXFxkKywgXFxkezR9KS8sZz0vXjB4WzAtOWEtZl0rJC9pLGg9L14wLyxpPWZ1bmN0aW9uKGEpe3JldHVybihuYXR1cmFsU29ydC5pbnNlbnNpdGl2ZSYmKFwiXCIrYSkudG9Mb3dlckNhc2UoKXx8XCJcIithKS5yZXBsYWNlKGQsXCJcIil9LGo9aShhKSxrPWkoYiksbD1qLnJlcGxhY2UoYyxcIlxcMCQxXFwwXCIpLnJlcGxhY2UoL1xcMCQvLFwiXCIpLnJlcGxhY2UoL15cXDAvLFwiXCIpLnNwbGl0KFwiXFwwXCIpLG09ay5yZXBsYWNlKGMsXCJcXDAkMVxcMFwiKS5yZXBsYWNlKC9cXDAkLyxcIlwiKS5yZXBsYWNlKC9eXFwwLyxcIlwiKS5zcGxpdChcIlxcMFwiKSxuPXBhcnNlSW50KGoubWF0Y2goZyksMTYpfHwxIT09bC5sZW5ndGgmJkRhdGUucGFyc2Uoaiksbz1wYXJzZUludChrLm1hdGNoKGcpLDE2KXx8biYmay5tYXRjaChmKSYmRGF0ZS5wYXJzZShrKXx8bnVsbCxwPWZ1bmN0aW9uKGEsYil7cmV0dXJuKCFhLm1hdGNoKGgpfHwxPT1iKSYmcGFyc2VGbG9hdChhKXx8YS5yZXBsYWNlKGUsXCIgXCIpLnJlcGxhY2UoZCxcIlwiKXx8MH07aWYobyl7aWYobjxvKXJldHVybi0xO2lmKG4+bylyZXR1cm4gMX1mb3IodmFyIHM9MCx0PWwubGVuZ3RoLHU9bS5sZW5ndGgsdj1NYXRoLm1heCh0LHUpO3M8djtzKyspe2lmKHE9cChsW3NdfHxcIlwiLHQpLHI9cChtW3NdfHxcIlwiLHUpLGlzTmFOKHEpIT09aXNOYU4ocikpcmV0dXJuIGlzTmFOKHEpPzE6LTE7aWYoL1teXFx4MDAtXFx4ODBdLy50ZXN0KHErcikmJnEubG9jYWxlQ29tcGFyZSl7dmFyIHc9cS5sb2NhbGVDb21wYXJlKHIpO3JldHVybiB3L01hdGguYWJzKHcpfWlmKHE8cilyZXR1cm4tMTtpZihxPnIpcmV0dXJuIDF9fVxuXG4vLyBlLmcuIFwiSG9tbyBzYXBpZW5zXCIgLT4gXCJob21vLXNhcGllbnNcIlxuZnVuY3Rpb24gc2x1Z2lmeSh2YWx1ZSl7cmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnICcsICctJyl9O1xuXG53aW5kb3cubmF0dXJhbFNvcnQgPSBuYXR1cmFsU29ydDtcbndpbmRvdy5zbHVnaWZ5ID0gc2x1Z2lmeTtcblxud2luZG93LklkZW9ncmFtID0gSWRlb2dyYW07XG4iLCJcbi8vIGltcG9ydCB7VmVydGljYWxMYXlvdXR9IGZyb20gJy4vdmVydGljYWwtbGF5b3V0Jztcbi8vIGltcG9ydCB7SG9yaXpvbnRhbExheW91dH0gZnJvbSAnLi9ob3Jpem9udGFsLWxheW91dCc7XG4vLyBpbXBvcnQge1BhaXJlZExheW91dH0gZnJvbSAnLi9wYWlyZWQtbGF5b3V0Jztcbi8vIGltcG9ydCB7U21hbGxMYXlvdXR9IGZyb20gJy4vc21hbGwtbGF5b3V0JztcblxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuXG5pbXBvcnQge0Nocm9tb3NvbWVVdGlsfSBmcm9tICcuLy4uL3ZpZXdzL2Nocm9tb3NvbWUtdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBMYXlvdXQge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZywgaWRlbykge1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9pZGVvID0gaWRlbztcbiAgICB0aGlzLl9wbG9pZHkgPSB0aGlzLl9pZGVvLl9wbG9pZHk7XG4gICAgdGhpcy5fdHJhbnNsYXRlID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKCdjaHJTZXRNYXJnaW4nIGluIGNvbmZpZykge1xuICAgICAgdGhpcy5jaHJTZXRNYXJnaW4gPSBjb25maWcuY2hyU2V0TWFyZ2luO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgayA9IHRoaXMuX2NvbmZpZy5jaHJNYXJnaW47XG4gICAgICB0aGlzLmNoclNldE1hcmdpbiA9ICh0aGlzLl9jb25maWcucGxvaWR5ID4gMSA/IGsgOiAwKTtcbiAgICB9XG5cbiAgICAvLyBDaHJvbW9zb21lIGJhbmQncyBzaXplLlxuICAgIHRoaXMuX3RpY2tTaXplID0gODtcblxuICAgIC8vIENocm9tb3NvbWUgcm90YXRpb24gc3RhdGUuXG4gICAgdGhpcy5faXNSb3RhdGVkID0gZmFsc2U7XG4gIH1cblxuICAvLyBGYWN0b3J5IG1ldGhvZFxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoY29uZmlnLCBpZGVvKSB7XG4gICAgaWYgKCdwZXJzcGVjdGl2ZScgaW4gY29uZmlnICYmIGNvbmZpZy5wZXJzcGVjdGl2ZSA9PT0gJ2NvbXBhcmF0aXZlJykge1xuICAgICAgcmV0dXJuIG5ldyBQYWlyZWRMYXlvdXQoY29uZmlnLCBpZGVvKTtcbiAgICB9IGVsc2UgaWYgKCdyb3dzJyBpbiBjb25maWcgJiYgY29uZmlnLnJvd3MgPiAxKSB7XG4gICAgICByZXR1cm4gbmV3IFNtYWxsTGF5b3V0KGNvbmZpZywgaWRlbyk7XG4gICAgfSBlbHNlIGlmIChjb25maWcub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIHJldHVybiBuZXcgVmVydGljYWxMYXlvdXQoY29uZmlnLCBpZGVvKTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICByZXR1cm4gbmV3IEhvcml6b250YWxMYXlvdXQoY29uZmlnLCBpZGVvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBWZXJ0aWNhbExheW91dChjb25maWcsIGlkZW8pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBjaGFydCBsZWZ0IG1hcmdpblxuICBfZ2V0TGVmdE1hcmdpbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFyZ2luLmxlZnQ7XG4gIH1cblxuICAvLyBHZXQgcm90YXRlZCBjaHJvbW9zb21lIHkgc2NhbGVcbiAgX2dldFlTY2FsZSgpIHtcbiAgICAgIC8vIDIwIGlzIHdpZHRoIG9mIHJvdGF0ZWQgY2hyb21vc29tZS5cbiAgICByZXR1cm4gMjAgLyB0aGlzLl9jb25maWcuY2hyV2lkdGg7XG4gIH1cblxuICAvLyBHZXQgY2hyb21vc29tZSBsYWJlbHNcbiAgZ2V0Q2hyb21vc29tZUxhYmVscyhjaHJFbGVtZW50KSB7XG4gICAgdmFyIHV0aWwgPSBuZXcgQ2hyb21vc29tZVV0aWwoY2hyRWxlbWVudCk7XG5cbiAgICByZXR1cm4gW3V0aWwuZ2V0U2V0TGFiZWwoKSwgdXRpbC5nZXRMYWJlbCgpXS5maWx0ZXIoZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQubGVuZ3RoID4gMDtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJvdGF0ZSBjaHJvbW9zb21lIHRvIG9yaWdpbmFsIHBvc2l0aW9uXG4gIHJvdGF0ZUJhY2soKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuX2NsYXNzICsgJyNyb3RhdGVCYWNrIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLy8gUm90YXRlIGNocm9tb3NvbWUgdG8gb3Bwb3NpdGUgcG9zaXRpb25cbiAgcm90YXRlRm9yd2FyZCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fY2xhc3MgKyAnI3JvdGF0ZUZvcndhcmQgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICByb3RhdGUoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQpIHtcbiAgICB2YXIgaWRlbyA9IHRoaXMuX2lkZW87XG5cbiAgICAgIC8vIEZpbmQgY2hyb21vc29tZXMgd2hpY2ggc2hvdWxkIGJlIGhpZGRlblxuICAgIHZhciBvdGhlckNocnMgPSBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgZy5jaHJvbW9zb21lJylcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzICE9PSBjaHJFbGVtZW50O1xuICAgICAgfSk7XG5cbiAgICBpZiAodGhpcy5faXNSb3RhdGVkKSB7XG4gICAgICAgICAgLy8gUmVzZXQgX2lzUm90YXRlZCBmbGFnXG4gICAgICB0aGlzLl9pc1JvdGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAvLyBSb3RhdGUgY2hyb21vc29tZSBiYWNrXG4gICAgICB0aGlzLnJvdGF0ZUJhY2soY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBTaG93IGFsbCBvdGhlciBjaHJvbW9zb21lcyBhbmQgY2hyb21vc29tZSBsYWJlbHNcbiAgICAgICAgb3RoZXJDaHJzLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICAgIGQzLnNlbGVjdEFsbChpZGVvLnNlbGVjdG9yICsgJyAuY2hyU2V0TGFiZWwsIC5jaHJMYWJlbCcpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNldCBfaXNSb3RhdGVkIGZsYWdcbiAgICAgIHRoaXMuX2lzUm90YXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAvLyBIaWRlIGFsbCBvdGhlciBjaHJvbW9zb21lcyBhbmQgY2hyb21vc29tZSBsYWJlbHNcbiAgICAgIG90aGVyQ2hycy5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNoclNldExhYmVsLCAuY2hyTGFiZWwnKVxuICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICAgICAgLy8gUm90YXRlIGNocm9tb3NvbWVcbiAgICAgIHRoaXMucm90YXRlRm9yd2FyZChjaHJTZXROdW1iZXIsIGNock51bWJlciwgY2hyRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUxhYmVsQ2xhc3MoKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5wbG9pZHkgPT09IDEpIHtcbiAgICAgIHJldHVybiAnY2hyTGFiZWwnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2NoclNldExhYmVsJztcbiAgICB9XG4gIH1cblxuICBfZ2V0QWRkaXRpb25hbE9mZnNldCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKHRoaXMuX2NvbmZpZy5hbm5vdGF0aW9uSGVpZ2h0IHx8IDApICogKHRoaXMuX2NvbmZpZy5udW1Bbm5vdFRyYWNrcyB8fCAxKVxuICAgICk7XG4gIH1cblxuICBfZ2V0Q2hyb21vc29tZVNldFNpemUoY2hyU2V0TnVtYmVyKSB7XG4gICAgLy8gR2V0IGxhc3QgY2hyb21vc29tZSBzZXQgc2l6ZS5cbiAgICB2YXIgc2V0U2l6ZSA9IHRoaXMuX3Bsb2lkeS5nZXRTZXRTaXplKGNoclNldE51bWJlcik7XG5cbiAgICAvLyBJbmNyZWFzZSBvZmZzZXQgYnkgbGFzdCBjaHJvbW9zb21lIHNldCBzaXplXG4gICAgcmV0dXJuIChcbiAgICAgIHNldFNpemUgKiB0aGlzLl9jb25maWcuY2hyV2lkdGggKiAyICsgKHRoaXMuY2hyU2V0TWFyZ2luKVxuICAgICk7XG4gIH1cblxuICAvLyBHZXQgbGF5b3V0IG1hcmdpblxuICBnZXRNYXJnaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcmdpbjtcbiAgfVxuXG4gIC8vIEdldCBTVkcgZWxlbWVudCBoZWlnaHRcbiAgZ2V0SGVpZ2h0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9jbGFzcyArICcjZ2V0SGVpZ2h0IG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTEoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuX2NsYXNzICsgJyNnZXRDaHJvbW9zb21lQmFuZFRpY2tZMSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kVGlja1kyKCkge1xuICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9jbGFzcyArICcjZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTIgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvLyBHZXQgY2hyb21vc29tZSdzIGJhbmQgdHJhbnNsYXRlIGF0dHJpYnV0ZVxuICBnZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIHRoaXMuX2NsYXNzICsgJyNnZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlIG5vdCBpbXBsZW1lbnRlZCdcbiAgICApO1xuICB9XG5cbiAgLy8gR2V0IGNocm9tb3NvbWUgc2V0IGxhYmVsIGFuY2hvciBwcm9wZXJ0eVxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxBbmNob3IoKSB7XG4gICAgcmV0dXJuICdtaWRkbGUnO1xuICB9XG5cbiAgLy8gR2V0IGNocm9tb3NvbWUncyBiYW5kIGxhYmVsIHRleHQtYW5jaG9yIHZhbHVlXG4gIGdldENocm9tb3NvbWVCYW5kTGFiZWxBbmNob3IoKSB7XG4gICAgdGhyb3cgKFxuICAgICAgbmV3IEVycm9yKHRoaXMuX2NsYXNzICsgJyNnZXRDaHJvbW9zb21lQmFuZExhYmVsQW5jaG9yIG5vdCBpbXBsZW1lbnRlZCcpXG4gICAgKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVMYWJlbFhQb3NpdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICB0aGlzLl9jbGFzcyArICcjZ2V0Q2hyb21vc29tZUxhYmVsWFBvc2l0aW9uIG5vdCBpbXBsZW1lbnRlZCdcbiAgICApO1xuICB9XG5cbiAgLy8gR2V0IGNocm9tb3NvbWUgbGFiZWwgeSBwb3NpdGlvbi5cbiAgZ2V0Q2hyb21vc29tZUxhYmVsWVBvc2l0aW9uKCkge1xuICAgIHJldHVybiAtNS41O1xuICB9XG5cbiAgLy8gXCJpXCIgaXMgY2hyb21vc29tZSBudW1iZXJcbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsWVBvc2l0aW9uKGkpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLnBsb2lkeSA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hyb21vc29tZUxhYmVsWVBvc2l0aW9uKGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTIgKiB0aGlzLl9jb25maWcuY2hyV2lkdGg7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsWFBvc2l0aW9uKCkge1xuICAgIHRocm93IChcbiAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgdGhpcy5fY2xhc3MgKyAnI2dldENocm9tb3NvbWVTZXRMYWJlbFhQb3NpdGlvbiBub3QgaW1wbGVtZW50ZWQnXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFRyYW5zbGF0ZSgpIHtcbiAgICB0aHJvdyAoXG4gICAgICBuZXcgRXJyb3IodGhpcy5fY2xhc3MgKyAnI2dldENocm9tb3NvbWVTZXRMYWJlbFRyYW5zbGF0ZSBub3QgaW1wbGVtZW50ZWQnKVxuICAgICk7XG4gIH1cblxuICAvLyBHZXQgY2hyb21vc29tZSBzZXQgdHJhbnNsYXRlIGF0dHJpYnV0ZVxuICBnZXRDaHJvbW9zb21lU2V0VHJhbnNsYXRlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9jbGFzcyArICcjZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8vIEdldCBjaHJvbW9zb21lIHNldCB0cmFuc2xhdGUncyB5IG9mZnNldFxuICBnZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICB0aGlzLl9jbGFzcyArICcjZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUgbm90IGltcGxlbWVudGVkJ1xuICAgICk7XG4gIH1cbn1cblxuXG5cbmV4cG9ydCBjbGFzcyBIb3Jpem9udGFsTGF5b3V0IGV4dGVuZHMgTGF5b3V0IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGlkZW8pIHtcbiAgICBzdXBlcihjb25maWcsIGlkZW8pO1xuICAgIHRoaXMuX2NsYXNzID0gJ0hvcml6b250YWxMYXlvdXQnO1xuICAgIHRoaXMuX21hcmdpbiA9IHtcbiAgICAgIGxlZnQ6IDIwLFxuICAgICAgdG9wOiAzMFxuICAgIH07XG4gIH1cblxuICBfZ2V0TGVmdE1hcmdpbigpIHtcbiAgICB2YXIgbWFyZ2luID0gTGF5b3V0LnByb3RvdHlwZS5fZ2V0TGVmdE1hcmdpbi5jYWxsKHRoaXMpO1xuICAgIGlmICh0aGlzLl9jb25maWcucGxvaWR5ID4gMSkge1xuICAgICAgbWFyZ2luICo9IDEuODtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFyZ2luO1xuICB9XG5cbiAgcm90YXRlRm9yd2FyZChzZXROdW1iZXIsIGNock51bWJlciwgY2hyRWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgeE9mZnNldCA9IDMwO1xuXG4gICAgdmFyIGlkZW9Cb3ggPSBkMy5zZWxlY3QodGhpcy5faWRlby5zZWxlY3Rvcikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBjaHJCb3ggPSBjaHJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgdmFyIHNjYWxlWCA9IChpZGVvQm94LmhlaWdodCAvIChjaHJCb3gud2lkdGggKyB4T2Zmc2V0IC8gMikpICogMC45O1xuICAgIHZhciBzY2FsZVkgPSB0aGlzLl9nZXRZU2NhbGUoKTtcblxuICAgIHZhciB5T2Zmc2V0ID0gKGNock51bWJlciArIDEpICogKCh0aGlzLl9jb25maWcuY2hyV2lkdGggKiAyKSAqIHNjYWxlWSk7XG5cbiAgICB2YXIgdHJhbnNmb3JtID0gKFxuICAgICAgJ3JvdGF0ZSg5MCkgJyArXG4gICAgICAndHJhbnNsYXRlKCcgKyB4T2Zmc2V0ICsgJywgLScgKyB5T2Zmc2V0ICsgJykgJyArXG4gICAgICAnc2NhbGUoJyArIHNjYWxlWCArICcsICcgKyBzY2FsZVkgKyAnKSdcbiAgICApO1xuXG4gICAgZDMuc2VsZWN0KGNockVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSlcbiAgICAgIC5vbignZW5kJywgY2FsbGJhY2spO1xuXG4gICAgLy8gQXBwZW5kIG5ldyBjaHJvbW9zb21lIGxhYmVsc1xuICAgIHZhciBsYWJlbHMgPSB0aGlzLmdldENocm9tb3NvbWVMYWJlbHMoY2hyRWxlbWVudCk7XG4gICAgZDMuc2VsZWN0KHRoaXMuX2lkZW8uZ2V0U3ZnKCkpXG4gICAgICAuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICd0bXAnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXG4gICAgICAuZGF0YShsYWJlbHMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiBpID09PSAwICYmIGxhYmVscy5sZW5ndGggPT09IDIgPyAnY2hyU2V0TGFiZWwnIDogbnVsbDtcbiAgICAgIH0pXG4gICAgICAuYXR0cigneCcsIDMwKVxuICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiAoaSArIDEgKyBsYWJlbHMubGVuZ3RoICUgMikgKiAxMjtcbiAgICAgIH0pXG4gICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgICAgLnRleHQoU3RyaW5nKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG4gIH1cblxuICByb3RhdGVCYWNrKHNldE51bWJlciwgY2hyTnVtYmVyLFxuICAgICAgICAgICAgIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXMuZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZShzZXROdW1iZXIpO1xuXG4gICAgZDMuc2VsZWN0KGNockVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zbGF0ZSlcbiAgICAgIC5vbignZW5kJywgY2FsbGJhY2spO1xuXG4gICAgZDMuc2VsZWN0QWxsKHRoaXMuX2lkZW8uc2VsZWN0b3IgKyAnIGcudG1wJylcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAucmVtb3ZlKCk7XG4gIH1cblxuICBnZXRIZWlnaHQodGF4SWQpIHtcbiAgICAvLyBHZXQgbGFzdCBjaHJvbW9zb21lIHNldCBvZmZzZXQuXG4gICAgdmFyIG51bUNocm9tb3NvbWVzID0gdGhpcy5fY29uZmlnLmNocm9tb3NvbWVzW3RheElkXS5sZW5ndGg7XG4gICAgdmFyIGxhc3RTZXRPZmZzZXQgPSB0aGlzLmdldENocm9tb3NvbWVTZXRZVHJhbnNsYXRlKG51bUNocm9tb3NvbWVzIC0gMSk7XG5cbiAgICAvLyBHZXQgbGFzdCBjaHJvbW9zb21lIHNldCBzaXplLlxuICAgIHZhciBsYXN0U2V0U2l6ZSA9IHRoaXMuX2dldENocm9tb3NvbWVTZXRTaXplKG51bUNocm9tb3NvbWVzIC0gMSk7XG5cbiAgICAvLyBJbmNyZWFzZSBvZmZzZXQgYnkgbGFzdCBjaHJvbW9zb21lIHNldCBzaXplXG4gICAgbGFzdFNldE9mZnNldCArPSBsYXN0U2V0U2l6ZTtcblxuICAgIHJldHVybiBsYXN0U2V0T2Zmc2V0ICsgdGhpcy5fZ2V0QWRkaXRpb25hbE9mZnNldCgpICogMjtcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuY2hySGVpZ2h0ICsgdGhpcy5fbWFyZ2luLnRvcCAqIDEuNTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbEFuY2hvcigpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lQmFuZExhYmVsQW5jaG9yKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTEoKSB7XG4gICAgcmV0dXJuIDI7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lQmFuZFRpY2tZMigpIHtcbiAgICByZXR1cm4gMTA7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlKGJhbmQpIHtcbiAgICB2YXIgeCA9XG4gICAgICB0aGlzLl9pZGVvLnJvdW5kKC10aGlzLl90aWNrU2l6ZSArIGJhbmQucHguc3RhcnQgKyBiYW5kLnB4LndpZHRoIC8gMik7XG4gICAgdmFyIHkgPSAtMTA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHksXG4gICAgICB0cmFuc2xhdGU6ICd0cmFuc2xhdGUoJyArIHggKyAnLCcgKyB5ICsgJyknXG4gICAgfTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFRyYW5zbGF0ZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRUcmFuc2xhdGUoc2V0TnVtYmVyKSB7XG4gICAgdmFyIGxlZnRNYXJnaW4gPSB0aGlzLl9nZXRMZWZ0TWFyZ2luKCk7XG4gICAgdmFyIGNocm9tb3NvbWVTZXRZVHJhbnNsYXRlID0gdGhpcy5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShzZXROdW1iZXIpO1xuICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBsZWZ0TWFyZ2luICsgJywgJyArIGNocm9tb3NvbWVTZXRZVHJhbnNsYXRlICsgJyknO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoc2V0TnVtYmVyKSB7XG4gICAgLy8gSWYgbm8gZGV0YWlsZWQgZGVzY3JpcHRpb24gcHJvdmlkZWQganVzdCB1c2Ugb25lIGZvcm11bGEgZm9yIGFsbCBjYXNlcy5cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wbG9pZHlEZXNjKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNock1hcmdpbiAqIChzZXROdW1iZXIgKyAxKTtcbiAgICB9XG5cbiAgICAvLyBJZCBkZXRhaWxlZCBkZXNjcmlwdGlvbiBwcm92aWRlZCBzdGFydCB0byBjYWxjdWxhdGUgb2Zmc2V0c1xuICAgIC8vICBmb3IgZWFjaCBjaHJvbW9zb21lIHNldCBzZXBhcmF0ZWx5LiBUaGlzIHNob3VsZCBiZSBkb25lIG9ubHkgb25jZS5cbiAgICBpZiAoIXRoaXMuX3RyYW5zbGF0ZSkge1xuICAgICAgLy8gRmlyc3Qgb2Zmc2V0IGVxdWFscyB0byB6ZXJvLlxuICAgICAgdGhpcy5fdHJhbnNsYXRlID0gWzFdO1xuXG4gICAgICAvLyBMb29wIHRocm91Z2ggZGVzY3JpcHRpb24gc2V0XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMuX2NvbmZpZy5wbG9pZHlEZXNjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zbGF0ZVtpXSA9XG4gICAgICAgICAgdGhpcy5fdHJhbnNsYXRlW2kgLSAxXSArIHRoaXMuX2dldENocm9tb3NvbWVTZXRTaXplKGkgLSAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdHJhbnNsYXRlW3NldE51bWJlcl07XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxYUG9zaXRpb24oaSkge1xuICAgIGlmICh0aGlzLl9jb25maWcucGxvaWR5ID09PSAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRDaHJvbW9zb21lTGFiZWxYUG9zaXRpb24oaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAtMjA7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsWVBvc2l0aW9uKGkpIHtcbiAgICB2YXIgc2V0U2l6ZSA9IHRoaXMuX3Bsb2lkeS5nZXRTZXRTaXplKGkpLFxuICAgICAgY29uZmlnID0gdGhpcy5fY29uZmlnLFxuICAgICAgY2hyTWFyZ2luID0gY29uZmlnLmNock1hcmdpbixcbiAgICAgIGNocldpZHRoID0gY29uZmlnLmNocldpZHRoLFxuICAgICAgeTtcblxuICAgIGlmIChjb25maWcucGxvaWR5ID09PSAxKSB7XG4gICAgICB5ID0gY2hyV2lkdGggLyAyICsgMztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IChzZXRTaXplICogY2hyTWFyZ2luKSAvIDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHk7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lTGFiZWxYUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIC04O1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUxhYmVsWVBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuY2hyV2lkdGg7XG4gIH1cblxufVxuXG5cblxuXG5leHBvcnQgY2xhc3MgUGFpcmVkTGF5b3V0IGV4dGVuZHMgTGF5b3V0IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGlkZW8pIHtcbiAgICBzdXBlcihjb25maWcsIGlkZW8pO1xuXG4gICAgdGhpcy5fY2xhc3MgPSAnUGFpcmVkTGF5b3V0JztcblxuICAgIHRoaXMuX21hcmdpbiA9IHtcbiAgICAgIGxlZnQ6IDMwXG4gICAgfTtcbiAgfVxuXG4gIHJvdGF0ZUZvcndhcmQoc2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpZGVvID0gdGhpcy5faWRlbztcblxuICAgIC8vIEdldCBpZGVvIGNvbnRhaW5lciBhbmQgY2hyb21vc29tZSBzZXQgZGltZW5zaW9uc1xuICAgIHZhciBpZGVvQm94ID0gZDMuc2VsZWN0KGlkZW8uc2VsZWN0b3IpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgY2hyQm94ID0gY2hyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIC8vIEV2YWx1YXRlIGRpbWVuc2lvbnMgc2NhbGUgY29lZmZpY2llbnRzXG4gICAgdmFyIHNjYWxlWCA9IChpZGVvQm94LndpZHRoIC8gY2hyQm94LmhlaWdodCkgKiAwLjk3O1xuICAgIHZhciBzY2FsZVkgPSB0aGlzLl9nZXRZU2NhbGUoKTtcblxuICAgIC8vIEV2YWx1YXRlIHkgb2Zmc2V0IG9mIGNocm9tb3NvbWUuXG4gICAgLy8gSXQgaXMgZGlmZmVyZW50IGZvciBmaXJzdCBhbmQgdGhlIHNlY29uZCBvbmVcbiAgICB2YXIgeU9mZnNldCA9IHNldE51bWJlciA/IDE1MCA6IDI1O1xuXG4gICAgdmFyIHRyYW5zZm9ybSA9XG4gICAgICAndHJhbnNsYXRlKDE1LCAnICsgeU9mZnNldCArICcpIHNjYWxlKCcgKyBzY2FsZVggKyAnLCAnICsgc2NhbGVZICsgJyknO1xuXG4gICAgLy8gUnVuIHJvdGF0aW9uIHByb2NlZHVyZVxuICAgIGQzLnNlbGVjdChjaHJFbGVtZW50LnBhcmVudE5vZGUpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0pXG4gICAgICAub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBSdW4gY2FsbGJhY2sgZnVuY3Rpb24gaWYgcHJvdmlkZWRcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2xhdGVZID0gKDYgKiBOdW1iZXIoIXNldE51bWJlcikpO1xuXG4gICAgICAgIC8vIFJvdGF0ZSBiYW5kIGxhYmVsc1xuICAgICAgICBkMy5zZWxlY3QoY2hyRWxlbWVudC5wYXJlbnROb2RlKS5zZWxlY3RBbGwoJ2cuYmFuZExhYmVsIHRleHQnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAncm90YXRlKDkwKSB0cmFuc2xhdGUoMCwgJyArIHRyYW5zbGF0ZVkgKyAnKScpXG4gICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpO1xuXG4gICAgICAgIC8vIEhpZGUgc3ludGVuaWMgcmVnaW9uc1xuICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLnN5bnRlbmljUmVnaW9uJylcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgfSk7XG5cbiAgICAvLyBBcHBlbmQgbmV3IGNocm9tb3NvbWUgbGFiZWxzXG4gICAgdmFyIGxhYmVscyA9IHRoaXMuZ2V0Q2hyb21vc29tZUxhYmVscyhjaHJFbGVtZW50KTtcblxuICAgIGQzLnNlbGVjdCh0aGlzLl9pZGVvLmdldFN2ZygpKVxuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAndG1wJylcbiAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgLmRhdGEodGhpcy5nZXRDaHJvbW9zb21lTGFiZWxzKGNockVsZW1lbnQpKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4gaSA9PT0gMCAmJiBsYWJlbHMubGVuZ3RoID09PSAyID8gJ2NoclNldExhYmVsJyA6IG51bGw7XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ3gnLCAwKVxuICAgICAgLmF0dHIoJ3knLCB5T2Zmc2V0ICsgKHNlbGYuX2NvbmZpZy5jaHJXaWR0aCAqIHNjYWxlWCAvIDIpICogMS4xNSlcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAudGV4dChTdHJpbmcpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcbiAgfVxuXG4gIHJvdGF0ZUJhY2soc2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkZW8gPSB0aGlzLl9pZGVvO1xuXG4gICAgLy8gR2V0IGludGlhbCB0cmFuc2Zvcm1hdGlvbiBzdHJpbmcgZm9yIGNocm9tb3NvbWUgc2V0XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXMuZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZShzZXROdW1iZXIpO1xuXG4gICAgLy8gUnVuIHJvdGF0aW9uIHByb2NlZHVyZVxuICAgIGQzLnNlbGVjdChjaHJFbGVtZW50LnBhcmVudE5vZGUpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNsYXRlKVxuICAgICAgLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gUnVuIGNhbGxiYWNrIGZudWN0aW9uIGlmIHByb3ZpZGVkXG4gICAgICAgIGNhbGxiYWNrKCk7XG5cbiAgICAgICAgLy8gU2hvdyBzeW50ZW5pYyByZWdpb25zXG4gICAgICAgIGQzLnNlbGVjdEFsbChpZGVvLnNlbGVjdCArICcgLnN5bnRlbmljUmVnaW9uJylcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcblxuICAgICAgICAvLyBSZXNldCBjaGFuZ2VkIGF0dHJpYnV0ZXMgdG8gb3JpZ2luYWwgc3RhdGVcbiAgICAgICAgZDMuc2VsZWN0KGNockVsZW1lbnQucGFyZW50Tm9kZSkuc2VsZWN0QWxsKCdnLmJhbmRMYWJlbCB0ZXh0JylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgbnVsbClcbiAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCBzZXROdW1iZXIgPyBudWxsIDogJ2VuZCcpO1xuICAgICAgfSk7XG5cbiAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgZy50bXAnKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICAgIC5yZW1vdmUoKTtcbiAgfVxuXG4gIGdldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNockhlaWdodCArIHRoaXMuX21hcmdpbi5sZWZ0ICogMS41O1xuICB9XG5cbiAgZ2V0V2lkdGgoKSB7XG4gICAgcmV0dXJuICc5NyUnO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTEoY2hyTnVtYmVyKSB7XG4gICAgcmV0dXJuIGNock51bWJlciAlIDIgPyB0aGlzLl9jb25maWcuY2hyV2lkdGggOiB0aGlzLl9jb25maWcuY2hyV2lkdGggKiAyO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTIoY2hyTnVtYmVyKSB7XG4gICAgdmFyIHdpZHRoID0gdGhpcy5fY29uZmlnLmNocldpZHRoO1xuICAgIHJldHVybiBjaHJOdW1iZXIgJSAyID8gd2lkdGggLSB0aGlzLl90aWNrU2l6ZSA6IHdpZHRoICogMiArIHRoaXMuX3RpY2tTaXplO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRMYWJlbEFuY2hvcihjaHJOdW1iZXIpIHtcbiAgICByZXR1cm4gY2hyTnVtYmVyICUgMiA/IG51bGwgOiAnZW5kJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kTGFiZWxUcmFuc2xhdGUoYmFuZCwgY2hyTnVtYmVyKSB7XG4gICAgdmFyIHggPSBjaHJOdW1iZXIgJSAyID8gMTAgOiAtdGhpcy5fY29uZmlnLmNocldpZHRoIC0gMTA7XG4gICAgdmFyIHkgPSB0aGlzLl9pZGVvLnJvdW5kKGJhbmQucHguc3RhcnQgKyBiYW5kLnB4LndpZHRoIC8gMikgKyAzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHksXG4gICAgICB5OiB5LFxuICAgICAgdHJhbnNsYXRlOiAncm90YXRlKC05MCkgdHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSdcbiAgICB9O1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUxhYmVsWFBvc2l0aW9uKCkge1xuICAgIHJldHVybiAtdGhpcy5fdGlja1NpemU7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxYUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5jaHJXaWR0aCAvIC0yO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsVHJhbnNsYXRlKCkge1xuICAgIHJldHVybiAncm90YXRlKC05MCknO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZShzZXROdW1iZXIpIHtcbiAgICB2YXIgY2hyb21vc29tZVNldFlUcmFuc2xhdGUgPSB0aGlzLmdldENocm9tb3NvbWVTZXRZVHJhbnNsYXRlKHNldE51bWJlcik7XG4gICAgcmV0dXJuIChcbiAgICAgICdyb3RhdGUoOTApICcgK1xuICAgICAgJ3RyYW5zbGF0ZSgnICsgdGhpcy5fbWFyZ2luLmxlZnQgKyAnLCAtJyArIGNocm9tb3NvbWVTZXRZVHJhbnNsYXRlICsgJyknXG4gICAgKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRZVHJhbnNsYXRlKHNldE51bWJlcikge1xuICAgIHJldHVybiAyMDAgKiAoc2V0TnVtYmVyICsgMSk7XG4gIH1cblxufVxuXG5cblxuZXhwb3J0IGNsYXNzIFNtYWxsTGF5b3V0IGV4dGVuZHMgTGF5b3V0IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGlkZW8pIHtcbiAgICBzdXBlcihjb25maWcsIGlkZW8pO1xuXG4gICAgdGhpcy5fY2xhc3MgPSAnU21hbGxMYXlvdXQnO1xuXG4gICAgdGhpcy5fbWFyZ2luID0ge1xuICAgICAgbGVmdDogMzYuNSxcbiAgICAgIHRvcDogMTBcbiAgICB9O1xuICB9XG5cbiAgcm90YXRlRm9yd2FyZChzZXROdW1iZXIsIGNock51bWJlciwgY2hyRWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgaWRlb0JveCA9IGQzLnNlbGVjdCh0aGlzLl9pZGVvLnNlbGVjdG9yKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIGNockJveCA9IGNockVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB2YXIgc2NhbGVYID0gKGlkZW9Cb3gud2lkdGggLyBjaHJCb3guaGVpZ2h0KSAqIDAuOTc7XG4gICAgdmFyIHNjYWxlWSA9IHRoaXMuX2dldFlTY2FsZSgpO1xuXG4gICAgdHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSg1LCAyNSkgc2NhbGUoJyArIHNjYWxlWCArICcsICcgKyBzY2FsZVkgKyAnKSc7XG5cbiAgICBkMy5zZWxlY3QoY2hyRWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSlcbiAgICAgIC5vbignZW5kJywgY2FsbGJhY2spO1xuICB9XG5cbiAgcm90YXRlQmFjayhzZXROdW1iZXIsIGNock51bWJlciwgY2hyRWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgdHJhbnNsYXRlID0gdGhpcy5nZXRDaHJvbW9zb21lU2V0VHJhbnNsYXRlKHNldE51bWJlcik7XG5cbiAgICBkMy5zZWxlY3QoY2hyRWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZSlcbiAgICAgIC5vbignZW5kJywgY2FsbGJhY2spO1xuICB9XG5cbiAgZ2V0SGVpZ2h0KCkge1xuICAgIHZhciBjaHJIZWlnaHQgPSB0aGlzLl9jb25maWcuY2hySGVpZ2h0O1xuICAgIHJldHVybiB0aGlzLl9jb25maWcucm93cyAqIChjaHJIZWlnaHQgKyB0aGlzLl9tYXJnaW4udG9wICogMS41KTtcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIHJldHVybiAnOTclJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kTGFiZWxUcmFuc2xhdGUoKSB7XG5cbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFRyYW5zbGF0ZSgpIHtcbiAgICByZXR1cm4gJ3JvdGF0ZSgtOTApJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRUcmFuc2xhdGUoc2V0TnVtYmVyKSB7XG4gICAgLy8gR2V0IG9yZ2FuaXNtcyBpZCBsaXN0XG4gICAgdmFyIG9yZ2FuaXNtcyA9IFtdO1xuICAgIHRoaXMuX2lkZW8uZ2V0VGF4aWRzKGZ1bmN0aW9uKHRheElkTGlzdCkge1xuICAgICAgb3JnYW5pc21zID0gdGF4SWRMaXN0O1xuICAgIH0pO1xuICAgIC8vIEdldCBmaXJzdCBvcmdhbmlzbSBjaHJvbW9zb21lcyBhbW91bnRcbiAgICB2YXIgc2l6ZSA9IHRoaXMuX2lkZW8uY29uZmlnLmNocm9tb3NvbWVzW29yZ2FuaXNtc1swXV0ubGVuZ3RoO1xuICAgIC8vIEFtb3VudCBvZiBjaHJvbW9zb21lcyBwZXIgbnVtYmVyXG4gICAgdmFyIHJvd1NpemUgPSBzaXplIC8gdGhpcy5fY29uZmlnLnJvd3M7XG5cbiAgICB2YXIgeE9mZnNldDtcbiAgICB2YXIgeU9mZnNldDtcblxuICAgIGlmIChzZXROdW1iZXIgPiByb3dTaXplIC0gMSkge1xuICAgICAgeE9mZnNldCA9IHRoaXMuX21hcmdpbi5sZWZ0ICsgdGhpcy5fY29uZmlnLmNockhlaWdodCAqIDEuNDtcbiAgICAgIHlPZmZzZXQgPSB0aGlzLmdldENocm9tb3NvbWVTZXRZVHJhbnNsYXRlKHNldE51bWJlciAtIHJvd1NpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB4T2Zmc2V0ID0gdGhpcy5fbWFyZ2luLmxlZnQ7XG4gICAgICB5T2Zmc2V0ID0gdGhpcy5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShzZXROdW1iZXIpO1xuICAgIH1cblxuICAgIHJldHVybiAncm90YXRlKDkwKSB0cmFuc2xhdGUoJyArIHhPZmZzZXQgKyAnLCAtJyArIHlPZmZzZXQgKyAnKSc7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShzZXROdW1iZXIpIHtcbiAgICAvLyBHZXQgYWRkaXRpb25hbCBwYWRkaW5nIGNhdXNlZCBieSBhbm5vdGF0aW9uIHRyYWNrc1xuICAgIHZhciBhZGRpdGlvbmFsUGFkZGluZyA9IHRoaXMuX2dldEFkZGl0aW9uYWxPZmZzZXQoKTtcbiAgICAvLyBJZiBubyBkZXRhaWxlZCBkZXNjcmlwdGlvbiBwcm92aWRlZCBqdXN0IHVzZSBvbmUgZm9ybXVsYSBmb3IgYWxsIGNhc2VzXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX21hcmdpbi5sZWZ0ICogKHNldE51bWJlcikgKyB0aGlzLl9jb25maWcuY2hyV2lkdGggK1xuICAgICAgYWRkaXRpb25hbFBhZGRpbmcgKiAyICsgYWRkaXRpb25hbFBhZGRpbmcgKiBzZXROdW1iZXJcbiAgICApO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsWFBvc2l0aW9uKHNldE51bWJlcikge1xuICAgIHJldHVybiAoXG4gICAgICAoKHRoaXMuX3Bsb2lkeS5nZXRTZXRTaXplKHNldE51bWJlcikgKiB0aGlzLl9jb25maWcuY2hyV2lkdGggKyAyMCkgLyAtMikgK1xuICAgICAgKHRoaXMuX2NvbmZpZy5wbG9pZHkgPiAxID8gMCA6IHRoaXMuX2NvbmZpZy5jaHJXaWR0aClcbiAgICApO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUxhYmVsWFBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuY2hyV2lkdGggLyAtMjtcbiAgfVxuXG59XG5cblxuXG5cbmV4cG9ydCBjbGFzcyBWZXJ0aWNhbExheW91dCBleHRlbmRzIExheW91dCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnLCBpZGVvKSB7XG4gICAgc3VwZXIoY29uZmlnLCBpZGVvKTtcbiAgICB0aGlzLl9jbGFzcyA9ICdWZXJ0aWNhbExheW91dCc7XG4gICAgLy8gTGF5b3V0IG1hcmdpbnNcbiAgICB0aGlzLl9tYXJnaW4gPSB7XG4gICAgICB0b3A6IDMwLFxuICAgICAgbGVmdDogMTVcbiAgICB9O1xuICB9XG5cbiAgcm90YXRlRm9yd2FyZChzZXROdW1iZXIsIGNock51bWJlciwgY2hyRWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgeE9mZnNldCA9IDIwO1xuXG4gICAgdmFyIGlkZW9Cb3ggPSBkMy5zZWxlY3QodGhpcy5faWRlby5zZWxlY3Rvcikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBjaHJCb3ggPSBjaHJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgdmFyIHNjYWxlWCA9IChpZGVvQm94LndpZHRoIC8gY2hyQm94LmhlaWdodCkgKiAwLjk3O1xuICAgIHZhciBzY2FsZVkgPSB0aGlzLl9nZXRZU2NhbGUoKTtcblxuICAgIHZhciB0cmFuc2Zvcm0gPVxuICAgICAgJ3RyYW5zbGF0ZSgnICsgeE9mZnNldCArICcsIDI1KSBzY2FsZSgnICsgc2NhbGVYICsgJywgJyArIHNjYWxlWSArICcpJztcblxuICAgIGQzLnNlbGVjdChjaHJFbGVtZW50LnBhcmVudE5vZGUpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKVxuICAgICAgLm9uKCdlbmQnLCBjYWxsYmFjayk7XG5cbiAgICAvLyBBcHBlbmQgbmV3IGNocm9tb3NvbWUgbGFiZWxzXG4gICAgdmFyIGxhYmVscyA9IHRoaXMuZ2V0Q2hyb21vc29tZUxhYmVscyhjaHJFbGVtZW50KTtcbiAgICB2YXIgeSA9ICh4T2Zmc2V0ICsgc2VsZi5fY29uZmlnLmNocldpZHRoKSAqIDEuMztcbiAgICBkMy5zZWxlY3QodGhpcy5faWRlby5nZXRTdmcoKSlcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RtcCcpXG4gICAgICAuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgIC5kYXRhKGxhYmVscylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgcmV0dXJuIGkgPT09IDAgJiYgbGFiZWxzLmxlbmd0aCA9PT0gMiA/ICdjaHJTZXRMYWJlbCcgOiBudWxsO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgIC5hdHRyKCd5JywgeSkuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgICAgLnRleHQoU3RyaW5nKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG4gIH1cblxuICByb3RhdGVCYWNrKHNldE51bWJlciwgY2hyTnVtYmVyLFxuICAgICAgICAgICAgIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXMuZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZShzZXROdW1iZXIpO1xuXG4gICAgZDMuc2VsZWN0KGNockVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCB0cmFuc2xhdGUpXG4gICAgICAub24oJ2VuZCcsIGNhbGxiYWNrKTtcblxuICAgIGQzLnNlbGVjdEFsbCh0aGlzLl9pZGVvLnNlbGVjdG9yICsgJyBnLnRtcCcpXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgICAgLnJlbW92ZSgpO1xuICB9XG5cbiAgZ2V0SGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuY2hySGVpZ2h0ICsgdGhpcy5fbWFyZ2luLnRvcCAqIDEuNTtcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIHJldHVybiAnOTclJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kTGFiZWxUcmFuc2xhdGUoKSB7XG5cbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFRyYW5zbGF0ZSgpIHtcbiAgICByZXR1cm4gJ3JvdGF0ZSgtOTApJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRUcmFuc2xhdGUoc2V0TnVtYmVyKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHRoaXMuX21hcmdpbi50b3A7XG4gICAgdmFyIGNocm9tb3NvbWVTZXRZVHJhbnNsYXRlID0gdGhpcy5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShzZXROdW1iZXIpO1xuICAgIHJldHVybiAoXG4gICAgICAncm90YXRlKDkwKSAnICtcbiAgICAgICd0cmFuc2xhdGUoJyArIG1hcmdpblRvcCArICcsIC0nICsgY2hyb21vc29tZVNldFlUcmFuc2xhdGUgKyAnKSdcbiAgICApO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoc2V0TnVtYmVyKSB7XG4gICAgLy8gR2V0IGFkZGl0aW9uYWwgcGFkZGluZyBjYXVzZWQgYnkgYW5ub3RhdGlvbi9oaXN0b2dyYW0gdHJhY2tzXG4gICAgdmFyIHBhZCA9IHRoaXMuX2dldEFkZGl0aW9uYWxPZmZzZXQoKSxcbiAgICAgIG1hcmdpbiA9IHRoaXMuX2NvbmZpZy5jaHJNYXJnaW4sXG4gICAgICB3aWR0aCA9IHRoaXMuX2NvbmZpZy5jaHJXaWR0aCxcbiAgICAgIHRyYW5zbGF0ZTtcblxuICAgIC8vIElmIG5vIGRldGFpbGVkIGRlc2NyaXB0aW9uIHByb3ZpZGVkIGp1c3QgdXNlIG9uZSBmb3JtdWxhIGZvciBhbGwgY2FzZXNcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wbG9pZHlEZXNjKSB7XG4gICAgICAvLyBUT0RPOlxuICAgICAgLy8gVGhpcyBwYXJ0IG9mIGNvZGUgY29udGFpbnMgYSBsb3QgbWFnaWMgbnVtYmVycyBhbmQgaWZcbiAgICAgIC8vIHN0YXRlbWVudHMgZm9yIGV4YWN0bHkgY29ycmVzcG9uaW5nIHRvIG9yaWdpbmFsIGlkZW9ncmFtIGV4YW1wbGVzLlxuICAgICAgLy8gQnV0IGFsbCB0aGlzIHN0dWZmIHNob3VsZCBiZSByZW1vdmVkLiBDYWxjdWxhdGlvbiBvZiB0cmFuc2xhdGVcbiAgICAgIC8vIHNob3VsZCBiZSBhIHNpbXBsZSBmb3JtdWxhIGFwcGxpZWQgZm9yIGFsbCBjYXNlcyBsaXN0ZWQgYmVsb3cuXG4gICAgICAvLyBOb3cgdGhleSBhcmUgZGlmZmlyZW50IGJlY2F1c2Ugb2YgTGF5b3V0Ol9nZXRBZGRpdGlvbmFsT2Zmc2V0IGRvXG4gICAgICAvLyBub3QgbWVldCBmb3IgY2FzZXMgd2hlbiBubyBhbm5vdGF0aW9uLCB3aGVuIGFubm90YXRpb24gZXhpc3RzIGFuZFxuICAgICAgLy8gd2hlbiBoaXN0b2dyYW0gdXNlZFxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmFubm90YXRpb25zTGF5b3V0ID09PSAnaGlzdG9ncmFtJykge1xuICAgICAgICByZXR1cm4gbWFyZ2luIC8gMiArIHNldE51bWJlciAqIChtYXJnaW4gKyB3aWR0aCArIDIpICsgcGFkICogMiArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGUgPSB3aWR0aCArIHNldE51bWJlciAqIChtYXJnaW4gKyB3aWR0aCkgKyBwYWQgKiAyO1xuICAgICAgICBpZiAocGFkID4gMCkge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSArIDQgKyAoMiAqIHNldE51bWJlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBkZXRhaWxlZCBkZXNjcmlwdGlvbiBwcm92aWRlZCBzdGFydCB0byBjYWxjdWxhdGUgb2Zmc2V0c1xuICAgIC8vIGZvciBlYWNoIGNocm9tb3NvbWUgc2V0IHNlcGFyYXRlbHkuIFRoaXMgc2hvdWxkIGJlIGRvbmUgb25seSBvbmNlXG4gICAgaWYgKCF0aGlzLl90cmFuc2xhdGUpIHtcbiAgICAgIC8vIEZpcnN0IG9mZnNldCBlcXVhbHMgdG8gemVyb1xuICAgICAgdGhpcy5fdHJhbnNsYXRlID0gW3RoaXMuX3Bsb2lkeS5nZXRTZXRTaXplKDApICogd2lkdGggKiAyXTtcbiAgICAgIHZhciBwcmV2VHJhbnNsYXRlO1xuICAgICAgLy8gTG9vcCB0aHJvdWdoIGRlc2NyaXB0aW9uIHNldFxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLl9jb25maWcucGxvaWR5RGVzYy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcmV2VHJhbnNsYXRlID0gdGhpcy5fdHJhbnNsYXRlW2kgLSAxXTtcbiAgICAgICAgdGhpcy5fdHJhbnNsYXRlW2ldID0gcHJldlRyYW5zbGF0ZSArIHRoaXMuX2dldENocm9tb3NvbWVTZXRTaXplKGkgLSAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdHJhbnNsYXRlW3NldE51bWJlcl07XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxYUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuICh0aGlzLl9jb25maWcuY2hyV2lkdGggKiB0aGlzLl9jb25maWcucGxvaWR5KSAvIC0yO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUxhYmVsWFBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuY2hyV2lkdGggLyAtMjtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIE1vZGVsQWRhcHRlciB7XG5cbiAgY29uc3RydWN0b3IobW9kZWwpIHtcbiAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICAgIHRoaXMuX2NsYXNzID0gJ01vZGVsQWRhcHRlcic7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UobW9kZWwpIHtcbiAgICBpZiAobW9kZWwuYmFuZHMpIHtcbiAgICAgIHJldHVybiBuZXcgTW9kZWxBZGFwdGVyKG1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBNb2RlbE5vQmFuZHNBZGFwdGVyKG1vZGVsKTtcbiAgICB9XG4gIH1cblxuICBnZXRNb2RlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gIH1cblxuICBnZXRDc3NDbGFzcygpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vZGVsTm9CYW5kc0FkYXB0ZXIgZXh0ZW5kcyBNb2RlbEFkYXB0ZXIge1xuXG4gIGNvbnN0cnVjdG9yKG1vZGVsKSB7XG4gICAgc3VwZXIobW9kZWwpO1xuICAgIHRoaXMuX2NsYXNzID0gJ01vZGVsTm9CYW5kc0FkYXB0ZXInO1xuICB9XG5cbiAgZ2V0TW9kZWwoKSB7XG4gICAgdGhpcy5fbW9kZWwuYmFuZHMgPSBbXTtcblxuICAgICAgLy8gSWYgY2hyb21vc29tZSB3aWR0aCBtb3JlLCB0aGVuIDEgYWRkIHNpbmdsZSBiYW5kIHRvIGJhbmRzIGFycmF5XG4gICAgaWYgKHRoaXMuX21vZGVsLndpZHRoID4gMSkge1xuICAgICAgdGhpcy5fbW9kZWwuYmFuZHMucHVzaCh7XG4gICAgICAgIG5hbWU6ICdxJyxcbiAgICAgICAgcHg6IHtcbiAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICBzdG9wOiB0aGlzLl9tb2RlbC53aWR0aCxcbiAgICAgICAgICB3aWR0aDogdGhpcy5fbW9kZWwud2lkdGhcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgZ2V0Q3NzQ2xhc3MoKSB7XG4gICAgcmV0dXJuICdub0JhbmRzJztcbiAgfVxuXG59XG4iLCJleHBvcnQgY2xhc3MgUGxvaWR5IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5fZGVzY3JpcHRpb24gPSB0aGlzLl9ub3JtYWxpemUodGhpcy5fY29uZmlnLnBsb2lkeURlc2MpO1xuICB9XG5cbiAgLy8gR2V0IG51bWJlciBvZiBjaHJvbW9zb21lcyBpbiBhIGNocm9tb3NvbWUgc2V0XG4gIGdldENocm9tb3NvbWVzTnVtYmVyKHNldE51bWJlcikge1xuICAgIGlmICh0aGlzLl9jb25maWcucGxvaWR5RGVzYykge1xuICAgICAgdmFyIGNoclNldENvZGUgPSB0aGlzLl9jb25maWcucGxvaWR5RGVzY1tzZXROdW1iZXJdO1xuICAgICAgaWYgKGNoclNldENvZGUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGNoclNldENvZGUpWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaHJTZXRDb2RlLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbG9pZHkgfHwgMTtcbiAgICB9XG4gIH1cblxuICAvLyBOb3JtYWxpemUgdXNlIGRlZmluZWQgZGVzY3JpcHRpb25cbiAgX25vcm1hbGl6ZShkZXNjcmlwdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkLCBrZXksIGRlc2NWYWx1ZTtcblxuICAgIC8vIFJldHVybiB0aGUgc2FtZSBpZiBubyBkZXNjcmlwdGlvbiBwcm92aWRlZFxuICAgIGlmICghZGVzY3JpcHRpb24pIHtcbiAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICB9XG5cbiAgICAvLyBBcnJheSBvZiBub3JtYWxpemVkIGRlc2NyaXB0aW9uIG9iamVjdHNcbiAgICBub3JtYWxpemVkID0gW107XG5cbiAgICAvLyBMb29wIHRocm91Z2ggZGVzY3JpcHRpb24gYW5kIG5vcm1hbGl6ZVxuICAgIGZvciAoa2V5IGluIGRlc2NyaXB0aW9uKSB7XG4gICAgICBkZXNjVmFsdWUgPSBkZXNjcmlwdGlvbltrZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZXNjVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICBkZXNjVmFsdWUgPSBkZXNjVmFsdWUuc3BsaXQoJycpLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBub3JtYWxpemVkLnB1c2goe1xuICAgICAgICAgIGFuY2VzdG9yczogZGVzY1ZhbHVlLFxuICAgICAgICAgIGV4aXN0ZW5jZTogdGhpcy5fZ2V0ZXhpc3RlbmNlQXJyYXkoZGVzY1ZhbHVlLmxlbmd0aClcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtYWxpemVkLnB1c2goe1xuICAgICAgICAgIGFuY2VzdG9yczogT2JqZWN0LmtleXMoZGVzY1ZhbHVlKVswXSxcbiAgICAgICAgICBleGlzdGVuY2U6IGRlc2NWYWx1ZVtPYmplY3Qua2V5cyhkZXNjVmFsdWUpWzBdXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgfVxuXG4gIC8vIEdldCBhcnJheSBmaWxsZWQgYnkgJzExJyBlbGVtZW50c1xuICBfZ2V0ZXhpc3RlbmNlQXJyYXkobGVuZ3RoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJheS5wdXNoKCcxMScpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIGdldFNldFNpemUoY2hyU2V0TnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2Rlc2NyaXB0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb25bY2hyU2V0TnVtYmVyXS5hbmNlc3RvcnMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgYW5jZXN0b3IgbGV0dGVyXG4gIGdldEFuY2VzdG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2Rlc2NyaXB0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb25bY2hyU2V0TnVtYmVyXS5hbmNlc3RvcnNbY2hyTnVtYmVyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGlmIGNocm9tb3NvbWUncyBhcm0gc2hvdWxkIGJlIHJlbmRlcmVkLlxuICAvLyBJZiBubyBkZXNjcmlwdGlvbiB3YXMgcHJvdmlkZWQsIG1ldGhvZCByZXR1cm5zIHRydWUgYW5kXG4gIC8vIHNvbWV0aGluZyBhbm90aGVyIGRlcGVuZGluZyBvbiB1c2VyIHByb3ZpZGVkIGRlc2NyaXB0aW9uLlxuICBleGlzdHMoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcikge1xuICAgIGlmICh0aGlzLl9kZXNjcmlwdGlvbikge1xuICAgICAgdmFyIGRlc2MgPVxuICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbltjaHJTZXROdW1iZXJdLmV4aXN0ZW5jZVtjaHJOdW1iZXJdW2FybU51bWJlcl07XG4gICAgICByZXR1cm4gTnVtYmVyKGRlc2MpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbn1cbiIsImV4cG9ydCBjbGFzcyBSYW5nZSB7XG5cbiAgLyoqXG4gICogQ2hyb21vc29tZSByYW5nZS5cbiAgKiBAcHVibGljXG4gICogQGNsYXNzXG4gICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSByYW5nZSBkYXRhLlxuICAqIEBwYXJhbSB7SW50ZWdlcn0gZGF0YS5jaHIgLSBjaHJvbW9zb21lIGluZGV4LlxuICAqIEBwYXJhbSB7SW50ZWdlcltdfSBbZGF0YS5wbG9pZHldIC0gYXJyYXkgd2hpY2ggY29udHJvbHMgb24gd2hpY2ggY2hyb21vc29tZXMgcmFuZ2Ugc2hvdWxkIGFwcGVhciBpbiBjYXNlIG9mIHBsb2lkeS5cbiAgKiBAcGFyYW0ge0ludGVnZXJ9IGRhdGEuc3RhcnQgLSByYW5nZSBzdGFydC5cbiAgKiBAcGFyYW0ge0ludGVnZXJ9IGRhdGEuc3RvcCAtIHJhbmdlIGVuZC5cbiAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5jb2xvciAtIHJhbmdlIGNvbG9yLlxuICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH1cblxuICBnZXRTdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5zdGFydDtcbiAgfVxuXG4gIGdldFN0b3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuc3RvcDtcbiAgfVxuXG4gIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5zdG9wIC0gdGhpcy5fZGF0YS5zdGFydDtcbiAgfVxuXG4gIGdldENvbG9yKGNock51bWJlcikge1xuICAgIGlmICghKCdwbG9pZHknIGluIHRoaXMuX2RhdGEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0Q29sb3IoY2hyTnVtYmVyKTtcbiAgICB9IGVsc2UgaWYgKCdwbG9pZHknIGluIHRoaXMuX2RhdGEgJiYgdGhpcy5fZGF0YS5wbG9pZHlbY2hyTnVtYmVyXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldENvbG9yKGNock51bWJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAndHJhbnNwYXJlbnQnO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRDb2xvcihjaHJOdW1iZXIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9kYXRhLmNvbG9yKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuY29sb3JbY2hyTnVtYmVyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuY29sb3I7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuLy8gQ2hyb21vc29tZSdzIHZpZXcgdXRpbGl0eSBjbGFzc1xuZXhwb3J0IGNsYXNzIENocm9tb3NvbWVVdGlsIHtcblxuICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIH1cblxuICBnZXRMYWJlbCgpIHtcbiAgICB2YXIgbGFiZWwgPVxuICAgICAgZDNcbiAgICAgICAgLnNlbGVjdCh0aGlzLl9ub2RlKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0LmNockxhYmVsJylcbiAgICAgICAgLnRleHQoKTtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICAvLyBHZXQgY2hyb21vc29tZSBzZXQgbGFiZWxcbiAgZ2V0U2V0TGFiZWwoKSB7XG4gICAgdmFyIHNldExhYmVsID1cbiAgICAgIGQzXG4gICAgICAgIC5zZWxlY3QodGhpcy5fbm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0LmNocm9tb3NvbWUtc2V0LWxhYmVsJylcbiAgICAgICAgLnRleHQoKTtcbiAgICByZXR1cm4gc2V0TGFiZWw7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29sb3J9IGZyb20gJy4vLi4vY29sb3InO1xuaW1wb3J0IHtSYW5nZX0gZnJvbSAnLi8uLi9yYW5nZSc7XG5cbmV4cG9ydCBjbGFzcyBDaHJvbW9zb21lIHtcblxuICBjb25zdHJ1Y3RvcihhZGFwdGVyLCBjb25maWcsIGlkZW8pIHtcbiAgICB0aGlzLl9hZGFwdGVyID0gYWRhcHRlcjtcbiAgICB0aGlzLl9tb2RlbCA9IHRoaXMuX2FkYXB0ZXIuZ2V0TW9kZWwoKTtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5faWRlbyA9IGlkZW87XG4gICAgdGhpcy5fY29sb3IgPSBuZXcgQ29sb3IodGhpcy5fY29uZmlnKTtcbiAgICB0aGlzLl9idW1wQ29lZmZpY2llbnQgPSA1O1xuICB9XG5cbiAgLy8gRmFjdG9yeSBtZXRob2RcbiAgc3RhdGljIGdldEluc3RhbmNlKGFkYXB0ZXIsIGNvbmZpZywgaWRlbykge1xuICAgIGlmIChhZGFwdGVyLmdldE1vZGVsKCkuY2VudHJvbWVyZVBvc2l0aW9uID09PSAndGVsb2NlbnRyaWMnKSB7XG4gICAgICByZXR1cm4gbmV3IFRlbG9jZW50cmljQ2hyb21vc29tZShhZGFwdGVyLCBjb25maWcsIGlkZW8pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE1ldGFjZW50cmljQ2hyb21vc29tZShhZGFwdGVyLCBjb25maWcsIGlkZW8pO1xuICAgIH1cbiAgfTtcblxuICBfYWRkUEFybVNoYXBlKGNsaXBQYXRoLCBpc1BBcm1SZW5kZXJlZCkge1xuICAgIGlmIChpc1BBcm1SZW5kZXJlZCkge1xuICAgICAgcmV0dXJuIGNsaXBQYXRoLmNvbmNhdCh0aGlzLl9nZXRQQXJtU2hhcGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjbGlwUGF0aDtcbiAgICB9XG4gIH07XG5cbiAgX2FkZFFBcm1TaGFwZShjbGlwUGF0aCwgaXNRQXJtUmVuZGVyZWQpIHtcbiAgICBpZiAoaXNRQXJtUmVuZGVyZWQpIHtcbiAgICAgIHJldHVybiBjbGlwUGF0aC5jb25jYXQodGhpcy5fZ2V0UUFybVNoYXBlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2xpcFBhdGg7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcihjb250YWluZXIsIGNoclNldE51bWJlciwgY2hyTnVtYmVyKSB7XG4gICAgICAvLyBBcHBlbmQgYmFuZHMgY29udGFpbmVyIGFuZCBhcHBseSBjbGlwLXBhdGggb24gaXRcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JhbmRzJylcbiAgICAgIC5hdHRyKFwiY2xpcC1wYXRoXCIsIFwidXJsKCNcIiArIHRoaXMuX21vZGVsLmlkICsgXCItY2hyb21vc29tZS1zZXQtY2xpcHBhdGgpXCIpO1xuXG4gICAgICAvLyBSZW5kZXIgY2hyb21vc29tZSBhcm1zXG4gICAgdmFyIGlzUEFybVJlbmRlcmVkID0gdGhpcy5fcmVuZGVyUEFybShjb250YWluZXIsIGNoclNldE51bWJlciwgY2hyTnVtYmVyKTtcbiAgICB2YXIgaXNRQXJtUmVuZGVyZWQgPSB0aGlzLl9yZW5kZXJRQXJtKGNvbnRhaW5lciwgY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIpO1xuXG4gICAgICAvLyBSZW5kZXIgcmFuZ2Ugc2V0XG4gICAgdGhpcy5fcmVuZGVyUmFuZ2VTZXQoY29udGFpbmVyLCBjaHJTZXROdW1iZXIsIGNock51bWJlcik7XG5cbiAgICAgIC8vIFB1c2ggYXJtcyBzaGFwZSBzdHJpbmcgaW50byBjbGlwUGF0aCBhcnJheVxuICAgIHZhciBjbGlwUGF0aCA9IFtdO1xuICAgIGNsaXBQYXRoID0gdGhpcy5fYWRkUEFybVNoYXBlKGNsaXBQYXRoLCBpc1BBcm1SZW5kZXJlZCk7XG4gICAgY2xpcFBhdGggPSB0aGlzLl9hZGRRQXJtU2hhcGUoY2xpcFBhdGgsIGlzUUFybVJlbmRlcmVkKTtcblxuICAgIHZhciBvcGFjaXR5ID0gJzAnO1xuICAgIHZhciBmaWxsID0gJyc7XG4gICAgdmFyIGlzRnVsbHlCYW5kZWQgPSB0aGlzLmlzRnVsbHlCYW5kZWQoKTtcbiAgICBpZiAoJ2FuY2VzdG9ycycgaW4gdGhpcy5faWRlby5jb25maWcgJiYgISgncmFuZ2VTZXQnIGluIHRoaXMuX2lkZW8uY29uZmlnKSkge1xuICAgICAgLy8gRS5nLiBkaXBsb2lkIGh1bWFuIGdlbm9tZSAod2l0aCB0cmFuc2x1Y2VudCBvdmVybGF5KVxuICAgICAgZmlsbCA9IHNlbGYuX2NvbG9yLmdldEFybUNvbG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCAwKTtcbiAgICAgIGlmIChpc0Z1bGx5QmFuZGVkKSB7XG4gICAgICAgIG9wYWNpdHkgPSAnMC41JztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRnVsbHlCYW5kZWQpIHtcbiAgICAgIC8vIEUuZy4gbW91c2UgcmVmZXJlbmNlIGdlbm9tZVxuICAgICAgb3BhY2l0eSA9IG51bGw7XG4gICAgICBmaWxsID0gJ3RyYW5zcGFyZW50JztcbiAgICB9IGVsc2UgaWYgKCEoJ2FuY2VzdG9ycycgaW4gdGhpcy5faWRlby5jb25maWcpKSB7XG4gICAgICAvLyBFLmcuIGNoaW1wYW56ZWUgYXNzZW1ibHkgUGFuX3RybyAzLjBcbiAgICAgIG9wYWNpdHkgPSAnMSc7XG4gICAgfVxuXG4gICAgLy8gUmVuZGVyIGNocm9tb3NvbWUgYm9yZGVyXG4gICAgY29udGFpbmVyLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnY2hyb21vc29tZS1ib3JkZXInKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YShjbGlwUGF0aClcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdmaWxsJywgZmlsbClcbiAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5Jywgb3BhY2l0eSlcbiAgICAgIC5hdHRyKCdzdHJva2UnLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9jb2xvci5nZXRCb3JkZXJDb2xvcihjaHJTZXROdW1iZXIsIGNock51bWJlciwgaSk7XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuICgnc3Ryb2tlV2lkdGgnIGluIGQgPyBkLnN0cm9rZVdpZHRoIDogMSk7XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLnBhdGg7XG4gICAgICB9KS5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuY2xhc3M7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBjbGlwUGF0aDtcbiAgfTtcblxuICBfcmVuZGVyUmFuZ2VTZXQoY29udGFpbmVyLCBjaHJTZXROdW1iZXIsIGNock51bWJlcikge1xuICAgIGlmICghKCdyYW5nZVNldCcgaW4gdGhpcy5fY29uZmlnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByYW5nZVNldCA9IHRoaXMuX2NvbmZpZy5yYW5nZVNldC5maWx0ZXIoZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgIHJldHVybiByYW5nZS5jaHIgLSAxID09PSBjaHJTZXROdW1iZXI7XG4gICAgfSkubWFwKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHJhbmdlKTtcbiAgICB9KTtcblxuICAgIHZhciByYW5nZXNDb250YWluZXIgPSBjb250YWluZXIuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAncmFuZ2Utc2V0Jyk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGlkZW8gPSBzZWxmLl9pZGVvO1xuICAgIHZhciBiYW5kc1hPZmZzZXQgPSBpZGVvLl9iYW5kc1hPZmZzZXQ7XG5cbiAgICByYW5nZXNDb250YWluZXIuc2VsZWN0QWxsKCdyZWN0LnJhbmdlJylcbiAgICAgIC5kYXRhKHJhbmdlU2V0KVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3JhbmdlJylcbiAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgdmFyIHN0YXJ0UHggPSBpZGVvLmNvbnZlcnRCcFRvUHgoc2VsZi5fbW9kZWwsIHJhbmdlLmdldFN0YXJ0KCkpO1xuICAgICAgICByZXR1cm4gc3RhcnRQeCAtIGJhbmRzWE9mZnNldDtcbiAgICAgIH0pLmF0dHIoJ3knLCAwKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgdmFyIGxlbmd0aFB4ID0gaWRlby5jb252ZXJ0QnBUb1B4KHNlbGYuX21vZGVsLCByYW5nZS5nZXRMZW5ndGgoKSk7XG4gICAgICAgIHJldHVybiBsZW5ndGhQeCAtIGJhbmRzWE9mZnNldDtcbiAgICAgIH0pLmF0dHIoJ2hlaWdodCcsIHRoaXMuX2NvbmZpZy5jaHJXaWR0aClcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiByYW5nZS5nZXRDb2xvcihjaHJOdW1iZXIpO1xuICAgICAgfSk7XG4gIH07XG5cbiAgLy8gR2V0IGNocm9tb3NvbWUncyBzaGFwZSBtYWluIHZhbHVlc1xuICBfZ2V0U2hhcGVEYXRhKCkge1xuICAgICAgLy8gRmlyc3QgcSBiYW5kIGZyb20gYmFuZHMgc2VxdWVuY2VcbiAgICB2YXIgZmlyc3RRQmFuZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX21vZGVsLmJhbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fbW9kZWwuYmFuZHNbaV0ubmFtZVswXSA9PT0gJ3EnKSB7XG4gICAgICAgIGZpcnN0UUJhbmQgPSB0aGlzLl9tb2RlbC5iYW5kc1tpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hyb21vc29tZSdzIHJpZ2h0IHBvc2l0aW9uXG4gICAgdmFyIGxhc3RCYW5kID0gdGhpcy5fbW9kZWwuYmFuZHMubGVuZ3RoIC0gMTtcbiAgICB2YXIgcmlnaHRUZXJtaW5hbFBvc2l0aW9uID0gdGhpcy5fbW9kZWwuYmFuZHNbbGFzdEJhbmRdLnB4LnN0b3A7XG5cbiAgICAgIC8vIFByb3BlcnRpZXMgZGVzY3JpcHRpb246XG4gICAgICAvLyB4MSAtIGxlZnQgdGVybWluYWwgc3RhcnQgcG9zaXRpb25cbiAgICAgIC8vIHgyIC0gY2VudHJvbWVyZSBwb3NpdGlvblxuICAgICAgLy8geDMgLSByaWdodCB0ZXJtaW5hbCBlbmQgcG9zaXRpb25cbiAgICAgIC8vIHcgLSBjaHJvbW9zb21lIHdpZHRoXG4gICAgICAvLyBiIC0gYnVtcCBzaXplXG4gICAgcmV0dXJuIHtcbiAgICAgIHgxOiAwLFxuICAgICAgeDI6IGZpcnN0UUJhbmQgPyBmaXJzdFFCYW5kLnB4LnN0YXJ0IDogcmlnaHRUZXJtaW5hbFBvc2l0aW9uLFxuICAgICAgeDM6IHJpZ2h0VGVybWluYWxQb3NpdGlvbixcbiAgICAgIHc6IHRoaXMuX2NvbmZpZy5jaHJXaWR0aCxcbiAgICAgIGI6IHRoaXMuX2NvbmZpZy5jaHJXaWR0aCAvIHRoaXMuX2J1bXBDb2VmZmljaWVudFxuICAgIH07XG4gIH07XG5cbiAgX2dldFBBcm1TaGFwZSgpIHtcbiAgICB2YXIgZCA9IHRoaXMuX2dldFNoYXBlRGF0YSgpLFxuICAgICAgeCA9IGQueDIgLSBkLmI7XG5cbiAgICBpZiAodGhpcy5pc0Z1bGx5QmFuZGVkKCkgfHwgJ2FuY2VzdG9ycycgaW4gdGhpcy5faWRlby5jb25maWcpIHtcbiAgICAgIC8vIEVuY291bnRlcmVkIHdoZW4gY2hyb21vc29tZSBoYXMgYW55IG9mOlxuICAgICAgLy8gIC0gT25lIHBsYWNlaG9sZGVyIFwiYmFuZFwiLCBlLmcuIHBpZyBnZW5vbWUgR0NGXzAwMDAwMzAyNS41XG4gICAgICAvLyAgLSBNYW55ICg+IDIpIGJhbmRzLCBlLmcuIGh1bWFuIHJlZmVyZW5jZSBnZW5vbWVcbiAgICAgIC8vICAtIEFuY2VzdG9yIGNvbG9ycyBpbiBwbG9pZHkgY29uZmlndXJhdGlvbiwgYXMgaW4gcGxvaWR5X2Jhc2ljLmh0bWxcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNsYXNzOiAnJyxcbiAgICAgICAgcGF0aDpcbiAgICAgICAgICAnTScgKyBkLmIgKyAnLDAgJyArXG4gICAgICAgICAgJ0wnICsgeCArICcsMCAnICtcbiAgICAgICAgICAnUScgKyAoZC54MiArIGQuYikgKyAnLCcgKyAoZC53IC8gMikgKyAnLCcgKyB4ICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICAgICAnTCcgKyBkLmIgKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgICAgICdRLScgKyBkLmIgKyAnLCcgKyAoZC53IC8gMikgKyAnLCcgKyBkLmIgKyAnLDAnXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlLmcuIGNoaW1wYW56ZWUgYXNzZW1ibHkgUGFuX3RybyAzLjBcbiAgICAgIHJldHVybiBbe1xuICAgICAgICBjbGFzczogJycsXG4gICAgICAgIHBhdGg6XG4gICAgICAgICAgJ00nICsgZC5iICsgJywwICcgK1xuICAgICAgICAgICdMJyArICh4IC0gMikgKyAnLDAgJyArXG4gICAgICAgICAgJ0wnICsgKHggLSAyKSArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgZC5iICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICAgICAnUS0nICsgZC5iICsgJywnICsgKGQudyAvIDIpICsgJywnICsgZC5iICsgJywwJ1xuICAgICAgfSwge1xuICAgICAgICBjbGFzczogJ2FjZW4nLFxuICAgICAgICBwYXRoOlxuICAgICAgICAgICdNJyArIHggKyAnLDAgJyArXG4gICAgICAgICAgJ1EnICsgKGQueDIgKyBkLmIpICsgJywnICsgKGQudyAvIDIpICsgJywnICsgeCArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgeCArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgKHggLSAyKSArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgKHggLSAyKSArICcsMCdcbiAgICAgIH1dO1xuICAgIH1cbiAgfTtcblxuICBfZ2V0UUFybVNoYXBlKCkge1xuICAgIHZhciBkID0gdGhpcy5fZ2V0U2hhcGVEYXRhKCksXG4gICAgICB4ID0gZC54MyAtIGQuYixcbiAgICAgIHgyYiA9IGQueDIgKyBkLmI7XG5cbiAgICBpZiAodGhpcy5pc0Z1bGx5QmFuZGVkKCkgfHwgJ2FuY2VzdG9ycycgaW4gdGhpcy5faWRlby5jb25maWcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNsYXNzOiAnJyxcbiAgICAgICAgcGF0aDpcbiAgICAgICAgICAnTScgKyB4MmIgKyAnLDAgJyArXG4gICAgICAgICAgJ0wnICsgeCArICcsMCAnICtcbiAgICAgICAgICAnUScgKyAoZC54MyArIGQuYikgKyAnLCcgKyAoZC53IC8gMikgKyAnLCcgKyB4ICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICAgICAnTCcgKyB4MmIgKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgICAgICdRJyArIChkLngyIC0gZC5iKSArICcsJyArIChkLncgLyAyKSArICcsJyArIHgyYiArICcsMCdcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGUuZy4gY2hpbXBhbnplZSBhc3NlbWJseSBQYW5fdHJvIDMuMFxuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHBhdGg6XG4gICAgICAgICAgJ00nICsgeDJiICsgJywwICcgK1xuICAgICAgICAgICdMJyArIHggKyAnLDAgJyArXG4gICAgICAgICAgJ1EnICsgKGQueDMgKyBkLmIpICsgJywnICsgKGQudyAvIDIpICsgJywnICsgeCArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgeDJiICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICAgICAnTCcgKyB4MmIgKyAnLDAnXG4gICAgICB9LCB7XG4gICAgICAgIGNsYXNzOiAnYWNlbicsXG4gICAgICAgIHBhdGg6XG4gICAgICAgICAgJ00nICsgeDJiICsgJywwJyArXG4gICAgICAgICAgJ1EnICsgKGQueDIgLSBkLmIpICsgJywnICsgKGQudyAvIDIpICsgJywnICsgeDJiICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICAgICAnTCcgKyB4MmIgKyAnLCcgKyBkLncgK1xuICAgICAgICAgICdMJyArICh4MmIgKyAyKSArICcsJyArIGQudyArXG4gICAgICAgICAgJ0wnICsgKHgyYiArIDIpICsgJywwJ1xuICAgICAgfV07XG4gICAgfVxuICB9O1xuXG4gIGlzRnVsbHlCYW5kZWQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX21vZGVsLmJhbmRzICYmXG4gICAgICAodGhpcy5fbW9kZWwuYmFuZHMubGVuZ3RoICE9PSAyIHx8IHRoaXMuX21vZGVsLmJhbmRzWzBdLm5hbWVbMF0gPT09ICdxJylcbiAgICApO1xuICB9O1xuXG4gIC8vIFJlbmRlciBhcm0gYmFuZHNcbiAgX3JlbmRlckJhbmRzKGNvbnRhaW5lciwgY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGJhbmRzLCBhcm0pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFybU51bWJlciA9IGFybSA9PT0gJ3AnID8gMCA6IDE7XG4gICAgdmFyIGZpbGwgPSAnJztcbiAgICBpZiAoJ2FuY2VzdG9ycycgaW4gdGhpcy5faWRlby5jb25maWcgJiYgISh0aGlzLmlzRnVsbHlCYW5kZWQoKSkpIHtcbiAgICAgIGZpbGwgPSBzZWxmLl9jb2xvci5nZXRBcm1Db2xvcihjaHJTZXROdW1iZXIsIGNock51bWJlciwgYXJtTnVtYmVyKTtcbiAgICB9XG5cbiAgICBjb250YWluZXIuc2VsZWN0QWxsKFwicGF0aC5iYW5kLlwiICsgYXJtKVxuICAgICAgLmRhdGEoYmFuZHMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgIC5hdHRyKFwiaWRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gc2VsZi5fbW9kZWwuaWQgKyBcIi1cIiArIGQubmFtZS5yZXBsYWNlKFwiLlwiLCBcIi1cIik7XG4gICAgICB9KVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiAnYmFuZCAnICsgYXJtICsgJy1iYW5kICcgKyBkLnN0YWluO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwiZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHNlbGYuX2lkZW8ucm91bmQoZC5weC5zdGFydCk7XG4gICAgICAgIHZhciBsZW5ndGggPSBzZWxmLl9pZGVvLnJvdW5kKGQucHgud2lkdGgpO1xuXG4gICAgICAgIHZhciB4ID0gc3RhcnQgKyBsZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIFwiTSBcIiArIHN0YXJ0ICsgXCIsIDBcIiArXG4gICAgICAgICAgICAgIFwibCBcIiArIGxlbmd0aCArIFwiIDAgXCIgK1xuICAgICAgICAgICAgICBcImwgMCBcIiArIHNlbGYuX2NvbmZpZy5jaHJXaWR0aCArIFwiIFwiICtcbiAgICAgICAgICAgICAgXCJsIC1cIiArIGxlbmd0aCArIFwiIDAgelwiO1xuICAgICAgfSlcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGZpbGwpO1xuICB9O1xuXG4gIC8vIFJlbmRlciBjaHJvbW9zb21lJ3MgcCBhcm0uXG4gIC8vIFJldHVybnMgYm9vbGVhbiB3aGljaCBpbmRpY2F0ZXMgaXMgYW55IGJhbmRzIHdhcyByZW5kZXJlZFxuICBfcmVuZGVyUEFybShjb250YWluZXIsIGNoclNldE51bWJlciwgY2hyTnVtYmVyKSB7XG4gICAgdmFyIGJhbmRzID0gdGhpcy5fbW9kZWwuYmFuZHMuZmlsdGVyKGZ1bmN0aW9uKGJhbmQpIHtcbiAgICAgIHJldHVybiBiYW5kLm5hbWVbMF0gPT09ICdwJztcbiAgICB9KTtcblxuICAgIHRoaXMuX3JlbmRlckJhbmRzKGNvbnRhaW5lciwgY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGJhbmRzLCAncCcpO1xuXG4gICAgcmV0dXJuIEJvb2xlYW4oYmFuZHMubGVuZ3RoKTtcbiAgfTtcblxuICAvLyBSZW5kZXIgY2hyb21vc29tZSdzIHEgYXJtLlxuICAvLyBSZXR1cm5zIGJvb2xlYW4gd2hpY2ggaW5kaWNhdGVzIGlzIGFueSBiYW5kcyB3YXMgcmVuZGVyZWRcbiAgX3JlbmRlclFBcm0oY29udGFpbmVyLCBjaHJTZXROdW1iZXIsIGNock51bWJlcikge1xuICAgIHZhciBiYW5kcyA9IHRoaXMuX21vZGVsLmJhbmRzLmZpbHRlcihmdW5jdGlvbihiYW5kKSB7XG4gICAgICByZXR1cm4gYmFuZC5uYW1lWzBdID09PSAncSc7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZW5kZXJCYW5kcyhjb250YWluZXIsIGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBiYW5kcywgJ3EnKTtcblxuICAgIHJldHVybiBCb29sZWFuKGJhbmRzLmxlbmd0aCk7XG4gIH07XG59XG5cblxuXG5leHBvcnQgY2xhc3MgTWV0YWNlbnRyaWNDaHJvbW9zb21lIGV4dGVuZHMgQ2hyb21vc29tZSB7XG5cbiAgY29uc3RydWN0b3IobW9kZWwsIGNvbmZpZywgaWRlbykge1xuICAgIHN1cGVyKG1vZGVsLCBjb25maWcsIGlkZW8pO1xuICAgIHRoaXMuX2NsYXNzID0gJ01ldGFjZW50cmljQ2hyb21vc29tZSc7XG4gIH1cbn1cblxuXG5cbmV4cG9ydCBjbGFzcyBUZWxvY2VudHJpY0Nocm9tb3NvbWUgZXh0ZW5kcyBDaHJvbW9zb21lIHtcblxuICBjb25zdHJ1Y3Rvcihtb2RlbCwgY29uZmlnLCBpZGVvKSB7XG4gICAgc3VwZXIobW9kZWwsIGNvbmZpZywgaWRlbyk7XG4gICAgdGhpcy5fY2xhc3MgPSAnVGVsb2NlbnRyaWNDaHJvbW9zb21lJztcbiAgICB0aGlzLl9wQXJtT2Zmc2V0ID0gMztcbiAgfVxuXG4gIF9hZGRQQXJtU2hhcGUoY2xpcFBhdGgpIHtcbiAgICByZXR1cm4gY2xpcFBhdGguY29uY2F0KHRoaXMuX2dldFBBcm1TaGFwZSgpKTtcbiAgfTtcblxuICBfZ2V0UEFybVNoYXBlKCkge1xuICAgIHZhciBkID0gdGhpcy5fZ2V0U2hhcGVEYXRhKCk7XG4gICAgZC5vID0gdGhpcy5fcEFybU9mZnNldDtcblxuICAgIHJldHVybiBbe1xuICAgICAgY2xhc3M6ICdhY2VuJyxcbiAgICAgIHBhdGg6ICdNJyArIChkLngyICsgMikgKyAnLDEnICtcbiAgICAgICdMJyArIChkLngyICsgZC5vICsgMy4yNSkgKyAnLDEgJyArXG4gICAgICAnTCcgKyAoZC54MiArIGQubyArIDMuMjUpICsgJywnICsgKGQudyAtIDEpICsgJyAnICtcbiAgICAgICdMJyArIChkLngyICsgMikgKyAnLCcgKyAoZC53IC0gMSlcbiAgICB9LCB7XG4gICAgICBjbGFzczogJ2dwb3M2NicsXG4gICAgICBwYXRoOiAnTScgKyAoZC54MiAtIGQubyArIDUpICsgJywwJyArXG4gICAgICAnTCcgKyAoZC54MiAtIGQubyArIDMpICsgJywwICcgK1xuICAgICAgJ0wnICsgKGQueDIgLSBkLm8gKyAzKSArICcsJyArIGQudyArICcgJyArXG4gICAgICAnTCcgKyAoZC54MiAtIGQubyArIDUpICsgJywnICsgZC53LFxuICAgICAgc3Ryb2tlV2lkdGg6IDAuNVxuICAgIH1dO1xuICB9O1xuXG4gIF9nZXRRQXJtU2hhcGUoKSB7XG4gICAgdmFyIGQgPSB0aGlzLl9nZXRTaGFwZURhdGEoKSxcbiAgICAgIHggPSBkLngzIC0gZC5iLFxuICAgICAgbyA9IHRoaXMuX3BBcm1PZmZzZXQgKyAzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzOiAnJyxcbiAgICAgIHBhdGg6XG4gICAgICAnTScgKyAoZC54MiArIG8pICsgJywwICcgK1xuICAgICAgJ0wnICsgeCArICcsMCAnICtcbiAgICAgICdRJyArIChkLngzICsgZC5iKSArICcsJyArIChkLncgLyAyKSArICcsJyArIHggKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgJ0wnICsgKGQueDIgKyBvKSArICcsJyArIGQud1xuICAgIH07XG4gIH07XG59XG4iXX0="}