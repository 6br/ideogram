{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/d3/build/d3.js","src/js/color.js","src/js/core.js","src/js/index.js","src/js/layouts/layout.js","src/js/model-adapter.js","src/js/ploidy.js","src/js/views/chromosome-util.js","src/js/views/chromosome.js"],"names":[],"mappings":"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","file":"ideogram.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// https://d3js.org Version 4.1.1. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var version = \"4.1.1\";\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;\n          else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;\n          else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n\n  function ascendingComparator(f) {\n    return function(d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  var bisectLeft = ascendingBisect.left;\n\n  function descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function number(x) {\n    return x === null ? NaN : +x;\n  }\n\n  function variance(array, f) {\n    var n = array.length,\n        m = 0,\n        a,\n        d,\n        s = 0,\n        i = -1,\n        j = 0;\n\n    if (f == null) {\n      while (++i < n) {\n        if (!isNaN(a = number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    else {\n      while (++i < n) {\n        if (!isNaN(a = number(f(array[i], i, array)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    if (j > 1) return s / (j - 1);\n  }\n\n  function deviation(array, f) {\n    var v = variance(array, f);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  function extent(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b,\n        c;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    return [a, c];\n  }\n\n  var array = Array.prototype;\n\n  var slice = array.slice;\n  var map = array.map;\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function identity(x) {\n    return x;\n  }\n\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  var e10 = Math.sqrt(50);\n  var e5 = Math.sqrt(10);\n  var e2 = Math.sqrt(2);\n  function ticks(start, stop, count) {\n    var step = tickStep(start, stop, count);\n    return range(\n      Math.ceil(start / step) * step,\n      Math.floor(stop / step) * step + step / 2, // inclusive\n      step\n    );\n  }\n\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;\n    else if (error >= e5) step1 *= 5;\n    else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  function sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n  }\n\n  function histogram() {\n    var value = identity,\n        domain = extent,\n        threshold = sturges;\n\n    function histogram(data) {\n      var i,\n          n = data.length,\n          x,\n          values = new Array(n);\n\n      for (i = 0; i < n; ++i) {\n        values[i] = value(data[i], i, data);\n      }\n\n      var xz = domain(values),\n          x0 = xz[0],\n          x1 = xz[1],\n          tz = threshold(values, x0, x1);\n\n      // Convert number of thresholds into uniform thresholds.\n      if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);\n\n      // Remove any thresholds outside the domain.\n      var m = tz.length;\n      while (tz[0] <= x0) tz.shift(), --m;\n      while (tz[m - 1] >= x1) tz.pop(), --m;\n\n      var bins = new Array(m + 1),\n          bin;\n\n      // Initialize bins.\n      for (i = 0; i <= m; ++i) {\n        bin = bins[i] = [];\n        bin.x0 = i > 0 ? tz[i - 1] : x0;\n        bin.x1 = i < m ? tz[i] : x1;\n      }\n\n      // Assign data to bins by value, ignoring any outside the domain.\n      for (i = 0; i < n; ++i) {\n        x = values[i];\n        if (x0 <= x && x <= x1) {\n          bins[bisectRight(tz, x, 0, m)].push(data[i]);\n        }\n      }\n\n      return bins;\n    }\n\n    histogram.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n    };\n\n    histogram.domain = function(_) {\n      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n    };\n\n    histogram.thresholds = function(_) {\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n    };\n\n    return histogram;\n  }\n\n  function threshold(array, p, f) {\n    if (f == null) f = number;\n    if (!(n = array.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);\n    if (p >= 1) return +f(array[n - 1], n - 1, array);\n    var n,\n        h = (n - 1) * p,\n        i = Math.floor(h),\n        a = +f(array[i], i, array),\n        b = +f(array[i + 1], i + 1, array);\n    return a + (b - a) * (h - i);\n  }\n\n  function freedmanDiaconis(values, min, max) {\n    values = map.call(values, number).sort(ascending);\n    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function scott(values, min, max) {\n    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function max(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;\n    }\n\n    return a;\n  }\n\n  function mean(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1,\n        j = n;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;\n    }\n\n    if (j) return s / j;\n  }\n\n  function median(array, f) {\n    var numbers = [],\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);\n    }\n\n    return threshold(numbers.sort(ascending), 0.5);\n  }\n\n  function merge(arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n\n    return merged;\n  }\n\n  function min(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;\n    }\n\n    return a;\n  }\n\n  function pairs(array) {\n    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [p, p = array[++i]];\n    return pairs;\n  }\n\n  function permute(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  }\n\n  function scan(array, compare) {\n    if (!(n = array.length)) return;\n    var i = 0,\n        n,\n        j = 0,\n        xi,\n        xj = array[j];\n\n    if (!compare) compare = ascending;\n\n    while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;\n\n    if (compare(xj, xj) === 0) return j;\n  }\n\n  function shuffle(array, i0, i1) {\n    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n\n    return array;\n  }\n\n  function sum(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.\n    }\n\n    else {\n      while (++i < n) if (a = +f(array[i], i, array)) s += a;\n    }\n\n    return s;\n  }\n\n  function transpose(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  }\n\n  function length(d) {\n    return d.length;\n  }\n\n  function zip() {\n    return transpose(arguments);\n  }\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map$1.prototype = {\n    constructor: Map,\n    has: function(key) {\n      return (prefix + key) in this;\n    },\n    get: function(key) {\n      return this[prefix + key];\n    },\n    set: function(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function() {\n      for (var property in this) if (property[0] === prefix) delete this[property];\n    },\n    keys: function() {\n      var keys = [];\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n      return keys;\n    },\n    values: function() {\n      var values = [];\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n      return entries;\n    },\n    size: function() {\n      var size = 0;\n      for (var property in this) if (property[0] === prefix) ++size;\n      return size;\n    },\n    empty: function() {\n      for (var property in this) if (property[0] === prefix) return false;\n      return true;\n    },\n    each: function(f) {\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  };\n\n  function map$1(object, f) {\n    var map = new Map;\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n\n      if (f == null) while (++i < n) map.set(i, object[i]);\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\n    }\n\n    // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n\n    return map;\n  }\n\n  function nest() {\n    var keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) return rollup != null\n          ? rollup(array) : (sortValues != null\n          ? array.sort(sortValues)\n          : array);\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map$1(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function(values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array, sortKey = sortKeys[depth - 1];\n      if (rollup != null && depth >= keys.length) array = map.entries();\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n    }\n\n    return nest = {\n      object: function(array) { return apply(array, 0, createObject, setObject); },\n      map: function(array) { return apply(array, 0, createMap, setMap); },\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n      key: function(d) { keys.push(d); return nest; },\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n      sortValues: function(order) { sortValues = order; return nest; },\n      rollup: function(f) { rollup = f; return nest; }\n    };\n  }\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map$1();\n  }\n\n  function setMap(map, key, value) {\n    map.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map$1.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set;\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n      var i = -1, n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);\n      else while (++i < n) set.add(f(object[i], i, object));\n    }\n\n    return set;\n  }\n\n  function keys(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  }\n\n  function values(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  }\n\n  function entries(map) {\n    var entries = [];\n    for (var key in map) entries.push({key: key, value: map[key]});\n    return entries;\n  }\n\n  function uniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return Math.random() * max + min;\n    };\n  }\n\n  function normal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  function logNormal() {\n    var randomNormal = normal.apply(this, arguments);\n    return function() {\n      return Math.exp(randomNormal());\n    };\n  }\n\n  function irwinHall(n) {\n    return function() {\n      for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();\n      return sum;\n    };\n  }\n\n  function bates(n) {\n    var randomIrwinHall = irwinHall(n);\n    return function() {\n      return randomIrwinHall() / n;\n    };\n  }\n\n  function exponential(lambda) {\n    return function() {\n      return -Math.log(1 - Math.random()) / lambda;\n    };\n  }\n\n  function linear(t) {\n    return +t;\n  }\n\n  function quadIn(t) {\n    return t * t;\n  }\n\n  function quadOut(t) {\n    return t * (2 - t);\n  }\n\n  function quadInOut(t) {\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n  }\n\n  function cubicIn(t) {\n    return t * t * t;\n  }\n\n  function cubicOut(t) {\n    return --t * t * t + 1;\n  }\n\n  function easeCubicInOut(t) {\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n  }\n\n  var exponent = 3;\n\n  var polyIn = (function custom(e) {\n    e = +e;\n\n    function polyIn(t) {\n      return Math.pow(t, e);\n    }\n\n    polyIn.exponent = custom;\n\n    return polyIn;\n  })(exponent);\n\n  var polyOut = (function custom(e) {\n    e = +e;\n\n    function polyOut(t) {\n      return 1 - Math.pow(1 - t, e);\n    }\n\n    polyOut.exponent = custom;\n\n    return polyOut;\n  })(exponent);\n\n  var polyInOut = (function custom(e) {\n    e = +e;\n\n    function polyInOut(t) {\n      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n    }\n\n    polyInOut.exponent = custom;\n\n    return polyInOut;\n  })(exponent);\n\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  function sinIn(t) {\n    return 1 - Math.cos(t * halfPi);\n  }\n\n  function sinOut(t) {\n    return Math.sin(t * halfPi);\n  }\n\n  function sinInOut(t) {\n    return (1 - Math.cos(pi * t)) / 2;\n  }\n\n  function expIn(t) {\n    return Math.pow(2, 10 * t - 10);\n  }\n\n  function expOut(t) {\n    return 1 - Math.pow(2, -10 * t);\n  }\n\n  function expInOut(t) {\n    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\n  }\n\n  function circleIn(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n\n  function circleOut(t) {\n    return Math.sqrt(1 - --t * t);\n  }\n\n  function circleInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n  }\n\n  var b1 = 4 / 11;\n  var b2 = 6 / 11;\n  var b3 = 8 / 11;\n  var b4 = 3 / 4;\n  var b5 = 9 / 11;\n  var b6 = 10 / 11;\n  var b7 = 15 / 16;\n  var b8 = 21 / 22;\n  var b9 = 63 / 64;\n  var b0 = 1 / b1 / b1;\n  function bounceIn(t) {\n    return 1 - bounceOut(1 - t);\n  }\n\n  function bounceOut(t) {\n    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n  }\n\n  function bounceInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n  }\n\n  var overshoot = 1.70158;\n\n  var backIn = (function custom(s) {\n    s = +s;\n\n    function backIn(t) {\n      return t * t * ((s + 1) * t - s);\n    }\n\n    backIn.overshoot = custom;\n\n    return backIn;\n  })(overshoot);\n\n  var backOut = (function custom(s) {\n    s = +s;\n\n    function backOut(t) {\n      return --t * t * ((s + 1) * t + s) + 1;\n    }\n\n    backOut.overshoot = custom;\n\n    return backOut;\n  })(overshoot);\n\n  var backInOut = (function custom(s) {\n    s = +s;\n\n    function backInOut(t) {\n      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n    }\n\n    backInOut.overshoot = custom;\n\n    return backInOut;\n  })(overshoot);\n\n  var tau = 2 * Math.PI;\n  var amplitude = 1;\n  var period = 0.3;\n  var elasticIn = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticIn(t) {\n      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\n    }\n\n    elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n    elasticIn.period = function(p) { return custom(a, p); };\n\n    return elasticIn;\n  })(amplitude, period);\n\n  var elasticOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticOut(t) {\n      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\n    }\n\n    elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticOut.period = function(p) { return custom(a, p); };\n\n    return elasticOut;\n  })(amplitude, period);\n\n  var elasticInOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticInOut(t) {\n      return ((t = t * 2 - 1) < 0\n          ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\n          : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\n    }\n\n    elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticInOut.period = function(p) { return custom(a, p); };\n\n    return elasticInOut;\n  })(amplitude, period);\n\n  function area(polygon) {\n    var i = -1,\n        n = polygon.length,\n        a,\n        b = polygon[n - 1],\n        area = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n\n    return area / 2;\n  }\n\n  function centroid(polygon) {\n    var i = -1,\n        n = polygon.length,\n        x = 0,\n        y = 0,\n        a,\n        b = polygon[n - 1],\n        c,\n        k = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      k += c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n\n    return k *= 3, [x / k, y / k];\n  }\n\n  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n  // right, +y is up). Returns a positive value if ABC is counter-clockwise,\n  // negative if clockwise, and zero if the points are collinear.\n  function cross(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n\n  function lexicographicOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n\n  // Computes the upper convex hull per the monotone chain algorithm.\n  // Assumes points.length >= 3, is sorted by x, unique in y.\n  // Returns an array of indices into points in left-to-right order.\n  function computeUpperHullIndexes(points) {\n    var n = points.length,\n        indexes = [0, 1],\n        size = 2;\n\n    for (var i = 2; i < n; ++i) {\n      while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n      indexes[size++] = i;\n    }\n\n    return indexes.slice(0, size); // remove popped points\n  }\n\n  function hull(points) {\n    if ((n = points.length) < 3) return null;\n\n    var i,\n        n,\n        sortedPoints = new Array(n),\n        flippedPoints = new Array(n);\n\n    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n    sortedPoints.sort(lexicographicOrder);\n    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n    var upperIndexes = computeUpperHullIndexes(sortedPoints),\n        lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n    // Construct the hull polygon, removing possible duplicate endpoints.\n    var skipLeft = lowerIndexes[0] === upperIndexes[0],\n        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n        hull = [];\n\n    // Add upper hull in right-to-l order.\n    // Then add lower hull in left-to-right order.\n    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n    return hull;\n  }\n\n  function contains(polygon, point) {\n    var n = polygon.length,\n        p = polygon[n - 1],\n        x = point[0], y = point[1],\n        x0 = p[0], y0 = p[1],\n        x1, y1,\n        inside = false;\n\n    for (var i = 0; i < n; ++i) {\n      p = polygon[i], x1 = p[0], y1 = p[1];\n      if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n      x0 = x1, y0 = y1;\n    }\n\n    return inside;\n  }\n\n  function length$1(polygon) {\n    var i = -1,\n        n = polygon.length,\n        b = polygon[n - 1],\n        xa,\n        ya,\n        xb = b[0],\n        yb = b[1],\n        perimeter = 0;\n\n    while (++i < n) {\n      xa = xb;\n      ya = yb;\n      b = polygon[i];\n      xb = b[0];\n      yb = b[1];\n      xa -= xb;\n      ya -= yb;\n      perimeter += Math.sqrt(xa * xa + ya * ya);\n    }\n\n    return perimeter;\n  }\n\nvar   pi$1 = Math.PI;\nvar   tau$1 = 2 * pi$1;\n  var epsilon = 1e-6;\n  var tauEpsilon = tau$1 - epsilon;\n  function Path() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = [];\n  }\n\n  function path() {\n    return new Path;\n  }\n\n  Path.prototype = path.prototype = {\n    constructor: Path,\n    moveTo: function(x, y) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y);\n    },\n    closePath: function() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._.push(\"Z\");\n      }\n    },\n    lineTo: function(x, y) {\n      this._.push(\"L\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    quadraticCurveTo: function(x1, y1, x, y) {\n      this._.push(\"Q\", +x1, \",\", +y1, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      this._.push(\"C\", +x1, \",\", +y1, \",\", +x2, \",\", +y2, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    arcTo: function(x1, y1, x2, y2, r) {\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n      var x0 = this._x1,\n          y0 = this._y1,\n          x21 = x2 - x1,\n          y21 = y2 - y1,\n          x01 = x0 - x1,\n          y01 = y0 - y1,\n          l01_2 = x01 * x01 + y01 * y01;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x1,y1).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n      else if (!(l01_2 > epsilon));\n\n      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n      // Equivalently, is (x1,y1) coincident with (x2,y2)?\n      // Or, is the radius zero? Line to (x1,y1).\n      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n        this._.push(\n          \"L\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        var x20 = x2 - x0,\n            y20 = y2 - y0,\n            l21_2 = x21 * x21 + y21 * y21,\n            l20_2 = x20 * x20 + y20 * y20,\n            l21 = Math.sqrt(l21_2),\n            l01 = Math.sqrt(l01_2),\n            l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n            t01 = l / l01,\n            t21 = l / l21;\n\n        // If the start tangent is not coincident with (x0,y0), line to.\n        if (Math.abs(t01 - 1) > epsilon) {\n          this._.push(\n            \"L\", x1 + t01 * x01, \",\", y1 + t01 * y01\n          );\n        }\n\n        this._.push(\n          \"A\", r, \",\", r, \",0,0,\", +(y01 * x20 > x01 * y20), \",\", this._x1 = x1 + t21 * x21, \",\", this._y1 = y1 + t21 * y21\n        );\n      }\n    },\n    arc: function(x, y, r, a0, a1, ccw) {\n      x = +x, y = +y, r = +r;\n      var dx = r * Math.cos(a0),\n          dy = r * Math.sin(a0),\n          x0 = x + dx,\n          y0 = y + dy,\n          cw = 1 ^ ccw,\n          da = ccw ? a0 - a1 : a1 - a0;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x0,y0).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", x0, \",\", y0\n        );\n      }\n\n      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n        this._.push(\n          \"L\", x0, \",\", y0\n        );\n      }\n\n      // Is this arc empty? We’re done.\n      if (!r) return;\n\n      // Is this a complete circle? Draw two arcs to complete the circle.\n      if (da > tauEpsilon) {\n        this._.push(\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", x - dx, \",\", y - dy,\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", this._x1 = x0, \",\", this._y1 = y0\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        if (da < 0) da = da % tau$1 + tau$1;\n        this._.push(\n          \"A\", r, \",\", r, \",0,\", +(da >= pi$1), \",\", cw, \",\", this._x1 = x + r * Math.cos(a1), \",\", this._y1 = y + r * Math.sin(a1)\n        );\n      }\n    },\n    rect: function(x, y, w, h) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y, \"h\", +w, \"v\", +h, \"h\", -w, \"Z\");\n    },\n    toString: function() {\n      return this._.join(\"\");\n    }\n  };\n\n  function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  }\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {data: d},\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d, i, n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, inherit the existing extent.\n    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n        case 0: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n          break;\n        }\n        case 1: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n          break;\n        }\n        case 2: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n          break;\n        }\n        case 3: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n          break;\n        }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    }\n\n    // If the quadtree covers the point already, just return.\n    else return this;\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data() {\n    var data = [];\n    this.visit(function(node) {\n      if (!node.length) do data.push(node.data); while (node = node.next)\n    });\n    return data;\n  }\n\n  function tree_extent(_) {\n    return arguments.length\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node)\n          || (x1 = q.x0) > x3\n          || (y1 = q.y0) > y3\n          || (x2 = q.x1) < x0\n          || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(\n          new Quad(node[3], xm, ym, x2, y2),\n          new Quad(node[2], x1, ym, xm, y2),\n          new Quad(node[1], xm, y1, x2, ym),\n          new Quad(node[0], x1, y1, xm, ym)\n        );\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | (x >= xm)) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n        && !node.length) {\n      if (retainer) retainer[j] = node;\n      else this._root = node;\n    }\n\n    return this;\n  }\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n    return this;\n  }\n\n  function tree_root() {\n    return this._root;\n  }\n\n  function tree_size() {\n    var size = 0;\n    this.visit(function(node) {\n      if (!node.length) do ++size; while (node = node.next)\n    });\n    return size;\n  }\n\n  function tree_visit(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  }\n\n  function tree_visitAfter(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {data: leaf.data}, next = copy;\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function() {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{source: node, target: copy._root = new Array(4)}];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n          else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  var slice$1 = [].slice;\n\n  var noabort = {};\n\n  function Queue(size) {\n    if (!(size >= 1)) throw new Error;\n    this._size = size;\n    this._call =\n    this._error = null;\n    this._tasks = [];\n    this._data = [];\n    this._waiting =\n    this._active =\n    this._ended =\n    this._start = 0; // inside a synchronous task callback?\n  }\n\n  Queue.prototype = queue.prototype = {\n    constructor: Queue,\n    defer: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      if (this._error != null) return this;\n      var t = slice$1.call(arguments, 1);\n      t.push(callback);\n      ++this._waiting, this._tasks.push(t);\n      poke(this);\n      return this;\n    },\n    abort: function() {\n      if (this._error == null) abort(this, new Error(\"abort\"));\n      return this;\n    },\n    await: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = function(error, results) { callback.apply(null, [error].concat(results)); };\n      maybeNotify(this);\n      return this;\n    },\n    awaitAll: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = callback;\n      maybeNotify(this);\n      return this;\n    }\n  };\n\n  function poke(q) {\n    if (!q._start) try { start(q); } // let the current task complete\n    catch (e) { if (q._tasks[q._ended + q._active - 1]) abort(q, e); } // task errored synchronously\n  }\n\n  function start(q) {\n    while (q._start = q._waiting && q._active < q._size) {\n      var i = q._ended + q._active,\n          t = q._tasks[i],\n          j = t.length - 1,\n          c = t[j];\n      t[j] = end(q, i);\n      --q._waiting, ++q._active;\n      t = c.apply(null, t);\n      if (!q._tasks[i]) continue; // task finished synchronously\n      q._tasks[i] = t || noabort;\n    }\n  }\n\n  function end(q, i) {\n    return function(e, r) {\n      if (!q._tasks[i]) return; // ignore multiple callbacks\n      --q._active, ++q._ended;\n      q._tasks[i] = null;\n      if (q._error != null) return; // ignore secondary errors\n      if (e != null) {\n        abort(q, e);\n      } else {\n        q._data[i] = r;\n        if (q._waiting) poke(q);\n        else maybeNotify(q);\n      }\n    };\n  }\n\n  function abort(q, e) {\n    var i = q._tasks.length, t;\n    q._error = e; // ignore active callbacks\n    q._data = undefined; // allow gc\n    q._waiting = NaN; // prevent starting\n\n    while (--i >= 0) {\n      if (t = q._tasks[i]) {\n        q._tasks[i] = null;\n        if (t.abort) try { t.abort(); }\n        catch (e) { /* ignore */ }\n      }\n    }\n\n    q._active = NaN; // allow notification\n    maybeNotify(q);\n  }\n\n  function maybeNotify(q) {\n    if (!q._active && q._call) q._call(q._error, q._data);\n  }\n\n  function queue(concurrency) {\n    return new Queue(arguments.length ? +concurrency : Infinity);\n  }\n\n  function constant$1(x) {\n    return function constant() {\n      return x;\n    };\n  }\n\n  var epsilon$1 = 1e-12;\n  var pi$2 = Math.PI;\n  var halfPi$1 = pi$2 / 2;\n  var tau$2 = 2 * pi$2;\n\n  function arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n\n  function arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n\n  function arcStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function arcEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function arcPadAngle(d) {\n    return d && d.padAngle; // Note: optional!\n  }\n\n  function asin(x) {\n    return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);\n  }\n\n  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var x10 = x1 - x0, y10 = y1 - y0,\n        x32 = x3 - x2, y32 = y3 - y2,\n        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n    return [x0 + t * x10, y0 + t * y10];\n  }\n\n  // Compute perpendicular offset line of length rc.\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n    var x01 = x0 - x1,\n        y01 = y0 - y1,\n        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x11 = x0 + ox,\n        y11 = y0 + oy,\n        x10 = x1 + ox,\n        y10 = y1 + oy,\n        x00 = (x11 + x10) / 2,\n        y00 = (y11 + y10) / 2,\n        dx = x10 - x11,\n        dy = y10 - y11,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x11 * y10 - x10 * y11,\n        d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x00,\n        dy0 = cy0 - y00,\n        dx1 = cx1 - x00,\n        dy1 = cy1 - y00;\n\n    // Pick the closer of the two intersection points.\n    // TODO Is there a faster way to determine which intersection to use?\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n    return {\n      cx: cx0,\n      cy: cy0,\n      x01: -ox,\n      y01: -oy,\n      x11: cx0 * (r1 / r - 1),\n      y11: cy0 * (r1 / r - 1)\n    };\n  }\n\n  function arc() {\n    var innerRadius = arcInnerRadius,\n        outerRadius = arcOuterRadius,\n        cornerRadius = constant$1(0),\n        padRadius = null,\n        startAngle = arcStartAngle,\n        endAngle = arcEndAngle,\n        padAngle = arcPadAngle,\n        context = null;\n\n    function arc() {\n      var buffer,\n          r,\n          r0 = +innerRadius.apply(this, arguments),\n          r1 = +outerRadius.apply(this, arguments),\n          a0 = startAngle.apply(this, arguments) - halfPi$1,\n          a1 = endAngle.apply(this, arguments) - halfPi$1,\n          da = Math.abs(a1 - a0),\n          cw = a1 > a0;\n\n      if (!context) context = buffer = path();\n\n      // Ensure that the outer radius is always larger than the inner radius.\n      if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n      // Is it a point?\n      if (!(r1 > epsilon$1)) context.moveTo(0, 0);\n\n      // Or is it a circle or annulus?\n      else if (da > tau$2 - epsilon$1) {\n        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));\n        context.arc(0, 0, r1, a0, a1, !cw);\n        if (r0 > epsilon$1) {\n          context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));\n          context.arc(0, 0, r0, a1, a0, cw);\n        }\n      }\n\n      // Or is it a circular or annular sector?\n      else {\n        var a01 = a0,\n            a11 = a1,\n            a00 = a0,\n            a10 = a1,\n            da0 = da,\n            da1 = da,\n            ap = padAngle.apply(this, arguments) / 2,\n            rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),\n            rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n            rc0 = rc,\n            rc1 = rc,\n            t0,\n            t1;\n\n        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n        if (rp > epsilon$1) {\n          var p0 = asin(rp / r0 * Math.sin(ap)),\n              p1 = asin(rp / r1 * Math.sin(ap));\n          if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n          else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n          if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n          else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n        }\n\n        var x01 = r1 * Math.cos(a01),\n            y01 = r1 * Math.sin(a01),\n            x10 = r0 * Math.cos(a10),\n            y10 = r0 * Math.sin(a10);\n\n        // Apply rounded corners?\n        if (rc > epsilon$1) {\n          var x11 = r1 * Math.cos(a11),\n              y11 = r1 * Math.sin(a11),\n              x00 = r0 * Math.cos(a00),\n              y00 = r0 * Math.sin(a00);\n\n          // Restrict the corner radius according to the sector angle.\n          if (da < pi$2) {\n            var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n                ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),\n                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n          }\n        }\n\n        // Is the sector collapsed to a line?\n        if (!(da1 > epsilon$1)) context.moveTo(x01, y01);\n\n        // Does the sector’s outer ring have rounded corners?\n        else if (rc1 > epsilon$1) {\n          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n            context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the outer ring just a circular arc?\n        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n        // Is there no inner ring, and it’s a circular sector?\n        // Or perhaps it’s an annular sector collapsed due to padding?\n        if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);\n\n        // Does the sector’s inner ring (or point) have rounded corners?\n        else if (rc0 > epsilon$1) {\n          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n            context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the inner ring just a circular arc?\n        else context.arc(0, 0, r0, a10, a00, cw);\n      }\n\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;\n      return [Math.cos(a) * r, Math.sin(a) * r];\n    };\n\n    arc.innerRadius = function(_) {\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : innerRadius;\n    };\n\n    arc.outerRadius = function(_) {\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : outerRadius;\n    };\n\n    arc.cornerRadius = function(_) {\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : cornerRadius;\n    };\n\n    arc.padRadius = function(_) {\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), arc) : padRadius;\n    };\n\n    arc.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : startAngle;\n    };\n\n    arc.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : endAngle;\n    };\n\n    arc.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : padAngle;\n    };\n\n    arc.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n    };\n\n    return arc;\n  }\n\n  function Linear(context) {\n    this._context = context;\n  }\n\n  Linear.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: this._context.lineTo(x, y); break;\n      }\n    }\n  };\n\n  function curveLinear(context) {\n    return new Linear(context);\n  }\n\n  function x(p) {\n    return p[0];\n  }\n\n  function y(p) {\n    return p[1];\n  }\n\n  function line() {\n    var x$$ = x,\n        y$$ = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function line(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) output.lineStart();\n          else output.lineEnd();\n        }\n        if (defined0) output.point(+x$$(d, i, data), +y$$(d, i, data));\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    line.x = function(_) {\n      return arguments.length ? (x$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : x$$;\n    };\n\n    line.y = function(_) {\n      return arguments.length ? (y$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : y$$;\n    };\n\n    line.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), line) : defined;\n    };\n\n    line.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n    };\n\n    line.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n    };\n\n    return line;\n  }\n\n  function area$1() {\n    var x0 = x,\n        x1 = null,\n        y0 = constant$1(0),\n        y1 = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function area(data) {\n      var i,\n          j,\n          k,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer,\n          x0z = new Array(n),\n          y0z = new Array(n);\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) {\n            j = i;\n            output.areaStart();\n            output.lineStart();\n          } else {\n            output.lineEnd();\n            output.lineStart();\n            for (k = i - 1; k >= j; --k) {\n              output.point(x0z[k], y0z[k]);\n            }\n            output.lineEnd();\n            output.areaEnd();\n          }\n        }\n        if (defined0) {\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n        }\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    function arealine() {\n      return line().defined(defined).curve(curve).context(context);\n    }\n\n    area.x = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), x1 = null, area) : x0;\n    };\n\n    area.x0 = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : x0;\n    };\n\n    area.x1 = function(_) {\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : x1;\n    };\n\n    area.y = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), y1 = null, area) : y0;\n    };\n\n    area.y0 = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : y0;\n    };\n\n    area.y1 = function(_) {\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : y1;\n    };\n\n    area.lineX0 =\n    area.lineY0 = function() {\n      return arealine().x(x0).y(y0);\n    };\n\n    area.lineY1 = function() {\n      return arealine().x(x0).y(y1);\n    };\n\n    area.lineX1 = function() {\n      return arealine().x(x1).y(y0);\n    };\n\n    area.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), area) : defined;\n    };\n\n    area.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n    };\n\n    area.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n    };\n\n    return area;\n  }\n\n  function descending$1(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function identity$1(d) {\n    return d;\n  }\n\n  function pie() {\n    var value = identity$1,\n        sortValues = descending$1,\n        sort = null,\n        startAngle = constant$1(0),\n        endAngle = constant$1(tau$2),\n        padAngle = constant$1(0);\n\n    function pie(data) {\n      var i,\n          n = data.length,\n          j,\n          k,\n          sum = 0,\n          index = new Array(n),\n          arcs = new Array(n),\n          a0 = +startAngle.apply(this, arguments),\n          da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)),\n          a1,\n          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n          pa = p * (da < 0 ? -1 : 1),\n          v;\n\n      for (i = 0; i < n; ++i) {\n        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n          sum += v;\n        }\n      }\n\n      // Optionally sort the arcs by previously-computed values or by data.\n      if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n      else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n      // Compute the arcs! They are stored in the original data's order.\n      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n          data: data[j],\n          index: i,\n          value: v,\n          startAngle: a0,\n          endAngle: a1,\n          padAngle: p\n        };\n      }\n\n      return arcs;\n    }\n\n    pie.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), pie) : value;\n    };\n\n    pie.sortValues = function(_) {\n      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n    };\n\n    pie.sort = function(_) {\n      return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n    };\n\n    pie.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : startAngle;\n    };\n\n    pie.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : endAngle;\n    };\n\n    pie.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : padAngle;\n    };\n\n    return pie;\n  }\n\n  var curveRadialLinear = curveRadial(curveLinear);\n\n  function Radial(curve) {\n    this._curve = curve;\n  }\n\n  Radial.prototype = {\n    areaStart: function() {\n      this._curve.areaStart();\n    },\n    areaEnd: function() {\n      this._curve.areaEnd();\n    },\n    lineStart: function() {\n      this._curve.lineStart();\n    },\n    lineEnd: function() {\n      this._curve.lineEnd();\n    },\n    point: function(a, r) {\n      this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n    }\n  };\n\n  function curveRadial(curve) {\n\n    function radial(context) {\n      return new Radial(curve(context));\n    }\n\n    radial._curve = curve;\n\n    return radial;\n  }\n\n  function radialLine(l) {\n    var c = l.curve;\n\n    l.angle = l.x, delete l.x;\n    l.radius = l.y, delete l.y;\n\n    l.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return l;\n  }\n\n  function radialLine$1() {\n    return radialLine(line().curve(curveRadialLinear));\n  }\n\n  function radialArea() {\n    var a = area$1().curve(curveRadialLinear),\n        c = a.curve,\n        x0 = a.lineX0,\n        x1 = a.lineX1,\n        y0 = a.lineY0,\n        y1 = a.lineY1;\n\n    a.angle = a.x, delete a.x;\n    a.startAngle = a.x0, delete a.x0;\n    a.endAngle = a.x1, delete a.x1;\n    a.radius = a.y, delete a.y;\n    a.innerRadius = a.y0, delete a.y0;\n    a.outerRadius = a.y1, delete a.y1;\n    a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;\n    a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;\n    a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;\n    a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;\n\n    a.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return a;\n  }\n\n  var circle = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / pi$2);\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau$2);\n    }\n  };\n\n  var cross$1 = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / 5) / 2;\n      context.moveTo(-3 * r, -r);\n      context.lineTo(-r, -r);\n      context.lineTo(-r, -3 * r);\n      context.lineTo(r, -3 * r);\n      context.lineTo(r, -r);\n      context.lineTo(3 * r, -r);\n      context.lineTo(3 * r, r);\n      context.lineTo(r, r);\n      context.lineTo(r, 3 * r);\n      context.lineTo(-r, 3 * r);\n      context.lineTo(-r, r);\n      context.lineTo(-3 * r, r);\n      context.closePath();\n    }\n  };\n\n  var tan30 = Math.sqrt(1 / 3);\n  var tan30_2 = tan30 * 2;\n  var diamond = {\n    draw: function(context, size) {\n      var y = Math.sqrt(size / tan30_2),\n          x = y * tan30;\n      context.moveTo(0, -y);\n      context.lineTo(x, 0);\n      context.lineTo(0, y);\n      context.lineTo(-x, 0);\n      context.closePath();\n    }\n  };\n\n  var ka = 0.89081309152928522810;\n  var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);\n  var kx = Math.sin(tau$2 / 10) * kr;\n  var ky = -Math.cos(tau$2 / 10) * kr;\n  var star = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size * ka),\n          x = kx * r,\n          y = ky * r;\n      context.moveTo(0, -r);\n      context.lineTo(x, y);\n      for (var i = 1; i < 5; ++i) {\n        var a = tau$2 * i / 5,\n            c = Math.cos(a),\n            s = Math.sin(a);\n        context.lineTo(s * r, -c * r);\n        context.lineTo(c * x - s * y, s * x + c * y);\n      }\n      context.closePath();\n    }\n  };\n\n  var square = {\n    draw: function(context, size) {\n      var w = Math.sqrt(size),\n          x = -w / 2;\n      context.rect(x, x, w, w);\n    }\n  };\n\n  var sqrt3 = Math.sqrt(3);\n\n  var triangle = {\n    draw: function(context, size) {\n      var y = -Math.sqrt(size / (sqrt3 * 3));\n      context.moveTo(0, y * 2);\n      context.lineTo(-sqrt3 * y, -y);\n      context.lineTo(sqrt3 * y, -y);\n      context.closePath();\n    }\n  };\n\n  var c = -0.5;\n  var s = Math.sqrt(3) / 2;\n  var k = 1 / Math.sqrt(12);\n  var a = (k / 2 + 1) * 3;\n  var wye = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / a),\n          x0 = r / 2,\n          y0 = r * k,\n          x1 = x0,\n          y1 = r * k + r,\n          x2 = -x1,\n          y2 = y1;\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n      context.lineTo(x2, y2);\n      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n      context.closePath();\n    }\n  };\n\n  var symbols = [\n    circle,\n    cross$1,\n    diamond,\n    square,\n    star,\n    triangle,\n    wye\n  ];\n\n  function symbol() {\n    var type = constant$1(circle),\n        size = constant$1(64),\n        context = null;\n\n    function symbol() {\n      var buffer;\n      if (!context) context = buffer = path();\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    symbol.type = function(_) {\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$1(_), symbol) : type;\n    };\n\n    symbol.size = function(_) {\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$1(+_), symbol) : size;\n    };\n\n    symbol.context = function(_) {\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n    };\n\n    return symbol;\n  }\n\n  function noop() {}\n\n  function point(that, x, y) {\n    that._context.bezierCurveTo(\n      (2 * that._x0 + that._x1) / 3,\n      (2 * that._y0 + that._y1) / 3,\n      (that._x0 + 2 * that._x1) / 3,\n      (that._y0 + 2 * that._y1) / 3,\n      (that._x0 + 4 * that._x1 + x) / 6,\n      (that._y0 + 4 * that._y1 + y) / 6\n    );\n  }\n\n  function Basis(context) {\n    this._context = context;\n  }\n\n  Basis.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 3: point(this, this._x1, this._y1); // proceed\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basis(context) {\n    return new Basis(context);\n  }\n\n  function BasisClosed(context) {\n    this._context = context;\n  }\n\n  BasisClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x2, this._y2);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x2, this._y2);\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisClosed(context) {\n    return new BasisClosed(context);\n  }\n\n  function BasisOpen(context) {\n    this._context = context;\n  }\n\n  BasisOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n        case 3: this._point = 4; // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisOpen(context) {\n    return new BasisOpen(context);\n  }\n\n  function Bundle(context, beta) {\n    this._basis = new Basis(context);\n    this._beta = beta;\n  }\n\n  Bundle.prototype = {\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n      this._basis.lineStart();\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          j = x.length - 1;\n\n      if (j > 0) {\n        var x0 = x[0],\n            y0 = y[0],\n            dx = x[j] - x0,\n            dy = y[j] - y0,\n            i = -1,\n            t;\n\n        while (++i <= j) {\n          t = i / j;\n          this._basis.point(\n            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n          );\n        }\n      }\n\n      this._x = this._y = null;\n      this._basis.lineEnd();\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  var bundle = (function custom(beta) {\n\n    function bundle(context) {\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n    }\n\n    bundle.beta = function(beta) {\n      return custom(+beta);\n    };\n\n    return bundle;\n  })(0.85);\n\n  function point$1(that, x, y) {\n    that._context.bezierCurveTo(\n      that._x1 + that._k * (that._x2 - that._x0),\n      that._y1 + that._k * (that._y2 - that._y0),\n      that._x2 + that._k * (that._x1 - x),\n      that._y2 + that._k * (that._y1 - y),\n      that._x2,\n      that._y2\n    );\n  }\n\n  function Cardinal(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  Cardinal.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: point$1(this, this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n        case 2: this._point = 3; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinal = (function custom(tension) {\n\n    function cardinal(context) {\n      return new Cardinal(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalClosed(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalClosed = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalClosed(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalOpen(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalOpen = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalOpen(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function point$2(that, x, y) {\n    var x1 = that._x1,\n        y1 = that._y1,\n        x2 = that._x2,\n        y2 = that._y2;\n\n    if (that._l01_a > epsilon$1) {\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n    }\n\n    if (that._l23_a > epsilon$1) {\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n    }\n\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n  }\n\n  function CatmullRom(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRom.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: this.point(this, this._x2, this._y2); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRom = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomClosed(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomClosed = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomOpen(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomOpen = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function LinearClosed(context) {\n    this._context = context;\n  }\n\n  LinearClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._point) this._context.closePath();\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      if (this._point) this._context.lineTo(x, y);\n      else this._point = 1, this._context.moveTo(x, y);\n    }\n  };\n\n  function linearClosed(context) {\n    return new LinearClosed(context);\n  }\n\n  function sign(x) {\n    return x < 0 ? -1 : 1;\n  }\n\n  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n  // NOV(II), P. 443, 1990.\n  function slope3(that, x2, y2) {\n    var h0 = that._x1 - that._x0,\n        h1 = x2 - that._x1,\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n  }\n\n  // Calculate a one-sided slope.\n  function slope2(that, t) {\n    var h = that._x1 - that._x0;\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n  }\n\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n  function point$3(that, t0, t1) {\n    var x0 = that._x0,\n        y0 = that._y0,\n        x1 = that._x1,\n        y1 = that._y1,\n        dx = (x1 - x0) / 3;\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n  }\n\n  function MonotoneX(context) {\n    this._context = context;\n  }\n\n  MonotoneX.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 =\n      this._t0 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n        case 3: point$3(this, this._t0, slope2(this, this._t0)); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      var t1 = NaN;\n\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n        default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  }\n\n  function MonotoneY(context) {\n    this._context = new ReflectContext(context);\n  }\n\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n    MonotoneX.prototype.point.call(this, y, x);\n  };\n\n  function ReflectContext(context) {\n    this._context = context;\n  }\n\n  ReflectContext.prototype = {\n    moveTo: function(x, y) { this._context.moveTo(y, x); },\n    closePath: function() { this._context.closePath(); },\n    lineTo: function(x, y) { this._context.lineTo(y, x); },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n  };\n\n  function monotoneX(context) {\n    return new MonotoneX(context);\n  }\n\n  function monotoneY(context) {\n    return new MonotoneY(context);\n  }\n\n  function Natural(context) {\n    this._context = context;\n  }\n\n  Natural.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          n = x.length;\n\n      if (n) {\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n        if (n === 2) {\n          this._context.lineTo(x[1], y[1]);\n        } else {\n          var px = controlPoints(x),\n              py = controlPoints(y);\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n          }\n        }\n      }\n\n      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n      this._x = this._y = null;\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n  function controlPoints(x) {\n    var i,\n        n = x.length - 1,\n        m,\n        a = new Array(n),\n        b = new Array(n),\n        r = new Array(n);\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n    a[n - 1] = r[n - 1] / b[n - 1];\n    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n    b[n - 1] = (x[n] + a[n - 1]) / 2;\n    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n    return [a, b];\n  }\n\n  function natural(context) {\n    return new Natural(context);\n  }\n\n  function Step(context, t) {\n    this._context = context;\n    this._t = t;\n  }\n\n  Step.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = this._y = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: {\n          if (this._t <= 0) {\n            this._context.lineTo(this._x, y);\n            this._context.lineTo(x, y);\n          } else {\n            var x1 = this._x * (1 - this._t) + x * this._t;\n            this._context.lineTo(x1, this._y);\n            this._context.lineTo(x1, y);\n          }\n          break;\n        }\n      }\n      this._x = x, this._y = y;\n    }\n  };\n\n  function step(context) {\n    return new Step(context, 0.5);\n  }\n\n  function stepBefore(context) {\n    return new Step(context, 0);\n  }\n\n  function stepAfter(context) {\n    return new Step(context, 1);\n  }\n\n  var slice$2 = Array.prototype.slice;\n\n  function none(series, order) {\n    if (!((n = series.length) > 1)) return;\n    for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n      s0 = s1, s1 = series[order[i]];\n      for (var j = 0; j < m; ++j) {\n        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n      }\n    }\n  }\n\n  function none$1(series) {\n    var n = series.length, o = new Array(n);\n    while (--n >= 0) o[n] = n;\n    return o;\n  }\n\n  function stackValue(d, key) {\n    return d[key];\n  }\n\n  function stack() {\n    var keys = constant$1([]),\n        order = none$1,\n        offset = none,\n        value = stackValue;\n\n    function stack(data) {\n      var kz = keys.apply(this, arguments),\n          i,\n          m = data.length,\n          n = kz.length,\n          sz = new Array(n),\n          oz;\n\n      for (i = 0; i < n; ++i) {\n        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n          si[j] = sij = [0, +value(data[j], ki, j, data)];\n          sij.data = data[j];\n        }\n        si.key = ki;\n      }\n\n      for (i = 0, oz = order(sz); i < n; ++i) {\n        sz[oz[i]].index = i;\n      }\n\n      offset(sz, oz);\n      return sz;\n    }\n\n    stack.keys = function(_) {\n      return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : keys;\n    };\n\n    stack.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), stack) : value;\n    };\n\n    stack.order = function(_) {\n      return arguments.length ? (order = _ == null ? none$1 : typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : order;\n    };\n\n    stack.offset = function(_) {\n      return arguments.length ? (offset = _ == null ? none : _, stack) : offset;\n    };\n\n    return stack;\n  }\n\n  function expand(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\n      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\n    }\n    none(series, order);\n  }\n\n  function silhouette(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\n      s0[j][1] += s0[j][0] = -y / 2;\n    }\n    none(series, order);\n  }\n\n  function wiggle(series, order) {\n    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n        var si = series[order[i]],\n            sij0 = si[j][1] || 0,\n            sij1 = si[j - 1][1] || 0,\n            s3 = (sij0 - sij1) / 2;\n        for (var k = 0; k < i; ++k) {\n          var sk = series[order[k]],\n              skj0 = sk[j][1] || 0,\n              skj1 = sk[j - 1][1] || 0;\n          s3 += skj0 - skj1;\n        }\n        s1 += sij0, s2 += s3 * sij0;\n      }\n      s0[j - 1][1] += s0[j - 1][0] = y;\n      if (s1) y -= s2 / s1;\n    }\n    s0[j - 1][1] += s0[j - 1][0] = y;\n    none(series, order);\n  }\n\n  function ascending$1(series) {\n    var sums = series.map(sum$1);\n    return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });\n  }\n\n  function sum$1(series) {\n    var s = 0, i = -1, n = series.length, v;\n    while (++i < n) if (v = +series[i][1]) s += v;\n    return s;\n  }\n\n  function descending$2(series) {\n    return ascending$1(series).reverse();\n  }\n\n  function insideOut(series) {\n    var n = series.length,\n        i,\n        j,\n        sums = series.map(sum$1),\n        order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),\n        top = 0,\n        bottom = 0,\n        tops = [],\n        bottoms = [];\n\n    for (i = 0; i < n; ++i) {\n      j = order[i];\n      if (top < bottom) {\n        top += sums[j];\n        tops.push(j);\n      } else {\n        bottom += sums[j];\n        bottoms.push(j);\n      }\n    }\n\n    return bottoms.reverse().concat(tops);\n  }\n\n  function reverse(series) {\n    return none$1(series).reverse();\n  }\n\n  function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) prototype[key] = definition[key];\n    return prototype;\n  }\n\n  function Color() {}\n\n  var darker = 0.7;\n  var brighter = 1 / darker;\n\n  var reHex3 = /^#([0-9a-f]{3})$/;\n  var reHex6 = /^#([0-9a-f]{6})$/;\n  var reRgbInteger = /^rgb\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*\\)$/;\n  var reRgbPercent = /^rgb\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reRgbaInteger = /^rgba\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reRgbaPercent = /^rgba\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reHslPercent = /^hsl\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reHslaPercent = /^hsla\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n\n  define(Color, color, {\n    displayable: function() {\n      return this.rgb().displayable();\n    },\n    toString: function() {\n      return this.rgb() + \"\";\n    }\n  });\n\n  function color(format) {\n    var m;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n        : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n        : named.hasOwnProperty(format) ? rgbn(named[format])\n        : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n        : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb;\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n\n  function colorRgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Rgb, colorRgb, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function() {\n      return this;\n    },\n    displayable: function() {\n      return (0 <= this.r && this.r <= 255)\n          && (0 <= this.g && this.g <= 255)\n          && (0 <= this.b && this.b <= 255)\n          && (0 <= this.opacity && this.opacity <= 1);\n    },\n    toString: function() {\n      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"rgb(\" : \"rgba(\")\n          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n          + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;\n    else if (l <= 0 || l >= 1) h = s = NaN;\n    else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl;\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;\n      else if (g === max) h = (b - r) / s + 2;\n      else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n  }\n\n  function colorHsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, colorHsl, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(\n        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n        hsl2rgb(h, m1, m2),\n        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n        this.opacity\n      );\n    },\n    displayable: function() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n          && (0 <= this.l && this.l <= 1)\n          && (0 <= this.opacity && this.opacity <= 1);\n    }\n  }));\n\n  /* From FvD 13.37, CSS Color Module Level 3 */\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60\n        : h < 180 ? m2\n        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n        : m1) * 255;\n  }\n\n  var deg2rad = Math.PI / 180;\n  var rad2deg = 180 / Math.PI;\n\n  var Kn = 18;\n  var Xn = 0.950470;\n  var Yn = 1;\n  var Zn = 1.088830;\n  var t0 = 4 / 29;\n  var t1 = 6 / 29;\n  var t2 = 3 * t1 * t1;\n  var t3 = t1 * t1 * t1;\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) {\n      var h = o.h * deg2rad;\n      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n    }\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var b = rgb2xyz(o.r),\n        a = rgb2xyz(o.g),\n        l = rgb2xyz(o.b),\n        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n\n  function lab(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Lab, lab, extend(Color, {\n    brighter: function(k) {\n      return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function(k) {\n      return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function() {\n      var y = (this.l + 16) / 116,\n          x = isNaN(this.a) ? y : y + this.a / 500,\n          z = isNaN(this.b) ? y : y - this.b / 200;\n      y = Yn * lab2xyz(y);\n      x = Xn * lab2xyz(x);\n      z = Zn * lab2xyz(z);\n      return new Rgb(\n        xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n        xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n        xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n        this.opacity\n      );\n    }\n  }));\n\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n  }\n\n  function lab2xyz(t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n  }\n\n  function xyz2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n\n  function rgb2xyz(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    var h = Math.atan2(o.b, o.a) * rad2deg;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n\n  function colorHcl(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hcl, colorHcl, extend(Color, {\n    brighter: function(k) {\n      return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function(k) {\n      return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function() {\n      return labConvert(this).rgb();\n    }\n  }));\n\n  var A = -0.14861;\n  var B = +1.78277;\n  var C = -0.29227;\n  var D = -0.90649;\n  var E = +1.97294;\n  var ED = E * D;\n  var EB = E * B;\n  var BC_DA = B * C - D * A;\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n        bl = b - l,\n        k = (E * (g - l) - C * bl) / D,\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n\n  function cubehelix(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Cubehelix, cubehelix, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n          l = +this.l,\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n          cosh = Math.cos(h),\n          sinh = Math.sin(h);\n      return new Rgb(\n        255 * (l + a * (A * cosh + B * sinh)),\n        255 * (l + a * (C * cosh + D * sinh)),\n        255 * (l + a * (E * cosh)),\n        this.opacity\n      );\n    }\n  }));\n\n  function basis$1(t1, v0, v1, v2, v3) {\n    var t2 = t1 * t1, t3 = t2 * t1;\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n        + (4 - 6 * t2 + 3 * t3) * v1\n        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n        + t3 * v3) / 6;\n  }\n\n  function basis$2(values) {\n    var n = values.length - 1;\n    return function(t) {\n      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n          v1 = values[i],\n          v2 = values[i + 1],\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function basisClosed$1(values) {\n    var n = values.length;\n    return function(t) {\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n          v0 = values[(i + n - 1) % n],\n          v1 = values[i % n],\n          v2 = values[(i + 1) % n],\n          v3 = values[(i + 2) % n];\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function constant$2(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function linear$1(a, d) {\n    return function(t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential$1(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function hue(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function(a, b) {\n      return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);\n    };\n  }\n\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  var interpolateRgb = (function rgbGamma(y) {\n    var color = gamma(y);\n\n    function rgb(start, end) {\n      var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n          g = color(start.g, end.g),\n          b = color(start.b, end.b),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb.gamma = rgbGamma;\n\n    return rgb;\n  })(1);\n\n  function rgbSpline(spline) {\n    return function(colors) {\n      var n = colors.length,\n          r = new Array(n),\n          g = new Array(n),\n          b = new Array(n),\n          i, color;\n      for (i = 0; i < n; ++i) {\n        color = colorRgb(colors[i]);\n        r[i] = color.r || 0;\n        g[i] = color.g || 0;\n        b[i] = color.b || 0;\n      }\n      r = spline(r);\n      g = spline(g);\n      b = spline(b);\n      color.opacity = 1;\n      return function(t) {\n        color.r = r(t);\n        color.g = g(t);\n        color.b = b(t);\n        return color + \"\";\n      };\n    };\n  }\n\n  var rgbBasis = rgbSpline(basis$2);\n  var rgbBasisClosed = rgbSpline(basisClosed$1);\n\n  function array$1(a, b) {\n    var nb = b ? b.length : 0,\n        na = a ? Math.min(nb, a.length) : 0,\n        x = new Array(nb),\n        c = new Array(nb),\n        i;\n\n    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);\n    for (; i < nb; ++i) c[i] = b[i];\n\n    return function(t) {\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n\n  function date(a, b) {\n    var d = new Date;\n    return a = +a, b -= a, function(t) {\n      return d.setTime(a + b * t), d;\n    };\n  }\n\n  function interpolateNumber(a, b) {\n    return a = +a, b -= a, function(t) {\n      return a + b * t;\n    };\n  }\n\n  function object(a, b) {\n    var i = {},\n        c = {},\n        k;\n\n    if (a === null || typeof a !== \"object\") a = {};\n    if (b === null || typeof b !== \"object\") b = {};\n\n    for (k in b) {\n      if (k in a) {\n        i[k] = interpolate(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;\n  var reB = new RegExp(reA.source, \"g\");\n  function zero(b) {\n    return function() {\n      return b;\n    };\n  }\n\n  function one(b) {\n    return function(t) {\n      return b(t) + \"\";\n    };\n  }\n\n  function interpolateString(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n        am, // current match in a\n        bm, // current match in b\n        bs, // string preceding current number in b, if any\n        i = -1, // index in s\n        s = [], // string constants and placeholders\n        q = []; // number interpolators\n\n    // Coerce inputs to strings.\n    a = a + \"\", b = b + \"\";\n\n    // Interpolate pairs of numbers in a & b.\n    while ((am = reA.exec(a))\n        && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) { // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else { // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({i: i, x: interpolateNumber(am, bm)});\n      }\n      bi = reB.lastIndex;\n    }\n\n    // Add remains of b.\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n    return s.length < 2 ? (q[0]\n        ? one(q[0].x)\n        : zero(b))\n        : (b = q.length, function(t) {\n            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n            return s.join(\"\");\n          });\n  }\n\n  function interpolate(a, b) {\n    var t = typeof b, c;\n    return b == null || t === \"boolean\" ? constant$2(b)\n        : (t === \"number\" ? interpolateNumber\n        : t === \"string\" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)\n        : b instanceof color ? interpolateRgb\n        : b instanceof Date ? date\n        : Array.isArray(b) ? array$1\n        : isNaN(b) ? object\n        : interpolateNumber)(a, b);\n  }\n\n  function interpolateRound(a, b) {\n    return a = +a, b -= a, function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n\n  var degrees = 180 / Math.PI;\n\n  var identity$2 = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  function decompose(a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees,\n      skewX: Math.atan(skewX) * degrees,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var cssNode;\n  var cssRoot;\n  var cssView;\n  var svgNode;\n  function parseCss(value) {\n    if (value === \"none\") return identity$2;\n    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n    cssNode.style.transform = value;\n    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n    cssRoot.removeChild(cssNode);\n    value = value.slice(7, -1).split(\",\");\n    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n  }\n\n  function parseSvg(value) {\n    if (value == null) return identity$2;\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value);\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;\n    value = value.matrix;\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n        q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function(a, b) {\n      var s = [], // string constants and placeholders\n          q = []; // number interpolators\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n      return function(t) {\n        var i = -1, n = q.length, o;\n        while (++i < n) s[(o = q[i]).i] = o.x(t);\n        return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransform$1 = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransform$2 = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  var rho = Math.SQRT2;\n  var rho2 = 2;\n  var rho4 = 4;\n  var epsilon2 = 1e-12;\n  function cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n\n  function sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n\n  function tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function interpolateZoom(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      }\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      }\n    }\n\n    i.duration = S * 1000;\n\n    return i;\n  }\n\n  function hsl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n          s = nogamma(start.s, end.s),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hsl$1 = hsl(hue);\n  var hslLong = hsl(nogamma);\n\n  function lab$1(start, end) {\n    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\n        a = nogamma(start.a, end.a),\n        b = nogamma(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.l = l(t);\n      start.a = a(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  function hcl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n          c = nogamma(start.c, end.c),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.c = c(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hcl$1 = hcl(hue);\n  var hclLong = hcl(nogamma);\n\n  function cubehelix$1(hue) {\n    return (function cubehelixGamma(y) {\n      y = +y;\n\n      function cubehelix$$(start, end) {\n        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\n            s = nogamma(start.s, end.s),\n            l = nogamma(start.l, end.l),\n            opacity = nogamma(start.opacity, end.opacity);\n        return function(t) {\n          start.h = h(t);\n          start.s = s(t);\n          start.l = l(Math.pow(t, y));\n          start.opacity = opacity(t);\n          return start + \"\";\n        };\n      }\n\n      cubehelix$$.gamma = cubehelixGamma;\n\n      return cubehelix$$;\n    })(1);\n  }\n\n  var cubehelix$2 = cubehelix$1(hue);\n  var interpolateCubehelixLong = cubehelix$1(nogamma);\n\n  function quantize(interpolator, n) {\n    var samples = new Array(n);\n    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n    return samples;\n  }\n\n  var noop$1 = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set$1(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"]\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function(row, i) {\n      return f(object(row), i, columns);\n    };\n  }\n\n  // Compute unique columns in order of discovery.\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n\n    rows.forEach(function(row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n\n    return columns;\n  }\n\n  function dsv(delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n]\"),\n        delimiterCode = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert, columns, rows = parseRows(text, function(row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns;\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var EOL = {}, // sentinel value for end-of-line\n          EOF = {}, // sentinel value for end-of-file\n          rows = [], // output rows\n          N = text.length,\n          I = 0, // current character index\n          n = 0, // the current line number\n          t, // the current token\n          eol; // is the current token followed by EOL?\n\n      function token() {\n        if (I >= N) return EOF; // special case: end of file\n        if (eol) return eol = false, EOL; // special case: end of line\n\n        // special case: quotes\n        var j = I, c;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, \"\\\"\");\n        }\n\n        // common case: find next delimiter or newline\n        while (I < N) {\n          var k = 1;\n          c = text.charCodeAt(I++);\n          if (c === 10) eol = true; // \\n\n          else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \\r|\\r\\n\n          else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n\n        // special case: last token before EOF\n        return text.slice(j);\n      }\n\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n\n      return rows;\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n        return columns.map(function(column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(text) {\n      return text == null ? \"\"\n          : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\\\"/g, \"\\\"\\\"\") + \"\\\"\"\n          : text;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatRows: formatRows\n    };\n  }\n\n  var csv = dsv(\",\");\n\n  var csvParse = csv.parse;\n  var csvParseRows = csv.parseRows;\n  var csvFormat = csv.format;\n  var csvFormatRows = csv.formatRows;\n\n  var tsv = dsv(\"\\t\");\n\n  var tsvParse = tsv.parse;\n  var tsvParseRows = tsv.parseRows;\n  var tsvFormat = tsv.format;\n  var tsvFormatRows = tsv.formatRows;\n\n  function request(url, callback) {\n    var request,\n        event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n        mimeType,\n        headers = map$1(),\n        xhr = new XMLHttpRequest,\n        user = null,\n        password = null,\n        response,\n        responseType,\n        timeout = 0;\n\n    // If IE does not support CORS, use XDomainRequest.\n    if (typeof XDomainRequest !== \"undefined\"\n        && !(\"withCredentials\" in xhr)\n        && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n    \"onload\" in xhr\n        ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n        : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n    function respond(o) {\n      var status = xhr.status, result;\n      if (!status && hasResponse(xhr)\n          || status >= 200 && status < 300\n          || status === 304) {\n        if (response) {\n          try {\n            result = response.call(request, xhr);\n          } catch (e) {\n            event.call(\"error\", request, e);\n            return;\n          }\n        } else {\n          result = xhr;\n        }\n        event.call(\"load\", request, result);\n      } else {\n        event.call(\"error\", request, o);\n      }\n    }\n\n    xhr.onprogress = function(e) {\n      event.call(\"progress\", request, e);\n    };\n\n    request = {\n      header: function(name, value) {\n        name = (name + \"\").toLowerCase();\n        if (arguments.length < 2) return headers.get(name);\n        if (value == null) headers.remove(name);\n        else headers.set(name, value + \"\");\n        return request;\n      },\n\n      // If mimeType is non-null and no Accept header is set, a default is used.\n      mimeType: function(value) {\n        if (!arguments.length) return mimeType;\n        mimeType = value == null ? null : value + \"\";\n        return request;\n      },\n\n      // Specifies what type the response value should take;\n      // for instance, arraybuffer, blob, document, or text.\n      responseType: function(value) {\n        if (!arguments.length) return responseType;\n        responseType = value;\n        return request;\n      },\n\n      timeout: function(value) {\n        if (!arguments.length) return timeout;\n        timeout = +value;\n        return request;\n      },\n\n      user: function(value) {\n        return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n      },\n\n      password: function(value) {\n        return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n      },\n\n      // Specify how to convert the response content to a specific type;\n      // changes the callback value on \"load\" events.\n      response: function(value) {\n        response = value;\n        return request;\n      },\n\n      // Alias for send(\"GET\", …).\n      get: function(data, callback) {\n        return request.send(\"GET\", data, callback);\n      },\n\n      // Alias for send(\"POST\", …).\n      post: function(data, callback) {\n        return request.send(\"POST\", data, callback);\n      },\n\n      // If callback is non-null, it will be used for error and load events.\n      send: function(method, data, callback) {\n        xhr.open(method, url, true, user, password);\n        if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n        if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n        if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n        if (responseType != null) xhr.responseType = responseType;\n        if (timeout > 0) xhr.timeout = timeout;\n        if (callback == null && typeof data === \"function\") callback = data, data = null;\n        if (callback != null && callback.length === 1) callback = fixCallback(callback);\n        if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n        event.call(\"beforesend\", request, xhr);\n        xhr.send(data == null ? null : data);\n        return request;\n      },\n\n      abort: function() {\n        xhr.abort();\n        return request;\n      },\n\n      on: function() {\n        var value = event.on.apply(event, arguments);\n        return value === event ? request : value;\n      }\n    };\n\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return request.get(callback);\n    }\n\n    return request;\n  }\n\n  function fixCallback(callback) {\n    return function(error, xhr) {\n      callback(error == null ? xhr : null);\n    };\n  }\n\n  function hasResponse(xhr) {\n    var type = xhr.responseType;\n    return type && type !== \"text\"\n        ? xhr.response // null on error\n        : xhr.responseText; // \"\" on error\n  }\n\n  function type(defaultMimeType, response) {\n    return function(url, callback) {\n      var r = request(url).mimeType(defaultMimeType).response(response);\n      if (callback != null) {\n        if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n        return r.get(callback);\n      }\n      return r;\n    };\n  }\n\n  var html = type(\"text/html\", function(xhr) {\n    return document.createRange().createContextualFragment(xhr.responseText);\n  });\n\n  var json = type(\"application/json\", function(xhr) {\n    return JSON.parse(xhr.responseText);\n  });\n\n  var text = type(\"text/plain\", function(xhr) {\n    return xhr.responseText;\n  });\n\n  var xml = type(\"application/xml\", function(xhr) {\n    var xml = xhr.responseXML;\n    if (!xml) throw new Error(\"parse error\");\n    return xml;\n  });\n\n  function dsv$1(defaultMimeType, parse) {\n    return function(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var r = request(url).mimeType(defaultMimeType);\n      r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n      r.row(row);\n      return callback ? r.get(callback) : r;\n    };\n  }\n\n  function responseOf(parse, row) {\n    return function(request) {\n      return parse(request.responseText, row);\n    };\n  }\n\n  var csv$1 = dsv$1(\"text/csv\", csvParse);\n\n  var tsv$1 = dsv$1(\"text/tab-separated-values\", tsvParse);\n\n  var frame = 0;\n  var timeout = 0;\n  var interval = 0;\n  var pokeDelay = 1000;\n  var taskHead;\n  var taskTail;\n  var clockLast = 0;\n  var clockNow = 0;\n  var clockSkew = 0;\n  var clock = typeof performance === \"object\" && performance.now ? performance : Date;\n  var setFrame = typeof requestAnimationFrame === \"function\"\n          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n          : function(f) { setTimeout(f, 17); };\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call =\n    this._time =\n    this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;\n        else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer;\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead, e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake(time) {\n    clockNow = (clockLast = time || clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke$1() {\n    var now = clock.now(), delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0, t1 = taskHead, t2, time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow;\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, delay);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) interval = setInterval(poke$1, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function timeout$1(callback, delay, time) {\n    var t = new Timer;\n    delay = delay == null ? 0 : +delay;\n    t.restart(function(elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  }\n\n  function interval$1(callback, delay, time) {\n    var t = new Timer, total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  }\n\nvar   t0$1 = new Date;\nvar   t1$1 = new Date;\n  function newInterval(floori, offseti, count, field) {\n\n    function interval(date) {\n      return floori(date = new Date(+date)), date;\n    }\n\n    interval.floor = interval;\n\n    interval.ceil = function(date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n\n    interval.round = function(date) {\n      var d0 = interval(date),\n          d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n\n    interval.offset = function(date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n\n    interval.range = function(start, stop, step) {\n      var range = [];\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)\n      return range;\n    };\n\n    interval.filter = function(test) {\n      return newInterval(function(date) {\n        while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function(date, step) {\n        while (--step >= 0) while (offseti(date, 1), !test(date));\n      });\n    };\n\n    if (count) {\n      interval.count = function(start, end) {\n        t0$1.setTime(+start), t1$1.setTime(+end);\n        floori(t0$1), floori(t1$1);\n        return Math.floor(count(t0$1, t1$1));\n      };\n\n      interval.every = function(step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null\n            : !(step > 1) ? interval\n            : interval.filter(field\n                ? function(d) { return field(d) % step === 0; }\n                : function(d) { return interval.count(0, d) % step === 0; });\n      };\n    }\n\n    return interval;\n  }\n\n  var millisecond = newInterval(function() {\n    // noop\n  }, function(date, step) {\n    date.setTime(+date + step);\n  }, function(start, end) {\n    return end - start;\n  });\n\n  // An optimized implementation for this simple case.\n  millisecond.every = function(k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function(date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function(date, step) {\n      date.setTime(+date + step * k);\n    }, function(start, end) {\n      return (end - start) / k;\n    });\n  };\n\n  var milliseconds = millisecond.range;\n\n  var durationSecond = 1e3;\n  var durationMinute = 6e4;\n  var durationHour = 36e5;\n  var durationDay = 864e5;\n  var durationWeek = 6048e5;\n\n  var second = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationSecond) * durationSecond);\n  }, function(date, step) {\n    date.setTime(+date + step * durationSecond);\n  }, function(start, end) {\n    return (end - start) / durationSecond;\n  }, function(date) {\n    return date.getUTCSeconds();\n  });\n\n  var seconds = second.range;\n\n  var minute = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationMinute) * durationMinute);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getMinutes();\n  });\n\n  var minutes = minute.range;\n\n  var hour = newInterval(function(date) {\n    var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n    if (offset < 0) offset += durationHour;\n    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getHours();\n  });\n\n  var hours = hour.range;\n\n  var day = newInterval(function(date) {\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n\n  var days = day.range;\n\n  function weekday(i) {\n    return newInterval(function(date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function(start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n    });\n  }\n\n  var timeWeek = weekday(0);\n  var timeMonday = weekday(1);\n  var tuesday = weekday(2);\n  var wednesday = weekday(3);\n  var thursday = weekday(4);\n  var friday = weekday(5);\n  var saturday = weekday(6);\n\n  var sundays = timeWeek.range;\n  var mondays = timeMonday.range;\n  var tuesdays = tuesday.range;\n  var wednesdays = wednesday.range;\n  var thursdays = thursday.range;\n  var fridays = friday.range;\n  var saturdays = saturday.range;\n\n  var month = newInterval(function(date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function(start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function(date) {\n    return date.getMonth();\n  });\n\n  var months = month.range;\n\n  var year = newInterval(function(date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function(start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function(date) {\n    return date.getFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  year.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n\n  var years = year.range;\n\n  var utcMinute = newInterval(function(date) {\n    date.setUTCSeconds(0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getUTCMinutes();\n  });\n\n  var utcMinutes = utcMinute.range;\n\n  var utcHour = newInterval(function(date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getUTCHours();\n  });\n\n  var utcHours = utcHour.range;\n\n  var utcDay = newInterval(function(date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function(start, end) {\n    return (end - start) / durationDay;\n  }, function(date) {\n    return date.getUTCDate() - 1;\n  });\n\n  var utcDays = utcDay.range;\n\n  function utcWeekday(i) {\n    return newInterval(function(date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function(start, end) {\n      return (end - start) / durationWeek;\n    });\n  }\n\n  var utcWeek = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  var utcTuesday = utcWeekday(2);\n  var utcWednesday = utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  var utcFriday = utcWeekday(5);\n  var utcSaturday = utcWeekday(6);\n\n  var utcSundays = utcWeek.range;\n  var utcMondays = utcMonday.range;\n  var utcTuesdays = utcTuesday.range;\n  var utcWednesdays = utcWednesday.range;\n  var utcThursdays = utcThursday.range;\n  var utcFridays = utcFriday.range;\n  var utcSaturdays = utcSaturday.range;\n\n  var utcMonth = newInterval(function(date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function(start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function(date) {\n    return date.getUTCMonth();\n  });\n\n  var utcMonths = utcMonth.range;\n\n  var utcYear = newInterval(function(date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function(start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function(date) {\n    return date.getUTCFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  utcYear.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n\n  var utcYears = utcYear.range;\n\n  // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\n  function formatDecimal(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n    var i, coefficient = x.slice(0, i);\n\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [\n      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n      +x.slice(i + 1)\n    ];\n  }\n\n  function exponent$1(x) {\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n  }\n\n  function formatGroup(grouping, thousands) {\n    return function(value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = grouping[0],\n          length = 0;\n\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n\n      return t.reverse().join(thousands);\n    };\n  }\n\n  function formatDefault(x, p) {\n    x = x.toPrecision(p);\n\n    out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (x[i]) {\n        case \".\": i0 = i1 = i; break;\n        case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n        case \"e\": break out;\n        default: if (i0 > 0) i0 = 0; break;\n      }\n    }\n\n    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n  }\n\n  var prefixExponent;\n\n  function formatPrefixAuto(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1],\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n        n = coefficient.length;\n    return i === n ? coefficient\n        : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n        : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n        : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  }\n\n  function formatRounded(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n        : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  }\n\n  var formatTypes = {\n    \"\": formatDefault,\n    \"%\": function(x, p) { return (x * 100).toFixed(p); },\n    \"b\": function(x) { return Math.round(x).toString(2); },\n    \"c\": function(x) { return x + \"\"; },\n    \"d\": function(x) { return Math.round(x).toString(10); },\n    \"e\": function(x, p) { return x.toExponential(p); },\n    \"f\": function(x, p) { return x.toFixed(p); },\n    \"g\": function(x, p) { return x.toPrecision(p); },\n    \"o\": function(x) { return Math.round(x).toString(8); },\n    \"p\": function(x, p) { return formatRounded(x * 100, p); },\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n    \"x\": function(x) { return Math.round(x).toString(16); }\n  };\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\n  function formatSpecifier(specifier) {\n    return new FormatSpecifier(specifier);\n  }\n\n  function FormatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n    var match,\n        fill = match[1] || \" \",\n        align = match[2] || \">\",\n        sign = match[3] || \"-\",\n        symbol = match[4] || \"\",\n        zero = !!match[5],\n        width = match[6] && +match[6],\n        comma = !!match[7],\n        precision = match[8] && +match[8].slice(1),\n        type = match[9] || \"\";\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // Map invalid types to the default format.\n    else if (!formatTypes[type]) type = \"\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    this.fill = fill;\n    this.align = align;\n    this.sign = sign;\n    this.symbol = symbol;\n    this.zero = zero;\n    this.width = width;\n    this.comma = comma;\n    this.precision = precision;\n    this.type = type;\n  }\n\n  FormatSpecifier.prototype.toString = function() {\n    return this.fill\n        + this.align\n        + this.sign\n        + this.symbol\n        + (this.zero ? \"0\" : \"\")\n        + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n        + (this.comma ? \",\" : \"\")\n        + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n        + this.type;\n  };\n\n  var prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\n  function identity$3(x) {\n    return x;\n  }\n\n  function formatLocale(locale) {\n    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,\n        currency = locale.currency,\n        decimal = locale.decimal;\n\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n\n      var fill = specifier.fill,\n          align = specifier.align,\n          sign = specifier.sign,\n          symbol = specifier.symbol,\n          zero = specifier.zero,\n          width = specifier.width,\n          comma = specifier.comma,\n          precision = specifier.precision,\n          type = specifier.type;\n\n      // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n      var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n          suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? \"%\" : \"\";\n\n      // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n      var formatType = formatTypes[type],\n          maybeSuffix = !type || /[defgprs%]/.test(type);\n\n      // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n      precision = precision == null ? (type ? 6 : 12)\n          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n          : Math.max(0, Math.min(20, precision));\n\n      function format(value) {\n        var valuePrefix = prefix,\n            valueSuffix = suffix,\n            i, n, c;\n\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value;\n\n          // Convert negative to positive, and compute the prefix.\n          // Note that -0 is not less than 0, but 1 / -0 is!\n          var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);\n\n          // Perform the initial formatting.\n          value = formatType(value, precision);\n\n          // If the original value was negative, it may be rounded to zero during\n          // formatting; treat this as (positive) zero.\n          if (valueNegative) {\n            i = -1, n = value.length;\n            valueNegative = false;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), (48 < c && c < 58)\n                  || (type === \"x\" && 96 < c && c < 103)\n                  || (type === \"X\" && 64 < c && c < 71)) {\n                valueNegative = true;\n                break;\n              }\n            }\n          }\n\n          // Compute the prefix and suffix.\n          valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n          valueSuffix = valueSuffix + (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n          // Break the formatted value into the integer “value” part that can be\n          // grouped, and fractional or exponential “suffix” part that is not.\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        }\n\n        // If the fill character is not \"0\", grouping is applied before padding.\n        if (comma && !zero) value = group(value, Infinity);\n\n        // Compute the padding.\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n        // If the fill character is \"0\", grouping is applied after padding.\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n        // Reconstruct the final output based on the desired alignment.\n        switch (align) {\n          case \"<\": return valuePrefix + value + valueSuffix + padding;\n          case \"=\": return valuePrefix + padding + value + valueSuffix;\n          case \"^\": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n        }\n        return padding + valuePrefix + value + valueSuffix;\n      }\n\n      format.toString = function() {\n        return specifier + \"\";\n      };\n\n      return format;\n    }\n\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n          e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,\n          k = Math.pow(10, -e),\n          prefix = prefixes[8 + e / 3];\n      return function(value) {\n        return f(k * value) + prefix;\n      };\n    }\n\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  }\n\n  var locale;\n  exports.format;\n  exports.formatPrefix;\n\n  defaultLocale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"]\n  });\n\n  function defaultLocale(definition) {\n    locale = formatLocale(definition);\n    exports.format = locale.format;\n    exports.formatPrefix = locale.formatPrefix;\n    return locale;\n  }\n\n  function precisionFixed(step) {\n    return Math.max(0, -exponent$1(Math.abs(step)));\n  }\n\n  function precisionPrefix(step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));\n  }\n\n  function precisionRound(step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;\n  }\n\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n\n  function newYear(y) {\n    return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n  }\n\n  function formatLocale$1(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_weekdays = locale.days,\n        locale_shortWeekdays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n\n    var periodRe = formatRe(locale_periods),\n        periodLookup = formatLookup(locale_periods),\n        weekdayRe = formatRe(locale_weekdays),\n        weekdayLookup = formatLookup(locale_weekdays),\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n        monthRe = formatRe(locale_months),\n        monthLookup = formatLookup(locale_months),\n        shortMonthRe = formatRe(locale_shortMonths),\n        shortMonthLookup = formatLookup(locale_shortMonths);\n\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"S\": formatSeconds,\n      \"U\": formatWeekNumberSunday,\n      \"w\": formatWeekdayNumber,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"S\": formatUTCSeconds,\n      \"U\": formatUTCWeekNumberSunday,\n      \"w\": formatUTCWeekdayNumber,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"S\": parseSeconds,\n      \"U\": parseWeekNumberSunday,\n      \"w\": parseWeekdayNumber,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    };\n\n    // These recursive directive definitions must be deferred.\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n    function newFormat(specifier, formats) {\n      return function(date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            n = specifier.length,\n            c,\n            pad,\n            format;\n\n        if (!(date instanceof Date)) date = new Date(+date);\n\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n            else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n\n    function newParse(specifier, newDate) {\n      return function(string) {\n        var d = newYear(1900),\n            i = parseSpecifier(d, specifier, string += \"\", 0);\n        if (i != string.length) return null;\n\n        // The am-pm flag is 0 for AM, and 1 for PM.\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n        // Convert day-of-week and week-of-year to day-of-year.\n        if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          var day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n        }\n\n        // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        }\n\n        // Otherwise, all fields are in local time.\n        return newDate(d);\n      };\n    }\n\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n          n = specifier.length,\n          m = string.length,\n          c,\n          parse;\n\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n\n      return j;\n    }\n\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n\n    return {\n      format: function(specifier) {\n        var f = newFormat(specifier += \"\", formats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      parse: function(specifier) {\n        var p = newParse(specifier += \"\", localDate);\n        p.toString = function() { return specifier; };\n        return p;\n      },\n      utcFormat: function(specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      utcParse: function(specifier) {\n        var p = newParse(specifier, utcDate);\n        p.toString = function() { return specifier; };\n        return p;\n      }\n    };\n  }\n\n  var pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"};\n  var numberRe = /^\\s*\\d+/;\n  var percentRe = /^%/;\n  var requoteRe = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  function pad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n        string = (sign ? -value : value) + \"\",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function formatLookup(names) {\n    var map = {}, i = -1, n = names.length;\n    while (++i < n) map[names[i].toLowerCase()] = i;\n    return map;\n  }\n\n  function parseWeekdayNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?:\\:?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n\n  function formatDayOfMonth(d, p) {\n    return pad(d.getDate(), p, 2);\n  }\n\n  function formatHour24(d, p) {\n    return pad(d.getHours(), p, 2);\n  }\n\n  function formatHour12(d, p) {\n    return pad(d.getHours() % 12 || 12, p, 2);\n  }\n\n  function formatDayOfYear(d, p) {\n    return pad(1 + day.count(year(d), d), p, 3);\n  }\n\n  function formatMilliseconds(d, p) {\n    return pad(d.getMilliseconds(), p, 3);\n  }\n\n  function formatMonthNumber(d, p) {\n    return pad(d.getMonth() + 1, p, 2);\n  }\n\n  function formatMinutes(d, p) {\n    return pad(d.getMinutes(), p, 2);\n  }\n\n  function formatSeconds(d, p) {\n    return pad(d.getSeconds(), p, 2);\n  }\n\n  function formatWeekNumberSunday(d, p) {\n    return pad(timeWeek.count(year(d), d), p, 2);\n  }\n\n  function formatWeekdayNumber(d) {\n    return d.getDay();\n  }\n\n  function formatWeekNumberMonday(d, p) {\n    return pad(timeMonday.count(year(d), d), p, 2);\n  }\n\n  function formatYear(d, p) {\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatFullYear(d, p) {\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n        + pad(z / 60 | 0, \"0\", 2)\n        + pad(z % 60, \"0\", 2);\n  }\n\n  function formatUTCDayOfMonth(d, p) {\n    return pad(d.getUTCDate(), p, 2);\n  }\n\n  function formatUTCHour24(d, p) {\n    return pad(d.getUTCHours(), p, 2);\n  }\n\n  function formatUTCHour12(d, p) {\n    return pad(d.getUTCHours() % 12 || 12, p, 2);\n  }\n\n  function formatUTCDayOfYear(d, p) {\n    return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n  }\n\n  function formatUTCMilliseconds(d, p) {\n    return pad(d.getUTCMilliseconds(), p, 3);\n  }\n\n  function formatUTCMonthNumber(d, p) {\n    return pad(d.getUTCMonth() + 1, p, 2);\n  }\n\n  function formatUTCMinutes(d, p) {\n    return pad(d.getUTCMinutes(), p, 2);\n  }\n\n  function formatUTCSeconds(d, p) {\n    return pad(d.getUTCSeconds(), p, 2);\n  }\n\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad(utcWeek.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCWeekdayNumber(d) {\n    return d.getUTCDay();\n  }\n\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad(utcMonday.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCYear(d, p) {\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCFullYear(d, p) {\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n\n  var locale$1;\n  exports.timeFormat;\n  exports.timeParse;\n  exports.utcFormat;\n  exports.utcParse;\n\n  defaultLocale$1({\n    dateTime: \"%x, %X\",\n    date: \"%-m/%-d/%Y\",\n    time: \"%-I:%M:%S %p\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n\n  function defaultLocale$1(definition) {\n    locale$1 = formatLocale$1(definition);\n    exports.timeFormat = locale$1.format;\n    exports.timeParse = locale$1.parse;\n    exports.utcFormat = locale$1.utcFormat;\n    exports.utcParse = locale$1.utcParse;\n    return locale$1;\n  }\n\n  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\n  function formatIsoNative(date) {\n    return date.toISOString();\n  }\n\n  var formatIso = Date.prototype.toISOString\n      ? formatIsoNative\n      : exports.utcFormat(isoSpecifier);\n\n  function parseIsoNative(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  }\n\n  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n      ? parseIsoNative\n      : exports.utcParse(isoSpecifier);\n\n  var array$2 = Array.prototype;\n\n  var map$2 = array$2.map;\n  var slice$3 = array$2.slice;\n\n  var implicit = {name: \"implicit\"};\n\n  function ordinal(range) {\n    var index = map$1(),\n        domain = [],\n        unknown = implicit;\n\n    range = range == null ? [] : slice$3.call(range);\n\n    function scale(d) {\n      var key = d + \"\", i = index.get(key);\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n      return range[(i - 1) % range.length];\n    }\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = map$1();\n      var i = -1, n = _.length, d, key;\n      while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n      return scale;\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), scale) : range.slice();\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function() {\n      return ordinal()\n          .domain(domain)\n          .range(range)\n          .unknown(unknown);\n    };\n\n    return scale;\n  }\n\n  function band() {\n    var scale = ordinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range,\n        range$$ = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n\n    delete scale.unknown;\n\n    function rescale() {\n      var n = domain().length,\n          reverse = range$$[1] < range$$[0],\n          start = range$$[reverse - 0],\n          stop = range$$[1 - reverse];\n      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n      if (round) step = Math.floor(step);\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n      var values = range(n).map(function(i) { return start + step * i; });\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range$$ = [+_[0], +_[1]], rescale()) : range$$.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range$$ = [+_[0], +_[1]], round = true, rescale();\n    };\n\n    scale.bandwidth = function() {\n      return bandwidth;\n    };\n\n    scale.step = function() {\n      return step;\n    };\n\n    scale.round = function(_) {\n      return arguments.length ? (round = !!_, rescale()) : round;\n    };\n\n    scale.padding = function(_) {\n      return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingInner = function(_) {\n      return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingOuter = function(_) {\n      return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n    };\n\n    scale.align = function(_) {\n      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n    };\n\n    scale.copy = function() {\n      return band()\n          .domain(domain())\n          .range(range$$)\n          .round(round)\n          .paddingInner(paddingInner)\n          .paddingOuter(paddingOuter)\n          .align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    var copy = scale.copy;\n\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n    delete scale.paddingOuter;\n\n    scale.copy = function() {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point$4() {\n    return pointish(band().paddingInner(1));\n  }\n\n  function constant$3(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function number$1(x) {\n    return +x;\n  }\n\n  var unit = [0, 1];\n\n  function deinterpolate(a, b) {\n    return (b -= (a = +a))\n        ? function(x) { return (x - a) / b; }\n        : constant$3(b);\n  }\n\n  function deinterpolateClamp(deinterpolate) {\n    return function(a, b) {\n      var d = deinterpolate(a = +a, b = +b);\n      return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n    };\n  }\n\n  function reinterpolateClamp(reinterpolate) {\n    return function(a, b) {\n      var r = reinterpolate(a = +a, b = +b);\n      return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n    };\n  }\n\n  function bimap(domain, range, deinterpolate, reinterpolate) {\n    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n    if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n    else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n    return function(x) { return r0(d0(x)); };\n  }\n\n  function polymap(domain, range, deinterpolate, reinterpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n        d = new Array(j),\n        r = new Array(j),\n        i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n\n    while (++i < j) {\n      d[i] = deinterpolate(domain[i], domain[i + 1]);\n      r[i] = reinterpolate(range[i], range[i + 1]);\n    }\n\n    return function(x) {\n      var i = bisectRight(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n\n  function copy(source, target) {\n    return target\n        .domain(source.domain())\n        .range(source.range())\n        .interpolate(source.interpolate())\n        .clamp(source.clamp());\n  }\n\n  // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n  function continuous(deinterpolate$$, reinterpolate) {\n    var domain = unit,\n        range = unit,\n        interpolate$$ = interpolate,\n        clamp = false,\n        piecewise,\n        output,\n        input;\n\n    function rescale() {\n      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n\n    function scale(x) {\n      return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);\n    }\n\n    scale.invert = function(y) {\n      return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, rescale()) : clamp;\n    };\n\n    scale.interpolate = function(_) {\n      return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;\n    };\n\n    return rescale();\n  }\n\n  function tickFormat(domain, count, specifier) {\n    var start = domain[0],\n        stop = domain[domain.length - 1],\n        step = tickStep(start, stop, count == null ? 10 : count),\n        precision;\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\": {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n        return exports.formatPrefix(specifier, value);\n      }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\": {\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n        break;\n      }\n      case \"f\":\n      case \"%\": {\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n        break;\n      }\n    }\n    return exports.format(specifier);\n  }\n\n  function linearish(scale) {\n    var domain = scale.domain;\n\n    scale.ticks = function(count) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return tickFormat(domain(), count, specifier);\n    };\n\n    scale.nice = function(count) {\n      var d = domain(),\n          i = d.length - 1,\n          n = count == null ? 10 : count,\n          start = d[0],\n          stop = d[i],\n          step = tickStep(start, stop, n);\n\n      if (step) {\n        step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n        d[0] = Math.floor(start / step) * step;\n        d[i] = Math.ceil(stop / step) * step;\n        domain(d);\n      }\n\n      return scale;\n    };\n\n    return scale;\n  }\n\n  function linear$2() {\n    var scale = continuous(deinterpolate, interpolateNumber);\n\n    scale.copy = function() {\n      return copy(scale, linear$2());\n    };\n\n    return linearish(scale);\n  }\n\n  function identity$4() {\n    var domain = [0, 1];\n\n    function scale(x) {\n      return +x;\n    }\n\n    scale.invert = scale;\n\n    scale.domain = scale.range = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();\n    };\n\n    scale.copy = function() {\n      return identity$4().domain(domain);\n    };\n\n    return linearish(scale);\n  }\n\n  function nice(domain, interval) {\n    domain = domain.slice();\n\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        t;\n\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  }\n\n  function deinterpolate$1(a, b) {\n    return (b = Math.log(b / a))\n        ? function(x) { return Math.log(x / a) / b; }\n        : constant$3(b);\n  }\n\n  function reinterpolate(a, b) {\n    return a < 0\n        ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\n        : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\n  }\n\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n\n  function powp(base) {\n    return base === 10 ? pow10\n        : base === Math.E ? Math.exp\n        : function(x) { return Math.pow(base, x); };\n  }\n\n  function logp(base) {\n    return base === Math.E ? Math.log\n        : base === 10 && Math.log10\n        || base === 2 && Math.log2\n        || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n  }\n\n  function reflect(f) {\n    return function(x) {\n      return -f(-x);\n    };\n  }\n\n  function log() {\n    var scale = continuous(deinterpolate$1, reinterpolate).domain([1, 10]),\n        domain = scale.domain,\n        base = 10,\n        logs = logp(10),\n        pows = powp(10);\n\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n      if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n      return scale;\n    }\n\n    scale.base = function(_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.ticks = function(count) {\n      var d = domain(),\n          u = d[0],\n          v = d[d.length - 1],\n          r;\n\n      if (r = v < u) i = u, u = v, v = i;\n\n      var i = logs(u),\n          j = logs(v),\n          p,\n          k,\n          t,\n          n = count == null ? 10 : +count,\n          z = [];\n\n      if (!(base % 1) && j - i < n) {\n        i = Math.round(i) - 1, j = Math.round(j) + 1;\n        if (u > 0) for (; i < j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i < j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n      } else {\n        z = ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n\n      return r ? z.reverse() : z;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = exports.format(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n      return function(d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n\n    scale.nice = function() {\n      return domain(nice(domain(), {\n        floor: function(x) { return pows(Math.floor(logs(x))); },\n        ceil: function(x) { return pows(Math.ceil(logs(x))); }\n      }));\n    };\n\n    scale.copy = function() {\n      return copy(scale, log().base(base));\n    };\n\n    return scale;\n  }\n\n  function raise(x, exponent) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  }\n\n  function pow() {\n    var exponent = 1,\n        scale = continuous(deinterpolate, reinterpolate),\n        domain = scale.domain;\n\n    function deinterpolate(a, b) {\n      return (b = raise(b, exponent) - (a = raise(a, exponent)))\n          ? function(x) { return (raise(x, exponent) - a) / b; }\n          : constant$3(b);\n    }\n\n    function reinterpolate(a, b) {\n      b = raise(b, exponent) - (a = raise(a, exponent));\n      return function(t) { return raise(a + b * t, 1 / exponent); };\n    }\n\n    scale.exponent = function(_) {\n      return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n    };\n\n    scale.copy = function() {\n      return copy(scale, pow().exponent(exponent));\n    };\n\n    return linearish(scale);\n  }\n\n  function sqrt() {\n    return pow().exponent(0.5);\n  }\n\n  function quantile() {\n    var domain = [],\n        range = [],\n        thresholds = [];\n\n    function rescale() {\n      var i = 0, n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n      return scale;\n    }\n\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];\n    }\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [\n        i > 0 ? thresholds[i - 1] : domain[0],\n        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n      ];\n    };\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(ascending);\n      return rescale();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.quantiles = function() {\n      return thresholds.slice();\n    };\n\n    scale.copy = function() {\n      return quantile()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\n  function quantize$1() {\n    var x0 = 0,\n        x1 = 1,\n        n = 1,\n        domain = [0.5],\n        range = [0, 1];\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      return scale;\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN]\n          : i < 1 ? [x0, domain[0]]\n          : i >= n ? [domain[n - 1], x1]\n          : [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return quantize$1()\n          .domain([x0, x1])\n          .range(range);\n    };\n\n    return linearish(scale);\n  }\n\n  function threshold$1() {\n    var domain = [0.5],\n        range = [0, 1],\n        n = 1;\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return threshold$1()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\nvar   durationSecond$1 = 1000;\nvar   durationMinute$1 = durationSecond$1 * 60;\nvar   durationHour$1 = durationMinute$1 * 60;\nvar   durationDay$1 = durationHour$1 * 24;\nvar   durationWeek$1 = durationDay$1 * 7;\n  var durationMonth = durationDay$1 * 30;\n  var durationYear = durationDay$1 * 365;\n  function date$1(t) {\n    return new Date(t);\n  }\n\n  function number$2(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n    var scale = continuous(deinterpolate, interpolateNumber),\n        invert = scale.invert,\n        domain = scale.domain;\n\n    var formatMillisecond = format(\".%L\"),\n        formatSecond = format(\":%S\"),\n        formatMinute = format(\"%I:%M\"),\n        formatHour = format(\"%I %p\"),\n        formatDay = format(\"%a %d\"),\n        formatWeek = format(\"%b %d\"),\n        formatMonth = format(\"%B\"),\n        formatYear = format(\"%Y\");\n\n    var tickIntervals = [\n      [second,  1,      durationSecond$1],\n      [second,  5,  5 * durationSecond$1],\n      [second, 15, 15 * durationSecond$1],\n      [second, 30, 30 * durationSecond$1],\n      [minute,  1,      durationMinute$1],\n      [minute,  5,  5 * durationMinute$1],\n      [minute, 15, 15 * durationMinute$1],\n      [minute, 30, 30 * durationMinute$1],\n      [  hour,  1,      durationHour$1  ],\n      [  hour,  3,  3 * durationHour$1  ],\n      [  hour,  6,  6 * durationHour$1  ],\n      [  hour, 12, 12 * durationHour$1  ],\n      [   day,  1,      durationDay$1   ],\n      [   day,  2,  2 * durationDay$1   ],\n      [  week,  1,      durationWeek$1  ],\n      [ month,  1,      durationMonth ],\n      [ month,  3,  3 * durationMonth ],\n      [  year,  1,      durationYear  ]\n    ];\n\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond\n          : minute(date) < date ? formatSecond\n          : hour(date) < date ? formatMinute\n          : day(date) < date ? formatHour\n          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n          : year(date) < date ? formatMonth\n          : formatYear)(date);\n    }\n\n    function tickInterval(interval, start, stop, step) {\n      if (interval == null) interval = 10;\n\n      // If a desired tick count is specified, pick a reasonable tick interval\n      // based on the extent of the domain and a rough estimate of tick size.\n      // Otherwise, assume interval is already a time interval and use it.\n      if (typeof interval === \"number\") {\n        var target = Math.abs(stop - start) / interval,\n            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n        if (i === tickIntervals.length) {\n          step = tickStep(start / durationYear, stop / durationYear, interval);\n          interval = year;\n        } else if (i) {\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n          step = i[1];\n          interval = i[0];\n        } else {\n          step = tickStep(start, stop, interval);\n          interval = millisecond;\n        }\n      }\n\n      return step == null ? interval : interval.every(step);\n    }\n\n    scale.invert = function(y) {\n      return new Date(invert(y));\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);\n    };\n\n    scale.ticks = function(interval, step) {\n      var d = domain(),\n          t0 = d[0],\n          t1 = d[d.length - 1],\n          r = t1 < t0,\n          t;\n      if (r) t = t0, t0 = t1, t1 = t;\n      t = tickInterval(interval, t0, t1, step);\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n      return r ? t.reverse() : t;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return specifier == null ? tickFormat : format(specifier);\n    };\n\n    scale.nice = function(interval, step) {\n      var d = domain();\n      return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n          ? domain(nice(d, interval))\n          : scale;\n    };\n\n    scale.copy = function() {\n      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n    };\n\n    return scale;\n  }\n\n  function time() {\n    return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n  }\n\n  function utcTime() {\n    return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n  }\n\n  function colors(s) {\n    return s.match(/.{6}/g).map(function(x) {\n      return \"#\" + x;\n    });\n  }\n\n  var category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n\n  var category20b = colors(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\");\n\n  var category20c = colors(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\");\n\n  var category20 = colors(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\");\n\n  var cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n\n  var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var rainbow = cubehelix();\n\n  function rainbow$1(t) {\n    if (t < 0 || t > 1) t -= Math.floor(t);\n    var ts = Math.abs(t - 0.5);\n    rainbow.h = 360 * t - 100;\n    rainbow.s = 1.5 - 1.5 * ts;\n    rainbow.l = 0.8 - 0.9 * ts;\n    return rainbow + \"\";\n  }\n\n  function ramp(range) {\n    var n = range.length;\n    return function(t) {\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n    };\n  }\n\n  var viridis = ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\n  var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\n  var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\n  var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n\n  function sequential(interpolator) {\n    var x0 = 0,\n        x1 = 1,\n        clamp = false;\n\n    function scale(x) {\n      var t = (x - x0) / (x1 - x0);\n      return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function(_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    scale.copy = function() {\n      return sequential(interpolator).domain([x0, x1]).clamp(clamp);\n    };\n\n    return linearish(scale);\n  }\n\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n\n  function namespace(name) {\n    var prefix = name += \"\", i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n  }\n\n  function creatorInherit(name) {\n    return function() {\n      var document = this.ownerDocument,\n          uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml\n          ? document.createElement(name)\n          : document.createElementNS(uri, name);\n    };\n  }\n\n  function creatorFixed(fullname) {\n    return function() {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n\n  function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local\n        ? creatorFixed\n        : creatorInherit)(fullname);\n  }\n\n  var nextId = 0;\n\n  function local() {\n    return new Local;\n  }\n\n  function Local() {\n    this._ = \"@\" + (++nextId).toString(36);\n  }\n\n  Local.prototype = local.prototype = {\n    constructor: Local,\n    get: function(node) {\n      var id = this._;\n      while (!(id in node)) if (!(node = node.parentNode)) return;\n      return node[id];\n    },\n    set: function(node, value) {\n      return node[this._] = value;\n    },\n    remove: function(node) {\n      return this._ in node && delete node[this._];\n    },\n    toString: function() {\n      return this._;\n    }\n  };\n\n  var matcher = function(selector) {\n    return function() {\n      return this.matches(selector);\n    };\n  };\n\n  if (typeof document !== \"undefined\") {\n    var element = document.documentElement;\n    if (!element.matches) {\n      var vendorMatches = element.webkitMatchesSelector\n          || element.msMatchesSelector\n          || element.mozMatchesSelector\n          || element.oMatchesSelector;\n      matcher = function(selector) {\n        return function() {\n          return vendorMatches.call(this, selector);\n        };\n      };\n    }\n  }\n\n  var matcher$1 = matcher;\n\n  var filterEvents = {};\n\n  exports.event = null;\n\n  if (typeof document !== \"undefined\") {\n    var element$1 = document.documentElement;\n    if (!(\"onmouseenter\" in element$1)) {\n      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n    }\n  }\n\n  function filterContextListener(listener, index, group) {\n    listener = contextListener(listener, index, group);\n    return function(event) {\n      var related = event.relatedTarget;\n      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n        listener.call(this, event);\n      }\n    };\n  }\n\n  function contextListener(listener, index, group) {\n    return function(event1) {\n      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n      exports.event = event1;\n      try {\n        listener.call(this, this.__data__, index, group);\n      } finally {\n        exports.event = event0;\n      }\n    };\n  }\n\n  function parseTypenames$1(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return {type: t, name: name};\n    });\n  }\n\n  function onRemove(typename) {\n    return function() {\n      var on = this.__on;\n      if (!on) return;\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n        } else {\n          on[++i] = o;\n        }\n      }\n      if (++i) on.length = i;\n      else delete this.__on;\n    };\n  }\n\n  function onAdd(typename, value, capture) {\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n    return function(d, i, group) {\n      var on = this.__on, o, listener = wrap(value, i, group);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, capture);\n      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n      if (!on) this.__on = [o];\n      else on.push(o);\n    };\n  }\n\n  function selection_on(typename, value, capture) {\n    var typenames = parseTypenames$1(typename + \"\"), i, n = typenames.length, t;\n\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n\n    on = value ? onAdd : onRemove;\n    if (capture == null) capture = false;\n    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n    return this;\n  }\n\n  function customEvent(event1, listener, that, args) {\n    var event0 = exports.event;\n    event1.sourceEvent = exports.event;\n    exports.event = event1;\n    try {\n      return listener.apply(that, args);\n    } finally {\n      exports.event = event0;\n    }\n  }\n\n  function sourceEvent() {\n    var current = exports.event, source;\n    while (source = current.sourceEvent) current = source;\n    return current;\n  }\n\n  function point$5(node, event) {\n    var svg = node.ownerSVGElement || node;\n\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n\n    var rect = node.getBoundingClientRect();\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n  }\n\n  function mouse(node) {\n    var event = sourceEvent();\n    if (event.changedTouches) event = event.changedTouches[0];\n    return point$5(node, event);\n  }\n\n  function none$2() {}\n\n  function selector(selector) {\n    return selector == null ? none$2 : function() {\n      return this.querySelector(selector);\n    };\n  }\n\n  function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function empty() {\n    return [];\n  }\n\n  function selectorAll(selector) {\n    return selector == null ? empty : function() {\n      return this.querySelectorAll(selector);\n    };\n  }\n\n  function selection_selectAll(select) {\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, parents);\n  }\n\n  function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function sparse(update) {\n    return new Array(update.length);\n  }\n\n  function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  }\n\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n    querySelector: function(selector) { return this._parent.querySelector(selector); },\n    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n  };\n\n  function constant$4(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n        node,\n        groupLength = group.length,\n        dataLength = data.length;\n\n    // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Put any non-null nodes that don’t fit into exit.\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n        node,\n        nodeByKeyValue = {},\n        groupLength = group.length,\n        dataLength = data.length,\n        keyValues = new Array(groupLength),\n        keyValue;\n\n    // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n        if (keyValue in nodeByKeyValue) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue[keyValue] = node;\n        }\n      }\n    }\n\n    // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n      if (node = nodeByKeyValue[keyValue]) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[keyValue] = null;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Add any remaining nodes that were not bound to data to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function selection_data(value, key) {\n    if (!value) {\n      data = new Array(this.size()), j = -1;\n      this.each(function(d) { data[++j] = d; });\n      return data;\n    }\n\n    var bind = key ? bindKey : bindIndex,\n        parents = this._parents,\n        groups = this._groups;\n\n    if (typeof value !== \"function\") value = constant$4(value);\n\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n          group = groups[j],\n          groupLength = group.length,\n          data = value.call(parent, parent && parent.__data__, j, parents),\n          dataLength = data.length,\n          enterGroup = enter[j] = new Array(dataLength),\n          updateGroup = update[j] = new Array(dataLength),\n          exitGroup = exit[j] = new Array(groupLength);\n\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n      // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n          previous._next = next || null;\n        }\n      }\n    }\n\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  }\n\n  function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  }\n\n  function selection_merge(selection) {\n\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Selection(merges, this._parents);\n  }\n\n  function selection_order() {\n\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function selection_sort(compare) {\n    if (!compare) compare = ascending$2;\n\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n      sortgroup.sort(compareNode);\n    }\n\n    return new Selection(sortgroups, this._parents).order();\n  }\n\n  function ascending$2(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  }\n\n  function selection_nodes() {\n    var nodes = new Array(this.size()), i = -1;\n    this.each(function() { nodes[++i] = this; });\n    return nodes;\n  }\n\n  function selection_node() {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n\n    return null;\n  }\n\n  function selection_size() {\n    var size = 0;\n    this.each(function() { ++size; });\n    return size;\n  }\n\n  function selection_empty() {\n    return !this.node();\n  }\n\n  function selection_each(callback) {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n\n    return this;\n  }\n\n  function attrRemove(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, value) {\n    return function() {\n      this.setAttribute(name, value);\n    };\n  }\n\n  function attrConstantNS(fullname, value) {\n    return function() {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n\n  function attrFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);\n      else this.setAttribute(name, v);\n    };\n  }\n\n  function attrFunctionNS(fullname, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n      else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n\n  function selection_attr(name, value) {\n    var fullname = namespace(name);\n\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local\n          ? node.getAttributeNS(fullname.space, fullname.local)\n          : node.getAttribute(fullname);\n    }\n\n    return this.each((value == null\n        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS : attrFunction)\n        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n  }\n\n  function window(node) {\n    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n        || (node.document && node) // node is a Window\n        || node.defaultView; // node is a Document\n  }\n\n  function styleRemove(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, value, priority) {\n    return function() {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n\n  function styleFunction(name, value, priority) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);\n      else this.style.setProperty(name, v, priority);\n    };\n  }\n\n  function selection_style(name, value, priority) {\n    var node;\n    return arguments.length > 1\n        ? this.each((value == null\n              ? styleRemove : typeof value === \"function\"\n              ? styleFunction\n              : styleConstant)(name, value, priority == null ? \"\" : priority))\n        : window(node = this.node())\n            .getComputedStyle(node, null)\n            .getPropertyValue(name);\n  }\n\n  function propertyRemove(name) {\n    return function() {\n      delete this[name];\n    };\n  }\n\n  function propertyConstant(name, value) {\n    return function() {\n      this[name] = value;\n    };\n  }\n\n  function propertyFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];\n      else this[name] = v;\n    };\n  }\n\n  function selection_property(name, value) {\n    return arguments.length > 1\n        ? this.each((value == null\n            ? propertyRemove : typeof value === \"function\"\n            ? propertyFunction\n            : propertyConstant)(name, value))\n        : this.node()[name];\n  }\n\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n\n  ClassList.prototype = {\n    add: function(name) {\n      var i = this._names.indexOf(name);\n      if (i < 0) {\n        this._names.push(name);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function(name) {\n      var i = this._names.indexOf(name);\n      if (i >= 0) {\n        this._names.splice(i, 1);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n\n  function classedAdd(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.add(names[i]);\n  }\n\n  function classedRemove(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.remove(names[i]);\n  }\n\n  function classedTrue(names) {\n    return function() {\n      classedAdd(this, names);\n    };\n  }\n\n  function classedFalse(names) {\n    return function() {\n      classedRemove(this, names);\n    };\n  }\n\n  function classedFunction(names, value) {\n    return function() {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n\n  function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n      var list = classList(this.node()), i = -1, n = names.length;\n      while (++i < n) if (!list.contains(names[i])) return false;\n      return true;\n    }\n\n    return this.each((typeof value === \"function\"\n        ? classedFunction : value\n        ? classedTrue\n        : classedFalse)(names, value));\n  }\n\n  function textRemove() {\n    this.textContent = \"\";\n  }\n\n  function textConstant(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_text(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? textRemove : (typeof value === \"function\"\n            ? textFunction\n            : textConstant)(value))\n        : this.node().textContent;\n  }\n\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n\n  function htmlConstant(value) {\n    return function() {\n      this.innerHTML = value;\n    };\n  }\n\n  function htmlFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_html(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? htmlRemove : (typeof value === \"function\"\n            ? htmlFunction\n            : htmlConstant)(value))\n        : this.node().innerHTML;\n  }\n\n  function raise$1() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n\n  function selection_raise() {\n    return this.each(raise$1);\n  }\n\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  function selection_lower() {\n    return this.each(lower);\n  }\n\n  function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function() {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  }\n\n  function constantNull() {\n    return null;\n  }\n\n  function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function() {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  }\n\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n\n  function selection_remove() {\n    return this.each(remove);\n  }\n\n  function selection_datum(value) {\n    return arguments.length\n        ? this.property(\"__data__\", value)\n        : this.node().__data__;\n  }\n\n  function dispatchEvent(node, type, params) {\n    var window$$ = window(node),\n        event = window$$.CustomEvent;\n\n    if (event) {\n      event = new event(type, params);\n    } else {\n      event = window$$.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n      else event.initEvent(type, false, false);\n    }\n\n    node.dispatchEvent(event);\n  }\n\n  function dispatchConstant(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params);\n    };\n  }\n\n  function dispatchFunction(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n\n  function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\"\n        ? dispatchFunction\n        : dispatchConstant)(type, params));\n  }\n\n  var root = [null];\n\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n\n  Selection.prototype = selection.prototype = {\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    merge: selection_merge,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  };\n\n  function select(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n        : new Selection([[selector]], root);\n  }\n\n  function selectAll(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n        : new Selection([selector == null ? [] : selector], root);\n  }\n\n  function touch(node, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return point$5(node, touch);\n      }\n    }\n\n    return null;\n  }\n\n  function touches(node, touches) {\n    if (touches == null) touches = sourceEvent().touches;\n\n    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n      points[i] = point$5(node, touches[i]);\n    }\n\n    return points;\n  }\n\n  var emptyOn = dispatch(\"start\", \"end\", \"interrupt\");\n  var emptyTween = [];\n\n  var CREATED = 0;\n  var SCHEDULED = 1;\n  var STARTING = 2;\n  var STARTED = 3;\n  var ENDING = 4;\n  var ENDED = 5;\n\n  function schedule(node, name, id, index, group, timing) {\n    var schedules = node.__transition;\n    if (!schedules) node.__transition = {};\n    else if (id in schedules) return;\n    create(node, id, {\n      name: name,\n      index: index, // For context during callback.\n      group: group, // For context during callback.\n      on: emptyOn,\n      tween: emptyTween,\n      time: timing.time,\n      delay: timing.delay,\n      duration: timing.duration,\n      ease: timing.ease,\n      timer: null,\n      state: CREATED\n    });\n  }\n\n  function init(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function set$2(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function get$1(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id])) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function create(node, id, self) {\n    var schedules = node.__transition,\n        tween;\n\n    // Initialize the self timer when the transition is created.\n    // Note the actual delay is not known until the first callback!\n    schedules[id] = self;\n    self.timer = timer(schedule, 0, self.time);\n\n    // If the delay is greater than this first sleep, sleep some more;\n    // otherwise, start immediately.\n    function schedule(elapsed) {\n      self.state = SCHEDULED;\n      if (self.delay <= elapsed) start(elapsed - self.delay);\n      else self.timer.restart(start, self.delay, self.time);\n    }\n\n    function start(elapsed) {\n      var i, j, n, o;\n\n      for (i in schedules) {\n        o = schedules[i];\n        if (o.name !== self.name) continue;\n\n        // Interrupt the active transition, if any.\n        // Dispatch the interrupt event.\n        if (o.state === STARTED) {\n          o.state = ENDED;\n          o.timer.stop();\n          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n          delete schedules[i];\n        }\n\n        // Cancel any pre-empted transitions. No interrupt event is dispatched\n        // because the cancelled transitions never started. Note that this also\n        // removes this transition from the pending list!\n        else if (+i < id) {\n          o.state = ENDED;\n          o.timer.stop();\n          delete schedules[i];\n        }\n      }\n\n      // Defer the first tick to end of the current frame; see mbostock/d3#1576.\n      // Note the transition may be canceled after start and before the first tick!\n      // Note this must be scheduled before the start event; see d3/d3-transition#16!\n      // Assuming this is successful, subsequent callbacks go straight to tick.\n      timeout$1(function() {\n        if (self.state === STARTED) {\n          self.timer.restart(tick, self.delay, self.time);\n          tick(elapsed);\n        }\n      });\n\n      // Dispatch the start event.\n      // Note this must be done before the tween are initialized.\n      self.state = STARTING;\n      self.on.call(\"start\", node, node.__data__, self.index, self.group);\n      if (self.state !== STARTING) return; // interrupted\n      self.state = STARTED;\n\n      // Initialize the tween, deleting null tween.\n      tween = new Array(n = self.tween.length);\n      for (i = 0, j = -1; i < n; ++i) {\n        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n          tween[++j] = o;\n        }\n      }\n      tween.length = j + 1;\n    }\n\n    function tick(elapsed) {\n      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1),\n          i = -1,\n          n = tween.length;\n\n      while (++i < n) {\n        tween[i].call(null, t);\n      }\n\n      // Dispatch the end event.\n      if (self.state === ENDING) {\n        self.state = ENDED;\n        self.timer.stop();\n        self.on.call(\"end\", node, node.__data__, self.index, self.group);\n        for (i in schedules) if (+i !== id) return void delete schedules[id];\n        delete node.__transition;\n      }\n    }\n  }\n\n  function interrupt(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        active,\n        empty = true,\n        i;\n\n    if (!schedules) return;\n\n    name = name == null ? null : name + \"\";\n\n    for (i in schedules) {\n      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n      active = schedule.state === STARTED;\n      schedule.state = ENDED;\n      schedule.timer.stop();\n      if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\n      delete schedules[i];\n    }\n\n    if (empty) delete node.__transition;\n  }\n\n  function selection_interrupt(name) {\n    return this.each(function() {\n      interrupt(this, name);\n    });\n  }\n\n  function tweenRemove(id, name) {\n    var tween0, tween1;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = tween0 = tween;\n        for (var i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1 = tween1.slice();\n            tween1.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function tweenFunction(id, name, value) {\n    var tween0, tween1;\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = (tween0 = tween).slice();\n        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1[i] = t;\n            break;\n          }\n        }\n        if (i === n) tween1.push(t);\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function transition_tween(name, value) {\n    var id = this._id;\n\n    name += \"\";\n\n    if (arguments.length < 2) {\n      var tween = get$1(this.node(), id).tween;\n      for (var i = 0, n = tween.length, t; i < n; ++i) {\n        if ((t = tween[i]).name === name) {\n          return t.value;\n        }\n      }\n      return null;\n    }\n\n    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n  }\n\n  function tweenValue(transition, name, value) {\n    var id = transition._id;\n\n    transition.each(function() {\n      var schedule = set$2(this, id);\n      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n    });\n\n    return function(node) {\n      return get$1(node, id).value[name];\n    };\n  }\n\n  function interpolate$1(a, b) {\n    var c;\n    return (typeof b === \"number\" ? interpolateNumber\n        : b instanceof color ? interpolateRgb\n        : (c = color(b)) ? (b = c, interpolateRgb)\n        : interpolateString)(a, b);\n  }\n\n  function attrRemove$1(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS$1(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrConstantNS$1(fullname, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttribute(name);\n      value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function attrFunctionNS$1(fullname, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n      value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_attr(name, value) {\n    var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform$2 : interpolate$1;\n    return this.attrTween(name, typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)\n        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\n  }\n\n  function attrTweenNS(fullname, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttributeNS(fullname.space, fullname.local, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function attrTween(name, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttribute(name, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_attrTween(name, value) {\n    var key = \"attr.\" + name;\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    var fullname = namespace(name);\n    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n  }\n\n  function delayFunction(id, value) {\n    return function() {\n      init(this, id).delay = +value.apply(this, arguments);\n    };\n  }\n\n  function delayConstant(id, value) {\n    return value = +value, function() {\n      init(this, id).delay = value;\n    };\n  }\n\n  function transition_delay(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? delayFunction\n            : delayConstant)(id, value))\n        : get$1(this.node(), id).delay;\n  }\n\n  function durationFunction(id, value) {\n    return function() {\n      set$2(this, id).duration = +value.apply(this, arguments);\n    };\n  }\n\n  function durationConstant(id, value) {\n    return value = +value, function() {\n      set$2(this, id).duration = value;\n    };\n  }\n\n  function transition_duration(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? durationFunction\n            : durationConstant)(id, value))\n        : get$1(this.node(), id).duration;\n  }\n\n  function easeConstant(id, value) {\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      set$2(this, id).ease = value;\n    };\n  }\n\n  function transition_ease(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each(easeConstant(id, value))\n        : get$1(this.node(), id).ease;\n  }\n\n  function transition_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, this._name, this._id);\n  }\n\n  function transition_merge(transition) {\n    if (transition._id !== this._id) throw new Error;\n\n    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Transition(merges, this._parents, this._name, this._id);\n  }\n\n  function start$1(name) {\n    return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n      var i = t.indexOf(\".\");\n      if (i >= 0) t = t.slice(0, i);\n      return !t || t === \"start\";\n    });\n  }\n\n  function onFunction(id, name, listener) {\n    var on0, on1, sit = start$1(name) ? init : set$2;\n    return function() {\n      var schedule = sit(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n      schedule.on = on1;\n    };\n  }\n\n  function transition_on(name, listener) {\n    var id = this._id;\n\n    return arguments.length < 2\n        ? get$1(this.node(), id).on.on(name)\n        : this.each(onFunction(id, name, listener));\n  }\n\n  function removeFunction(id) {\n    return function() {\n      var parent = this.parentNode;\n      for (var i in this.__transition) if (+i !== id) return;\n      if (parent) parent.removeChild(this);\n    };\n  }\n\n  function transition_remove() {\n    return this.on(\"end.remove\", removeFunction(this._id));\n  }\n\n  function transition_select(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, name, id);\n  }\n\n  function transition_selectAll(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\n            if (child = children[k]) {\n              schedule(child, name, id, k, children, inherit);\n            }\n          }\n          subgroups.push(children);\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, parents, name, id);\n  }\n\n  var Selection$1 = selection.prototype.constructor;\n\n  function transition_selection() {\n    return new Selection$1(this._groups, this._parents);\n  }\n\n  function styleRemove$1(name, interpolate) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function styleRemoveEnd(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function styleFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = value(this);\n      if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_style(name, value, priority) {\n    var i = (name += \"\") === \"transform\" ? interpolateTransform$1 : interpolate$1;\n    return value == null ? this\n            .styleTween(name, styleRemove$1(name, i))\n            .on(\"end.style.\" + name, styleRemoveEnd(name))\n        : this.styleTween(name, typeof value === \"function\"\n            ? styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value))\n            : styleConstant$1(name, i, value), priority);\n  }\n\n  function styleTween(name, value, priority) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.style.setProperty(name, i(t), priority);\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_styleTween(name, value, priority) {\n    var key = \"style.\" + (name += \"\");\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n  }\n\n  function textConstant$1(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction$1(value) {\n    return function() {\n      var value1 = value(this);\n      this.textContent = value1 == null ? \"\" : value1;\n    };\n  }\n\n  function transition_text(value) {\n    return this.tween(\"text\", typeof value === \"function\"\n        ? textFunction$1(tweenValue(this, \"text\", value))\n        : textConstant$1(value == null ? \"\" : value + \"\"));\n  }\n\n  function transition_transition() {\n    var name = this._name,\n        id0 = this._id,\n        id1 = newId();\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          var inherit = get$1(node, id0);\n          schedule(node, name, id1, i, group, {\n            time: inherit.time + inherit.delay + inherit.duration,\n            delay: 0,\n            duration: inherit.duration,\n            ease: inherit.ease\n          });\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id1);\n  }\n\n  var id = 0;\n\n  function Transition(groups, parents, name, id) {\n    this._groups = groups;\n    this._parents = parents;\n    this._name = name;\n    this._id = id;\n  }\n\n  function transition(name) {\n    return selection().transition(name);\n  }\n\n  function newId() {\n    return ++id;\n  }\n\n  var selection_prototype = selection.prototype;\n\n  Transition.prototype = transition.prototype = {\n    constructor: Transition,\n    select: transition_select,\n    selectAll: transition_selectAll,\n    filter: transition_filter,\n    merge: transition_merge,\n    selection: transition_selection,\n    transition: transition_transition,\n    call: selection_prototype.call,\n    nodes: selection_prototype.nodes,\n    node: selection_prototype.node,\n    size: selection_prototype.size,\n    empty: selection_prototype.empty,\n    each: selection_prototype.each,\n    on: transition_on,\n    attr: transition_attr,\n    attrTween: transition_attrTween,\n    style: transition_style,\n    styleTween: transition_styleTween,\n    text: transition_text,\n    remove: transition_remove,\n    tween: transition_tween,\n    delay: transition_delay,\n    duration: transition_duration,\n    ease: transition_ease\n  };\n\n  var defaultTiming = {\n    time: null, // Set on use.\n    delay: 0,\n    duration: 250,\n    ease: easeCubicInOut\n  };\n\n  function inherit(node, id) {\n    var timing;\n    while (!(timing = node.__transition) || !(timing = timing[id])) {\n      if (!(node = node.parentNode)) {\n        return defaultTiming.time = now(), defaultTiming;\n      }\n    }\n    return timing;\n  }\n\n  function selection_transition(name) {\n    var id,\n        timing;\n\n    if (name instanceof Transition) {\n      id = name._id, name = name._name;\n    } else {\n      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n    }\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          schedule(node, name, id, i, group, timing || inherit(node, id));\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id);\n  }\n\n  selection.prototype.interrupt = selection_interrupt;\n  selection.prototype.transition = selection_transition;\n\n  var root$1 = [null];\n\n  function active(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        i;\n\n    if (schedules) {\n      name = name == null ? null : name + \"\";\n      for (i in schedules) {\n        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n          return new Transition([[node]], root$1, name, +i);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  var slice$4 = Array.prototype.slice;\n\n  function identity$5(x) {\n    return x;\n  }\n\n  var top = 1;\n  var right = 2;\n  var bottom = 3;\n  var left = 4;\nvar   epsilon$2 = 1e-6;\n  function translateX(scale0, scale1, d) {\n    var x = scale0(d);\n    return \"translate(\" + (isFinite(x) ? x : scale1(d)) + \",0)\";\n  }\n\n  function translateY(scale0, scale1, d) {\n    var y = scale0(d);\n    return \"translate(0,\" + (isFinite(y) ? y : scale1(d)) + \")\";\n  }\n\n  function center(scale) {\n    var width = scale.bandwidth() / 2;\n    return function(d) {\n      return scale(d) + width;\n    };\n  }\n\n  function entering() {\n    return !this.__axis;\n  }\n\n  function axis(orient, scale) {\n    var tickArguments = [],\n        tickValues = null,\n        tickFormat = null,\n        tickSizeInner = 6,\n        tickSizeOuter = 6,\n        tickPadding = 3;\n\n    function axis(context) {\n      var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n          format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,\n          spacing = Math.max(tickSizeInner, 0) + tickPadding,\n          transform = orient === top || orient === bottom ? translateX : translateY,\n          range = scale.range(),\n          range0 = range[0] + 0.5,\n          range1 = range[range.length - 1] + 0.5,\n          position = (scale.bandwidth ? center : identity$5)(scale.copy()),\n          selection = context.selection ? context.selection() : context,\n          path = selection.selectAll(\".domain\").data([null]),\n          tick = selection.selectAll(\".tick\").data(values, scale).order(),\n          tickExit = tick.exit(),\n          tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n          line = tick.select(\"line\"),\n          text = tick.select(\"text\"),\n          k = orient === top || orient === left ? -1 : 1,\n          x, y = orient === left || orient === right ? (x = \"x\", \"y\") : (x = \"y\", \"x\");\n\n      path = path.merge(path.enter().insert(\"path\", \".tick\")\n          .attr(\"class\", \"domain\")\n          .attr(\"stroke\", \"#000\"));\n\n      tick = tick.merge(tickEnter);\n\n      line = line.merge(tickEnter.append(\"line\")\n          .attr(\"stroke\", \"#000\")\n          .attr(x + \"2\", k * tickSizeInner)\n          .attr(y + \"1\", 0.5)\n          .attr(y + \"2\", 0.5));\n\n      text = text.merge(tickEnter.append(\"text\")\n          .attr(\"fill\", \"#000\")\n          .attr(x, k * spacing)\n          .attr(y, 0.5)\n          .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \".71em\" : \".32em\"));\n\n      if (context !== selection) {\n        path = path.transition(context);\n        tick = tick.transition(context);\n        line = line.transition(context);\n        text = text.transition(context);\n\n        tickExit = tickExit.transition(context)\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(position, this.parentNode.__axis || position, d); });\n\n        tickEnter\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(this.parentNode.__axis || position, position, d); });\n      }\n\n      tickExit.remove();\n\n      path\n          .attr(\"d\", orient === left || orient == right\n              ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter\n              : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\n\n      tick\n          .attr(\"opacity\", 1)\n          .attr(\"transform\", function(d) { return transform(position, position, d); });\n\n      line\n          .attr(x + \"2\", k * tickSizeInner);\n\n      text\n          .attr(x, k * spacing)\n          .text(format);\n\n      selection.filter(entering)\n          .attr(\"fill\", \"none\")\n          .attr(\"font-size\", 10)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n      selection\n          .each(function() { this.__axis = position; });\n    }\n\n    axis.scale = function(_) {\n      return arguments.length ? (scale = _, axis) : scale;\n    };\n\n    axis.ticks = function() {\n      return tickArguments = slice$4.call(arguments), axis;\n    };\n\n    axis.tickArguments = function(_) {\n      return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();\n    };\n\n    axis.tickValues = function(_) {\n      return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();\n    };\n\n    axis.tickFormat = function(_) {\n      return arguments.length ? (tickFormat = _, axis) : tickFormat;\n    };\n\n    axis.tickSize = function(_) {\n      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeInner = function(_) {\n      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeOuter = function(_) {\n      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n    };\n\n    axis.tickPadding = function(_) {\n      return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n    };\n\n    return axis;\n  }\n\n  function axisTop(scale) {\n    return axis(top, scale);\n  }\n\n  function axisRight(scale) {\n    return axis(right, scale);\n  }\n\n  function axisBottom(scale) {\n    return axis(bottom, scale);\n  }\n\n  function axisLeft(scale) {\n    return axis(left, scale);\n  }\n\n  function defaultSeparation(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n    while (children = node.children) node = children[0];\n    return node;\n  }\n\n  function leafRight(node) {\n    var children;\n    while (children = node.children) node = children[children.length - 1];\n    return node;\n  }\n\n  function cluster() {\n    var separation = defaultSeparation,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0;\n\n      // First walk, computing the initial x & y values.\n      root.eachAfter(function(node) {\n        var children = node.children;\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2;\n\n      // Second walk, normalizing x & y to the desired size.\n      return root.eachAfter(nodeSize ? function(node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function(x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n    };\n\n    cluster.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return cluster;\n  }\n\n  function node_each(callback) {\n    var node = this, current, next = [node], children, i, n;\n    do {\n      current = next.reverse(), next = [];\n      while (node = current.pop()) {\n        callback(node), children = node.children;\n        if (children) for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    } while (next.length);\n    return this;\n  }\n\n  function node_eachBefore(callback) {\n    var node = this, nodes = [node], children, i;\n    while (node = nodes.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n    return this;\n  }\n\n  function node_eachAfter(callback) {\n    var node = this, nodes = [node], next = [], children, i, n;\n    while (node = nodes.pop()) {\n      next.push(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n    while (node = next.pop()) {\n      callback(node);\n    }\n    return this;\n  }\n\n  function node_sum(value) {\n    return this.eachAfter(function(node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n      while (--i >= 0) sum += children[i].value;\n      node.value = sum;\n    });\n  }\n\n  function node_sort(compare) {\n    return this.eachBefore(function(node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path(end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n    var k = nodes.length;\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n    return nodes;\n  }\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n    return c;\n  }\n\n  function node_ancestors() {\n    var node = this, nodes = [node];\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n    return nodes;\n  }\n\n  function node_descendants() {\n    var nodes = [];\n    this.each(function(node) {\n      nodes.push(node);\n    });\n    return nodes;\n  }\n\n  function node_leaves() {\n    var leaves = [];\n    this.eachBefore(function(node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links() {\n    var root = this, links = [];\n    root.each(function(node) {\n      if (node !== root) { // Don’t include the root’s parent, if any.\n        links.push({source: node.parent, target: node});\n      }\n    });\n    return links;\n  }\n\n  function hierarchy(data, children) {\n    var root = new Node(data),\n        valued = +data.value && (root.value = data.value),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    if (children == null) children = defaultChildren;\n\n    while (node = nodes.pop()) {\n      if (valued) node.value = +node.data.value;\n      if ((childs = children(node.data)) && (n = childs.length)) {\n        node.children = new Array(n);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new Node(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function defaultChildren(d) {\n    return d.children;\n  }\n\n  function copyData(node) {\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n    do node.height = height;\n    while ((node = node.parent) && (node.height < ++height));\n  }\n\n  function Node(data) {\n    this.data = data;\n    this.depth =\n    this.height = 0;\n    this.parent = null;\n  }\n\n  Node.prototype = hierarchy.prototype = {\n    constructor: Node,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy\n  };\n\n  function Node$2(value) {\n    this._ = value;\n    this.next = null;\n  }\n\n  function shuffle$1(array) {\n    var i,\n        n = (array = array.slice()).length,\n        head = null,\n        node = head;\n\n    while (n) {\n      var next = new Node$2(array[n - 1]);\n      if (node) node = node.next = next;\n      else node = head = next;\n      array[i] = array[--n];\n    }\n\n    return {\n      head: head,\n      tail: node\n    };\n  }\n\n  function enclose(circles) {\n    return encloseN(shuffle$1(circles), []);\n  }\n\n  function encloses(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r - b.r;\n    return dr * dr + 1e-6 > dx * dx + dy * dy;\n  }\n\n  // Returns the smallest circle that contains circles L and intersects circles B.\n  function encloseN(L, B) {\n    var circle,\n        l0 = null,\n        l1 = L.head,\n        l2,\n        p1;\n\n    switch (B.length) {\n      case 1: circle = enclose1(B[0]); break;\n      case 2: circle = enclose2(B[0], B[1]); break;\n      case 3: circle = enclose3(B[0], B[1], B[2]); break;\n    }\n\n    while (l1) {\n      p1 = l1._, l2 = l1.next;\n      if (!circle || !encloses(circle, p1)) {\n\n        // Temporarily truncate L before l1.\n        if (l0) L.tail = l0, l0.next = null;\n        else L.head = L.tail = null;\n\n        B.push(p1);\n        circle = encloseN(L, B); // Note: reorders L!\n        B.pop();\n\n        // Move l1 to the front of L and reconnect the truncated list L.\n        if (L.head) l1.next = L.head, L.head = l1;\n        else l1.next = null, L.head = L.tail = l1;\n        l0 = L.tail, l0.next = l2;\n\n      } else {\n        l0 = l1;\n      }\n      l1 = l2;\n    }\n\n    L.tail = l0;\n    return circle;\n  }\n\n  function enclose1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function enclose2(a, b) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function enclose3(a, b, c) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x3 = c.x, y3 = c.y, r3 = c.r,\n        a2 = 2 * (x1 - x2),\n        b2 = 2 * (y1 - y2),\n        c2 = 2 * (r2 - r1),\n        d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,\n        a3 = 2 * (x1 - x3),\n        b3 = 2 * (y1 - y3),\n        c3 = 2 * (r3 - r1),\n        d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / ab - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / ab - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (xa * xb + ya * yb + r1),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);\n    return {\n      x: xa + xb * r + x1,\n      y: ya + yb * r + y1,\n      r: r\n    };\n  }\n\n  function place(a, b, c) {\n    var ax = a.x,\n        ay = a.y,\n        da = b.r + c.r,\n        db = a.r + c.r,\n        dx = b.x - ax,\n        dy = b.y - ay,\n        dc = dx * dx + dy * dy;\n    if (dc) {\n      var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = ax + x * dx + y * dy;\n      c.y = ay + x * dy - y * dx;\n    } else {\n      c.x = ax + db;\n      c.y = ay;\n    }\n  }\n\n  function intersects(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r + b.r;\n    return dr * dr > dx * dx + dy * dy;\n  }\n\n  function distance2(circle, x, y) {\n    var dx = circle.x - x,\n        dy = circle.y - y;\n    return dx * dx + dy * dy;\n  }\n\n  function Node$1(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = circles.length)) return 0;\n\n    var a, b, c, n;\n\n    // Place the first circle.\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r;\n\n    // Place the second circle.\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r;\n\n    // Place the third circle.\n    place(b, a, c = circles[2]);\n\n    // Initialize the weighted centroid.\n    var aa = a.r * a.r,\n        ba = b.r * b.r,\n        ca = c.r * c.r,\n        oa = aa + ba + ca,\n        ox = aa * a.x + ba * b.x + ca * c.x,\n        oy = aa * a.y + ba * b.y + ca * c.y,\n        cx, cy, i, j, k, sj, sk;\n\n    // Initialize the front-chain using the first three circles a, b and c.\n    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a;\n\n    // Attempt to place each remaining circle…\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n      // If there are only three elements in the front-chain…\n      if ((k = a.previous) === (j = b.next)) {\n        // If the new circle intersects the third circle,\n        // rotate the front chain to try the next position.\n        if (intersects(j._, c._)) {\n          a = b, b = j, --i;\n          continue pack;\n        }\n      }\n\n      // Find the closest intersecting circle on the front-chain, if any.\n      else {\n        sj = j._.r, sk = k._.r;\n        do {\n          if (sj <= sk) {\n            if (intersects(j._, c._)) {\n              b = j, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            j = j.next, sj += j._.r;\n          } else {\n            if (intersects(k._, c._)) {\n              a = k, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            k = k.previous, sk += k._.r;\n          }\n        } while (j !== k.next);\n      }\n\n      // Success! Insert the new circle c between a and b.\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n      // Update the weighted centroid.\n      oa += ca = c._.r * c._.r;\n      ox += ca * c._.x;\n      oy += ca * c._.y;\n\n      // Compute the new closest circle a to centroid.\n      aa = distance2(a._, cx = ox / oa, cy = oy / oa);\n      while ((c = c.next) !== b) {\n        if ((ca = distance2(c._, cx, cy)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n      b = a.next;\n    }\n\n    // Compute the enclosing circle of the front chain.\n    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n    // Translate the circles to put the enclosing circle around the origin.\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n    return c.r;\n  }\n\n  function siblings(circles) {\n    packEnclose(circles);\n    return circles;\n  }\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error;\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n\n  function constant$5(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function index() {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius))\n            .eachAfter(packChildren(padding, 0.5))\n            .eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius))\n            .eachAfter(packChildren(constantZero, 1))\n            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n      return root;\n    }\n\n    pack.radius = function(x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function(x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant$5(+x), pack) : padding;\n    };\n\n    return pack;\n  }\n\n  function radiusLeaf(radius) {\n    return function(node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function(node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function(node) {\n      var parent = node.parent;\n      node.r *= k;\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition() {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 =\n      root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function(node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function(x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function(x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  }\n\nvar   keyPrefix$1 = \"$\";\n  var preroot = {depth: -1};\n  var ambiguous = {};\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  function stratify() {\n    var id = defaultId,\n        parentId = defaultParentId;\n\n    function stratify(data) {\n      var d,\n          i,\n          n = data.length,\n          root,\n          parent,\n          node,\n          nodes = new Array(n),\n          nodeId,\n          nodeKey,\n          nodeByKey = {};\n\n      for (i = 0; i < n; ++i) {\n        d = data[i], node = nodes[i] = new Node(d);\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = keyPrefix$1 + (node.id = nodeId);\n          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], nodeId = parentId(data[i], i, data);\n        if (nodeId == null || !(nodeId += \"\")) {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        } else {\n          parent = nodeByKey[keyPrefix$1 + nodeId];\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);\n          else parent.children = [node];\n          node.parent = parent;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\");\n      root.parent = preroot;\n      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n\n      return root;\n    }\n\n    stratify.id = function(x) {\n      return arguments.length ? (id = required(x), stratify) : id;\n    };\n\n    stratify.parentId = function(x) {\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\n    };\n\n    return stratify;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  }\n\n  // This function works analogously to nextLeft.\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  }\n\n  // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n\n  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n    this.a = this; // ancestor\n    this.z = 0; // prelim\n    this.m = 0; // mod\n    this.c = 0; // change\n    this.s = 0; // shift\n    this.t = null; // thread\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  }\n\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n  function tree() {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root);\n\n      // Compute the layout using Buchheim et al.’s algorithm.\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk);\n\n      // If a fixed node size is specified, scale x and y.\n      if (nodeSize) root.eachBefore(sizeNode);\n\n      // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n        var left = root,\n            right = root,\n            bottom = root;\n        root.eachBefore(function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var s = left === right ? 1 : separation(left, right) / 2,\n            tx = s - left.x,\n            kx = dx / (right.x + s + tx),\n            ky = dy / (bottom.depth || 1);\n        root.eachBefore(function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n\n      return root;\n    }\n\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n\n    // Computes all real x-coordinates by summing up the modifiers recursively.\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n\n    // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function(x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n    };\n\n    tree.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return tree;\n  }\n\n  function treemapSlice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1,\n        n = nodes.length,\n        dx, dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0;\n      minValue = maxValue = sumValue = nodes[i0].value;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (i1 = i0 + 1; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n        minRatio = newRatio;\n      }\n\n      // Position and record the row orientation.\n      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n\n  var squarify = (function custom(ratio) {\n\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  })(phi);\n\n  function index$1() {\n    var tile = squarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 =\n      root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function(x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function(x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function(x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function(x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function(x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function(x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function(x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function(x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function(x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  }\n\n  function binary(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i, n = nodes.length,\n        sum, sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = (value / 2) + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;\n        else hi = mid;\n      }\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if ((y1 - y0) > (x1 - x0)) {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      } else {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      }\n    }\n  }\n\n  function sliceDice(parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var resquarify = (function custom(ratio) {\n\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  })(phi);\n\n  function center$1(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  }\n\n  function constant$6(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  }\n\n  function x$1(d) {\n    return d.x + d.vx;\n  }\n\n  function y$1(d) {\n    return d.y + d.vy;\n  }\n\n  function collide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant$6(radius == null ? 1 : +radius);\n\n    function force() {\n      var i, n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[i], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data, rj = quad.r, r = ri + rj;\n        if (data) {\n          if (data.index > i) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    force.initialize = function(_) {\n      var i, n = (nodes = _).length; radii = new Array(n);\n      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$6(+_), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index$2(d, i) {\n    return i;\n  }\n\n  function link(links) {\n    var id = index$2,\n        strength = defaultStrength,\n        strengths,\n        distance = constant$6(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = map$1(nodes, id),\n          link;\n\n      for (i = 0, count = new Array(n); i < n; ++i) {\n        count[i] = 0;\n      }\n\n      for (i = 0; i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n        ++count[link.source.index], ++count[link.target.index];\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function(_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function(_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function(_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$6(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  function x$2(d) {\n    return d.x;\n  }\n\n  function y$2(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10;\n  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n  function simulation(nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        velocityDecay = 0.6,\n        forces = map$1(),\n        stepper = timer(step),\n        event = dispatch(\"tick\", \"end\");\n\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick() {\n      var i, n = nodes.length, node;\n\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function(_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n      },\n\n      alpha: function(_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n\n      alphaMin: function(_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n\n      alphaDecay: function(_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n\n      alphaTarget: function(_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n\n      velocityDecay: function(_) {\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n      },\n\n      force: function(name, _) {\n        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n      },\n\n      find: function(x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;\n        else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function manyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant$6(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0, q, c, x, y, i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = q.value)) {\n            strength += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / strength;\n        quad.y = y / strength;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n        q = quad;\n        q.x = q.data.x;\n        q.y = q.data.y;\n        do strength += strengths[q.data.index];\n        while (q = q.next);\n      }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function(_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function(_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function(_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function x$3(x) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant$6(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function y$3(y) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant$6(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  function nopropagation() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  function dragDisable(view) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", noevent, true);\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", noevent, true);\n    } else {\n      root.__noselect = root.style.MozUserSelect;\n      root.style.MozUserSelect = \"none\";\n    }\n  }\n\n  function dragEnable(view, noclick) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", null);\n    if (noclick) {\n      selection.on(\"click.drag\", noevent, true);\n      setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n    }\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", null);\n    } else {\n      root.style.MozUserSelect = root.__noselect;\n      delete root.__noselect;\n    }\n  }\n\n  function constant$7(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n    this.target = target;\n    this.type = type;\n    this.subject = subject;\n    this.identifier = id;\n    this.active = active;\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this._ = dispatch;\n  }\n\n  DragEvent.prototype.on = function() {\n    var value = this._.on.apply(this._, arguments);\n    return value === this._ ? this : value;\n  };\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !exports.event.button;\n  }\n\n  function defaultContainer() {\n    return this.parentNode;\n  }\n\n  function defaultSubject(d) {\n    return d == null ? {x: exports.event.x, y: exports.event.y} : d;\n  }\n\n  function drag() {\n    var filter = defaultFilter,\n        container = defaultContainer,\n        subject = defaultSubject,\n        gestures = {},\n        listeners = dispatch(\"start\", \"drag\", \"end\"),\n        active = 0,\n        mousemoving,\n        touchending;\n\n    function drag(selection) {\n      selection\n          .on(\"mousedown.drag\", mousedowned)\n          .on(\"touchstart.drag\", touchstarted)\n          .on(\"touchmove.drag\", touchmoved)\n          .on(\"touchend.drag touchcancel.drag\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\n      if (!gesture) return;\n      select(exports.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n      dragDisable(exports.event.view);\n      nopropagation();\n      mousemoving = false;\n      gesture(\"start\");\n    }\n\n    function mousemoved() {\n      noevent();\n      mousemoving = true;\n      gestures.mouse(\"drag\");\n    }\n\n    function mouseupped() {\n      select(exports.event.view).on(\"mousemove.drag mouseup.drag\", null);\n      dragEnable(exports.event.view, mousemoving);\n      noevent();\n      gestures.mouse(\"end\");\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var touches = exports.event.changedTouches,\n          c = container.apply(this, arguments),\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\n          nopropagation();\n          gesture(\"start\");\n        }\n      }\n    }\n\n    function touchmoved() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          noevent();\n          gesture(\"drag\");\n        }\n      }\n    }\n\n    function touchended() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          nopropagation();\n          gesture(\"end\");\n        }\n      }\n    }\n\n    function beforestart(id, container, point, that, args) {\n      var p = point(container, id), s, dx, dy,\n          sublisteners = listeners.copy();\n\n      if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\n        if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;\n        dx = s.x - p[0] || 0;\n        dy = s.y - p[1] || 0;\n        return true;\n      })) return;\n\n      return function gesture(type) {\n        var p0 = p, n;\n        switch (type) {\n          case \"start\": gestures[id] = gesture, n = active++; break;\n          case \"end\": delete gestures[id], --active; // nobreak\n          case \"drag\": p = point(container, id), n = active; break;\n        }\n        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n      };\n    }\n\n    drag.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$7(!!_), drag) : filter;\n    };\n\n    drag.container = function(_) {\n      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$7(_), drag) : container;\n    };\n\n    drag.subject = function(_) {\n      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$7(_), drag) : subject;\n    };\n\n    drag.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? drag : value;\n    };\n\n    return drag;\n  }\n\n  function constant$8(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function x$4(d) {\n    return d[0];\n  }\n\n  function y$4(d) {\n    return d[1];\n  }\n\n  function RedBlackTree() {\n    this._ = null; // root node\n  }\n\n  function RedBlackNode(node) {\n    node.U = // parent node\n    node.C = // color - true for red, false for black\n    node.L = // left node\n    node.R = // right node\n    node.P = // previous node\n    node.N = null; // next node\n  }\n\n  RedBlackTree.prototype = {\n    constructor: RedBlackTree,\n\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = RedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              RedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              RedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n\n      var parent = node.U,\n          sibling,\n          left = node.L,\n          right = node.R,\n          next,\n          red;\n\n      if (!left) next = right;\n      else if (!right) next = left;\n      else next = RedBlackFirst(right);\n\n      if (parent) {\n        if (parent.L === node) parent.L = next;\n        else parent.R = next;\n      } else {\n        this._ = next;\n      }\n\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) { node.C = false; return; }\n\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if ((sibling.L && sibling.L.C)\n              || (sibling.R && sibling.R.C)) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              RedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            RedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              RedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            RedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n\n      if (node) node.C = false;\n    }\n  };\n\n  function RedBlackRotateLeft(tree, node) {\n    var p = node,\n        q = node.R,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n\n  function RedBlackRotateRight(tree, node) {\n    var p = node,\n        q = node.L,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n\n  function RedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n\n  function createEdge(left, right, v0, v1) {\n    var edge = [null, null],\n        index = edges.push(edge) - 1;\n    edge.left = left;\n    edge.right = right;\n    if (v0) setEdgeEnd(edge, left, right, v0);\n    if (v1) setEdgeEnd(edge, right, left, v1);\n    cells[left.index].halfedges.push(index);\n    cells[right.index].halfedges.push(index);\n    return edge;\n  }\n\n  function createBorderEdge(left, v0, v1) {\n    var edge = [v0, v1];\n    edge.left = left;\n    return edge;\n  }\n\n  function setEdgeEnd(edge, left, right, vertex) {\n    if (!edge[0] && !edge[1]) {\n      edge[0] = vertex;\n      edge.left = left;\n      edge.right = right;\n    } else if (edge.left === right) {\n      edge[1] = vertex;\n    } else {\n      edge[0] = vertex;\n    }\n  }\n\n  // Liang–Barsky line clipping.\n  function clipEdge(edge, x0, y0, x1, y1) {\n    var a = edge[0],\n        b = edge[1],\n        ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n    return true;\n  }\n\n  function connectEdge(edge, x0, y0, x1, y1) {\n    var v1 = edge[1];\n    if (v1) return true;\n\n    var v0 = edge[0],\n        left = edge.left,\n        right = edge.right,\n        lx = left[0],\n        ly = left[1],\n        rx = right[0],\n        ry = right[1],\n        fx = (lx + rx) / 2,\n        fy = (ly + ry) / 2,\n        fm,\n        fb;\n\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!v0) v0 = [fx, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [fx, y1];\n      } else {\n        if (!v0) v0 = [fx, y1];\n        else if (v0[1] < y0) return;\n        v1 = [fx, y0];\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!v0) v0 = [(y0 - fb) / fm, y0];\n          else if (v0[1] >= y1) return;\n          v1 = [(y1 - fb) / fm, y1];\n        } else {\n          if (!v0) v0 = [(y1 - fb) / fm, y1];\n          else if (v0[1] < y0) return;\n          v1 = [(y0 - fb) / fm, y0];\n        }\n      } else {\n        if (ly < ry) {\n          if (!v0) v0 = [x0, fm * x0 + fb];\n          else if (v0[0] >= x1) return;\n          v1 = [x1, fm * x1 + fb];\n        } else {\n          if (!v0) v0 = [x1, fm * x1 + fb];\n          else if (v0[0] < x0) return;\n          v1 = [x0, fm * x0 + fb];\n        }\n      }\n    }\n\n    edge[0] = v0;\n    edge[1] = v1;\n    return true;\n  }\n\n  function clipEdges(x0, y0, x1, y1) {\n    var i = edges.length,\n        edge;\n\n    while (i--) {\n      if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n          || !clipEdge(edge, x0, y0, x1, y1)\n          || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3\n              || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {\n        delete edges[i];\n      }\n    }\n  }\n\n  function createCell(site) {\n    return cells[site.index] = {\n      site: site,\n      halfedges: []\n    };\n  }\n\n  function cellHalfedgeAngle(cell, edge) {\n    var site = cell.site,\n        va = edge.left,\n        vb = edge.right;\n    if (site === vb) vb = va, va = site;\n    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n    if (site === va) va = edge[1], vb = edge[0];\n    else va = edge[0], vb = edge[1];\n    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n  }\n\n  function cellHalfedgeStart(cell, edge) {\n    return edge[+(edge.left !== cell.site)];\n  }\n\n  function cellHalfedgeEnd(cell, edge) {\n    return edge[+(edge.left === cell.site)];\n  }\n\n  function sortCellHalfedges() {\n    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n        var index = new Array(m),\n            array = new Array(m);\n        for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n        index.sort(function(i, j) { return array[j] - array[i]; });\n        for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n        for (j = 0; j < m; ++j) halfedges[j] = array[j];\n      }\n    }\n  }\n\n  function clipCells(x0, y0, x1, y1) {\n    var nCells = cells.length,\n        iCell,\n        cell,\n        site,\n        iHalfedge,\n        halfedges,\n        nHalfedges,\n        start,\n        startX,\n        startY,\n        end,\n        endX,\n        endY,\n        cover = true;\n\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        halfedges = cell.halfedges;\n        iHalfedge = halfedges.length;\n\n        // Remove any dangling clipped edges.\n        while (iHalfedge--) {\n          if (!edges[halfedges[iHalfedge]]) {\n            halfedges.splice(iHalfedge, 1);\n          }\n        }\n\n        // Insert any border edges as necessary.\n        iHalfedge = 0, nHalfedges = halfedges.length;\n        while (iHalfedge < nHalfedges) {\n          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n          if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {\n            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n                Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]\n                : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]\n                : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]\n                : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]\n                : null)) - 1);\n            ++nHalfedges;\n          }\n        }\n\n        if (nHalfedges) cover = false;\n      }\n    }\n\n    // If there weren’t any edges, have the closest site cover the extent.\n    // It doesn’t matter which corner of the extent we measure!\n    if (cover) {\n      var dx, dy, d2, dc = Infinity;\n\n      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n        if (cell = cells[iCell]) {\n          site = cell.site;\n          dx = site[0] - x0;\n          dy = site[1] - y0;\n          d2 = dx * dx + dy * dy;\n          if (d2 < dc) dc = d2, cover = cell;\n        }\n      }\n\n      if (cover) {\n        var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n        cover.halfedges.push(\n          edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n          edges.push(createBorderEdge(site, v01, v11)) - 1,\n          edges.push(createBorderEdge(site, v11, v10)) - 1,\n          edges.push(createBorderEdge(site, v10, v00)) - 1\n        );\n      }\n    }\n\n    // Lastly delete any cells with no edges; these were entirely clipped.\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        if (!cell.halfedges.length) {\n          delete cells[iCell];\n        }\n      }\n    }\n  }\n\n  var circlePool = [];\n\n  var firstCircle;\n\n  function Circle() {\n    RedBlackNode(this);\n    this.x =\n    this.y =\n    this.arc =\n    this.site =\n    this.cy = null;\n  }\n\n  function attachCircle(arc) {\n    var lArc = arc.P,\n        rArc = arc.N;\n\n    if (!lArc || !rArc) return;\n\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n\n    if (lSite === rSite) return;\n\n    var bx = cSite[0],\n        by = cSite[1],\n        ax = lSite[0] - bx,\n        ay = lSite[1] - by,\n        cx = rSite[0] - bx,\n        cy = rSite[1] - by;\n\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -epsilon2$1) return;\n\n    var ha = ax * ax + ay * ay,\n        hc = cx * cx + cy * cy,\n        x = (cy * ha - ay * hc) / d,\n        y = (ax * hc - cx * ha) / d;\n\n    var circle = circlePool.pop() || new Circle;\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n    arc.circle = circle;\n\n    var before = null,\n        node = circles._;\n\n    while (node) {\n      if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n        if (node.L) node = node.L;\n        else { before = node.P; break; }\n      } else {\n        if (node.R) node = node.R;\n        else { before = node; break; }\n      }\n    }\n\n    circles.insert(before, circle);\n    if (!before) firstCircle = circle;\n  }\n\n  function detachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) firstCircle = circle.N;\n      circles.remove(circle);\n      circlePool.push(circle);\n      RedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n\n  var beachPool = [];\n\n  function Beach() {\n    RedBlackNode(this);\n    this.edge =\n    this.site =\n    this.circle = null;\n  }\n\n  function createBeach(site) {\n    var beach = beachPool.pop() || new Beach;\n    beach.site = site;\n    return beach;\n  }\n\n  function detachBeach(beach) {\n    detachCircle(beach);\n    beaches.remove(beach);\n    beachPool.push(beach);\n    RedBlackNode(beach);\n  }\n\n  function removeBeach(beach) {\n    var circle = beach.circle,\n        x = circle.x,\n        y = circle.cy,\n        vertex = [x, y],\n        previous = beach.P,\n        next = beach.N,\n        disappearing = [beach];\n\n    detachBeach(beach);\n\n    var lArc = previous;\n    while (lArc.circle\n        && Math.abs(x - lArc.circle.x) < epsilon$3\n        && Math.abs(y - lArc.circle.cy) < epsilon$3) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      detachBeach(lArc);\n      lArc = previous;\n    }\n\n    disappearing.unshift(lArc);\n    detachCircle(lArc);\n\n    var rArc = next;\n    while (rArc.circle\n        && Math.abs(x - rArc.circle.x) < epsilon$3\n        && Math.abs(y - rArc.circle.cy) < epsilon$3) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      detachBeach(rArc);\n      rArc = next;\n    }\n\n    disappearing.push(rArc);\n    detachCircle(rArc);\n\n    var nArcs = disappearing.length,\n        iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function addBeach(site) {\n    var x = site[0],\n        directrix = site[1],\n        lArc,\n        rArc,\n        dxl,\n        dxr,\n        node = beaches._;\n\n    while (node) {\n      dxl = leftBreakPoint(node, directrix) - x;\n      if (dxl > epsilon$3) node = node.L; else {\n        dxr = x - rightBreakPoint(node, directrix);\n        if (dxr > epsilon$3) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -epsilon$3) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -epsilon$3) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n\n    createCell(site);\n    var newArc = createBeach(site);\n    beaches.insert(lArc, newArc);\n\n    if (!lArc && !rArc) return;\n\n    if (lArc === rArc) {\n      detachCircle(lArc);\n      rArc = createBeach(lArc.site);\n      beaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n      attachCircle(lArc);\n      attachCircle(rArc);\n      return;\n    }\n\n    if (!rArc) { // && lArc\n      newArc.edge = createEdge(lArc.site, newArc.site);\n      return;\n    }\n\n    // else lArc !== rArc\n    detachCircle(lArc);\n    detachCircle(rArc);\n\n    var lSite = lArc.site,\n        ax = lSite[0],\n        ay = lSite[1],\n        bx = site[0] - ax,\n        by = site[1] - ay,\n        rSite = rArc.site,\n        cx = rSite[0] - ax,\n        cy = rSite[1] - ay,\n        d = 2 * (bx * cy - by * cx),\n        hb = bx * bx + by * by,\n        hc = cx * cx + cy * cy,\n        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n    setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = createEdge(lSite, site, null, vertex);\n    rArc.edge = createEdge(site, rSite, null, vertex);\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function leftBreakPoint(arc, directrix) {\n    var site = arc.site,\n        rfocx = site[0],\n        rfocy = site[1],\n        pby2 = rfocy - directrix;\n\n    if (!pby2) return rfocx;\n\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n\n    site = lArc.site;\n    var lfocx = site[0],\n        lfocy = site[1],\n        plby2 = lfocy - directrix;\n\n    if (!plby2) return lfocx;\n\n    var hl = lfocx - rfocx,\n        aby2 = 1 / pby2 - 1 / plby2,\n        b = hl / plby2;\n\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n    return (rfocx + lfocx) / 2;\n  }\n\n  function rightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return leftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site[1] === directrix ? site[0] : Infinity;\n  }\n\n  var epsilon$3 = 1e-6;\n  var epsilon2$1 = 1e-12;\n  var beaches;\n  var cells;\n  var circles;\n  var edges;\n\n  function triangleArea(a, b, c) {\n    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n  }\n\n  function lexicographic(a, b) {\n    return b[1] - a[1]\n        || b[0] - a[0];\n  }\n\n  function Diagram(sites, extent) {\n    var site = sites.sort(lexicographic).pop(),\n        x,\n        y,\n        circle;\n\n    edges = [];\n    cells = new Array(sites.length);\n    beaches = new RedBlackTree;\n    circles = new RedBlackTree;\n\n    while (true) {\n      circle = firstCircle;\n      if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n        if (site[0] !== x || site[1] !== y) {\n          addBeach(site);\n          x = site[0], y = site[1];\n        }\n        site = sites.pop();\n      } else if (circle) {\n        removeBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n\n    sortCellHalfedges();\n\n    if (extent) {\n      var x0 = +extent[0][0],\n          y0 = +extent[0][1],\n          x1 = +extent[1][0],\n          y1 = +extent[1][1];\n      clipEdges(x0, y0, x1, y1);\n      clipCells(x0, y0, x1, y1);\n    }\n\n    this.edges = edges;\n    this.cells = cells;\n\n    beaches =\n    circles =\n    edges =\n    cells = null;\n  }\n\n  Diagram.prototype = {\n    constructor: Diagram,\n\n    polygons: function() {\n      var edges = this.edges;\n\n      return this.cells.map(function(cell) {\n        var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n        polygon.data = cell.site.data;\n        return polygon;\n      });\n    },\n\n    triangles: function() {\n      var triangles = [],\n          edges = this.edges;\n\n      this.cells.forEach(function(cell, i) {\n        var site = cell.site,\n            halfedges = cell.halfedges,\n            j = -1,\n            m = halfedges.length,\n            s0,\n            e1 = edges[halfedges[m - 1]],\n            s1 = e1.left === site ? e1.right : e1.left;\n\n        while (++j < m) {\n          s0 = s1;\n          e1 = edges[halfedges[j]];\n          s1 = e1.left === site ? e1.right : e1.left;\n          if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n            triangles.push([site.data, s0.data, s1.data]);\n          }\n        }\n      });\n\n      return triangles;\n    },\n\n    links: function() {\n      return this.edges.filter(function(edge) {\n        return edge.right;\n      }).map(function(edge) {\n        return {\n          source: edge.left.data,\n          target: edge.right.data\n        };\n      });\n    }\n  }\n\n  function voronoi() {\n    var x = x$4,\n        y = y$4,\n        extent = null;\n\n    function voronoi(data) {\n      return new Diagram(data.map(function(d, i) {\n        var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];\n        s.index = i;\n        s.data = d;\n        return s;\n      }), extent);\n    }\n\n    voronoi.polygons = function(data) {\n      return voronoi(data).polygons();\n    };\n\n    voronoi.links = function(data) {\n      return voronoi(data).links();\n    };\n\n    voronoi.triangles = function(data) {\n      return voronoi(data).triangles();\n    };\n\n    voronoi.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : x;\n    };\n\n    voronoi.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : y;\n    };\n\n    voronoi.extent = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n    };\n\n    voronoi.size = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n    };\n\n    return voronoi;\n  }\n\n  function constant$9(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function ZoomEvent(target, type, transform) {\n    this.target = target;\n    this.type = type;\n    this.transform = transform;\n  }\n\n  function Transform(k, x, y) {\n    this.k = k;\n    this.x = x;\n    this.y = y;\n  }\n\n  Transform.prototype = {\n    constructor: Transform,\n    scale: function(k) {\n      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n    },\n    translate: function(x, y) {\n      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n    },\n    apply: function(point) {\n      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n    },\n    applyX: function(x) {\n      return x * this.k + this.x;\n    },\n    applyY: function(y) {\n      return y * this.k + this.y;\n    },\n    invert: function(location) {\n      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n    },\n    invertX: function(x) {\n      return (x - this.x) / this.k;\n    },\n    invertY: function(y) {\n      return (y - this.y) / this.k;\n    },\n    rescaleX: function(x) {\n      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n    },\n    rescaleY: function(y) {\n      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n    },\n    toString: function() {\n      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n    }\n  };\n\n  var identity$6 = new Transform(1, 0, 0);\n\n  transform.prototype = Transform.prototype;\n\n  function transform(node) {\n    return node.__zoom || identity$6;\n  }\n\n  function nopropagation$1() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$1() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$1() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent() {\n    var e = this, w, h;\n    if (e instanceof SVGElement) {\n      e = e.ownerSVGElement || e;\n      w = e.width.baseVal.value;\n      h = e.height.baseVal.value;\n    } else {\n      w = e.clientWidth;\n      h = e.clientHeight;\n    }\n    return [[0, 0], [w, h]];\n  }\n\n  function defaultTransform() {\n    return this.__zoom || identity$6;\n  }\n\n  function zoom() {\n    var filter = defaultFilter$1,\n        extent = defaultExtent,\n        k0 = 0,\n        k1 = Infinity,\n        x0 = -k1,\n        x1 = k1,\n        y0 = x0,\n        y1 = x1,\n        duration = 250,\n        gestures = [],\n        listeners = dispatch(\"start\", \"zoom\", \"end\"),\n        touchstarting,\n        touchending,\n        touchDelay = 500,\n        wheelDelay = 150;\n\n    function zoom(selection) {\n      selection\n          .on(\"wheel.zoom\", wheeled)\n          .on(\"mousedown.zoom\", mousedowned)\n          .on(\"dblclick.zoom\", dblclicked)\n          .on(\"touchstart.zoom\", touchstarted)\n          .on(\"touchmove.zoom\", touchmoved)\n          .on(\"touchend.zoom touchcancel.zoom\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .property(\"__zoom\", defaultTransform);\n    }\n\n    zoom.transform = function(collection, transform) {\n      var selection = collection.selection ? collection.selection() : collection;\n      selection.property(\"__zoom\", defaultTransform);\n      if (collection !== selection) {\n        schedule(collection, transform);\n      } else {\n        selection.interrupt().each(function() {\n          gesture(this, arguments)\n              .start()\n              .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n              .end();\n        });\n      }\n    };\n\n    zoom.scaleBy = function(selection, k) {\n      zoom.scaleTo(selection, function() {\n        var k0 = this.__zoom.k,\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return k0 * k1;\n      });\n    };\n\n    zoom.scaleTo = function(selection, k) {\n      zoom.transform(selection, function() {\n        var e = extent.apply(this, arguments),\n            t0 = this.__zoom,\n            p0 = centroid(e),\n            p1 = t0.invert(p0),\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return constrain(translate(scale(t0, k1), p0, p1), e);\n      });\n    };\n\n    zoom.translateBy = function(selection, x, y) {\n      zoom.transform(selection, function() {\n        return constrain(this.__zoom.translate(\n          typeof x === \"function\" ? x.apply(this, arguments) : x,\n          typeof y === \"function\" ? y.apply(this, arguments) : y\n        ), extent.apply(this, arguments));\n      });\n    };\n\n    function scale(transform, k) {\n      k = Math.max(k0, Math.min(k1, k));\n      return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n    }\n\n    function translate(transform, p0, p1) {\n      var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n    }\n\n    function constrain(transform, extent) {\n      var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1),\n          dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);\n      return dx || dy ? transform.translate(dx, dy) : transform;\n    }\n\n    function centroid(extent) {\n      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n    }\n\n    function schedule(transition, transform, center) {\n      transition\n          .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\n          .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\n          .tween(\"zoom\", function() {\n            var that = this,\n                args = arguments,\n                g = gesture(that, args),\n                e = extent.apply(that, args),\n                p = center || centroid(e),\n                w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n                a = that.__zoom,\n                b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n                i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n            return function(t) {\n              if (t === 1) t = b; // Avoid rounding error on end.\n              else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n              g.zoom(null, t);\n            };\n          });\n    }\n\n    function gesture(that, args) {\n      for (var i = 0, n = gestures.length, g; i < n; ++i) {\n        if ((g = gestures[i]).that === that) {\n          return g;\n        }\n      }\n      return new Gesture(that, args);\n    }\n\n    function Gesture(that, args) {\n      this.that = that;\n      this.args = args;\n      this.index = -1;\n      this.active = 0;\n      this.extent = extent.apply(that, args);\n    }\n\n    Gesture.prototype = {\n      start: function() {\n        if (++this.active === 1) {\n          this.index = gestures.push(this) - 1;\n          this.emit(\"start\");\n        }\n        return this;\n      },\n      zoom: function(key, transform) {\n        if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\n        if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n        if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n        this.that.__zoom = transform;\n        this.emit(\"zoom\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) {\n          gestures.splice(this.index, 1);\n          this.index = -1;\n          this.emit(\"end\");\n        }\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function wheeled() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          t = this.__zoom,\n          k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),\n          p = mouse(this);\n\n      // If the mouse is in the same location as before, reuse it.\n      // If there were recent wheel events, reset the wheel idle timeout.\n      if (g.wheel) {\n        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n          g.mouse[1] = t.invert(g.mouse[0] = p);\n        }\n        clearTimeout(g.wheel);\n      }\n\n      // If this wheel event won’t trigger a transform change, ignore it.\n      else if (t.k === k) return;\n\n      // Otherwise, capture the mouse point and location at the start.\n      else {\n        g.mouse = [p, t.invert(p)];\n        interrupt(this);\n        g.start();\n      }\n\n      noevent$1();\n      g.wheel = setTimeout(wheelidled, wheelDelay);\n      g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));\n\n      function wheelidled() {\n        g.wheel = null;\n        g.end();\n      }\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          v = select(exports.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\n          p = mouse(this);\n\n      dragDisable(exports.event.view);\n      nopropagation$1();\n      g.mouse = [p, this.__zoom.invert(p)];\n      interrupt(this);\n      g.start();\n\n      function mousemoved() {\n        noevent$1();\n        g.moved = true;\n        g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));\n      }\n\n      function mouseupped() {\n        v.on(\"mousemove.zoom mouseup.zoom\", null);\n        dragEnable(exports.event.view, g.moved);\n        noevent$1();\n        g.end();\n      }\n    }\n\n    function dblclicked() {\n      if (!filter.apply(this, arguments)) return;\n      var t0 = this.__zoom,\n          p0 = mouse(this),\n          p1 = t0.invert(p0),\n          k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),\n          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));\n\n      noevent$1();\n      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\n      else select(this).call(zoom.transform, t1);\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p;\n\n      nopropagation$1();\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        p = [p, this.__zoom.invert(p), t.identifier];\n        if (!g.touch0) g.touch0 = p;\n        else if (!g.touch1) g.touch1 = p;\n      }\n      if (touchstarting) {\n        touchstarting = clearTimeout(touchstarting);\n        if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);\n      }\n      if (exports.event.touches.length === n) {\n        touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n        interrupt(this);\n        g.start();\n      }\n    }\n\n    function touchmoved() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p, l;\n\n      noevent$1();\n      if (touchstarting) touchstarting = clearTimeout(touchstarting);\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n      }\n      t = g.that.__zoom;\n      if (g.touch1) {\n        var p0 = g.touch0[0], l0 = g.touch0[1],\n            p1 = g.touch1[0], l1 = g.touch1[1],\n            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n        t = scale(t, Math.sqrt(dp / dl));\n        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n      }\n      else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n      else return;\n      g.zoom(\"touch\", constrain(translate(t, p, l), g.extent));\n    }\n\n    function touchended() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t;\n\n      nopropagation$1();\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, touchDelay);\n      for (i = 0; i < n; ++i) {\n        t = touches[i];\n        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n      }\n      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n      if (!g.touch0) g.end();\n    }\n\n    zoom.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$9(!!_), zoom) : filter;\n    };\n\n    zoom.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$9([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n    };\n\n    zoom.scaleExtent = function(_) {\n      return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];\n    };\n\n    zoom.translateExtent = function(_) {\n      return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];\n    };\n\n    zoom.duration = function(_) {\n      return arguments.length ? (duration = +_, zoom) : duration;\n    };\n\n    zoom.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? zoom : value;\n    };\n\n    return zoom;\n  }\n\n  function constant$10(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function BrushEvent(target, type, selection) {\n    this.target = target;\n    this.type = type;\n    this.selection = selection;\n  }\n\n  function nopropagation$2() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$2() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  var MODE_DRAG = {name: \"drag\"};\n  var MODE_SPACE = {name: \"space\"};\n  var MODE_HANDLE = {name: \"handle\"};\n  var MODE_CENTER = {name: \"center\"};\n  var X = {\n    name: \"x\",\n    handles: [\"e\", \"w\"].map(type$1),\n    input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\n    output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n  };\n\n  var Y = {\n    name: \"y\",\n    handles: [\"n\", \"s\"].map(type$1),\n    input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\n    output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n  };\n\n  var XY = {\n    name: \"xy\",\n    handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type$1),\n    input: function(xy) { return xy; },\n    output: function(xy) { return xy; }\n  };\n\n  var cursors = {\n    overlay: \"crosshair\",\n    selection: \"move\",\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n\n  var flipX = {\n    e: \"w\",\n    w: \"e\",\n    nw: \"ne\",\n    ne: \"nw\",\n    se: \"sw\",\n    sw: \"se\"\n  };\n\n  var flipY = {\n    n: \"s\",\n    s: \"n\",\n    nw: \"sw\",\n    ne: \"se\",\n    se: \"ne\",\n    sw: \"nw\"\n  };\n\n  var signsX = {\n    overlay: +1,\n    selection: +1,\n    n: null,\n    e: +1,\n    s: null,\n    w: -1,\n    nw: -1,\n    ne: +1,\n    se: +1,\n    sw: -1\n  };\n\n  var signsY = {\n    overlay: +1,\n    selection: +1,\n    n: -1,\n    e: null,\n    s: +1,\n    w: null,\n    nw: -1,\n    ne: -1,\n    se: +1,\n    sw: +1\n  };\n\n  function type$1(t) {\n    return {type: t};\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$2() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent$1() {\n    var svg = this.ownerSVGElement || this;\n    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n  }\n\n  // Like d3.local, but with the name “__brush” rather than auto-generated.\n  function local$1(node) {\n    while (!node.__brush) if (!(node = node.parentNode)) return;\n    return node.__brush;\n  }\n\n  function empty$1(extent) {\n    return extent[0][0] === extent[1][0]\n        || extent[0][1] === extent[1][1];\n  }\n\n  function brushSelection(node) {\n    var state = node.__brush;\n    return state ? state.dim.output(state.selection) : null;\n  }\n\n  function brushX() {\n    return brush$1(X);\n  }\n\n  function brushY() {\n    return brush$1(Y);\n  }\n\n  function brush() {\n    return brush$1(XY);\n  }\n\n  function brush$1(dim) {\n    var extent = defaultExtent$1,\n        filter = defaultFilter$2,\n        listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\n        handleSize = 6,\n        touchending;\n\n    function brush(group) {\n      var overlay = group\n          .property(\"__brush\", initialize)\n        .selectAll(\".overlay\")\n        .data([type$1(\"overlay\")]);\n\n      overlay.enter().append(\"rect\")\n          .attr(\"class\", \"overlay\")\n          .attr(\"pointer-events\", \"all\")\n          .attr(\"cursor\", cursors.overlay)\n        .merge(overlay)\n          .each(function() {\n            var extent = local$1(this).extent;\n            select(this)\n                .attr(\"x\", extent[0][0])\n                .attr(\"y\", extent[0][1])\n                .attr(\"width\", extent[1][0] - extent[0][0])\n                .attr(\"height\", extent[1][1] - extent[0][1]);\n          });\n\n      group.selectAll(\".selection\")\n        .data([type$1(\"selection\")])\n        .enter().append(\"rect\")\n          .attr(\"class\", \"selection\")\n          .attr(\"cursor\", cursors.selection)\n          .attr(\"fill\", \"#777\")\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"shape-rendering\", \"crispEdges\");\n\n      var handle = group.selectAll(\".handle\")\n        .data(dim.handles, function(d) { return d.type; });\n\n      handle.exit().remove();\n\n      handle.enter().append(\"rect\")\n          .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n          .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n      group\n          .each(redraw)\n          .attr(\"fill\", \"none\")\n          .attr(\"pointer-events\", \"all\")\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .on(\"mousedown.brush touchstart.brush\", started);\n    }\n\n    brush.move = function(group, selection) {\n      if (group.selection) {\n        group\n            .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\n            .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\n            .tween(\"brush\", function() {\n              var that = this,\n                  state = that.__brush,\n                  emit = emitter(that, arguments),\n                  selection0 = state.selection,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                  i = interpolate(selection0, selection1);\n\n              function tween(t) {\n                state.selection = t === 1 && empty$1(selection1) ? null : i(t);\n                redraw.call(that);\n                emit.brush();\n              }\n\n              return selection0 && selection1 ? tween : tween(1);\n            });\n      } else {\n        group\n            .each(function() {\n              var that = this,\n                  args = arguments,\n                  state = that.__brush,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                  emit = emitter(that, args).beforestart();\n\n              interrupt(that);\n              state.selection = selection1 == null || empty$1(selection1) ? null : selection1;\n              redraw.call(that);\n              emit.start().brush().end();\n            });\n      }\n    };\n\n    function redraw() {\n      var group = select(this),\n          selection = local$1(this).selection;\n\n      if (selection) {\n        group.selectAll(\".selection\")\n            .style(\"display\", null)\n            .attr(\"x\", selection[0][0])\n            .attr(\"y\", selection[0][1])\n            .attr(\"width\", selection[1][0] - selection[0][0])\n            .attr(\"height\", selection[1][1] - selection[0][1]);\n\n        group.selectAll(\".handle\")\n            .style(\"display\", null)\n            .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n            .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n            .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n            .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n      }\n\n      else {\n        group.selectAll(\".selection,.handle\")\n            .style(\"display\", \"none\")\n            .attr(\"x\", null)\n            .attr(\"y\", null)\n            .attr(\"width\", null)\n            .attr(\"height\", null);\n      }\n    }\n\n    function emitter(that, args) {\n      return that.__brush.emitter || new Emitter(that, args);\n    }\n\n    function Emitter(that, args) {\n      this.that = that;\n      this.args = args;\n      this.state = that.__brush;\n      this.active = 0;\n    }\n\n    Emitter.prototype = {\n      beforestart: function() {\n        if (++this.active === 1) this.state.emitter = this, this.starting = true;\n        return this;\n      },\n      start: function() {\n        if (this.starting) this.starting = false, this.emit(\"start\");\n        return this;\n      },\n      brush: function() {\n        this.emit(\"brush\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function started() {\n      if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$2(); }\n      else if (touchending) return;\n      if (!filter.apply(this, arguments)) return;\n\n      var that = this,\n          type = exports.event.target.__data__.type,\n          mode = (exports.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),\n          signX = dim === Y ? null : signsX[type],\n          signY = dim === X ? null : signsY[type],\n          state = local$1(that),\n          extent = state.extent,\n          selection = state.selection,\n          W = extent[0][0], w0, w1,\n          N = extent[0][1], n0, n1,\n          E = extent[1][0], e0, e1,\n          S = extent[1][1], s0, s1,\n          dx,\n          dy,\n          moving,\n          shifting = signX && signY && exports.event.shiftKey,\n          lockX,\n          lockY,\n          point0 = mouse(that),\n          point = point0,\n          emit = emitter(that, arguments).beforestart();\n\n      if (type === \"overlay\") {\n        state.selection = selection = [\n          [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\n          [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\n        ];\n      } else {\n        w0 = selection[0][0];\n        n0 = selection[0][1];\n        e0 = selection[1][0];\n        s0 = selection[1][1];\n      }\n\n      w1 = w0;\n      n1 = n0;\n      e1 = e0;\n      s1 = s0;\n\n      var group = select(that)\n          .attr(\"pointer-events\", \"none\");\n\n      var overlay = group.selectAll(\".overlay\")\n          .attr(\"cursor\", cursors[type]);\n\n      if (exports.event.touches) {\n        group\n            .on(\"touchmove.brush\", moved, true)\n            .on(\"touchend.brush touchcancel.brush\", ended, true);\n      } else {\n        var view = select(exports.event.view)\n            .on(\"keydown.brush\", keydowned, true)\n            .on(\"keyup.brush\", keyupped, true)\n            .on(\"mousemove.brush\", moved, true)\n            .on(\"mouseup.brush\", ended, true);\n\n        dragDisable(exports.event.view);\n      }\n\n      nopropagation$2();\n      interrupt(that);\n      redraw.call(that);\n      emit.start();\n\n      function moved() {\n        var point1 = mouse(that);\n        if (shifting && !lockX && !lockY) {\n          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\n          else lockX = true;\n        }\n        point = point1;\n        moving = true;\n        noevent$2();\n        move();\n      }\n\n      function move() {\n        var t;\n\n        dx = point[0] - point0[0];\n        dy = point[1] - point0[1];\n\n        switch (mode) {\n          case MODE_SPACE:\n          case MODE_DRAG: {\n            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n            break;\n          }\n          case MODE_HANDLE: {\n            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n            break;\n          }\n          case MODE_CENTER: {\n            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n            break;\n          }\n        }\n\n        if (e1 < w1) {\n          signX *= -1;\n          t = w0, w0 = e0, e0 = t;\n          t = w1, w1 = e1, e1 = t;\n          if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n        }\n\n        if (s1 < n1) {\n          signY *= -1;\n          t = n0, n0 = s0, s0 = t;\n          t = n1, n1 = s1, s1 = t;\n          if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n        }\n\n        selection = state.selection; // May be set by brush.move!\n\n        if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n        if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n        if (selection[0][0] !== w1\n            || selection[0][1] !== n1\n            || selection[1][0] !== e1\n            || selection[1][1] !== s1) {\n          state.selection = [[w1, n1], [e1, s1]];\n          redraw.call(that);\n          emit.brush();\n        }\n      }\n\n      function ended() {\n        nopropagation$2();\n        if (exports.event.touches) {\n          if (exports.event.touches.length) return;\n          if (touchending) clearTimeout(touchending);\n          touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n          group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n        } else {\n          dragEnable(exports.event.view, moving);\n          view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n        }\n        group.attr(\"pointer-events\", \"all\");\n        overlay.attr(\"cursor\", cursors.overlay);\n        if (empty$1(selection)) state.selection = null, redraw.call(that);\n        emit.end();\n      }\n\n      function keydowned() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            shifting = signX && signY;\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_HANDLE) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE; takes priority over ALT\n            if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n              if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n              mode = MODE_SPACE;\n              overlay.attr(\"cursor\", cursors.selection);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n\n      function keyupped() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            if (shifting) {\n              lockX = lockY = shifting = false;\n              move();\n            }\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE\n            if (mode === MODE_SPACE) {\n              if (exports.event.altKey) {\n                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n                mode = MODE_CENTER;\n              } else {\n                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n                mode = MODE_HANDLE;\n              }\n              overlay.attr(\"cursor\", cursors[type]);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n    }\n\n    function initialize() {\n      var state = this.__brush || {selection: null};\n      state.extent = extent.apply(this, arguments);\n      state.dim = dim;\n      return state;\n    }\n\n    brush.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$10([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n    };\n\n    brush.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$10(!!_), brush) : filter;\n    };\n\n    brush.handleSize = function(_) {\n      return arguments.length ? (handleSize = +_, brush) : handleSize;\n    };\n\n    brush.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? brush : value;\n    };\n\n    return brush;\n  }\n\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var pi$3 = Math.PI;\n  var halfPi$2 = pi$3 / 2;\n  var tau$3 = pi$3 * 2;\n  var max$1 = Math.max;\n\n  function compareValue(compare) {\n    return function(a, b) {\n      return compare(\n        a.source.value + a.target.value,\n        b.source.value + b.target.value\n      );\n    };\n  }\n\n  function chord() {\n    var padAngle = 0,\n        sortGroups = null,\n        sortSubgroups = null,\n        sortChords = null;\n\n    function chord(matrix) {\n      var n = matrix.length,\n          groupSums = [],\n          groupIndex = range(n),\n          subgroupIndex = [],\n          chords = [],\n          groups = chords.groups = new Array(n),\n          subgroups = new Array(n * n),\n          k,\n          x,\n          x0,\n          dx,\n          i,\n          j;\n\n      // Compute the sum.\n      k = 0, i = -1; while (++i < n) {\n        x = 0, j = -1; while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(range(n));\n        k += x;\n      }\n\n      // Sort groups…\n      if (sortGroups) groupIndex.sort(function(a, b) {\n        return sortGroups(groupSums[a], groupSums[b]);\n      });\n\n      // Sort subgroups…\n      if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\n        d.sort(function(a, b) {\n          return sortSubgroups(matrix[i][a], matrix[i][b]);\n        });\n      });\n\n      // Convert the sum to scaling factor for [0, 2pi].\n      // TODO Allow start and end angle to be specified?\n      // TODO Allow padding to be specified as percentage?\n      k = max$1(0, tau$3 - padAngle * n) / k;\n      dx = k ? padAngle : tau$3 / n;\n\n      // Compute the start and end angle for each group and subgroup.\n      // Note: Opera has a bug reordering object literal properties!\n      x = 0, i = -1; while (++i < n) {\n        x0 = x, j = -1; while (++j < n) {\n          var di = groupIndex[i],\n              dj = subgroupIndex[di][j],\n              v = matrix[di][dj],\n              a0 = x,\n              a1 = x += v * k;\n          subgroups[dj * n + di] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += dx;\n      }\n\n      // Generate chords for each (non-empty) subgroup-subgroup link.\n      i = -1; while (++i < n) {\n        j = i - 1; while (++j < n) {\n          var source = subgroups[j * n + i],\n              target = subgroups[i * n + j];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value\n                ? {source: target, target: source}\n                : {source: source, target: target});\n          }\n        }\n      }\n\n      return sortChords ? chords.sort(sortChords) : chords;\n    }\n\n    chord.padAngle = function(_) {\n      return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;\n    };\n\n    chord.sortGroups = function(_) {\n      return arguments.length ? (sortGroups = _, chord) : sortGroups;\n    };\n\n    chord.sortSubgroups = function(_) {\n      return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n    };\n\n    chord.sortChords = function(_) {\n      return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n    };\n\n    return chord;\n  }\n\n  var slice$5 = Array.prototype.slice;\n\n  function constant$11(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultSource(d) {\n    return d.source;\n  }\n\n  function defaultTarget(d) {\n    return d.target;\n  }\n\n  function defaultRadius$1(d) {\n    return d.radius;\n  }\n\n  function defaultStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function defaultEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function ribbon() {\n    var source = defaultSource,\n        target = defaultTarget,\n        radius = defaultRadius$1,\n        startAngle = defaultStartAngle,\n        endAngle = defaultEndAngle,\n        context = null;\n\n    function ribbon() {\n      var buffer,\n          argv = slice$5.call(arguments),\n          s = source.apply(this, argv),\n          t = target.apply(this, argv),\n          sr = +radius.apply(this, (argv[0] = s, argv)),\n          sa0 = startAngle.apply(this, argv) - halfPi$2,\n          sa1 = endAngle.apply(this, argv) - halfPi$2,\n          sx0 = sr * cos(sa0),\n          sy0 = sr * sin(sa0),\n          tr = +radius.apply(this, (argv[0] = t, argv)),\n          ta0 = startAngle.apply(this, argv) - halfPi$2,\n          ta1 = endAngle.apply(this, argv) - halfPi$2;\n\n      if (!context) context = buffer = path();\n\n      context.moveTo(sx0, sy0);\n      context.arc(0, 0, sr, sa0, sa1);\n      if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\n        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n        context.arc(0, 0, tr, ta0, ta1);\n      }\n      context.quadraticCurveTo(0, 0, sx0, sy0);\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    ribbon.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : radius;\n    };\n\n    ribbon.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : startAngle;\n    };\n\n    ribbon.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$11(+_), ribbon) : endAngle;\n    };\n\n    ribbon.source = function(_) {\n      return arguments.length ? (source = _, ribbon) : source;\n    };\n\n    ribbon.target = function(_) {\n      return arguments.length ? (target = _, ribbon) : target;\n    };\n\n    ribbon.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\n    };\n\n    return ribbon;\n  }\n\n  // Adds floating point numbers with twice the normal precision.\n  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n  // 305–363 (1997).\n  // Code adapted from GeographicLib by Charles F. F. Karney,\n  // http://geographiclib.sourceforge.net/\n\n  function adder() {\n    return new Adder;\n  }\n\n  function Adder() {\n    this.reset();\n  }\n\n  Adder.prototype = {\n    constructor: Adder,\n    reset: function() {\n      this.s = // rounded value\n      this.t = 0; // exact error\n    },\n    add: function(y) {\n      add$1(temp, y, this.t);\n      add$1(this, temp.s, this.s);\n      if (this.s) this.t += temp.t;\n      else this.s = temp.t;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n\n  var temp = new Adder;\n\n  function add$1(adder, a, b) {\n    var x = adder.s = a + b,\n        bv = x - a,\n        av = x - bv;\n    adder.t = (a - av) + (b - bv);\n  }\n\n  var epsilon$4 = 1e-6;\n  var epsilon2$2 = 1e-12;\n  var pi$4 = Math.PI;\n  var halfPi$3 = pi$4 / 2;\n  var quarterPi = pi$4 / 4;\n  var tau$4 = pi$4 * 2;\n\n  var degrees$1 = 180 / pi$4;\n  var radians = pi$4 / 180;\n\n  var abs = Math.abs;\n  var atan = Math.atan;\n  var atan2 = Math.atan2;\n  var cos$1 = Math.cos;\n  var ceil = Math.ceil;\n  var exp = Math.exp;\n  var log$1 = Math.log;\n  var pow$1 = Math.pow;\n  var sin$1 = Math.sin;\n  var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\n  var sqrt$1 = Math.sqrt;\n  var tan = Math.tan;\n\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);\n  }\n\n  function asin$1(x) {\n    return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);\n  }\n\n  function haversin(x) {\n    return (x = sin$1(x / 2)) * x;\n  }\n\n  function noop$2() {}\n\n  function streamGeometry(geometry, stream) {\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n      streamGeometryType[geometry.type](geometry, stream);\n    }\n  }\n\n  var streamObjectType = {\n    Feature: function(feature, stream) {\n      streamGeometry(feature.geometry, stream);\n    },\n    FeatureCollection: function(object, stream) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) streamGeometry(features[i].geometry, stream);\n    }\n  };\n\n  var streamGeometryType = {\n    Sphere: function(object, stream) {\n      stream.sphere();\n    },\n    Point: function(object, stream) {\n      object = object.coordinates;\n      stream.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, stream) {\n      streamLine(object.coordinates, stream, 0);\n    },\n    MultiLineString: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamLine(coordinates[i], stream, 0);\n    },\n    Polygon: function(object, stream) {\n      streamPolygon(object.coordinates, stream);\n    },\n    MultiPolygon: function(object, stream) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamPolygon(coordinates[i], stream);\n    },\n    GeometryCollection: function(object, stream) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) streamGeometry(geometries[i], stream);\n    }\n  };\n\n  function streamLine(coordinates, stream, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    stream.lineStart();\n    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n    stream.lineEnd();\n  }\n\n  function streamPolygon(coordinates, stream) {\n    var i = -1, n = coordinates.length;\n    stream.polygonStart();\n    while (++i < n) streamLine(coordinates[i], stream, 1);\n    stream.polygonEnd();\n  }\n\n  function stream(object, stream) {\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\n      streamObjectType[object.type](object, stream);\n    } else {\n      streamGeometry(object, stream);\n    }\n  }\n\n  var areaRingSum;\n\n  var areaSum;\n  var lambda00;\n  var phi00;\n  var lambda0;\n  var cosPhi0;\n  var sinPhi0;\n  var areaStream = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaRingSum.reset();\n      areaStream.lineStart = areaRingStart;\n      areaStream.lineEnd = areaRingEnd;\n    },\n    polygonEnd: function() {\n      var areaRing = +areaRingSum;\n      areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);\n      this.lineStart = this.lineEnd = this.point = noop$2;\n    },\n    sphere: function() {\n      areaSum.add(tau$4);\n    }\n  };\n\n  function areaRingStart() {\n    areaStream.point = areaPointFirst;\n  }\n\n  function areaRingEnd() {\n    areaPoint(lambda00, phi00);\n  }\n\n  function areaPointFirst(lambda, phi) {\n    areaStream.point = areaPoint;\n    lambda00 = lambda, phi00 = phi;\n    lambda *= radians, phi *= radians;\n    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);\n  }\n\n  function areaPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    var dLambda = lambda - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        cosPhi = cos$1(phi),\n        sinPhi = sin$1(phi),\n        k = sinPhi0 * sinPhi,\n        u = cosPhi0 * cosPhi + k * cos$1(adLambda),\n        v = k * sdLambda * sin$1(adLambda);\n    areaRingSum.add(atan2(v, u));\n\n    // Advance the previous points.\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n  }\n\n  function area$2(object) {\n    if (areaSum) areaSum.reset();\n    else areaSum = adder(), areaRingSum = adder();\n    stream(object, areaStream);\n    return areaSum * 2;\n  }\n\n  function spherical(cartesian) {\n    return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];\n  }\n\n  function cartesian(spherical) {\n    var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);\n    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];\n  }\n\n  function cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  function cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  }\n\n  // TODO return a\n  function cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n  }\n\n  function cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  }\n\n  // TODO return d\n  function cartesianNormalizeInPlace(d) {\n    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n  }\n\nvar   lambda0$1;\n  var phi0;\n  var lambda1;\n  var phi1;\n  var lambda2;\nvar   lambda00$1;\nvar   phi00$1;\n  var p0;\n  var deltaSum;\n  var ranges;\nvar   range$1;\n  var boundsStream = {\n    point: boundsPoint,\n    lineStart: boundsLineStart,\n    lineEnd: boundsLineEnd,\n    polygonStart: function() {\n      boundsStream.point = boundsRingPoint;\n      boundsStream.lineStart = boundsRingStart;\n      boundsStream.lineEnd = boundsRingEnd;\n      deltaSum.reset();\n      areaStream.polygonStart();\n    },\n    polygonEnd: function() {\n      areaStream.polygonEnd();\n      boundsStream.point = boundsPoint;\n      boundsStream.lineStart = boundsLineStart;\n      boundsStream.lineEnd = boundsLineEnd;\n      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n      else if (deltaSum > epsilon$4) phi1 = 90;\n      else if (deltaSum < -epsilon$4) phi0 = -90;\n      range$1[0] = lambda0$1, range$1[1] = lambda1;\n    }\n  };\n\n  function boundsPoint(lambda, phi) {\n    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n  }\n\n  function linePoint(lambda, phi) {\n    var p = cartesian([lambda * radians, phi * radians]);\n    if (p0) {\n      var normal = cartesianCross(p0, p),\n          equatorial = [normal[1], -normal[0], 0],\n          inflection = cartesianCross(equatorial, normal);\n      cartesianNormalizeInPlace(inflection);\n      inflection = spherical(inflection);\n      var delta = lambda - lambda2,\n          sign = delta > 0 ? 1 : -1,\n          lambdai = inflection[0] * degrees$1 * sign,\n          phii,\n          antimeridian = abs(delta) > 180;\n      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = inflection[1] * degrees$1;\n        if (phii > phi1) phi1 = phii;\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = -inflection[1] * degrees$1;\n        if (phii < phi0) phi0 = phii;\n      } else {\n        if (phi < phi0) phi0 = phi;\n        if (phi > phi1) phi1 = phi;\n      }\n      if (antimeridian) {\n        if (lambda < lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      } else {\n        if (lambda1 >= lambda0$1) {\n          if (lambda < lambda0$1) lambda0$1 = lambda;\n          if (lambda > lambda1) lambda1 = lambda;\n        } else {\n          if (lambda > lambda2) {\n            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n          } else {\n            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n          }\n        }\n      }\n    } else {\n      boundsPoint(lambda, phi);\n    }\n    p0 = p, lambda2 = lambda;\n  }\n\n  function boundsLineStart() {\n    boundsStream.point = linePoint;\n  }\n\n  function boundsLineEnd() {\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    boundsStream.point = boundsPoint;\n    p0 = null;\n  }\n\n  function boundsRingPoint(lambda, phi) {\n    if (p0) {\n      var delta = lambda - lambda2;\n      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n    } else {\n      lambda00$1 = lambda, phi00$1 = phi;\n    }\n    areaStream.point(lambda, phi);\n    linePoint(lambda, phi);\n  }\n\n  function boundsRingStart() {\n    areaStream.lineStart();\n  }\n\n  function boundsRingEnd() {\n    boundsRingPoint(lambda00$1, phi00$1);\n    areaStream.lineEnd();\n    if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    p0 = null;\n  }\n\n  // Finds the left-right distance between two longitudes.\n  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n  // the distance between ±180° to be 360°.\n  function angle(lambda0, lambda1) {\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n  }\n\n  function rangeCompare(a, b) {\n    return a[0] - b[0];\n  }\n\n  function rangeContains(range, x) {\n    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n  }\n\n  function bounds(feature) {\n    var i, n, a, b, merged, deltaMax, delta;\n\n    if (deltaSum) deltaSum.reset();\n    else deltaSum = adder();\n    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n    ranges = [];\n    stream(feature, boundsStream);\n\n    // First, sort ranges by their minimum longitudes.\n    if (n = ranges.length) {\n      ranges.sort(rangeCompare);\n\n      // Then, merge any ranges that overlap.\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n        b = ranges[i];\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n        } else {\n          merged.push(a = b);\n        }\n      }\n\n      // Finally, find the largest gap between the merged ranges.\n      // The final bounding box will be the inverse of this gap.\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n        b = merged[i];\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n      }\n    }\n\n    ranges = range$1 = null;\n\n    return lambda0$1 === Infinity || phi0 === Infinity\n        ? [[NaN, NaN], [NaN, NaN]]\n        : [[lambda0$1, phi0], [lambda1, phi1]];\n  }\n\n  var W0;\n  var W1;\n  var X0;\n  var Y0;\n  var Z0;\n  var X1;\n  var Y1;\n  var Z1;\n  var X2;\n  var Y2;\n  var Z2;\nvar   lambda00$2;\nvar   phi00$2;\n  var x0;\n  var y0;\n  var z0;\n  // previous point\n\n  var centroidStream = {\n    sphere: noop$2,\n    point: centroidPoint,\n    lineStart: centroidLineStart,\n    lineEnd: centroidLineEnd,\n    polygonStart: function() {\n      centroidStream.lineStart = centroidRingStart;\n      centroidStream.lineEnd = centroidRingEnd;\n    },\n    polygonEnd: function() {\n      centroidStream.lineStart = centroidLineStart;\n      centroidStream.lineEnd = centroidLineEnd;\n    }\n  };\n\n  // Arithmetic mean of Cartesian vectors.\n  function centroidPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));\n  }\n\n  function centroidPointCartesian(x, y, z) {\n    ++W0;\n    X0 += (x - X0) / W0;\n    Y0 += (y - Y0) / W0;\n    Z0 += (z - Z0) / W0;\n  }\n\n  function centroidLineStart() {\n    centroidStream.point = centroidLinePointFirst;\n  }\n\n  function centroidLinePointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidStream.point = centroidLinePoint;\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLinePoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLineEnd() {\n    centroidStream.point = centroidPoint;\n  }\n\n  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n  // J. Applied Mechanics 42, 239 (1975).\n  function centroidRingStart() {\n    centroidStream.point = centroidRingPointFirst;\n  }\n\n  function centroidRingEnd() {\n    centroidRingPoint(lambda00$2, phi00$2);\n    centroidStream.point = centroidPoint;\n  }\n\n  function centroidRingPointFirst(lambda, phi) {\n    lambda00$2 = lambda, phi00$2 = phi;\n    lambda *= radians, phi *= radians;\n    centroidStream.point = centroidRingPoint;\n    var cosPhi = cos$1(phi);\n    x0 = cosPhi * cos$1(lambda);\n    y0 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidRingPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        cx = y0 * z - z0 * y,\n        cy = z0 * x - x0 * z,\n        cz = x0 * y - y0 * x,\n        m = sqrt$1(cx * cx + cy * cy + cz * cz),\n        u = x0 * x + y0 * y + z0 * z,\n        v = m && -acos(u) / m, // area weight\n        w = atan2(m, u); // line weight\n    X2 += v * cx;\n    Y2 += v * cy;\n    Z2 += v * cz;\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroid$1(object) {\n    W0 = W1 =\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    stream(object, centroidStream);\n\n    var x = X2,\n        y = Y2,\n        z = Z2,\n        m = x * x + y * y + z * z;\n\n    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n    if (m < epsilon2$2) {\n      x = X1, y = Y1, z = Z1;\n      // If the feature has zero length, fall back to arithmetic mean of point vectors.\n      if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;\n      m = x * x + y * y + z * z;\n      // If the feature still has an undefined ccentroid, then return.\n      if (m < epsilon2$2) return [NaN, NaN];\n    }\n\n    return [atan2(y, x) * degrees$1, asin$1(z / sqrt$1(m)) * degrees$1];\n  }\n\n  function constant$12(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function compose(a, b) {\n\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n\n    return compose;\n  }\n\n  function rotationIdentity(lambda, phi) {\n    return [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];\n  }\n\n  rotationIdentity.invert = rotationIdentity;\n\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n    return (deltaLambda %= tau$4) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n      : rotationLambda(deltaLambda))\n      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n      : rotationIdentity);\n  }\n\n  function forwardRotationLambda(deltaLambda) {\n    return function(lambda, phi) {\n      return lambda += deltaLambda, [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];\n    };\n  }\n\n  function rotationLambda(deltaLambda) {\n    var rotation = forwardRotationLambda(deltaLambda);\n    rotation.invert = forwardRotationLambda(-deltaLambda);\n    return rotation;\n  }\n\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\n    var cosDeltaPhi = cos$1(deltaPhi),\n        sinDeltaPhi = sin$1(deltaPhi),\n        cosDeltaGamma = cos$1(deltaGamma),\n        sinDeltaGamma = sin$1(deltaGamma);\n\n    function rotation(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\n      return [\n        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)\n      ];\n    }\n\n    rotation.invert = function(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\n      return [\n        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)\n      ];\n    };\n\n    return rotation;\n  }\n\n  function rotation(rotate) {\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    }\n\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    };\n\n    return forward;\n  }\n\n  // Generates a circle centered at [0°, 0°], with a given radius and precision.\n  function circleStream(stream, radius, delta, direction, t0, t1) {\n    if (!delta) return;\n    var cosRadius = cos$1(radius),\n        sinRadius = sin$1(radius),\n        step = direction * delta;\n    if (t0 == null) {\n      t0 = radius + direction * tau$4;\n      t1 = radius - step / 2;\n    } else {\n      t0 = circleRadius(cosRadius, t0);\n      t1 = circleRadius(cosRadius, t1);\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;\n    }\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);\n      stream.point(point[0], point[1]);\n    }\n  }\n\n  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n  function circleRadius(cosRadius, point) {\n    point = cartesian(point), point[0] -= cosRadius;\n    cartesianNormalizeInPlace(point);\n    var radius = acos(-point[1]);\n    return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;\n  }\n\n  function circle$1() {\n    var center = constant$12([0, 0]),\n        radius = constant$12(90),\n        precision = constant$12(6),\n        ring,\n        rotate,\n        stream = {point: point};\n\n    function point(x, y) {\n      ring.push(x = rotate(x, y));\n      x[0] *= degrees$1, x[1] *= degrees$1;\n    }\n\n    function circle() {\n      var c = center.apply(this, arguments),\n          r = radius.apply(this, arguments) * radians,\n          p = precision.apply(this, arguments) * radians;\n      ring = [];\n      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n      circleStream(stream, r, p, 1);\n      c = {type: \"Polygon\", coordinates: [ring]};\n      ring = rotate = null;\n      return c;\n    }\n\n    circle.center = function(_) {\n      return arguments.length ? (center = typeof _ === \"function\" ? _ : constant$12([+_[0], +_[1]]), circle) : center;\n    };\n\n    circle.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$12(+_), circle) : radius;\n    };\n\n    circle.precision = function(_) {\n      return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant$12(+_), circle) : precision;\n    };\n\n    return circle;\n  }\n\n  function clipBuffer() {\n    var lines = [],\n        line;\n    return {\n      point: function(x, y) {\n        line.push([x, y]);\n      },\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      lineEnd: noop$2,\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      },\n      result: function() {\n        var result = lines;\n        lines = [];\n        line = null;\n        return result;\n      }\n    };\n  }\n\n  function clipLine(a, b, x0, y0, x1, y1) {\n    var ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n    return true;\n  }\n\n  function pointEqual(a, b) {\n    return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;\n  }\n\n  function Intersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other; // another intersection\n    this.e = entry; // is an entry?\n    this.v = false; // visited\n    this.n = this.p = null; // next & previous\n  }\n\n  // A generalized polygon clipping algorithm: given a polygon that has been cut\n  // into its visible line segments, and rejoins the segments by interpolating\n  // along the clip edge.\n  function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {\n    var subject = [],\n        clip = [],\n        i,\n        n;\n\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n], x;\n\n      // If the first and last points of a segment are coincident, then treat as a\n      // closed ring. TODO if all rings are closed, then the winding order of the\n      // exterior ring should be checked.\n      if (pointEqual(p0, p1)) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n\n      subject.push(x = new Intersection(p0, segment, null, true));\n      clip.push(x.o = new Intersection(p0, null, x, false));\n      subject.push(x = new Intersection(p1, segment, null, false));\n      clip.push(x.o = new Intersection(p1, null, x, true));\n    });\n\n    if (!subject.length) return;\n\n    clip.sort(compareIntersection);\n    link$1(subject);\n    link$1(clip);\n\n    for (i = 0, n = clip.length; i < n; ++i) {\n      clip[i].e = startInside = !startInside;\n    }\n\n    var start = subject[0],\n        points,\n        point;\n\n    while (1) {\n      // Find first unvisited intersection.\n      var current = start,\n          isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      stream.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, stream);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, stream);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      stream.lineEnd();\n    }\n  }\n\n  function link$1(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n\n  var clipMax = 1e9;\n  var clipMin = -clipMax;\n  // TODO Use d3-polygon’s polygonContains here for the ring check?\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\n  function clipExtent(x0, y0, x1, y1) {\n\n    function visible(x, y) {\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n    }\n\n    function interpolate(from, to, direction, stream) {\n      var a = 0, a1 = 0;\n      if (from == null\n          || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n          || comparePoint(from, to) < 0 ^ direction > 0) {\n        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n        while ((a = (a + direction + 4) % 4) !== a1);\n      } else {\n        stream.point(to[0], to[1]);\n      }\n    }\n\n    function corner(p, direction) {\n      return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3\n          : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1\n          : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0\n          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n    }\n\n    function compareIntersection(a, b) {\n      return comparePoint(a.x, b.x);\n    }\n\n    function comparePoint(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb\n          : ca === 0 ? b[1] - a[1]\n          : ca === 1 ? a[0] - b[0]\n          : ca === 2 ? a[1] - b[1]\n          : b[0] - a[0];\n    }\n\n    return function(stream) {\n      var activeStream = stream,\n          bufferStream = clipBuffer(),\n          segments,\n          polygon,\n          ring,\n          x__, y__, v__, // first point\n          x_, y_, v_, // previous point\n          first,\n          clean;\n\n      var clipStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: polygonStart,\n        polygonEnd: polygonEnd\n      };\n\n      function point(x, y) {\n        if (visible(x, y)) activeStream.point(x, y);\n      }\n\n      function polygonInside() {\n        var winding = 0;\n\n        for (var i = 0, n = polygon.length; i < n; ++i) {\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n          }\n        }\n\n        return winding;\n      }\n\n      // Buffer geometry within a polygon and then clip it en masse.\n      function polygonStart() {\n        activeStream = bufferStream, segments = [], polygon = [], clean = true;\n      }\n\n      function polygonEnd() {\n        var startInside = polygonInside(),\n            cleanInside = clean && startInside,\n            visible = (segments = merge(segments)).length;\n        if (cleanInside || visible) {\n          stream.polygonStart();\n          if (cleanInside) {\n            stream.lineStart();\n            interpolate(null, null, 1, stream);\n            stream.lineEnd();\n          }\n          if (visible) {\n            clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n          }\n          stream.polygonEnd();\n        }\n        activeStream = stream, segments = polygon = ring = null;\n      }\n\n      function lineStart() {\n        clipStream.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n\n      // TODO rather than special-case polygons, simply handle them separately.\n      // Ideally, coincident intersection points should be jittered to avoid\n      // clipping issues.\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferStream.rejoin();\n          segments.push(bufferStream.result());\n        }\n        clipStream.point = point;\n        if (v_) activeStream.lineEnd();\n      }\n\n      function linePoint(x, y) {\n        var v = visible(x, y);\n        if (polygon) ring.push([x, y]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n          }\n        } else {\n          if (v && v_) activeStream.point(x, y);\n          else {\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n            if (clipLine(a, b, x0, y0, x1, y1)) {\n              if (!v_) {\n                activeStream.lineStart();\n                activeStream.point(a[0], a[1]);\n              }\n              activeStream.point(b[0], b[1]);\n              if (!v) activeStream.lineEnd();\n              clean = false;\n            } else if (v) {\n              activeStream.lineStart();\n              activeStream.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n\n      return clipStream;\n    };\n  }\n\n  function extent$1() {\n    var x0 = 0,\n        y0 = 0,\n        x1 = 960,\n        y1 = 500,\n        cache,\n        cacheStream,\n        clip;\n\n    return clip = {\n      stream: function(stream) {\n        return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n      },\n      extent: function(_) {\n        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n      }\n    };\n  }\n\n  var lengthSum;\nvar   lambda0$2;\nvar   sinPhi0$1;\nvar   cosPhi0$1;\n  var lengthStream = {\n    sphere: noop$2,\n    point: noop$2,\n    lineStart: lengthLineStart,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2\n  };\n\n  function lengthLineStart() {\n    lengthStream.point = lengthPointFirst;\n    lengthStream.lineEnd = lengthLineEnd;\n  }\n\n  function lengthLineEnd() {\n    lengthStream.point = lengthStream.lineEnd = noop$2;\n  }\n\n  function lengthPointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);\n    lengthStream.point = lengthPoint;\n  }\n\n  function lengthPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var sinPhi = sin$1(phi),\n        cosPhi = cos$1(phi),\n        delta = abs(lambda - lambda0$2),\n        cosDelta = cos$1(delta),\n        sinDelta = sin$1(delta),\n        x = cosPhi * sinDelta,\n        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n    lengthSum.add(atan2(sqrt$1(x * x + y * y), z));\n    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n  }\n\n  function length$2(object) {\n    if (lengthSum) lengthSum.reset();\n    else lengthSum = adder();\n    stream(object, lengthStream);\n    return +lengthSum;\n  }\n\n  var coordinates = [null, null];\nvar   object$1 = {type: \"LineString\", coordinates: coordinates};\n  function distance(a, b) {\n    coordinates[0] = a;\n    coordinates[1] = b;\n    return length$2(object$1);\n  }\n\n  function graticuleX(y0, y1, dy) {\n    var y = range(y0, y1 - epsilon$4, dy).concat(y1);\n    return function(x) { return y.map(function(y) { return [x, y]; }); };\n  }\n\n  function graticuleY(x0, x1, dx) {\n    var x = range(x0, x1 - epsilon$4, dx).concat(x1);\n    return function(y) { return x.map(function(x) { return [x, y]; }); };\n  }\n\n  function graticule() {\n    var x1, x0, X1, X0,\n        y1, y0, Y1, Y0,\n        dx = 10, dy = dx, DX = 90, DY = 360,\n        x, y, X, Y,\n        precision = 2.5;\n\n    function graticule() {\n      return {type: \"MultiLineString\", coordinates: lines()};\n    }\n\n    function lines() {\n      return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n          .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n          .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$4; }).map(x))\n          .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$4; }).map(y));\n    }\n\n    graticule.lines = function() {\n      return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n    };\n\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [\n          X(X0).concat(\n          Y(Y1).slice(1),\n          X(X1).reverse().slice(1),\n          Y(Y0).reverse().slice(1))\n        ]\n      };\n    };\n\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.extentMinor();\n      return graticule.extentMajor(_).extentMinor(_);\n    };\n\n    graticule.extentMajor = function(_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.extentMinor = function(_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.stepMinor();\n      return graticule.stepMajor(_).stepMinor(_);\n    };\n\n    graticule.stepMajor = function(_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n\n    graticule.stepMinor = function(_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = graticuleX(y0, y1, 90);\n      y = graticuleY(x0, x1, precision);\n      X = graticuleX(Y0, Y1, 90);\n      Y = graticuleY(X0, X1, precision);\n      return graticule;\n    };\n\n    return graticule\n        .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])\n        .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);\n  }\n\n  function interpolate$2(a, b) {\n    var x0 = a[0] * radians,\n        y0 = a[1] * radians,\n        x1 = b[0] * radians,\n        y1 = b[1] * radians,\n        cy0 = cos$1(y0),\n        sy0 = sin$1(y0),\n        cy1 = cos$1(y1),\n        sy1 = sin$1(y1),\n        kx0 = cy0 * cos$1(x0),\n        ky0 = cy0 * sin$1(x0),\n        kx1 = cy1 * cos$1(x1),\n        ky1 = cy1 * sin$1(x1),\n        d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n        k = sin$1(d);\n\n    var interpolate = d ? function(t) {\n      var B = sin$1(t *= d) / k,\n          A = sin$1(d - t) / k,\n          x = A * kx0 + B * kx1,\n          y = A * ky0 + B * ky1,\n          z = A * sy0 + B * sy1;\n      return [\n        atan2(y, x) * degrees$1,\n        atan2(z, sqrt$1(x * x + y * y)) * degrees$1\n      ];\n    } : function() {\n      return [x0 * degrees$1, y0 * degrees$1];\n    };\n\n    interpolate.distance = d;\n\n    return interpolate;\n  }\n\n  function identity$7(x) {\n    return x;\n  }\n\nvar   areaSum$1 = adder();\nvar   areaRingSum$1 = adder();\n  var x00;\n  var y00;\nvar   x0$1;\nvar   y0$1;\n  var areaStream$1 = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaStream$1.lineStart = areaRingStart$1;\n      areaStream$1.lineEnd = areaRingEnd$1;\n    },\n    polygonEnd: function() {\n      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;\n      areaSum$1.add(abs(areaRingSum$1));\n      areaRingSum$1.reset();\n    },\n    result: function() {\n      var area = areaSum$1 / 2;\n      areaSum$1.reset();\n      return area;\n    }\n  };\n\n  function areaRingStart$1() {\n    areaStream$1.point = areaPointFirst$1;\n  }\n\n  function areaPointFirst$1(x, y) {\n    areaStream$1.point = areaPoint$1;\n    x00 = x0$1 = x, y00 = y0$1 = y;\n  }\n\n  function areaPoint$1(x, y) {\n    areaRingSum$1.add(y0$1 * x - x0$1 * y);\n    x0$1 = x, y0$1 = y;\n  }\n\n  function areaRingEnd$1() {\n    areaPoint$1(x00, y00);\n  }\n\nvar   x0$2 = Infinity;\nvar   y0$2 = x0$2;\n  var x1 = -x0$2;\n  var y1 = x1;\n  var boundsStream$1 = {\n    point: boundsPoint$1,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2,\n    result: function() {\n      var bounds = [[x0$2, y0$2], [x1, y1]];\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n      return bounds;\n    }\n  };\n\n  function boundsPoint$1(x, y) {\n    if (x < x0$2) x0$2 = x;\n    if (x > x1) x1 = x;\n    if (y < y0$2) y0$2 = y;\n    if (y > y1) y1 = y;\n  }\n\nvar   X0$1 = 0;\nvar   Y0$1 = 0;\nvar   Z0$1 = 0;\nvar   X1$1 = 0;\nvar   Y1$1 = 0;\nvar   Z1$1 = 0;\nvar   X2$1 = 0;\nvar   Y2$1 = 0;\nvar   Z2$1 = 0;\nvar   x00$1;\nvar   y00$1;\nvar   x0$3;\nvar   y0$3;\n  var centroidStream$1 = {\n    point: centroidPoint$1,\n    lineStart: centroidLineStart$1,\n    lineEnd: centroidLineEnd$1,\n    polygonStart: function() {\n      centroidStream$1.lineStart = centroidRingStart$1;\n      centroidStream$1.lineEnd = centroidRingEnd$1;\n    },\n    polygonEnd: function() {\n      centroidStream$1.point = centroidPoint$1;\n      centroidStream$1.lineStart = centroidLineStart$1;\n      centroidStream$1.lineEnd = centroidLineEnd$1;\n    },\n    result: function() {\n      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n          : [NaN, NaN];\n      X0$1 = Y0$1 = Z0$1 =\n      X1$1 = Y1$1 = Z1$1 =\n      X2$1 = Y2$1 = Z2$1 = 0;\n      return centroid;\n    }\n  };\n\n  function centroidPoint$1(x, y) {\n    X0$1 += x;\n    Y0$1 += y;\n    ++Z0$1;\n  }\n\n  function centroidLineStart$1() {\n    centroidStream$1.point = centroidPointFirstLine;\n  }\n\n  function centroidPointFirstLine(x, y) {\n    centroidStream$1.point = centroidPointLine;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidPointLine(x, y) {\n    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidLineEnd$1() {\n    centroidStream$1.point = centroidPoint$1;\n  }\n\n  function centroidRingStart$1() {\n    centroidStream$1.point = centroidPointFirstRing;\n  }\n\n  function centroidRingEnd$1() {\n    centroidPointRing(x00$1, y00$1);\n  }\n\n  function centroidPointFirstRing(x, y) {\n    centroidStream$1.point = centroidPointRing;\n    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n  }\n\n  function centroidPointRing(x, y) {\n    var dx = x - x0$3,\n        dy = y - y0$3,\n        z = sqrt$1(dx * dx + dy * dy);\n\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n\n    z = y0$3 * x - x0$3 * y;\n    X2$1 += z * (x0$3 + x);\n    Y2$1 += z * (y0$3 + y);\n    Z2$1 += z * 3;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function PathContext(context) {\n    var pointRadius = 4.5;\n\n    var stream = {\n      point: point,\n\n      // While inside a line, override point to moveTo then lineTo.\n      lineStart: function() { stream.point = pointLineStart; },\n      lineEnd: lineEnd,\n\n      // While inside a polygon, override lineEnd to closePath.\n      polygonStart: function() { stream.lineEnd = lineEndPolygon; },\n      polygonEnd: function() { stream.lineEnd = lineEnd; stream.point = point; },\n\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n\n      result: noop$2\n    };\n\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, tau$4);\n    }\n\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n\n    function lineEnd() {\n      stream.point = point;\n    }\n\n    function lineEndPolygon() {\n      context.closePath();\n    }\n\n    return stream;\n  }\n\n  function PathString() {\n    var pointCircle = circle$2(4.5),\n        string = [];\n\n    var stream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = circle$2(_);\n        return stream;\n      },\n      result: function() {\n        if (string.length) {\n          var result = string.join(\"\");\n          string = [];\n          return result;\n        }\n      }\n    };\n\n    function point(x, y) {\n      string.push(\"M\", x, \",\", y, pointCircle);\n    }\n\n    function pointLineStart(x, y) {\n      string.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      string.push(\"L\", x, \",\", y);\n    }\n\n    function lineStart() {\n      stream.point = pointLineStart;\n    }\n\n    function lineEnd() {\n      stream.point = point;\n    }\n\n    function lineEndPolygon() {\n      string.push(\"Z\");\n    }\n\n    return stream;\n  }\n\n  function circle$2(radius) {\n    return \"m0,\" + radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n        + \"z\";\n  }\n\n  function index$3() {\n    var pointRadius = 4.5,\n        projection,\n        projectionStream,\n        context,\n        contextStream;\n\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        stream(object, projectionStream(contextStream));\n      }\n      return contextStream.result();\n    }\n\n    path.area = function(object) {\n      stream(object, projectionStream(areaStream$1));\n      return areaStream$1.result();\n    };\n\n    path.bounds = function(object) {\n      stream(object, projectionStream(boundsStream$1));\n      return boundsStream$1.result();\n    };\n\n    path.centroid = function(object) {\n      stream(object, projectionStream(centroidStream$1));\n      return centroidStream$1.result();\n    };\n\n    path.projection = function(_) {\n      return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;\n    };\n\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new PathString : new PathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return path;\n    };\n\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n\n    return path.projection(null).context(null);\n  }\n\n  var sum$2 = adder();\n\n  function polygonContains(polygon, point) {\n    var lambda = point[0],\n        phi = point[1],\n        normal = [sin$1(lambda), -cos$1(lambda), 0],\n        angle = 0,\n        winding = 0;\n\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      if (!(m = (ring = polygon[i]).length)) continue;\n      var ring,\n          m,\n          point0 = ring[m - 1],\n          lambda0 = point0[0],\n          phi0 = point0[1] / 2 + quarterPi,\n          sinPhi0 = sin$1(phi0),\n          cosPhi0 = cos$1(phi0);\n\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n        var point1 = ring[j],\n            lambda1 = point1[0],\n            phi1 = point1[1] / 2 + quarterPi,\n            sinPhi1 = sin$1(phi1),\n            cosPhi1 = cos$1(phi1),\n            delta = lambda1 - lambda0,\n            sign = delta >= 0 ? 1 : -1,\n            absDelta = sign * delta,\n            antimeridian = absDelta > pi$4,\n            k = sinPhi0 * sinPhi1;\n\n        sum$2.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));\n        angle += antimeridian ? delta + sign * tau$4 : delta;\n\n        // Are the longitudes either side of the point’s meridian (lambda),\n        // and are the latitudes smaller than the parallel (phi)?\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n          cartesianNormalizeInPlace(arc);\n          var intersection = cartesianCross(normal, arc);\n          cartesianNormalizeInPlace(intersection);\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n          }\n        }\n      }\n    }\n\n    // First, determine whether the South pole is inside or outside:\n    //\n    // It is inside if:\n    // * the polygon winds around it in a clockwise direction.\n    // * the polygon does not (cumulatively) wind around it, but has a negative\n    //   (counter-clockwise) area.\n    //\n    // Second, count the (signed) number of times a segment crosses a lambda\n    // from the point to the South pole.  If it is zero, then the point is the\n    // same side as the South pole.\n\n    var contains = (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ (winding & 1);\n    sum$2.reset();\n    return contains;\n  }\n\n  function clip(pointVisible, clipLine, interpolate, start) {\n    return function(rotate, sink) {\n      var line = clipLine(sink),\n          rotatedStart = rotate.invert(start[0], start[1]),\n          ringBuffer = clipBuffer(),\n          ringSink = clipLine(ringBuffer),\n          polygonStarted = false,\n          polygon,\n          segments,\n          ring;\n\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = merge(segments);\n          var startInside = polygonContains(polygon, rotatedStart);\n          if (segments.length) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n          } else if (startInside) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          sink.polygonStart();\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n          sink.polygonEnd();\n        }\n      };\n\n      function point(lambda, phi) {\n        var point = rotate(lambda, phi);\n        if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n      }\n\n      function pointLine(lambda, phi) {\n        var point = rotate(lambda, phi);\n        line.point(point[0], point[1]);\n      }\n\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n\n      function pointRing(lambda, phi) {\n        ring.push([lambda, phi]);\n        var point = rotate(lambda, phi);\n        ringSink.point(point[0], point[1]);\n      }\n\n      function ringStart() {\n        ringSink.lineStart();\n        ring = [];\n      }\n\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringSink.lineEnd();\n\n        var clean = ringSink.clean(),\n            ringSegments = ringBuffer.result(),\n            i, n = ringSegments.length, m,\n            segment,\n            point;\n\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n\n        if (!n) return;\n\n        // No intersections.\n        if (clean & 1) {\n          segment = ringSegments[0];\n          if ((m = segment.length - 1) > 0) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n            sink.lineEnd();\n          }\n          return;\n        }\n\n        // Rejoin connected segments.\n        // TODO reuse ringBuffer.rejoin()?\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n        segments.push(ringSegments.filter(validSegment));\n      }\n\n      return clip;\n    };\n  }\n\n  function validSegment(segment) {\n    return segment.length > 1;\n  }\n\n  // Intersections are sorted along the clip edge. For both antimeridian cutting\n  // and circle clipping, the same comparison is used.\n  function compareIntersection(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1])\n         - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);\n  }\n\n  var clipAntimeridian = clip(\n    function() { return true; },\n    clipAntimeridianLine,\n    clipAntimeridianInterpolate,\n    [-pi$4, -halfPi$3]\n  );\n\n  // Takes a line and cuts into visible segments. Return values: 0 - there were\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\n  // intersections, and the first and last segments should be rejoined.\n  function clipAntimeridianLine(stream) {\n    var lambda0 = NaN,\n        phi0 = NaN,\n        sign0 = NaN,\n        clean; // no intersections\n\n    return {\n      lineStart: function() {\n        stream.lineStart();\n        clean = 1;\n      },\n      point: function(lambda1, phi1) {\n        var sign1 = lambda1 > 0 ? pi$4 : -pi$4,\n            delta = abs(lambda1 - lambda0);\n        if (abs(delta - pi$4) < epsilon$4) { // line crosses a pole\n          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          stream.point(lambda1, phi0);\n          clean = 0;\n        } else if (sign0 !== sign1 && delta >= pi$4) { // line crosses antimeridian\n          if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies\n          if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          clean = 0;\n        }\n        stream.point(lambda0 = lambda1, phi0 = phi1);\n        sign0 = sign1;\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n        lambda0 = phi0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean; // if intersections, rejoin first and last segments\n      }\n    };\n  }\n\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n    var cosPhi0,\n        cosPhi1,\n        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);\n    return abs(sinLambda0Lambda1) > epsilon$4\n        ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)\n            - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))\n            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n        : (phi0 + phi1) / 2;\n  }\n\n  function clipAntimeridianInterpolate(from, to, direction, stream) {\n    var phi;\n    if (from == null) {\n      phi = direction * halfPi$3;\n      stream.point(-pi$4, phi);\n      stream.point(0, phi);\n      stream.point(pi$4, phi);\n      stream.point(pi$4, 0);\n      stream.point(pi$4, -phi);\n      stream.point(0, -phi);\n      stream.point(-pi$4, -phi);\n      stream.point(-pi$4, 0);\n      stream.point(-pi$4, phi);\n    } else if (abs(from[0] - to[0]) > epsilon$4) {\n      var lambda = from[0] < to[0] ? pi$4 : -pi$4;\n      phi = direction * lambda / 2;\n      stream.point(-lambda, phi);\n      stream.point(0, phi);\n      stream.point(lambda, phi);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function clipCircle(radius, delta) {\n    var cr = cos$1(radius),\n        smallRadius = cr > 0,\n        notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case\n\n    function interpolate(from, to, direction, stream) {\n      circleStream(stream, radius, delta, direction, from, to);\n    }\n\n    function visible(lambda, phi) {\n      return cos$1(lambda) * cos$1(phi) > cr;\n    }\n\n    // Takes a line and cuts into visible segments. Return values used for polygon\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\n    // intersections 2 - there were intersections, and the first and last segments\n    // should be rejoined.\n    function clipLine(stream) {\n      var point0, // previous point\n          c0, // code for previous point\n          v0, // visibility of previous point\n          v00, // visibility of first point\n          clean; // no intersections\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(lambda, phi) {\n          var point1 = [lambda, phi],\n              point2,\n              v = visible(lambda, phi),\n              c = smallRadius\n                ? v ? 0 : code(lambda, phi)\n                : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;\n          if (!point0 && (v00 = v0 = v)) stream.lineStart();\n          // Handle degeneracies.\n          // TODO ignore if not clipping polygons.\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n              point1[0] += epsilon$4;\n              point1[1] += epsilon$4;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              // outside going in\n              stream.lineStart();\n              point2 = intersect(point1, point0);\n              stream.point(point2[0], point2[1]);\n            } else {\n              // inside going out\n              point2 = intersect(point0, point1);\n              stream.point(point2[0], point2[1]);\n              stream.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            // If the codes for two points are different, or are both zero,\n            // and there this segment intersects with the small circle.\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n              } else {\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !pointEqual(point0, point1))) {\n            stream.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) stream.lineEnd();\n          point0 = null;\n        },\n        // Rejoin first and last segments if there were intersections and the first\n        // and last points were visible.\n        clean: function() {\n          return clean | ((v00 && v0) << 1);\n        }\n      };\n    }\n\n    // Intersects the great circle between a and b with the clip circle.\n    function intersect(a, b, two) {\n      var pa = cartesian(a),\n          pb = cartesian(b);\n\n      // We have two planes, n1.p = d1 and n2.p = d2.\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n      var n1 = [1, 0, 0], // normal\n          n2 = cartesianCross(pa, pb),\n          n2n2 = cartesianDot(n2, n2),\n          n1n2 = n2[0], // cartesianDot(n1, n2),\n          determinant = n2n2 - n1n2 * n1n2;\n\n      // Two polar points.\n      if (!determinant) return !two && a;\n\n      var c1 =  cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = cartesianCross(n1, n2),\n          A = cartesianScale(n1, c1),\n          B = cartesianScale(n2, c2);\n      cartesianAddInPlace(A, B);\n\n      // Solve |p(t)|^2 = 1.\n      var u = n1xn2,\n          w = cartesianDot(A, u),\n          uu = cartesianDot(u, u),\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n      if (t2 < 0) return;\n\n      var t = sqrt$1(t2),\n          q = cartesianScale(u, (-w - t) / uu);\n      cartesianAddInPlace(q, A);\n      q = spherical(q);\n\n      if (!two) return q;\n\n      // Two intersection points.\n      var lambda0 = a[0],\n          lambda1 = b[0],\n          phi0 = a[1],\n          phi1 = b[1],\n          z;\n\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n      var delta = lambda1 - lambda0,\n          polar = abs(delta - pi$4) < epsilon$4,\n          meridian = polar || delta < epsilon$4;\n\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n      // Check that the first point is between a and b.\n      if (meridian\n          ? polar\n            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)\n            : phi0 <= q[1] && q[1] <= phi1\n          : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n        var q1 = cartesianScale(u, (-w + t) / uu);\n        cartesianAddInPlace(q1, A);\n        return [q, spherical(q1)];\n      }\n    }\n\n    // Generates a 4-bit vector representing the location of a point relative to\n    // the small circle's bounding box.\n    function code(lambda, phi) {\n      var r = smallRadius ? radius : pi$4 - radius,\n          code = 0;\n      if (lambda < -r) code |= 1; // left\n      else if (lambda > r) code |= 2; // right\n      if (phi < -r) code |= 4; // below\n      else if (phi > r) code |= 8; // above\n      return code;\n    }\n\n    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$4, radius - pi$4]);\n  }\n\n  function transform$1(prototype) {\n    return {\n      stream: transform$2(prototype)\n    };\n  }\n\n  function transform$2(prototype) {\n    function T() {}\n    var p = T.prototype = Object.create(Transform$1.prototype);\n    for (var k in prototype) p[k] = prototype[k];\n    return function(stream) {\n      var t = new T;\n      t.stream = stream;\n      return t;\n    };\n  }\n\n  function Transform$1() {}\n\n  Transform$1.prototype = {\n    point: function(x, y) { this.stream.point(x, y); },\n    sphere: function() { this.stream.sphere(); },\n    lineStart: function() { this.stream.lineStart(); },\n    lineEnd: function() { this.stream.lineEnd(); },\n    polygonStart: function() { this.stream.polygonStart(); },\n    polygonEnd: function() { this.stream.polygonEnd(); }\n  };\n\n  var maxDepth = 16;\n  var cosMinDistance = cos$1(30 * radians);\n  // cos(minimum angular distance)\n\n  function resample(project, delta2) {\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n  }\n\n  function resampleNone(project) {\n    return transform$2({\n      point: function(x, y) {\n        x = project(x, y);\n        this.stream.point(x[0], x[1]);\n      }\n    });\n  }\n\n  function resample$1(project, delta2) {\n\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n      if (d2 > 4 * delta2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = sqrt$1(a * a + b * b + c * c),\n            phi2 = asin$1(c /= m),\n            lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),\n            p = project(lambda2, phi2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\n            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    return function(stream) {\n      var lambda00, x00, y00, a00, b00, c00, // first point\n          lambda0, x0, y0, a0, b0, c0; // previous point\n\n      var resampleStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n        polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n      };\n\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n\n      function lineStart() {\n        x0 = NaN;\n        resampleStream.point = linePoint;\n        stream.lineStart();\n      }\n\n      function linePoint(lambda, phi) {\n        var c = cartesian([lambda, phi]), p = project(lambda, phi);\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n\n      function lineEnd() {\n        resampleStream.point = point;\n        stream.lineEnd();\n      }\n\n      function ringStart() {\n        lineStart();\n        resampleStream.point = ringPoint;\n        resampleStream.lineEnd = ringEnd;\n      }\n\n      function ringPoint(lambda, phi) {\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resampleStream.point = linePoint;\n      }\n\n      function ringEnd() {\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n        resampleStream.lineEnd = lineEnd;\n        lineEnd();\n      }\n\n      return resampleStream;\n    };\n  }\n\n  var transformRadians = transform$2({\n    point: function(x, y) {\n      this.stream.point(x * radians, y * radians);\n    }\n  });\n\n  function projection(project) {\n    return projectionMutator(function() { return project; })();\n  }\n\n  function projectionMutator(projectAt) {\n    var project,\n        k = 150, // scale\n        x = 480, y = 250, // translate\n        dx, dy, lambda = 0, phi = 0, // center\n        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n        theta = null, preclip = clipAntimeridian, // clip angle\n        x0 = null, y0, x1, y1, postclip = identity$7, // clip extent\n        delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n        cache,\n        cacheStream;\n\n    function projection(point) {\n      point = projectRotate(point[0] * radians, point[1] * radians);\n      return [point[0] * k + dx, dy - point[1] * k];\n    }\n\n    function invert(point) {\n      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n      return point && [point[0] * degrees$1, point[1] * degrees$1];\n    }\n\n    function projectTransform(x, y) {\n      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n    }\n\n    projection.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n    };\n\n    projection.clipAngle = function(_) {\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\n    };\n\n    projection.clipExtent = function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function(_) {\n      return arguments.length ? (k = +_, recenter()) : k;\n    };\n\n    projection.translate = function(_) {\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n    };\n\n    projection.center = function(_) {\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\n    };\n\n    projection.rotate = function(_) {\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\n    };\n\n    projection.precision = function(_) {\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);\n    };\n\n    function recenter() {\n      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n      var center = project(lambda, phi);\n      dx = x - center[0] * k;\n      dy = y + center[1] * k;\n      return reset();\n    }\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return recenter();\n    };\n  }\n\n  function conicProjection(projectAt) {\n    var phi0 = 0,\n        phi1 = pi$4 / 3,\n        m = projectionMutator(projectAt),\n        p = m(phi0, phi1);\n\n    p.parallels = function(_) {\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\n    };\n\n    return p;\n  }\n\n  function conicEqualAreaRaw(y0, y1) {\n    var sy0 = sin$1(y0),\n        n = (sy0 + sin$1(y1)) / 2,\n        c = 1 + sy0 * (2 * n - sy0),\n        r0 = sqrt$1(c) / n;\n\n    function project(x, y) {\n      var r = sqrt$1(c - 2 * n * sin$1(y)) / n;\n      return [r * sin$1(x *= n), r0 - r * cos$1(x)];\n    }\n\n    project.invert = function(x, y) {\n      var r0y = r0 - y;\n      return [atan2(x, r0y) / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n    };\n\n    return project;\n  }\n\n  function conicEqualArea() {\n    return conicProjection(conicEqualAreaRaw)\n        .scale(155.424)\n        .center([0, 33.6442]);\n  }\n\n  function albers() {\n    return conicEqualArea()\n        .parallels([29.5, 45.5])\n        .scale(1070)\n        .translate([480, 250])\n        .rotate([96, 0])\n        .center([-0.6, 38.7]);\n  }\n\n  // The projections must have mutually exclusive clip regions on the sphere,\n  // as this will avoid emitting interleaving lines and polygons.\n  function multiplex(streams) {\n    var n = streams.length;\n    return {\n      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n    };\n  }\n\n  // A composite projection for the United States, configured by default for\n  // 960×500. The projection also works quite well at 960×600 if you change the\n  // scale to 1285 and adjust the translate accordingly. The set of standard\n  // parallels for each region comes from USGS, which is published here:\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n  function albersUsa() {\n    var cache,\n        cacheStream,\n        lower48 = albers(), lower48Point,\n        alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n        hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n        point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      return point = null,\n          (lower48Point.point(x, y), point)\n          || (alaskaPoint.point(x, y), point)\n          || (hawaiiPoint.point(x, y), point);\n    }\n\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n          : lower48).invert(coordinates);\n    };\n\n    albersUsa.stream = function(stream) {\n      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n    };\n\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n      return albersUsa;\n    };\n\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n\n      lower48Point = lower48\n          .translate(_)\n          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n          .stream(pointStream);\n\n      alaskaPoint = alaska\n          .translate([x - 0.307 * k, y + 0.201 * k])\n          .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointStream);\n\n      hawaiiPoint = hawaii\n          .translate([x - 0.205 * k, y + 0.212 * k])\n          .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointStream);\n\n      return albersUsa;\n    };\n\n    return albersUsa.scale(1070);\n  }\n\n  function azimuthalRaw(scale) {\n    return function(x, y) {\n      var cx = cos$1(x),\n          cy = cos$1(y),\n          k = scale(cx * cy);\n      return [\n        k * cy * sin$1(x),\n        k * sin$1(y)\n      ];\n    }\n  }\n\n  function azimuthalInvert(angle) {\n    return function(x, y) {\n      var z = sqrt$1(x * x + y * y),\n          c = angle(z),\n          sc = sin$1(c),\n          cc = cos$1(c);\n      return [\n        atan2(x * sc, z * cc),\n        asin$1(z && y * sc / z)\n      ];\n    }\n  }\n\n  var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n    return sqrt$1(2 / (1 + cxcy));\n  });\n\n  azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n    return 2 * asin$1(z / 2);\n  });\n\n  function azimuthalEqualArea() {\n    return projection(azimuthalEqualAreaRaw)\n        .scale(124.75)\n        .clipAngle(180 - 1e-3);\n  }\n\n  var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n    return (c = acos(c)) && c / sin$1(c);\n  });\n\n  azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n    return z;\n  });\n\n  function azimuthalEquidistant() {\n    return projection(azimuthalEquidistantRaw)\n        .scale(79.4188)\n        .clipAngle(180 - 1e-3);\n  }\n\n  function mercatorRaw(lambda, phi) {\n    return [lambda, log$1(tan((halfPi$3 + phi) / 2))];\n  }\n\n  mercatorRaw.invert = function(x, y) {\n    return [x, 2 * atan(exp(y)) - halfPi$3];\n  };\n\n  function mercator() {\n    return mercatorProjection(mercatorRaw)\n        .scale(961 / tau$4);\n  }\n\n  function mercatorProjection(project) {\n    var m = projection(project),\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        clipAuto;\n\n    m.scale = function(_) {\n      return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();\n    };\n\n    m.translate = function(_) {\n      return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();\n    };\n\n    m.clipExtent = function(_) {\n      if (!arguments.length) return clipAuto ? null : clipExtent();\n      if (clipAuto = _ == null) {\n        var k = pi$4 * scale(),\n            t = translate();\n        _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];\n      }\n      clipExtent(_);\n      return m;\n    };\n\n    return m.clipExtent(null);\n  }\n\n  function tany(y) {\n    return tan((halfPi$3 + y) / 2);\n  }\n\n  function conicConformalRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)),\n        f = cy0 * pow$1(tany(y0), n) / n;\n\n    if (!n) return mercatorRaw;\n\n    function project(x, y) {\n      if (f > 0) { if (y < -halfPi$3 + epsilon$4) y = -halfPi$3 + epsilon$4; }\n      else { if (y > halfPi$3 - epsilon$4) y = halfPi$3 - epsilon$4; }\n      var r = f / pow$1(tany(y), n);\n      return [r * sin$1(n * x), f - r * cos$1(n * x)];\n    }\n\n    project.invert = function(x, y) {\n      var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);\n      return [atan2(x, fy) / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$3];\n    };\n\n    return project;\n  }\n\n  function conicConformal() {\n    return conicProjection(conicConformalRaw)\n        .scale(109.5)\n        .parallels([30, 30]);\n  }\n\n  function equirectangularRaw(lambda, phi) {\n    return [lambda, phi];\n  }\n\n  equirectangularRaw.invert = equirectangularRaw;\n\n  function equirectangular() {\n    return projection(equirectangularRaw)\n        .scale(152.63);\n  }\n\n  function conicEquidistantRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),\n        g = cy0 / n + y0;\n\n    if (abs(n) < epsilon$4) return equirectangularRaw;\n\n    function project(x, y) {\n      var gy = g - y, nx = n * x;\n      return [gy * sin$1(nx), g - gy * cos$1(nx)];\n    }\n\n    project.invert = function(x, y) {\n      var gy = g - y;\n      return [atan2(x, gy) / n, g - sign$1(n) * sqrt$1(x * x + gy * gy)];\n    };\n\n    return project;\n  }\n\n  function conicEquidistant() {\n    return conicProjection(conicEquidistantRaw)\n        .scale(131.154)\n        .center([0, 13.9389]);\n  }\n\n  function gnomonicRaw(x, y) {\n    var cy = cos$1(y), k = cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  gnomonicRaw.invert = azimuthalInvert(atan);\n\n  function gnomonic() {\n    return projection(gnomonicRaw)\n        .scale(144.049)\n        .clipAngle(60);\n  }\n\n  function orthographicRaw(x, y) {\n    return [cos$1(y) * sin$1(x), sin$1(y)];\n  }\n\n  orthographicRaw.invert = azimuthalInvert(asin$1);\n\n  function orthographic() {\n    return projection(orthographicRaw)\n        .scale(249.5)\n        .clipAngle(90 + epsilon$4);\n  }\n\n  function stereographicRaw(x, y) {\n    var cy = cos$1(y), k = 1 + cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n\n  stereographicRaw.invert = azimuthalInvert(function(z) {\n    return 2 + atan(z);\n  });\n\n  function stereographic() {\n    return projection(stereographicRaw)\n        .scale(250)\n        .clipAngle(142);\n  }\n\n  function transverseMercatorRaw(lambda, phi) {\n    return [log$1(tan((halfPi$3 + phi) / 2)), -lambda];\n  }\n\n  transverseMercatorRaw.invert = function(x, y) {\n    return [-y, 2 * atan(exp(x)) - halfPi$3];\n  };\n\n  function transverseMercator() {\n    var m = mercatorProjection(transverseMercatorRaw),\n        center = m.center,\n        rotate = m.rotate;\n\n    m.center = function(_) {\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n\n    m.rotate = function(_) {\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n\n    return rotate([0, 0, 90])\n        .scale(159.155);\n  }\n\n  exports.version = version;\n  exports.bisect = bisectRight;\n  exports.bisectRight = bisectRight;\n  exports.bisectLeft = bisectLeft;\n  exports.ascending = ascending;\n  exports.bisector = bisector;\n  exports.descending = descending;\n  exports.deviation = deviation;\n  exports.extent = extent;\n  exports.histogram = histogram;\n  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\n  exports.thresholdScott = scott;\n  exports.thresholdSturges = sturges;\n  exports.max = max;\n  exports.mean = mean;\n  exports.median = median;\n  exports.merge = merge;\n  exports.min = min;\n  exports.pairs = pairs;\n  exports.permute = permute;\n  exports.quantile = threshold;\n  exports.range = range;\n  exports.scan = scan;\n  exports.shuffle = shuffle;\n  exports.sum = sum;\n  exports.ticks = ticks;\n  exports.tickStep = tickStep;\n  exports.transpose = transpose;\n  exports.variance = variance;\n  exports.zip = zip;\n  exports.entries = entries;\n  exports.keys = keys;\n  exports.values = values;\n  exports.map = map$1;\n  exports.set = set;\n  exports.nest = nest;\n  exports.randomUniform = uniform;\n  exports.randomNormal = normal;\n  exports.randomLogNormal = logNormal;\n  exports.randomBates = bates;\n  exports.randomIrwinHall = irwinHall;\n  exports.randomExponential = exponential;\n  exports.easeLinear = linear;\n  exports.easeQuad = quadInOut;\n  exports.easeQuadIn = quadIn;\n  exports.easeQuadOut = quadOut;\n  exports.easeQuadInOut = quadInOut;\n  exports.easeCubic = easeCubicInOut;\n  exports.easeCubicIn = cubicIn;\n  exports.easeCubicOut = cubicOut;\n  exports.easeCubicInOut = easeCubicInOut;\n  exports.easePoly = polyInOut;\n  exports.easePolyIn = polyIn;\n  exports.easePolyOut = polyOut;\n  exports.easePolyInOut = polyInOut;\n  exports.easeSin = sinInOut;\n  exports.easeSinIn = sinIn;\n  exports.easeSinOut = sinOut;\n  exports.easeSinInOut = sinInOut;\n  exports.easeExp = expInOut;\n  exports.easeExpIn = expIn;\n  exports.easeExpOut = expOut;\n  exports.easeExpInOut = expInOut;\n  exports.easeCircle = circleInOut;\n  exports.easeCircleIn = circleIn;\n  exports.easeCircleOut = circleOut;\n  exports.easeCircleInOut = circleInOut;\n  exports.easeBounce = bounceOut;\n  exports.easeBounceIn = bounceIn;\n  exports.easeBounceOut = bounceOut;\n  exports.easeBounceInOut = bounceInOut;\n  exports.easeBack = backInOut;\n  exports.easeBackIn = backIn;\n  exports.easeBackOut = backOut;\n  exports.easeBackInOut = backInOut;\n  exports.easeElastic = elasticOut;\n  exports.easeElasticIn = elasticIn;\n  exports.easeElasticOut = elasticOut;\n  exports.easeElasticInOut = elasticInOut;\n  exports.polygonArea = area;\n  exports.polygonCentroid = centroid;\n  exports.polygonHull = hull;\n  exports.polygonContains = contains;\n  exports.polygonLength = length$1;\n  exports.path = path;\n  exports.quadtree = quadtree;\n  exports.queue = queue;\n  exports.arc = arc;\n  exports.area = area$1;\n  exports.line = line;\n  exports.pie = pie;\n  exports.radialArea = radialArea;\n  exports.radialLine = radialLine$1;\n  exports.symbol = symbol;\n  exports.symbols = symbols;\n  exports.symbolCircle = circle;\n  exports.symbolCross = cross$1;\n  exports.symbolDiamond = diamond;\n  exports.symbolSquare = square;\n  exports.symbolStar = star;\n  exports.symbolTriangle = triangle;\n  exports.symbolWye = wye;\n  exports.curveBasisClosed = basisClosed;\n  exports.curveBasisOpen = basisOpen;\n  exports.curveBasis = basis;\n  exports.curveBundle = bundle;\n  exports.curveCardinalClosed = cardinalClosed;\n  exports.curveCardinalOpen = cardinalOpen;\n  exports.curveCardinal = cardinal;\n  exports.curveCatmullRomClosed = catmullRomClosed;\n  exports.curveCatmullRomOpen = catmullRomOpen;\n  exports.curveCatmullRom = catmullRom;\n  exports.curveLinearClosed = linearClosed;\n  exports.curveLinear = curveLinear;\n  exports.curveMonotoneX = monotoneX;\n  exports.curveMonotoneY = monotoneY;\n  exports.curveNatural = natural;\n  exports.curveStep = step;\n  exports.curveStepAfter = stepAfter;\n  exports.curveStepBefore = stepBefore;\n  exports.stack = stack;\n  exports.stackOffsetExpand = expand;\n  exports.stackOffsetNone = none;\n  exports.stackOffsetSilhouette = silhouette;\n  exports.stackOffsetWiggle = wiggle;\n  exports.stackOrderAscending = ascending$1;\n  exports.stackOrderDescending = descending$2;\n  exports.stackOrderInsideOut = insideOut;\n  exports.stackOrderNone = none$1;\n  exports.stackOrderReverse = reverse;\n  exports.color = color;\n  exports.rgb = colorRgb;\n  exports.hsl = colorHsl;\n  exports.lab = lab;\n  exports.hcl = colorHcl;\n  exports.cubehelix = cubehelix;\n  exports.interpolate = interpolate;\n  exports.interpolateArray = array$1;\n  exports.interpolateDate = date;\n  exports.interpolateNumber = interpolateNumber;\n  exports.interpolateObject = object;\n  exports.interpolateRound = interpolateRound;\n  exports.interpolateString = interpolateString;\n  exports.interpolateTransformCss = interpolateTransform$1;\n  exports.interpolateTransformSvg = interpolateTransform$2;\n  exports.interpolateZoom = interpolateZoom;\n  exports.interpolateRgb = interpolateRgb;\n  exports.interpolateRgbBasis = rgbBasis;\n  exports.interpolateRgbBasisClosed = rgbBasisClosed;\n  exports.interpolateHsl = hsl$1;\n  exports.interpolateHslLong = hslLong;\n  exports.interpolateLab = lab$1;\n  exports.interpolateHcl = hcl$1;\n  exports.interpolateHclLong = hclLong;\n  exports.interpolateCubehelix = cubehelix$2;\n  exports.interpolateCubehelixLong = interpolateCubehelixLong;\n  exports.interpolateBasis = basis$2;\n  exports.interpolateBasisClosed = basisClosed$1;\n  exports.quantize = quantize;\n  exports.dispatch = dispatch;\n  exports.dsvFormat = dsv;\n  exports.csvParse = csvParse;\n  exports.csvParseRows = csvParseRows;\n  exports.csvFormat = csvFormat;\n  exports.csvFormatRows = csvFormatRows;\n  exports.tsvParse = tsvParse;\n  exports.tsvParseRows = tsvParseRows;\n  exports.tsvFormat = tsvFormat;\n  exports.tsvFormatRows = tsvFormatRows;\n  exports.request = request;\n  exports.html = html;\n  exports.json = json;\n  exports.text = text;\n  exports.xml = xml;\n  exports.csv = csv$1;\n  exports.tsv = tsv$1;\n  exports.now = now;\n  exports.timer = timer;\n  exports.timerFlush = timerFlush;\n  exports.timeout = timeout$1;\n  exports.interval = interval$1;\n  exports.timeInterval = newInterval;\n  exports.timeMillisecond = millisecond;\n  exports.timeMilliseconds = milliseconds;\n  exports.timeSecond = second;\n  exports.timeSeconds = seconds;\n  exports.timeMinute = minute;\n  exports.timeMinutes = minutes;\n  exports.timeHour = hour;\n  exports.timeHours = hours;\n  exports.timeDay = day;\n  exports.timeDays = days;\n  exports.timeWeek = timeWeek;\n  exports.timeWeeks = sundays;\n  exports.timeSunday = timeWeek;\n  exports.timeSundays = sundays;\n  exports.timeMonday = timeMonday;\n  exports.timeMondays = mondays;\n  exports.timeTuesday = tuesday;\n  exports.timeTuesdays = tuesdays;\n  exports.timeWednesday = wednesday;\n  exports.timeWednesdays = wednesdays;\n  exports.timeThursday = thursday;\n  exports.timeThursdays = thursdays;\n  exports.timeFriday = friday;\n  exports.timeFridays = fridays;\n  exports.timeSaturday = saturday;\n  exports.timeSaturdays = saturdays;\n  exports.timeMonth = month;\n  exports.timeMonths = months;\n  exports.timeYear = year;\n  exports.timeYears = years;\n  exports.utcMillisecond = millisecond;\n  exports.utcMilliseconds = milliseconds;\n  exports.utcSecond = second;\n  exports.utcSeconds = seconds;\n  exports.utcMinute = utcMinute;\n  exports.utcMinutes = utcMinutes;\n  exports.utcHour = utcHour;\n  exports.utcHours = utcHours;\n  exports.utcDay = utcDay;\n  exports.utcDays = utcDays;\n  exports.utcWeek = utcWeek;\n  exports.utcWeeks = utcSundays;\n  exports.utcSunday = utcWeek;\n  exports.utcSundays = utcSundays;\n  exports.utcMonday = utcMonday;\n  exports.utcMondays = utcMondays;\n  exports.utcTuesday = utcTuesday;\n  exports.utcTuesdays = utcTuesdays;\n  exports.utcWednesday = utcWednesday;\n  exports.utcWednesdays = utcWednesdays;\n  exports.utcThursday = utcThursday;\n  exports.utcThursdays = utcThursdays;\n  exports.utcFriday = utcFriday;\n  exports.utcFridays = utcFridays;\n  exports.utcSaturday = utcSaturday;\n  exports.utcSaturdays = utcSaturdays;\n  exports.utcMonth = utcMonth;\n  exports.utcMonths = utcMonths;\n  exports.utcYear = utcYear;\n  exports.utcYears = utcYears;\n  exports.formatLocale = formatLocale;\n  exports.formatDefaultLocale = defaultLocale;\n  exports.formatSpecifier = formatSpecifier;\n  exports.precisionFixed = precisionFixed;\n  exports.precisionPrefix = precisionPrefix;\n  exports.precisionRound = precisionRound;\n  exports.isoFormat = formatIso;\n  exports.isoParse = parseIso;\n  exports.timeFormatLocale = formatLocale$1;\n  exports.timeFormatDefaultLocale = defaultLocale$1;\n  exports.scaleBand = band;\n  exports.scalePoint = point$4;\n  exports.scaleIdentity = identity$4;\n  exports.scaleLinear = linear$2;\n  exports.scaleLog = log;\n  exports.scaleOrdinal = ordinal;\n  exports.scaleImplicit = implicit;\n  exports.scalePow = pow;\n  exports.scaleSqrt = sqrt;\n  exports.scaleQuantile = quantile;\n  exports.scaleQuantize = quantize$1;\n  exports.scaleThreshold = threshold$1;\n  exports.scaleTime = time;\n  exports.scaleUtc = utcTime;\n  exports.schemeCategory10 = category10;\n  exports.schemeCategory20b = category20b;\n  exports.schemeCategory20c = category20c;\n  exports.schemeCategory20 = category20;\n  exports.scaleSequential = sequential;\n  exports.interpolateCubehelixDefault = cubehelix$3;\n  exports.interpolateRainbow = rainbow$1;\n  exports.interpolateWarm = warm;\n  exports.interpolateCool = cool;\n  exports.interpolateViridis = viridis;\n  exports.interpolateMagma = magma;\n  exports.interpolateInferno = inferno;\n  exports.interpolatePlasma = plasma;\n  exports.creator = creator;\n  exports.customEvent = customEvent;\n  exports.local = local;\n  exports.matcher = matcher$1;\n  exports.mouse = mouse;\n  exports.namespace = namespace;\n  exports.namespaces = namespaces;\n  exports.select = select;\n  exports.selectAll = selectAll;\n  exports.selection = selection;\n  exports.selector = selector;\n  exports.selectorAll = selectorAll;\n  exports.touch = touch;\n  exports.touches = touches;\n  exports.window = window;\n  exports.active = active;\n  exports.interrupt = interrupt;\n  exports.transition = transition;\n  exports.axisTop = axisTop;\n  exports.axisRight = axisRight;\n  exports.axisBottom = axisBottom;\n  exports.axisLeft = axisLeft;\n  exports.cluster = cluster;\n  exports.hierarchy = hierarchy;\n  exports.pack = index;\n  exports.packSiblings = siblings;\n  exports.packEnclose = enclose;\n  exports.partition = partition;\n  exports.stratify = stratify;\n  exports.tree = tree;\n  exports.treemap = index$1;\n  exports.treemapBinary = binary;\n  exports.treemapDice = treemapDice;\n  exports.treemapSlice = treemapSlice;\n  exports.treemapSliceDice = sliceDice;\n  exports.treemapSquarify = squarify;\n  exports.treemapResquarify = resquarify;\n  exports.forceCenter = center$1;\n  exports.forceCollide = collide;\n  exports.forceLink = link;\n  exports.forceManyBody = manyBody;\n  exports.forceSimulation = simulation;\n  exports.forceX = x$3;\n  exports.forceY = y$3;\n  exports.drag = drag;\n  exports.dragDisable = dragDisable;\n  exports.dragEnable = dragEnable;\n  exports.voronoi = voronoi;\n  exports.zoom = zoom;\n  exports.zoomIdentity = identity$6;\n  exports.zoomTransform = transform;\n  exports.brush = brush;\n  exports.brushX = brushX;\n  exports.brushY = brushY;\n  exports.brushSelection = brushSelection;\n  exports.chord = chord;\n  exports.ribbon = ribbon;\n  exports.geoAlbers = albers;\n  exports.geoAlbersUsa = albersUsa;\n  exports.geoArea = area$2;\n  exports.geoAzimuthalEqualArea = azimuthalEqualArea;\n  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\n  exports.geoAzimuthalEquidistant = azimuthalEquidistant;\n  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\n  exports.geoBounds = bounds;\n  exports.geoCentroid = centroid$1;\n  exports.geoCircle = circle$1;\n  exports.geoClipExtent = extent$1;\n  exports.geoConicConformal = conicConformal;\n  exports.geoConicConformalRaw = conicConformalRaw;\n  exports.geoConicEqualArea = conicEqualArea;\n  exports.geoConicEqualAreaRaw = conicEqualAreaRaw;\n  exports.geoConicEquidistant = conicEquidistant;\n  exports.geoConicEquidistantRaw = conicEquidistantRaw;\n  exports.geoDistance = distance;\n  exports.geoEquirectangular = equirectangular;\n  exports.geoEquirectangularRaw = equirectangularRaw;\n  exports.geoGnomonic = gnomonic;\n  exports.geoGnomonicRaw = gnomonicRaw;\n  exports.geoGraticule = graticule;\n  exports.geoInterpolate = interpolate$2;\n  exports.geoLength = length$2;\n  exports.geoMercator = mercator;\n  exports.geoMercatorRaw = mercatorRaw;\n  exports.geoOrthographic = orthographic;\n  exports.geoOrthographicRaw = orthographicRaw;\n  exports.geoPath = index$3;\n  exports.geoProjection = projection;\n  exports.geoProjectionMutator = projectionMutator;\n  exports.geoRotation = rotation;\n  exports.geoStereographic = stereographic;\n  exports.geoStereographicRaw = stereographicRaw;\n  exports.geoStream = stream;\n  exports.geoTransform = transform$1;\n  exports.geoTransverseMercator = transverseMercator;\n  exports.geoTransverseMercatorRaw = transverseMercatorRaw;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","import {Ploidy} from './ploidy';\n\nexport class Color {\n\n  constructor(config) {\n      // Ideogram config\n    this._config = config;\n    this._ploidy = new Ploidy(this._config);\n  }\n\n  getArmColor(chrSetNumber, chrNumber, armNumber) {\n    if (this._config.armColors) {\n      return this._config.armColors[armNumber];\n    } else if (this._config.ancestors) {\n      return this._getPolyploidArmColor(chrSetNumber, chrNumber, armNumber);\n    } else {\n      return null;\n    }\n  }\n\n  getBorderColor(chrSetNumber, chrNumber, armNumber) {\n    if (chrNumber < this._config.ploidy) {\n      return '#000';\n    } else if (this._ploidy.exists(chrSetNumber, chrNumber, armNumber)) {\n      return '#000';\n    } else {\n      return '#fff';\n    }\n  }\n\n  _getPolyploidArmColor(chrSetNumber, chrNumber, armNumber) {\n    if (!this._ploidy.exists(chrSetNumber, chrNumber, armNumber)) {\n      return 'transparent';\n    } else {\n      var ancestor =\n        this._ploidy.getAncestor(chrSetNumber, chrNumber, armNumber);\n      return this._config.ancestors[ancestor];\n    }\n  }\n\n}\n","// Developed by Eric Weitz (https://github.com/eweitz)\n\nimport * as d3 from 'd3';\n\nimport {Ploidy} from './ploidy';\nimport {Layout} from './layouts/layout';\nimport {ModelAdapter} from './model-adapter';\nimport {Chromosome} from './views/chromosome';\n\nexport class Ideogram {\n\n  constructor(config) {\n    var orientation,\n      chrWidth, chrHeight,\n      container, rect;\n\n    // Clone the config object, to allow multiple instantiations\n    // without picking up prior ideogram's settings\n    this.config = JSON.parse(JSON.stringify(config));\n\n    // TODO: Document this\n    this._bandsXOffset = 30;\n\n    this.debug = false;\n\n    if (!this.config.dataDir) {\n      this.config.dataDir = '../data/bands/native/';\n    }\n\n    if (!this.config.ploidy) {\n      this.config.ploidy = 1;\n    }\n\n    if (this.config.ploidy > 1) {\n      this.sexChromosomes = {};\n      if (!this.config.sex) {\n        // Default to 'male' per human, mouse reference genomes.\n        // TODO: The default sex value should probably be the heterogametic sex,\n        // i.e. whichever sex has allosomes that differ in morphology.\n        // In mammals and most insects that is the male.\n        // However, in birds and reptiles, that is female.\n        this.config.sex = 'male';\n      }\n      if (this.config.ploidy === 2 && !this.config.ancestors) {\n        this.config.ancestors = {M: '#ffb6c1', P: '#add8e6'};\n        this.config.ploidyDesc = 'MP';\n      }\n    }\n\n    if (!this.config.container) {\n      this.config.container = 'body';\n    }\n\n    this.selector = this.config.container + ' #_ideogram';\n\n    if (!this.config.resolution) {\n      this.config.resolution = 850;\n    }\n\n    if ('showChromosomeLabels' in this.config === false) {\n      this.config.showChromosomeLabels = true;\n    }\n\n    if (!this.config.orientation) {\n      orientation = 'vertical';\n      this.config.orientation = orientation;\n    }\n\n    if (!this.config.chrHeight) {\n      container = this.config.container;\n      rect = document.querySelector(container).getBoundingClientRect();\n\n      if (orientation === 'vertical') {\n        chrHeight = rect.height;\n      } else {\n        chrHeight = rect.width;\n      }\n\n      if (container === 'body') {\n        chrHeight = 400;\n      }\n      this.config.chrHeight = chrHeight;\n    }\n\n    if (!this.config.chrWidth) {\n      chrWidth = 10;\n      chrHeight = this.config.chrHeight;\n\n      if (chrHeight < 900 && chrHeight > 500) {\n        chrWidth = Math.round(chrHeight / 40);\n      } else if (chrHeight >= 900) {\n        chrWidth = Math.round(chrHeight / 45);\n      }\n      this.config.chrWidth = chrWidth;\n    }\n\n    if (!this.config.chrMargin) {\n      if (this.config.ploidy === 1) {\n        this.config.chrMargin = 10;\n      } else {\n        // Defaults polyploid chromosomes to relatively small interchromatid gap\n        this.config.chrMargin = Math.round(this.config.chrWidth / 4);\n      }\n    }\n\n    if (!this.config.showBandLabels) {\n      this.config.showBandLabels = false;\n    }\n\n    if ('showFullyBanded' in this.config) {\n      this.config.showFullyBanded = this.config.showFullyBanded;\n    } else {\n      this.config.showFullyBanded = true;\n    }\n\n    if (!this.config.brush) {\n      this.config.brush = false;\n    }\n\n    if (!this.config.rows) {\n      this.config.rows = 1;\n    }\n\n    this.bump = Math.round(this.config.chrHeight / 125);\n    this.adjustedBump = false;\n    if (this.config.chrHeight < 200) {\n      this.adjustedBump = true;\n      this.bump = 4;\n    }\n\n    if (config.showBandLabels) {\n      this.config.chrMargin += 20;\n    }\n\n    if (config.chromosome) {\n      this.config.chromosomes = [config.chromosome];\n      if ('showBandLabels' in config === false) {\n        this.config.showBandLabels = true;\n      }\n      if ('rotatable' in config === false) {\n        this.config.rotatable = false;\n      }\n    }\n\n    if (!this.config.showNonNuclearChromosomes) {\n      this.config.showNonNuclearChromosomes = false;\n    }\n\n    this.initAnnotSettings();\n\n    this.config.chrMargin = (\n    this.config.chrMargin +\n    this.config.chrWidth +\n    this.config.annotTracksHeight * 2\n  );\n\n    if (config.onLoad) {\n      this.onLoadCallback = config.onLoad;\n    }\n\n    if (config.onDrawAnnots) {\n      this.onDrawAnnotsCallback = config.onDrawAnnots;\n    }\n\n    if (config.onBrushMove) {\n      this.onBrushMoveCallback = config.onBrushMove;\n    }\n\n    this.coordinateSystem = 'iscn';\n\n    this.maxLength = {\n      bp: 0,\n      iscn: 0\n    };\n\n    // The E-Utilies In Depth: Parameters, Syntax and More:\n    // https://www.ncbi.nlm.nih.gov/books/NBK25499/\n    this.eutils = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/';\n    this.esearch = this.eutils + 'esearch.fcgi?retmode=json';\n    this.esummary = this.eutils + 'esummary.fcgi?retmode=json';\n    this.elink = this.eutils + 'elink.fcgi?retmode=json';\n\n    this.organisms = {\n      9606: {\n        commonName: 'Human',\n        scientificName: 'Homo sapiens',\n        scientificNameAbbr: 'H. sapiens',\n        assemblies: {\n          default: 'GCF_000001405.26', // GRCh38\n          GRCh38: 'GCF_000001405.26',\n          GRCh37: 'GCF_000001405.13'\n        }\n      },\n      10090: {\n        commonName: 'Mouse',\n        scientificName: 'Mus musculus',\n        scientificNameAbbr: 'M. musculus',\n        assemblies: {\n          default: 'GCF_000001635.20'\n        }\n      },\n      4641: {\n        commonName: 'banana',\n        scientificName: 'Musa acuminata',\n        scientificNameAbbr: 'M. acuminata',\n        assemblies: {\n          default: 'mock'\n        }\n      }\n    };\n\n    // A flat array of chromosomes\n    // (this.chromosomes is an object of\n    // arrays of chromosomes, keyed by organism)\n    this.chromosomesArray = [];\n\n    this.bandsToShow = [];\n\n    this.chromosomes = {};\n    this.numChromosomes = 0;\n    this.bandData = {};\n\n    this.init();\n  }\n\n  /**\n  * Gets chromosome band data from a\n  * TSV file, or, if band data is prefetched, from an array\n  *\n  * UCSC: #chrom chromStart  chromEnd  name  gieStain\n  * http://genome.ucsc.edu/cgi-bin/hgTables\n  *  - group: Mapping and Sequencing\n  *  - track: Chromosome Band (Ideogram)\n  *\n  * NCBI: #chromosome  arm band  iscn_start  iscn_stop bp_start  bp_stop stain density\n  * ftp://ftp.ncbi.nlm.nih.gov/pub/gdp/ideogram_9606_GCF_000001305.14_550_V1\n  */\n  getBands(content, taxid, chromosomes) {\n    var lines = {},\n      delimiter, tsvLines, columns, line, stain, chr,\n      i, init, tsvLinesLength, source,\n      start, stop, firstColumn, tmp;\n\n    if (content.slice(0, 8) === 'chrBands') {\n      source = 'native';\n    }\n\n    if (\n    chromosomes instanceof Array &&\n    typeof chromosomes[0] === 'object'\n  ) {\n      tmp = [];\n      for (i = 0; i < chromosomes.length; i++) {\n        tmp.push(chromosomes[i].name);\n      }\n      chromosomes = tmp;\n    }\n\n    if (typeof chrBands === 'undefined' && source !== 'native') {\n      delimiter = /\\t/;\n      tsvLines = content.split(/\\r\\n|\\n/);\n      init = 1;\n    } else {\n      delimiter = / /;\n      if (source === 'native') {\n        tsvLines = eval(content);\n      } else {\n        tsvLines = content;\n      }\n      init = 0;\n    }\n\n    firstColumn = tsvLines[0].split(delimiter)[0];\n    if (firstColumn === '#chromosome') {\n      source = 'ncbi';\n    } else if (firstColumn === '#chrom') {\n      source = 'ucsc';\n    } else {\n      source = 'native';\n    }\n\n    tsvLinesLength = tsvLines.length;\n\n    if (source === 'ncbi' || source === 'native') {\n      for (i = init; i < tsvLinesLength; i++) {\n        columns = tsvLines[i].split(delimiter);\n\n        chr = columns[0];\n\n        if (\n        // If a specific set of chromosomes has been requested, and\n        // the current chromosome\n        typeof (chromosomes) !== 'undefined' &&\n        chromosomes.indexOf(chr) === -1\n      ) {\n          continue;\n        }\n\n        if (chr in lines === false) {\n          lines[chr] = [];\n        }\n\n        stain = columns[7];\n        if (columns[8]) {\n          // For e.g. acen and gvar, columns[8] (density) is undefined\n          stain += columns[8];\n        }\n\n        line = {\n          chr: chr,\n          bp: {\n            start: parseInt(columns[5], 10),\n            stop: parseInt(columns[6], 10)\n          },\n          iscn: {\n            start: parseInt(columns[3], 10),\n            stop: parseInt(columns[4], 10)\n          },\n          px: {\n            start: -1,\n            stop: -1,\n            width: -1\n          },\n          name: columns[1] + columns[2],\n          stain: stain,\n          taxid: taxid\n        };\n\n        lines[chr].push(line);\n      }\n    } else if (source === 'ucsc') {\n      for (i = init; i < tsvLinesLength; i++) {\n        // #chrom chromStart  chromEnd  name  gieStain\n        // e.g. for fly:\n        // chr4\t69508\t108296\t102A1\tn/a\n        columns = tsvLines[i].split(delimiter);\n\n        if (columns[0] !== 'chr' + chromosomeName) {\n          continue;\n        }\n\n        stain = columns[4];\n        if (stain === 'n/a') {\n          stain = 'gpos100';\n        }\n        start = parseInt(columns[1], 10);\n        stop = parseInt(columns[2], 10);\n\n        line = {\n          chr: columns[0].split('chr')[1],\n          bp: {\n            start: start,\n            stop: stop\n          },\n          iscn: {\n            start: start,\n            stop: stop\n          },\n          px: {\n            start: -1,\n            stop: -1,\n            width: -1\n          },\n          name: columns[3],\n          stain: stain,\n          taxid: taxid\n        };\n\n        lines[chr].push(line);\n      }\n    }\n\n    return lines;\n  }\n\n  /**\n  * Generates a model object for each chromosome\n  * containing information on its name, DOM ID,\n  * length in base pairs or ISCN coordinates,\n  * cytogenetic bands, centromere position, etc.\n  */\n  getChromosomeModel(bands, chromosome, taxid, chrIndex) {\n    var chr = {},\n      band,\n      width, pxStop,\n      chrHeight = this.config.chrHeight,\n      maxLength = this.maxLength,\n      chrLength,\n      cs, hasBands;\n\n    cs = this.coordinateSystem;\n    hasBands = (typeof bands !== 'undefined');\n\n    if (hasBands) {\n      chr.name = chromosome;\n      chr.length = bands[bands.length - 1][cs].stop;\n      chr.type = 'nuclear';\n    } else {\n      chr = chromosome;\n    }\n\n    chr.chrIndex = chrIndex;\n\n    chr.id = 'chr' + chr.name + '-' + taxid;\n\n    if (this.config.fullChromosomeLabels === true) {\n      var orgName = this.organisms[taxid].scientificNameAbbr;\n      chr.name = orgName + ' chr' + chr.name;\n    }\n\n    chrLength = chr.length;\n\n    pxStop = 0;\n\n    if (hasBands) {\n      for (var i = 0; i < bands.length; i++) {\n        band = bands[i];\n        var csLength = band[cs].stop - band[cs].start;\n        width = chrHeight * chr.length / maxLength[cs] * csLength / chrLength;\n\n        bands[i].px = {start: pxStop, stop: pxStop + width, width: width};\n\n        pxStop = bands[i].px.stop;\n\n        if (hasBands && band.stain === 'acen' && band.name[0] === 'p') {\n          chr.pcenIndex = i;\n        }\n      }\n    } else {\n      pxStop = chrHeight * chr.length / maxLength[cs];\n    }\n\n    chr.width = pxStop;\n\n    chr.scale = {};\n\n    // TODO:\n    //\n    // A chromosome-level scale property is likely\n    // nonsensical for any chromosomes that have cytogenetic band data.\n    // Different bands tend to have ratios between number of base pairs\n    // and physical length.\n    //\n    // However, a chromosome-level scale property is likely\n    // necessary for chromosomes that do not have band data.\n    //\n    // This needs further review.\n    if (this.config.multiorganism === true) {\n      chr.scale.bp = 1;\n      // chr.scale.bp = band.iscn.stop / band.bp.stop;\n      chr.scale.iscn = chrHeight * chrLength / maxLength.bp;\n    } else {\n      chr.scale.bp = chrHeight / maxLength.bp;\n      if (hasBands) {\n        chr.scale.iscn = chrHeight / maxLength.iscn;\n      }\n    }\n    chr.bands = bands;\n\n    chr.centromerePosition = '';\n    if (\n    hasBands && bands[0].name[0] === 'p' && bands[1].name[0] === 'q' &&\n    bands[0].bp.stop - bands[0].bp.start < 2E6\n  ) {\n      // As with almost all mouse chromosome, chimpanzee chr22\n      chr.centromerePosition = 'telocentric';\n\n      // Remove placeholder pter band\n      chr.bands = chr.bands.slice(1);\n    }\n\n    if (hasBands && chr.bands.length === 1) {\n      // Encountered when processing an assembly that has chromosomes with\n      // centromere data, but this chromosome does not.\n      // Example: chromosome F1 in Felis catus.\n      delete chr.bands;\n    }\n\n    return chr;\n  }\n\n  /**\n  * Draws labels for each chromosome, e.g. \"1\", \"2\", \"X\".\n  * If ideogram configuration has 'fullChromosomeLabels: True',\n  * then labels includes name of taxon, which can help when\n  * depicting orthologs.\n  */\n  drawChromosomeLabels() {\n    var ideo = this;\n\n    var chromosomeLabelClass = ideo._layout.getChromosomeLabelClass();\n\n    var chrSetLabelXPosition = ideo._layout.getChromosomeSetLabelXPosition();\n    var chrSetLabelTranslate = ideo._layout.getChromosomeSetLabelTranslate();\n\n    // Append chromosomes set's labels\n    d3.selectAll(ideo.selector + ' .chromosome-set-container')\n      .append('text')\n      .data(ideo.chromosomesArray)\n      .attr('class', 'chromosome-set-label ' + chromosomeLabelClass)\n      .attr('transform', chrSetLabelTranslate)\n      .attr('x', chrSetLabelXPosition)\n      .attr('y', function(d, i) {\n        return ideo._layout.getChromosomeSetLabelYPosition(i);\n      })\n      .attr('text-anchor', ideo._layout.getChromosomeSetLabelAnchor())\n      .each(function(d, i) {\n          // Get label lines\n        var lines;\n        if (d.name.indexOf(' ') === -1) {\n          lines = [d.name];\n        } else {\n          lines = d.name.match(/^(.*)\\s+([^\\s]+)$/).slice(1).reverse();\n        }\n\n        if (\n          'sex' in ideo.config &&\n          ideo.config.ploidy === 2 &&\n          i === ideo.sexChromosomes.index\n        ) {\n          if (ideo.config.sex === 'male') {\n            lines = ['XY'];\n          } else {\n            lines = ['XX'];\n          }\n        }\n\n        // Render label lines\n        d3.select(this).selectAll('tspan')\n          .data(lines)\n          .enter()\n          .append('tspan')\n          .attr('dy', function(d, i) {\n            return i * -1.2 + 'em';\n          })\n          .attr('x', ideo._layout.getChromosomeSetLabelXPosition())\n          .attr('class', function(a, i) {\n            var fullLabels = ideo.config.fullChromosomeLabels;\n            return i === 1 && fullLabels ? 'italic' : null;\n          }).text(String);\n      });\n\n    var setLabelTranslate = ideo._layout.getChromosomeSetLabelTranslate();\n\n    // Append chromosomes labels\n    d3.selectAll(ideo.selector + ' .chromosome-set-container')\n      .each(function(a, chrSetNumber) {\n        d3.select(this).selectAll('.chromosome')\n          .append('text')\n          .attr('class', 'chrLabel')\n          .attr('transform', setLabelTranslate)\n          .attr('x', function(d, i) {\n            return ideo._layout.getChromosomeLabelXPosition(i);\n          }).attr('y', function(d, i) {\n            return ideo._layout.getChromosomeLabelYPosition(i);\n          }).text(function(d, chrNumber) {\n            return ideo._ploidy.getAncestor(chrSetNumber, chrNumber);\n          }).attr('text-anchor', 'middle');\n      });\n  }\n\n  /**\n  * Draws labels and stalks for cytogenetic bands.\n  *\n  * Band labels are text like \"p11.11\".\n  * Stalks are small lines that visually connect labels to their bands.\n  */\n  drawBandLabels(chromosomes) {\n    var i, chr, chrs, taxid, ideo, chrModel, chrIndex, textOffsets;\n\n    ideo = this;\n\n    chrs = [];\n\n    for (taxid in chromosomes) {\n      for (chr in chromosomes[taxid]) {\n        chrs.push(chromosomes[taxid][chr]);\n      }\n    }\n\n    textOffsets = {};\n\n    chrIndex = 0;\n    for (i = 0; i < chrs.length; i++) {\n      chrIndex += 1;\n\n      chrModel = chrs[i];\n\n      chr = d3.select(ideo.selector + ' #' + chrModel.id);\n\n      // var chrMargin = this.config.chrMargin * chrIndex,\n      //   lineY1, lineY2;\n      //\n      // lineY1 = chrMargin;\n      // lineY2 = chrMargin - 8;\n      //\n      // if (\n      //   chrIndex === 1 &&\n      //   \"perspective\" in this.config && this.config.perspective === \"comparative\"\n      // ) {\n      //   lineY1 += 18;\n      //   lineY2 += 18;\n      // }\n\n      textOffsets[chrModel.id] = [];\n\n      chr.selectAll('text')\n      .data(chrModel.bands)\n      .enter()\n      .append('g')\n        .attr('class', function(d, i) {\n          return 'bandLabel bsbsl-' + i;\n        })\n        .attr('transform', function(d) {\n          var transform = ideo._layout.getChromosomeBandLabelTranslate(d, i);\n\n          var x = transform.x;\n          // var y = transform.y;\n\n          textOffsets[chrModel.id].push(x + 13);\n\n          return transform.translate;\n        })\n        .append('text')\n        .attr('text-anchor', ideo._layout.getChromosomeBandLabelAnchor(i))\n        .text(function(d) {\n          return d.name;\n        });\n\n      // var adapter = ModelAdapter.getInstance(ideo.chromosomesArray[i]);\n      // var view = Chromosome.getInstance(adapter, ideo.config, ideo);\n\n      chr.selectAll('line.bandLabelStalk')\n        .data(chrModel.bands)\n        .enter()\n        .append('g')\n        .attr('class', function(d, i) {\n          return 'bandLabelStalk bsbsl-' + i;\n        })\n        .attr('transform', function(d) {\n          var x, y;\n\n          x = ideo.round(d.px.start + d.px.width / 2);\n\n          textOffsets[chrModel.id].push(x + 13);\n          y = -10;\n\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .append('line')\n        .attr('x1', 0)\n        .attr('y1', function() {\n          return ideo._layout.getChromosomeBandTickY1(i);\n        })\n        .attr('x2', 0)\n        .attr('y2', function() {\n          return ideo._layout.getChromosomeBandTickY2(i);\n        });\n    }\n\n    for (i = 0; i < chrs.length; i++) {\n      chrModel = chrs[i];\n\n      var textsLength = textOffsets[chrModel.id].length,\n        overlappingLabelXRight,\n        index,\n        indexesToShow = [],\n        prevHiddenBoxIndex,\n        xLeft,\n        prevLabelXRight,\n        prevTextBoxLeft,\n        prevTextBoxWidth,\n        textPadding;\n\n      overlappingLabelXRight = 0;\n\n      textPadding = 5;\n\n      for (index = 0; index < textsLength; index++) {\n        // Ensures band labels don't overlap\n\n        xLeft = textOffsets[chrModel.id][index];\n\n        if (xLeft < overlappingLabelXRight + textPadding === false) {\n          indexesToShow.push(index);\n        } else {\n          prevHiddenBoxIndex = index;\n          overlappingLabelXRight = prevLabelXRight;\n          continue;\n        }\n\n        if (prevHiddenBoxIndex !== index) {\n          // This getBoundingClientRect() forces Chrome's\n          // 'Recalculate Style' and 'Layout', which takes 30-40 ms on Chrome.\n          // TODO: This forced synchronous layout would be nice to eliminate.\n          // prevTextBox = texts[index].getBoundingClientRect();\n          // prevLabelXRight = prevTextBox.left + prevTextBox.width;\n\n          // TODO: Account for number of characters in prevTextBoxWidth,\n          // maybe also zoom.\n          prevTextBoxLeft = textOffsets[chrModel.id][index];\n          prevTextBoxWidth = 36;\n\n          prevLabelXRight = prevTextBoxLeft + prevTextBoxWidth;\n        }\n\n        if (\n          xLeft < prevLabelXRight + textPadding\n        ) {\n          prevHiddenBoxIndex = index;\n          overlappingLabelXRight = prevLabelXRight;\n        } else {\n          indexesToShow.push(index);\n        }\n      }\n\n      var selectorsToShow = [],\n        ithLength = indexesToShow.length,\n        j;\n\n      for (j = 0; j < ithLength; j++) {\n        index = indexesToShow[j];\n        selectorsToShow.push('#' + chrModel.id + ' .bsbsl-' + index);\n      }\n\n      this.bandsToShow = this.bandsToShow.concat(selectorsToShow);\n    }\n  }\n\n  // Rotates chromosome labels by 90 degrees, e.g. upon clicking a chromosome to focus.\n  rotateChromosomeLabels(chr, chrIndex, orientation, scale) {\n    var chrMargin, chrWidth, ideo, x, y,\n      numAnnotTracks, scaleSvg, tracksHeight, chrMargin2;\n\n    chrWidth = this.config.chrWidth;\n    chrMargin = this.config.chrMargin * chrIndex;\n    numAnnotTracks = this.config.numAnnotTracks;\n\n    ideo = this;\n\n    if (\n    typeof (scale) !== 'undefined' &&\n    scale.hasOwnProperty('x') &&\n    !(scale.x === 1 && scale.y === 1)\n  ) {\n      scaleSvg = 'scale(' + scale.x + ',' + scale.y + ')';\n      x = -6;\n      y = (scale === '' ? -16 : -14);\n    } else {\n      x = -8;\n      y = -16;\n      scale = {x: 1, y: 1};\n      scaleSvg = '';\n    }\n\n    if (orientation === 'vertical' || orientation === '') {\n      var ci = chrIndex - 1;\n\n      if (numAnnotTracks > 1 || orientation === '') {\n        ci -= 1;\n      }\n\n      chrMargin2 = -4;\n      if (ideo.config.showBandLabels === true) {\n        chrMargin2 = ideo.config.chrMargin + chrWidth + 26;\n      }\n\n      chrMargin = ideo.config.chrMargin * ci;\n\n      if (numAnnotTracks > 1 === false) {\n        chrMargin += 1;\n      }\n\n      y = chrMargin + chrMargin2;\n\n      chr.selectAll('text.chrLabel')\n        .attr('transform', scaleSvg)\n        .selectAll('tspan')\n          .attr('x', x)\n          .attr('y', y);\n    } else {\n      chrIndex -= 1;\n\n      chrMargin2 = -chrWidth - 2;\n      if (ideo.config.showBandLabels === true) {\n        chrMargin2 = ideo.config.chrMargin + 8;\n      }\n\n      tracksHeight = ideo.config.annotTracksHeight;\n      if (ideo.config.annotationsLayout !== 'overlay') {\n        tracksHeight *= 2;\n      }\n\n      chrMargin = ideo.config.chrMargin * chrIndex;\n      x = -(chrMargin + chrMargin2) + 3 + tracksHeight;\n      x /= scale.x;\n\n      chr.selectAll('text.chrLabel')\n        .attr('transform', 'rotate(-90)' + scaleSvg)\n        .selectAll('tspan')\n        .attr('x', x)\n        .attr('y', y);\n    }\n  }\n\n  /**\n  * Rotates band labels by 90 degrees, e.g. upon clicking a chromosome to focus.\n  *\n  * This method includes proportional scaling, which ensures that\n  * while the parent chromosome group is scaled strongly in one dimension to fill\n  * available space, the text in the chromosome's band labels is\n  * not similarly distorted, and remains readable.\n  */\n  rotateBandLabels(chr, chrIndex, scale) {\n    var chrMargin, scaleSvg,\n      orientation, bandLabels,\n      ideo = this;\n\n    bandLabels = chr.selectAll('.bandLabel');\n\n    chrWidth = this.config.chrWidth;\n    chrMargin = this.config.chrMargin * chrIndex;\n\n    orientation = chr.attr('data-orientation');\n\n    if (typeof (scale) === 'undefined') {\n      scale = {x: 1, y: 1};\n      scaleSvg = '';\n    } else {\n      scaleSvg = 'scale(' + scale.x + ',' + scale.y + ')';\n    }\n\n    if (\n      chrIndex === 1 &&\n      'perspective' in this.config && this.config.perspective === 'comparative'\n    ) {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = (8 - chrMargin) - 26;\n          y = ideo.round(2 + d.px.start + d.px.width / 2);\n          return 'rotate(-90)translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('text-anchor', 'end');\n    } else if (orientation === 'vertical') {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = 8 - chrMargin;\n          y = ideo.round(2 + d.px.start + d.px.width / 2);\n          return 'rotate(-90)translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('transform', scaleSvg);\n    } else {\n      bandLabels\n        .attr('transform', function(d) {\n          var x, y;\n          x = ideo.round(-8 * scale.x + d.px.start + d.px.width / 2);\n          y = chrMargin - 10;\n          return 'translate(' + x + ',' + y + ')';\n        })\n        .selectAll('text')\n          .attr('transform', scaleSvg);\n\n      chr.selectAll('.bandLabelStalk line')\n        .attr('transform', scaleSvg);\n    }\n  }\n\n  round(coord) {\n    // Rounds an SVG coordinates to two decimal places\n    // e.g. 42.1234567890 -> 42.12\n    // Per http://stackoverflow.com/a/9453447, below method is fastest\n    return Math.round(coord * 100) / 100;\n  }\n\n  /**\n  * Renders all the bands and outlining boundaries of a chromosome.\n  */\n  drawChromosome(chrModel, chrIndex, container, k) {\n    var chrMargin = this.config.chrMargin;\n\n    // Get chromosome model adapter class\n    var adapter = ModelAdapter.getInstance(chrModel);\n\n    // Append chromosome's container\n    var chromosome = container\n        .append('g')\n        .attr('id', chrModel.id)\n        .attr('class', 'chromosome ' + adapter.getCssClass())\n        .attr('transform', 'translate(0, ' + k * chrMargin + ')');\n\n    // Render chromosome\n    return Chromosome.getInstance(adapter, this.config, this)\n        .render(chromosome, chrIndex, k);\n  }\n\n  /**\n  * Rotates a chromosome 90 degrees and shows or hides all other chromosomes\n  * Useful for focusing or defocusing a particular chromosome\n  */\n  rotateAndToggleDisplay(chromosome) {\n    // Do nothing if taxId not defined. But it should be defined.\n    // To fix that bug we should have a way to find chromosome set number.\n    if (!this.config.taxid) {\n      return;\n    }\n\n    var chrSetNumber =\n      Number(d3.select(chromosome.parentNode).attr('data-set-number'));\n\n    var chrNumber = Array.prototype.slice.call(\n          d3.select(chromosome.parentNode).selectAll('g.chromosome')._groups[0]\n      ).indexOf(chromosome);\n\n    return this._layout.rotate(chrSetNumber, chrNumber, chromosome);\n  }\n\n  /**\n  * Converts base pair coordinates to pixel offsets.\n  * Bp-to-pixel scales differ among cytogenetic bands.\n  */\n  convertBpToPx(chr, bp) {\n    var i, band, bpToIscnScale, iscn, px, offset, pxStart, pxLength, iscnStart,\n      iscnStop, iscnLength, bpStart, bpStop, bpLength;\n\n    for (i = 0; i < chr.bands.length; i++) {\n      band = chr.bands[i];\n\n      offset = this._bandsXOffset;\n      bpStart = band.bp.start;\n      bpStop = band.bp.stop;\n      bpLength = bpStop - bpStart;\n      iscnStart = band.iscn.start;\n      iscnStop = band.iscn.stop;\n      iscnLength = iscnStop - iscnStart;\n      pxStart = band.px.start;\n      pxLength = band.px.width;\n\n      if (bp >= bpStart && bp <= bpStop) {\n        bpToIscnScale = iscnLength / bpLength;\n        iscn = iscnStart + (bp - bpStart) * bpToIscnScale;\n\n        px = offset + pxStart + (pxLength * (iscn - iscnStart) / (iscnLength));\n\n        return px;\n      }\n    }\n\n    throw new Error(\n      'Base pair out of range.  ' +\n      'bp: ' + bp + '; length of chr' + chr.name + ': ' + band.bp.stop\n    );\n  }\n\n  /**\n  * Converts base pair coordinates to pixel offsets.\n  * Bp-to-pixel scales differ among cytogenetic bands.\n  */\n  convertPxToBp(chr, px) {\n    var i, band, pxToIscnScale, iscn,\n      pxStart, pxStop, iscnStart, iscnStop, bpLength, iscnLength;\n\n    for (i = 0; i < chr.bands.length; i++) {\n      band = chr.bands[i];\n\n      pxStart = band.px.start;\n      pxStop = band.px.stop;\n      iscnStart = band.iscn.start;\n      iscnStop = band.iscn.stop;\n\n      if (px >= pxStart && px <= pxStop) {\n        iscnLength = iscnStop - iscnStart;\n        pxLength = pxStop - pxStart;\n        bpLength = band.bp.stop - band.bp.start;\n\n        pxToIscnScale = iscnLength / pxLength;\n        iscn = iscnStart + (px - pxStart) * pxToIscnScale;\n\n        bp = band.bp.start + (bpLength * (iscn - iscnStart) / iscnLength);\n\n        return Math.round(bp);\n      }\n    }\n\n    throw new Error(\n      'Pixel out of range.  ' +\n      'px: ' + bp + '; length of chr' + chr.name + ': ' + pxStop\n    );\n  }\n\n  /**\n  * Draws a trapezoid connecting a genomic range on\n  * one chromosome to a genomic range on another chromosome;\n  * a syntenic region.\n  */\n  drawSynteny(syntenicRegions) {\n    var t0 = new Date().getTime();\n\n    var r1, r2,\n      syntenies,\n      i, color, opacity,\n      regionID, regions, syntenicRegion,\n      ideo = this;\n\n    syntenies = d3.select(ideo.selector)\n    .insert('g', ':first-child')\n    .attr('class', 'synteny');\n\n    for (i = 0; i < syntenicRegions.length; i++) {\n      regions = syntenicRegions[i];\n\n      r1 = regions.r1;\n      r2 = regions.r2;\n\n      color = '#CFC';\n      if ('color' in regions) {\n        color = regions.color;\n      }\n\n      opacity = 1;\n      if ('opacity' in regions) {\n        opacity = regions.opacity;\n      }\n\n      r1.startPx = this.convertBpToPx(r1.chr, r1.start);\n      r1.stopPx = this.convertBpToPx(r1.chr, r1.stop);\n      r2.startPx = this.convertBpToPx(r2.chr, r2.start);\n      r2.stopPx = this.convertBpToPx(r2.chr, r2.stop);\n\n      regionID = (\n      r1.chr.id + '_' + r1.start + '_' + r1.stop + '_' +\n      '__' +\n      r2.chr.id + '_' + r2.start + '_' + r2.stop\n    );\n\n      syntenicRegion = syntenies.append('g')\n        .attr('class', 'syntenicRegion')\n        .attr('id', regionID)\n        .on('click', function() {\n          var activeRegion = this;\n          var others = d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .filter(function() {\n              return (this !== activeRegion);\n            });\n\n          others.classed('hidden', !others.classed('hidden'));\n        })\n        .on('mouseover', function() {\n          var activeRegion = this;\n          d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .filter(function() {\n              return (this !== activeRegion);\n            })\n            .classed('ghost', true);\n        })\n        .on('mouseout', function() {\n          d3.selectAll(ideo.selector + ' .syntenicRegion')\n            .classed('ghost', false);\n        });\n      var chrWidth = ideo.config.chrWidth;\n      var x1 = this._layout.getChromosomeSetYTranslate(0);\n      var x2 = this._layout.getChromosomeSetYTranslate(1) - chrWidth;\n\n      syntenicRegion.append('polygon')\n        .attr('points',\n          x1 + ', ' + r1.startPx + ' ' +\n          x1 + ', ' + r1.stopPx + ' ' +\n          x2 + ', ' + r2.stopPx + ' ' +\n          x2 + ', ' + r2.startPx\n        )\n        .attr('style', 'fill: ' + color + '; fill-opacity: ' + opacity);\n\n      syntenicRegion.append('line')\n        .attr('class', 'syntenyBorder')\n        .attr('x1', x1)\n        .attr('x2', x2)\n        .attr('y1', r1.startPx)\n        .attr('y2', r2.startPx);\n\n      syntenicRegion.append('line')\n        .attr('class', 'syntenyBorder')\n        .attr('x1', x1)\n        .attr('x2', x2)\n        .attr('y1', r1.stopPx)\n        .attr('y2', r2.stopPx);\n    }\n\n    var t1 = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time in drawSyntenicRegions: ' + (t1 - t0) + ' ms');\n    }\n  }\n\n  /**\n  * Initializes various annotation settings.  Constructor help function.\n  */\n  initAnnotSettings() {\n    if (\n      this.config.annotationsPath ||\n      this.config.localAnnotationsPath ||\n      this.annots || this.config.annotations\n    ) {\n      if (!this.config.annotationHeight) {\n        var annotHeight = Math.round(this.config.chrHeight / 100);\n        this.config.annotationHeight = annotHeight;\n      }\n\n      if (this.config.annotationTracks) {\n        this.config.numAnnotTracks = this.config.annotationTracks.length;\n      } else {\n        this.config.numAnnotTracks = 1;\n      }\n      this.config.annotTracksHeight =\n      this.config.annotationHeight * this.config.numAnnotTracks;\n\n      if (typeof this.config.barWidth === 'undefined') {\n        this.config.barWidth = 3;\n      }\n    } else {\n      this.config.annotTracksHeight = 0;\n    }\n\n    if (typeof this.config.annotationsColor === 'undefined') {\n      this.config.annotationsColor = '#F00';\n    }\n  }\n\n  /**\n  * Draws annotations defined by user\n  */\n  drawAnnots(friendlyAnnots) {\n    var ideo = this,\n      i, j, annot,\n      rawAnnots = [],\n      rawAnnot, keys,\n      chr,\n      chrs = ideo.chromosomes[ideo.config.taxid]; // TODO: multiorganism\n\n    // Occurs when filtering\n    if ('annots' in friendlyAnnots[0]) {\n      return ideo.drawProcessedAnnots(friendlyAnnots);\n    }\n\n    for (chr in chrs) {\n      rawAnnots.push({chr: chr, annots: []});\n    }\n\n    for (i = 0; i < friendlyAnnots.length; i++) {\n      annot = friendlyAnnots[i];\n\n      for (j = 0; j < rawAnnots.length; j++) {\n        if (annot.chr === rawAnnots[j].chr) {\n          rawAnnot = [\n            annot.name,\n            annot.start,\n            annot.stop - annot.start\n          ];\n          if ('color' in annot) {\n            rawAnnot.push(annot.color);\n          }\n          if ('shape' in annot) {\n            rawAnnot.push(annot.shape);\n          }\n          rawAnnots[j].annots.push(rawAnnot);\n          break;\n        }\n      }\n    }\n\n    keys = ['name', 'start', 'length'];\n    if ('color' in friendlyAnnots[0]) {\n      keys.push('color');\n    }\n    if ('shape' in friendlyAnnots[0]) {\n      keys.push('shape');\n    }\n    ideo.rawAnnots = {keys: keys, annots: rawAnnots};\n\n    ideo.annots = ideo.processAnnotData(ideo.rawAnnots);\n\n    ideo.drawProcessedAnnots(ideo.annots);\n  }\n\n  /**\n  * Proccesses genome annotation data.\n  * Genome annotations represent features like a gene, SNP, etc. as\n  * a small graphical object on or beside a chromosome.\n  * Converts raw annotation data from server, which is structured as\n  * an array of arrays, into a more verbose data structure consisting\n  * of an array of objects.\n  * Also adds pixel offset information.\n  */\n  processAnnotData(rawAnnots) {\n    var keys,\n      i, j, annot, annots, annotsByChr,\n      chr,\n      chrModel, ra,\n      startPx, stopPx, px,\n      color,\n      ideo = this;\n\n    keys = rawAnnots.keys;\n    rawAnnots = rawAnnots.annots;\n\n    annots = [];\n\n    for (i = 0; i < rawAnnots.length; i++) {\n      annotsByChr = rawAnnots[i];\n\n      annots.push({chr: annotsByChr.chr, annots: []});\n\n      for (j = 0; j < annotsByChr.annots.length; j++) {\n        chr = annotsByChr.chr;\n        ra = annotsByChr.annots[j];\n        annot = {};\n\n        for (var k = 0; k < keys.length; k++) {\n          annot[keys[k]] = ra[k];\n        }\n\n        annot.stop = annot.start + annot.length;\n\n        chrModel = ideo.chromosomes[ideo.config.taxid][chr];\n\n        startPx = ideo.convertBpToPx(chrModel, annot.start);\n        stopPx = ideo.convertBpToPx(chrModel, annot.stop);\n\n        px = Math.round((startPx + stopPx) / 2) - 28;\n\n        color = ideo.config.annotationsColor;\n        if (ideo.config.annotationTracks) {\n          annot.trackIndex = ra[3];\n          color = ideo.config.annotationTracks[annot.trackIndex].color;\n        } else {\n          annot.trackIndex = 0;\n        }\n\n        if ('color' in annot) {\n          color = annot.color;\n        }\n\n        annot.chr = chr;\n        annot.chrIndex = i;\n        annot.px = px;\n        annot.startPx = startPx - 30;\n        annot.stopPx = stopPx - 30;\n        annot.color = color;\n\n        annots[i].annots.push(annot);\n      }\n    }\n\n    return annots;\n  }\n\n  /*\n  * Can be used for bar chart or sparkline\n  */\n  getHistogramBars(annots) {\n    var t0 = new Date().getTime();\n\n    var i, j, chr,\n      chrModels, chrPxStop, px,\n      chrAnnots, chrName, chrIndex, annot,\n      bars, bar, barPx, nextBarPx, barWidth,\n      maxAnnotsPerBar, color,\n      firstGet = false,\n      histogramScaling,\n      ideo = this;\n\n    bars = [];\n\n    barWidth = ideo.config.barWidth;\n    chrModels = ideo.chromosomes[ideo.config.taxid];\n    color = ideo.config.annotationsColor;\n\n    if ('histogramScaling' in ideo.config) {\n      histogramScaling = ideo.config.histogramScaling;\n    } else {\n      histogramScaling = 'relative';\n    }\n\n    if (typeof ideo.maxAnnotsPerBar === 'undefined') {\n      ideo.maxAnnotsPerBar = {};\n      firstGet = true;\n    }\n\n    for (chr in chrModels) {\n      chrModel = chrModels[chr];\n      chrIndex = chrModel.chrIndex;\n      lastBand = chrModel.bands[chrModel.bands.length - 1];\n      chrPxStop = lastBand.px.stop;\n      numBins = Math.round(chrPxStop / barWidth);\n      bar = {chr: chr, annots: []};\n      for (i = 0; i < numBins; i++) {\n        px = i * barWidth - ideo.bump;\n        bp = ideo.convertPxToBp(chrModel, px + ideo.bump);\n        bar.annots.push({\n          bp: bp,\n          px: px - ideo.bump,\n          count: 0,\n          chrIndex: chrIndex,\n          chrName: chr,\n          color: color,\n          annots: []\n        });\n      }\n      bars.push(bar);\n    }\n\n    for (chr in annots) {\n      chrAnnots = annots[chr].annots;\n      chrName = annots[chr].chr;\n      chrModel = chrModels[chrName];\n      chrIndex = chrModel.chrIndex - 1;\n      barAnnots = bars[chrIndex].annots;\n      for (i = 0; i < chrAnnots.length; i++) {\n        annot = chrAnnots[i];\n        px = annot.px - ideo.bump;\n        for (j = 0; j < barAnnots.length; j++) {\n          barPx = barAnnots[j].px;\n          nextBarPx = barPx + barWidth;\n          if (j === barAnnots.length - 1) {\n            nextBarPx += barWidth;\n          }\n          if (px >= barPx && px < nextBarPx) {\n            bars[chrIndex].annots[j].count += 1;\n            bars[chrIndex].annots[j].annots.push(annot);\n            break;\n          }\n        }\n      }\n    }\n\n    if (firstGet === true || histogramScaling === 'relative') {\n      maxAnnotsPerBar = 0;\n      for (i = 0; i < bars.length; i++) {\n        annots = bars[i].annots;\n        for (j = 0; j < annots.length; j++) {\n          barCount = annots[j].count;\n          if (barCount > maxAnnotsPerBar) {\n            maxAnnotsPerBar = barCount;\n          }\n        }\n      }\n      ideo.maxAnnotsPerBar[chr] = maxAnnotsPerBar;\n    }\n\n  // Set each bar's height to be proportional to\n  // the height of the bar with the most annotations\n    for (i = 0; i < bars.length; i++) {\n      annots = bars[i].annots;\n      for (j = 0; j < annots.length; j++) {\n        barCount = annots[j].count;\n        height = (barCount / ideo.maxAnnotsPerBar[chr]) * ideo.config.chrMargin;\n      // console.log(height)\n        bars[i].annots[j].height = height;\n      }\n    }\n\n    var t1 = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time spent in getHistogramBars: ' + (t1 - t0) + ' ms');\n    }\n\n    ideo.bars = bars;\n\n    return bars;\n  }\n\n/**\n* Fills out annotations data structure such that its top-level list of arrays\n* matches that of this ideogram's chromosomes list in order and number\n* Fixes https://github.com/eweitz/ideogram/issues/66\n*/\n  fillAnnots(annots) {\n    var filledAnnots, chrs, chrArray, i, chr, annot, chrIndex;\n\n    filledAnnots = [];\n    chrs = [];\n    chrArray = this.chromosomesArray;\n\n    for (i = 0; i < chrArray.length; i++) {\n      chr = chrArray[i].name;\n      chrs.push(chr);\n      filledAnnots.push({chr: chr, annots: []});\n    }\n\n    for (i = 0; i < annots.length; i++) {\n      annot = annots[i];\n      chrIndex = chrs.indexOf(annot.chr);\n      if (chrIndex !== -1) {\n        filledAnnots[chrIndex] = annot;\n      }\n    }\n\n    return filledAnnots;\n  }\n\n/**\n* Draws genome annotations on chromosomes.\n* Annotations can be rendered as either overlaid directly\n* on a chromosome, or along one or more \"tracks\"\n* running parallel to each chromosome.\n*/\n  drawProcessedAnnots(annots) {\n    var chrWidth, layout,\n      annotHeight, triangle, circle, r, chrAnnot,\n      x1, x2, y1, y2,\n      filledAnnots,\n      ideo = this;\n\n    chrMargin = this.config.chrMargin;\n    chrWidth = this.config.chrWidth;\n\n    layout = 'tracks';\n    if (this.config.annotationsLayout) {\n      layout = this.config.annotationsLayout;\n    }\n\n    if (layout === 'histogram') {\n      annots = ideo.getHistogramBars(annots);\n    }\n\n    annotHeight = ideo.config.annotationHeight;\n\n    triangle =\n    'l -' + annotHeight + ' ' +\n    (2 * annotHeight) +\n    ' l ' + (2 * annotHeight) + ' 0 z';\n\n  // From http://stackoverflow.com/a/10477334, with a minor change (\"m -r, r\")\n  // Circles are supported natively via <circle>, but having it as a path\n  // simplifies handling triangles, circles and other shapes in the same\n  // D3 call\n    r = annotHeight;\n    circle =\n    'm -' + r + ', ' + r +\n    'a ' + r + ',' + r + ' 0 1,0 ' + (r * 2) + ',0' +\n    'a ' + r + ',' + r + ' 0 1,0 -' + (r * 2) + ',0';\n\n    filledAnnots = ideo.fillAnnots(annots);\n\n    chrAnnot = d3.selectAll(ideo.selector + ' .chromosome')\n    .data(filledAnnots)\n      .selectAll('path.annot')\n      .data(function(d) {\n        return d.annots;\n      })\n      .enter();\n\n    if (layout === 'tracks') {\n      chrAnnot\n      .append('g')\n      .attr('id', function(d) {\n        return d.id;\n      })\n      .attr('class', 'annot')\n      .attr('transform', function(d) {\n        var y = ideo.config.chrWidth + (d.trackIndex * annotHeight * 2);\n        return 'translate(' + d.px + ',' + y + ')';\n      })\n      .append('path')\n      .attr('d', function(d) {\n        if (!d.shape || d.shape === 'triangle') {\n          return 'm0,0' + triangle;\n        } else if (d.shape === 'circle') {\n          return circle;\n        }\n      })\n      .attr('fill', function(d) {\n        return d.color;\n      });\n    } else if (layout === 'overlay') {\n      // Overlaid annotations appear directly on chromosomes\n\n      chrAnnot.append('polygon')\n        .attr('id', function(d) {\n          return d.id;\n        })\n        .attr('class', 'annot')\n        .attr('points', function(d) {\n          if (d.stopPx - d.startPx > 1) {\n            x1 = d.startPx;\n            x2 = d.stopPx;\n          } else {\n            x1 = d.px - 0.5;\n            x2 = d.px + 0.5;\n          }\n          y1 = chrWidth;\n          y2 = 0;\n\n          return (\n            x1 + ',' + y1 + ' ' +\n            x2 + ',' + y1 + ' ' +\n            x2 + ',' + y2 + ' ' +\n            x1 + ',' + y2\n          );\n        })\n        .attr('fill', function(d) {\n          return d.color;\n        });\n    } else if (layout === 'histogram') {\n      chrAnnot.append('polygon')\n        // .attr('id', function(d, i) { return d.id; })\n        .attr('zclass', 'annot')\n        .attr('points', function(d) {\n          x1 = d.px + ideo.bump;\n          x2 = d.px + ideo.config.barWidth + ideo.bump;\n          y1 = chrWidth;\n          y2 = chrWidth + d.height;\n\n          var thisChrWidth = ideo.chromosomesArray[d.chrIndex - 1].width;\n\n          if (x2 > thisChrWidth) {\n            x2 = thisChrWidth;\n          }\n\n          return (\n            x1 + ',' + y1 + ' ' +\n            x2 + ',' + y1 + ' ' +\n            x2 + ',' + y2 + ' ' +\n            x1 + ',' + y2\n          );\n        })\n        .attr('fill', function(d) {\n          return d.color;\n        });\n    }\n\n    if (ideo.onDrawAnnotsCallback) {\n      ideo.onDrawAnnotsCallback();\n    }\n  }\n\n  onBrushMove() {\n    call(this.onBrushMoveCallback);\n  }\n\n  createBrush(from, to) {\n    var ideo = this,\n      width = ideo.config.chrWidth + 6.5,\n      length = ideo.config.chrHeight,\n      chr = ideo.chromosomesArray[0],\n      chrLengthBp = chr.bands[chr.bands.length - 1].bp.stop,\n      x0, x1,\n      xOffset = this._layout.getMargin().left,\n      xScale = d3.scaleLinear()\n          .domain([0, d3.max(chr.bands, function(band) {\n            return band.bp.stop;\n          })]).range([xOffset, d3.max(chr.bands, function(band) {\n            return band.px.stop;\n          }) + xOffset]);\n\n    if (typeof from === 'undefined') {\n      from = Math.floor(chrLengthBp / 10);\n    }\n\n    if (typeof right === 'undefined') {\n      to = Math.ceil(from * 2);\n    }\n\n    x0 = ideo.convertBpToPx(chr, from);\n    x1 = ideo.convertBpToPx(chr, to);\n\n    ideo.selectedRegion = {from: from, to: to, extent: (to - from)};\n\n    ideo.brush = d3.brushX()\n    .extent([[xOffset, 0], [length + xOffset, width]])\n    .on('brush', onBrushMove);\n\n    var yTranslate = this._layout.getChromosomeSetYTranslate(0);\n    var yOffset = yTranslate + (ideo.config.chrWidth - width) / 2;\n    d3.select(ideo.selector).append('g')\n    .attr('class', 'brush')\n    .attr('transform', 'translate(0, ' + yOffset + ')')\n    .call(ideo.brush)\n    .call(ideo.brush.move, [x0, x1]);\n\n    function onBrushMove() {\n      var extent = d3.event.selection.map(xScale.invert),\n        from = Math.floor(extent[0]),\n        to = Math.ceil(extent[1]);\n\n      ideo.selectedRegion = {from: from, to: to, extent: (to - from)};\n\n      if (ideo.onBrushMove) {\n        ideo.onBrushMoveCallback();\n      }\n    }\n  }\n\n/**\n* Called when Ideogram has finished initializing.\n* Accounts for certain ideogram properties not being set until\n* asynchronous requests succeed, etc.\n*/\n  onLoad() {\n    call(this.onLoadCallback);\n  }\n\n  onDrawAnnots() {\n    call(this.onDrawAnnotsCallback);\n  }\n\n/*\n* Returns SVG gradients that give chromosomes a polished look\n*/\n  getBandColorGradients() {\n    var colors,\n      stain, color1, color2, color3,\n      css,\n      gradients = '';\n\n    colors = [\n    ['gneg', '#FFF', '#FFF', '#DDD'],\n    ['gpos25', '#C8C8C8', '#DDD', '#BBB'],\n    ['gpos33', '#BBB', '#BBB', '#AAA'],\n    ['gpos50', '#999', '#AAA', '#888'],\n    ['gpos66', '#888', '#888', '#666'],\n    ['gpos75', '#777', '#777', '#444'],\n    ['gpos100', '#444', '#666', '#000'],\n    ['acen', '#FEE', '#FEE', '#FDD'],\n    ['noBands', '#BBB', '#BBB', '#AAA']\n    ];\n\n    for (var i = 0; i < colors.length; i++) {\n      stain = colors[i][0];\n      color1 = colors[i][1];\n      color2 = colors[i][2];\n      color3 = colors[i][3];\n      gradients +=\n      '<linearGradient id=\"' + stain + '\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">';\n      if (stain === \"gneg\") {\n        gradients +=\n        '<stop offset=\"70%\" stop-color=\"' + color2 + '\" />' +\n        '<stop offset=\"95%\" stop-color=\"' + color3 + '\" />' +\n        '<stop offset=\"100%\" stop-color=\"' + color1 + '\" />';\n      } else {\n        gradients +=\n        '<stop offset=\"5%\" stop-color=\"' + color1 + '\" />' +\n        '<stop offset=\"15%\" stop-color=\"' + color2 + '\" />' +\n        '<stop offset=\"60%\" stop-color=\"' + color3 + '\" />';\n      }\n      gradients +=\n      '</linearGradient>';\n    }\n\n    gradients +=\n    '<pattern id=\"stalk\" width=\"2\" height=\"1\" patternUnits=\"userSpaceOnUse\" ' +\n      'patternTransform=\"rotate(30 0 0)\">' +\n      '<rect x=\"0\" y=\"0\" width=\"10\" height=\"2\" fill=\"#CCE\" /> ' +\n       '<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\" style=\"stroke:#88B; ' +\n        'stroke-width:0.7;\" />' +\n    '</pattern>' +\n    '<pattern id=\"gvar\" width=\"2\" height=\"1\" patternUnits=\"userSpaceOnUse\" ' +\n      'patternTransform=\"rotate(-30 0 0)\">' +\n      '<rect x=\"0\" y=\"0\" width=\"10\" height=\"2\" fill=\"#DDF\" /> ' +\n       '<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\" style=\"stroke:#99C; ' +\n          'stroke-width:0.7;\" />' +\n    '</pattern>';\n\n    gradients = \"<defs>\" + gradients + \"</defs>\";\n    css = \"<style>\" +\n    '.gneg {fill: url(\"#gneg\")} ' +\n    '.gpos25 {fill: url(\"#gpos25\")} ' +\n    '.gpos33 {fill: url(\"#gpos33\")} ' +\n    '.gpos50 {fill: url(\"#gpos50\")} ' +\n    '.gpos66 {fill: url(\"#gpos66\")} ' +\n    '.gpos75 {fill: url(\"#gpos75\")} ' +\n    '.gpos100 {fill: url(\"#gpos100\")} ' +\n    '.gpos {fill: url(\"#gpos100\")} ' +\n    '.acen {fill: url(\"#acen\")} ' +\n    '.stalk {fill: url(\"#stalk\")} ' +\n    '.gvar {fill: url(\"#gvar\")} ' +\n    '.noBands {fill: url(\"#noBands\")} ' +\n    '.chromosome {fill: url(\"#noBands\")} ' +\n  '</style>';\n    gradients = css + gradients;\n\n  // alert(gradients)\n\n    return gradients;\n  }\n\n/*\n*  Returns an NCBI taxonomy identifier (taxid) for the configured organism\n*/\n  getTaxidFromEutils(callback) {\n    var organism, taxonomySearch, taxid,\n      ideo = this;\n\n    organism = ideo.config.organism;\n\n    taxonomySearch = ideo.esearch + '&db=taxonomy&term=' + organism;\n\n    d3.json(taxonomySearch, function(data) {\n      taxid = data.esearchresult.idlist[0];\n      return callback(taxid);\n    });\n  }\n\n/**\n* Returns an array of taxids for the current ideogram\n* Also sets configuration parameters related to taxid(s), whether ideogram is\n* multiorganism, and adjusts chromosomes parameters as needed\n**/\n  getTaxids(callback) {\n    var ideo = this,\n      taxid, taxids,\n      org, orgs, i,\n      taxidInit, tmpChrs,\n      assembly, chromosomes,\n      multiorganism, promise;\n\n    taxidInit = 'taxid' in ideo.config;\n\n    ideo.config.multiorganism = (\n    ('organism' in ideo.config && ideo.config.organism instanceof Array) ||\n    (taxidInit && ideo.config.taxid instanceof Array)\n  );\n\n    multiorganism = ideo.config.multiorganism;\n\n    if ('organism' in ideo.config) {\n    // Ideogram instance was constructed using common organism name(s)\n      if (multiorganism) {\n        orgs = ideo.config.organism;\n      } else {\n        orgs = [ideo.config.organism];\n      }\n\n      taxids = [];\n      tmpChrs = {};\n      for (i = 0; i < orgs.length; i++) {\n      // Gets a list of taxids from common organism names\n        org = orgs[i];\n        for (taxid in ideo.organisms) {\n          if (ideo.organisms[taxid].commonName.toLowerCase() === org) {\n            taxids.push(taxid);\n            if (multiorganism) {\n            // Adjusts 'chromosomes' configuration parameter to make object\n            // keys use taxid instead of common organism name\n              tmpChrs[taxid] = ideo.config.chromosomes[org];\n            }\n          }\n        }\n      }\n\n      if (taxids.length === 0) {\n        promise = new Promise(function(resolve) {\n          ideo.getTaxidFromEutils(resolve);\n        });\n\n        promise.then(function(data) {\n          var organism = ideo.config.organism,\n            dataDir = ideo.config.dataDir,\n            urlOrg = organism.replace(' ', '-');\n\n          taxid = data;\n          taxids.push(taxid);\n\n          ideo.config.taxids = taxids;\n          ideo.organisms[taxid] = {\n            commonName: '',\n            scientificName: ideo.config.organism,\n            scientificNameAbbr: ''\n          };\n\n          var fullyBandedTaxids = ['9606', '10090', '10116'];\n          if (\n          fullyBandedTaxids.indexOf(taxid) !== -1 &&\n          ideo.config.showFullyBanded === false\n        ) {\n            urlOrg += '-no-bands';\n          }\n          var chromosomesUrl = dataDir + urlOrg + '.js';\n\n          var promise = new Promise(function(resolve, reject) {\n            d3.request(chromosomesUrl).get(function(error, data) {\n              if (error) {\n                reject(Error(error));\n              }\n              resolve(data);\n            });\n          });\n\n          return promise\n          .then(\n            function(data) {\n              // Check if chromosome data exists locally.\n              // This is used for pre-processed centromere data,\n              // which is not accessible via EUtils.  See get_chromosomes.py.\n\n              var asmAndChrArray = [],\n                chromosomes = [],\n                seenChrs = {},\n                chr;\n\n              eval(data.response);\n\n              asmAndChrArray.push('');\n\n              for (var i = 0; i < chrBands.length; i++) {\n                chr = chrBands[i].split(' ')[0];\n                if (chr in seenChrs) {\n                  continue;\n                } else {\n                  chromosomes.push({name: chr, type: 'nuclear'});\n                  seenChrs[chr] = 1;\n                }\n              }\n              chromosomes = chromosomes.sort(ideo.sortChromosomes);\n              asmAndChrArray.push(chromosomes);\n              ideo.coordinateSystem = 'iscn';\n              return asmAndChrArray;\n            },\n            function() {\n              return new Promise(function(resolve) {\n                ideo.coordinateSystem = 'bp';\n                ideo.getAssemblyAndChromosomesFromEutils(resolve);\n              });\n            }\n          );\n        })\n      .then(function(asmChrArray) {\n        assembly = asmChrArray[0];\n        chromosomes = asmChrArray[1];\n\n        ideo.config.chromosomes = chromosomes;\n        ideo.organisms[taxid].assemblies = {\n          default: assembly\n        };\n\n        callback(taxids);\n      });\n      } else {\n        ideo.config.taxids = taxids;\n        if (multiorganism) {\n          ideo.config.chromosomes = tmpChrs;\n        }\n\n        callback(taxids);\n      }\n    } else {\n      if (multiorganism) {\n        ideo.coordinateSystem = 'bp';\n        if (taxidInit) {\n          taxids = ideo.config.taxid;\n        }\n      } else {\n        if (taxidInit) {\n          taxids = [ideo.config.taxid];\n        }\n        ideo.config.taxids = taxids;\n      }\n\n      callback(taxids);\n    }\n  }\n\n  sortChromosomes(a, b) {\n    var aIsNuclear = a.type === 'nuclear',\n      bIsNuclear = b.type === 'nuclear',\n      aIsCP = a.type === 'chloroplast',\n      bIsCP = b.type === 'chloroplast',\n      aIsMT = a.type === 'mitochondrion',\n      bIsMT = b.type === 'mitochondrion';\n    // aIsPlastid = aIsMT && a.name !== 'MT', // e.g. B1 in rice genome GCF_001433935.1\n    // bIsPlastid = bIsMT && b.name !== 'MT';\n\n    if (aIsNuclear && bIsNuclear) {\n      return naturalSort(a.name, b.name);\n    } else if (!aIsNuclear && bIsNuclear) {\n      return 1;\n    } else if (aIsMT && bIsCP) {\n      return 1;\n    } else if (aIsCP && bIsMT) {\n      return -1;\n    } else if (!aIsMT && !aIsCP && (bIsMT || bIsCP)) {\n      return -1;\n    }\n  }\n\n/*\n*  Returns names and lengths of chromosomes for an organism's best-known\n*  genome assembly.  Gets data from NCBI EUtils web API.\n*/\n  getAssemblyAndChromosomesFromEutils(callback) {\n    var asmAndChrArray, // [assembly_accession, chromosome_objects_array]\n      organism, assemblyAccession, chromosomes, asmSearch,\n      asmUid, asmSummary,\n      rsUid, nuccoreLink,\n      links, ntSummary,\n      results, result, cnIndex, chrName, chrLength, chromosome, type,\n      ideo = this;\n\n    organism = ideo.config.organism;\n\n    asmAndChrArray = [];\n    chromosomes = [];\n\n    asmSearch =\n      ideo.esearch +\n      '&db=assembly' +\n      '&term=%22' + organism + '%22[organism]' +\n        'AND%20(%22latest%20refseq%22[filter])%20' +\n        'AND%20(%22chromosome%20level%22[filter]%20' +\n        'OR%20%22complete%20genome%22[filter])';\n\n    var promise = d3.promise.json(asmSearch);\n\n    promise\n      .then(function(data) {\n        // NCBI Assembly database's internal identifier (uid) for this assembly\n        asmUid = data.esearchresult.idlist[0];\n        asmSummary = ideo.esummary + '&db=assembly&id=' + asmUid;\n\n        return d3.promise.json(asmSummary);\n      })\n      .then(function(data) {\n        // RefSeq UID for this assembly\n        rsUid = data.result[asmUid].rsuid;\n        assemblyAccession = data.result[asmUid].assemblyaccession;\n\n        asmAndChrArray.push(assemblyAccession);\n\n        // Get a list of IDs for the chromosomes in this genome.\n        //\n        // This information does not seem to be available from well-known\n        // NCBI databases like Assembly or Nucleotide, so we use GenColl,\n        // a lesser-known NCBI database.\n        var qs = '&db=nuccore&linkname=gencoll_nuccore_chr&from_uid=' + rsUid;\n        nuccoreLink = ideo.elink + qs;\n\n        return d3.promise.json(nuccoreLink);\n      })\n      .then(function(data) {\n        links = data.linksets[0].linksetdbs[0].links.join(',');\n        ntSummary = ideo.esummary + '&db=nucleotide&id=' + links;\n\n        return d3.promise.json(ntSummary);\n      })\n      .then(function(data) {\n        results = data.result;\n\n        for (var x in results) {\n          result = results[x];\n\n          // omit list of reult uids\n          if (x === 'uids') {\n            continue;\n          }\n\n          if (result.genome === 'mitochondrion') {\n            if (ideo.config.showNonNuclearChromosomes) {\n              type = result.genome;\n              cnIndex = result.subtype.split('|').indexOf('plasmid');\n              if (cnIndex === -1) {\n                chrName = 'MT';\n              } else {\n                // Seen in e.g. rice genome IRGSP-1.0 (GCF_001433935.1),\n                // From https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?retmode=json&db=nucleotide&id=996703432,996703431,996703430,996703429,996703428,996703427,996703426,996703425,996703424,996703423,996703422,996703421,194033210,11466763,7524755\n                // genome: 'mitochondrion',\n                // subtype: 'cell_line|plasmid',\n                // subname: 'A-58 CMS|B1',\n                chrName = result.subname.split('|')[cnIndex];\n              }\n            } else {\n              continue;\n            }\n          } else if (\n            result.genome === 'chloroplast' ||\n            result.genome === 'plastid'\n          ) {\n            type = 'chloroplast';\n            // Plastid encountered with rice genome IRGSP-1.0 (GCF_001433935.1)\n            if (ideo.config.showNonNuclearChromosomes) {\n              chrName = 'CP';\n            } else {\n              continue;\n            }\n          } else {\n            type = 'nuclear';\n            cnIndex = result.subtype.split('|').indexOf('chromosome');\n\n            chrName = result.subname.split('|')[cnIndex];\n\n            if (\n              typeof chrName !== 'undefined' &&\n              chrName.substr(0, 3) === 'chr'\n            ) {\n              // Convert \"chr12\" to \"12\", e.g. for banana (GCF_000313855.2)\n              chrName = chrName.substr(3);\n            }\n          }\n\n          chrLength = result.slen;\n\n          chromosome = {\n            name: chrName,\n            length: chrLength,\n            type: type\n          };\n\n          chromosomes.push(chromosome);\n        }\n\n        chromosomes = chromosomes.sort(ideo.sortChromosomes);\n        asmAndChrArray.push(chromosomes);\n\n        ideo.coordinateSystem = 'bp';\n\n        return callback(asmAndChrArray);\n      });\n  }\n\n  drawSexChromosomes(bandsArray, taxid, container, defs, j, chrs) {\n    var chromosome, bands, chrModel, shape, sci, k,\n      sexChromosomeIndexes,\n      ideo = this;\n\n    if (ideo.config.sex === 'male') {\n      sexChromosomeIndexes = [1, 0];\n    } else {\n      sexChromosomeIndexes = [0, 0];\n    }\n\n    for (k = 0; k < sexChromosomeIndexes.length; k++) {\n      sci = sexChromosomeIndexes[k] + j;\n      chromosome = chrs[sci];\n      bands = bandsArray[sci];\n      chrModel = ideo.getChromosomeModel(bands, chromosome, taxid, sci);\n      shape = ideo.drawChromosome(chrModel, j, container, k);\n      defs.append('clipPath')\n        .attr('id', chrModel.id + '-chromosome-set-clippath')\n        .selectAll('path')\n        .data(shape)\n        .enter()\n        .append('path')\n        .attr('d', function(d) {\n          return d.path;\n        }).attr('class', function(d) {\n          return d.class;\n        });\n    }\n  }\n\n  /*\n  * Configures chromosome data and calls downstream chromosome drawing functions\n  */\n  initDrawChromosomes(bandsArray) {\n    var ideo = this,\n      taxids = ideo.config.taxids,\n      ploidy = ideo.config.ploidy,\n      taxid,\n      chrIndex = 0,\n      chrSetNumber = 0,\n      bands,\n      i, j, chrs, chromosome, chrModel,\n      defs, transform;\n\n    defs = d3.select(ideo.selector + ' defs');\n\n    for (i = 0; i < taxids.length; i++) {\n      taxid = taxids[i];\n      chrs = ideo.config.chromosomes[taxid];\n\n      ideo.chromosomes[taxid] = {};\n\n      ideo.setSexChromosomes(chrs);\n\n      for (j = 0; j < chrs.length; j++) {\n        chromosome = chrs[j];\n        bands = bandsArray[chrIndex];\n        chrIndex += 1;\n\n        chrModel = ideo.getChromosomeModel(bands, chromosome, taxid, chrIndex);\n\n        ideo.chromosomes[taxid][chromosome] = chrModel;\n        ideo.chromosomesArray.push(chrModel);\n\n        if (\n          'sex' in ideo.config &&\n          (\n            ploidy === 2 && ideo.sexChromosomes.index + 2 === chrIndex ||\n            ideo.config.sex === 'female' && chrModel.name === 'Y'\n          )\n        ) {\n          continue;\n        }\n\n        transform = ideo._layout.getChromosomeSetTranslate(chrSetNumber);\n        chrSetNumber += 1;\n\n        // Append chromosome set container\n        var container = d3.select(ideo.selector)\n          .append('g')\n          .attr('class', 'chromosome-set-container')\n          .attr('data-set-number', j)\n          .attr('transform', transform)\n          .attr('id', chrModel.id + '-chromosome-set');\n\n        if (\n          'sex' in ideo.config &&\n          ploidy === 2 &&\n          ideo.sexChromosomes.index + 1 === chrIndex\n        ) {\n          ideo.drawSexChromosomes(bandsArray, taxid, container, defs, j, chrs);\n          continue;\n        }\n\n        var shape;\n        var numChrsInSet = 1;\n        if (ploidy > 1) {\n          numChrsInSet = this._ploidy.getChromosomesNumber(j);\n        }\n        for (var k = 0; k < numChrsInSet; k++) {\n          shape = ideo.drawChromosome(chrModel, chrIndex - 1, container, k);\n        }\n\n        defs.append('clipPath')\n          .attr('id', chrModel.id + '-chromosome-set-clippath')\n          .selectAll('path')\n          .data(shape)\n          .enter()\n          .append('path')\n          .attr('d', function(d) {\n            return d.path;\n          }).attr('class', function(d) {\n            return d.class;\n          });\n      }\n\n      if (ideo.config.showBandLabels === true) {\n        ideo.drawBandLabels(ideo.chromosomes);\n      }\n    }\n  }\n\n  // Get ideogram SVG container\n  getSvg() {\n    return d3.select(this.selector).node();\n  }\n\n  /*\n  * Sets instance properties regarding sex chromosomes.\n  * Currently only supported for mammals.\n  * TODO: Support all sexually reproducing taxa\n  *   XY sex-determination (mammals):\n  *     - Male: XY <- heterogametic\n  *     - Female: XX\n  *   ZW sex-determination (birds):\n  *     - Male: ZZ\n  *     - Female: ZW <- heterogametic\n  *   X0 sex-determination (some insects):\n  *     - Male: X0, i.e. only X <- heterogametic?\n  *     - Female: XX\n  * TODO: Support sex chromosome aneuploidies in mammals\n  *     - Turner syndrome: X0\n  *     - Klinefelter syndome: XXY\n  *  More types:\n  *  https:*en.wikipedia.org/wiki/Category:Sex_chromosome_aneuploidies\n  */\n  setSexChromosomes(chrs) {\n    if (this.config.ploidy !== 2 || !this.config.sex) {\n      return;\n    }\n\n    var ideo = this,\n      sexChrs = {X: 1, Y: 1},\n      chr, i;\n\n    ideo.sexChromosomes.list = [];\n\n    for (i = 0; i < chrs.length; i++) {\n      chr = chrs[i];\n\n      if (ideo.config.sex === 'male' && chr in sexChrs) {\n        ideo.sexChromosomes.list.push(chr);\n        if (!ideo.sexChromosomes.index) {\n          ideo.sexChromosomes.index = i;\n        }\n      } else if (chr === 'X') {\n        ideo.sexChromosomes.list.push(chr, chr);\n        ideo.sexChromosomes.index = i;\n      }\n    }\n  }\n\n  /*\n  * Completes default ideogram initialization\n  * by calling downstream functions to\n  * process raw band data into full JSON objects,\n  * render chromosome and cytoband figures and labels,\n  * apply initial graphical transformations,\n  * hide overlapping band labels, and\n  * execute callbacks defined by client code\n  */\n  processBandData() {\n    var bandsArray, maxLength, j, k, chromosome, bands,\n      chrLength, chr,\n      bandData, bandsByChr,\n      taxid, taxids, chrs, chrsByTaxid,\n      ideo = this;\n\n    bandsArray = [];\n    maxLength = 0;\n\n    if (ideo.config.multiorganism === true) {\n      ideo.coordinateSystem = 'bp';\n      taxids = ideo.config.taxids;\n      for (i = 0; i < taxids.length; i++) {\n        taxid = taxids[i];\n      }\n    } else {\n      if (typeof ideo.config.taxid === 'undefined') {\n        ideo.config.taxid = ideo.config.taxids[0];\n      }\n      taxid = ideo.config.taxid;\n      taxids = [taxid];\n      ideo.config.taxids = taxids;\n    }\n\n    if ('chromosomes' in ideo.config) {\n      chrs = ideo.config.chromosomes;\n    }\n    if (ideo.config.multiorganism) {\n      chrsByTaxid = chrs;\n    }\n\n    ideo.config.chromosomes = {};\n\n    var t0B = new Date().getTime();\n\n    for (j = 0; j < taxids.length; j++) {\n      taxid = taxids[j];\n\n      if (ideo.config.multiorganism) {\n        chrs = chrsByTaxid[taxid];\n      }\n\n      if (ideo.coordinateSystem === 'iscn' || ideo.config.multiorganism) {\n        bandData = ideo.bandData[taxid];\n\n        bandsByChr = ideo.getBands(bandData, taxid, chrs);\n\n        chrs = Object.keys(bandsByChr).sort(function(a, b) {\n          return naturalSort(a, b);\n        });\n\n        ideo.config.chromosomes[taxid] = chrs.slice();\n        ideo.numChromosomes += ideo.config.chromosomes[taxid].length;\n\n        for (k = 0; k < chrs.length; k++) {\n          chromosome = chrs[k];\n          bands = bandsByChr[chromosome];\n          bandsArray.push(bands);\n\n          chrLength = {\n            iscn: bands[bands.length - 1].iscn.stop,\n            bp: bands[bands.length - 1].bp.stop\n          };\n\n          if (chrLength.iscn > ideo.maxLength.iscn) {\n            ideo.maxLength.iscn = chrLength.iscn;\n          }\n\n          if (chrLength.bp > ideo.maxLength.bp) {\n            ideo.maxLength.bp = chrLength.bp;\n          }\n        }\n      } else if (ideo.coordinateSystem === 'bp') {\n        // If lacking band-level data\n\n        ideo.config.chromosomes[taxid] = chrs.slice();\n        ideo.numChromosomes += ideo.config.chromosomes[taxid].length;\n\n        for (k = 0; k < chrs.length; k++) {\n          chr = chrs[k];\n          if (chr.length > ideo.maxLength.bp) {\n            ideo.maxLength.bp = chr.length;\n          }\n        }\n      }\n    }\n\n    var t1B = new Date().getTime();\n    if (ideo.debug) {\n      console.log('Time in processBandData: ' + (t1B - t0B) + ' ms');\n    }\n\n    return bandsArray;\n  }\n\n  /**\n  * Initializes an ideogram.\n  * Sets some high-level properties based on instance configuration,\n  * fetches band and annotation data if needed, and\n  * writes an SVG element to the document to contain the ideogram\n  */\n  init() {\n    var taxid, i, svgClass;\n\n    var ideo = this;\n\n    var t0 = new Date().getTime();\n\n    var bandsArray = [],\n      numBandDataResponses = 0,\n      resolution = this.config.resolution,\n      accession;\n\n    var promise = new Promise(function(resolve) {\n      ideo.getTaxids(resolve);\n    });\n\n    promise.then(function(taxids) {\n      taxid = taxids[0];\n      ideo.config.taxid = taxid;\n      ideo.config.taxids = taxids;\n\n      var assemblies,\n        bandFileName;\n\n      var bandDataFileNames = {\n        9606: '',\n        10090: ''\n      };\n\n      for (i = 0; i < taxids.length; i++) {\n        taxid = String(taxids[i]);\n\n        if (!ideo.config.assembly) {\n          ideo.config.assembly = 'default';\n        }\n        assemblies = ideo.organisms[taxid].assemblies;\n        accession = assemblies[ideo.config.assembly];\n\n        bandFileName = [];\n        bandFileName.push(slugify(ideo.organisms[taxid].scientificName));\n        if (accession !== assemblies.default) {\n          bandFileName.push(accession);\n        }\n        if (\n          taxid === '9606' &&\n          (accession !== assemblies.default || resolution !== 850)\n        ) {\n          bandFileName.push(resolution);\n        }\n        bandFileName = bandFileName.join('-') + '.js';\n\n        if (taxid === '9606' || taxid === '10090') {\n          bandDataFileNames[taxid] = bandFileName;\n        }\n\n        if (typeof chrBands === 'undefined' && taxid in bandDataFileNames) {\n          d3.request(ideo.config.dataDir + bandDataFileNames[taxid])\n            .on('beforesend', function(data) {\n              // Ensures correct taxid is processed in response callback; using\n              // simply 'taxid' variable gives the last *requested* taxid, which\n              // fails when dealing with multiple taxa.\n              data.taxid = taxid;\n            })\n            .get(function(error, data) {\n              eval(data.response);\n\n              ideo.bandData[data.taxid] = chrBands;\n              numBandDataResponses += 1;\n\n              if (numBandDataResponses === taxids.length) {\n                bandsArray = ideo.processBandData();\n                writeContainer();\n              }\n            });\n        } else {\n          if (typeof chrBands !== 'undefined') {\n          // If bands already available,\n          // e.g. via <script> tag in initial page load\n            ideo.bandData[taxid] = chrBands;\n          }\n          bandsArray = ideo.processBandData();\n          writeContainer();\n        }\n      }\n    });\n\n    function writeContainer() {\n      if (ideo.config.annotationsPath) {\n        d3.json(\n        ideo.config.annotationsPath, // URL\n        function(data) { // Callback\n          ideo.rawAnnots = data;\n        }\n      );\n      }\n\n      // If ploidy description is a string, then convert it to the canonical\n      // array format.  String ploidyDesc is used when depicting e.g. parental\n      // origin each member of chromosome pair in a human genome.\n      // See ploidy_basic.html for usage example.\n      if (\n        'ploidyDesc' in ideo.config &&\n        typeof ideo.config.ploidyDesc === 'string'\n      ) {\n        var tmp = [];\n        for (var i = 0; i < ideo.numChromosomes; i++) {\n          tmp.push(ideo.config.ploidyDesc);\n        }\n        ideo.config.ploidyDesc = tmp;\n      }\n      // Organism ploidy description\n      ideo._ploidy = new Ploidy(ideo.config);\n\n      // Chromosome's layout\n      ideo._layout = Layout.getInstance(ideo.config, ideo);\n\n      svgClass = '';\n      if (ideo.config.showChromosomeLabels) {\n        if (ideo.config.orientation === 'horizontal') {\n          svgClass += 'labeledLeft ';\n        } else {\n          svgClass += 'labeled ';\n        }\n      }\n\n      if (\n      ideo.config.annotationsLayout &&\n      ideo.config.annotationsLayout === 'overlay'\n    ) {\n        svgClass += 'faint';\n      }\n\n      var gradients = ideo.getBandColorGradients();\n      var svgWidth = ideo._layout.getWidth(taxid);\n      var svgHeight = ideo._layout.getHeight(taxid);\n\n      d3.select(ideo.config.container)\n        .append('div')\n          .append('svg')\n            .attr('id', '_ideogram')\n            .attr('class', svgClass)\n            .attr('width', svgWidth)\n            .attr('height', svgHeight)\n            .html(gradients);\n\n      finishInit();\n    }\n\n    function finishInit() {\n      try {\n        var t0A = new Date().getTime();\n\n        var i;\n\n        ideo.initDrawChromosomes(bandsArray);\n\n        // Waits for potentially large annotation dataset\n        // to be received by the client, then triggers annotation processing\n        if (ideo.config.annotationsPath) {\n          function pa() {\n            if (typeof ideo.timeout !== 'undefined') {\n              window.clearTimeout(ideo.timeout);\n            }\n\n            ideo.annots = ideo.processAnnotData(ideo.rawAnnots);\n            ideo.drawProcessedAnnots(ideo.annots);\n\n            if (typeof crossfilter !== 'undefined' && ideo.initCrossFilter) {\n              ideo.initCrossFilter();\n            }\n          }\n\n          if (ideo.rawAnnots) {\n            pa();\n          } else {\n            (function checkAnnotData() {\n              ideo.timeout = setTimeout(function() {\n                if (!ideo.rawAnnots) {\n                  checkAnnotData();\n                } else {\n                  pa();\n                }\n              },\n            50\n          );\n            })();\n          }\n        }\n\n        if (ideo.config.showBandLabels === true) {\n          var bandsToShow = ideo.bandsToShow.join(',');\n\n          // d3.selectAll resolves to querySelectorAll (QSA).\n          // QSA takes a surprisingly long time to complete,\n          // and scales with the number of selectors.\n          // Most bands are hidden, so we can optimize by\n          // Hiding all bands, then QSA'ing and displaying the\n          // relatively few bands that are shown.\n          var t0C = new Date().getTime();\n          d3.selectAll(ideo.selector + ' .bandLabel, .bandLabelStalk')\n          .style('display', 'none');\n          d3.selectAll(bandsToShow).style('display', '');\n          var t1C = new Date().getTime();\n          if (ideo.debug) {\n            console.log('Time in showing bands: ' + (t1C - t0C) + ' ms');\n          }\n\n          if (ideo.config.orientation === 'vertical') {\n            var chrID;\n            for (i = 0; i < ideo.chromosomesArray.length; i++) {\n              chrID = '#' + ideo.chromosomesArray[i].id;\n              ideo.rotateChromosomeLabels(d3.select(chrID), i);\n            }\n          }\n        }\n\n        if (ideo.config.showChromosomeLabels === true) {\n          ideo.drawChromosomeLabels(ideo.chromosomes);\n        }\n\n        if (ideo.config.brush === true) {\n          ideo.createBrush();\n        }\n\n        if (ideo.config.annotations) {\n          ideo.drawAnnots(ideo.config.annotations);\n        }\n\n        var t1A = new Date().getTime();\n        if (ideo.debug) {\n          console.log('Time in drawChromosome: ' + (t1A - t0A) + ' ms');\n        }\n\n        var t1 = new Date().getTime();\n        if (ideo.debug) {\n          console.log('Time constructing ideogram: ' + (t1 - t0) + ' ms');\n        }\n\n        if (ideo.onLoadCallback) {\n          ideo.onLoadCallback();\n        }\n\n        if (!('rotatable' in ideo.config && ideo.config.rotatable === false)) {\n          d3.selectAll(ideo.selector + ' .chromosome').on('click', function() {\n            ideo.rotateAndToggleDisplay(this);\n          });\n        } else {\n          d3.selectAll(ideo.selector + ' .chromosome')\n            .style('cursor', 'default');\n        }\n      } catch (e) {\n        // console.log(e);\n        throw e;\n      }\n    }\n  }\n\n}\n","\nimport {Ideogram} from './core'\n// import from './filter'\n\n\n// https://github.com/stefanpenner/es6-promise\n// (function(){\"use strict\";function t(t){return\"function\"==typeof t||\"object\"==typeof t&&null!==t}function e(t){return\"function\"==typeof t}function n(t){G=t}function r(t){Q=t}function o(){return function(){process.nextTick(a)}}function i(){return function(){B(a)}}function s(){var t=0,e=new X(a),n=document.createTextNode(\"\");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function u(){var t=new MessageChannel;return t.port1.onmessage=a,function(){t.port2.postMessage(0)}}function c(){return function(){setTimeout(a,1)}}function a(){for(var t=0;J>t;t+=2){var e=tt[t],n=tt[t+1];e(n),tt[t]=void 0,tt[t+1]=void 0}J=0}function f(){try{var t=require,e=t(\"vertx\");return B=e.runOnLoop||e.runOnContext,i()}catch(n){return c()}}function l(t,e){var n=this,r=new this.constructor(p);void 0===r[rt]&&k(r);var o=n._state;if(o){var i=arguments[o-1];Q(function(){x(o,r,i,n._result)})}else E(n,r,t,e);return r}function h(t){var e=this;if(t&&\"object\"==typeof t&&t.constructor===e)return t;var n=new e(p);return g(n,t),n}function p(){}function _(){return new TypeError(\"You cannot resolve a promise with itself\")}function d(){return new TypeError(\"A promises callback cannot return that same promise.\")}function v(t){try{return t.then}catch(e){return ut.error=e,ut}}function y(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function m(t,e,n){Q(function(t){var r=!1,o=y(n,e,function(n){r||(r=!0,e!==n?g(t,n):S(t,n))},function(e){r||(r=!0,j(t,e))},\"Settle: \"+(t._label||\" unknown promise\"));!r&&o&&(r=!0,j(t,o))},t)}function b(t,e){e._state===it?S(t,e._result):e._state===st?j(t,e._result):E(e,void 0,function(e){g(t,e)},function(e){j(t,e)})}function w(t,n,r){n.constructor===t.constructor&&r===et&&constructor.resolve===nt?b(t,n):r===ut?j(t,ut.error):void 0===r?S(t,n):e(r)?m(t,n,r):S(t,n)}function g(e,n){e===n?j(e,_()):t(n)?w(e,n,v(n)):S(e,n)}function A(t){t._onerror&&t._onerror(t._result),T(t)}function S(t,e){t._state===ot&&(t._result=e,t._state=it,0!==t._subscribers.length&&Q(T,t))}function j(t,e){t._state===ot&&(t._state=st,t._result=e,Q(A,t))}function E(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+it]=n,o[i+st]=r,0===i&&t._state&&Q(T,t)}function T(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?x(n,r,o,i):o(i);t._subscribers.length=0}}function M(){this.error=null}function P(t,e){try{return t(e)}catch(n){return ct.error=n,ct}}function x(t,n,r,o){var i,s,u,c,a=e(r);if(a){if(i=P(r,o),i===ct?(c=!0,s=i.error,i=null):u=!0,n===i)return void j(n,d())}else i=o,u=!0;n._state!==ot||(a&&u?g(n,i):c?j(n,s):t===it?S(n,i):t===st&&j(n,i))}function C(t,e){try{e(function(e){g(t,e)},function(e){j(t,e)})}catch(n){j(t,n)}}function O(){return at++}function k(t){t[rt]=at++,t._state=void 0,t._result=void 0,t._subscribers=[]}function Y(t){return new _t(this,t).promise}function q(t){var e=this;return new e(I(t)?function(n,r){for(var o=t.length,i=0;o>i;i++)e.resolve(t[i]).then(n,r)}:function(t,e){e(new TypeError(\"You must pass an array to race.\"))})}function F(t){var e=this,n=new e(p);return j(n,t),n}function D(){throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\")}function K(){throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\")}function L(t){this[rt]=O(),this._result=this._state=void 0,this._subscribers=[],p!==t&&(\"function\"!=typeof t&&D(),this instanceof L?C(this,t):K())}function N(t,e){this._instanceConstructor=t,this.promise=new t(p),this.promise[rt]||k(this.promise),I(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?S(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&S(this.promise,this._result))):j(this.promise,U())}function U(){return new Error(\"Array Methods must be provided an Array\")}function W(){var t;if(\"undefined\"!=typeof global)t=global;else if(\"undefined\"!=typeof self)t=self;else try{t=Function(\"return this\")()}catch(e){throw new Error(\"polyfill failed because global object is unavailable in this environment\")}var n=t.Promise;(!n||\"[object Promise]\"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(t.Promise=pt)}var z;z=Array.isArray?Array.isArray:function(t){return\"[object Array]\"===Object.prototype.toString.call(t)};var B,G,H,I=z,J=0,Q=function(t,e){tt[J]=t,tt[J+1]=e,J+=2,2===J&&(G?G(a):H())},R=\"undefined\"!=typeof window?window:void 0,V=R||{},X=V.MutationObserver||V.WebKitMutationObserver,Z=\"undefined\"==typeof self&&\"undefined\"!=typeof process&&\"[object process]\"==={}.toString.call(process),$=\"undefined\"!=typeof Uint8ClampedArray&&\"undefined\"!=typeof importScripts&&\"undefined\"!=typeof MessageChannel,tt=new Array(1e3);H=Z?o():X?s():$?u():void 0===R&&\"function\"==typeof require?f():c();var et=l,nt=h,rt=Math.random().toString(36).substring(16),ot=void 0,it=1,st=2,ut=new M,ct=new M,at=0,ft=Y,lt=q,ht=F,pt=L;L.all=ft,L.race=lt,L.resolve=nt,L.reject=ht,L._setScheduler=n,L._setAsap=r,L._asap=Q,L.prototype={constructor:L,then:et,\"catch\":function(t){return this.then(null,t)}};var _t=N;N.prototype._enumerate=function(){for(var t=this.length,e=this._input,n=0;this._state===ot&&t>n;n++)this._eachEntry(e[n],n)},N.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===nt){var o=v(t);if(o===et&&t._state!==ot)this._settledAt(t._state,e,t._result);else if(\"function\"!=typeof o)this._remaining--,this._result[e]=t;else if(n===pt){var i=new n(p);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){e(t)}),e)}else this._willSettleAt(r(t),e)},N.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===ot&&(this._remaining--,t===st?j(r,n):this._result[e]=n),0===this._remaining&&S(r,this._result)},N.prototype._willSettleAt=function(t,e){var n=this;E(t,void 0,function(t){n._settledAt(it,e,t)},function(t){n._settledAt(st,e,t)})};var dt=W,vt={Promise:pt,polyfill:dt};\"function\"==typeof define&&define.amd?define(function(){return vt}):\"undefined\"!=typeof module&&module.exports?module.exports=vt:\"undefined\"!=typeof this&&(this.ES6Promise=vt),dt()}).call(this);\n\n// https://github.com/kristw/d3.promise\n// !function(a,b){\"function\"==typeof define&&define.amd?define([\"d3\"],b):\"object\"==typeof exports?module.exports=b(require(\"d3\")):a.d3.promise=b(a.d3)}(this,function(a){var b=function(){function b(a,b){return function(){var c=Array.prototype.slice.call(arguments);return new Promise(function(d,e){var f=function(a,b){return a?void e(Error(a)):void d(b)};b.apply(a,c.concat(f))})}}var c={};return[\"csv\",\"tsv\",\"json\",\"xml\",\"text\",\"html\",\"get\"].forEach(function(d){c[d]=b(a,a[d])}),c}();return a.promise=b,b});\n\n// https://github.com/overset/javascript-natural-sort\nfunction naturalSort(a,b){var q,r,c=/(^([+\\-]?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?(?=\\D|\\s|$))|^0x[\\da-fA-F]+$|\\d+)/g,d=/^\\s+|\\s+$/g,e=/\\s+/g,f=/(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,g=/^0x[0-9a-f]+$/i,h=/^0/,i=function(a){return(naturalSort.insensitive&&(\"\"+a).toLowerCase()||\"\"+a).replace(d,\"\")},j=i(a),k=i(b),l=j.replace(c,\"\\0$1\\0\").replace(/\\0$/,\"\").replace(/^\\0/,\"\").split(\"\\0\"),m=k.replace(c,\"\\0$1\\0\").replace(/\\0$/,\"\").replace(/^\\0/,\"\").split(\"\\0\"),n=parseInt(j.match(g),16)||1!==l.length&&Date.parse(j),o=parseInt(k.match(g),16)||n&&k.match(f)&&Date.parse(k)||null,p=function(a,b){return(!a.match(h)||1==b)&&parseFloat(a)||a.replace(e,\" \").replace(d,\"\")||0};if(o){if(n<o)return-1;if(n>o)return 1}for(var s=0,t=l.length,u=m.length,v=Math.max(t,u);s<v;s++){if(q=p(l[s]||\"\",t),r=p(m[s]||\"\",u),isNaN(q)!==isNaN(r))return isNaN(q)?1:-1;if(/[^\\x00-\\x80]/.test(q+r)&&q.localeCompare){var w=q.localeCompare(r);return w/Math.abs(w)}if(q<r)return-1;if(q>r)return 1}}\n\n// e.g. \"Homo sapiens\" -> \"homo-sapiens\"\nfunction slugify(value){return value.toLowerCase().replace(' ', '-')};\n\nwindow.naturalSort = naturalSort;\nwindow.slugify = slugify;\n\nwindow.Ideogram = Ideogram;\n","\n// import {VerticalLayout} from './vertical-layout';\n// import {HorizontalLayout} from './horizontal-layout';\n// import {PairedLayout} from './paired-layout';\n// import {SmallLayout} from './small-layout';\n\nimport * as d3 from 'd3';\n\nimport {ChromosomeUtil} from './../views/chromosome-util';\n\nexport class Layout {\n\n  constructor(config, ideo) {\n    this._config = config;\n    this._ideo = ideo;\n    this._ploidy = this._ideo._ploidy;\n    this._translate = undefined;\n\n    if ('chrSetMargin' in config) {\n      this.chrSetMargin = config.chrSetMargin;\n    } else {\n      var k = this._config.chrMargin;\n      this.chrSetMargin = (this._config.ploidy > 1 ? k : 0);\n    }\n\n    // Chromosome band's size.\n    this._tickSize = 8;\n\n    // Chromosome rotation state.\n    this._isRotated = false;\n  }\n\n  // Factory method\n  static getInstance(config, ideo) {\n    if ('perspective' in config && config.perspective === 'comparative') {\n      return new PairedLayout(config, ideo);\n    } else if ('rows' in config && config.rows > 1) {\n      return new SmallLayout(config, ideo);\n    } else if (config.orientation === 'vertical') {\n      return new VerticalLayout(config, ideo);\n    } else if (config.orientation === 'horizontal') {\n      return new HorizontalLayout(config, ideo);\n    } else {\n      return new VerticalLayout(config, ideo);\n    }\n  }\n\n  // Get chart left margin\n  _getLeftMargin() {\n    return this._margin.left;\n  }\n\n  // Get rotated chromosome y scale\n  _getYScale() {\n      // 20 is width of rotated chromosome.\n    return 20 / this._config.chrWidth;\n  }\n\n  // Get chromosome labels\n  getChromosomeLabels(chrElement) {\n    var util = new ChromosomeUtil(chrElement);\n\n    return [util.getSetLabel(), util.getLabel()].filter(function(d) {\n      return d.length > 0;\n    });\n  }\n\n  // Rotate chromosome to original position\n  rotateBack() {\n    throw new Error(this._class + '#rotateBack not implemented');\n  }\n\n  // Rotate chromosome to opposite position\n  rotateForward() {\n    throw new Error(this._class + '#rotateForward not implemented');\n  }\n\n  rotate(chrSetNumber, chrNumber, chrElement) {\n    var ideo = this._ideo;\n\n      // Find chromosomes which should be hidden\n    var otherChrs = d3.selectAll(ideo.selector + ' g.chromosome')\n      .filter(function() {\n        return this !== chrElement;\n      });\n\n    if (this._isRotated) {\n          // Reset _isRotated flag\n      this._isRotated = false;\n          // Rotate chromosome back\n      this.rotateBack(chrSetNumber, chrNumber, chrElement, function() {\n              // Show all other chromosomes and chromosome labels\n        otherChrs.style('display', null);\n        d3.selectAll(ideo.selector + ' .chrSetLabel, .chrLabel')\n          .style('display', null);\n      });\n    } else {\n          // Set _isRotated flag\n      this._isRotated = true;\n\n          // Hide all other chromosomes and chromosome labels\n      otherChrs.style('display', 'none');\n      d3.selectAll(ideo.selector + ' .chrSetLabel, .chrLabel')\n        .style('display', 'none');\n\n          // Rotate chromosome\n      this.rotateForward(chrSetNumber, chrNumber, chrElement);\n    }\n  }\n\n  getChromosomeLabelClass() {\n    if (this._config.ploidy === 1) {\n      return 'chrLabel';\n    } else {\n      return 'chrSetLabel';\n    }\n  }\n\n  _getAdditionalOffset() {\n    return (\n      (this._config.annotationHeight || 0) * (this._config.numAnnotTracks || 1)\n    );\n  }\n\n  _getChromosomeSetSize(chrSetNumber) {\n    // Get last chromosome set size.\n    var setSize = this._ploidy.getSetSize(chrSetNumber);\n\n    // Increase offset by last chromosome set size\n    return (\n      setSize * this._config.chrWidth * 2 + (this.chrSetMargin)\n    );\n  }\n\n  // Get layout margin\n  getMargin() {\n    return this._margin;\n  }\n\n  // Get SVG element height\n  getHeight() {\n    throw new Error(this._class + '#getHeight not implemented');\n  }\n\n  getChromosomeBandTickY1() {\n    throw new Error(this._class + '#getChromosomeBandTickY1 not implemented');\n  }\n\n  getChromosomeBandTickY2() {\n    throw new Error(this._class + '#getChromosomeBandTickY2 not implemented');\n  }\n\n  // Get chromosome's band translate attribute\n  getChromosomeBandLabelTranslate() {\n    throw new Error(\n      this._class + '#getChromosomeBandLabelTranslate not implemented'\n    );\n  }\n\n  // Get chromosome set label anchor property\n  getChromosomeSetLabelAnchor() {\n    return 'middle';\n  }\n\n  // Get chromosome's band label text-anchor value\n  getChromosomeBandLabelAnchor() {\n    throw (\n      new Error(this._class + '#getChromosomeBandLabelAnchor not implemented')\n    );\n  }\n\n  getChromosomeLabelXPosition() {\n    throw new Error(\n      this._class + '#getChromosomeLabelXPosition not implemented'\n    );\n  }\n\n  // Get chromosome label y position.\n  getChromosomeLabelYPosition() {\n    return -5.5;\n  }\n\n  // \"i\" is chromosome number\n  getChromosomeSetLabelYPosition(i) {\n    if (this._config.ploidy === 1) {\n      return this.getChromosomeLabelYPosition(i);\n    } else {\n      return -2 * this._config.chrWidth;\n    }\n  }\n\n  getChromosomeSetLabelXPosition() {\n    throw (\n      new Error(\n        this._class + '#getChromosomeSetLabelXPosition not implemented'\n      )\n    );\n  }\n\n  getChromosomeSetLabelTranslate() {\n    throw (\n      new Error(this._class + '#getChromosomeSetLabelTranslate not implemented')\n    );\n  }\n\n  // Get chromosome set translate attribute\n  getChromosomeSetTranslate() {\n    throw new Error(this._class + '#getChromosomeSetTranslate not implemented');\n  }\n\n  // Get chromosome set translate's y offset\n  getChromosomeSetYTranslate() {\n    throw new Error(\n      this._class + '#getChromosomeSetYTranslate not implemented'\n    );\n  }\n}\n\n\n\nexport class HorizontalLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n    this._class = 'HorizontalLayout';\n    this._margin = {\n      left: 20,\n      top: 30\n    };\n  }\n\n  _getLeftMargin() {\n    var margin = Layout.prototype._getLeftMargin.call(this);\n    if (this._config.ploidy > 1) {\n      margin *= 1.8;\n    }\n\n    return margin;\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var xOffset = 30;\n\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.height / (chrBox.width + xOffset / 2)) * 0.9;\n    var scaleY = this._getYScale();\n\n    var yOffset = (chrNumber + 1) * ((this._config.chrWidth * 2) * scaleY);\n\n    var transform = (\n      'rotate(90) ' +\n      'translate(' + xOffset + ', -' + yOffset + ') ' +\n      'scale(' + scaleX + ', ' + scaleY + ')'\n    );\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", transform)\n      .on('end', callback);\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(labels)\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 30)\n      .attr('y', function(d, i) {\n        return (i + 1 + labels.length % 2) * 12;\n      })\n      .style('text-anchor', 'middle')\n      .style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber,\n             chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", translate)\n      .on('end', callback);\n\n    d3.selectAll(this._ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight(taxId) {\n    // Get last chromosome set offset.\n    var numChromosomes = this._config.chromosomes[taxId].length;\n    var lastSetOffset = this.getChromosomeSetYTranslate(numChromosomes - 1);\n\n    // Get last chromosome set size.\n    var lastSetSize = this._getChromosomeSetSize(numChromosomes - 1);\n\n    // Increase offset by last chromosome set size\n    lastSetOffset += lastSetSize;\n\n    return lastSetOffset + this._getAdditionalOffset() * 2;\n  }\n\n  getWidth() {\n    return this._config.chrHeight + this._margin.top * 1.5;\n  }\n\n  getChromosomeSetLabelAnchor() {\n    return 'end';\n  }\n\n  getChromosomeBandLabelAnchor() {\n    return null;\n  }\n\n  getChromosomeBandTickY1() {\n    return 2;\n  }\n\n  getChromosomeBandTickY2() {\n    return 10;\n  }\n\n  getChromosomeBandLabelTranslate(band) {\n    var x =\n      this._ideo.round(-this._tickSize + band.px.start + band.px.width / 2);\n    var y = -10;\n\n    return {\n      x: x,\n      y: y,\n      translate: 'translate(' + x + ',' + y + ')'\n    };\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return null;\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var leftMargin = this._getLeftMargin();\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return 'translate(' + leftMargin + ', ' + chromosomeSetYTranslate + ')';\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // If no detailed description provided just use one formula for all cases.\n    if (!this._config.ploidyDesc) {\n      return this._config.chrMargin * (setNumber + 1);\n    }\n\n    // Id detailed description provided start to calculate offsets\n    //  for each chromosome set separately. This should be done only once.\n    if (!this._translate) {\n      // First offset equals to zero.\n      this._translate = [1];\n\n      // Loop through description set\n      for (var i = 1; i < this._config.ploidyDesc.length; i++) {\n        this._translate[i] =\n          this._translate[i - 1] + this._getChromosomeSetSize(i - 1);\n      }\n    }\n\n    return this._translate[setNumber];\n  }\n\n  getChromosomeSetLabelXPosition(i) {\n    if (this._config.ploidy === 1) {\n      return this.getChromosomeLabelXPosition(i);\n    } else {\n      return -20;\n    }\n  }\n\n  getChromosomeSetLabelYPosition(i) {\n    var setSize = this._ploidy.getSetSize(i),\n      config = this._config,\n      chrMargin = config.chrMargin,\n      chrWidth = config.chrWidth,\n      y;\n\n    if (config.ploidy === 1) {\n      y = chrWidth / 2 + 3;\n    } else {\n      y = (setSize * chrMargin) / 2;\n    }\n\n    return y;\n  }\n\n  getChromosomeLabelXPosition() {\n    return -8;\n  }\n\n  getChromosomeLabelYPosition() {\n    return this._config.chrWidth;\n  }\n\n}\n\n\n\n\nexport class PairedLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n\n    this._class = 'PairedLayout';\n\n    this._margin = {\n      left: 30\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var self = this;\n    var ideo = this._ideo;\n\n    // Get ideo container and chromosome set dimensions\n    var ideoBox = d3.select(ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    // Evaluate dimensions scale coefficients\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    // Evaluate y offset of chromosome.\n    // It is different for first and the second one\n    var yOffset = setNumber ? 150 : 25;\n\n    var transform =\n      'translate(15, ' + yOffset + ') scale(' + scaleX + ', ' + scaleY + ')';\n\n    // Run rotation procedure\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr(\"transform\", transform)\n      .on('end', function() {\n        // Run callback function if provided\n        if (callback) {\n          callback();\n        }\n\n        var translateY = (6 * Number(!setNumber));\n\n        // Rotate band labels\n        d3.select(chrElement.parentNode).selectAll('g.bandLabel text')\n          .attr('transform', 'rotate(90) translate(0, ' + translateY + ')')\n          .attr('text-anchor', 'middle');\n\n        // Hide syntenic regions\n        d3.selectAll(ideo.selector + ' .syntenicRegion')\n          .style('display', 'none');\n      });\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(this.getChromosomeLabels(chrElement))\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 0)\n      .attr('y', yOffset + (self._config.chrWidth * scaleX / 2) * 1.15)\n      .style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber, chrElement, callback) {\n    var ideo = this._ideo;\n\n    // Get intial transformation string for chromosome set\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    // Run rotation procedure\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', function() {\n        // Run callback fnuction if provided\n        callback();\n\n        // Show syntenic regions\n        d3.selectAll(ideo.select + ' .syntenicRegion')\n          .style('display', null);\n\n        // Reset changed attributes to original state\n        d3.select(chrElement.parentNode).selectAll('g.bandLabel text')\n          .attr('transform', null)\n          .attr('text-anchor', setNumber ? null : 'end');\n      });\n\n    d3.selectAll(ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight() {\n    return this._config.chrHeight + this._margin.left * 1.5;\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandTickY1(chrNumber) {\n    return chrNumber % 2 ? this._config.chrWidth : this._config.chrWidth * 2;\n  }\n\n  getChromosomeBandTickY2(chrNumber) {\n    var width = this._config.chrWidth;\n    return chrNumber % 2 ? width - this._tickSize : width * 2 + this._tickSize;\n  }\n\n  getChromosomeBandLabelAnchor(chrNumber) {\n    return chrNumber % 2 ? null : 'end';\n  }\n\n  getChromosomeBandLabelTranslate(band, chrNumber) {\n    var x = chrNumber % 2 ? 10 : -this._config.chrWidth - 10;\n    var y = this._ideo.round(band.px.start + band.px.width / 2) + 3;\n\n    return {\n      x: y,\n      y: y,\n      translate: 'rotate(-90) translate(' + x + ', ' + y + ')'\n    };\n  }\n\n  getChromosomeLabelXPosition() {\n    return -this._tickSize;\n  }\n\n  getChromosomeSetLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return (\n      'rotate(90) ' +\n      'translate(' + this._margin.left + ', -' + chromosomeSetYTranslate + ')'\n    );\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    return 200 * (setNumber + 1);\n  }\n\n}\n\n\n\nexport class SmallLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n\n    this._class = 'SmallLayout';\n\n    this._margin = {\n      left: 36.5,\n      top: 10\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    transform = 'translate(5, 25) scale(' + scaleX + ', ' + scaleY + ')';\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', transform)\n      .on('end', callback);\n  }\n\n  rotateBack(setNumber, chrNumber, chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', callback);\n  }\n\n  getHeight() {\n    var chrHeight = this._config.chrHeight;\n    return this._config.rows * (chrHeight + this._margin.top * 1.5);\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandLabelTranslate() {\n\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    // Get organisms id list\n    var organisms = [];\n    this._ideo.getTaxids(function(taxIdList) {\n      organisms = taxIdList;\n    });\n    // Get first organism chromosomes amount\n    var size = this._ideo.config.chromosomes[organisms[0]].length;\n    // Amount of chromosomes per number\n    var rowSize = size / this._config.rows;\n\n    var xOffset;\n    var yOffset;\n\n    if (setNumber > rowSize - 1) {\n      xOffset = this._margin.left + this._config.chrHeight * 1.4;\n      yOffset = this.getChromosomeSetYTranslate(setNumber - rowSize);\n    } else {\n      xOffset = this._margin.left;\n      yOffset = this.getChromosomeSetYTranslate(setNumber);\n    }\n\n    return 'rotate(90) translate(' + xOffset + ', -' + yOffset + ')';\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // Get additional padding caused by annotation tracks\n    var additionalPadding = this._getAdditionalOffset();\n    // If no detailed description provided just use one formula for all cases\n    return (\n      this._margin.left * (setNumber) + this._config.chrWidth +\n      additionalPadding * 2 + additionalPadding * setNumber\n    );\n  }\n\n  getChromosomeSetLabelXPosition(setNumber) {\n    return (\n      ((this._ploidy.getSetSize(setNumber) * this._config.chrWidth + 20) / -2) +\n      (this._config.ploidy > 1 ? 0 : this._config.chrWidth)\n    );\n  }\n\n  getChromosomeLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n\n}\n\n\n\n\nexport class VerticalLayout extends Layout {\n\n  constructor(config, ideo) {\n    super(config, ideo);\n    this._class = 'VerticalLayout';\n    // Layout margins\n    this._margin = {\n      top: 30,\n      left: 15\n    };\n  }\n\n  rotateForward(setNumber, chrNumber, chrElement, callback) {\n    var self = this;\n\n    var xOffset = 20;\n\n    var ideoBox = d3.select(this._ideo.selector).node().getBoundingClientRect();\n    var chrBox = chrElement.getBoundingClientRect();\n\n    var scaleX = (ideoBox.width / chrBox.height) * 0.97;\n    var scaleY = this._getYScale();\n\n    var transform =\n      'translate(' + xOffset + ', 25) scale(' + scaleX + ', ' + scaleY + ')';\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', transform)\n      .on('end', callback);\n\n    // Append new chromosome labels\n    var labels = this.getChromosomeLabels(chrElement);\n    var y = (xOffset + self._config.chrWidth) * 1.3;\n    d3.select(this._ideo.getSvg())\n      .append('g')\n      .attr('class', 'tmp')\n      .selectAll('text')\n      .data(labels)\n      .enter()\n      .append('text')\n      .attr('class', function(d, i) {\n        return i === 0 && labels.length === 2 ? 'chrSetLabel' : null;\n      })\n      .attr('x', 0)\n      .attr('y', y).style('opacity', 0)\n      .text(String)\n      .transition()\n      .style('opacity', 1);\n  }\n\n  rotateBack(setNumber, chrNumber,\n             chrElement, callback) {\n    var translate = this.getChromosomeSetTranslate(setNumber);\n\n    d3.select(chrElement.parentNode)\n      .transition()\n      .attr('transform', translate)\n      .on('end', callback);\n\n    d3.selectAll(this._ideo.selector + ' g.tmp')\n      .style('opacity', 0)\n      .remove();\n  }\n\n  getHeight() {\n    return this._config.chrHeight + this._margin.top * 1.5;\n  }\n\n  getWidth() {\n    return '97%';\n  }\n\n  getChromosomeBandLabelTranslate() {\n\n  }\n\n  getChromosomeSetLabelTranslate() {\n    return 'rotate(-90)';\n  }\n\n  getChromosomeSetTranslate(setNumber) {\n    var marginTop = this._margin.top;\n    var chromosomeSetYTranslate = this.getChromosomeSetYTranslate(setNumber);\n    return (\n      'rotate(90) ' +\n      'translate(' + marginTop + ', -' + chromosomeSetYTranslate + ')'\n    );\n  }\n\n  getChromosomeSetYTranslate(setNumber) {\n    // Get additional padding caused by annotation/histogram tracks\n    var pad = this._getAdditionalOffset(),\n      margin = this._config.chrMargin,\n      width = this._config.chrWidth,\n      translate;\n\n    // If no detailed description provided just use one formula for all cases\n    if (!this._config.ploidyDesc) {\n      // TODO:\n      // This part of code contains a lot magic numbers and if\n      // statements for exactly corresponing to original ideogram examples.\n      // But all this stuff should be removed. Calculation of translate\n      // should be a simple formula applied for all cases listed below.\n      // Now they are diffirent because of Layout:_getAdditionalOffset do\n      // not meet for cases when no annotation, when annotation exists and\n      // when histogram used\n\n      if (this._config.annotationsLayout === 'histogram') {\n        return margin / 2 + setNumber * (margin + width + 2) + pad * 2 + 1;\n      } else {\n        translate = width + setNumber * (margin + width) + pad * 2;\n        if (pad > 0) {\n          return translate;\n        } else {\n          return translate + 4 + (2 * setNumber);\n        }\n      }\n    }\n\n    // If detailed description provided start to calculate offsets\n    // for each chromosome set separately. This should be done only once\n    if (!this._translate) {\n      // First offset equals to zero\n      this._translate = [this._ploidy.getSetSize(0) * width * 2];\n      var prevTranslate;\n      // Loop through description set\n      for (var i = 1; i < this._config.ploidyDesc.length; i++) {\n        prevTranslate = this._translate[i - 1];\n        this._translate[i] = prevTranslate + this._getChromosomeSetSize(i - 1);\n      }\n    }\n\n    return this._translate[setNumber];\n  }\n\n  getChromosomeSetLabelXPosition() {\n    return (this._config.chrWidth * this._config.ploidy) / -2;\n  }\n\n  getChromosomeLabelXPosition() {\n    return this._config.chrWidth / -2;\n  }\n}\n","export class ModelAdapter {\n\n  constructor(model) {\n    this._model = model;\n    this._class = 'ModelAdapter';\n  }\n\n  static getInstance(model) {\n    if (model.bands) {\n      return new ModelAdapter(model);\n    } else {\n      return new ModelNoBandsAdapter(model);\n    }\n  }\n\n  getModel() {\n    return this._model;\n  }\n\n  getCssClass() {\n    return '';\n  }\n}\n","export class Ploidy {\n\n  constructor(config) {\n    this._config = config;\n    this._description = this._normalize(this._config.ploidyDesc);\n  }\n\n  // Get number of chromosomes in a chromosome set\n  getChromosomesNumber(setNumber) {\n    if (this._config.ploidyDesc) {\n      var chrSetCode = this._config.ploidyDesc[setNumber];\n      if (chrSetCode instanceof Object) {\n        return Object.keys(chrSetCode)[0].length;\n      } else {\n        return chrSetCode.length;\n      }\n    } else {\n      return this._config.ploidy || 1;\n    }\n  }\n\n  // Normalize use defined description\n  _normalize(description) {\n    var normalized, key, descValue;\n\n    // Return the same if no description provided\n    if (!description) {\n      return description;\n    }\n\n    // Array of normalized description objects\n    normalized = [];\n\n    // Loop through description and normalize\n    for (key in description) {\n      descValue = description[key];\n      if (typeof descValue === 'string') {\n        if (this._config.orientation === 'vertical') {\n          descValue = descValue.split('').reverse();\n        }\n        normalized.push({\n          ancestors: descValue,\n          existence: this._getexistenceArray(descValue.length)\n        });\n      } else {\n        normalized.push({\n          ancestors: Object.keys(descValue)[0],\n          existence: descValue[Object.keys(descValue)[0]]\n        });\n      }\n    }\n\n    return normalized;\n  }\n\n  // Get array filled by '11' elements\n  _getexistenceArray(length) {\n    var array = [];\n\n    for (var i = 0; i < length; i++) {\n      array.push('11');\n    }\n\n    return array;\n  }\n\n  getSetSize(chrSetNumber) {\n    if (this._description) {\n      return this._description[chrSetNumber].ancestors.length;\n    } else {\n      return 1;\n    }\n  }\n\n  // Get ancestor letter\n  getAncestor(chrSetNumber, chrNumber) {\n    if (this._description) {\n      return this._description[chrSetNumber].ancestors[chrNumber];\n    } else {\n      return '';\n    }\n  }\n\n  // Check if chromosome's arm should be rendered.\n  // If no description was provided, method returns true and\n  // something another depending on user provided description.\n  exists(chrSetNumber, chrNumber, armNumber) {\n    if (this._description) {\n      var desc =\n        this._description[chrSetNumber].existence[chrNumber][armNumber];\n      return Number(desc) > 0;\n    } else {\n      return true;\n    }\n  }\n\n}\n","import * as d3 from 'd3';\n\n// Chromosome's view utility class\nexport class ChromosomeUtil {\n\n  constructor(node) {\n    this._node = node;\n  }\n\n  getLabel() {\n    var label =\n      d3\n        .select(this._node)\n        .select('text.chrLabel')\n        .text();\n    return label;\n  }\n\n  // Get chromosome set label\n  getSetLabel() {\n    var setLabel =\n      d3\n        .select(this._node.parentNode)\n        .select('text.chromosome-set-label')\n        .text();\n    return setLabel;\n  }\n}\n","import {Color} from './../color';\n\nexport class Chromosome {\n\n  constructor(adapter, config, ideo) {\n    this._adapter = adapter;\n    this._model = this._adapter.getModel();\n    this._config = config;\n    this._ideo = ideo;\n    this._color = new Color(this._config);\n    this._bumpCoefficient = 5;\n  }\n\n  // Factory method\n  static getInstance(adapter, config, ideo) {\n    if (adapter.getModel().centromerePosition === 'telocentric') {\n      return new TelocentricChromosome(adapter, config, ideo);\n    } else {\n      return new MetacentricChromosome(adapter, config, ideo);\n    }\n  };\n\n  _addPArmShape(clipPath, isPArmRendered) {\n    if (isPArmRendered) {\n      return clipPath.concat(this._getPArmShape());\n    } else {\n      return clipPath;\n    }\n  };\n\n  _addQArmShape(clipPath, isQArmRendered) {\n    if (isQArmRendered) {\n      return clipPath.concat(this._getQArmShape());\n    } else {\n      return clipPath;\n    }\n  };\n\n  render(container, chrSetNumber, chrNumber) {\n      // Append bands container and apply clip-path on it\n\n    var self = this;\n\n    container = container.append('g')\n      .attr('class', 'bands')\n      .attr(\"clip-path\", \"url(#\" + this._model.id + \"-chromosome-set-clippath)\");\n\n      // Render chromosome arms\n    var isPArmRendered = this._renderPArm(container, chrSetNumber, chrNumber);\n    var isQArmRendered = this._renderQArm(container, chrSetNumber, chrNumber);\n\n      // Render range set\n    this._renderRangeSet(container, chrSetNumber, chrNumber);\n\n      // Push arms shape string into clipPath array\n    var clipPath = [];\n    clipPath = this._addPArmShape(clipPath, isPArmRendered);\n    clipPath = this._addQArmShape(clipPath, isQArmRendered);\n\n    var opacity = '0';\n    var fill = '';\n    var isFullyBanded = this.isFullyBanded();\n    if ('ancestors' in this._ideo.config && !('rangeSet' in this._ideo.config)) {\n      // E.g. diploid human genome (with translucent overlay)\n      fill = self._color.getArmColor(chrSetNumber, chrNumber, 0);\n      if (isFullyBanded) {\n        opacity = '0.5';\n      }\n    } else if (isFullyBanded) {\n      // E.g. mouse reference genome\n      opacity = null;\n      fill = 'transparent';\n    } else if (!('ancestors' in this._ideo.config)) {\n      // E.g. chimpanzee assembly Pan_tro 3.0\n      opacity = '1';\n    }\n\n    // Render chromosome border\n    container.append('g')\n          .attr('class', 'chromosome-border')\n          .selectAll('path')\n          .data(clipPath)\n          .enter()\n          .append('path')\n          .attr('fill', fill)\n          .style('fill-opacity', opacity)\n          .attr('stroke', function(d, i) {\n            return self._color.getBorderColor(chrSetNumber, chrNumber, i);\n          })\n          .attr('stroke-width', function(d) {\n            return ('strokeWidth' in d ? d.strokeWidth : 1);\n          })\n          .attr('d', function(d) {\n            return d.path;\n          }).attr('class', function(d) {\n            return d.class;\n          });\n\n    return clipPath;\n  };\n\n  _renderRangeSet(container, chrSetNumber, chrNumber) {\n    if (!('rangeSet' in this._config)) {\n      return;\n    }\n\n    var rangeSet = this._config.rangeSet.filter(function(range) {\n      return range.chr - 1 === chrSetNumber;\n    }).map(function(range) {\n      return new Range(range);\n    });\n\n    var rangesContainer = container.append('g')\n          .attr('class', 'range-set');\n\n    var self = this;\n    var ideo = self._ideo;\n    var bandsXOffset = ideo._bandsXOffset;\n\n    rangesContainer.selectAll('rect.range')\n          .data(rangeSet)\n          .enter()\n          .append('rect')\n          .attr('class', 'range')\n          .attr('x', function(range) {\n            var startPx = ideo.convertBpToPx(self._model, range.getStart());\n            return startPx - bandsXOffset;\n          }).attr('y', 0)\n          .attr('width', function(range) {\n            var lengthPx = ideo.convertBpToPx(self._model, range.getLength());\n            return lengthPx - bandsXOffset;\n          }).attr('height', this._config.chrWidth)\n          .style('fill', function(range) {\n            return range.getColor(chrNumber);\n          });\n  };\n\n  // Get chromosome's shape main values\n  _getShapeData() {\n      // First q band from bands sequence\n    var firstQBand;\n    for (var i = 0; i < this._model.bands.length; i++) {\n      if (this._model.bands[i].name[0] === 'q') {\n        firstQBand = this._model.bands[i];\n        break;\n      }\n    }\n\n    // Chromosome's right position\n    var lastBand = this._model.bands.length - 1;\n    var rightTerminalPosition = this._model.bands[lastBand].px.stop;\n\n      // Properties description:\n      // x1 - left terminal start position\n      // x2 - centromere position\n      // x3 - right terminal end position\n      // w - chromosome width\n      // b - bump size\n    return {\n      x1: 0,\n      x2: firstQBand ? firstQBand.px.start : rightTerminalPosition,\n      x3: rightTerminalPosition,\n      w: this._config.chrWidth,\n      b: this._config.chrWidth / this._bumpCoefficient\n    };\n  };\n\n  _getPArmShape() {\n    var d = this._getShapeData(),\n      x = d.x2 - d.b;\n\n    if (this.isFullyBanded() || 'ancestors' in this._ideo.config) {\n      // Encountered when chromosome has any of:\n      //  - One placeholder \"band\", e.g. pig genome GCF_000003025.5\n      //  - Many (> 2) bands, e.g. human reference genome\n      //  - Ancestor colors in ploidy configuration, as in ploidy_basic.html\n      return {\n        class: '',\n        path:\n          'M' + d.b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x2 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + d.b + ',' + d.w + ' ' +\n          'Q-' + d.b + ',' + (d.w / 2) + ',' + d.b + ',0'\n      };\n    } else {\n      // e.g. chimpanzee assembly Pan_tro 3.0\n      return [{\n        class: '',\n        path:\n          'M' + d.b + ',0 ' +\n          'L' + (x - 2) + ',0 ' +\n          'L' + (x - 2) + ',' + d.w + ' ' +\n          'L' + d.b + ',' + d.w + ' ' +\n          'Q-' + d.b + ',' + (d.w / 2) + ',' + d.b + ',0'\n      }, {\n        class: 'acen',\n        path:\n          'M' + x + ',0 ' +\n          'Q' + (d.x2 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x + ',' + d.w + ' ' +\n          'L' + (x - 2) + ',' + d.w + ' ' +\n          'L' + (x - 2) + ',0'\n      }];\n    }\n  };\n\n  _getQArmShape() {\n    var d = this._getShapeData(),\n      x = d.x3 - d.b,\n      x2b = d.x2 + d.b;\n\n    if (this.isFullyBanded() || 'ancestors' in this._ideo.config) {\n      return {\n        class: '',\n        path:\n          'M' + x2b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w + ' ' +\n          'Q' + (d.x2 - d.b) + ',' + (d.w / 2) + ',' + x2b + ',0'\n      };\n    } else {\n      // e.g. chimpanzee assembly Pan_tro 3.0\n      return [{\n        path:\n          'M' + x2b + ',0 ' +\n          'L' + x + ',0 ' +\n          'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w + ' ' +\n          'L' + x2b + ',0'\n      }, {\n        class: 'acen',\n        path:\n          'M' + x2b + ',0' +\n          'Q' + (d.x2 - d.b) + ',' + (d.w / 2) + ',' + x2b + ',' + d.w + ' ' +\n          'L' + x2b + ',' + d.w +\n          'L' + (x2b + 2) + ',' + d.w +\n          'L' + (x2b + 2) + ',0'\n      }];\n    }\n  };\n\n  isFullyBanded() {\n    return (\n      this._model.bands &&\n      (this._model.bands.length !== 2 || this._model.bands[0].name[0] === 'q')\n    );\n  };\n\n  // Render arm bands\n  _renderBands(container, chrSetNumber, chrNumber, bands, arm) {\n    var self = this;\n    var armNumber = arm === 'p' ? 0 : 1;\n    var fill = '';\n    if ('ancestors' in this._ideo.config && !(this.isFullyBanded())) {\n      fill = self._color.getArmColor(chrSetNumber, chrNumber, armNumber);\n    }\n\n    container.selectAll(\"path.band.\" + arm)\n      .data(bands)\n      .enter()\n      .append(\"path\")\n      .attr(\"id\", function(d) {\n        return self._model.id + \"-\" + d.name.replace(\".\", \"-\");\n      })\n      .attr(\"class\", function(d) {\n        return 'band ' + arm + '-band ' + d.stain;\n      })\n      .attr(\"d\", function(d) {\n        var start = self._ideo.round(d.px.start);\n        var length = self._ideo.round(d.px.width);\n\n        var x = start + length;\n\n        return \"M \" + start + \", 0\" +\n              \"l \" + length + \" 0 \" +\n              \"l 0 \" + self._config.chrWidth + \" \" +\n              \"l -\" + length + \" 0 z\";\n      })\n      .style('fill', fill);\n  };\n\n  // Render chromosome's p arm.\n  // Returns boolean which indicates is any bands was rendered\n  _renderPArm(container, chrSetNumber, chrNumber) {\n    var bands = this._model.bands.filter(function(band) {\n      return band.name[0] === 'p';\n    });\n\n    this._renderBands(container, chrSetNumber, chrNumber, bands, 'p');\n\n    return Boolean(bands.length);\n  };\n\n  // Render chromosome's q arm.\n  // Returns boolean which indicates is any bands was rendered\n  _renderQArm(container, chrSetNumber, chrNumber) {\n    var bands = this._model.bands.filter(function(band) {\n      return band.name[0] === 'q';\n    });\n\n    this._renderBands(container, chrSetNumber, chrNumber, bands, 'q');\n\n    return Boolean(bands.length);\n  };\n}\n\n\n\nexport class MetacentricChromosome extends Chromosome {\n\n  constructor(model, config, ideo) {\n    super(model, config, ideo);\n    this._class = 'MetacentricChromosome';\n  }\n}\n\n\n\nexport class TelocentricChromosome extends Chromosome {\n\n  constructor(model, config, ideo) {\n    super(model, config, ideo);\n    this._class = 'TelocentricChromosome';\n    this._pArmOffset = 3;\n  }\n\n  _addPArmShape(clipPath) {\n    return clipPath.concat(this._getPArmShape());\n  };\n\n  _getPArmShape() {\n    var d = this._getShapeData();\n    d.o = this._pArmOffset;\n\n    return [{\n      class: 'acen',\n      path: 'M' + (d.x2 + 2) + ',1' +\n      'L' + (d.x2 + d.o + 3.25) + ',1 ' +\n      'L' + (d.x2 + d.o + 3.25) + ',' + (d.w - 1) + ' ' +\n      'L' + (d.x2 + 2) + ',' + (d.w - 1)\n    }, {\n      class: 'gpos66',\n      path: 'M' + (d.x2 - d.o + 5) + ',0' +\n      'L' + (d.x2 - d.o + 3) + ',0 ' +\n      'L' + (d.x2 - d.o + 3) + ',' + d.w + ' ' +\n      'L' + (d.x2 - d.o + 5) + ',' + d.w,\n      strokeWidth: 0.5\n    }];\n  };\n\n  _getQArmShape() {\n    var d = this._getShapeData(),\n      x = d.x3 - d.b,\n      o = this._pArmOffset + 3;\n\n    return {\n      class: '',\n      path:\n      'M' + (d.x2 + o) + ',0 ' +\n      'L' + x + ',0 ' +\n      'Q' + (d.x3 + d.b) + ',' + (d.w / 2) + ',' + x + ',' + d.w + ' ' +\n      'L' + (d.x2 + o) + ',' + d.w\n    };\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZDMvYnVpbGQvZDMuanMiLCJzcmMvanMvY29sb3IuanMiLCJzcmMvanMvY29yZS5qcyIsInNyYy9qcy9pbmRleC5qcyIsInNyYy9qcy9sYXlvdXRzL2xheW91dC5qcyIsInNyYy9qcy9tb2RlbC1hZGFwdGVyLmpzIiwic3JjL2pzL3Bsb2lkeS5qcyIsInNyYy9qcy92aWV3cy9jaHJvbW9zb21lLXV0aWwuanMiLCJzcmMvanMvdmlld3MvY2hyb21vc29tZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtDQ0NDLFNBQVUsRUFBUSxHQUNFLGdCQUFaLFVBQTBDLG1CQUFYLFFBQXlCLEVBQVEsU0FDckQsa0JBQVgsU0FBeUIsT0FBTyxJQUFNLFFBQVEsV0FBWSxHQUNoRSxFQUFTLEVBQU8sR0FBSyxFQUFPLFNBQzdCLEtBQU0sU0FBVSxHQUFXLFlBSTNCLFNBQVMsR0FBVSxFQUFHLEdBQ3BCLE1BQU8sR0FBSSxHQUFLLEVBQUksRUFBSSxFQUFJLEVBQUksR0FBSyxFQUFJLEVBQUksSUFHL0MsUUFBUyxHQUFTLEdBRWhCLE1BRHVCLEtBQW5CLEVBQVEsU0FBYyxFQUFVLEVBQW9CLEtBRXRELEtBQU0sU0FBUyxFQUFHLEVBQUcsRUFBSSxHQUd2QixJQUZVLE1BQU4sSUFBWSxFQUFLLEdBQ1gsTUFBTixJQUFZLEVBQUssRUFBRSxRQUNoQixFQUFLLEdBQUksQ0FDZCxHQUFJLEdBQU0sRUFBSyxJQUFPLENBQ2xCLEdBQVEsRUFBRSxHQUFNLEdBQUssRUFBRyxFQUFLLEVBQU0sRUFDbEMsRUFBSyxFQUVaLE1BQU8sSUFFVCxNQUFPLFNBQVMsRUFBRyxFQUFHLEVBQUksR0FHeEIsSUFGVSxNQUFOLElBQVksRUFBSyxHQUNYLE1BQU4sSUFBWSxFQUFLLEVBQUUsUUFDaEIsRUFBSyxHQUFJLENBQ2QsR0FBSSxHQUFNLEVBQUssSUFBTyxDQUNsQixHQUFRLEVBQUUs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SEEsRUFBSyxFQUFNLEdBQUssRUFBTyxHQUN2QixFQUFLLEVBQU0sR0FBSyxFQUFPLEdBRWYsR0FDTixJQUFLLElBQ0wsSUFBSyxJQUNDLElBQU8sRUFBSyxLQUFLLElBQUksRUFBSSxFQUFJLEtBQUssSUFBSSxFQUFJLEVBQUksSUFBTSxFQUFLLEVBQUssRUFBSSxFQUFLLEVBQUssR0FDNUUsSUFBTyxFQUFLLEtBQUssSUFBSSxFQUFJLEVBQUksS0FBSyxJQUFJLEVBQUksRUFBSSxJQUFNLEVBQUssRUFBSyxFQUFJLEVBQUssRUFBSyxFQUNoRixNQUVGLEtBQUssSUFDQyxFQUFRLEdBQUcsRUFBSyxLQUFLLElBQUksRUFBSSxFQUFJLEtBQUssSUFBSSxFQUFJLEVBQUksSUFBTSxFQUFLLEVBQUssRUFBSSxFQUFLLEdBQ3RFLEVBQVEsSUFBRyxFQUFLLEtBQUssSUFBSSxFQUFJLEVBQUksS0FBSyxJQUFJLEVBQUksRUFBSSxJQUFNLEVBQUssRUFBSSxFQUFLLEVBQUssR0FDaEYsRUFBUSxHQUFHLEVBQUssS0FBSyxJQUFJLEVBQUksRUFBSSxLQUFLLElBQUksRUFBSSxFQUFJLElBQU0sRUFBSyxFQUFLLEVBQUksRUFBSyxHQUN0RSxFQUFRLElBQUcsRUFBSyxLQUFLLElBQUksRUFBSSxFQUFJLEtBQUssSUFBSSxFQUFJLEVBQUksSUFBTSxFQUFLLEVBQUksRUFBSyxFQUFLLEVBQ3BGLE1BRUYsS0FBSyxJQUNDLElBQU8sRUFBSyxLQUFLLElBQUksRUFBRyxLQUFLLElBQUksRUFBRyxFQUFLLEVBQUssSUFBUyxFQUFLLEtBQUssSUFBSSxFQUFHLEtBQUssSUFBSSxFQUFHLEVBQUssRUFBSyxLQUM5RixJQUFPLEVBQUssS0FBSyxJQUFJLEVBQUcsS0FBSyxJQUFJLEVBQUcsRUFBSyxFQUFLLElBQVMsRUFBSyxLQUFLLElBQUksRUFBRyxLQUFLLElBQUksRUFBRyxFQUFLLEVBQUssS0FLbEcsRUFBSyxJQUNQLElBQVUsRUFDVixFQUFJLEVBQUksRUFBSyxFQUFJLEVBQUssRUFDdEIsRUFBSSxFQUFJLEVB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QSxPQUFBLGVBQUEsSUFBQSxLQUFBLEtBQ3pCLEVBQU8sRUFBUSxHQURVLE9BRS9CLEdBQUssT0FBUyx3QkFDZCxFQUFLLFlBQWMsRUFIWSw0RUFNbkIsR0FDWixNQUFPLEdBQVMsT0FBTyxLQUFLLHlEQUk1QixHQUFJLEdBQUksS0FBSyxlQUdiLE9BRkEsR0FBRSxFQUFJLEtBQUssY0FHVCxNQUFPLE9BQ1AsS0FBTSxLQUFPLEVBQUUsR0FBSyxHQUFLLE9BQ2xCLEVBQUUsR0FBSyxFQUFFLEVBQUksTUFBUSxRQUNyQixFQUFFLEdBQUssRUFBRSxFQUFJLE1BQVEsS0FBTyxFQUFFLEVBQUksR0FBSyxNQUN2QyxFQUFFLEdBQUssR0FBSyxLQUFPLEVBQUUsRUFBSSxLQUVoQyxNQUFPLFNBQ1AsS0FBTSxLQUFPLEVBQUUsR0FBSyxFQUFFLEVBQUksR0FBSyxPQUN4QixFQUFFLEdBQUssRUFBRSxFQUFJLEdBQUssUUFDbEIsRUFBRSxHQUFLLEVBQUUsRUFBSSxHQUFLLElBQU0sRUFBRSxFQUFJLE1BQzlCLEVBQUUsR0FBSyxFQUFFLEVBQUksR0FBSyxJQUFNLEVBQUUsRUFDakMsWUFBYSw2Q0FLZixHQUFJLEdBQUksS0FBSyxnQkFDWCxFQUFJLEVBQUUsR0FBSyxFQUFFLEVBQ2IsRUFBSSxLQUFLLFlBQWMsQ0FFekIsUUFDRSxNQUFPLEdBQ1AsS0FDQSxLQUFPLEVBQUUsR0FBSyxHQUFLLE9BQ2IsRUFBSSxRQUNILEVBQUUsR0FBSyxFQUFFLEdBQUssSUFBTyxFQUFFLEVBQUksRUFBSyxJQUFNLEVBQUksSUFBTSxFQUFFLEVBQUksTUFDdEQsRUFBRSxHQUFLLEdBQUssSUFBTSxFQUFFLFVBM0NVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIGh0dHBzOi8vZDNqcy5vcmcgVmVyc2lvbiA0LjEuMS4gQ29weXJpZ2h0IDIwMTYgTWlrZSBCb3N0b2NrLlxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSkpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHZlcnNpb24gPSBcIjQuMS4xXCI7XG5cbiAgZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBiaXNlY3Rvcihjb21wYXJlKSB7XG4gICAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG87XG4gICAgICB9LFxuICAgICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG4gIHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbiAgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcblxuICBmdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBudW1iZXIoeCkge1xuICAgIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG4gIH1cblxuICBmdW5jdGlvbiB2YXJpYW5jZShhcnJheSwgZikge1xuICAgIHZhciBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBtID0gMCxcbiAgICAgICAgYSxcbiAgICAgICAgZCxcbiAgICAgICAgcyA9IDAsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgaiA9IDA7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIWlzTmFOKGEgPSBudW1iZXIoYXJyYXlbaV0pKSkge1xuICAgICAgICAgIGQgPSBhIC0gbTtcbiAgICAgICAgICBtICs9IGQgLyArK2o7XG4gICAgICAgICAgcyArPSBkICogKGEgLSBtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKCFpc05hTihhID0gbnVtYmVyKGYoYXJyYXlbaV0sIGksIGFycmF5KSkpKSB7XG4gICAgICAgICAgZCA9IGEgLSBtO1xuICAgICAgICAgIG0gKz0gZCAvICsrajtcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGogPiAxKSByZXR1cm4gcyAvIChqIC0gMSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXZpYXRpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgdiA9IHZhcmlhbmNlKGFycmF5LCBmKTtcbiAgICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbnQoYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBiLFxuICAgICAgICBjO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYyA9IGI7IGJyZWFrOyB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGEgPiBiKSBhID0gYjtcbiAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYiA+PSBiKSB7IGEgPSBjID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGEgPiBiKSBhID0gYjtcbiAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW2EsIGNdO1xuICB9XG5cbiAgdmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG4gIHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuICB2YXIgbWFwID0gYXJyYXkubWFwO1xuXG4gIGZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfVxuXG4gIHZhciBlMTAgPSBNYXRoLnNxcnQoNTApO1xuICB2YXIgZTUgPSBNYXRoLnNxcnQoMTApO1xuICB2YXIgZTIgPSBNYXRoLnNxcnQoMik7XG4gIGZ1bmN0aW9uIHRpY2tzKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICAgIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICByZXR1cm4gcmFuZ2UoXG4gICAgICBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKSAqIHN0ZXAsXG4gICAgICBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKSAqIHN0ZXAgKyBzdGVwIC8gMiwgLy8gaW5jbHVzaXZlXG4gICAgICBzdGVwXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICAgIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG4gIH1cblxuICBmdW5jdGlvbiBzdHVyZ2VzKHZhbHVlcykge1xuICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gaGlzdG9ncmFtKCkge1xuICAgIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgICBkb21haW4gPSBleHRlbnQsXG4gICAgICAgIHRocmVzaG9sZCA9IHN0dXJnZXM7XG5cbiAgICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHgsXG4gICAgICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgeHogPSBkb21haW4odmFsdWVzKSxcbiAgICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICAgIHgxID0geHpbMV0sXG4gICAgICAgICAgdHogPSB0aHJlc2hvbGQodmFsdWVzLCB4MCwgeDEpO1xuXG4gICAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkgdHogPSB0aWNrcyh4MCwgeDEsIHR6KTtcblxuICAgICAgLy8gUmVtb3ZlIGFueSB0aHJlc2hvbGRzIG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgICAgd2hpbGUgKHR6WzBdIDw9IHgwKSB0ei5zaGlmdCgpLCAtLW07XG4gICAgICB3aGlsZSAodHpbbSAtIDFdID49IHgxKSB0ei5wb3AoKSwgLS1tO1xuXG4gICAgICB2YXIgYmlucyA9IG5ldyBBcnJheShtICsgMSksXG4gICAgICAgICAgYmluO1xuXG4gICAgICAvLyBJbml0aWFsaXplIGJpbnMuXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICAgIGJpbi54MCA9IGkgPiAwID8gdHpbaSAtIDFdIDogeDA7XG4gICAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcbiAgICAgIH1cblxuICAgICAgLy8gQXNzaWduIGRhdGEgdG8gYmlucyBieSB2YWx1ZSwgaWdub3JpbmcgYW55IG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgICAgaWYgKHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICAgIGJpbnNbYmlzZWN0UmlnaHQodHosIHgsIDAsIG0pXS5wdXNoKGRhdGFbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiaW5zO1xuICAgIH1cblxuICAgIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHZhbHVlO1xuICAgIH07XG5cbiAgICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbX1swXSwgX1sxXV0pLCBoaXN0b2dyYW0pIDogZG9tYWluO1xuICAgIH07XG5cbiAgICBoaXN0b2dyYW0udGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB0aHJlc2hvbGQ7XG4gICAgfTtcblxuICAgIHJldHVybiBoaXN0b2dyYW07XG4gIH1cblxuICBmdW5jdGlvbiB0aHJlc2hvbGQoYXJyYXksIHAsIGYpIHtcbiAgICBpZiAoZiA9PSBudWxsKSBmID0gbnVtYmVyO1xuICAgIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gICAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArZihhcnJheVswXSwgMCwgYXJyYXkpO1xuICAgIGlmIChwID49IDEpIHJldHVybiArZihhcnJheVtuIC0gMV0sIG4gLSAxLCBhcnJheSk7XG4gICAgdmFyIG4sXG4gICAgICAgIGggPSAobiAtIDEpICogcCxcbiAgICAgICAgaSA9IE1hdGguZmxvb3IoaCksXG4gICAgICAgIGEgPSArZihhcnJheVtpXSwgaSwgYXJyYXkpLFxuICAgICAgICBiID0gK2YoYXJyYXlbaSArIDFdLCBpICsgMSwgYXJyYXkpO1xuICAgIHJldHVybiBhICsgKGIgLSBhKSAqIChoIC0gaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmcmVlZG1hbkRpYWNvbmlzKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICB2YWx1ZXMgPSBtYXAuY2FsbCh2YWx1ZXMsIG51bWJlcikuc29ydChhc2NlbmRpbmcpO1xuICAgIHJldHVybiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoMiAqICh0aHJlc2hvbGQodmFsdWVzLCAwLjc1KSAtIHRocmVzaG9sZCh2YWx1ZXMsIDAuMjUpKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjb3R0KHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDMuNSAqIGRldmlhdGlvbih2YWx1ZXMpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF4KGFycmF5LCBmKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgYSxcbiAgICAgICAgYjtcblxuICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHsgYSA9IGI7IGJyZWFrOyB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+IGEpIGEgPSBiO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYoYXJyYXlbaV0sIGksIGFycmF5KSkgIT0gbnVsbCAmJiBiID49IGIpIHsgYSA9IGI7IGJyZWFrOyB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZihhcnJheVtpXSwgaSwgYXJyYXkpKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lYW4oYXJyYXksIGYpIHtcbiAgICB2YXIgcyA9IDAsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgaiA9IG47XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpc05hTihhID0gbnVtYmVyKGFycmF5W2ldKSkpIHMgKz0gYTsgZWxzZSAtLWo7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpc05hTihhID0gbnVtYmVyKGYoYXJyYXlbaV0sIGksIGFycmF5KSkpKSBzICs9IGE7IGVsc2UgLS1qO1xuICAgIH1cblxuICAgIGlmIChqKSByZXR1cm4gcyAvIGo7XG4gIH1cblxuICBmdW5jdGlvbiBtZWRpYW4oYXJyYXksIGYpIHtcbiAgICB2YXIgbnVtYmVycyA9IFtdLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBpID0gLTE7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpc05hTihhID0gbnVtYmVyKGFycmF5W2ldKSkpIG51bWJlcnMucHVzaChhKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWlzTmFOKGEgPSBudW1iZXIoZihhcnJheVtpXSwgaSwgYXJyYXkpKSkpIG51bWJlcnMucHVzaChhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhyZXNob2xkKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UoYXJyYXlzKSB7XG4gICAgdmFyIG4gPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICBtLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIGogPSAwLFxuICAgICAgICBtZXJnZWQsXG4gICAgICAgIGFycmF5O1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgIGFycmF5ID0gYXJyYXlzW25dO1xuICAgICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlICgtLW0gPj0gMCkge1xuICAgICAgICBtZXJnZWRbLS1qXSA9IGFycmF5W21dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBtaW4oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBiO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBhID4gYikgYSA9IGI7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZihhcnJheVtpXSwgaSwgYXJyYXkpKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFpcnMoYXJyYXkpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwID0gYXJyYXlbMF0sIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICAgIHdoaWxlIChpIDwgbikgcGFpcnNbaV0gPSBbcCwgcCA9IGFycmF5WysraV1dO1xuICAgIHJldHVybiBwYWlycztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcm11dGUoYXJyYXksIGluZGV4ZXMpIHtcbiAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuICAgIHJldHVybiBwZXJtdXRlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYW4oYXJyYXksIGNvbXBhcmUpIHtcbiAgICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbixcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIHhpLFxuICAgICAgICB4aiA9IGFycmF5W2pdO1xuXG4gICAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb21wYXJlKHhpID0gYXJyYXlbaV0sIHhqKSA8IDAgfHwgY29tcGFyZSh4aiwgeGopICE9PSAwKSB4aiA9IHhpLCBqID0gaTtcblxuICAgIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSwgaTAsIGkxKSB7XG4gICAgdmFyIG0gPSAoaTEgPT0gbnVsbCA/IGFycmF5Lmxlbmd0aCA6IGkxKSAtIChpMCA9IGkwID09IG51bGwgPyAwIDogK2kwKSxcbiAgICAgICAgdCxcbiAgICAgICAgaTtcblxuICAgIHdoaWxlIChtKSB7XG4gICAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgICB0ID0gYXJyYXlbbSArIGkwXTtcbiAgICAgIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdO1xuICAgICAgYXJyYXlbaSArIGkwXSA9IHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gc3VtKGFycmF5LCBmKSB7XG4gICAgdmFyIHMgPSAwLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBpID0gLTE7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGEgPSArYXJyYXlbaV0pIHMgKz0gYTsgLy8gTm90ZTogemVybyBhbmQgbnVsbCBhcmUgZXF1aXZhbGVudC5cbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoYSA9ICtmKGFycmF5W2ldLCBpLCBhcnJheSkpIHMgKz0gYTtcbiAgICB9XG5cbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zcG9zZShtYXRyaXgpIHtcbiAgICBpZiAoIShuID0gbWF0cml4Lmxlbmd0aCkpIHJldHVybiBbXTtcbiAgICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XG4gICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjspIHtcbiAgICAgICAgcm93W2pdID0gbWF0cml4W2pdW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNwb3NlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoKGQpIHtcbiAgICByZXR1cm4gZC5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiB6aXAoKSB7XG4gICAgcmV0dXJuIHRyYW5zcG9zZShhcmd1bWVudHMpO1xuICB9XG5cbiAgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG4gIGZ1bmN0aW9uIE1hcCgpIHt9XG5cbiAgTWFwLnByb3RvdHlwZSA9IG1hcCQxLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogTWFwLFxuICAgIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXlzID0gW107XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgICByZXR1cm4gZW50cmllcztcbiAgICB9LFxuICAgIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNpemUgPSAwO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICAgIHJldHVybiBzaXplO1xuICAgIH0sXG4gICAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFwJDEob2JqZWN0LCBmKSB7XG4gICAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICAgIG87XG5cbiAgICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICAgIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBuZXN0KCkge1xuICAgIHZhciBrZXlzID0gW10sXG4gICAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICAgIHJvbGx1cCxcbiAgICAgICAgbmVzdDtcblxuICAgIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHJvbGx1cCAhPSBudWxsXG4gICAgICAgICAgPyByb2xsdXAoYXJyYXkpIDogKHNvcnRWYWx1ZXMgIT0gbnVsbFxuICAgICAgICAgID8gYXJyYXkuc29ydChzb3J0VmFsdWVzKVxuICAgICAgICAgIDogYXJyYXkpO1xuXG4gICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCQxKCksXG4gICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5lc3QgPSB7XG4gICAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICAgIHJldHVybiBtYXAkMSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBTZXQoKSB7fVxuXG4gIHZhciBwcm90byA9IG1hcCQxLnByb3RvdHlwZTtcblxuICBTZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogU2V0LFxuICAgIGhhczogcHJvdG8uaGFzLFxuICAgIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gICAgdmFsdWVzOiBwcm90by5rZXlzLFxuICAgIHNpemU6IHByb3RvLnNpemUsXG4gICAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICAgIGVhY2g6IHByb3RvLmVhY2hcbiAgfTtcblxuICBmdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gICAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBrZXlzKG1hcCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZXMobWFwKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXApIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIGVudHJpZXMucHVzaCh7a2V5OiBrZXksIHZhbHVlOiBtYXBba2V5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5pZm9ybShtaW4sIG1heCkge1xuICAgIG1pbiA9IG1pbiA9PSBudWxsID8gMCA6ICttaW47XG4gICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xuICAgIGVsc2UgbWF4IC09IG1pbjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIG1heCArIG1pbjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsKG11LCBzaWdtYSkge1xuICAgIHZhciB4LCByO1xuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XG4gICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeTtcblxuICAgICAgLy8gSWYgYXZhaWxhYmxlLCB1c2UgdGhlIHNlY29uZCBwcmV2aW91c2x5LWdlbmVyYXRlZCB1bmlmb3JtIHJhbmRvbS5cbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgLy8gT3RoZXJ3aXNlLCBnZW5lcmF0ZSBhIG5ldyB4IGFuZCB5LlxuICAgICAgZWxzZSBkbyB7XG4gICAgICAgIHggPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsb2dOb3JtYWwoKSB7XG4gICAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb21Ob3JtYWwoKSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlyd2luSGFsbChuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgc3VtID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHN1bSArPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gTWF0aC5yYW5kb20oKSkgLyBsYW1iZGE7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhcih0KSB7XG4gICAgcmV0dXJuICt0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgICByZXR1cm4gdCAqIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgICByZXR1cm4gdCAqICgyIC0gdCk7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0IDogLS10ICogKDIgLSB0KSArIDEpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhc2VDdWJpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xuICB9XG5cbiAgdmFyIGV4cG9uZW50ID0gMztcblxuICB2YXIgcG9seUluID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gICAgZSA9ICtlO1xuXG4gICAgZnVuY3Rpb24gcG9seUluKHQpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgICB9XG5cbiAgICBwb2x5SW4uZXhwb25lbnQgPSBjdXN0b207XG5cbiAgICByZXR1cm4gcG9seUluO1xuICB9KShleHBvbmVudCk7XG5cbiAgdmFyIHBvbHlPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgICBlID0gK2U7XG5cbiAgICBmdW5jdGlvbiBwb2x5T3V0KHQpIHtcbiAgICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIGUpO1xuICAgIH1cblxuICAgIHBvbHlPdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgICByZXR1cm4gcG9seU91dDtcbiAgfSkoZXhwb25lbnQpO1xuXG4gIHZhciBwb2x5SW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgICBlID0gK2U7XG5cbiAgICBmdW5jdGlvbiBwb2x5SW5PdXQodCkge1xuICAgICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3codCwgZSkgOiAyIC0gTWF0aC5wb3coMiAtIHQsIGUpKSAvIDI7XG4gICAgfVxuXG4gICAgcG9seUluT3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gICAgcmV0dXJuIHBvbHlJbk91dDtcbiAgfSkoZXhwb25lbnQpO1xuXG4gIHZhciBwaSA9IE1hdGguUEk7XG4gIHZhciBoYWxmUGkgPSBwaSAvIDI7XG4gIGZ1bmN0aW9uIHNpbkluKHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmUGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gICAgcmV0dXJuICgxIC0gTWF0aC5jb3MocGkgKiB0KSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwSW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBPdXQodCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMiwgLTEwICogdCk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApIDogMiAtIE1hdGgucG93KDIsIDEwIC0gMTAgKiB0KSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlSW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGVPdXQodCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KSA6IE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpIC8gMjtcbiAgfVxuXG4gIHZhciBiMSA9IDQgLyAxMTtcbiAgdmFyIGIyID0gNiAvIDExO1xuICB2YXIgYjMgPSA4IC8gMTE7XG4gIHZhciBiNCA9IDMgLyA0O1xuICB2YXIgYjUgPSA5IC8gMTE7XG4gIHZhciBiNiA9IDEwIC8gMTE7XG4gIHZhciBiNyA9IDE1IC8gMTY7XG4gIHZhciBiOCA9IDIxIC8gMjI7XG4gIHZhciBiOSA9IDYzIC8gNjQ7XG4gIHZhciBiMCA9IDEgLyBiMSAvIGIxO1xuICBmdW5jdGlvbiBib3VuY2VJbih0KSB7XG4gICAgcmV0dXJuIDEgLSBib3VuY2VPdXQoMSAtIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmNlT3V0KHQpIHtcbiAgICByZXR1cm4gKHQgPSArdCkgPCBiMSA/IGIwICogdCAqIHQgOiB0IDwgYjMgPyBiMCAqICh0IC09IGIyKSAqIHQgKyBiNCA6IHQgPCBiNiA/IGIwICogKHQgLT0gYjUpICogdCArIGI3IDogYjAgKiAodCAtPSBiOCkgKiB0ICsgYjk7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gMSAtIGJvdW5jZU91dCgxIC0gdCkgOiBib3VuY2VPdXQodCAtIDEpICsgMSkgLyAyO1xuICB9XG5cbiAgdmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG5cbiAgdmFyIGJhY2tJbiA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICAgIHMgPSArcztcblxuICAgIGZ1bmN0aW9uIGJhY2tJbih0KSB7XG4gICAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgICB9XG5cbiAgICBiYWNrSW4ub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gICAgcmV0dXJuIGJhY2tJbjtcbiAgfSkob3ZlcnNob290KTtcblxuICB2YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICAgIHMgPSArcztcblxuICAgIGZ1bmN0aW9uIGJhY2tPdXQodCkge1xuICAgICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gICAgfVxuXG4gICAgYmFja091dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgICByZXR1cm4gYmFja091dDtcbiAgfSkob3ZlcnNob290KTtcblxuICB2YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gICAgcyA9ICtzO1xuXG4gICAgZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcbiAgICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICAgIH1cblxuICAgIGJhY2tJbk91dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgICByZXR1cm4gYmFja0luT3V0O1xuICB9KShvdmVyc2hvb3QpO1xuXG4gIHZhciB0YXUgPSAyICogTWF0aC5QSTtcbiAgdmFyIGFtcGxpdHVkZSA9IDE7XG4gIHZhciBwZXJpb2QgPSAwLjM7XG4gIHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICAgIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgICB9XG5cbiAgICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICAgIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgICByZXR1cm4gZWxhc3RpY0luO1xuICB9KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbiAgdmFyIGVsYXN0aWNPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICAgIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgICAgcmV0dXJuIDEgLSBhICogTWF0aC5wb3coMiwgLTEwICogKHQgPSArdCkpICogTWF0aC5zaW4oKHQgKyBzKSAvIHApO1xuICAgIH1cblxuICAgIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICAgIGVsYXN0aWNPdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gICAgcmV0dXJuIGVsYXN0aWNPdXQ7XG4gIH0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuICB2YXIgZWxhc3RpY0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gICAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgICBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXG4gICAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICAgIDogMiAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKChzICsgdCkgLyBwKSkgLyAyO1xuICAgIH1cblxuICAgIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gICAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICAgIHJldHVybiBlbGFzdGljSW5PdXQ7XG4gIH0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuICBmdW5jdGlvbiBhcmVhKHBvbHlnb24pIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgYXJlYSA9IDA7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gcG9seWdvbltpXTtcbiAgICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJlYSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZChwb2x5Z29uKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgICB4ID0gMCxcbiAgICAgICAgeSA9IDAsXG4gICAgICAgIGEsXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgYyxcbiAgICAgICAgayA9IDA7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gcG9seWdvbltpXTtcbiAgICAgIGsgKz0gYyA9IGFbMF0gKiBiWzFdIC0gYlswXSAqIGFbMV07XG4gICAgICB4ICs9IChhWzBdICsgYlswXSkgKiBjO1xuICAgICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgICB9XG5cbiAgICByZXR1cm4gayAqPSAzLCBbeCAvIGssIHkgLyBrXTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIDJEIGNyb3NzIHByb2R1Y3Qgb2YgQUIgYW5kIEFDIHZlY3RvcnMsIGkuZS4sIHRoZSB6LWNvbXBvbmVudCBvZlxuICAvLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuICAvLyByaWdodCwgK3kgaXMgdXApLiBSZXR1cm5zIGEgcG9zaXRpdmUgdmFsdWUgaWYgQUJDIGlzIGNvdW50ZXItY2xvY2t3aXNlLFxuICAvLyBuZWdhdGl2ZSBpZiBjbG9ja3dpc2UsIGFuZCB6ZXJvIGlmIHRoZSBwb2ludHMgYXJlIGNvbGxpbmVhci5cbiAgZnVuY3Rpb24gY3Jvc3MoYSwgYiwgYykge1xuICAgIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSAtIChiWzFdIC0gYVsxXSkgKiAoY1swXSAtIGFbMF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbGV4aWNvZ3JhcGhpY09yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG4gIH1cblxuICAvLyBDb21wdXRlcyB0aGUgdXBwZXIgY29udmV4IGh1bGwgcGVyIHRoZSBtb25vdG9uZSBjaGFpbiBhbGdvcml0aG0uXG4gIC8vIEFzc3VtZXMgcG9pbnRzLmxlbmd0aCA+PSAzLCBpcyBzb3J0ZWQgYnkgeCwgdW5pcXVlIGluIHkuXG4gIC8vIFJldHVybnMgYW4gYXJyYXkgb2YgaW5kaWNlcyBpbnRvIHBvaW50cyBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuICBmdW5jdGlvbiBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhwb2ludHMpIHtcbiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICAgIGluZGV4ZXMgPSBbMCwgMV0sXG4gICAgICAgIHNpemUgPSAyO1xuXG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyArK2kpIHtcbiAgICAgIHdoaWxlIChzaXplID4gMSAmJiBjcm9zcyhwb2ludHNbaW5kZXhlc1tzaXplIC0gMl1dLCBwb2ludHNbaW5kZXhlc1tzaXplIC0gMV1dLCBwb2ludHNbaV0pIDw9IDApIC0tc2l6ZTtcbiAgICAgIGluZGV4ZXNbc2l6ZSsrXSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4ZXMuc2xpY2UoMCwgc2l6ZSk7IC8vIHJlbW92ZSBwb3BwZWQgcG9pbnRzXG4gIH1cblxuICBmdW5jdGlvbiBodWxsKHBvaW50cykge1xuICAgIGlmICgobiA9IHBvaW50cy5sZW5ndGgpIDwgMykgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgaSxcbiAgICAgICAgbixcbiAgICAgICAgc29ydGVkUG9pbnRzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xuICAgIHNvcnRlZFBvaW50cy5zb3J0KGxleGljb2dyYXBoaWNPcmRlcik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgZmxpcHBlZFBvaW50c1tpXSA9IFtzb3J0ZWRQb2ludHNbaV1bMF0sIC1zb3J0ZWRQb2ludHNbaV1bMV1dO1xuXG4gICAgdmFyIHVwcGVySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHNvcnRlZFBvaW50cyksXG4gICAgICAgIGxvd2VySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKGZsaXBwZWRQb2ludHMpO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJJbmRleGVzWzBdID09PSB1cHBlckluZGV4ZXNbMF0sXG4gICAgICAgIHNraXBSaWdodCA9IGxvd2VySW5kZXhlc1tsb3dlckluZGV4ZXMubGVuZ3RoIC0gMV0gPT09IHVwcGVySW5kZXhlc1t1cHBlckluZGV4ZXMubGVuZ3RoIC0gMV0sXG4gICAgICAgIGh1bGwgPSBbXTtcblxuICAgIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXG4gICAgLy8gVGhlbiBhZGQgbG93ZXIgaHVsbCBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuICAgIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICAgIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VySW5kZXhlcy5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbbG93ZXJJbmRleGVzW2ldXVsyXV0pO1xuXG4gICAgcmV0dXJuIGh1bGw7XG4gIH1cblxuICBmdW5jdGlvbiBjb250YWlucyhwb2x5Z29uLCBwb2ludCkge1xuICAgIHZhciBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIHAgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sXG4gICAgICAgIHgwID0gcFswXSwgeTAgPSBwWzFdLFxuICAgICAgICB4MSwgeTEsXG4gICAgICAgIGluc2lkZSA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHAgPSBwb2x5Z29uW2ldLCB4MSA9IHBbMF0sIHkxID0gcFsxXTtcbiAgICAgIGlmICgoKHkxID4geSkgIT09ICh5MCA+IHkpKSAmJiAoeCA8ICh4MCAtIHgxKSAqICh5IC0geTEpIC8gKHkwIC0geTEpICsgeDEpKSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgeDAgPSB4MSwgeTAgPSB5MTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zaWRlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoJDEocG9seWdvbikge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgICB4YSxcbiAgICAgICAgeWEsXG4gICAgICAgIHhiID0gYlswXSxcbiAgICAgICAgeWIgPSBiWzFdLFxuICAgICAgICBwZXJpbWV0ZXIgPSAwO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHhhID0geGI7XG4gICAgICB5YSA9IHliO1xuICAgICAgYiA9IHBvbHlnb25baV07XG4gICAgICB4YiA9IGJbMF07XG4gICAgICB5YiA9IGJbMV07XG4gICAgICB4YSAtPSB4YjtcbiAgICAgIHlhIC09IHliO1xuICAgICAgcGVyaW1ldGVyICs9IE1hdGguc3FydCh4YSAqIHhhICsgeWEgKiB5YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlcmltZXRlcjtcbiAgfVxuXG52YXIgICBwaSQxID0gTWF0aC5QSTtcbnZhciAgIHRhdSQxID0gMiAqIHBpJDE7XG4gIHZhciBlcHNpbG9uID0gMWUtNjtcbiAgdmFyIHRhdUVwc2lsb24gPSB0YXUkMSAtIGVwc2lsb247XG4gIGZ1bmN0aW9uIFBhdGgoKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICAgIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gICAgdGhpcy5fID0gW107XG4gIH1cblxuICBmdW5jdGlvbiBwYXRoKCkge1xuICAgIHJldHVybiBuZXcgUGF0aDtcbiAgfVxuXG4gIFBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFBhdGgsXG4gICAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLl8ucHVzaChcIk1cIiwgdGhpcy5feDAgPSB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcbiAgICB9LFxuICAgIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgICAgdGhpcy5fLnB1c2goXCJaXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLl8ucHVzaChcIkxcIiwgdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kxID0gK3kpO1xuICAgIH0sXG4gICAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4LCB5KSB7XG4gICAgICB0aGlzLl8ucHVzaChcIlFcIiwgK3gxLCBcIixcIiwgK3kxLCBcIixcIiwgdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kxID0gK3kpO1xuICAgIH0sXG4gICAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICAgIHRoaXMuXy5wdXNoKFwiQ1wiLCAreDEsIFwiLFwiLCAreTEsIFwiLFwiLCAreDIsIFwiLFwiLCAreTIsIFwiLFwiLCB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTEgPSAreSk7XG4gICAgfSxcbiAgICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XG4gICAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICAgIHgyMSA9IHgyIC0geDEsXG4gICAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiTVwiLCB0aGlzLl94MSA9IHgxLCBcIixcIiwgdGhpcy5feTEgPSB5MVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uKSk7XG5cbiAgICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgICB0aGlzLl8ucHVzaChcbiAgICAgICAgICBcIkxcIiwgdGhpcy5feDEgPSB4MSwgXCIsXCIsIHRoaXMuX3kxID0geTFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgeDIwID0geDIgLSB4MCxcbiAgICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxuICAgICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSQxIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgICB0MjEgPSBsIC8gbDIxO1xuXG4gICAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgICAgXCJMXCIsIHgxICsgdDAxICogeDAxLCBcIixcIiwgeTEgKyB0MDEgKiB5MDFcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLDAsXCIsICsoeTAxICogeDIwID4geDAxICogeTIwKSwgXCIsXCIsIHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEsIFwiLFwiLCB0aGlzLl95MSA9IHkxICsgdDIxICogeTIxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhcmM6IGZ1bmN0aW9uKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyO1xuICAgICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiTVwiLCB4MCwgXCIsXCIsIHkwXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiTFwiLCB4MCwgXCIsXCIsIHkwXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgICBpZiAoIXIpIHJldHVybjtcblxuICAgICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgICB0aGlzLl8ucHVzaChcbiAgICAgICAgICBcIkFcIiwgciwgXCIsXCIsIHIsIFwiLDAsMSxcIiwgY3csIFwiLFwiLCB4IC0gZHgsIFwiLFwiLCB5IC0gZHksXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLDEsXCIsIGN3LCBcIixcIiwgdGhpcy5feDEgPSB4MCwgXCIsXCIsIHRoaXMuX3kxID0geTBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1JDEgKyB0YXUkMTtcbiAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLFwiLCArKGRhID49IHBpJDEpLCBcIixcIiwgY3csIFwiLFwiLCB0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpLCBcIixcIiwgdGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgICAgdGhpcy5fLnB1c2goXCJNXCIsIHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSwgXCJoXCIsICt3LCBcInZcIiwgK2gsIFwiaFwiLCAtdywgXCJaXCIpO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5qb2luKFwiXCIpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB0cmVlX2FkZChkKSB7XG4gICAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgICB5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKTtcbiAgICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcbiAgICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybiB0cmVlOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICAgIHZhciBwYXJlbnQsXG4gICAgICAgIG5vZGUgPSB0cmVlLl9yb290LFxuICAgICAgICBsZWFmID0ge2RhdGE6IGR9LFxuICAgICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgICB5MCA9IHRyZWUuX3kwLFxuICAgICAgICB4MSA9IHRyZWUuX3gxLFxuICAgICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgICB4bSxcbiAgICAgICAgeW0sXG4gICAgICAgIHhwLFxuICAgICAgICB5cCxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIGJvdHRvbSxcbiAgICAgICAgaSxcbiAgICAgICAgajtcblxuICAgIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgICBpZiAoIW5vZGUpIHJldHVybiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAgIC8vIEZpbmQgdGhlIGV4aXN0aW5nIGxlYWYgZm9yIHRoZSBuZXcgcG9pbnQsIG9yIGFkZCBpdC5cbiAgICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGUgbmV3IHBvaW50IGlzIGV4YWN0bHkgY29pbmNpZGVudCB3aXRoIHRoZSBleGlzdGluZyBwb2ludD9cbiAgICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgICB5cCA9ICt0cmVlLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgICBpZiAoeCA9PT0geHAgJiYgeSA9PT0geXApIHJldHVybiBsZWFmLm5leHQgPSBub2RlLCBwYXJlbnQgPyBwYXJlbnRbaV0gPSBsZWFmIDogdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gICAgZG8ge1xuICAgICAgcGFyZW50ID0gcGFyZW50ID8gcGFyZW50W2ldID0gbmV3IEFycmF5KDQpIDogdHJlZS5fcm9vdCA9IG5ldyBBcnJheSg0KTtcbiAgICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCAoeHAgPj0geG0pKSk7XG4gICAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRBbGwoZGF0YSkge1xuICAgIHZhciBkLCBpLCBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHh6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5eiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeDAgPSBJbmZpbml0eSxcbiAgICAgICAgeTAgPSBJbmZpbml0eSxcbiAgICAgICAgeDEgPSAtSW5maW5pdHksXG4gICAgICAgIHkxID0gLUluZmluaXR5O1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQgPSBkYXRhW2ldKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSBjb250aW51ZTtcbiAgICAgIHh6W2ldID0geDtcbiAgICAgIHl6W2ldID0geTtcbiAgICAgIGlmICh4IDwgeDApIHgwID0geDtcbiAgICAgIGlmICh4ID4geDEpIHgxID0geDtcbiAgICAgIGlmICh5IDwgeTApIHkwID0geTtcbiAgICAgIGlmICh5ID4geTEpIHkxID0geTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlIG5vICh2YWxpZCkgcG9pbnRzLCBpbmhlcml0IHRoZSBleGlzdGluZyBleHRlbnQuXG4gICAgaWYgKHgxIDwgeDApIHgwID0gdGhpcy5feDAsIHgxID0gdGhpcy5feDE7XG4gICAgaWYgKHkxIDwgeTApIHkwID0gdGhpcy5feTAsIHkxID0gdGhpcy5feTE7XG5cbiAgICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gICAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgICAvLyBBZGQgdGhlIG5ldyBwb2ludHMuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX2NvdmVyKHgsIHkpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAgIC8vIElmIHRoZSBxdWFkdHJlZSBoYXMgbm8gZXh0ZW50LCBpbml0aWFsaXplIHRoZW0uXG4gICAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAgIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgICBpZiAoaXNOYU4oeDApKSB7XG4gICAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gICAgZWxzZSBpZiAoeDAgPiB4IHx8IHggPiB4MSB8fCB5MCA+IHkgfHwgeSA+IHkxKSB7XG4gICAgICB2YXIgeiA9IHgxIC0geDAsXG4gICAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgICAgcGFyZW50LFxuICAgICAgICAgIGk7XG5cbiAgICAgIHN3aXRjaCAoaSA9ICh5IDwgKHkwICsgeTEpIC8gMikgPDwgMSB8ICh4IDwgKHgwICsgeDEpIC8gMikpIHtcbiAgICAgICAgY2FzZSAwOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgxID0geDAgKyB6LCB5MSA9IHkwICsgeiwgeCA+IHgxIHx8IHkgPiB5MSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgwID0geDEgLSB6LCB5MSA9IHkwICsgeiwgeDAgPiB4IHx8IHkgPiB5MSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgxID0geDAgKyB6LCB5MCA9IHkxIC0geiwgeCA+IHgxIHx8IHkwID4geSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgwID0geDEgLSB6LCB5MCA9IHkxIC0geiwgeDAgPiB4IHx8IHkwID4geSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBxdWFkdHJlZSBjb3ZlcnMgdGhlIHBvaW50IGFscmVhZHksIGp1c3QgcmV0dXJuLlxuICAgIGVsc2UgcmV0dXJuIHRoaXM7XG5cbiAgICB0aGlzLl94MCA9IHgwO1xuICAgIHRoaXMuX3kwID0geTA7XG4gICAgdGhpcy5feDEgPSB4MTtcbiAgICB0aGlzLl95MSA9IHkxO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9kYXRhKCkge1xuICAgIHZhciBkYXRhID0gW107XG4gICAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyBkYXRhLnB1c2gobm9kZS5kYXRhKTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX2V4dGVudChfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgPyB0aGlzLmNvdmVyKCtfWzBdWzBdLCArX1swXVsxXSkuY292ZXIoK19bMV1bMF0sICtfWzFdWzFdKVxuICAgICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xuICB9XG5cbiAgZnVuY3Rpb24gUXVhZChub2RlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgdGhpcy54MCA9IHgwO1xuICAgIHRoaXMueTAgPSB5MDtcbiAgICB0aGlzLngxID0geDE7XG4gICAgdGhpcy55MSA9IHkxO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9maW5kKHgsIHksIHJhZGl1cykge1xuICAgIHZhciBkYXRhLFxuICAgICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIHgyLFxuICAgICAgICB5MixcbiAgICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgICAgcXVhZHMgPSBbXSxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHEsXG4gICAgICAgIGk7XG5cbiAgICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICAgIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gICAgZWxzZSB7XG4gICAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xuICAgICAgcmFkaXVzICo9IHJhZGl1cztcbiAgICB9XG5cbiAgICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG5cbiAgICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICAgIHx8ICh4MSA9IHEueDApID4geDNcbiAgICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXG4gICAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICAgIHx8ICh5MiA9IHEueTEpIDwgeTApIGNvbnRpbnVlO1xuXG4gICAgICAvLyBCaXNlY3QgdGhlIGN1cnJlbnQgcXVhZHJhbnQuXG4gICAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHhtID0gKHgxICsgeDIpIC8gMixcbiAgICAgICAgICAgIHltID0gKHkxICsgeTIpIC8gMjtcblxuICAgICAgICBxdWFkcy5wdXNoKFxuICAgICAgICAgIG5ldyBRdWFkKG5vZGVbM10sIHhtLCB5bSwgeDIsIHkyKSxcbiAgICAgICAgICBuZXcgUXVhZChub2RlWzJdLCB4MSwgeW0sIHhtLCB5MiksXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICAgIG5ldyBRdWFkKG5vZGVbMF0sIHgxLCB5MSwgeG0sIHltKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgICBpZiAoaSA9ICh5ID49IHltKSA8PCAxIHwgKHggPj0geG0pKSB7XG4gICAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXSA9IHE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVmlzaXQgdGhpcyBwb2ludC4gKFZpc2l0aW5nIGNvaW5jaWRlbnQgcG9pbnRzIGlzbuKAmXQgbmVjZXNzYXJ5ISlcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgICAgZHkgPSB5IC0gK3RoaXMuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQocmFkaXVzID0gZDIpO1xuICAgICAgICAgIHgwID0geCAtIGQsIHkwID0geSAtIGQ7XG4gICAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgICBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3JlbW92ZShkKSB7XG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICAgIHZhciBwYXJlbnQsXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICByZXRhaW5lcixcbiAgICAgICAgcHJldmlvdXMsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICAgIHkxID0gdGhpcy5feTEsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHhtLFxuICAgICAgICB5bSxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIGJvdHRvbSxcbiAgICAgICAgaSxcbiAgICAgICAgajtcblxuICAgIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xuXG4gICAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gICAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxuICAgIGlmIChub2RlLmxlbmd0aCkgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgICBpZiAoIShwYXJlbnQgPSBub2RlLCBub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XG4gICAgfVxuXG4gICAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICAgIHdoaWxlIChub2RlLmRhdGEgIT09IGQpIGlmICghKHByZXZpb3VzID0gbm9kZSwgbm9kZSA9IG5vZGUubmV4dCkpIHJldHVybiB0aGlzO1xuICAgIGlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gICAgaWYgKHByZXZpb3VzKSByZXR1cm4gKG5leHQgPyBwcmV2aW91cy5uZXh0ID0gbmV4dCA6IGRlbGV0ZSBwcmV2aW91cy5uZXh0KSwgdGhpcztcblxuICAgIC8vIElmIHRoaXMgaXMgdGhlIHJvb3QgcG9pbnQsIHJlbW92ZSBpdC5cbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gICAgLy8gUmVtb3ZlIHRoaXMgbGVhZi5cbiAgICBuZXh0ID8gcGFyZW50W2ldID0gbmV4dCA6IGRlbGV0ZSBwYXJlbnRbaV07XG5cbiAgICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICAgIGlmICgobm9kZSA9IHBhcmVudFswXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzJdIHx8IHBhcmVudFszXSlcbiAgICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcbiAgICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgICBpZiAocmV0YWluZXIpIHJldGFpbmVyW2pdID0gbm9kZTtcbiAgICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9yb290KCkge1xuICAgIHJldHVybiB0aGlzLl9yb290O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9zaXplKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5sZW5ndGgpIGRvICsrc2l6ZTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gICAgfSk7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3Zpc2l0KGNhbGxiYWNrKSB7XG4gICAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gICAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfdmlzaXRBZnRlcihjYWxsYmFjaykge1xuICAgIHZhciBxdWFkcyA9IFtdLCBuZXh0ID0gW10sIHE7XG4gICAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgICB2YXIgbm9kZSA9IHEubm9kZTtcbiAgICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgICB2YXIgY2hpbGQsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSwgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICB9XG4gICAgICBuZXh0LnB1c2gocSk7XG4gICAgfVxuICAgIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2socS5ub2RlLCBxLngwLCBxLnkwLCBxLngxLCBxLnkxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3goXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gICAgcmV0dXJuIGRbMV07XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3koXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3kgPSBfLCB0aGlzKSA6IHRoaXMuX3k7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICAgIHZhciB0cmVlID0gbmV3IFF1YWR0cmVlKHggPT0gbnVsbCA/IGRlZmF1bHRYIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkgOiB5LCBOYU4sIE5hTiwgTmFOLCBOYU4pO1xuICAgIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFF1YWR0cmVlKHgsIHksIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gICAgdGhpcy5feDAgPSB4MDtcbiAgICB0aGlzLl95MCA9IHkwO1xuICAgIHRoaXMuX3gxID0geDE7XG4gICAgdGhpcy5feTEgPSB5MTtcbiAgICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZl9jb3B5KGxlYWYpIHtcbiAgICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkgbmV4dCA9IG5leHQubmV4dCA9IHtkYXRhOiBsZWFmLmRhdGF9O1xuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgdmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxuICB0cmVlUHJvdG8uY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIG5vZGVzLFxuICAgICAgICBjaGlsZDtcblxuICAgIGlmICghbm9kZSkgcmV0dXJuIGNvcHk7XG5cbiAgICBpZiAoIW5vZGUubGVuZ3RoKSByZXR1cm4gY29weS5fcm9vdCA9IGxlYWZfY29weShub2RlKSwgY29weTtcblxuICAgIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xuICAgICAgICAgIGVsc2Ugbm9kZS50YXJnZXRbaV0gPSBsZWFmX2NvcHkoY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcHk7XG4gIH07XG5cbiAgdHJlZVByb3RvLmFkZCA9IHRyZWVfYWRkO1xuICB0cmVlUHJvdG8uYWRkQWxsID0gYWRkQWxsO1xuICB0cmVlUHJvdG8uY292ZXIgPSB0cmVlX2NvdmVyO1xuICB0cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbiAgdHJlZVByb3RvLmV4dGVudCA9IHRyZWVfZXh0ZW50O1xuICB0cmVlUHJvdG8uZmluZCA9IHRyZWVfZmluZDtcbiAgdHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xuICB0cmVlUHJvdG8ucmVtb3ZlQWxsID0gcmVtb3ZlQWxsO1xuICB0cmVlUHJvdG8ucm9vdCA9IHRyZWVfcm9vdDtcbiAgdHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG4gIHRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG4gIHRyZWVQcm90by52aXNpdEFmdGVyID0gdHJlZV92aXNpdEFmdGVyO1xuICB0cmVlUHJvdG8ueCA9IHRyZWVfeDtcbiAgdHJlZVByb3RvLnkgPSB0cmVlX3k7XG5cbiAgdmFyIHNsaWNlJDEgPSBbXS5zbGljZTtcblxuICB2YXIgbm9hYm9ydCA9IHt9O1xuXG4gIGZ1bmN0aW9uIFF1ZXVlKHNpemUpIHtcbiAgICBpZiAoIShzaXplID49IDEpKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5fY2FsbCA9XG4gICAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX3Rhc2tzID0gW107XG4gICAgdGhpcy5fZGF0YSA9IFtdO1xuICAgIHRoaXMuX3dhaXRpbmcgPVxuICAgIHRoaXMuX2FjdGl2ZSA9XG4gICAgdGhpcy5fZW5kZWQgPVxuICAgIHRoaXMuX3N0YXJ0ID0gMDsgLy8gaW5zaWRlIGEgc3luY2hyb25vdXMgdGFzayBjYWxsYmFjaz9cbiAgfVxuXG4gIFF1ZXVlLnByb3RvdHlwZSA9IHF1ZXVlLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogUXVldWUsXG4gICAgZGVmZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIgfHwgdGhpcy5fY2FsbCkgdGhyb3cgbmV3IEVycm9yO1xuICAgICAgaWYgKHRoaXMuX2Vycm9yICE9IG51bGwpIHJldHVybiB0aGlzO1xuICAgICAgdmFyIHQgPSBzbGljZSQxLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHQucHVzaChjYWxsYmFjayk7XG4gICAgICArK3RoaXMuX3dhaXRpbmcsIHRoaXMuX3Rhc2tzLnB1c2godCk7XG4gICAgICBwb2tlKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fZXJyb3IgPT0gbnVsbCkgYWJvcnQodGhpcywgbmV3IEVycm9yKFwiYWJvcnRcIikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhd2FpdDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIiB8fCB0aGlzLl9jYWxsKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgICB0aGlzLl9jYWxsID0gZnVuY3Rpb24oZXJyb3IsIHJlc3VsdHMpIHsgY2FsbGJhY2suYXBwbHkobnVsbCwgW2Vycm9yXS5jb25jYXQocmVzdWx0cykpOyB9O1xuICAgICAgbWF5YmVOb3RpZnkodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGF3YWl0QWxsOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiIHx8IHRoaXMuX2NhbGwpIHRocm93IG5ldyBFcnJvcjtcbiAgICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICAgIG1heWJlTm90aWZ5KHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHBva2UocSkge1xuICAgIGlmICghcS5fc3RhcnQpIHRyeSB7IHN0YXJ0KHEpOyB9IC8vIGxldCB0aGUgY3VycmVudCB0YXNrIGNvbXBsZXRlXG4gICAgY2F0Y2ggKGUpIHsgaWYgKHEuX3Rhc2tzW3EuX2VuZGVkICsgcS5fYWN0aXZlIC0gMV0pIGFib3J0KHEsIGUpOyB9IC8vIHRhc2sgZXJyb3JlZCBzeW5jaHJvbm91c2x5XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChxKSB7XG4gICAgd2hpbGUgKHEuX3N0YXJ0ID0gcS5fd2FpdGluZyAmJiBxLl9hY3RpdmUgPCBxLl9zaXplKSB7XG4gICAgICB2YXIgaSA9IHEuX2VuZGVkICsgcS5fYWN0aXZlLFxuICAgICAgICAgIHQgPSBxLl90YXNrc1tpXSxcbiAgICAgICAgICBqID0gdC5sZW5ndGggLSAxLFxuICAgICAgICAgIGMgPSB0W2pdO1xuICAgICAgdFtqXSA9IGVuZChxLCBpKTtcbiAgICAgIC0tcS5fd2FpdGluZywgKytxLl9hY3RpdmU7XG4gICAgICB0ID0gYy5hcHBseShudWxsLCB0KTtcbiAgICAgIGlmICghcS5fdGFza3NbaV0pIGNvbnRpbnVlOyAvLyB0YXNrIGZpbmlzaGVkIHN5bmNocm9ub3VzbHlcbiAgICAgIHEuX3Rhc2tzW2ldID0gdCB8fCBub2Fib3J0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZChxLCBpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgIGlmICghcS5fdGFza3NbaV0pIHJldHVybjsgLy8gaWdub3JlIG11bHRpcGxlIGNhbGxiYWNrc1xuICAgICAgLS1xLl9hY3RpdmUsICsrcS5fZW5kZWQ7XG4gICAgICBxLl90YXNrc1tpXSA9IG51bGw7XG4gICAgICBpZiAocS5fZXJyb3IgIT0gbnVsbCkgcmV0dXJuOyAvLyBpZ25vcmUgc2Vjb25kYXJ5IGVycm9yc1xuICAgICAgaWYgKGUgIT0gbnVsbCkge1xuICAgICAgICBhYm9ydChxLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHEuX2RhdGFbaV0gPSByO1xuICAgICAgICBpZiAocS5fd2FpdGluZykgcG9rZShxKTtcbiAgICAgICAgZWxzZSBtYXliZU5vdGlmeShxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnQocSwgZSkge1xuICAgIHZhciBpID0gcS5fdGFza3MubGVuZ3RoLCB0O1xuICAgIHEuX2Vycm9yID0gZTsgLy8gaWdub3JlIGFjdGl2ZSBjYWxsYmFja3NcbiAgICBxLl9kYXRhID0gdW5kZWZpbmVkOyAvLyBhbGxvdyBnY1xuICAgIHEuX3dhaXRpbmcgPSBOYU47IC8vIHByZXZlbnQgc3RhcnRpbmdcblxuICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgaWYgKHQgPSBxLl90YXNrc1tpXSkge1xuICAgICAgICBxLl90YXNrc1tpXSA9IG51bGw7XG4gICAgICAgIGlmICh0LmFib3J0KSB0cnkgeyB0LmFib3J0KCk7IH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgLyogaWdub3JlICovIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxLl9hY3RpdmUgPSBOYU47IC8vIGFsbG93IG5vdGlmaWNhdGlvblxuICAgIG1heWJlTm90aWZ5KHEpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF5YmVOb3RpZnkocSkge1xuICAgIGlmICghcS5fYWN0aXZlICYmIHEuX2NhbGwpIHEuX2NhbGwocS5fZXJyb3IsIHEuX2RhdGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVldWUoY29uY3VycmVuY3kpIHtcbiAgICByZXR1cm4gbmV3IFF1ZXVlKGFyZ3VtZW50cy5sZW5ndGggPyArY29uY3VycmVuY3kgOiBJbmZpbml0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQxKHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVwc2lsb24kMSA9IDFlLTEyO1xuICB2YXIgcGkkMiA9IE1hdGguUEk7XG4gIHZhciBoYWxmUGkkMSA9IHBpJDIgLyAyO1xuICB2YXIgdGF1JDIgPSAyICogcGkkMjtcblxuICBmdW5jdGlvbiBhcmNJbm5lclJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIGQuaW5uZXJSYWRpdXM7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNPdXRlclJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIGQub3V0ZXJSYWRpdXM7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjRW5kQW5nbGUoZCkge1xuICAgIHJldHVybiBkLmVuZEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjUGFkQW5nbGUoZCkge1xuICAgIHJldHVybiBkICYmIGQucGFkQW5nbGU7IC8vIE5vdGU6IG9wdGlvbmFsIVxuICB9XG5cbiAgZnVuY3Rpb24gYXNpbih4KSB7XG4gICAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSQxIDogeCA8PSAtMSA/IC1oYWxmUGkkMSA6IE1hdGguYXNpbih4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICB2YXIgeDEwID0geDEgLSB4MCwgeTEwID0geTEgLSB5MCxcbiAgICAgICAgeDMyID0geDMgLSB4MiwgeTMyID0geTMgLSB5MixcbiAgICAgICAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gKHkzMiAqIHgxMCAtIHgzMiAqIHkxMCk7XG4gICAgcmV0dXJuIFt4MCArIHQgKiB4MTAsIHkwICsgdCAqIHkxMF07XG4gIH1cblxuICAvLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuICAvLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcbiAgZnVuY3Rpb24gY29ybmVyVGFuZ2VudHMoeDAsIHkwLCB4MSwgeTEsIHIxLCByYywgY3cpIHtcbiAgICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBNYXRoLnNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgICAgb3ggPSBsbyAqIHkwMSxcbiAgICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICAgIHkxMSA9IHkwICsgb3ksXG4gICAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICAgIHgwMCA9ICh4MTEgKyB4MTApIC8gMixcbiAgICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgICAgZHkgPSB5MTAgLSB5MTEsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgICBEID0geDExICogeTEwIC0geDEwICogeTExLFxuICAgICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXG4gICAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxuICAgICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgICBkeTAgPSBjeTAgLSB5MDAsXG4gICAgICAgIGR4MSA9IGN4MSAtIHgwMCxcbiAgICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gICAgLy8gUGljayB0aGUgY2xvc2VyIG9mIHRoZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICAvLyBUT0RPIElzIHRoZXJlIGEgZmFzdGVyIHdheSB0byBkZXRlcm1pbmUgd2hpY2ggaW50ZXJzZWN0aW9uIHRvIHVzZT9cbiAgICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICAgIHJldHVybiB7XG4gICAgICBjeDogY3gwLFxuICAgICAgY3k6IGN5MCxcbiAgICAgIHgwMTogLW94LFxuICAgICAgeTAxOiAtb3ksXG4gICAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICAgIHkxMTogY3kwICogKHIxIC8gciAtIDEpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyYygpIHtcbiAgICB2YXIgaW5uZXJSYWRpdXMgPSBhcmNJbm5lclJhZGl1cyxcbiAgICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQkMSgwKSxcbiAgICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgICAgc3RhcnRBbmdsZSA9IGFyY1N0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlID0gYXJjRW5kQW5nbGUsXG4gICAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gYXJjKCkge1xuICAgICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgICByLFxuICAgICAgICAgIHIwID0gK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgcjEgPSArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSQxLFxuICAgICAgICAgIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSQxLFxuICAgICAgICAgIGRhID0gTWF0aC5hYnMoYTEgLSBhMCksXG4gICAgICAgICAgY3cgPSBhMSA+IGEwO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBvdXRlciByYWRpdXMgaXMgYWx3YXlzIGxhcmdlciB0aGFuIHRoZSBpbm5lciByYWRpdXMuXG4gICAgICBpZiAocjEgPCByMCkgciA9IHIxLCByMSA9IHIwLCByMCA9IHI7XG5cbiAgICAgIC8vIElzIGl0IGEgcG9pbnQ/XG4gICAgICBpZiAoIShyMSA+IGVwc2lsb24kMSkpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgICAvLyBPciBpcyBpdCBhIGNpcmNsZSBvciBhbm51bHVzP1xuICAgICAgZWxzZSBpZiAoZGEgPiB0YXUkMiAtIGVwc2lsb24kMSkge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMSAqIE1hdGguY29zKGEwKSwgcjEgKiBNYXRoLnNpbihhMCkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAsIGExLCAhY3cpO1xuICAgICAgICBpZiAocjAgPiBlcHNpbG9uJDEpIHtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMCAqIE1hdGguY29zKGExKSwgcjAgKiBNYXRoLnNpbihhMSkpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMSwgYTAsIGN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyBpdCBhIGNpcmN1bGFyIG9yIGFubnVsYXIgc2VjdG9yP1xuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICAgIGExMSA9IGExLFxuICAgICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICAgIGRhMCA9IGRhLFxuICAgICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgICAgcnAgPSAoYXAgPiBlcHNpbG9uJDEpICYmIChwYWRSYWRpdXMgPyArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBNYXRoLnNxcnQocjAgKiByMCArIHIxICogcjEpKSxcbiAgICAgICAgICAgIHJjID0gTWF0aC5taW4oTWF0aC5hYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgICAgcmMwID0gcmMsXG4gICAgICAgICAgICByYzEgPSByYyxcbiAgICAgICAgICAgIHQwLFxuICAgICAgICAgICAgdDE7XG5cbiAgICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXG4gICAgICAgIGlmIChycCA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHZhciBwMCA9IGFzaW4ocnAgLyByMCAqIE1hdGguc2luKGFwKSksXG4gICAgICAgICAgICAgIHAxID0gYXNpbihycCAvIHIxICogTWF0aC5zaW4oYXApKTtcbiAgICAgICAgICBpZiAoKGRhMCAtPSBwMCAqIDIpID4gZXBzaWxvbiQxKSBwMCAqPSAoY3cgPyAxIDogLTEpLCBhMDAgKz0gcDAsIGExMCAtPSBwMDtcbiAgICAgICAgICBlbHNlIGRhMCA9IDAsIGEwMCA9IGExMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24kMSkgcDEgKj0gKGN3ID8gMSA6IC0xKSwgYTAxICs9IHAxLCBhMTEgLT0gcDE7XG4gICAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHgwMSA9IHIxICogTWF0aC5jb3MoYTAxKSxcbiAgICAgICAgICAgIHkwMSA9IHIxICogTWF0aC5zaW4oYTAxKSxcbiAgICAgICAgICAgIHgxMCA9IHIwICogTWF0aC5jb3MoYTEwKSxcbiAgICAgICAgICAgIHkxMCA9IHIwICogTWF0aC5zaW4oYTEwKTtcblxuICAgICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICAgIGlmIChyYyA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHZhciB4MTEgPSByMSAqIE1hdGguY29zKGExMSksXG4gICAgICAgICAgICAgIHkxMSA9IHIxICogTWF0aC5zaW4oYTExKSxcbiAgICAgICAgICAgICAgeDAwID0gcjAgKiBNYXRoLmNvcyhhMDApLFxuICAgICAgICAgICAgICB5MDAgPSByMCAqIE1hdGguc2luKGEwMCk7XG5cbiAgICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgICBpZiAoZGEgPCBwaSQyKSB7XG4gICAgICAgICAgICB2YXIgb2MgPSBkYTAgPiBlcHNpbG9uJDEgPyBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApIDogW3gxMCwgeTEwXSxcbiAgICAgICAgICAgICAgICBheCA9IHgwMSAtIG9jWzBdLFxuICAgICAgICAgICAgICAgIGF5ID0geTAxIC0gb2NbMV0sXG4gICAgICAgICAgICAgICAgYnggPSB4MTEgLSBvY1swXSxcbiAgICAgICAgICAgICAgICBieSA9IHkxMSAtIG9jWzFdLFxuICAgICAgICAgICAgICAgIGtjID0gMSAvIE1hdGguc2luKE1hdGguYWNvcygoYXggKiBieCArIGF5ICogYnkpIC8gKE1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSkgKiBNYXRoLnNxcnQoYnggKiBieCArIGJ5ICogYnkpKSkgLyAyKSxcbiAgICAgICAgICAgICAgICBsYyA9IE1hdGguc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgICByYzAgPSBNYXRoLm1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgICAgcmMxID0gTWF0aC5taW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJcyB0aGUgc2VjdG9yIGNvbGxhcHNlZCB0byBhIGxpbmU/XG4gICAgICAgIGlmICghKGRhMSA+IGVwc2lsb24kMSkpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICAgIGVsc2UgaWYgKHJjMSA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDAwLCB5MDAsIHgwMSwgeTAxLCByMSwgcmMxLCBjdyk7XG4gICAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcblxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgICBpZiAocmMxIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBNYXRoLmF0YW4yKHQwLnkwMSwgdDAueDAxKSwgTWF0aC5hdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBNYXRoLmF0YW4yKHQwLnkwMSwgdDAueDAxKSwgTWF0aC5hdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgTWF0aC5hdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBNYXRoLmF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMSwgTWF0aC5hdGFuMih0MS55MTEsIHQxLngxMSksIE1hdGguYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICAgIGVsc2UgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpLCBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAxLCBhMTEsICFjdyk7XG5cbiAgICAgICAgLy8gSXMgdGhlcmUgbm8gaW5uZXIgcmluZywgYW5kIGl04oCZcyBhIGNpcmN1bGFyIHNlY3Rvcj9cbiAgICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgICBpZiAoIShyMCA+IGVwc2lsb24kMSkgfHwgIShkYTAgPiBlcHNpbG9uJDEpKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBpbm5lciByaW5nIChvciBwb2ludCkgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICAgIGVsc2UgaWYgKHJjMCA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDAxLCB5MDEsIHgwMCwgeTAwLCByMCwgLXJjMCwgY3cpO1xuXG4gICAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICAgIGlmIChyYzAgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIE1hdGguYXRhbjIodDAueTAxLCB0MC54MDEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIE1hdGguYXRhbjIodDAueTAxLCB0MC54MDEpLCBNYXRoLmF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBNYXRoLmF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIE1hdGguYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIE1hdGguYXRhbjIodDEueTExLCB0MS54MTEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgICBlbHNlIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMTAsIGEwMCwgY3cpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMixcbiAgICAgICAgICBhID0gKCtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyIC0gcGkkMiAvIDI7XG4gICAgICByZXR1cm4gW01hdGguY29zKGEpICogciwgTWF0aC5zaW4oYSkgKiByXTtcbiAgICB9O1xuXG4gICAgYXJjLmlubmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogaW5uZXJSYWRpdXM7XG4gICAgfTtcblxuICAgIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG91dGVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IG91dGVyUmFkaXVzO1xuICAgIH07XG5cbiAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29ybmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgICB9O1xuXG4gICAgYXJjLnBhZFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogcGFkUmFkaXVzO1xuICAgIH07XG5cbiAgICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogc3RhcnRBbmdsZTtcbiAgICB9O1xuXG4gICAgYXJjLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gICAgfTtcblxuICAgIGFyYy5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IHBhZEFuZ2xlO1xuICAgIH07XG5cbiAgICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBhcmMpIDogY29udGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGFyYztcbiAgfVxuXG4gIGZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBMaW5lYXIucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjdXJ2ZUxpbmVhcihjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiB4KHApIHtcbiAgICByZXR1cm4gcFswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHkocCkge1xuICAgIHJldHVybiBwWzFdO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZSgpIHtcbiAgICB2YXIgeCQkID0geCxcbiAgICAgICAgeSQkID0geSxcbiAgICAgICAgZGVmaW5lZCA9IGNvbnN0YW50JDEodHJ1ZSksXG4gICAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgICBvdXRwdXQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgZCxcbiAgICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICAgIGJ1ZmZlcjtcblxuICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreCQkKGQsIGksIGRhdGEpLCAreSQkKGQsIGksIGRhdGEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4JCQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBsaW5lKSA6IHgkJDtcbiAgICB9O1xuXG4gICAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSQkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgbGluZSkgOiB5JCQ7XG4gICAgfTtcblxuICAgIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICAgIH07XG5cbiAgICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcbiAgICB9O1xuXG4gICAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGxpbmUpIDogY29udGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmU7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhJDEoKSB7XG4gICAgdmFyIHgwID0geCxcbiAgICAgICAgeDEgPSBudWxsLFxuICAgICAgICB5MCA9IGNvbnN0YW50JDEoMCksXG4gICAgICAgIHkxID0geSxcbiAgICAgICAgZGVmaW5lZCA9IGNvbnN0YW50JDEodHJ1ZSksXG4gICAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgICBvdXRwdXQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGQsXG4gICAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgICAgaiA9IGk7XG4gICAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcbiAgICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgICAgcmV0dXJuIGxpbmUoKS5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlKS5jb250ZXh0KGNvbnRleHQpO1xuICAgIH1cblxuICAgIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICAgIH07XG5cbiAgICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmVhKSA6IHgwO1xuICAgIH07XG5cbiAgICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJlYSkgOiB4MTtcbiAgICB9O1xuXG4gICAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gICAgfTtcblxuICAgIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyZWEpIDogeTA7XG4gICAgfTtcblxuICAgIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmVhKSA6IHkxO1xuICAgIH07XG5cbiAgICBhcmVhLmxpbmVYMCA9XG4gICAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICAgIH07XG5cbiAgICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gICAgfTtcblxuICAgIGFyZWEubGluZVgxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgICB9O1xuXG4gICAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gICAgfTtcblxuICAgIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICAgIH07XG5cbiAgICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gYXJlYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc2NlbmRpbmckMShhLCBiKSB7XG4gICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkkMShkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH1cblxuICBmdW5jdGlvbiBwaWUoKSB7XG4gICAgdmFyIHZhbHVlID0gaWRlbnRpdHkkMSxcbiAgICAgICAgc29ydFZhbHVlcyA9IGRlc2NlbmRpbmckMSxcbiAgICAgICAgc29ydCA9IG51bGwsXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBjb25zdGFudCQxKDApLFxuICAgICAgICBlbmRBbmdsZSA9IGNvbnN0YW50JDEodGF1JDIpLFxuICAgICAgICBwYWRBbmdsZSA9IGNvbnN0YW50JDEoMCk7XG5cbiAgICBmdW5jdGlvbiBwaWUoZGF0YSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGosXG4gICAgICAgICAgayxcbiAgICAgICAgICBzdW0gPSAwLFxuICAgICAgICAgIGluZGV4ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgYTAgPSArc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIGRhID0gTWF0aC5taW4odGF1JDIsIE1hdGgubWF4KC10YXUkMiwgZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGEwKSksXG4gICAgICAgICAgYTEsXG4gICAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgIHBhID0gcCAqIChkYSA8IDAgPyAtMSA6IDEpLFxuICAgICAgICAgIHY7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh2ID0gYXJjc1tpbmRleFtpXSA9IGldID0gK3ZhbHVlKGRhdGFbaV0sIGksIGRhdGEpKSA+IDApIHtcbiAgICAgICAgICBzdW0gKz0gdjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPcHRpb25hbGx5IHNvcnQgdGhlIGFyY3MgYnkgcHJldmlvdXNseS1jb21wdXRlZCB2YWx1ZXMgb3IgYnkgZGF0YS5cbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgICBlbHNlIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTsgfSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGFyY3MhIFRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgb3JpZ2luYWwgZGF0YSdzIG9yZGVyLlxuICAgICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICAgIGogPSBpbmRleFtpXSwgdiA9IGFyY3Nbal0sIGExID0gYTAgKyAodiA+IDAgPyB2ICogayA6IDApICsgcGEsIGFyY3Nbal0gPSB7XG4gICAgICAgICAgZGF0YTogZGF0YVtqXSxcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgcGFkQW5nbGU6IHBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyY3M7XG4gICAgfVxuXG4gICAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogdmFsdWU7XG4gICAgfTtcblxuICAgIHBpZS5zb3J0VmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFZhbHVlcyA9IF8sIHNvcnQgPSBudWxsLCBwaWUpIDogc29ydFZhbHVlcztcbiAgICB9O1xuXG4gICAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0ID0gXywgc29ydFZhbHVlcyA9IG51bGwsIHBpZSkgOiBzb3J0O1xuICAgIH07XG5cbiAgICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgICB9O1xuXG4gICAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogZW5kQW5nbGU7XG4gICAgfTtcblxuICAgIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgcGllKSA6IHBhZEFuZ2xlO1xuICAgIH07XG5cbiAgICByZXR1cm4gcGllO1xuICB9XG5cbiAgdmFyIGN1cnZlUmFkaWFsTGluZWFyID0gY3VydmVSYWRpYWwoY3VydmVMaW5lYXIpO1xuXG4gIGZ1bmN0aW9uIFJhZGlhbChjdXJ2ZSkge1xuICAgIHRoaXMuX2N1cnZlID0gY3VydmU7XG4gIH1cblxuICBSYWRpYWwucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5hcmVhU3RhcnQoKTtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY3VydmUuYXJlYUVuZCgpO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2N1cnZlLmxpbmVTdGFydCgpO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5saW5lRW5kKCk7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgICAgdGhpcy5fY3VydmUucG9pbnQociAqIE1hdGguc2luKGEpLCByICogLU1hdGguY29zKGEpKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY3VydmVSYWRpYWwoY3VydmUpIHtcblxuICAgIGZ1bmN0aW9uIHJhZGlhbChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gICAgfVxuXG4gICAgcmFkaWFsLl9jdXJ2ZSA9IGN1cnZlO1xuXG4gICAgcmV0dXJuIHJhZGlhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhZGlhbExpbmUobCkge1xuICAgIHZhciBjID0gbC5jdXJ2ZTtcblxuICAgIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gICAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG5cbiAgICBsLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gICAgfTtcblxuICAgIHJldHVybiBsO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFkaWFsTGluZSQxKCkge1xuICAgIHJldHVybiByYWRpYWxMaW5lKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFkaWFsQXJlYSgpIHtcbiAgICB2YXIgYSA9IGFyZWEkMSgpLmN1cnZlKGN1cnZlUmFkaWFsTGluZWFyKSxcbiAgICAgICAgYyA9IGEuY3VydmUsXG4gICAgICAgIHgwID0gYS5saW5lWDAsXG4gICAgICAgIHgxID0gYS5saW5lWDEsXG4gICAgICAgIHkwID0gYS5saW5lWTAsXG4gICAgICAgIHkxID0gYS5saW5lWTE7XG5cbiAgICBhLmFuZ2xlID0gYS54LCBkZWxldGUgYS54O1xuICAgIGEuc3RhcnRBbmdsZSA9IGEueDAsIGRlbGV0ZSBhLngwO1xuICAgIGEuZW5kQW5nbGUgPSBhLngxLCBkZWxldGUgYS54MTtcbiAgICBhLnJhZGl1cyA9IGEueSwgZGVsZXRlIGEueTtcbiAgICBhLmlubmVyUmFkaXVzID0gYS55MCwgZGVsZXRlIGEueTA7XG4gICAgYS5vdXRlclJhZGl1cyA9IGEueTEsIGRlbGV0ZSBhLnkxO1xuICAgIGEubGluZVN0YXJ0QW5nbGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJhZGlhbExpbmUoeDAoKSk7IH0sIGRlbGV0ZSBhLmxpbmVYMDtcbiAgICBhLmxpbmVFbmRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmFkaWFsTGluZSh4MSgpKTsgfSwgZGVsZXRlIGEubGluZVgxO1xuICAgIGEubGluZUlubmVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiByYWRpYWxMaW5lKHkwKCkpOyB9LCBkZWxldGUgYS5saW5lWTA7XG4gICAgYS5saW5lT3V0ZXJSYWRpdXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJhZGlhbExpbmUoeTEoKSk7IH0sIGRlbGV0ZSBhLmxpbmVZMTtcblxuICAgIGEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgY2lyY2xlID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBwaSQyKTtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgciwgMCwgdGF1JDIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3Jvc3MkMSA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgICAgY29udGV4dC5tb3ZlVG8oLTMgKiByLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgLXIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhyLCAtMyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8ociwgLXIpO1xuICAgICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDMgKiByLCByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHIsIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXIsIDMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC1yLCByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdGFuMzAgPSBNYXRoLnNxcnQoMSAvIDMpO1xuICB2YXIgdGFuMzBfMiA9IHRhbjMwICogMjtcbiAgdmFyIGRpYW1vbmQgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICAgIHggPSB5ICogdGFuMzA7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCAteSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDAsIHkpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXgsIDApO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMDtcbiAgdmFyIGtyID0gTWF0aC5zaW4ocGkkMiAvIDEwKSAvIE1hdGguc2luKDcgKiBwaSQyIC8gMTApO1xuICB2YXIga3ggPSBNYXRoLnNpbih0YXUkMiAvIDEwKSAqIGtyO1xuICB2YXIga3kgPSAtTWF0aC5jb3ModGF1JDIgLyAxMCkgKiBrcjtcbiAgdmFyIHN0YXIgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAqIGthKSxcbiAgICAgICAgICB4ID0ga3ggKiByLFxuICAgICAgICAgIHkgPSBreSAqIHI7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XG4gICAgICAgIHZhciBhID0gdGF1JDIgKiBpIC8gNSxcbiAgICAgICAgICAgIGMgPSBNYXRoLmNvcyhhKSxcbiAgICAgICAgICAgIHMgPSBNYXRoLnNpbihhKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8ocyAqIHIsIC1jICogcik7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4IC0gcyAqIHksIHMgKiB4ICsgYyAqIHkpO1xuICAgICAgfVxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNxdWFyZSA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgdyA9IE1hdGguc3FydChzaXplKSxcbiAgICAgICAgICB4ID0gLXcgLyAyO1xuICAgICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3FydDMgPSBNYXRoLnNxcnQoMyk7XG5cbiAgdmFyIHRyaWFuZ2xlID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciB5ID0gLU1hdGguc3FydChzaXplIC8gKHNxcnQzICogMykpO1xuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgeSAqIDIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgICAgY29udGV4dC5saW5lVG8oc3FydDMgKiB5LCAteSk7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgYyA9IC0wLjU7XG4gIHZhciBzID0gTWF0aC5zcXJ0KDMpIC8gMjtcbiAgdmFyIGsgPSAxIC8gTWF0aC5zcXJ0KDEyKTtcbiAgdmFyIGEgPSAoayAvIDIgKyAxKSAqIDM7XG4gIHZhciB3eWUgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIGEpLFxuICAgICAgICAgIHgwID0gciAvIDIsXG4gICAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgICB4MSA9IHgwLFxuICAgICAgICAgIHkxID0gciAqIGsgKyByLFxuICAgICAgICAgIHgyID0gLXgxLFxuICAgICAgICAgIHkyID0geTE7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHgyLCB5Mik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMgKiB5MCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgLSBzICogeTIsIHMgKiB4MiArIGMgKiB5Mik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgKyBzICogeTAsIGMgKiB5MCAtIHMgKiB4MCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgKyBzICogeTIsIGMgKiB5MiAtIHMgKiB4Mik7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3ltYm9scyA9IFtcbiAgICBjaXJjbGUsXG4gICAgY3Jvc3MkMSxcbiAgICBkaWFtb25kLFxuICAgIHNxdWFyZSxcbiAgICBzdGFyLFxuICAgIHRyaWFuZ2xlLFxuICAgIHd5ZVxuICBdO1xuXG4gIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICB2YXIgdHlwZSA9IGNvbnN0YW50JDEoY2lyY2xlKSxcbiAgICAgICAgc2l6ZSA9IGNvbnN0YW50JDEoNjQpLFxuICAgICAgICBjb250ZXh0ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICAgIHZhciBidWZmZXI7XG4gICAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG4gICAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHlwZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMShfKSwgc3ltYm9sKSA6IHR5cGU7XG4gICAgfTtcblxuICAgIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2l6ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHN5bWJvbCkgOiBzaXplO1xuICAgIH07XG5cbiAgICBzeW1ib2wuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXywgc3ltYm9sKSA6IGNvbnRleHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzeW1ib2w7XG4gIH1cblxuICBmdW5jdGlvbiBub29wKCkge31cblxuICBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgICAoMiAqIHRoYXQuX3kwICsgdGhhdC5feTEpIC8gMyxcbiAgICAgICh0aGF0Ll94MCArIDIgKiB0aGF0Ll94MSkgLyAzLFxuICAgICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgICAodGhhdC5feDAgKyA0ICogdGhhdC5feDEgKyB4KSAvIDYsXG4gICAgICAodGhhdC5feTAgKyA0ICogdGhhdC5feTEgKyB5KSAvIDZcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgQmFzaXMucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyAvLyBwcm9jZWVkXG4gICAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBiYXNpcyhjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJhc2lzQ2xvc2VkKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIEJhc2lzQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IG5vb3AsXG4gICAgYXJlYUVuZDogbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMToge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDIgKyAyICogdGhpcy5feDMpIC8gMywgKHRoaXMuX3kyICsgMiAqIHRoaXMuX3kzKSAvIDMpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHk7IHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2KTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYmFzaXNDbG9zZWQoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBCYXNpc09wZW4oY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgQmFzaXNPcGVuLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdmFyIHgwID0gKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCB5MCA9ICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNjsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgwLCB5MCkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4MCwgeTApOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBiYXNpc09wZW4oY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgICB0aGlzLl9iZXRhID0gYmV0YTtcbiAgfVxuXG4gIEJ1bmRsZS5wcm90b3R5cGUgPSB7XG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3ggPSBbXTtcbiAgICAgIHRoaXMuX3kgPSBbXTtcbiAgICAgIHRoaXMuX2Jhc2lzLmxpbmVTdGFydCgpO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgICAgaiA9IHgubGVuZ3RoIC0gMTtcblxuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgICB5MCA9IHlbMF0sXG4gICAgICAgICAgICBkeCA9IHhbal0gLSB4MCxcbiAgICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgICAgdDtcblxuICAgICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgICB0ID0gaSAvIGo7XG4gICAgICAgICAgdGhpcy5fYmFzaXMucG9pbnQoXG4gICAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgICAgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICAgICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgICB0aGlzLl95LnB1c2goK3kpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgYnVuZGxlID0gKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgICBmdW5jdGlvbiBidW5kbGUoY29udGV4dCkge1xuICAgICAgcmV0dXJuIGJldGEgPT09IDEgPyBuZXcgQmFzaXMoY29udGV4dCkgOiBuZXcgQnVuZGxlKGNvbnRleHQsIGJldGEpO1xuICAgIH1cblxuICAgIGJ1bmRsZS5iZXRhID0gZnVuY3Rpb24oYmV0YSkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrYmV0YSk7XG4gICAgfTtcblxuICAgIHJldHVybiBidW5kbGU7XG4gIH0pKDAuODUpO1xuXG4gIGZ1bmN0aW9uIHBvaW50JDEodGhhdCwgeCwgeSkge1xuICAgIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICAgIHRoYXQuX3gxICsgdGhhdC5fayAqICh0aGF0Ll94MiAtIHRoYXQuX3gwKSxcbiAgICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICAgIHRoYXQuX3gyICsgdGhhdC5fayAqICh0aGF0Ll94MSAtIHgpLFxuICAgICAgdGhhdC5feTIgKyB0aGF0Ll9rICogKHRoYXQuX3kxIC0geSksXG4gICAgICB0aGF0Ll94MixcbiAgICAgIHRoYXQuX3kyXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG4gIH1cblxuICBDYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBwb2ludCQxKHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDEgPSB4LCB0aGlzLl95MSA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OiBwb2ludCQxKHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhcmRpbmFsID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICAgIH1cblxuICAgIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhcmRpbmFsO1xuICB9KSgwKTtcblxuICBmdW5jdGlvbiBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xuICB9XG5cbiAgQ2FyZGluYWxDbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCxcbiAgICBhcmVhRW5kOiBub29wLFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMToge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzOiB7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDEodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2FyZGluYWxDbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICAgIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XG4gICAgfVxuXG4gICAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2FyZGluYWw7XG4gIH0pKDApO1xuXG4gIGZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xuICB9XG5cbiAgQ2FyZGluYWxPcGVuLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDEodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2FyZGluYWxPcGVuID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKTtcbiAgICB9XG5cbiAgICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gICAgfTtcblxuICAgIHJldHVybiBjYXJkaW5hbDtcbiAgfSkoMCk7XG5cbiAgZnVuY3Rpb24gcG9pbnQkMih0aGF0LCB4LCB5KSB7XG4gICAgdmFyIHgxID0gdGhhdC5feDEsXG4gICAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICAgIHkyID0gdGhhdC5feTI7XG5cbiAgICBpZiAodGhhdC5fbDAxX2EgPiBlcHNpbG9uJDEpIHtcbiAgICAgIHZhciBhID0gMiAqIHRoYXQuX2wwMV8yYSArIDMgKiB0aGF0Ll9sMDFfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICAgIG4gPSAzICogdGhhdC5fbDAxX2EgKiAodGhhdC5fbDAxX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgICB5MSA9ICh5MSAqIGEgLSB0aGF0Ll95MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3kyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgfVxuXG4gICAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbiQxKSB7XG4gICAgICB2YXIgYiA9IDIgKiB0aGF0Ll9sMjNfMmEgKyAzICogdGhhdC5fbDIzX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgICAgeDIgPSAoeDIgKiBiICsgdGhhdC5feDEgKiB0aGF0Ll9sMjNfMmEgLSB4ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gICAgICB5MiA9ICh5MiAqIGIgKyB0aGF0Ll95MSAqIHRoYXQuX2wyM18yYSAtIHkgKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgICB9XG5cbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHRoYXQuX3gyLCB0aGF0Ll95Mik7XG4gIH1cblxuICBmdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbiAgfVxuXG4gIENhdG11bGxSb20ucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMsIHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb20gPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbChjb250ZXh0LCAwKTtcbiAgICB9XG5cbiAgICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb207XG4gIH0pKDAuNSk7XG5cbiAgZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XG4gIH1cblxuICBDYXRtdWxsUm9tQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IG5vb3AsXG4gICAgYXJlYUVuZDogbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMToge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzOiB7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb21DbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCAwKTtcbiAgICB9XG5cbiAgICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb207XG4gIH0pKDAuNSk7XG5cbiAgZnVuY3Rpb24gQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9hbHBoYSA9IGFscGhhO1xuICB9XG5cbiAgQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjYXRtdWxsUm9tT3BlbiA9IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgMCk7XG4gICAgfVxuXG4gICAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjYXRtdWxsUm9tO1xuICB9KSgwLjUpO1xuXG4gIGZ1bmN0aW9uIExpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBMaW5lYXJDbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCxcbiAgICBhcmVhRW5kOiBub29wLFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICBlbHNlIHRoaXMuX3BvaW50ID0gMSwgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBMaW5lYXJDbG9zZWQoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuICAvLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuICAvLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4gIC8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbiAgZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICAgIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gICAgcmV0dXJuIChzaWduKHMwKSArIHNpZ24oczEpKSAqIE1hdGgubWluKE1hdGguYWJzKHMwKSwgTWF0aC5hYnMoczEpLCAwLjUgKiBNYXRoLmFicyhwKSkgfHwgMDtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbiAgZnVuY3Rpb24gc2xvcGUyKHRoYXQsIHQpIHtcbiAgICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gICAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xuICB9XG5cbiAgLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuICAvLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbiAgLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxuICBmdW5jdGlvbiBwb2ludCQzKHRoYXQsIHQwLCB0MSkge1xuICAgIHZhciB4MCA9IHRoYXQuX3gwLFxuICAgICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIE1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgICB0aGlzLl90MCA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHBvaW50JDModGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgdDEgPSBOYU47XG5cbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgcG9pbnQkMyh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiBwb2ludCQzKHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgICB0aGlzLl90MCA9IHQxO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIChNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIFJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gICAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHsgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTsgfSxcbiAgICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gICAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBOYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feCA9IFtdO1xuICAgICAgdGhpcy5feSA9IFtdO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgICAgbiA9IHgubGVuZ3RoO1xuXG4gICAgICBpZiAobikge1xuICAgICAgICB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeFswXSwgeVswXSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4WzBdLCB5WzBdKTtcbiAgICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxuICAgICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDE7IGkxIDwgbjsgKytpMCwgKytpMSkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgbiA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICAgIHRoaXMuX3kucHVzaCgreSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXG4gIGZ1bmN0aW9uIGNvbnRyb2xQb2ludHMoeCkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0geC5sZW5ndGggLSAxLFxuICAgICAgICBtLFxuICAgICAgICBhID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pO1xuICAgIGFbMF0gPSAwLCBiWzBdID0gMiwgclswXSA9IHhbMF0gKyAyICogeFsxXTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XG4gICAgYVtuIC0gMV0gPSAyLCBiW24gLSAxXSA9IDcsIHJbbiAtIDFdID0gOCAqIHhbbiAtIDFdICsgeFtuXTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSBtID0gYVtpXSAvIGJbaSAtIDFdLCBiW2ldIC09IG0sIHJbaV0gLT0gbSAqIHJbaSAtIDFdO1xuICAgIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyAtLWkpIGFbaV0gPSAocltpXSAtIGFbaSArIDFdKSAvIGJbaV07XG4gICAgYltuIC0gMV0gPSAoeFtuXSArIGFbbiAtIDFdKSAvIDI7XG4gICAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcbiAgICByZXR1cm4gW2EsIGJdO1xuICB9XG5cbiAgZnVuY3Rpb24gbmF0dXJhbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBOYXR1cmFsKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gU3RlcChjb250ZXh0LCB0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fdCA9IHQ7XG4gIH1cblxuICBTdGVwLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgwIDwgdGhpcy5fdCAmJiB0aGlzLl90IDwgMSAmJiB0aGlzLl9wb2ludCA9PT0gMikgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgdGhpcy5feSk7XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGlmICh0aGlzLl90IDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgdGhpcy5feSk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl94ID0geCwgdGhpcy5feSA9IHk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0ZXAoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwLjUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcEJlZm9yZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcEFmdGVyKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG4gIH1cblxuICB2YXIgc2xpY2UkMiA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBub25lKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgICBmb3IgKHZhciBpID0gMSwgczAsIHMxID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMxLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgczAgPSBzMSwgczEgPSBzZXJpZXNbb3JkZXJbaV1dO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vbmUkMShzZXJpZXMpIHtcbiAgICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsIG8gPSBuZXcgQXJyYXkobik7XG4gICAgd2hpbGUgKC0tbiA+PSAwKSBvW25dID0gbjtcbiAgICByZXR1cm4gbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gICAgcmV0dXJuIGRba2V5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YWNrKCkge1xuICAgIHZhciBrZXlzID0gY29uc3RhbnQkMShbXSksXG4gICAgICAgIG9yZGVyID0gbm9uZSQxLFxuICAgICAgICBvZmZzZXQgPSBub25lLFxuICAgICAgICB2YWx1ZSA9IHN0YWNrVmFsdWU7XG5cbiAgICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgICB2YXIga3ogPSBrZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgaSxcbiAgICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgbiA9IGt6Lmxlbmd0aCxcbiAgICAgICAgICBzeiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBvejtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciBraSA9IGt6W2ldLCBzaSA9IHN6W2ldID0gbmV3IEFycmF5KG0pLCBqID0gMCwgc2lqOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgICAgc2lqLmRhdGEgPSBkYXRhW2pdO1xuICAgICAgICB9XG4gICAgICAgIHNpLmtleSA9IGtpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBveiA9IG9yZGVyKHN6KTsgaSA8IG47ICsraSkge1xuICAgICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgICAgfVxuXG4gICAgICBvZmZzZXQoc3osIG96KTtcbiAgICAgIHJldHVybiBzejtcbiAgICB9XG5cbiAgICBzdGFjay5rZXlzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMShzbGljZSQyLmNhbGwoXykpLCBzdGFjaykgOiBrZXlzO1xuICAgIH07XG5cbiAgICBzdGFjay52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgc3RhY2spIDogdmFsdWU7XG4gICAgfTtcblxuICAgIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3JkZXIgPSBfID09IG51bGwgPyBub25lJDEgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoc2xpY2UkMi5jYWxsKF8pKSwgc3RhY2spIDogb3JkZXI7XG4gICAgfTtcblxuICAgIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG9mZnNldCA9IF8gPT0gbnVsbCA/IG5vbmUgOiBfLCBzdGFjaykgOiBvZmZzZXQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzdGFjaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cGFuZChzZXJpZXMsIG9yZGVyKSB7XG4gICAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gICAgZm9yICh2YXIgaSwgbiwgaiA9IDAsIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCB5OyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHkgPSBpID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICAgIGlmICh5KSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzZXJpZXNbaV1bal1bMV0gLz0geTtcbiAgICB9XG4gICAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbGhvdWV0dGUoc2VyaWVzLCBvcmRlcikge1xuICAgIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBzMCA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMC5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCB5ID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICAgIHMwW2pdWzFdICs9IHMwW2pdWzBdID0gLXkgLyAyO1xuICAgIH1cbiAgICBub25lKHNlcmllcywgb3JkZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lnZ2xlKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkgfHwgISgobSA9IChzMCA9IHNlcmllc1tvcmRlclswXV0pLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICAgIGZvciAodmFyIHkgPSAwLCBqID0gMSwgczAsIG0sIG47IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBzMSA9IDAsIHMyID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICB2YXIgc2kgPSBzZXJpZXNbb3JkZXJbaV1dLFxuICAgICAgICAgICAgc2lqMCA9IHNpW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICBzaWoxID0gc2lbaiAtIDFdWzFdIHx8IDAsXG4gICAgICAgICAgICBzMyA9IChzaWowIC0gc2lqMSkgLyAyO1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGk7ICsraykge1xuICAgICAgICAgIHZhciBzayA9IHNlcmllc1tvcmRlcltrXV0sXG4gICAgICAgICAgICAgIHNrajAgPSBza1tqXVsxXSB8fCAwLFxuICAgICAgICAgICAgICBza2oxID0gc2tbaiAtIDFdWzFdIHx8IDA7XG4gICAgICAgICAgczMgKz0gc2tqMCAtIHNrajE7XG4gICAgICAgIH1cbiAgICAgICAgczEgKz0gc2lqMCwgczIgKz0gczMgKiBzaWowO1xuICAgICAgfVxuICAgICAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gICAgICBpZiAoczEpIHkgLT0gczIgLyBzMTtcbiAgICB9XG4gICAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gICAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzY2VuZGluZyQxKHNlcmllcykge1xuICAgIHZhciBzdW1zID0gc2VyaWVzLm1hcChzdW0kMSk7XG4gICAgcmV0dXJuIG5vbmUkMShzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc3Vtc1thXSAtIHN1bXNbYl07IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3VtJDEoc2VyaWVzKSB7XG4gICAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAodiA9ICtzZXJpZXNbaV1bMV0pIHMgKz0gdjtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc2NlbmRpbmckMihzZXJpZXMpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nJDEoc2VyaWVzKS5yZXZlcnNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNpZGVPdXQoc2VyaWVzKSB7XG4gICAgdmFyIG4gPSBzZXJpZXMubGVuZ3RoLFxuICAgICAgICBpLFxuICAgICAgICBqLFxuICAgICAgICBzdW1zID0gc2VyaWVzLm1hcChzdW0kMSksXG4gICAgICAgIG9yZGVyID0gbm9uZSQxKHNlcmllcykuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzdW1zW2JdIC0gc3Vtc1thXTsgfSksXG4gICAgICAgIHRvcCA9IDAsXG4gICAgICAgIGJvdHRvbSA9IDAsXG4gICAgICAgIHRvcHMgPSBbXSxcbiAgICAgICAgYm90dG9tcyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaiA9IG9yZGVyW2ldO1xuICAgICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgICB0b3AgKz0gc3Vtc1tqXTtcbiAgICAgICAgdG9wcy5wdXNoKGopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm90dG9tICs9IHN1bXNbal07XG4gICAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYm90dG9tcy5yZXZlcnNlKCkuY29uY2F0KHRvcHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJzZShzZXJpZXMpIHtcbiAgICByZXR1cm4gbm9uZSQxKHNlcmllcykucmV2ZXJzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmaW5lKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gICAgcmV0dXJuIHByb3RvdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbG9yKCkge31cblxuICB2YXIgZGFya2VyID0gMC43O1xuICB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG4gIHZhciByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC87XG4gIHZhciByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC87XG4gIHZhciByZVJnYkludGVnZXIgPSAvXnJnYlxcKFxccyooWy0rXT9cXGQrKVxccyosXFxzKihbLStdP1xcZCspXFxzKixcXHMqKFstK10/XFxkKylcXHMqXFwpJC87XG4gIHZhciByZVJnYlBlcmNlbnQgPSAvXnJnYlxcKFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqXFwpJC87XG4gIHZhciByZVJnYmFJbnRlZ2VyID0gL15yZ2JhXFwoXFxzKihbLStdP1xcZCspXFxzKixcXHMqKFstK10/XFxkKylcXHMqLFxccyooWy0rXT9cXGQrKVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKlxcKSQvO1xuICB2YXIgcmVSZ2JhUGVyY2VudCA9IC9ecmdiYVxcKFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KVxccypcXCkkLztcbiAgdmFyIHJlSHNsUGVyY2VudCA9IC9eaHNsXFwoXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKlxcKSQvO1xuICB2YXIgcmVIc2xhUGVyY2VudCA9IC9eaHNsYVxcKFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKlxcKSQvO1xuICB2YXIgbmFtZWQgPSB7XG4gICAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICAgIGFxdWE6IDB4MDBmZmZmLFxuICAgIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICAgIGF6dXJlOiAweGYwZmZmZixcbiAgICBiZWlnZTogMHhmNWY1ZGMsXG4gICAgYmlzcXVlOiAweGZmZTRjNCxcbiAgICBibGFjazogMHgwMDAwMDAsXG4gICAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICAgIGJsdWU6IDB4MDAwMGZmLFxuICAgIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICAgIGJyb3duOiAweGE1MmEyYSxcbiAgICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICAgIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gICAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gICAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgICBjb3JhbDogMHhmZjdmNTAsXG4gICAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICAgIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgICBjcmltc29uOiAweGRjMTQzYyxcbiAgICBjeWFuOiAweDAwZmZmZixcbiAgICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gICAgZGFya2N5YW46IDB4MDA4YjhiLFxuICAgIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICAgIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICAgIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICAgIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gICAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gICAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gICAgZGFya3JlZDogMHg4YjAwMDAsXG4gICAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gICAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgICBkZWVwcGluazogMHhmZjE0OTMsXG4gICAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICAgIGRpbWdyYXk6IDB4Njk2OTY5LFxuICAgIGRpbWdyZXk6IDB4Njk2OTY5LFxuICAgIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICAgIGZpcmVicmljazogMHhiMjIyMjIsXG4gICAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICAgIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgICBmdWNoc2lhOiAweGZmMDBmZixcbiAgICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICAgIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICAgIGdvbGQ6IDB4ZmZkNzAwLFxuICAgIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gICAgZ3JheTogMHg4MDgwODAsXG4gICAgZ3JlZW46IDB4MDA4MDAwLFxuICAgIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgICBncmV5OiAweDgwODA4MCxcbiAgICBob25leWRldzogMHhmMGZmZjAsXG4gICAgaG90cGluazogMHhmZjY5YjQsXG4gICAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgICBpbmRpZ286IDB4NGIwMDgyLFxuICAgIGl2b3J5OiAweGZmZmZmMCxcbiAgICBraGFraTogMHhmMGU2OGMsXG4gICAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICAgIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICAgIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gICAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICAgIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICAgIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICAgIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gICAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gICAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICAgIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICAgIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gICAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICAgIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgICBsaW1lOiAweDAwZmYwMCxcbiAgICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICAgIGxpbmVuOiAweGZhZjBlNixcbiAgICBtYWdlbnRhOiAweGZmMDBmZixcbiAgICBtYXJvb246IDB4ODAwMDAwLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICAgIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICAgIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gICAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gICAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gICAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICAgIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gICAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICAgIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gICAgbmF2eTogMHgwMDAwODAsXG4gICAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gICAgb2xpdmU6IDB4ODA4MDAwLFxuICAgIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gICAgb3JhbmdlOiAweGZmYTUwMCxcbiAgICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICAgIG9yY2hpZDogMHhkYTcwZDYsXG4gICAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gICAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICAgIHBlcnU6IDB4Y2Q4NTNmLFxuICAgIHBpbms6IDB4ZmZjMGNiLFxuICAgIHBsdW06IDB4ZGRhMGRkLFxuICAgIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICAgIHB1cnBsZTogMHg4MDAwODAsXG4gICAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gICAgcmVkOiAweGZmMDAwMCxcbiAgICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICAgIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gICAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICAgIHNhbG1vbjogMHhmYTgwNzIsXG4gICAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gICAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICAgIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgICBzaWVubmE6IDB4YTA1MjJkLFxuICAgIHNpbHZlcjogMHhjMGMwYzAsXG4gICAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gICAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICAgIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gICAgc25vdzogMHhmZmZhZmEsXG4gICAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICAgIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gICAgdGFuOiAweGQyYjQ4YyxcbiAgICB0ZWFsOiAweDAwODA4MCxcbiAgICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgICB0b21hdG86IDB4ZmY2MzQ3LFxuICAgIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gICAgdmlvbGV0OiAweGVlODJlZSxcbiAgICB3aGVhdDogMHhmNWRlYjMsXG4gICAgd2hpdGU6IDB4ZmZmZmZmLFxuICAgIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICAgIHllbGxvdzogMHhmZmZmMDAsXG4gICAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG4gIH07XG5cbiAgZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICAgIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZ2IoKSArIFwiXCI7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgICB2YXIgbTtcbiAgICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIChtID0gcmVIZXgzLmV4ZWMoZm9ybWF0KSkgPyAobSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweDBmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkpIC8vICNmMDBcbiAgICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgICAgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gcmdibihuKSB7XG4gICAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICAgIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICAgIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICAgIG8gPSBvLnJnYigpO1xuICAgIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvclJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICAgIHRoaXMuciA9ICtyO1xuICAgIHRoaXMuZyA9ICtnO1xuICAgIHRoaXMuYiA9ICtiO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKFJnYiwgY29sb3JSZ2IsIGV4dGVuZChDb2xvciwge1xuICAgIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKDAgPD0gdGhpcy5yICYmIHRoaXMuciA8PSAyNTUpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5iICYmIHRoaXMuYiA8PSAyNTUpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgICB9XG4gIH0pKTtcblxuICBmdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gICAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gICAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICAgIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICAgIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICAgIG8gPSBvLnJnYigpO1xuICAgIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICAgIGggPSBOYU4sXG4gICAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgaWYgKHMpIHtcbiAgICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICAgIGggKj0gNjA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29sb3JIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgICB0aGlzLmggPSAraDtcbiAgICB0aGlzLnMgPSArcztcbiAgICB0aGlzLmwgPSArbDtcbiAgICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbiAgfVxuXG4gIGRlZmluZShIc2wsIGNvbG9ySHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgICB0aGlzLm9wYWNpdHlcbiAgICAgICk7XG4gICAgfSxcbiAgICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gICAgfVxuICB9KSk7XG5cbiAgLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuICBmdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICAgIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgICA6IG0xKSAqIDI1NTtcbiAgfVxuXG4gIHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbiAgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuXG4gIHZhciBLbiA9IDE4O1xuICB2YXIgWG4gPSAwLjk1MDQ3MDtcbiAgdmFyIFluID0gMTtcbiAgdmFyIFpuID0gMS4wODg4MzA7XG4gIHZhciB0MCA9IDQgLyAyOTtcbiAgdmFyIHQxID0gNiAvIDI5O1xuICB2YXIgdDIgPSAzICogdDEgKiB0MTtcbiAgdmFyIHQzID0gdDEgKiB0MSAqIHQxO1xuICBmdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgICAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG4gICAgfVxuICAgIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgICB2YXIgYiA9IHJnYjJ4eXooby5yKSxcbiAgICAgICAgYSA9IHJnYjJ4eXooby5nKSxcbiAgICAgICAgbCA9IHJnYjJ4eXooby5iKSxcbiAgICAgICAgeCA9IHh5ejJsYWIoKDAuNDEyNDU2NCAqIGIgKyAwLjM1NzU3NjEgKiBhICsgMC4xODA0Mzc1ICogbCkgLyBYbiksXG4gICAgICAgIHkgPSB4eXoybGFiKCgwLjIxMjY3MjkgKiBiICsgMC43MTUxNTIyICogYSArIDAuMDcyMTc1MCAqIGwpIC8gWW4pLFxuICAgICAgICB6ID0geHl6MmxhYigoMC4wMTkzMzM5ICogYiArIDAuMTE5MTkyMCAqIGEgKyAwLjk1MDMwNDEgKiBsKSAvIFpuKTtcbiAgICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgICB0aGlzLmwgPSArbDtcbiAgICB0aGlzLmEgPSArYTtcbiAgICB0aGlzLmIgPSArYjtcbiAgICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbiAgfVxuXG4gIGRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCAtIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgICB4eXoycmdiKCAzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIDAuNDk4NTMxNCAqIHopLCAvLyBENjUgLT4gc1JHQlxuICAgICAgICB4eXoycmdiKC0wLjk2OTI2NjAgKiB4ICsgMS44NzYwMTA4ICogeSArIDAuMDQxNTU2MCAqIHopLFxuICAgICAgICB4eXoycmdiKCAwLjA1NTY0MzQgKiB4IC0gMC4yMDQwMjU5ICogeSArIDEuMDU3MjI1MiAqIHopLFxuICAgICAgICB0aGlzLm9wYWNpdHlcbiAgICAgICk7XG4gICAgfVxuICB9KSk7XG5cbiAgZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gICAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xuICB9XG5cbiAgZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gICAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG4gIH1cblxuICBmdW5jdGlvbiB4eXoycmdiKHgpIHtcbiAgICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJnYjJ4eXooeCkge1xuICAgIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICAgIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICAgIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvckhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICAgIHRoaXMuaCA9ICtoO1xuICAgIHRoaXMuYyA9ICtjO1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKEhjbCwgY29sb3JIY2wsIGV4dGVuZChDb2xvciwge1xuICAgIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICAgIH1cbiAgfSkpO1xuXG4gIHZhciBBID0gLTAuMTQ4NjE7XG4gIHZhciBCID0gKzEuNzgyNzc7XG4gIHZhciBDID0gLTAuMjkyMjc7XG4gIHZhciBEID0gLTAuOTA2NDk7XG4gIHZhciBFID0gKzEuOTcyOTQ7XG4gIHZhciBFRCA9IEUgKiBEO1xuICB2YXIgRUIgPSBFICogQjtcbiAgdmFyIEJDX0RBID0gQiAqIEMgLSBEICogQTtcbiAgZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICAgIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgICAgYmwgPSBiIC0gbCxcbiAgICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICAgIHRoaXMuaCA9ICtoO1xuICAgIHRoaXMucyA9ICtzO1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgICB0aGlzLm9wYWNpdHlcbiAgICAgICk7XG4gICAgfVxuICB9KSk7XG5cbiAgZnVuY3Rpb24gYmFzaXMkMSh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gICAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgICArIHQzICogdjMpIC8gNjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJhc2lzJDIodmFsdWVzKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICAgIHJldHVybiBiYXNpcyQxKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBiYXNpc0Nsb3NlZCQxKHZhbHVlcykge1xuICAgIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgICByZXR1cm4gYmFzaXMkMSgodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMih4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhciQxKGEsIGQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwb25lbnRpYWwkMShhLCBiLCB5KSB7XG4gICAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgICB2YXIgZCA9IGIgLSBhO1xuICAgIHJldHVybiBkID8gbGluZWFyJDEoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudCQyKGlzTmFOKGEpID8gYiA6IGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICAgIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbCQxKGEsIGIsIHkpIDogY29uc3RhbnQkMihpc05hTihhKSA/IGIgOiBhKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gICAgdmFyIGQgPSBiIC0gYTtcbiAgICByZXR1cm4gZCA/IGxpbmVhciQxKGEsIGQpIDogY29uc3RhbnQkMihpc05hTihhKSA/IGIgOiBhKTtcbiAgfVxuXG4gIHZhciBpbnRlcnBvbGF0ZVJnYiA9IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gICAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICAgIHJldHVybiByZ2I7XG4gIH0pKDEpO1xuXG4gIGZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgaSwgY29sb3I7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICAgIH1cbiAgICAgIHIgPSBzcGxpbmUocik7XG4gICAgICBnID0gc3BsaW5lKGcpO1xuICAgICAgYiA9IHNwbGluZShiKTtcbiAgICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyQyKTtcbiAgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkJDEpO1xuXG4gIGZ1bmN0aW9uIGFycmF5JDEoYSwgYikge1xuICAgIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgICB4ID0gbmV3IEFycmF5KG5iKSxcbiAgICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IGludGVycG9sYXRlKGFbaV0sIGJbaV0pO1xuICAgIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRhdGUoYSwgYikge1xuICAgIHZhciBkID0gbmV3IERhdGU7XG4gICAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZC5zZXRUaW1lKGEgKyBiICogdCksIGQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBhICsgYiAqIHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9iamVjdChhLCBiKSB7XG4gICAgdmFyIGkgPSB7fSxcbiAgICAgICAgYyA9IHt9LFxuICAgICAgICBrO1xuXG4gICAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gICAgZm9yIChrIGluIGIpIHtcbiAgICAgIGlmIChrIGluIGEpIHtcbiAgICAgICAgaVtrXSA9IGludGVycG9sYXRlKGFba10sIGJba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY1trXSA9IGJba107XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cblxuICB2YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nO1xuICB2YXIgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG4gIGZ1bmN0aW9uIHplcm8oYikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBvbmUoYikge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlU3RyaW5nKGEsIGIpIHtcbiAgICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gICAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICAgIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gICAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICAgIH1cbiAgICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgICAgcS5wdXNoKHtpOiBpLCB4OiBpbnRlcnBvbGF0ZU51bWJlcihhbSwgYm0pfSk7XG4gICAgICB9XG4gICAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICAgIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgICA/IG9uZShxWzBdLngpXG4gICAgICAgIDogemVybyhiKSlcbiAgICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGEsIGIpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICAgIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudCQyKGIpXG4gICAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKSA6IGludGVycG9sYXRlU3RyaW5nKVxuICAgICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5JDFcbiAgICAgICAgOiBpc05hTihiKSA/IG9iamVjdFxuICAgICAgICA6IGludGVycG9sYXRlTnVtYmVyKShhLCBiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlUm91bmQoYSwgYikge1xuICAgIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG4gIHZhciBpZGVudGl0eSQyID0ge1xuICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgdHJhbnNsYXRlWTogMCxcbiAgICByb3RhdGU6IDAsXG4gICAgc2tld1g6IDAsXG4gICAgc2NhbGVYOiAxLFxuICAgIHNjYWxlWTogMVxuICB9O1xuXG4gIGZ1bmN0aW9uIGRlY29tcG9zZShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gICAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICAgIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICAgIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgICB0cmFuc2xhdGVZOiBmLFxuICAgICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICAgIHNjYWxlWDogc2NhbGVYLFxuICAgICAgc2NhbGVZOiBzY2FsZVlcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNzc05vZGU7XG4gIHZhciBjc3NSb290O1xuICB2YXIgY3NzVmlldztcbiAgdmFyIHN2Z05vZGU7XG4gIGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5JDI7XG4gICAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gICAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5JDI7XG4gICAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICAgIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eSQyO1xuICAgIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICAgIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICAgIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBpbnRlcnBvbGF0ZU51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBpbnRlcnBvbGF0ZU51bWJlcih5YSwgeWIpfSk7XG4gICAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogaW50ZXJwb2xhdGVOdW1iZXIoYSwgYil9KTtcbiAgICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IGludGVycG9sYXRlTnVtYmVyKGEsIGIpfSk7XG4gICAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBpbnRlcnBvbGF0ZU51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBpbnRlcnBvbGF0ZU51bWJlcih5YSwgeWIpfSk7XG4gICAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG4gIHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQyID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcblxuICB2YXIgcmhvID0gTWF0aC5TUVJUMjtcbiAgdmFyIHJobzIgPSAyO1xuICB2YXIgcmhvNCA9IDQ7XG4gIHZhciBlcHNpbG9uMiA9IDFlLTEyO1xuICBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG4gIH1cblxuICAvLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4gIC8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVab29tKHAwLCBwMSkge1xuICAgIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgICBpLFxuICAgICAgICBTO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gICAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdlbmVyYWwgY2FzZS5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHNsKGh1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhzbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhzbChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gbm9nYW1tYShzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgaHNsJDEgPSBoc2woaHVlKTtcbiAgdmFyIGhzbExvbmcgPSBoc2wobm9nYW1tYSk7XG5cbiAgZnVuY3Rpb24gbGFiJDEoc3RhcnQsIGVuZCkge1xuICAgIHZhciBsID0gbm9nYW1tYSgoc3RhcnQgPSBsYWIoc3RhcnQpKS5sLCAoZW5kID0gbGFiKGVuZCkpLmwpLFxuICAgICAgICBhID0gbm9nYW1tYShzdGFydC5hLCBlbmQuYSksXG4gICAgICAgIGIgPSBub2dhbW1hKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0LmEgPSBhKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhjbChodWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIY2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIY2woZW5kKSkuaCksXG4gICAgICAgICAgYyA9IG5vZ2FtbWEoc3RhcnQuYywgZW5kLmMpLFxuICAgICAgICAgIGwgPSBub2dhbW1hKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGhjbCQxID0gaGNsKGh1ZSk7XG4gIHZhciBoY2xMb25nID0gaGNsKG5vZ2FtbWEpO1xuXG4gIGZ1bmN0aW9uIGN1YmVoZWxpeCQxKGh1ZSkge1xuICAgIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgICAgeSA9ICt5O1xuXG4gICAgICBmdW5jdGlvbiBjdWJlaGVsaXgkJChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgICBzID0gbm9nYW1tYShzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGN1YmVoZWxpeCQkLmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICAgIHJldHVybiBjdWJlaGVsaXgkJDtcbiAgICB9KSgxKTtcbiAgfVxuXG4gIHZhciBjdWJlaGVsaXgkMiA9IGN1YmVoZWxpeCQxKGh1ZSk7XG4gIHZhciBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgkMShub2dhbW1hKTtcblxuICBmdW5jdGlvbiBxdWFudGl6ZShpbnRlcnBvbGF0b3IsIG4pIHtcbiAgICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgc2FtcGxlc1tpXSA9IGludGVycG9sYXRvcihpIC8gKG4gLSAxKSk7XG4gICAgcmV0dXJuIHNhbXBsZXM7XG4gIH1cblxuICB2YXIgbm9vcCQxID0ge3ZhbHVlOiBmdW5jdGlvbigpIHt9fTtcblxuICBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgICBfW3RdID0gW107XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG4gIH1cblxuICBmdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gICAgdGhpcy5fID0gXztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICAgIH0pO1xuICB9XG5cbiAgRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgICB0LFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldCQxKF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQkMShfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldCQxKHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICB0eXBlW2ldID0gbm9vcCQxLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG4gIGZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gICAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICAgIGNvbHVtbnMgPSBbXTtcblxuICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29sdW1ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXVwiKSxcbiAgICAgICAgZGVsaW1pdGVyQ29kZSA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gICAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgICAgfSk7XG4gICAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zO1xuICAgICAgcmV0dXJuIHJvd3M7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICAgIHZhciBFT0wgPSB7fSwgLy8gc2VudGluZWwgdmFsdWUgZm9yIGVuZC1vZi1saW5lXG4gICAgICAgICAgRU9GID0ge30sIC8vIHNlbnRpbmVsIHZhbHVlIGZvciBlbmQtb2YtZmlsZVxuICAgICAgICAgIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgICAgbiA9IDAsIC8vIHRoZSBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgICAgdCwgLy8gdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgICBlb2w7IC8vIGlzIHRoZSBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7IC8vIHNwZWNpYWwgY2FzZTogZW5kIG9mIGZpbGVcbiAgICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7IC8vIHNwZWNpYWwgY2FzZTogZW5kIG9mIGxpbmVcblxuICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IHF1b3Rlc1xuICAgICAgICB2YXIgaiA9IEksIGM7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG4gICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgICBjID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICBpZiAoYyA9PT0gMTMpIHtcbiAgICAgICAgICAgIGVvbCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAyKSA9PT0gMTApICsrSTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDEwKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21tb24gY2FzZTogZmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lXG4gICAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICAgIHZhciBrID0gMTtcbiAgICAgICAgICBjID0gdGV4dC5jaGFyQ29kZUF0KEkrKyk7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyAvLyBcXG5cbiAgICAgICAgICBlbHNlIGlmIChjID09PSAxMykgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSAxMCkgKytJLCArK2s7IH0gLy8gXFxyfFxcclxcblxuICAgICAgICAgIGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIEkgLSBrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZTogbGFzdCB0b2tlbiBiZWZvcmUgRU9GXG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGopO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICAgIHZhciBhID0gW107XG4gICAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSB7XG4gICAgICAgICAgYS5wdXNoKHQpO1xuICAgICAgICAgIHQgPSB0b2tlbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmICYmIChhID0gZihhLCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgcm93cy5wdXNoKGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcm93cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0Um93cyhyb3dzKSB7XG4gICAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcbiAgICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodGV4dCkge1xuICAgICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgICA6IHJlRm9ybWF0LnRlc3QodGV4dCArPSBcIlwiKSA/IFwiXFxcIlwiICsgdGV4dC5yZXBsYWNlKC9cXFwiL2csIFwiXFxcIlxcXCJcIikgKyBcIlxcXCJcIlxuICAgICAgICAgIDogdGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2U6IHBhcnNlLFxuICAgICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNzdiA9IGRzdihcIixcIik7XG5cbiAgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuICB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbiAgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG4gIHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG5cbiAgdmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuICB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG4gIHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuICB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbiAgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcblxuICBmdW5jdGlvbiByZXF1ZXN0KHVybCwgY2FsbGJhY2spIHtcbiAgICB2YXIgcmVxdWVzdCxcbiAgICAgICAgZXZlbnQgPSBkaXNwYXRjaChcImJlZm9yZXNlbmRcIiwgXCJwcm9ncmVzc1wiLCBcImxvYWRcIiwgXCJlcnJvclwiKSxcbiAgICAgICAgbWltZVR5cGUsXG4gICAgICAgIGhlYWRlcnMgPSBtYXAkMSgpLFxuICAgICAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QsXG4gICAgICAgIHVzZXIgPSBudWxsLFxuICAgICAgICBwYXNzd29yZCA9IG51bGwsXG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgICByZXNwb25zZVR5cGUsXG4gICAgICAgIHRpbWVvdXQgPSAwO1xuXG4gICAgLy8gSWYgSUUgZG9lcyBub3Qgc3VwcG9ydCBDT1JTLCB1c2UgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAmJiAhKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKVxuICAgICAgICAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3Q7XG5cbiAgICBcIm9ubG9hZFwiIGluIHhoclxuICAgICAgICA/IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSByZXNwb25kXG4gICAgICAgIDogeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKG8pIHsgeGhyLnJlYWR5U3RhdGUgPiAzICYmIHJlc3BvbmQobyk7IH07XG5cbiAgICBmdW5jdGlvbiByZXNwb25kKG8pIHtcbiAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzLCByZXN1bHQ7XG4gICAgICBpZiAoIXN0YXR1cyAmJiBoYXNSZXNwb25zZSh4aHIpXG4gICAgICAgICAgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDBcbiAgICAgICAgICB8fCBzdGF0dXMgPT09IDMwNCkge1xuICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzcG9uc2UuY2FsbChyZXF1ZXN0LCB4aHIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0geGhyO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LmNhbGwoXCJsb2FkXCIsIHJlcXVlc3QsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC5jYWxsKFwiZXJyb3JcIiwgcmVxdWVzdCwgbyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbihlKSB7XG4gICAgICBldmVudC5jYWxsKFwicHJvZ3Jlc3NcIiwgcmVxdWVzdCwgZSk7XG4gICAgfTtcblxuICAgIHJlcXVlc3QgPSB7XG4gICAgICBoZWFkZXI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIG5hbWUgPSAobmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgaGVhZGVycy5yZW1vdmUobmFtZSk7XG4gICAgICAgIGVsc2UgaGVhZGVycy5zZXQobmFtZSwgdmFsdWUgKyBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICAvLyBJZiBtaW1lVHlwZSBpcyBub24tbnVsbCBhbmQgbm8gQWNjZXB0IGhlYWRlciBpcyBzZXQsIGEgZGVmYXVsdCBpcyB1c2VkLlxuICAgICAgbWltZVR5cGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1pbWVUeXBlO1xuICAgICAgICBtaW1lVHlwZSA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIFNwZWNpZmllcyB3aGF0IHR5cGUgdGhlIHJlc3BvbnNlIHZhbHVlIHNob3VsZCB0YWtlO1xuICAgICAgLy8gZm9yIGluc3RhbmNlLCBhcnJheWJ1ZmZlciwgYmxvYiwgZG9jdW1lbnQsIG9yIHRleHQuXG4gICAgICByZXNwb25zZVR5cGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJlc3BvbnNlVHlwZTtcbiAgICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgICAgfSxcblxuICAgICAgdGltZW91dDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGltZW91dDtcbiAgICAgICAgdGltZW91dCA9ICt2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICB1c2VyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyB1c2VyIDogKHVzZXIgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIiwgcmVxdWVzdCk7XG4gICAgICB9LFxuXG4gICAgICBwYXNzd29yZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAxID8gcGFzc3dvcmQgOiAocGFzc3dvcmQgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIiwgcmVxdWVzdCk7XG4gICAgICB9LFxuXG4gICAgICAvLyBTcGVjaWZ5IGhvdyB0byBjb252ZXJ0IHRoZSByZXNwb25zZSBjb250ZW50IHRvIGEgc3BlY2lmaWMgdHlwZTtcbiAgICAgIC8vIGNoYW5nZXMgdGhlIGNhbGxiYWNrIHZhbHVlIG9uIFwibG9hZFwiIGV2ZW50cy5cbiAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXNwb25zZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEFsaWFzIGZvciBzZW5kKFwiR0VUXCIsIOKApikuXG4gICAgICBnZXQ6IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0LnNlbmQoXCJHRVRcIiwgZGF0YSwgY2FsbGJhY2spO1xuICAgICAgfSxcblxuICAgICAgLy8gQWxpYXMgZm9yIHNlbmQoXCJQT1NUXCIsIOKApikuXG4gICAgICBwb3N0OiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdC5zZW5kKFwiUE9TVFwiLCBkYXRhLCBjYWxsYmFjayk7XG4gICAgICB9LFxuXG4gICAgICAvLyBJZiBjYWxsYmFjayBpcyBub24tbnVsbCwgaXQgd2lsbCBiZSB1c2VkIGZvciBlcnJvciBhbmQgbG9hZCBldmVudHMuXG4gICAgICBzZW5kOiBmdW5jdGlvbihtZXRob2QsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlLCB1c2VyLCBwYXNzd29yZCk7XG4gICAgICAgIGlmIChtaW1lVHlwZSAhPSBudWxsICYmICFoZWFkZXJzLmhhcyhcImFjY2VwdFwiKSkgaGVhZGVycy5zZXQoXCJhY2NlcHRcIiwgbWltZVR5cGUgKyBcIiwqLypcIik7XG4gICAgICAgIGlmICh4aHIuc2V0UmVxdWVzdEhlYWRlcikgaGVhZGVycy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTsgfSk7XG4gICAgICAgIGlmIChtaW1lVHlwZSAhPSBudWxsICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKSB4aHIub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgIT0gbnVsbCkgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB4aHIudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsICYmIHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrID0gZGF0YSwgZGF0YSA9IG51bGw7XG4gICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkgY2FsbGJhY2sgPSBmaXhDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSByZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgY2FsbGJhY2spLm9uKFwibG9hZFwiLCBmdW5jdGlvbih4aHIpIHsgY2FsbGJhY2sobnVsbCwgeGhyKTsgfSk7XG4gICAgICAgIGV2ZW50LmNhbGwoXCJiZWZvcmVzZW5kXCIsIHJlcXVlc3QsIHhocik7XG4gICAgICAgIHhoci5zZW5kKGRhdGEgPT0gbnVsbCA/IG51bGwgOiBkYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIG9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZXZlbnQub24uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gZXZlbnQgPyByZXF1ZXN0IDogdmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHJlcXVlc3QuZ2V0KGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpeENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yLCB4aHIpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyB4aHIgOiBudWxsKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzUmVzcG9uc2UoeGhyKSB7XG4gICAgdmFyIHR5cGUgPSB4aHIucmVzcG9uc2VUeXBlO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiXG4gICAgICAgID8geGhyLnJlc3BvbnNlIC8vIG51bGwgb24gZXJyb3JcbiAgICAgICAgOiB4aHIucmVzcG9uc2VUZXh0OyAvLyBcIlwiIG9uIGVycm9yXG4gIH1cblxuICBmdW5jdGlvbiB0eXBlKGRlZmF1bHRNaW1lVHlwZSwgcmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHIgPSByZXF1ZXN0KHVybCkubWltZVR5cGUoZGVmYXVsdE1pbWVUeXBlKS5yZXNwb25zZShyZXNwb25zZSk7XG4gICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gci5nZXQoY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBodG1sID0gdHlwZShcInRleHQvaHRtbFwiLCBmdW5jdGlvbih4aHIpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoeGhyLnJlc3BvbnNlVGV4dCk7XG4gIH0pO1xuXG4gIHZhciBqc29uID0gdHlwZShcImFwcGxpY2F0aW9uL2pzb25cIiwgZnVuY3Rpb24oeGhyKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gIH0pO1xuXG4gIHZhciB0ZXh0ID0gdHlwZShcInRleHQvcGxhaW5cIiwgZnVuY3Rpb24oeGhyKSB7XG4gICAgcmV0dXJuIHhoci5yZXNwb25zZVRleHQ7XG4gIH0pO1xuXG4gIHZhciB4bWwgPSB0eXBlKFwiYXBwbGljYXRpb24veG1sXCIsIGZ1bmN0aW9uKHhocikge1xuICAgIHZhciB4bWwgPSB4aHIucmVzcG9uc2VYTUw7XG4gICAgaWYgKCF4bWwpIHRocm93IG5ldyBFcnJvcihcInBhcnNlIGVycm9yXCIpO1xuICAgIHJldHVybiB4bWw7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRzdiQxKGRlZmF1bHRNaW1lVHlwZSwgcGFyc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCByb3csIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGNhbGxiYWNrID0gcm93LCByb3cgPSBudWxsO1xuICAgICAgdmFyIHIgPSByZXF1ZXN0KHVybCkubWltZVR5cGUoZGVmYXVsdE1pbWVUeXBlKTtcbiAgICAgIHIucm93ID0gZnVuY3Rpb24oXykgeyByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHIucmVzcG9uc2UocmVzcG9uc2VPZihwYXJzZSwgcm93ID0gXykpIDogcm93OyB9O1xuICAgICAgci5yb3cocm93KTtcbiAgICAgIHJldHVybiBjYWxsYmFjayA/IHIuZ2V0KGNhbGxiYWNrKSA6IHI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3BvbnNlT2YocGFyc2UsIHJvdykge1xuICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIHJvdyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjc3YkMSA9IGRzdiQxKFwidGV4dC9jc3ZcIiwgY3N2UGFyc2UpO1xuXG4gIHZhciB0c3YkMSA9IGRzdiQxKFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiLCB0c3ZQYXJzZSk7XG5cbiAgdmFyIGZyYW1lID0gMDtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgaW50ZXJ2YWwgPSAwO1xuICB2YXIgcG9rZURlbGF5ID0gMTAwMDtcbiAgdmFyIHRhc2tIZWFkO1xuICB2YXIgdGFza1RhaWw7XG4gIHZhciBjbG9ja0xhc3QgPSAwO1xuICB2YXIgY2xvY2tOb3cgPSAwO1xuICB2YXIgY2xvY2tTa2V3ID0gMDtcbiAgdmFyIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZTtcbiAgdmFyIHNldEZyYW1lID0gdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyAoY2xvY2sgPT09IERhdGUgPyBmdW5jdGlvbihmKSB7IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHsgZihjbG9jay5ub3coKSk7IH0pOyB9IDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuICAgICAgICAgIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRpbWVyKCkge1xuICAgIHRoaXMuX2NhbGwgPVxuICAgIHRoaXMuX3RpbWUgPVxuICAgIHRoaXMuX25leHQgPSBudWxsO1xuICB9XG5cbiAgVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICAgIHNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIHZhciB0ID0gbmV3IFRpbWVyO1xuICAgIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICAgIHJldHVybiB0O1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICAgIHdoaWxlICh0KSB7XG4gICAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICAgIHQgPSB0Ll9uZXh0O1xuICAgIH1cbiAgICAtLWZyYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gd2FrZSh0aW1lKSB7XG4gICAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gdGltZSB8fCBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gICAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgICB0cnkge1xuICAgICAgdGltZXJGbHVzaCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBmcmFtZSA9IDA7XG4gICAgICBuYXAoKTtcbiAgICAgIGNsb2NrTm93ID0gMDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwb2tlJDEoKSB7XG4gICAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xuICB9XG5cbiAgZnVuY3Rpb24gbmFwKCkge1xuICAgIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgICB3aGlsZSAodDEpIHtcbiAgICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGFza1RhaWwgPSB0MDtcbiAgICBzbGVlcCh0aW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7XG4gICAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIGRlbGF5KTtcbiAgICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpbnRlcnZhbCkgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlJDEsIHBva2VEZWxheSk7XG4gICAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVvdXQkMShjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICAgIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgICB0LnN0b3AoKTtcbiAgICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gICAgfSwgZGVsYXksIHRpbWUpO1xuICAgIHJldHVybiB0O1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwkMShjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICB2YXIgdCA9IG5ldyBUaW1lciwgdG90YWwgPSBkZWxheTtcbiAgICBpZiAoZGVsYXkgPT0gbnVsbCkgcmV0dXJuIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpLCB0O1xuICAgIGRlbGF5ID0gK2RlbGF5LCB0aW1lID0gdGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZTtcbiAgICB0LnJlc3RhcnQoZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgICBlbGFwc2VkICs9IHRvdGFsO1xuICAgICAgdC5yZXN0YXJ0KHRpY2ssIHRvdGFsICs9IGRlbGF5LCB0aW1lKTtcbiAgICAgIGNhbGxiYWNrKGVsYXBzZWQpO1xuICAgIH0sIGRlbGF5LCB0aW1lKTtcbiAgICByZXR1cm4gdDtcbiAgfVxuXG52YXIgICB0MCQxID0gbmV3IERhdGU7XG52YXIgICB0MSQxID0gbmV3IERhdGU7XG4gIGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICAgIH1cblxuICAgIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gICAgfTtcblxuICAgIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIHZhciByYW5nZSA9IFtdO1xuICAgICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgICAgZG8gcmFuZ2UucHVzaChuZXcgRGF0ZSgrc3RhcnQpKTsgd2hpbGUgKG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpLCBzdGFydCA8IHN0b3ApXG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfTtcblxuICAgIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgICB3aGlsZSAoLS1zdGVwID49IDApIHdoaWxlIChvZmZzZXRpKGRhdGUsIDEpLCAhdGVzdChkYXRlKSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdDAkMS5zZXRUaW1lKCtzdGFydCksIHQxJDEuc2V0VGltZSgrZW5kKTtcbiAgICAgICAgZmxvb3JpKHQwJDEpLCBmbG9vcmkodDEkMSk7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwJDEsIHQxJDEpKTtcbiAgICAgIH07XG5cbiAgICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVydmFsO1xuICB9XG5cbiAgdmFyIG1pbGxpc2Vjb25kID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgLy8gbm9vcFxuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZW5kIC0gc3RhcnQ7XG4gIH0pO1xuXG4gIC8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbiAgbWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gICAgayA9IE1hdGguZmxvb3Ioayk7XG4gICAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuXG4gIHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbiAgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuICB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbiAgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG4gIHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG5cbiAgdmFyIHNlY29uZCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25TZWNvbmQpICogZHVyYXRpb25TZWNvbmQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gIH0pO1xuXG4gIHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuXG4gIHZhciBtaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uTWludXRlKSAqIGR1cmF0aW9uTWludXRlKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xuICB9KTtcblxuICB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcblxuICB2YXIgaG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgb2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogZHVyYXRpb25NaW51dGUgJSBkdXJhdGlvbkhvdXI7XG4gICAgaWYgKG9mZnNldCA8IDApIG9mZnNldCArPSBkdXJhdGlvbkhvdXI7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoKCtkYXRlIC0gb2Zmc2V0KSAvIGR1cmF0aW9uSG91cikgKiBkdXJhdGlvbkhvdXIgKyBvZmZzZXQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG4gIH0pO1xuXG4gIHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG5cbiAgdmFyIGRheSA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG4gIH0pO1xuXG4gIHZhciBkYXlzID0gZGF5LnJhbmdlO1xuXG4gIGZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gICAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHRpbWVXZWVrID0gd2Vla2RheSgwKTtcbiAgdmFyIHRpbWVNb25kYXkgPSB3ZWVrZGF5KDEpO1xuICB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG4gIHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuICB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuICB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbiAgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuICB2YXIgc3VuZGF5cyA9IHRpbWVXZWVrLnJhbmdlO1xuICB2YXIgbW9uZGF5cyA9IHRpbWVNb25kYXkucmFuZ2U7XG4gIHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG4gIHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuICB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG4gIHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuICB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG5cbiAgdmFyIG1vbnRoID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZSgxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbiAgfSk7XG5cbiAgdmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuXG4gIHZhciB5ZWFyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfSk7XG5cbiAgLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxuICB5ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHllYXJzID0geWVhci5yYW5nZTtcblxuICB2YXIgdXRjTWludXRlID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xuICB9KTtcblxuICB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcblxuICB2YXIgdXRjSG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgfSk7XG5cbiAgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcblxuICB2YXIgdXRjRGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xuICB9KTtcblxuICB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcblxuICBmdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHV0Y1dlZWsgPSB1dGNXZWVrZGF5KDApO1xuICB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbiAgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuICB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbiAgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbiAgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG4gIHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbiAgdmFyIHV0Y1N1bmRheXMgPSB1dGNXZWVrLnJhbmdlO1xuICB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbiAgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbiAgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG4gIHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbiAgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG4gIHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcblxuICB2YXIgdXRjTW9udGggPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xuICB9KTtcblxuICB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG5cbiAgdmFyIHV0Y1llYXIgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB9KTtcblxuICAvLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG4gIHV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuXG4gIC8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbiAgLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4gIC8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuICBmdW5jdGlvbiBmb3JtYXREZWNpbWFsKHgsIHApIHtcbiAgICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gICAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAgIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gICAgcmV0dXJuIFtcbiAgICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgICAreC5zbGljZShpICsgMSlcbiAgICBdO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwb25lbnQkMSh4KSB7XG4gICAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRHcm91cChncm91cGluZywgdGhvdXNhbmRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgdCA9IFtdLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdERlZmF1bHQoeCwgcCkge1xuICAgIHggPSB4LnRvUHJlY2lzaW9uKHApO1xuXG4gICAgb3V0OiBmb3IgKHZhciBuID0geC5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgICAgc3dpdGNoICh4W2ldKSB7XG4gICAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlXCI6IGJyZWFrIG91dDtcbiAgICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaTAgPiAwID8geC5zbGljZSgwLCBpMCkgKyB4LnNsaWNlKGkxICsgMSkgOiB4O1xuICB9XG5cbiAgdmFyIHByZWZpeEV4cG9uZW50O1xuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeEF1dG8oeCwgcCkge1xuICAgIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um91bmRlZCh4LCBwKSB7XG4gICAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICAgIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICAgIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xuICB9XG5cbiAgdmFyIGZvcm1hdFR5cGVzID0ge1xuICAgIFwiXCI6IGZvcm1hdERlZmF1bHQsXG4gICAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICAgIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICAgIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXG4gICAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICAgIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxuICAgIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICAgIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICAgIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICAgIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICAgIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICAgIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxuICB9O1xuXG4gIC8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bdHlwZV1cbiAgdmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLVxcKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyhbYS16JV0pPyQvaTtcblxuICBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG5cbiAgICB2YXIgbWF0Y2gsXG4gICAgICAgIGZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIixcbiAgICAgICAgYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIixcbiAgICAgICAgc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiLFxuICAgICAgICBzeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiLFxuICAgICAgICB6ZXJvID0gISFtYXRjaFs1XSxcbiAgICAgICAgd2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl0sXG4gICAgICAgIGNvbW1hID0gISFtYXRjaFs3XSxcbiAgICAgICAgcHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpLFxuICAgICAgICB0eXBlID0gbWF0Y2hbOV0gfHwgXCJcIjtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIE1hcCBpbnZhbGlkIHR5cGVzIHRvIHRoZSBkZWZhdWx0IGZvcm1hdC5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHR5cGUgPSBcIlwiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICB0aGlzLmZpbGwgPSBmaWxsO1xuICAgIHRoaXMuYWxpZ24gPSBhbGlnbjtcbiAgICB0aGlzLnNpZ24gPSBzaWduO1xuICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICAgIHRoaXMuemVybyA9IHplcm87XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuY29tbWEgPSBjb21tYTtcbiAgICB0aGlzLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICB9XG5cbiAgRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICAgKyB0aGlzLmFsaWduXG4gICAgICAgICsgdGhpcy5zaWduXG4gICAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgICArICh0aGlzLndpZHRoID09IG51bGwgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICAgKyB0aGlzLnR5cGU7XG4gIH07XG5cbiAgdmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiXFx4QjVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuICBmdW5jdGlvbiBpZGVudGl0eSQzKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgJiYgbG9jYWxlLnRob3VzYW5kcyA/IGZvcm1hdEdyb3VwKGxvY2FsZS5ncm91cGluZywgbG9jYWxlLnRob3VzYW5kcykgOiBpZGVudGl0eSQzLFxuICAgICAgICBjdXJyZW5jeSA9IGxvY2FsZS5jdXJyZW5jeSxcbiAgICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsO1xuXG4gICAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVswXSA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IFwiJVwiIDogXCJcIjtcblxuICAgICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgICAgbWF5YmVTdWZmaXggPSAhdHlwZSB8fCAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gKHR5cGUgPyA2IDogMTIpXG4gICAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAgIC8vIENvbnZlcnQgbmVnYXRpdmUgdG8gcG9zaXRpdmUsIGFuZCBjb21wdXRlIHRoZSBwcmVmaXguXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcbiAgICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9ICh2YWx1ZSA8IDAgfHwgMSAvIHZhbHVlIDwgMCkgJiYgKHZhbHVlICo9IC0xLCB0cnVlKTtcblxuICAgICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgICB2YWx1ZSA9IGZvcm1hdFR5cGUodmFsdWUsIHByZWNpc2lvbik7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgb3JpZ2luYWwgdmFsdWUgd2FzIG5lZ2F0aXZlLCBpdCBtYXkgYmUgcm91bmRlZCB0byB6ZXJvIGR1cmluZ1xuICAgICAgICAgIC8vIGZvcm1hdHRpbmc7IHRyZWF0IHRoaXMgYXMgKHBvc2l0aXZlKSB6ZXJvLlxuICAgICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlKSB7XG4gICAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksICg0OCA8IGMgJiYgYyA8IDU4KVxuICAgICAgICAgICAgICAgICAgfHwgKHR5cGUgPT09IFwieFwiICYmIDk2IDwgYyAmJiBjIDwgMTAzKVxuICAgICAgICAgICAgICAgICAgfHwgKHR5cGUgPT09IFwiWFwiICYmIDY0IDwgYyAmJiBjIDwgNzEpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVOZWdhdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgICAgdmFsdWVTdWZmaXggPSB2YWx1ZVN1ZmZpeCArICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICAgIGNhc2UgXCI8XCI6IHJldHVybiB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nO1xuICAgICAgICAgIGNhc2UgXCI9XCI6IHJldHVybiB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgIGNhc2UgXCJeXCI6IHJldHVybiBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4O1xuICAgICAgfVxuXG4gICAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCQxKHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgICB9O1xuICB9XG5cbiAgdmFyIGxvY2FsZTtcbiAgZXhwb3J0cy5mb3JtYXQ7XG4gIGV4cG9ydHMuZm9ybWF0UHJlZml4O1xuXG4gIGRlZmF1bHRMb2NhbGUoe1xuICAgIGRlY2ltYWw6IFwiLlwiLFxuICAgIHRob3VzYW5kczogXCIsXCIsXG4gICAgZ3JvdXBpbmc6IFszXSxcbiAgICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxuICB9KTtcblxuICBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gICAgZXhwb3J0cy5mb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICAgIGV4cG9ydHMuZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgICByZXR1cm4gbG9jYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlY2lzaW9uRml4ZWQoc3RlcCkge1xuICAgIHJldHVybiBNYXRoLm1heCgwLCAtZXhwb25lbnQkMShNYXRoLmFicyhzdGVwKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50JDEodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudCQxKE1hdGguYWJzKHN0ZXApKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVjaXNpb25Sb3VuZChzdGVwLCBtYXgpIHtcbiAgICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudCQxKG1heCkgLSBleHBvbmVudCQxKHN0ZXApKSArIDE7XG4gIH1cblxuICBmdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICAgIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXRjRGF0ZShkKSB7XG4gICAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkLnkpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1llYXIoeSkge1xuICAgIHJldHVybiB7eTogeSwgbTogMCwgZDogMSwgSDogMCwgTTogMCwgUzogMCwgTDogMH07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRMb2NhbGUkMShsb2NhbGUpIHtcbiAgICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gICAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgICB2YXIgZm9ybWF0cyA9IHtcbiAgICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgICAgXCJjXCI6IG51bGwsXG4gICAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlcixcbiAgICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgICAgXCJ4XCI6IG51bGwsXG4gICAgICBcIlhcIjogbnVsbCxcbiAgICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuXG4gICAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICAgIFwiY1wiOiBudWxsLFxuICAgICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXIsXG4gICAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICAgIFwieFwiOiBudWxsLFxuICAgICAgXCJYXCI6IG51bGwsXG4gICAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gICAgfTtcblxuICAgIHZhciBwYXJzZXMgPSB7XG4gICAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlcixcbiAgICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICAgIH07XG5cbiAgICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gICAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICAgIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICAgIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gICAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICAgIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICAgIGogPSAwLFxuICAgICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgcGFkLFxuICAgICAgICAgICAgZm9ybWF0O1xuXG4gICAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgbmV3RGF0ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICB2YXIgZCA9IG5ld1llYXIoMTkwMCksXG4gICAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCk7XG4gICAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgICAgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgICAgdmFyIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XG4gICAgICAgICAgZC5tID0gMDtcbiAgICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICAgIHJldHVybiBuZXdEYXRlKGQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFyc2U7XG5cbiAgICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gajtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGUsIHN0cmluZywgaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV90aW1lLCBzdHJpbmcsIGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldE1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgICAgcmV0dXJuIGY7XG4gICAgICB9LFxuICAgICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBsb2NhbERhdGUpO1xuICAgICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfSxcbiAgICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH0sXG4gICAgICB1dGNQYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgICByZXR1cm4gcDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifTtcbiAgdmFyIG51bWJlclJlID0gL15cXHMqXFxkKy87XG4gIHZhciBwZXJjZW50UmUgPSAvXiUvO1xuICB2YXIgcmVxdW90ZVJlID0gL1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO1xuICBmdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gICAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRnVsbFllYXIoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICAgIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQueSA9ICtuWzBdICsgKCtuWzBdID4gNjggPyAxOTAwIDogMjAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/OlxcOj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICAgIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICAgIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gICAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKDEgKyBkYXkuY291bnQoeWVhcihkKSwgZCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh0aW1lV2Vlay5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyKGQpIHtcbiAgICByZXR1cm4gZC5nZXREYXkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICAgIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcbiAgICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgICArIHBhZCh6IC8gNjAgfCAwLCBcIjBcIiwgMilcbiAgICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENEYXlPZk1vbnRoKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIyNChkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDSG91cjEyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mWWVhcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICAgIHJldHVybiBwYWQodXRjV2Vlay5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICAgIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gICAgcmV0dXJuIFwiKzAwMDBcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICAgIHJldHVybiBcIiVcIjtcbiAgfVxuXG4gIHZhciBsb2NhbGUkMTtcbiAgZXhwb3J0cy50aW1lRm9ybWF0O1xuICBleHBvcnRzLnRpbWVQYXJzZTtcbiAgZXhwb3J0cy51dGNGb3JtYXQ7XG4gIGV4cG9ydHMudXRjUGFyc2U7XG5cbiAgZGVmYXVsdExvY2FsZSQxKHtcbiAgICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICAgIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gICAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gICAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gICAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUkMShkZWZpbml0aW9uKSB7XG4gICAgbG9jYWxlJDEgPSBmb3JtYXRMb2NhbGUkMShkZWZpbml0aW9uKTtcbiAgICBleHBvcnRzLnRpbWVGb3JtYXQgPSBsb2NhbGUkMS5mb3JtYXQ7XG4gICAgZXhwb3J0cy50aW1lUGFyc2UgPSBsb2NhbGUkMS5wYXJzZTtcbiAgICBleHBvcnRzLnV0Y0Zvcm1hdCA9IGxvY2FsZSQxLnV0Y0Zvcm1hdDtcbiAgICBleHBvcnRzLnV0Y1BhcnNlID0gbG9jYWxlJDEudXRjUGFyc2U7XG4gICAgcmV0dXJuIGxvY2FsZSQxO1xuICB9XG5cbiAgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbiAgZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xuICB9XG5cbiAgdmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgICA/IGZvcm1hdElzb05hdGl2ZVxuICAgICAgOiBleHBvcnRzLnV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcbiAgICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbiAgfVxuXG4gIHZhciBwYXJzZUlzbyA9ICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKVxuICAgICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgICAgOiBleHBvcnRzLnV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XG5cbiAgdmFyIGFycmF5JDIgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgdmFyIG1hcCQyID0gYXJyYXkkMi5tYXA7XG4gIHZhciBzbGljZSQzID0gYXJyYXkkMi5zbGljZTtcblxuICB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuICBmdW5jdGlvbiBvcmRpbmFsKHJhbmdlKSB7XG4gICAgdmFyIGluZGV4ID0gbWFwJDEoKSxcbiAgICAgICAgZG9tYWluID0gW10sXG4gICAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICAgIHJhbmdlID0gcmFuZ2UgPT0gbnVsbCA/IFtdIDogc2xpY2UkMy5jYWxsKHJhbmdlKTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgICAgaWYgKCFpKSB7XG4gICAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAkMSgpO1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZSQzLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG9yZGluYWwoKVxuICAgICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gYmFuZCgpIHtcbiAgICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgICByYW5nZSQkID0gWzAsIDFdLFxuICAgICAgICBzdGVwLFxuICAgICAgICBiYW5kd2lkdGgsXG4gICAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICAgIGFsaWduID0gMC41O1xuXG4gICAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXG4gICAgICAgICAgcmV2ZXJzZSA9IHJhbmdlJCRbMV0gPCByYW5nZSQkWzBdLFxuICAgICAgICAgIHN0YXJ0ID0gcmFuZ2UkJFtyZXZlcnNlIC0gMF0sXG4gICAgICAgICAgc3RvcCA9IHJhbmdlJCRbMSAtIHJldmVyc2VdO1xuICAgICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgICAgdmFyIHZhbHVlcyA9IHJhbmdlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICAgIHJldHVybiBvcmRpbmFsUmFuZ2UocmV2ZXJzZSA/IHZhbHVlcy5yZXZlcnNlKCkgOiB2YWx1ZXMpO1xuICAgIH1cblxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlJCQgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlJCQuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiByYW5nZSQkID0gWytfWzBdLCArX1sxXV0sIHJvdW5kID0gdHJ1ZSwgcmVzY2FsZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiYW5kd2lkdGg7XG4gICAgfTtcblxuICAgIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwO1xuICAgIH07XG5cbiAgICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISFfLCByZXNjYWxlKCkpIDogcm91bmQ7XG4gICAgfTtcblxuICAgIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gICAgfTtcblxuICAgIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgICB9O1xuXG4gICAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICAgIH07XG5cbiAgICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiYW5kKClcbiAgICAgICAgICAuZG9tYWluKGRvbWFpbigpKVxuICAgICAgICAgIC5yYW5nZShyYW5nZSQkKVxuICAgICAgICAgIC5yb3VuZChyb3VuZClcbiAgICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgICAuYWxpZ24oYWxpZ24pO1xuICAgIH07XG5cbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgICB2YXIgY29weSA9IHNjYWxlLmNvcHk7XG5cbiAgICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICAgIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gICAgZGVsZXRlIHNjYWxlLnBhZGRpbmdPdXRlcjtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludCQ0KCkge1xuICAgIHJldHVybiBwb2ludGlzaChiYW5kKCkucGFkZGluZ0lubmVyKDEpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDMoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBudW1iZXIkMSh4KSB7XG4gICAgcmV0dXJuICt4O1xuICB9XG5cbiAgdmFyIHVuaXQgPSBbMCwgMV07XG5cbiAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICAgIDogY29uc3RhbnQkMyhiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHZhciBkID0gZGVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4geCA8PSBhID8gMCA6IHggPj0gYiA/IDEgOiBkKHgpOyB9O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZWludGVycG9sYXRlQ2xhbXAocmVpbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICB2YXIgciA9IHJlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHsgcmV0dXJuIHQgPD0gMCA/IGEgOiB0ID49IDEgPyBiIDogcih0KTsgfTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICAgIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gICAgaWYgKGQxIDwgZDApIGQwID0gZGVpbnRlcnBvbGF0ZShkMSwgZDApLCByMCA9IHJlaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgICBlbHNlIGQwID0gZGVpbnRlcnBvbGF0ZShkMCwgZDEpLCByMCA9IHJlaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gICAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgICAgaSA9IC0xO1xuXG4gICAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gICAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKytpIDwgaikge1xuICAgICAgZFtpXSA9IGRlaW50ZXJwb2xhdGUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICAgIHJbaV0gPSByZWludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICB2YXIgaSA9IGJpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0XG4gICAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKTtcbiAgfVxuXG4gIC8vIGRlaW50ZXJwb2xhdGUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbiAgLy8gcmVpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdLlxuICBmdW5jdGlvbiBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUkJCwgcmVpbnRlcnBvbGF0ZSkge1xuICAgIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgICByYW5nZSA9IHVuaXQsXG4gICAgICAgIGludGVycG9sYXRlJCQgPSBpbnRlcnBvbGF0ZSxcbiAgICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgICAgcGllY2V3aXNlLFxuICAgICAgICBvdXRwdXQsXG4gICAgICAgIGlucHV0O1xuXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLCByYW5nZSwgY2xhbXAgPyBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSQkKSA6IGRlaW50ZXJwb2xhdGUkJCwgaW50ZXJwb2xhdGUkJCkpKSgreCk7XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbiwgZGVpbnRlcnBvbGF0ZSwgY2xhbXAgPyByZWludGVycG9sYXRlQ2xhbXAocmVpbnRlcnBvbGF0ZSkgOiByZWludGVycG9sYXRlKSkpKCt5KTtcbiAgICB9O1xuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwJDIuY2FsbChfLCBudW1iZXIkMSksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gcmFuZ2UgPSBzbGljZSQzLmNhbGwoXyksIGludGVycG9sYXRlJCQgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHJlc2NhbGUoKSkgOiBjbGFtcDtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSQkID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlJCQ7XG4gICAgfTtcblxuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRvbWFpbiwgY291bnQsIHNwZWNpZmllcikge1xuICAgIHZhciBzdGFydCA9IGRvbWFpblswXSxcbiAgICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sXG4gICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpLFxuICAgICAgICBwcmVjaXNpb247XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgICBzd2l0Y2ggKHNwZWNpZmllci50eXBlKSB7XG4gICAgICBjYXNlIFwic1wiOiB7XG4gICAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgY2FzZSBcIlwiOlxuICAgICAgY2FzZSBcImVcIjpcbiAgICAgIGNhc2UgXCJnXCI6XG4gICAgICBjYXNlIFwicFwiOlxuICAgICAgY2FzZSBcInJcIjoge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImZcIjpcbiAgICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4cG9ydHMuZm9ybWF0KHNwZWNpZmllcik7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgICB9O1xuXG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICAgIHJldHVybiB0aWNrRm9ybWF0KGRvbWFpbigpLCBjb3VudCwgc3BlY2lmaWVyKTtcbiAgICB9O1xuXG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICAgIGkgPSBkLmxlbmd0aCAtIDEsXG4gICAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LFxuICAgICAgICAgIHN0YXJ0ID0gZFswXSxcbiAgICAgICAgICBzdG9wID0gZFtpXSxcbiAgICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIG4pO1xuXG4gICAgICBpZiAoc3RlcCkge1xuICAgICAgICBzdGVwID0gdGlja1N0ZXAoTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcCwgTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXAsIG4pO1xuICAgICAgICBkWzBdID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgICAgZFtpXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgICBkb21haW4oZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFyJDIoKSB7XG4gICAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCBpbnRlcnBvbGF0ZU51bWJlcik7XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyJDIoKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkkNCgpIHtcbiAgICB2YXIgZG9tYWluID0gWzAsIDFdO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuICt4O1xuICAgIH1cblxuICAgIHNjYWxlLmludmVydCA9IHNjYWxlO1xuXG4gICAgc2NhbGUuZG9tYWluID0gc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAkMi5jYWxsKF8sIG51bWJlciQxKSwgc2NhbGUpIDogZG9tYWluLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpZGVudGl0eSQ0KCkuZG9tYWluKGRvbWFpbik7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCk7XG5cbiAgICB2YXIgaTAgPSAwLFxuICAgICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgICB4MCA9IGRvbWFpbltpMF0sXG4gICAgICAgIHgxID0gZG9tYWluW2kxXSxcbiAgICAgICAgdDtcblxuICAgIGlmICh4MSA8IHgwKSB7XG4gICAgICB0ID0gaTAsIGkwID0gaTEsIGkxID0gdDtcbiAgICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICAgIH1cblxuICAgIGRvbWFpbltpMF0gPSBpbnRlcnZhbC5mbG9vcih4MCk7XG4gICAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICAgIHJldHVybiBkb21haW47XG4gIH1cblxuICBmdW5jdGlvbiBkZWludGVycG9sYXRlJDEoYSwgYikge1xuICAgIHJldHVybiAoYiA9IE1hdGgubG9nKGIgLyBhKSlcbiAgICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLmxvZyh4IC8gYSkgLyBiOyB9XG4gICAgICAgIDogY29uc3RhbnQkMyhiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIHJldHVybiBhIDwgMFxuICAgICAgICA/IGZ1bmN0aW9uKHQpIHsgcmV0dXJuIC1NYXRoLnBvdygtYiwgdCkgKiBNYXRoLnBvdygtYSwgMSAtIHQpOyB9XG4gICAgICAgIDogZnVuY3Rpb24odCkgeyByZXR1cm4gTWF0aC5wb3coYiwgdCkgKiBNYXRoLnBvdyhhLCAxIC0gdCk7IH07XG4gIH1cblxuICBmdW5jdGlvbiBwb3cxMCh4KSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKHgpID8gKyhcIjFlXCIgKyB4KSA6IHggPCAwID8gMCA6IHg7XG4gIH1cblxuICBmdW5jdGlvbiBwb3dwKGJhc2UpIHtcbiAgICByZXR1cm4gYmFzZSA9PT0gMTAgPyBwb3cxMFxuICAgICAgICA6IGJhc2UgPT09IE1hdGguRSA/IE1hdGguZXhwXG4gICAgICAgIDogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5wb3coYmFzZSwgeCk7IH07XG4gIH1cblxuICBmdW5jdGlvbiBsb2dwKGJhc2UpIHtcbiAgICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2dcbiAgICAgICAgOiBiYXNlID09PSAxMCAmJiBNYXRoLmxvZzEwXG4gICAgICAgIHx8IGJhc2UgPT09IDIgJiYgTWF0aC5sb2cyXG4gICAgICAgIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpIC8gYmFzZTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWZsZWN0KGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIC1mKC14KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbG9nKCkge1xuICAgIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSQxLCByZWludGVycG9sYXRlKS5kb21haW4oWzEsIDEwXSksXG4gICAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgICAgYmFzZSA9IDEwLFxuICAgICAgICBsb2dzID0gbG9ncCgxMCksXG4gICAgICAgIHBvd3MgPSBwb3dwKDEwKTtcblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICBsb2dzID0gbG9ncChiYXNlKSwgcG93cyA9IHBvd3AoYmFzZSk7XG4gICAgICBpZiAoZG9tYWluKClbMF0gPCAwKSBsb2dzID0gcmVmbGVjdChsb2dzKSwgcG93cyA9IHJlZmxlY3QocG93cyk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuXG4gICAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGJhc2UgPSArXywgcmVzY2FsZSgpKSA6IGJhc2U7XG4gICAgfTtcblxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICAgIHUgPSBkWzBdLFxuICAgICAgICAgIHYgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgcjtcblxuICAgICAgaWYgKHIgPSB2IDwgdSkgaSA9IHUsIHUgPSB2LCB2ID0gaTtcblxuICAgICAgdmFyIGkgPSBsb2dzKHUpLFxuICAgICAgICAgIGogPSBsb2dzKHYpLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgayxcbiAgICAgICAgICB0LFxuICAgICAgICAgIG4gPSBjb3VudCA9PSBudWxsID8gMTAgOiArY291bnQsXG4gICAgICAgICAgeiA9IFtdO1xuXG4gICAgICBpZiAoIShiYXNlICUgMSkgJiYgaiAtIGkgPCBuKSB7XG4gICAgICAgIGkgPSBNYXRoLnJvdW5kKGkpIC0gMSwgaiA9IE1hdGgucm91bmQoaikgKyAxO1xuICAgICAgICBpZiAodSA+IDApIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgICAgZm9yIChrID0gMSwgcCA9IHBvd3MoaSk7IGsgPCBiYXNlOyArK2spIHtcbiAgICAgICAgICAgIHQgPSBwICogaztcbiAgICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgICAgei5wdXNoKHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgICAgZm9yIChrID0gYmFzZSAtIDEsIHAgPSBwb3dzKGkpOyBrID49IDE7IC0taykge1xuICAgICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XG4gICAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB6ID0gdGlja3MoaSwgaiwgTWF0aC5taW4oaiAtIGksIG4pKS5tYXAocG93cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByID8gei5yZXZlcnNlKCkgOiB6O1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgICAgaWYgKHNwZWNpZmllciA9PSBudWxsKSBzcGVjaWZpZXIgPSBiYXNlID09PSAxMCA/IFwiLjBlXCIgOiBcIixcIjtcbiAgICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHNwZWNpZmllciA9IGV4cG9ydHMuZm9ybWF0KHNwZWNpZmllcik7XG4gICAgICBpZiAoY291bnQgPT09IEluZmluaXR5KSByZXR1cm4gc3BlY2lmaWVyO1xuICAgICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgICB2YXIgayA9IE1hdGgubWF4KDEsIGJhc2UgKiBjb3VudCAvIHNjYWxlLnRpY2tzKCkubGVuZ3RoKTsgLy8gVE9ETyBmYXN0IGVzdGltYXRlP1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIDAuNSkgaSAqPSBiYXNlO1xuICAgICAgICByZXR1cm4gaSA8PSBrID8gc3BlY2lmaWVyKGQpIDogXCJcIjtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgICBmbG9vcjogZnVuY3Rpb24oeCkgeyByZXR1cm4gcG93cyhNYXRoLmZsb29yKGxvZ3MoeCkpKTsgfSxcbiAgICAgICAgY2VpbDogZnVuY3Rpb24oeCkgeyByZXR1cm4gcG93cyhNYXRoLmNlaWwobG9ncyh4KSkpOyB9XG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBsb2coKS5iYXNlKGJhc2UpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFpc2UoeCwgZXhwb25lbnQpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGV4cG9uZW50KSA6IE1hdGgucG93KHgsIGV4cG9uZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvdygpIHtcbiAgICB2YXIgZXhwb25lbnQgPSAxLFxuICAgICAgICBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSksXG4gICAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICAgIGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGUoYSwgYikge1xuICAgICAgcmV0dXJuIChiID0gcmFpc2UoYiwgZXhwb25lbnQpIC0gKGEgPSByYWlzZShhLCBleHBvbmVudCkpKVxuICAgICAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHJhaXNlKHgsIGV4cG9uZW50KSAtIGEpIC8gYjsgfVxuICAgICAgICAgIDogY29uc3RhbnQkMyhiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWludGVycG9sYXRlKGEsIGIpIHtcbiAgICAgIGIgPSByYWlzZShiLCBleHBvbmVudCkgLSAoYSA9IHJhaXNlKGEsIGV4cG9uZW50KSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gcmFpc2UoYSArIGIgKiB0LCAxIC8gZXhwb25lbnQpOyB9O1xuICAgIH1cblxuICAgIHNjYWxlLmV4cG9uZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXhwb25lbnQgPSArXywgZG9tYWluKGRvbWFpbigpKSkgOiBleHBvbmVudDtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvcHkoc2NhbGUsIHBvdygpLmV4cG9uZW50KGV4cG9uZW50KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3FydCgpIHtcbiAgICByZXR1cm4gcG93KCkuZXhwb25lbnQoMC41KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YW50aWxlKCkge1xuICAgIHZhciBkb21haW4gPSBbXSxcbiAgICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgICAgdGhyZXNob2xkcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHZhciBpID0gMCwgbiA9IE1hdGgubWF4KDEsIHJhbmdlLmxlbmd0aCk7XG4gICAgICB0aHJlc2hvbGRzID0gbmV3IEFycmF5KG4gLSAxKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB0aHJlc2hvbGRzW2kgLSAxXSA9IHRocmVzaG9sZChkb21haW4sIGkgLyBuKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodCh0aHJlc2hvbGRzLCB4KV07XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXSA6IFtcbiAgICAgICAgaSA+IDAgPyB0aHJlc2hvbGRzW2kgLSAxXSA6IGRvbWFpblswXSxcbiAgICAgICAgaSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1tpXSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV1cbiAgICAgIF07XG4gICAgfTtcblxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgICAgZG9tYWluID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IF8ubGVuZ3RoLCBkOyBpIDwgbjsgKytpKSBpZiAoZCA9IF9baV0sIGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgICBkb21haW4uc29ydChhc2NlbmRpbmcpO1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnF1YW50aWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRocmVzaG9sZHMuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHF1YW50aWxlKClcbiAgICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgICAucmFuZ2UocmFuZ2UpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFudGl6ZSQxKCkge1xuICAgIHZhciB4MCA9IDAsXG4gICAgICAgIHgxID0gMSxcbiAgICAgICAgbiA9IDEsXG4gICAgICAgIGRvbWFpbiA9IFswLjVdLFxuICAgICAgICByYW5nZSA9IFswLCAxXTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIGlmICh4IDw9IHgpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodChkb21haW4sIHgsIDAsIG4pXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgdmFyIGkgPSAtMTtcbiAgICAgIGRvbWFpbiA9IG5ldyBBcnJheShuKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkb21haW5baV0gPSAoKGkgKyAxKSAqIHgxIC0gKGkgLSBuKSAqIHgwKSAvIChuICsgMSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgcmVzY2FsZSgpKSA6IFt4MCwgeDFdO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG4gPSAocmFuZ2UgPSBzbGljZSQzLmNhbGwoXykpLmxlbmd0aCAtIDEsIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dXG4gICAgICAgICAgOiBpIDwgMSA/IFt4MCwgZG9tYWluWzBdXVxuICAgICAgICAgIDogaSA+PSBuID8gW2RvbWFpbltuIC0gMV0sIHgxXVxuICAgICAgICAgIDogW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBxdWFudGl6ZSQxKClcbiAgICAgICAgICAuZG9tYWluKFt4MCwgeDFdKVxuICAgICAgICAgIC5yYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGhyZXNob2xkJDEoKSB7XG4gICAgdmFyIGRvbWFpbiA9IFswLjVdLFxuICAgICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgICAgbiA9IDE7XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbYmlzZWN0UmlnaHQoZG9tYWluLCB4LCAwLCBuKV07XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gc2xpY2UkMy5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkMy5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRocmVzaG9sZCQxKClcbiAgICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgICAucmFuZ2UocmFuZ2UpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxudmFyICAgZHVyYXRpb25TZWNvbmQkMSA9IDEwMDA7XG52YXIgICBkdXJhdGlvbk1pbnV0ZSQxID0gZHVyYXRpb25TZWNvbmQkMSAqIDYwO1xudmFyICAgZHVyYXRpb25Ib3VyJDEgPSBkdXJhdGlvbk1pbnV0ZSQxICogNjA7XG52YXIgICBkdXJhdGlvbkRheSQxID0gZHVyYXRpb25Ib3VyJDEgKiAyNDtcbnZhciAgIGR1cmF0aW9uV2VlayQxID0gZHVyYXRpb25EYXkkMSAqIDc7XG4gIHZhciBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkkMSAqIDMwO1xuICB2YXIgZHVyYXRpb25ZZWFyID0gZHVyYXRpb25EYXkkMSAqIDM2NTtcbiAgZnVuY3Rpb24gZGF0ZSQxKHQpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodCk7XG4gIH1cblxuICBmdW5jdGlvbiBudW1iZXIkMih0KSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlTnVtYmVyKSxcbiAgICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgICB2YXIgZm9ybWF0TWlsbGlzZWNvbmQgPSBmb3JtYXQoXCIuJUxcIiksXG4gICAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgICAgZm9ybWF0TWludXRlID0gZm9ybWF0KFwiJUk6JU1cIiksXG4gICAgICAgIGZvcm1hdEhvdXIgPSBmb3JtYXQoXCIlSSAlcFwiKSxcbiAgICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICAgIGZvcm1hdFdlZWsgPSBmb3JtYXQoXCIlYiAlZFwiKSxcbiAgICAgICAgZm9ybWF0TW9udGggPSBmb3JtYXQoXCIlQlwiKSxcbiAgICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gICAgdmFyIHRpY2tJbnRlcnZhbHMgPSBbXG4gICAgICBbc2Vjb25kLCAgMSwgICAgICBkdXJhdGlvblNlY29uZCQxXSxcbiAgICAgIFtzZWNvbmQsICA1LCAgNSAqIGR1cmF0aW9uU2Vjb25kJDFdLFxuICAgICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmQkMV0sXG4gICAgICBbc2Vjb25kLCAzMCwgMzAgKiBkdXJhdGlvblNlY29uZCQxXSxcbiAgICAgIFttaW51dGUsICAxLCAgICAgIGR1cmF0aW9uTWludXRlJDFdLFxuICAgICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGUkMV0sXG4gICAgICBbbWludXRlLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZSQxXSxcbiAgICAgIFttaW51dGUsIDMwLCAzMCAqIGR1cmF0aW9uTWludXRlJDFdLFxuICAgICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgICBbICBob3VyLCAgMywgIDMgKiBkdXJhdGlvbkhvdXIkMSAgXSxcbiAgICAgIFsgIGhvdXIsICA2LCAgNiAqIGR1cmF0aW9uSG91ciQxICBdLFxuICAgICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgICBbICAgZGF5LCAgMSwgICAgICBkdXJhdGlvbkRheSQxICAgXSxcbiAgICAgIFsgICBkYXksICAyLCAgMiAqIGR1cmF0aW9uRGF5JDEgICBdLFxuICAgICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrJDEgIF0sXG4gICAgICBbIG1vbnRoLCAgMSwgICAgICBkdXJhdGlvbk1vbnRoIF0sXG4gICAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgICBbICB5ZWFyLCAgMSwgICAgICBkdXJhdGlvblllYXIgIF1cbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gdGlja0Zvcm1hdChkYXRlKSB7XG4gICAgICByZXR1cm4gKHNlY29uZChkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaWxsaXNlY29uZFxuICAgICAgICAgIDogbWludXRlKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdFNlY29uZFxuICAgICAgICAgIDogaG91cihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaW51dGVcbiAgICAgICAgICA6IGRheShkYXRlKSA8IGRhdGUgPyBmb3JtYXRIb3VyXG4gICAgICAgICAgOiBtb250aChkYXRlKSA8IGRhdGUgPyAod2VlayhkYXRlKSA8IGRhdGUgPyBmb3JtYXREYXkgOiBmb3JtYXRXZWVrKVxuICAgICAgICAgIDogeWVhcihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNb250aFxuICAgICAgICAgIDogZm9ybWF0WWVhcikoZGF0ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgICAgaWYgKGludGVydmFsID09IG51bGwpIGludGVydmFsID0gMTA7XG5cbiAgICAgIC8vIElmIGEgZGVzaXJlZCB0aWNrIGNvdW50IGlzIHNwZWNpZmllZCwgcGljayBhIHJlYXNvbmFibGUgdGljayBpbnRlcnZhbFxuICAgICAgLy8gYmFzZWQgb24gdGhlIGV4dGVudCBvZiB0aGUgZG9tYWluIGFuZCBhIHJvdWdoIGVzdGltYXRlIG9mIHRpY2sgc2l6ZS5cbiAgICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGludGVydmFsIGlzIGFscmVhZHkgYSB0aW1lIGludGVydmFsIGFuZCB1c2UgaXQuXG4gICAgICBpZiAodHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gaW50ZXJ2YWwsXG4gICAgICAgICAgICBpID0gYmlzZWN0b3IoZnVuY3Rpb24oaSkgeyByZXR1cm4gaVsyXTsgfSkucmlnaHQodGlja0ludGVydmFscywgdGFyZ2V0KTtcbiAgICAgICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSB7XG4gICAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0IC8gZHVyYXRpb25ZZWFyLCBzdG9wIC8gZHVyYXRpb25ZZWFyLCBpbnRlcnZhbCk7XG4gICAgICAgICAgaW50ZXJ2YWwgPSB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGkpIHtcbiAgICAgICAgICBpID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgICAgICAgIHN0ZXAgPSBpWzFdO1xuICAgICAgICAgIGludGVydmFsID0gaVswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGludGVydmFsKTtcbiAgICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGVwID09IG51bGwgPyBpbnRlcnZhbCA6IGludGVydmFsLmV2ZXJ5KHN0ZXApO1xuICAgIH1cblxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICAgIH07XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAkMi5jYWxsKF8sIG51bWJlciQyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSQxKTtcbiAgICB9O1xuXG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgICB0MCA9IGRbMF0sXG4gICAgICAgICAgdDEgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgciA9IHQxIDwgdDAsXG4gICAgICAgICAgdDtcbiAgICAgIGlmIChyKSB0ID0gdDAsIHQwID0gdDEsIHQxID0gdDtcbiAgICAgIHQgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHQwLCB0MSwgc3RlcCk7XG4gICAgICB0ID0gdCA/IHQucmFuZ2UodDAsIHQxICsgMSkgOiBbXTsgLy8gaW5jbHVzaXZlIHN0b3BcbiAgICAgIHJldHVybiByID8gdC5yZXZlcnNlKCkgOiB0O1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICAgIH07XG5cbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHN0ZXApIHtcbiAgICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgICByZXR1cm4gKGludGVydmFsID0gdGlja0ludGVydmFsKGludGVydmFsLCBkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIHN0ZXApKVxuICAgICAgICAgID8gZG9tYWluKG5pY2UoZCwgaW50ZXJ2YWwpKVxuICAgICAgICAgIDogc2NhbGU7XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lKCkge1xuICAgIHJldHVybiBjYWxlbmRhcih5ZWFyLCBtb250aCwgdGltZVdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBleHBvcnRzLnRpbWVGb3JtYXQpLmRvbWFpbihbbmV3IERhdGUoMjAwMCwgMCwgMSksIG5ldyBEYXRlKDIwMDAsIDAsIDIpXSk7XG4gIH1cblxuICBmdW5jdGlvbiB1dGNUaW1lKCkge1xuICAgIHJldHVybiBjYWxlbmRhcih1dGNZZWFyLCB1dGNNb250aCwgdXRjV2VlaywgdXRjRGF5LCB1dGNIb3VyLCB1dGNNaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGV4cG9ydHMudXRjRm9ybWF0KS5kb21haW4oW0RhdGUuVVRDKDIwMDAsIDAsIDEpLCBEYXRlLlVUQygyMDAwLCAwLCAyKV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY29sb3JzKHMpIHtcbiAgICByZXR1cm4gcy5tYXRjaCgvLns2fS9nKS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIFwiI1wiICsgeDtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBjYXRlZ29yeTEwID0gY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuXG4gIHZhciBjYXRlZ29yeTIwYiA9IGNvbG9ycyhcIjM5M2I3OTUyNTRhMzZiNmVjZjljOWVkZTYzNzkzOThjYTI1MmI1Y2Y2YmNlZGI5YzhjNmQzMWJkOWUzOWU3YmE1MmU3Y2I5NDg0M2MzOWFkNDk0YWQ2NjE2YmU3OTY5YzdiNDE3M2E1NTE5NGNlNmRiZGRlOWVkNlwiKTtcblxuICB2YXIgY2F0ZWdvcnkyMGMgPSBjb2xvcnMoXCIzMTgyYmQ2YmFlZDY5ZWNhZTFjNmRiZWZlNjU1MGRmZDhkM2NmZGFlNmJmZGQwYTIzMWEzNTQ3NGM0NzZhMWQ5OWJjN2U5YzA3NTZiYjE5ZTlhYzhiY2JkZGNkYWRhZWI2MzYzNjM5Njk2OTZiZGJkYmRkOWQ5ZDlcIik7XG5cbiAgdmFyIGNhdGVnb3J5MjAgPSBjb2xvcnMoXCIxZjc3YjRhZWM3ZThmZjdmMGVmZmJiNzgyY2EwMmM5OGRmOGFkNjI3MjhmZjk4OTY5NDY3YmRjNWIwZDU4YzU2NGJjNDljOTRlMzc3YzJmN2I2ZDI3ZjdmN2ZjN2M3YzdiY2JkMjJkYmRiOGQxN2JlY2Y5ZWRhZTVcIik7XG5cbiAgdmFyIGN1YmVoZWxpeCQzID0gaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG5cbiAgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG4gIHZhciBjb29sID0gaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgyNjAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG4gIHZhciByYWluYm93ID0gY3ViZWhlbGl4KCk7XG5cbiAgZnVuY3Rpb24gcmFpbmJvdyQxKHQpIHtcbiAgICBpZiAodCA8IDAgfHwgdCA+IDEpIHQgLT0gTWF0aC5mbG9vcih0KTtcbiAgICB2YXIgdHMgPSBNYXRoLmFicyh0IC0gMC41KTtcbiAgICByYWluYm93LmggPSAzNjAgKiB0IC0gMTAwO1xuICAgIHJhaW5ib3cucyA9IDEuNSAtIDEuNSAqIHRzO1xuICAgIHJhaW5ib3cubCA9IDAuOCAtIDAuOSAqIHRzO1xuICAgIHJldHVybiByYWluYm93ICsgXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhbXAocmFuZ2UpIHtcbiAgICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKiBuKSkpXTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHZpcmlkaXMgPSByYW1wKGNvbG9ycyhcIjQ0MDE1NDQ0MDI1NjQ1MDQ1NzQ1MDU1OTQ2MDc1YTQ2MDg1YzQ2MGE1ZDQ2MGI1ZTQ3MGQ2MDQ3MGU2MTQ3MTA2MzQ3MTE2NDQ3MTM2NTQ4MTQ2NzQ4MTY2ODQ4MTc2OTQ4MTg2YTQ4MWE2YzQ4MWI2ZDQ4MWM2ZTQ4MWQ2ZjQ4MWY3MDQ4MjA3MTQ4MjE3MzQ4MjM3NDQ4MjQ3NTQ4MjU3NjQ4MjY3NzQ4Mjg3ODQ4Mjk3OTQ3MmE3YTQ3MmM3YTQ3MmQ3YjQ3MmU3YzQ3MmY3ZDQ2MzA3ZTQ2MzI3ZTQ2MzM3ZjQ2MzQ4MDQ1MzU4MTQ1Mzc4MTQ1Mzg4MjQ0Mzk4MzQ0M2E4MzQ0M2I4NDQzM2Q4NDQzM2U4NTQyM2Y4NTQyNDA4NjQyNDE4NjQxNDI4NzQxNDQ4NzQwNDU4ODQwNDY4ODNmNDc4ODNmNDg4OTNlNDk4OTNlNGE4OTNlNGM4YTNkNGQ4YTNkNGU4YTNjNGY4YTNjNTA4YjNiNTE4YjNiNTI4YjNhNTM4YjNhNTQ4YzM5NTU4YzM5NTY4YzM4NTg4YzM4NTk4YzM3NWE4YzM3NWI4ZDM2NWM4ZDM2NWQ4ZDM1NWU4ZDM1NWY4ZDM0NjA4ZDM0NjE4ZDMzNjI4ZDMzNjM4ZDMyNjQ4ZTMyNjU4ZTMxNjY4ZTMxNjc4ZTMxNjg4ZTMwNjk4ZTMwNmE4ZTJmNmI4ZTJmNmM4ZTJlNmQ4ZTJlNmU4ZTJlNmY4ZTJkNzA4ZTJkNzE4ZTJjNzE4ZTJjNzI4ZTJjNzM4ZTJiNzQ4ZTJiNzU4ZTJhNzY4ZTJhNzc4ZTJhNzg4ZTI5Nzk4ZTI5N2E4ZTI5N2I4ZTI4N2M4ZTI4N2Q4ZTI3N2U4ZTI3N2Y4ZTI3ODA4ZTI2ODE4ZTI2ODI4ZTI2ODI4ZTI1ODM4ZTI1ODQ4ZTI1ODU4ZTI0ODY4ZTI0ODc4ZTIzODg4ZTIzODk4ZTIzOGE4ZDIyOGI4ZDIyOGM4ZDIyOGQ4ZDIxOGU4ZDIxOGY4ZDIxOTA4ZDIxOTE4YzIwOTI4YzIwOTI4YzIwOTM4YzFmOTQ4YzFmOTU4YjFmOTY4YjFmOTc4YjFmOTg4YjFmOTk4YTFmOWE4YTFlOWI4YTFlOWM4OTFlOWQ4OTFmOWU4OTFmOWY4ODFmYTA4ODFmYTE4ODFmYTE4NzFmYTI4NzIwYTM4NjIwYTQ4NjIxYTU4NTIxYTY4NTIyYTc4NTIyYTg4NDIzYTk4MzI0YWE4MzI1YWI4MjI1YWM4MjI2YWQ4MTI3YWQ4MTI4YWU4MDI5YWY3ZjJhYjA3ZjJjYjE3ZTJkYjI3ZDJlYjM3YzJmYjQ3YzMxYjU3YjMyYjY3YTM0YjY3OTM1Yjc3OTM3Yjg3ODM4Yjk3NzNhYmE3NjNiYmI3NTNkYmM3NDNmYmM3MzQwYmQ3MjQyYmU3MTQ0YmY3MDQ2YzA2ZjQ4YzE2ZTRhYzE2ZDRjYzI2YzRlYzM2YjUwYzQ2YTUyYzU2OTU0YzU2ODU2YzY2NzU4Yzc2NTVhYzg2NDVjYzg2MzVlYzk2MjYwY2E2MDYzY2I1ZjY1Y2I1ZTY3Y2M1YzY5Y2Q1YjZjY2Q1YTZlY2U1ODcwY2Y1NzczZDA1Njc1ZDA1NDc3ZDE1MzdhZDE1MTdjZDI1MDdmZDM0ZTgxZDM0ZDg0ZDQ0Yjg2ZDU0OTg5ZDU0ODhiZDY0NjhlZDY0NTkwZDc0MzkzZDc0MTk1ZDg0MDk4ZDgzZTliZDkzYzlkZDkzYmEwZGEzOWEyZGEzN2E1ZGIzNmE4ZGIzNGFhZGMzMmFkZGMzMGIwZGQyZmIyZGQyZGI1ZGUyYmI4ZGUyOWJhZGUyOGJkZGYyNmMwZGYyNWMyZGYyM2M1ZTAyMWM4ZTAyMGNhZTExZmNkZTExZGQwZTExY2QyZTIxYmQ1ZTIxYWQ4ZTIxOWRhZTMxOWRkZTMxOGRmZTMxOGUyZTQxOGU1ZTQxOWU3ZTQxOWVhZTUxYWVjZTUxYmVmZTUxY2YxZTUxZGY0ZTYxZWY2ZTYyMGY4ZTYyMWZiZTcyM2ZkZTcyNVwiKSk7XG5cbiAgdmFyIG1hZ21hID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMDkwMjAyMGIwMjAyMGQwMzAzMGYwMzAzMTIwNDA0MTQwNTA0MTYwNjA1MTgwNjA1MWEwNzA2MWMwODA3MWUwOTA3MjAwYTA4MjIwYjA5MjQwYzA5MjYwZDBhMjkwZTBiMmIxMDBiMmQxMTBjMmYxMjBkMzExMzBkMzQxNDBlMzYxNTBlMzgxNjBmM2IxODBmM2QxOTEwM2YxYTEwNDIxYzEwNDQxZDExNDcxZTExNDkyMDExNGIyMTExNGUyMjExNTAyNDEyNTMyNTEyNTUyNzEyNTgyOTExNWEyYTExNWMyYzExNWYyZDExNjEyZjExNjMzMTExNjUzMzEwNjczNDEwNjkzNjEwNmIzODEwNmMzOTBmNmUzYjBmNzAzZDBmNzEzZjBmNzI0MDBmNzQ0MjBmNzU0NDBmNzY0NTEwNzc0NzEwNzg0OTEwNzg0YTEwNzk0YzExN2E0ZTExN2I0ZjEyN2I1MTEyN2M1MjEzN2M1NDEzN2Q1NjE0N2Q1NzE1N2U1OTE1N2U1YTE2N2U1YzE2N2Y1ZDE3N2Y1ZjE4N2Y2MDE4ODA2MjE5ODA2NDFhODA2NTFhODA2NzFiODA2ODFjODE2YTFjODE2YjFkODE2ZDFkODE2ZTFlODE3MDFmODE3MjFmODE3MzIwODE3NTIxODE3NjIxODE3ODIyODE3OTIyODI3YjIzODI3YzIzODI3ZTI0ODI4MDI1ODI4MTI1ODE4MzI2ODE4NDI2ODE4NjI3ODE4ODI3ODE4OTI4ODE4YjI5ODE4YzI5ODE4ZTJhODE5MDJhODE5MTJiODE5MzJiODA5NDJjODA5NjJjODA5ODJkODA5OTJkODA5YjJlN2Y5YzJlN2Y5ZTJmN2ZhMDJmN2ZhMTMwN2VhMzMwN2VhNTMxN2VhNjMxN2RhODMyN2RhYTMzN2RhYjMzN2NhZDM0N2NhZTM0N2JiMDM1N2JiMjM1N2JiMzM2N2FiNTM2N2FiNzM3NzliODM3NzliYTM4NzhiYzM5NzhiZDM5NzdiZjNhNzdjMDNhNzZjMjNiNzVjNDNjNzVjNTNjNzRjNzNkNzNjODNlNzNjYTNlNzJjYzNmNzFjZDQwNzFjZjQwNzBkMDQxNmZkMjQyNmZkMzQzNmVkNTQ0NmRkNjQ1NmNkODQ1NmNkOTQ2NmJkYjQ3NmFkYzQ4NjlkZTQ5NjhkZjRhNjhlMDRjNjdlMjRkNjZlMzRlNjVlNDRmNjRlNTUwNjRlNzUyNjNlODUzNjJlOTU0NjJlYTU2NjFlYjU3NjBlYzU4NjBlZDVhNWZlZTViNWVlZjVkNWVmMDVmNWVmMTYwNWRmMjYyNWRmMjY0NWNmMzY1NWNmNDY3NWNmNDY5NWNmNTZiNWNmNjZjNWNmNjZlNWNmNzcwNWNmNzcyNWNmODc0NWNmODc2NWNmOTc4NWRmOTc5NWRmOTdiNWRmYTdkNWVmYTdmNWVmYTgxNWZmYjgzNWZmYjg1NjBmYjg3NjFmYzg5NjFmYzhhNjJmYzhjNjNmYzhlNjRmYzkwNjVmZDkyNjZmZDk0NjdmZDk2NjhmZDk4NjlmZDlhNmFmZDliNmJmZTlkNmNmZTlmNmRmZWExNmVmZWEzNmZmZWE1NzFmZWE3NzJmZWE5NzNmZWFhNzRmZWFjNzZmZWFlNzdmZWIwNzhmZWIyN2FmZWI0N2JmZWI2N2NmZWI3N2VmZWI5N2ZmZWJiODFmZWJkODJmZWJmODRmZWMxODVmZWMyODdmZWM0ODhmZWM2OGFmZWM4OGNmZWNhOGRmZWNjOGZmZWNkOTBmZWNmOTJmZWQxOTRmZWQzOTVmZWQ1OTdmZWQ3OTlmZWQ4OWFmZGRhOWNmZGRjOWVmZGRlYTBmZGUwYTFmZGUyYTNmZGUzYTVmZGU1YTdmZGU3YTlmZGU5YWFmZGViYWNmY2VjYWVmY2VlYjBmY2YwYjJmY2YyYjRmY2Y0YjZmY2Y2YjhmY2Y3YjlmY2Y5YmJmY2ZiYmRmY2ZkYmZcIikpO1xuXG4gIHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG4gIHZhciBwbGFzbWEgPSByYW1wKGNvbG9ycyhcIjBkMDg4NzEwMDc4ODEzMDc4OTE2MDc4YTE5MDY4YzFiMDY4ZDFkMDY4ZTIwMDY4ZjIyMDY5MDI0MDY5MTI2MDU5MTI4MDU5MjJhMDU5MzJjMDU5NDJlMDU5NTJmMDU5NjMxMDU5NzMzMDU5NzM1MDQ5ODM3MDQ5OTM4MDQ5YTNhMDQ5YTNjMDQ5YjNlMDQ5YzNmMDQ5YzQxMDQ5ZDQzMDM5ZTQ0MDM5ZTQ2MDM5ZjQ4MDM5ZjQ5MDNhMDRiMDNhMTRjMDJhMTRlMDJhMjUwMDJhMjUxMDJhMzUzMDJhMzU1MDJhNDU2MDFhNDU4MDFhNDU5MDFhNTViMDFhNTVjMDFhNjVlMDFhNjYwMDFhNjYxMDBhNzYzMDBhNzY0MDBhNzY2MDBhNzY3MDBhODY5MDBhODZhMDBhODZjMDBhODZlMDBhODZmMDBhODcxMDBhODcyMDFhODc0MDFhODc1MDFhODc3MDFhODc4MDFhODdhMDJhODdiMDJhODdkMDNhODdlMDNhODgwMDRhODgxMDRhNzgzMDVhNzg0MDVhNzg2MDZhNjg3MDdhNjg4MDhhNjhhMDlhNThiMGFhNThkMGJhNThlMGNhNDhmMGRhNDkxMGVhMzkyMGZhMzk0MTBhMjk1MTFhMTk2MTNhMTk4MTRhMDk5MTU5ZjlhMTY5ZjljMTc5ZTlkMTg5ZDllMTk5ZGEwMWE5Y2ExMWI5YmEyMWQ5YWEzMWU5YWE1MWY5OWE2MjA5OGE3MjE5N2E4MjI5NmFhMjM5NWFiMjQ5NGFjMjY5NGFkMjc5M2FlMjg5MmIwMjk5MWIxMmE5MGIyMmI4ZmIzMmM4ZWI0MmU4ZGI1MmY4Y2I2MzA4YmI3MzE4YWI4MzI4OWJhMzM4OGJiMzQ4OGJjMzU4N2JkMzc4NmJlMzg4NWJmMzk4NGMwM2E4M2MxM2I4MmMyM2M4MWMzM2Q4MGM0M2U3ZmM1NDA3ZWM2NDE3ZGM3NDI3Y2M4NDM3YmM5NDQ3YWNhNDU3YWNiNDY3OWNjNDc3OGNjNDk3N2NkNGE3NmNlNGI3NWNmNGM3NGQwNGQ3M2QxNGU3MmQyNGY3MWQzNTE3MWQ0NTI3MGQ1NTM2ZmQ1NTQ2ZWQ2NTU2ZGQ3NTY2Y2Q4NTc2YmQ5NTg2YWRhNWE2YWRhNWI2OWRiNWM2OGRjNWQ2N2RkNWU2NmRlNWY2NWRlNjE2NGRmNjI2M2UwNjM2M2UxNjQ2MmUyNjU2MWUyNjY2MGUzNjg1ZmU0Njk1ZWU1NmE1ZGU1NmI1ZGU2NmM1Y2U3NmU1YmU3NmY1YWU4NzA1OWU5NzE1OGU5NzI1N2VhNzQ1N2ViNzU1NmViNzY1NWVjNzc1NGVkNzk1M2VkN2E1MmVlN2I1MWVmN2M1MWVmN2U1MGYwN2Y0ZmYwODA0ZWYxODE0ZGYxODM0Y2YyODQ0YmYzODU0YmYzODc0YWY0ODg0OWY0ODk0OGY1OGI0N2Y1OGM0NmY2OGQ0NWY2OGY0NGY3OTA0NGY3OTE0M2Y3OTM0MmY4OTQ0MWY4OTU0MGY5OTczZmY5OTgzZWY5OWEzZWZhOWIzZGZhOWMzY2ZhOWUzYmZiOWYzYWZiYTEzOWZiYTIzOGZjYTMzOGZjYTUzN2ZjYTYzNmZjYTgzNWZjYTkzNGZkYWIzM2ZkYWMzM2ZkYWUzMmZkYWYzMWZkYjEzMGZkYjIyZmZkYjQyZmZkYjUyZWZlYjcyZGZlYjgyY2ZlYmEyY2ZlYmIyYmZlYmQyYWZlYmUyYWZlYzAyOWZkYzIyOWZkYzMyOGZkYzUyN2ZkYzYyN2ZkYzgyN2ZkY2EyNmZkY2IyNmZjY2QyNWZjY2UyNWZjZDAyNWZjZDIyNWZiZDMyNGZiZDUyNGZiZDcyNGZhZDgyNGZhZGEyNGY5ZGMyNGY5ZGQyNWY4ZGYyNWY4ZTEyNWY3ZTIyNWY3ZTQyNWY2ZTYyNmY2ZTgyNmY1ZTkyNmY1ZWIyN2Y0ZWQyN2YzZWUyN2YzZjAyN2YyZjIyN2YxZjQyNmYxZjUyNWYwZjcyNGYwZjkyMVwiKSk7XG5cbiAgZnVuY3Rpb24gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpIHtcbiAgICB2YXIgeDAgPSAwLFxuICAgICAgICB4MSA9IDEsXG4gICAgICAgIGNsYW1wID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICB2YXIgdCA9ICh4IC0geDApIC8gKHgxIC0geDApO1xuICAgICAgcmV0dXJuIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKSA6IHQpO1xuICAgIH1cblxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIHNjYWxlKSA6IFt4MCwgeDFdO1xuICAgIH07XG5cbiAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpLmRvbWFpbihbeDAsIHgxXSkuY2xhbXAoY2xhbXApO1xuICAgIH07XG5cbiAgICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbiAgfVxuXG4gIHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG4gIHZhciBuYW1lc3BhY2VzID0ge1xuICAgIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHhodG1sOiB4aHRtbCxcbiAgICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbiAgfTtcblxuICBmdW5jdGlvbiBuYW1lc3BhY2UobmFtZSkge1xuICAgIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gICAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICAgIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0b3IobmFtZSkge1xuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHZhciBuZXh0SWQgPSAwO1xuXG4gIGZ1bmN0aW9uIGxvY2FsKCkge1xuICAgIHJldHVybiBuZXcgTG9jYWw7XG4gIH1cblxuICBmdW5jdGlvbiBMb2NhbCgpIHtcbiAgICB0aGlzLl8gPSBcIkBcIiArICgrK25leHRJZCkudG9TdHJpbmcoMzYpO1xuICB9XG5cbiAgTG9jYWwucHJvdG90eXBlID0gbG9jYWwucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgICBnZXQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMuXztcbiAgICAgIHdoaWxlICghKGlkIGluIG5vZGUpKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgICAgcmV0dXJuIG5vZGVbaWRdO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5vZGVbdGhpcy5fXSA9IHZhbHVlO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fIGluIG5vZGUgJiYgZGVsZXRlIG5vZGVbdGhpcy5fXTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl87XG4gICAgfVxuICB9O1xuXG4gIHZhciBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICB9O1xuICB9O1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBpZiAoIWVsZW1lbnQubWF0Y2hlcykge1xuICAgICAgdmFyIHZlbmRvck1hdGNoZXMgPSBlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvclxuICAgICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgICB8fCBlbGVtZW50Lm1vek1hdGNoZXNTZWxlY3RvclxuICAgICAgICAgIHx8IGVsZW1lbnQub01hdGNoZXNTZWxlY3RvcjtcbiAgICAgIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHZlbmRvck1hdGNoZXMuY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBtYXRjaGVyJDEgPSBtYXRjaGVyO1xuXG4gIHZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuICBleHBvcnRzLmV2ZW50ID0gbnVsbDtcblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGVsZW1lbnQkMSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQkMSkpIHtcbiAgICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gICAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICAgIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICAgIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDA7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzJDEodHlwZW5hbWVzKSB7XG4gICAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICAgIGlmICghb24pIHJldHVybjtcbiAgICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvblsrK2ldID0gbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gICAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gd3JhcCh2YWx1ZSwgaSwgZ3JvdXApO1xuICAgICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgICAgZWxzZSBvbi5wdXNoKG8pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gICAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzJDEodHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgICB2YXIgZXZlbnQwID0gZXhwb3J0cy5ldmVudDtcbiAgICBldmVudDEuc291cmNlRXZlbnQgPSBleHBvcnRzLmV2ZW50O1xuICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzb3VyY2VFdmVudCgpIHtcbiAgICB2YXIgY3VycmVudCA9IGV4cG9ydHMuZXZlbnQsIHNvdXJjZTtcbiAgICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50JDUobm9kZSwgZXZlbnQpIHtcbiAgICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICAgIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZShub2RlKSB7XG4gICAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgcmV0dXJuIHBvaW50JDUobm9kZSwgZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9uZSQyKCkge31cblxuICBmdW5jdGlvbiBzZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSQyIDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3NlbGVjdChzZWxlY3QpIHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0b3JBbGwoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3NlbGVjdEFsbChzZWxlY3QpIHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2ZpbHRlcihtYXRjaCkge1xuICAgIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyJDEobWF0Y2gpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3BhcnNlKHVwZGF0ZSkge1xuICAgIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZW50ZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gICAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICAgIHRoaXMuX25leHQgPSBudWxsO1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG4gIH1cblxuICBFbnRlck5vZGUucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gICAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICAgIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbiAgfTtcblxuICBmdW5jdGlvbiBjb25zdGFudCQ0KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuICBmdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAgIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gICAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gICAgLy8gUHV0IGFueSByZW1haW5pbmcgZGF0YSBpbnRvIGVudGVyLlxuICAgIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGRvbuKAmXQgZml0IGludG8gZXhpdC5cbiAgICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgICAga2V5VmFsdWU7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gICAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gICAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gICAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZXNbaV1dID09PSBub2RlKSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZGF0YSh2YWx1ZSwga2V5KSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgICBwYXJlbnRzID0gdGhpcy5fcGFyZW50cyxcbiAgICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50JDQodmFsdWUpO1xuXG4gICAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgICBncm91cCA9IGdyb3Vwc1tqXSxcbiAgICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICAgIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZXhpdCgpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fbWVyZ2Uoc2VsZWN0aW9uKSB7XG5cbiAgICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9vcmRlcigpIHtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9zb3J0KGNvbXBhcmUpIHtcbiAgICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmckMjtcblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzY2VuZGluZyQyKGEsIGIpIHtcbiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fY2FsbCgpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gICAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX25vZGVzKCkge1xuICAgIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fbm9kZSgpIHtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3NpemUoKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9lbXB0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMubm9kZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2VhY2goY2FsbGJhY2spIHtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9hdHRyKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpbmRvdyhub2RlKSB7XG4gICAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc3R5bGUobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgdmFyIG5vZGU7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICAgIDogd2luZG93KG5vZGUgPSB0aGlzLm5vZGUoKSlcbiAgICAgICAgICAgIC5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpXG4gICAgICAgICAgICAuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG4gIH1cblxuICBmdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICAgIHRoaXMuX25vZGUgPSBub2RlO1xuICAgIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xuICB9XG5cbiAgQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgICAgfVxuICAgIH0sXG4gICAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9jbGFzc2VkKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl90ZXh0KHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2h0bWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhaXNlJDEoKSB7XG4gICAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9yYWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlJDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG93ZXIoKSB7XG4gICAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9sb3dlcigpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9hcHBlbmQobmFtZSkge1xuICAgIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2luc2VydChuYW1lLCBiZWZvcmUpIHtcbiAgICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9yZW1vdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2RhdHVtKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG4gIH1cblxuICBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICAgIHZhciB3aW5kb3ckJCA9IHdpbmRvdyhub2RlKSxcbiAgICAgICAgZXZlbnQgPSB3aW5kb3ckJC5DdXN0b21FdmVudDtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQgPSB3aW5kb3ckJC5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZGlzcGF0Y2godHlwZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xuICB9XG5cbiAgdmFyIHJvb3QgPSBbbnVsbF07XG5cbiAgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICAgIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbiAgfVxuXG4gIFNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gICAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICAgIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gICAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gICAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICAgIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gICAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gICAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gICAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICAgIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICAgIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICAgIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gICAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICAgIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gICAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICAgIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gICAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgICBvbjogc2VsZWN0aW9uX29uLFxuICAgIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbiAgfTtcblxuICBmdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdEFsbChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgICA6IG5ldyBTZWxlY3Rpb24oW3NlbGVjdG9yID09IG51bGwgPyBbXSA6IHNlbGVjdG9yXSwgcm9vdCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaChub2RlLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBpZGVudGlmaWVyID0gdG91Y2hlcywgdG91Y2hlcyA9IHNvdXJjZUV2ZW50KCkuY2hhbmdlZFRvdWNoZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHRvdWNoOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHRvdWNoID0gdG91Y2hlc1tpXSkuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gcG9pbnQkNShub2RlLCB0b3VjaCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVzKG5vZGUsIHRvdWNoZXMpIHtcbiAgICBpZiAodG91Y2hlcyA9PSBudWxsKSB0b3VjaGVzID0gc291cmNlRXZlbnQoKS50b3VjaGVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzID8gdG91Y2hlcy5sZW5ndGggOiAwLCBwb2ludHMgPSBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcbiAgICAgIHBvaW50c1tpXSA9IHBvaW50JDUobm9kZSwgdG91Y2hlc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvaW50cztcbiAgfVxuXG4gIHZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImludGVycnVwdFwiKTtcbiAgdmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuICB2YXIgQ1JFQVRFRCA9IDA7XG4gIHZhciBTQ0hFRFVMRUQgPSAxO1xuICB2YXIgU1RBUlRJTkcgPSAyO1xuICB2YXIgU1RBUlRFRCA9IDM7XG4gIHZhciBFTkRJTkcgPSA0O1xuICB2YXIgRU5ERUQgPSA1O1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICAgIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgICAgb246IGVtcHR5T24sXG4gICAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICAgIHRpbWVyOiBudWxsLFxuICAgICAgc3RhdGU6IENSRUFURURcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pIHx8IHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGVcIik7XG4gICAgcmV0dXJuIHNjaGVkdWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0JDIobm9kZSwgaWQpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pIHx8IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlXCIpO1xuICAgIHJldHVybiBzY2hlZHVsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldCQxKG5vZGUsIGlkKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gICAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGVcIik7XG4gICAgcmV0dXJuIHNjaGVkdWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgICB0d2VlbjtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAgIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICAgIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICAgIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBkZWxheSBpcyBncmVhdGVyIHRoYW4gdGhpcyBmaXJzdCBzbGVlcCwgc2xlZXAgc29tZSBtb3JlO1xuICAgIC8vIG90aGVyd2lzZSwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgICAgIGVsc2Ugc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgICAvLyBEaXNwYXRjaCB0aGUgaW50ZXJydXB0IGV2ZW50LlxuICAgICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy4gTm8gaW50ZXJydXB0IGV2ZW50IGlzIGRpc3BhdGNoZWRcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgY2FuY2VsbGVkIHRyYW5zaXRpb25zIG5ldmVyIHN0YXJ0ZWQuIE5vdGUgdGhhdCB0aGlzIGFsc29cbiAgICAgICAgLy8gcmVtb3ZlcyB0aGlzIHRyYW5zaXRpb24gZnJvbSB0aGUgcGVuZGluZyBsaXN0IVxuICAgICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgbWJvc3RvY2svZDMjMTU3Ni5cbiAgICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgICB0aW1lb3V0JDEoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHR3ZWVuW2ldLmNhbGwobnVsbCwgdCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgICAgZm9yIChpIGluIHNjaGVkdWxlcykgaWYgKCtpICE9PSBpZCkgcmV0dXJuIHZvaWQgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnJ1cHQobm9kZSwgbmFtZSkge1xuICAgIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgICAgc2NoZWR1bGUsXG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgICBpO1xuXG4gICAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICAgIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA9PT0gU1RBUlRFRDtcbiAgICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgICBpZiAoYWN0aXZlKSBzY2hlZHVsZS5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgIH1cblxuICAgIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2ludGVycnVwdChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gICAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCQyKHRoaXMsIGlkKSxcbiAgICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0JDIodGhpcywgaWQpLFxuICAgICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3R3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgICBuYW1lICs9IFwiXCI7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciB0d2VlbiA9IGdldCQxKHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICAgIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCQyKHRoaXMsIGlkKTtcbiAgICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gZ2V0JDEobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZSQxKGEsIGIpIHtcbiAgICB2YXIgYztcbiAgICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyUmVtb3ZlJDEobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyUmVtb3ZlTlMkMShmdWxsbmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckNvbnN0YW50JDEobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICAgIHZhciB2YWx1ZTAwLFxuICAgICAgICBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnROUyQxKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gICAgdmFyIHZhbHVlMDAsXG4gICAgICAgIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyRnVuY3Rpb24kMShuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgdmFsdWUxMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZTAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TJDEoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICAgIHZhciB2YWx1ZTAwLFxuICAgICAgICB2YWx1ZTEwLFxuICAgICAgICBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX2F0dHIobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtJDIgOiBpbnRlcnBvbGF0ZSQxO1xuICAgIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TJDEgOiBhdHRyRnVuY3Rpb24kMSkoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMkMSA6IGF0dHJSZW1vdmUkMSkoZnVsbG5hbWUpXG4gICAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMkMSA6IGF0dHJDb25zdGFudCQxKShmdWxsbmFtZSwgaSwgdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICAgIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkodCkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gICAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gICAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fZGVsYXkodmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICAgIDogZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc2V0JDIodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICAgIHNldCQyKHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX2R1cmF0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgICA6IGdldCQxKHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc2V0JDIodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9lYXNlKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgICAgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX2ZpbHRlcihtYXRjaCkge1xuICAgIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyJDEobWF0Y2gpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX21lcmdlKHRyYW5zaXRpb24pIHtcbiAgICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0JDEobmFtZSkge1xuICAgIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgICAgaWYgKGkgPj0gMCkgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0JDEobmFtZSkgPyBpbml0IDogc2V0JDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2l0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9vbihuYW1lLCBsaXN0ZW5lcikge1xuICAgIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXG4gICAgICAgID8gZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgICA6IHRoaXMuZWFjaChvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3JlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fc2VsZWN0KHNlbGVjdCkge1xuICAgIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQkMShub2RlLCBpZCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zZWxlY3RBbGwoc2VsZWN0KSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldCQxKG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xuICB9XG5cbiAgdmFyIFNlbGVjdGlvbiQxID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbiQxKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZVJlbW92ZSQxKG5hbWUsIGludGVycG9sYXRlKSB7XG4gICAgdmFyIHZhbHVlMDAsXG4gICAgICAgIHZhbHVlMTAsXG4gICAgICAgIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3codGhpcykuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKSxcbiAgICAgICAgICB2YWx1ZTAgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpLFxuICAgICAgICAgIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpKTtcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZVJlbW92ZUVuZChuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVDb25zdGFudCQxKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZTAgPSB3aW5kb3codGhpcykuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uJDEobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlMDAsXG4gICAgICAgIHZhbHVlMTAsXG4gICAgICAgIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3R5bGUgPSB3aW5kb3codGhpcykuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKSxcbiAgICAgICAgICB2YWx1ZTAgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpLFxuICAgICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgICAgaWYgKHZhbHVlMSA9PSBudWxsKSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMSA6IGludGVycG9sYXRlJDE7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAgICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZVJlbW92ZSQxKG5hbWUsIGkpKVxuICAgICAgICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmVFbmQobmFtZSkpXG4gICAgICAgIDogdGhpcy5zdHlsZVR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb24kMShuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQkMShuYW1lLCBpLCB2YWx1ZSksIHByaW9yaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0Q29uc3RhbnQkMSh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdGV4dEZ1bmN0aW9uJDEodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3RleHQodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyB0ZXh0RnVuY3Rpb24kMSh0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICAgIDogdGV4dENvbnN0YW50JDEodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fdHJhbnNpdGlvbigpIHtcbiAgICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQkMShub2RlLCBpZDApO1xuICAgICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbiAgfVxuXG4gIHZhciBpZCA9IDA7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gICAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICAgIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIHRoaXMuX2lkID0gaWQ7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld0lkKCkge1xuICAgIHJldHVybiArK2lkO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG4gIFRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXG4gICAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICAgIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gICAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gICAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gICAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICAgIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICAgIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gICAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gICAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICAgIG9uOiB0cmFuc2l0aW9uX29uLFxuICAgIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICAgIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICAgIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gICAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2VcbiAgfTtcblxuICB2YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICAgIGRlbGF5OiAwLFxuICAgIGR1cmF0aW9uOiAyNTAsXG4gICAgZWFzZTogZWFzZUN1YmljSW5PdXRcbiAgfTtcblxuICBmdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gICAgdmFyIHRpbWluZztcbiAgICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGltaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3RyYW5zaXRpb24obmFtZSkge1xuICAgIHZhciBpZCxcbiAgICAgICAgdGltaW5nO1xuXG4gICAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICAgIH1cblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbiAgfVxuXG4gIHNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbiAgc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG5cbiAgdmFyIHJvb3QkMSA9IFtudWxsXTtcblxuICBmdW5jdGlvbiBhY3RpdmUobm9kZSwgbmFtZSkge1xuICAgIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgICAgc2NoZWR1bGUsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoc2NoZWR1bGVzKSB7XG4gICAgICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICAgICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5zdGF0ZSA+IFNDSEVEVUxFRCAmJiBzY2hlZHVsZS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKFtbbm9kZV1dLCByb290JDEsIG5hbWUsICtpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNsaWNlJDQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkkNSh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cblxuICB2YXIgdG9wID0gMTtcbiAgdmFyIHJpZ2h0ID0gMjtcbiAgdmFyIGJvdHRvbSA9IDM7XG4gIHZhciBsZWZ0ID0gNDtcbnZhciAgIGVwc2lsb24kMiA9IDFlLTY7XG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZVgoc2NhbGUwLCBzY2FsZTEsIGQpIHtcbiAgICB2YXIgeCA9IHNjYWxlMChkKTtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoaXNGaW5pdGUoeCkgPyB4IDogc2NhbGUxKGQpKSArIFwiLDApXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGVZKHNjYWxlMCwgc2NhbGUxLCBkKSB7XG4gICAgdmFyIHkgPSBzY2FsZTAoZCk7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoaXNGaW5pdGUoeSkgPyB5IDogc2NhbGUxKGQpKSArIFwiKVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gICAgdmFyIHdpZHRoID0gc2NhbGUuYmFuZHdpZHRoKCkgLyAyO1xuICAgIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gc2NhbGUoZCkgKyB3aWR0aDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gICAgcmV0dXJuICF0aGlzLl9fYXhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICAgIHZhciB0aWNrQXJndW1lbnRzID0gW10sXG4gICAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgICAgdGlja1NpemVJbm5lciA9IDYsXG4gICAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgICB0aWNrUGFkZGluZyA9IDM7XG5cbiAgICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSQ1KSA6IHRpY2tGb3JtYXQsXG4gICAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgICAgdHJhbnNmb3JtID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBib3R0b20gPyB0cmFuc2xhdGVYIDogdHJhbnNsYXRlWSxcbiAgICAgICAgICByYW5nZSA9IHNjYWxlLnJhbmdlKCksXG4gICAgICAgICAgcmFuZ2UwID0gcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgICAgcmFuZ2UxID0gcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogaWRlbnRpdHkkNSkoc2NhbGUuY29weSgpKSxcbiAgICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKSxcbiAgICAgICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgICAgIHgsIHkgPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/ICh4ID0gXCJ4XCIsIFwieVwiKSA6ICh4ID0gXCJ5XCIsIFwieFwiKTtcblxuICAgICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIikpO1xuXG4gICAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKVxuICAgICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpXG4gICAgICAgICAgLmF0dHIoeSArIFwiMVwiLCAwLjUpXG4gICAgICAgICAgLmF0dHIoeSArIFwiMlwiLCAwLjUpKTtcblxuICAgICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjMDAwXCIpXG4gICAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgICAgLmF0dHIoeSwgMC41KVxuICAgICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIi43MWVtXCIgOiBcIi4zMmVtXCIpKTtcblxuICAgICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24kMilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybShwb3NpdGlvbiwgdGhpcy5wYXJlbnROb2RlLl9fYXhpcyB8fCBwb3NpdGlvbiwgZCk7IH0pO1xuXG4gICAgICAgIHRpY2tFbnRlclxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24kMilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybSh0aGlzLnBhcmVudE5vZGUuX19heGlzIHx8IHBvc2l0aW9uLCBwb3NpdGlvbiwgZCk7IH0pO1xuICAgICAgfVxuXG4gICAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgICAgcGF0aFxuICAgICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICAgID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlclxuICAgICAgICAgICAgICA6IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIpO1xuXG4gICAgICB0aWNrXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uLCBwb3NpdGlvbiwgZCk7IH0pO1xuXG4gICAgICBsaW5lXG4gICAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICAgIHRleHRcbiAgICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgICBzZWxlY3Rpb24uZmlsdGVyKGVudGVyaW5nKVxuICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKVxuICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgICAgc2VsZWN0aW9uXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7IHRoaXMuX19heGlzID0gcG9zaXRpb247IH0pO1xuICAgIH1cblxuICAgIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZSA9IF8sIGF4aXMpIDogc2NhbGU7XG4gICAgfTtcblxuICAgIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aWNrQXJndW1lbnRzID0gc2xpY2UkNC5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gICAgfTtcblxuICAgIGF4aXMudGlja0FyZ3VtZW50cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlJDQuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UkNC5jYWxsKF8pLCBheGlzKSA6IHRpY2tWYWx1ZXMgJiYgdGlja1ZhbHVlcy5zbGljZSgpO1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrRm9ybWF0ID0gXywgYXhpcykgOiB0aWNrRm9ybWF0O1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9IHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplT3V0ZXI7XG4gICAgfTtcblxuICAgIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrUGFkZGluZyA9ICtfLCBheGlzKSA6IHRpY2tQYWRkaW5nO1xuICAgIH07XG5cbiAgICByZXR1cm4gYXhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgICByZXR1cm4gYXhpcyh0b3AsIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNSaWdodChzY2FsZSkge1xuICAgIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gICAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICAgIHJldHVybiBheGlzKGxlZnQsIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG4gIH1cblxuICBmdW5jdGlvbiBtZWFuWChjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UobWVhblhSZWR1Y2UsIDApIC8gY2hpbGRyZW4ubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVhblhSZWR1Y2UoeCwgYykge1xuICAgIHJldHVybiB4ICsgYy54O1xuICB9XG5cbiAgZnVuY3Rpb24gbWF4WShjaGlsZHJlbikge1xuICAgIHJldHVybiAxICsgY2hpbGRyZW4ucmVkdWNlKG1heFlSZWR1Y2UsIDApO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF4WVJlZHVjZSh5LCBjKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHksIGMueSk7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFmTGVmdChub2RlKSB7XG4gICAgdmFyIGNoaWxkcmVuO1xuICAgIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlblswXTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWZSaWdodChub2RlKSB7XG4gICAgdmFyIGNoaWxkcmVuO1xuICAgIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsdXN0ZXIoKSB7XG4gICAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgICAgZHggPSAxLFxuICAgICAgICBkeSA9IDEsXG4gICAgICAgIG5vZGVTaXplID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjbHVzdGVyKHJvb3QpIHtcbiAgICAgIHZhciBwcmV2aW91c05vZGUsXG4gICAgICAgICAgeCA9IDA7XG5cbiAgICAgIC8vIEZpcnN0IHdhbGssIGNvbXB1dGluZyB0aGUgaW5pdGlhbCB4ICYgeSB2YWx1ZXMuXG4gICAgICByb290LmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgIG5vZGUueCA9IG1lYW5YKGNoaWxkcmVuKTtcbiAgICAgICAgICBub2RlLnkgPSBtYXhZKGNoaWxkcmVuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnggPSBwcmV2aW91c05vZGUgPyB4ICs9IHNlcGFyYXRpb24obm9kZSwgcHJldmlvdXNOb2RlKSA6IDA7XG4gICAgICAgICAgbm9kZS55ID0gMDtcbiAgICAgICAgICBwcmV2aW91c05vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIGxlZnQgPSBsZWFmTGVmdChyb290KSxcbiAgICAgICAgICByaWdodCA9IGxlYWZSaWdodChyb290KSxcbiAgICAgICAgICB4MCA9IGxlZnQueCAtIHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgICB4MSA9IHJpZ2h0LnggKyBzZXBhcmF0aW9uKHJpZ2h0LCBsZWZ0KSAvIDI7XG5cbiAgICAgIC8vIFNlY29uZCB3YWxrLCBub3JtYWxpemluZyB4ICYgeSB0byB0aGUgZGVzaXJlZCBzaXplLlxuICAgICAgcmV0dXJuIHJvb3QuZWFjaEFmdGVyKG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0gcm9vdC54KSAqIGR4O1xuICAgICAgICBub2RlLnkgPSAocm9vdC55IC0gbm9kZS55KSAqIGR5O1xuICAgICAgfSA6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHgwKSAvICh4MSAtIHgwKSAqIGR4O1xuICAgICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBkeTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCBjbHVzdGVyKSA6IHNlcGFyYXRpb247XG4gICAgfTtcblxuICAgIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgICB9O1xuXG4gICAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2x1c3RlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfZWFjaChjYWxsYmFjaykge1xuICAgIHZhciBub2RlID0gdGhpcywgY3VycmVudCwgbmV4dCA9IFtub2RlXSwgY2hpbGRyZW4sIGksIG47XG4gICAgZG8ge1xuICAgICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgICB3aGlsZSAobm9kZSA9IGN1cnJlbnQucG9wKCkpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfZWFjaEJlZm9yZShjYWxsYmFjaykge1xuICAgIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpO1xuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfZWFjaEFmdGVyKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbjtcbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX3N1bSh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgc3VtID0gK3ZhbHVlKG5vZGUuZGF0YSkgfHwgMCxcbiAgICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgICAgbm9kZS52YWx1ZSA9IHN1bTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfc29ydChjb21wYXJlKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX3BhdGgoZW5kKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcyxcbiAgICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgICBub2RlcyA9IFtzdGFydF07XG4gICAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xuICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcbiAgICB9XG4gICAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGVuZCAhPT0gYW5jZXN0b3IpIHtcbiAgICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xuICAgICAgZW5kID0gZW5kLnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICAgIHZhciBhTm9kZXMgPSBhLmFuY2VzdG9ycygpLFxuICAgICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxuICAgICAgICBjID0gbnVsbDtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gICAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICAgIGMgPSBhO1xuICAgICAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9hbmNlc3RvcnMoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXTtcbiAgICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX2Rlc2NlbmRhbnRzKCkge1xuICAgIHZhciBub2RlcyA9IFtdO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBub2RlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfbGVhdmVzKCkge1xuICAgIHZhciBsZWF2ZXMgPSBbXTtcbiAgICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBsZWF2ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX2xpbmtzKCkge1xuICAgIHZhciByb290ID0gdGhpcywgbGlua3MgPSBbXTtcbiAgICByb290LmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgICAgbGlua3MucHVzaCh7c291cmNlOiBub2RlLnBhcmVudCwgdGFyZ2V0OiBub2RlfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxpbmtzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gICAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgICAgdmFsdWVkID0gK2RhdGEudmFsdWUgJiYgKHJvb3QudmFsdWUgPSBkYXRhLnZhbHVlKSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgbm9kZXMgPSBbcm9vdF0sXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBjaGlsZHMsXG4gICAgICAgIGksXG4gICAgICAgIG47XG5cbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgICBpZiAodmFsdWVkKSBub2RlLnZhbHVlID0gK25vZGUuZGF0YS52YWx1ZTtcbiAgICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xuICAgICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gICAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihkKSB7XG4gICAgcmV0dXJuIGQuY2hpbGRyZW47XG4gIH1cblxuICBmdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gICAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICBkbyBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5kZXB0aCA9XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgfVxuXG4gIE5vZGUucHJvdG90eXBlID0gaGllcmFyY2h5LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogTm9kZSxcbiAgICBlYWNoOiBub2RlX2VhY2gsXG4gICAgZWFjaEFmdGVyOiBub2RlX2VhY2hBZnRlcixcbiAgICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gICAgc3VtOiBub2RlX3N1bSxcbiAgICBzb3J0OiBub2RlX3NvcnQsXG4gICAgcGF0aDogbm9kZV9wYXRoLFxuICAgIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gICAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gICAgbGVhdmVzOiBub2RlX2xlYXZlcyxcbiAgICBsaW5rczogbm9kZV9saW5rcyxcbiAgICBjb3B5OiBub2RlX2NvcHlcbiAgfTtcblxuICBmdW5jdGlvbiBOb2RlJDIodmFsdWUpIHtcbiAgICB0aGlzLl8gPSB2YWx1ZTtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gc2h1ZmZsZSQxKGFycmF5KSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSAoYXJyYXkgPSBhcnJheS5zbGljZSgpKS5sZW5ndGgsXG4gICAgICAgIGhlYWQgPSBudWxsLFxuICAgICAgICBub2RlID0gaGVhZDtcblxuICAgIHdoaWxlIChuKSB7XG4gICAgICB2YXIgbmV4dCA9IG5ldyBOb2RlJDIoYXJyYXlbbiAtIDFdKTtcbiAgICAgIGlmIChub2RlKSBub2RlID0gbm9kZS5uZXh0ID0gbmV4dDtcbiAgICAgIGVsc2Ugbm9kZSA9IGhlYWQgPSBuZXh0O1xuICAgICAgYXJyYXlbaV0gPSBhcnJheVstLW5dO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBoZWFkOiBoZWFkLFxuICAgICAgdGFpbDogbm9kZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbmNsb3NlKGNpcmNsZXMpIHtcbiAgICByZXR1cm4gZW5jbG9zZU4oc2h1ZmZsZSQxKGNpcmNsZXMpLCBbXSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNsb3NlcyhhLCBiKSB7XG4gICAgdmFyIGR4ID0gYi54IC0gYS54LFxuICAgICAgICBkeSA9IGIueSAtIGEueSxcbiAgICAgICAgZHIgPSBhLnIgLSBiLnI7XG4gICAgcmV0dXJuIGRyICogZHIgKyAxZS02ID4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cblxuICAvLyBSZXR1cm5zIHRoZSBzbWFsbGVzdCBjaXJjbGUgdGhhdCBjb250YWlucyBjaXJjbGVzIEwgYW5kIGludGVyc2VjdHMgY2lyY2xlcyBCLlxuICBmdW5jdGlvbiBlbmNsb3NlTihMLCBCKSB7XG4gICAgdmFyIGNpcmNsZSxcbiAgICAgICAgbDAgPSBudWxsLFxuICAgICAgICBsMSA9IEwuaGVhZCxcbiAgICAgICAgbDIsXG4gICAgICAgIHAxO1xuXG4gICAgc3dpdGNoIChCLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOiBjaXJjbGUgPSBlbmNsb3NlMShCWzBdKTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IGNpcmNsZSA9IGVuY2xvc2UyKEJbMF0sIEJbMV0pOyBicmVhaztcbiAgICAgIGNhc2UgMzogY2lyY2xlID0gZW5jbG9zZTMoQlswXSwgQlsxXSwgQlsyXSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHdoaWxlIChsMSkge1xuICAgICAgcDEgPSBsMS5fLCBsMiA9IGwxLm5leHQ7XG4gICAgICBpZiAoIWNpcmNsZSB8fCAhZW5jbG9zZXMoY2lyY2xlLCBwMSkpIHtcblxuICAgICAgICAvLyBUZW1wb3JhcmlseSB0cnVuY2F0ZSBMIGJlZm9yZSBsMS5cbiAgICAgICAgaWYgKGwwKSBMLnRhaWwgPSBsMCwgbDAubmV4dCA9IG51bGw7XG4gICAgICAgIGVsc2UgTC5oZWFkID0gTC50YWlsID0gbnVsbDtcblxuICAgICAgICBCLnB1c2gocDEpO1xuICAgICAgICBjaXJjbGUgPSBlbmNsb3NlTihMLCBCKTsgLy8gTm90ZTogcmVvcmRlcnMgTCFcbiAgICAgICAgQi5wb3AoKTtcblxuICAgICAgICAvLyBNb3ZlIGwxIHRvIHRoZSBmcm9udCBvZiBMIGFuZCByZWNvbm5lY3QgdGhlIHRydW5jYXRlZCBsaXN0IEwuXG4gICAgICAgIGlmIChMLmhlYWQpIGwxLm5leHQgPSBMLmhlYWQsIEwuaGVhZCA9IGwxO1xuICAgICAgICBlbHNlIGwxLm5leHQgPSBudWxsLCBMLmhlYWQgPSBMLnRhaWwgPSBsMTtcbiAgICAgICAgbDAgPSBMLnRhaWwsIGwwLm5leHQgPSBsMjtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbDAgPSBsMTtcbiAgICAgIH1cbiAgICAgIGwxID0gbDI7XG4gICAgfVxuXG4gICAgTC50YWlsID0gbDA7XG4gICAgcmV0dXJuIGNpcmNsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2UxKGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogYS54LFxuICAgICAgeTogYS55LFxuICAgICAgcjogYS5yXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2UyKGEsIGIpIHtcbiAgICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcbiAgICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgICAgeDIxID0geDIgLSB4MSwgeTIxID0geTIgLSB5MSwgcjIxID0gcjIgLSByMSxcbiAgICAgICAgbCA9IE1hdGguc3FydCh4MjEgKiB4MjEgKyB5MjEgKiB5MjEpO1xuICAgIHJldHVybiB7XG4gICAgICB4OiAoeDEgKyB4MiArIHgyMSAvIGwgKiByMjEpIC8gMixcbiAgICAgIHk6ICh5MSArIHkyICsgeTIxIC8gbCAqIHIyMSkgLyAyLFxuICAgICAgcjogKGwgKyByMSArIHIyKSAvIDJcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jbG9zZTMoYSwgYiwgYykge1xuICAgIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgICB4MyA9IGMueCwgeTMgPSBjLnksIHIzID0gYy5yLFxuICAgICAgICBhMiA9IDIgKiAoeDEgLSB4MiksXG4gICAgICAgIGIyID0gMiAqICh5MSAtIHkyKSxcbiAgICAgICAgYzIgPSAyICogKHIyIC0gcjEpLFxuICAgICAgICBkMiA9IHgxICogeDEgKyB5MSAqIHkxIC0gcjEgKiByMSAtIHgyICogeDIgLSB5MiAqIHkyICsgcjIgKiByMixcbiAgICAgICAgYTMgPSAyICogKHgxIC0geDMpLFxuICAgICAgICBiMyA9IDIgKiAoeTEgLSB5MyksXG4gICAgICAgIGMzID0gMiAqIChyMyAtIHIxKSxcbiAgICAgICAgZDMgPSB4MSAqIHgxICsgeTEgKiB5MSAtIHIxICogcjEgLSB4MyAqIHgzIC0geTMgKiB5MyArIHIzICogcjMsXG4gICAgICAgIGFiID0gYTMgKiBiMiAtIGEyICogYjMsXG4gICAgICAgIHhhID0gKGIyICogZDMgLSBiMyAqIGQyKSAvIGFiIC0geDEsXG4gICAgICAgIHhiID0gKGIzICogYzIgLSBiMiAqIGMzKSAvIGFiLFxuICAgICAgICB5YSA9IChhMyAqIGQyIC0gYTIgKiBkMykgLyBhYiAtIHkxLFxuICAgICAgICB5YiA9IChhMiAqIGMzIC0gYTMgKiBjMikgLyBhYixcbiAgICAgICAgQSA9IHhiICogeGIgKyB5YiAqIHliIC0gMSxcbiAgICAgICAgQiA9IDIgKiAoeGEgKiB4YiArIHlhICogeWIgKyByMSksXG4gICAgICAgIEMgPSB4YSAqIHhhICsgeWEgKiB5YSAtIHIxICogcjEsXG4gICAgICAgIHIgPSAoLUIgLSBNYXRoLnNxcnQoQiAqIEIgLSA0ICogQSAqIEMpKSAvICgyICogQSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHhhICsgeGIgKiByICsgeDEsXG4gICAgICB5OiB5YSArIHliICogciArIHkxLFxuICAgICAgcjogclxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZShhLCBiLCBjKSB7XG4gICAgdmFyIGF4ID0gYS54LFxuICAgICAgICBheSA9IGEueSxcbiAgICAgICAgZGEgPSBiLnIgKyBjLnIsXG4gICAgICAgIGRiID0gYS5yICsgYy5yLFxuICAgICAgICBkeCA9IGIueCAtIGF4LFxuICAgICAgICBkeSA9IGIueSAtIGF5LFxuICAgICAgICBkYyA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGlmIChkYykge1xuICAgICAgdmFyIHggPSAwLjUgKyAoKGRiICo9IGRiKSAtIChkYSAqPSBkYSkpIC8gKDIgKiBkYyksXG4gICAgICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCAyICogZGEgKiAoZGIgKyBkYykgLSAoZGIgLT0gZGMpICogZGIgLSBkYSAqIGRhKSkgLyAoMiAqIGRjKTtcbiAgICAgIGMueCA9IGF4ICsgeCAqIGR4ICsgeSAqIGR5O1xuICAgICAgYy55ID0gYXkgKyB4ICogZHkgLSB5ICogZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMueCA9IGF4ICsgZGI7XG4gICAgICBjLnkgPSBheTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcbiAgICB2YXIgZHggPSBiLnggLSBhLngsXG4gICAgICAgIGR5ID0gYi55IC0gYS55LFxuICAgICAgICBkciA9IGEuciArIGIucjtcbiAgICByZXR1cm4gZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzdGFuY2UyKGNpcmNsZSwgeCwgeSkge1xuICAgIHZhciBkeCA9IGNpcmNsZS54IC0geCxcbiAgICAgICAgZHkgPSBjaXJjbGUueSAtIHk7XG4gICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuICB9XG5cbiAgZnVuY3Rpb24gTm9kZSQxKGNpcmNsZSkge1xuICAgIHRoaXMuXyA9IGNpcmNsZTtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgIHRoaXMucHJldmlvdXMgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFja0VuY2xvc2UoY2lyY2xlcykge1xuICAgIGlmICghKG4gPSBjaXJjbGVzLmxlbmd0aCkpIHJldHVybiAwO1xuXG4gICAgdmFyIGEsIGIsIGMsIG47XG5cbiAgICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICAgIGEgPSBjaXJjbGVzWzBdLCBhLnggPSAwLCBhLnkgPSAwO1xuICAgIGlmICghKG4gPiAxKSkgcmV0dXJuIGEucjtcblxuICAgIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICAgIGIgPSBjaXJjbGVzWzFdLCBhLnggPSAtYi5yLCBiLnggPSBhLnIsIGIueSA9IDA7XG4gICAgaWYgKCEobiA+IDIpKSByZXR1cm4gYS5yICsgYi5yO1xuXG4gICAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgICBwbGFjZShiLCBhLCBjID0gY2lyY2xlc1syXSk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB3ZWlnaHRlZCBjZW50cm9pZC5cbiAgICB2YXIgYWEgPSBhLnIgKiBhLnIsXG4gICAgICAgIGJhID0gYi5yICogYi5yLFxuICAgICAgICBjYSA9IGMuciAqIGMucixcbiAgICAgICAgb2EgPSBhYSArIGJhICsgY2EsXG4gICAgICAgIG94ID0gYWEgKiBhLnggKyBiYSAqIGIueCArIGNhICogYy54LFxuICAgICAgICBveSA9IGFhICogYS55ICsgYmEgKiBiLnkgKyBjYSAqIGMueSxcbiAgICAgICAgY3gsIGN5LCBpLCBqLCBrLCBzaiwgc2s7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBmcm9udC1jaGFpbiB1c2luZyB0aGUgZmlyc3QgdGhyZWUgY2lyY2xlcyBhLCBiIGFuZCBjLlxuICAgIGEgPSBuZXcgTm9kZSQxKGEpLCBiID0gbmV3IE5vZGUkMShiKSwgYyA9IG5ldyBOb2RlJDEoYyk7XG4gICAgYS5uZXh0ID0gYy5wcmV2aW91cyA9IGI7XG4gICAgYi5uZXh0ID0gYS5wcmV2aW91cyA9IGM7XG4gICAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgICAvLyBBdHRlbXB0IHRvIHBsYWNlIGVhY2ggcmVtYWluaW5nIGNpcmNsZeKAplxuICAgIHBhY2s6IGZvciAoaSA9IDM7IGkgPCBuOyArK2kpIHtcbiAgICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZSQxKGMpO1xuXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgb25seSB0aHJlZSBlbGVtZW50cyBpbiB0aGUgZnJvbnQtY2hhaW7igKZcbiAgICAgIGlmICgoayA9IGEucHJldmlvdXMpID09PSAoaiA9IGIubmV4dCkpIHtcbiAgICAgICAgLy8gSWYgdGhlIG5ldyBjaXJjbGUgaW50ZXJzZWN0cyB0aGUgdGhpcmQgY2lyY2xlLFxuICAgICAgICAvLyByb3RhdGUgdGhlIGZyb250IGNoYWluIHRvIHRyeSB0aGUgbmV4dCBwb3NpdGlvbi5cbiAgICAgICAgaWYgKGludGVyc2VjdHMoai5fLCBjLl8pKSB7XG4gICAgICAgICAgYSA9IGIsIGIgPSBqLCAtLWk7XG4gICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IGludGVyc2VjdGluZyBjaXJjbGUgb24gdGhlIGZyb250LWNoYWluLCBpZiBhbnkuXG4gICAgICBlbHNlIHtcbiAgICAgICAgc2ogPSBqLl8uciwgc2sgPSBrLl8ucjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChzaiA8PSBzaykge1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoai5fLCBjLl8pKSB7XG4gICAgICAgICAgICAgIGIgPSBqLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaiA9IGoubmV4dCwgc2ogKz0gai5fLnI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3RzKGsuXywgYy5fKSkge1xuICAgICAgICAgICAgICBhID0gaywgYS5uZXh0ID0gYiwgYi5wcmV2aW91cyA9IGEsIC0taTtcbiAgICAgICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsgPSBrLnByZXZpb3VzLCBzayArPSBrLl8ucjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGogIT09IGsubmV4dCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN1Y2Nlc3MhIEluc2VydCB0aGUgbmV3IGNpcmNsZSBjIGJldHdlZW4gYSBhbmQgYi5cbiAgICAgIGMucHJldmlvdXMgPSBhLCBjLm5leHQgPSBiLCBhLm5leHQgPSBiLnByZXZpb3VzID0gYiA9IGM7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgd2VpZ2h0ZWQgY2VudHJvaWQuXG4gICAgICBvYSArPSBjYSA9IGMuXy5yICogYy5fLnI7XG4gICAgICBveCArPSBjYSAqIGMuXy54O1xuICAgICAgb3kgKz0gY2EgKiBjLl8ueTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgbmV3IGNsb3Nlc3QgY2lyY2xlIGEgdG8gY2VudHJvaWQuXG4gICAgICBhYSA9IGRpc3RhbmNlMihhLl8sIGN4ID0gb3ggLyBvYSwgY3kgPSBveSAvIG9hKTtcbiAgICAgIHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIHtcbiAgICAgICAgaWYgKChjYSA9IGRpc3RhbmNlMihjLl8sIGN4LCBjeSkpIDwgYWEpIHtcbiAgICAgICAgICBhID0gYywgYWEgPSBjYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYiA9IGEubmV4dDtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIHRoZSBlbmNsb3NpbmcgY2lyY2xlIG9mIHRoZSBmcm9udCBjaGFpbi5cbiAgICBhID0gW2IuX10sIGMgPSBiOyB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSBhLnB1c2goYy5fKTsgYyA9IGVuY2xvc2UoYSk7XG5cbiAgICAvLyBUcmFuc2xhdGUgdGhlIGNpcmNsZXMgdG8gcHV0IHRoZSBlbmNsb3NpbmcgY2lyY2xlIGFyb3VuZCB0aGUgb3JpZ2luLlxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGEgPSBjaXJjbGVzW2ldLCBhLnggLT0gYy54LCBhLnkgLT0gYy55O1xuXG4gICAgcmV0dXJuIGMucjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpYmxpbmdzKGNpcmNsZXMpIHtcbiAgICBwYWNrRW5jbG9zZShjaXJjbGVzKTtcbiAgICByZXR1cm4gY2lyY2xlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9wdGlvbmFsKGYpIHtcbiAgICByZXR1cm4gZiA9PSBudWxsID8gbnVsbCA6IHJlcXVpcmVkKGYpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVxdWlyZWQoZikge1xuICAgIGlmICh0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgcmV0dXJuIGY7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudFplcm8oKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQ1KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydChkLnZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4KCkge1xuICAgIHZhciByYWRpdXMgPSBudWxsLFxuICAgICAgICBkeCA9IDEsXG4gICAgICAgIGR5ID0gMSxcbiAgICAgICAgcGFkZGluZyA9IGNvbnN0YW50WmVybztcblxuICAgIGZ1bmN0aW9uIHBhY2socm9vdCkge1xuICAgICAgcm9vdC54ID0gZHggLyAyLCByb290LnkgPSBkeSAvIDI7XG4gICAgICBpZiAocmFkaXVzKSB7XG4gICAgICAgIHJvb3QuZWFjaEJlZm9yZShyYWRpdXNMZWFmKHJhZGl1cykpXG4gICAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCAwLjUpKVxuICAgICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoMSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYoZGVmYXVsdFJhZGl1cykpXG4gICAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihjb25zdGFudFplcm8sIDEpKVxuICAgICAgICAgICAgLmVhY2hBZnRlcihwYWNrQ2hpbGRyZW4ocGFkZGluZywgcm9vdC5yIC8gTWF0aC5taW4oZHgsIGR5KSkpXG4gICAgICAgICAgICAuZWFjaEJlZm9yZSh0cmFuc2xhdGVDaGlsZChNYXRoLm1pbihkeCwgZHkpIC8gKDIgKiByb290LnIpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IG9wdGlvbmFsKHgpLCBwYWNrKSA6IHJhZGl1cztcbiAgICB9O1xuXG4gICAgcGFjay5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgcGFjaykgOiBbZHgsIGR5XTtcbiAgICB9O1xuXG4gICAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkNSgreCksIHBhY2spIDogcGFkZGluZztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBhY2s7XG4gIH1cblxuICBmdW5jdGlvbiByYWRpdXNMZWFmKHJhZGl1cykge1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgbm9kZS5yID0gTWF0aC5tYXgoMCwgK3JhZGl1cyhub2RlKSB8fCAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFja0NoaWxkcmVuKHBhZGRpbmcsIGspIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICB2YXIgY2hpbGRyZW4sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICAgIHIgPSBwYWRkaW5nKG5vZGUpICogayB8fCAwLFxuICAgICAgICAgICAgZTtcblxuICAgICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciArPSByO1xuICAgICAgICBlID0gcGFja0VuY2xvc2UoY2hpbGRyZW4pO1xuICAgICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciAtPSByO1xuICAgICAgICBub2RlLnIgPSBlICsgcjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlQ2hpbGQoaykge1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgICBub2RlLnIgKj0gaztcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgbm9kZS54ID0gcGFyZW50LnggKyBrICogbm9kZS54O1xuICAgICAgICBub2RlLnkgPSBwYXJlbnQueSArIGsgKiBub2RlLnk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdW5kTm9kZShub2RlKSB7XG4gICAgbm9kZS54MCA9IE1hdGgucm91bmQobm9kZS54MCk7XG4gICAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XG4gICAgbm9kZS54MSA9IE1hdGgucm91bmQobm9kZS54MSk7XG4gICAgbm9kZS55MSA9IE1hdGgucm91bmQobm9kZS55MSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlbWFwRGljZShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgICBub2RlLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHgxIC0geDApIC8gcGFyZW50LnZhbHVlO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTE7XG4gICAgICBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MCArPSBub2RlLnZhbHVlICogaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJ0aXRpb24oKSB7XG4gICAgdmFyIGR4ID0gMSxcbiAgICAgICAgZHkgPSAxLFxuICAgICAgICBwYWRkaW5nID0gMCxcbiAgICAgICAgcm91bmQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihyb290KSB7XG4gICAgICB2YXIgbiA9IHJvb3QuaGVpZ2h0ICsgMTtcbiAgICAgIHJvb3QueDAgPVxuICAgICAgcm9vdC55MCA9IHBhZGRpbmc7XG4gICAgICByb290LngxID0gZHg7XG4gICAgICByb290LnkxID0gZHkgLyBuO1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKHBvc2l0aW9uTm9kZShkeSwgbikpO1xuICAgICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShkeSwgbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICB0cmVlbWFwRGljZShub2RlLCBub2RlLngwLCBkeSAqIChub2RlLmRlcHRoICsgMSkgLyBuLCBub2RlLngxLCBkeSAqIChub2RlLmRlcHRoICsgMikgLyBuKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeDAgPSBub2RlLngwLFxuICAgICAgICAgICAgeTAgPSBub2RlLnkwLFxuICAgICAgICAgICAgeDEgPSBub2RlLngxIC0gcGFkZGluZyxcbiAgICAgICAgICAgIHkxID0gbm9kZS55MSAtIHBhZGRpbmc7XG4gICAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgICBub2RlLngwID0geDA7XG4gICAgICAgIG5vZGUueTAgPSB5MDtcbiAgICAgICAgbm9kZS54MSA9IHgxO1xuICAgICAgICBub2RlLnkxID0geTE7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHBhcnRpdGlvbi5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCBwYXJ0aXRpb24pIDogcm91bmQ7XG4gICAgfTtcblxuICAgIHBhcnRpdGlvbi5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgcGFydGl0aW9uKSA6IFtkeCwgZHldO1xuICAgIH07XG5cbiAgICBwYXJ0aXRpb24ucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSAreCwgcGFydGl0aW9uKSA6IHBhZGRpbmc7XG4gICAgfTtcblxuICAgIHJldHVybiBwYXJ0aXRpb247XG4gIH1cblxudmFyICAga2V5UHJlZml4JDEgPSBcIiRcIjtcbiAgdmFyIHByZXJvb3QgPSB7ZGVwdGg6IC0xfTtcbiAgdmFyIGFtYmlndW91cyA9IHt9O1xuICBmdW5jdGlvbiBkZWZhdWx0SWQoZCkge1xuICAgIHJldHVybiBkLmlkO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFBhcmVudElkKGQpIHtcbiAgICByZXR1cm4gZC5wYXJlbnRJZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmF0aWZ5KCkge1xuICAgIHZhciBpZCA9IGRlZmF1bHRJZCxcbiAgICAgICAgcGFyZW50SWQgPSBkZWZhdWx0UGFyZW50SWQ7XG5cbiAgICBmdW5jdGlvbiBzdHJhdGlmeShkYXRhKSB7XG4gICAgICB2YXIgZCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICByb290LFxuICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIG5vZGVzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIG5vZGVJZCxcbiAgICAgICAgICBub2RlS2V5LFxuICAgICAgICAgIG5vZGVCeUtleSA9IHt9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGQgPSBkYXRhW2ldLCBub2RlID0gbm9kZXNbaV0gPSBuZXcgTm9kZShkKTtcbiAgICAgICAgaWYgKChub2RlSWQgPSBpZChkLCBpLCBkYXRhKSkgIT0gbnVsbCAmJiAobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgICAgbm9kZUtleSA9IGtleVByZWZpeCQxICsgKG5vZGUuaWQgPSBub2RlSWQpO1xuICAgICAgICAgIG5vZGVCeUtleVtub2RlS2V5XSA9IG5vZGVLZXkgaW4gbm9kZUJ5S2V5ID8gYW1iaWd1b3VzIDogbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZUlkID0gcGFyZW50SWQoZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgICAgIGlmIChub2RlSWQgPT0gbnVsbCB8fCAhKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICAgIGlmIChyb290KSB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSByb290c1wiKTtcbiAgICAgICAgICByb290ID0gbm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnQgPSBub2RlQnlLZXlba2V5UHJlZml4JDEgKyBub2RlSWRdO1xuICAgICAgICAgIGlmICghcGFyZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nOiBcIiArIG5vZGVJZCk7XG4gICAgICAgICAgaWYgKHBhcmVudCA9PT0gYW1iaWd1b3VzKSB0aHJvdyBuZXcgRXJyb3IoXCJhbWJpZ3VvdXM6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgICBpZiAocGFyZW50LmNoaWxkcmVuKSBwYXJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgICBlbHNlIHBhcmVudC5jaGlsZHJlbiA9IFtub2RlXTtcbiAgICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJvb3QpIHRocm93IG5ldyBFcnJvcihcIm5vIHJvb3RcIik7XG4gICAgICByb290LnBhcmVudCA9IHByZXJvb3Q7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkgeyBub2RlLmRlcHRoID0gbm9kZS5wYXJlbnQuZGVwdGggKyAxOyAtLW47IH0pLmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gICAgICByb290LnBhcmVudCA9IG51bGw7XG4gICAgICBpZiAobiA+IDApIHRocm93IG5ldyBFcnJvcihcImN5Y2xlXCIpO1xuXG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICBzdHJhdGlmeS5pZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IGlkO1xuICAgIH07XG5cbiAgICBzdHJhdGlmeS5wYXJlbnRJZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhcmVudElkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IHBhcmVudElkO1xuICAgIH07XG5cbiAgICByZXR1cm4gc3RyYXRpZnk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbiQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG4gIH1cblxuICAvLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbiAgLy8gICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyKSAvIGEuZGVwdGg7XG4gIC8vIH1cblxuICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4gIC8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcbiAgLy8gZWl0aGVyIGdpdmVuIGJ5IHRoZSBsZWZ0bW9zdCBjaGlsZCBvZiB2IG9yIGJ5IHRoZSB0aHJlYWQgb2Ygdi4gVGhlIGZ1bmN0aW9uXG4gIC8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuICBmdW5jdGlvbiBuZXh0TGVmdCh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbiAgfVxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gd29ya3MgYW5hbG9nb3VzbHkgdG8gbmV4dExlZnQuXG4gIGZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSA6IHYudDtcbiAgfVxuXG4gIC8vIFNoaWZ0cyB0aGUgY3VycmVudCBzdWJ0cmVlIHJvb3RlZCBhdCB3Ky4gVGhpcyBpcyBkb25lIGJ5IGluY3JlYXNpbmdcbiAgLy8gcHJlbGltKHcrKSBhbmQgbW9kKHcrKSBieSBzaGlmdC5cbiAgZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICAgIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG4gICAgd3AuYyAtPSBjaGFuZ2U7XG4gICAgd3AucyArPSBzaGlmdDtcbiAgICB3bS5jICs9IGNoYW5nZTtcbiAgICB3cC56ICs9IHNoaWZ0O1xuICAgIHdwLm0gKz0gc2hpZnQ7XG4gIH1cblxuICAvLyBBbGwgb3RoZXIgc2hpZnRzLCBhcHBsaWVkIHRvIHRoZSBzbWFsbGVyIHN1YnRyZWVzIGJldHdlZW4gdy0gYW5kIHcrLCBhcmVcbiAgLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3RcbiAgLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cbiAgZnVuY3Rpb24gZXhlY3V0ZVNoaWZ0cyh2KSB7XG4gICAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgICAgY2hhbmdlID0gMCxcbiAgICAgICAgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICB3O1xuICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgICAgdy56ICs9IHNoaWZ0O1xuICAgICAgdy5tICs9IHNoaWZ0O1xuICAgICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuICAvLyByZXR1cm5zIHRoZSBzcGVjaWZpZWQgKGRlZmF1bHQpIGFuY2VzdG9yLlxuICBmdW5jdGlvbiBuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3Rvcikge1xuICAgIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyZWVOb2RlKG5vZGUsIGkpIHtcbiAgICB0aGlzLl8gPSBub2RlO1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkcmVuID0gbnVsbDtcbiAgICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gICAgdGhpcy5hID0gdGhpczsgLy8gYW5jZXN0b3JcbiAgICB0aGlzLnogPSAwOyAvLyBwcmVsaW1cbiAgICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgICB0aGlzLmMgPSAwOyAvLyBjaGFuZ2VcbiAgICB0aGlzLnMgPSAwOyAvLyBzaGlmdFxuICAgIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICAgIHRoaXMuaSA9IGk7IC8vIG51bWJlclxuICB9XG5cbiAgVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbiAgZnVuY3Rpb24gdHJlZVJvb3Qocm9vdCkge1xuICAgIHZhciB0cmVlID0gbmV3IFRyZWVOb2RlKHJvb3QsIDApLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IFt0cmVlXSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBpLFxuICAgICAgICBuO1xuXG4gICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgICAgaWYgKGNoaWxkcmVuID0gbm9kZS5fLmNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobiA9IGNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IFRyZWVOb2RlKGNoaWxkcmVuW2ldLCBpKSk7XG4gICAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gICAgcmV0dXJuIHRyZWU7XG4gIH1cblxuICAvLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuICBmdW5jdGlvbiB0cmVlKCkge1xuICAgIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24kMSxcbiAgICAgICAgZHggPSAxLFxuICAgICAgICBkeSA9IDEsXG4gICAgICAgIG5vZGVTaXplID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHRyZWUocm9vdCkge1xuICAgICAgdmFyIHQgPSB0cmVlUm9vdChyb290KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgbGF5b3V0IHVzaW5nIEJ1Y2hoZWltIGV0IGFsLuKAmXMgYWxnb3JpdGhtLlxuICAgICAgdC5lYWNoQWZ0ZXIoZmlyc3RXYWxrKSwgdC5wYXJlbnQubSA9IC10Lno7XG4gICAgICB0LmVhY2hCZWZvcmUoc2Vjb25kV2Fsayk7XG5cbiAgICAgIC8vIElmIGEgZml4ZWQgbm9kZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeS5cbiAgICAgIGlmIChub2RlU2l6ZSkgcm9vdC5lYWNoQmVmb3JlKHNpemVOb2RlKTtcblxuICAgICAgLy8gSWYgYSBmaXhlZCB0cmVlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5IGJhc2VkIG9uIHRoZSBleHRlbnQuXG4gICAgICAvLyBDb21wdXRlIHRoZSBsZWZ0LW1vc3QsIHJpZ2h0LW1vc3QsIGFuZCBkZXB0aC1tb3N0IG5vZGVzIGZvciBleHRlbnRzLlxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBsZWZ0ID0gcm9vdCxcbiAgICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcbiAgICAgICAgICAgIGJvdHRvbSA9IHJvb3Q7XG4gICAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUueCA8IGxlZnQueCkgbGVmdCA9IG5vZGU7XG4gICAgICAgICAgaWYgKG5vZGUueCA+IHJpZ2h0LngpIHJpZ2h0ID0gbm9kZTtcbiAgICAgICAgICBpZiAobm9kZS5kZXB0aCA+IGJvdHRvbS5kZXB0aCkgYm90dG9tID0gbm9kZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzID0gbGVmdCA9PT0gcmlnaHQgPyAxIDogc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICAgICAgdHggPSBzIC0gbGVmdC54LFxuICAgICAgICAgICAga3ggPSBkeCAvIChyaWdodC54ICsgcyArIHR4KSxcbiAgICAgICAgICAgIGt5ID0gZHkgLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcbiAgICAgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICoga3k7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlcyBhIHByZWxpbWluYXJ5IHgtY29vcmRpbmF0ZSBmb3Igdi4gQmVmb3JlIHRoYXQsIEZJUlNUIFdBTEsgaXNcbiAgICAvLyBhcHBsaWVkIHJlY3Vyc2l2ZWx5IHRvIHRoZSBjaGlsZHJlbiBvZiB2LCBhcyB3ZWxsIGFzIHRoZSBmdW5jdGlvblxuICAgIC8vIEFQUE9SVElPTi4gQWZ0ZXIgc3BhY2luZyBvdXQgdGhlIGNoaWxkcmVuIGJ5IGNhbGxpbmcgRVhFQ1VURSBTSElGVFMsIHRoZVxuICAgIC8vIG5vZGUgdiBpcyBwbGFjZWQgdG8gdGhlIG1pZHBvaW50IG9mIGl0cyBvdXRlcm1vc3QgY2hpbGRyZW4uXG4gICAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgICAgc2libGluZ3MgPSB2LnBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgICB3ID0gdi5pID8gc2libGluZ3Nbdi5pIC0gMV0gOiBudWxsO1xuICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIGV4ZWN1dGVTaGlmdHModik7XG4gICAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuICAgICAgICBpZiAodykge1xuICAgICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICB9XG4gICAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICAgIH1cblxuICAgIC8vIENvbXB1dGVzIGFsbCByZWFsIHgtY29vcmRpbmF0ZXMgYnkgc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIHJlY3Vyc2l2ZWx5LlxuICAgIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuICAgICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuICAgICAgdi5tICs9IHYucGFyZW50Lm07XG4gICAgfVxuXG4gICAgLy8gVGhlIGNvcmUgb2YgdGhlIGFsZ29yaXRobS4gSGVyZSwgYSBuZXcgc3VidHJlZSBpcyBjb21iaW5lZCB3aXRoIHRoZVxuICAgIC8vIHByZXZpb3VzIHN1YnRyZWVzLiBUaHJlYWRzIGFyZSB1c2VkIHRvIHRyYXZlcnNlIHRoZSBpbnNpZGUgYW5kIG91dHNpZGVcbiAgICAvLyBjb250b3VycyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgc3VidHJlZSB1cCB0byB0aGUgaGlnaGVzdCBjb21tb24gbGV2ZWwuIFRoZVxuICAgIC8vIHZlcnRpY2VzIHVzZWQgZm9yIHRoZSB0cmF2ZXJzYWxzIGFyZSB2aSssIHZpLSwgdm8tLCBhbmQgdm8rLCB3aGVyZSB0aGVcbiAgICAvLyBzdXBlcnNjcmlwdCBvIG1lYW5zIG91dHNpZGUgYW5kIGkgbWVhbnMgaW5zaWRlLCB0aGUgc3Vic2NyaXB0IC0gbWVhbnMgbGVmdFxuICAgIC8vIHN1YnRyZWUgYW5kICsgbWVhbnMgcmlnaHQgc3VidHJlZS4gRm9yIHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyBhbG9uZyB0aGVcbiAgICAvLyBjb250b3VyLCB3ZSB1c2UgcmVzcGVjdGl2ZSB2YXJpYWJsZXMgc2krLCBzaS0sIHNvLSwgYW5kIHNvKy4gV2hlbmV2ZXIgdHdvXG4gICAgLy8gbm9kZXMgb2YgdGhlIGluc2lkZSBjb250b3VycyBjb25mbGljdCwgd2UgY29tcHV0ZSB0aGUgbGVmdCBvbmUgb2YgdGhlXG4gICAgLy8gZ3JlYXRlc3QgdW5jb21tb24gYW5jZXN0b3JzIHVzaW5nIHRoZSBmdW5jdGlvbiBBTkNFU1RPUiBhbmQgY2FsbCBNT1ZFXG4gICAgLy8gU1VCVFJFRSB0byBzaGlmdCB0aGUgc3VidHJlZSBhbmQgcHJlcGFyZSB0aGUgc2hpZnRzIG9mIHNtYWxsZXIgc3VidHJlZXMuXG4gICAgLy8gRmluYWxseSwgd2UgYWRkIGEgbmV3IHRocmVhZCAoaWYgbmVjZXNzYXJ5KS5cbiAgICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHZhciB2aXAgPSB2LFxuICAgICAgICAgICAgdm9wID0gdixcbiAgICAgICAgICAgIHZpbSA9IHcsXG4gICAgICAgICAgICB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLFxuICAgICAgICAgICAgc2lwID0gdmlwLm0sXG4gICAgICAgICAgICBzb3AgPSB2b3AubSxcbiAgICAgICAgICAgIHNpbSA9IHZpbS5tLFxuICAgICAgICAgICAgc29tID0gdm9tLm0sXG4gICAgICAgICAgICBzaGlmdDtcbiAgICAgICAgd2hpbGUgKHZpbSA9IG5leHRSaWdodCh2aW0pLCB2aXAgPSBuZXh0TGVmdCh2aXApLCB2aW0gJiYgdmlwKSB7XG4gICAgICAgICAgdm9tID0gbmV4dExlZnQodm9tKTtcbiAgICAgICAgICB2b3AgPSBuZXh0UmlnaHQodm9wKTtcbiAgICAgICAgICB2b3AuYSA9IHY7XG4gICAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICAgIG1vdmVTdWJ0cmVlKG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSwgdiwgc2hpZnQpO1xuICAgICAgICAgICAgc2lwICs9IHNoaWZ0O1xuICAgICAgICAgICAgc29wICs9IHNoaWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzaW0gKz0gdmltLm07XG4gICAgICAgICAgc2lwICs9IHZpcC5tO1xuICAgICAgICAgIHNvbSArPSB2b20ubTtcbiAgICAgICAgICBzb3AgKz0gdm9wLm07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpbSAmJiAhbmV4dFJpZ2h0KHZvcCkpIHtcbiAgICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpcCAmJiAhbmV4dExlZnQodm9tKSkge1xuICAgICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICAgIHZvbS5tICs9IHNpcCAtIHNvbTtcbiAgICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbmNlc3RvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaXplTm9kZShub2RlKSB7XG4gICAgICBub2RlLnggKj0gZHg7XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gICAgfVxuXG4gICAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcbiAgICB9O1xuXG4gICAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICAgIH07XG5cbiAgICB0cmVlLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiB0cmVlO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZW1hcFNsaWNlKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MTtcbiAgICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwaGkgPSAoMSArIE1hdGguc3FydCg1KSkgLyAyO1xuXG4gIGZ1bmN0aW9uIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgcm93cyA9IFtdLFxuICAgICAgICBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgcm93LFxuICAgICAgICBub2RlVmFsdWUsXG4gICAgICAgIGkwID0gMCxcbiAgICAgICAgaTEsXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIGR4LCBkeSxcbiAgICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWUsXG4gICAgICAgIHN1bVZhbHVlLFxuICAgICAgICBtaW5WYWx1ZSxcbiAgICAgICAgbWF4VmFsdWUsXG4gICAgICAgIG5ld1JhdGlvLFxuICAgICAgICBtaW5SYXRpbyxcbiAgICAgICAgYWxwaGEsXG4gICAgICAgIGJldGE7XG5cbiAgICB3aGlsZSAoaTAgPCBuKSB7XG4gICAgICBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MDtcbiAgICAgIG1pblZhbHVlID0gbWF4VmFsdWUgPSBzdW1WYWx1ZSA9IG5vZGVzW2kwXS52YWx1ZTtcbiAgICAgIGFscGhhID0gTWF0aC5tYXgoZHkgLyBkeCwgZHggLyBkeSkgLyAodmFsdWUgKiByYXRpbyk7XG4gICAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgICAgbWluUmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG5cbiAgICAgIC8vIEtlZXAgYWRkaW5nIG5vZGVzIHdoaWxlIHRoZSBhc3BlY3QgcmF0aW8gbWFpbnRhaW5zIG9yIGltcHJvdmVzLlxuICAgICAgZm9yIChpMSA9IGkwICsgMTsgaTEgPCBuOyArK2kxKSB7XG4gICAgICAgIHN1bVZhbHVlICs9IG5vZGVWYWx1ZSA9IG5vZGVzW2kxXS52YWx1ZTtcbiAgICAgICAgaWYgKG5vZGVWYWx1ZSA8IG1pblZhbHVlKSBtaW5WYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgICAgaWYgKG5vZGVWYWx1ZSA+IG1heFZhbHVlKSBtYXhWYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICAgICAgbmV3UmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG4gICAgICAgIGlmIChuZXdSYXRpbyA+IG1pblJhdGlvKSB7IHN1bVZhbHVlIC09IG5vZGVWYWx1ZTsgYnJlYWs7IH1cbiAgICAgICAgbWluUmF0aW8gPSBuZXdSYXRpbztcbiAgICAgIH1cblxuICAgICAgLy8gUG9zaXRpb24gYW5kIHJlY29yZCB0aGUgcm93IG9yaWVudGF0aW9uLlxuICAgICAgcm93cy5wdXNoKHJvdyA9IHt2YWx1ZTogc3VtVmFsdWUsIGRpY2U6IGR4IDwgZHksIGNoaWxkcmVuOiBub2Rlcy5zbGljZShpMCwgaTEpfSk7XG4gICAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgdmFsdWUgPyB5MCArPSBkeSAqIHN1bVZhbHVlIC8gdmFsdWUgOiB5MSk7XG4gICAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSBkeCAqIHN1bVZhbHVlIC8gdmFsdWUgOiB4MSwgeTEpO1xuICAgICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICB2YXIgc3F1YXJpZnkgPSAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgICBmdW5jdGlvbiBzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICB9XG5cbiAgICBzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc3F1YXJpZnk7XG4gIH0pKHBoaSk7XG5cbiAgZnVuY3Rpb24gaW5kZXgkMSgpIHtcbiAgICB2YXIgdGlsZSA9IHNxdWFyaWZ5LFxuICAgICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgICBkeCA9IDEsXG4gICAgICAgIGR5ID0gMSxcbiAgICAgICAgcGFkZGluZ1N0YWNrID0gWzBdLFxuICAgICAgICBwYWRkaW5nSW5uZXIgPSBjb25zdGFudFplcm8sXG4gICAgICAgIHBhZGRpbmdUb3AgPSBjb25zdGFudFplcm8sXG4gICAgICAgIHBhZGRpbmdSaWdodCA9IGNvbnN0YW50WmVybyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbSA9IGNvbnN0YW50WmVybyxcbiAgICAgICAgcGFkZGluZ0xlZnQgPSBjb25zdGFudFplcm87XG5cbiAgICBmdW5jdGlvbiB0cmVlbWFwKHJvb3QpIHtcbiAgICAgIHJvb3QueDAgPVxuICAgICAgcm9vdC55MCA9IDA7XG4gICAgICByb290LngxID0gZHg7XG4gICAgICByb290LnkxID0gZHk7XG4gICAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcbiAgICAgIHBhZGRpbmdTdGFjayA9IFswXTtcbiAgICAgIGlmIChyb3VuZCkgcm9vdC5lYWNoQmVmb3JlKHJvdW5kTm9kZSk7XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUobm9kZSkge1xuICAgICAgdmFyIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aF0sXG4gICAgICAgICAgeDAgPSBub2RlLngwICsgcCxcbiAgICAgICAgICB5MCA9IG5vZGUueTAgKyBwLFxuICAgICAgICAgIHgxID0gbm9kZS54MSAtIHAsXG4gICAgICAgICAgeTEgPSBub2RlLnkxIC0gcDtcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIG5vZGUueDAgPSB4MDtcbiAgICAgIG5vZGUueTAgPSB5MDtcbiAgICAgIG5vZGUueDEgPSB4MTtcbiAgICAgIG5vZGUueTEgPSB5MTtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aCArIDFdID0gcGFkZGluZ0lubmVyKG5vZGUpIC8gMjtcbiAgICAgICAgeDAgKz0gcGFkZGluZ0xlZnQobm9kZSkgLSBwO1xuICAgICAgICB5MCArPSBwYWRkaW5nVG9wKG5vZGUpIC0gcDtcbiAgICAgICAgeDEgLT0gcGFkZGluZ1JpZ2h0KG5vZGUpIC0gcDtcbiAgICAgICAgeTEgLT0gcGFkZGluZ0JvdHRvbShub2RlKSAtIHA7XG4gICAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgICB0aWxlKG5vZGUsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHRyZWVtYXApIDogcm91bmQ7XG4gICAgfTtcblxuICAgIHRyZWVtYXAuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWVtYXApIDogW2R4LCBkeV07XG4gICAgfTtcblxuICAgIHRyZWVtYXAudGlsZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpbGUgPSByZXF1aXJlZCh4KSwgdHJlZW1hcCkgOiB0aWxlO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ0lubmVyKHgpLnBhZGRpbmdPdXRlcih4KSA6IHRyZWVtYXAucGFkZGluZ0lubmVyKCk7XG4gICAgfTtcblxuICAgIHRyZWVtYXAucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nSW5uZXI7XG4gICAgfTtcblxuICAgIHRyZWVtYXAucGFkZGluZ091dGVyID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nVG9wID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1RvcCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkNSgreCksIHRyZWVtYXApIDogcGFkZGluZ1RvcDtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nUmlnaHQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nUmlnaHQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDUoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdSaWdodDtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nQm90dG9tID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0JvdHRvbSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkNSgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nTGVmdCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdMZWZ0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nTGVmdDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRyZWVtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBiaW5hcnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgc3VtLCBzdW1zID0gbmV3IEFycmF5KG4gKyAxKTtcblxuICAgIGZvciAoc3Vtc1swXSA9IHN1bSA9IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdW1zW2kgKyAxXSA9IHN1bSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICB9XG5cbiAgICBwYXJ0aXRpb24oMCwgbiwgcGFyZW50LnZhbHVlLCB4MCwgeTAsIHgxLCB5MSk7XG5cbiAgICBmdW5jdGlvbiBwYXJ0aXRpb24oaSwgaiwgdmFsdWUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICBpZiAoaSA+PSBqIC0gMSkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBub2RlLngwID0geDAsIG5vZGUueTAgPSB5MDtcbiAgICAgICAgbm9kZS54MSA9IHgxLCBub2RlLnkxID0geTE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlT2Zmc2V0ID0gc3Vtc1tpXSxcbiAgICAgICAgICB2YWx1ZVRhcmdldCA9ICh2YWx1ZSAvIDIpICsgdmFsdWVPZmZzZXQsXG4gICAgICAgICAgayA9IGkgKyAxLFxuICAgICAgICAgIGhpID0gaiAtIDE7XG5cbiAgICAgIHdoaWxlIChrIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGsgKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKHN1bXNbbWlkXSA8IHZhbHVlVGFyZ2V0KSBrID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlTGVmdCA9IHN1bXNba10gLSB2YWx1ZU9mZnNldCxcbiAgICAgICAgICB2YWx1ZVJpZ2h0ID0gdmFsdWUgLSB2YWx1ZUxlZnQ7XG5cbiAgICAgIGlmICgoeTEgLSB5MCkgPiAoeDEgLSB4MCkpIHtcbiAgICAgICAgdmFyIHlrID0gKHkwICogdmFsdWVSaWdodCArIHkxICogdmFsdWVMZWZ0KSAvIHZhbHVlO1xuICAgICAgICBwYXJ0aXRpb24oaSwgaywgdmFsdWVMZWZ0LCB4MCwgeTAsIHgxLCB5ayk7XG4gICAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4MCwgeWssIHgxLCB5MSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgeGsgPSAoeDAgKiB2YWx1ZVJpZ2h0ICsgeDEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeGssIHkxKTtcbiAgICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHhrLCB5MCwgeDEsIHkxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzbGljZURpY2UocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIChwYXJlbnQuZGVwdGggJiAxID8gdHJlZW1hcFNsaWNlIDogdHJlZW1hcERpY2UpKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICB9XG5cbiAgdmFyIHJlc3F1YXJpZnkgPSAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgICBmdW5jdGlvbiByZXNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIGlmICgocm93cyA9IHBhcmVudC5fc3F1YXJpZnkpICYmIChyb3dzLnJhdGlvID09PSByYXRpbykpIHtcbiAgICAgICAgdmFyIHJvd3MsXG4gICAgICAgICAgICByb3csXG4gICAgICAgICAgICBub2RlcyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgbSA9IHJvd3MubGVuZ3RoLFxuICAgICAgICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgICByb3cgPSByb3dzW2pdLCBub2RlcyA9IHJvdy5jaGlsZHJlbjtcbiAgICAgICAgICBmb3IgKGkgPSByb3cudmFsdWUgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSByb3cudmFsdWUgKz0gbm9kZXNbaV0udmFsdWU7XG4gICAgICAgICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHkwICs9ICh5MSAtIHkwKSAqIHJvdy52YWx1ZSAvIHZhbHVlKTtcbiAgICAgICAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgeDAgKz0gKHgxIC0geDApICogcm93LnZhbHVlIC8gdmFsdWUsIHkxKTtcbiAgICAgICAgICB2YWx1ZSAtPSByb3cudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudC5fc3F1YXJpZnkgPSByb3dzID0gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgICAgIHJvd3MucmF0aW8gPSByYXRpbztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gICAgfTtcblxuICAgIHJldHVybiByZXNxdWFyaWZ5O1xuICB9KShwaGkpO1xuXG4gIGZ1bmN0aW9uIGNlbnRlciQxKHgsIHkpIHtcbiAgICB2YXIgbm9kZXM7XG5cbiAgICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgICBpZiAoeSA9PSBudWxsKSB5ID0gMDtcblxuICAgIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIHN4ID0gMCxcbiAgICAgICAgICBzeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBzeCArPSBub2RlLngsIHN5ICs9IG5vZGUueTtcbiAgICAgIH1cblxuICAgICAgZm9yIChzeCA9IHN4IC8gbiAtIHgsIHN5ID0gc3kgLyBuIC0geSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnggLT0gc3gsIG5vZGUueSAtPSBzeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgIH07XG5cbiAgICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfLCBmb3JjZSkgOiB4O1xuICAgIH07XG5cbiAgICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9ICtfLCBmb3JjZSkgOiB5O1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQ2KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gamlnZ2xlKCkge1xuICAgIHJldHVybiAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAxZS02O1xuICB9XG5cbiAgZnVuY3Rpb24geCQxKGQpIHtcbiAgICByZXR1cm4gZC54ICsgZC52eDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHkkMShkKSB7XG4gICAgcmV0dXJuIGQueSArIGQudnk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xsaWRlKHJhZGl1cykge1xuICAgIHZhciBub2RlcyxcbiAgICAgICAgcmFkaWksXG4gICAgICAgIHN0cmVuZ3RoID0gMSxcbiAgICAgICAgaXRlcmF0aW9ucyA9IDE7XG5cbiAgICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudCQ2KHJhZGl1cyA9PSBudWxsID8gMSA6ICtyYWRpdXMpO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgICB0cmVlLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgeGksXG4gICAgICAgICAgeWksXG4gICAgICAgICAgcmksXG4gICAgICAgICAgcmkyO1xuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgICB0cmVlID0gcXVhZHRyZWUobm9kZXMsIHgkMSwgeSQxKS52aXNpdEFmdGVyKHByZXBhcmUpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgIHJpID0gcmFkaWlbaV0sIHJpMiA9IHJpICogcmk7XG4gICAgICAgICAgeGkgPSBub2RlLnggKyBub2RlLnZ4O1xuICAgICAgICAgIHlpID0gbm9kZS55ICsgbm9kZS52eTtcbiAgICAgICAgICB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgICB2YXIgZGF0YSA9IHF1YWQuZGF0YSwgcmogPSBxdWFkLnIsIHIgPSByaSArIHJqO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIGlmIChkYXRhLmluZGV4ID4gaSkge1xuICAgICAgICAgICAgdmFyIHggPSB4aSAtIGRhdGEueCAtIGRhdGEudngsXG4gICAgICAgICAgICAgICAgeSA9IHlpIC0gZGF0YS55IC0gZGF0YS52eSxcbiAgICAgICAgICAgICAgICBsID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgICAgIGlmIChsIDwgciAqIHIpIHtcbiAgICAgICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgICAgICAgbCA9IChyIC0gKGwgPSBNYXRoLnNxcnQobCkpKSAvIGwgKiBzdHJlbmd0aDtcbiAgICAgICAgICAgICAgbm9kZS52eCArPSAoeCAqPSBsKSAqIChyID0gKHJqICo9IHJqKSAvIChyaTIgKyByaikpO1xuICAgICAgICAgICAgICBub2RlLnZ5ICs9ICh5ICo9IGwpICogcjtcbiAgICAgICAgICAgICAgZGF0YS52eCAtPSB4ICogKHIgPSAxIC0gcik7XG4gICAgICAgICAgICAgIGRhdGEudnkgLT0geSAqIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geDAgPiB4aSArIHIgfHwgeDEgPCB4aSAtIHIgfHwgeTAgPiB5aSArIHIgfHwgeTEgPCB5aSAtIHI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZShxdWFkKSB7XG4gICAgICBpZiAocXVhZC5kYXRhKSByZXR1cm4gcXVhZC5yID0gcmFkaWlbcXVhZC5kYXRhLmluZGV4XTtcbiAgICAgIGZvciAodmFyIGkgPSBxdWFkLnIgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIGlmIChxdWFkW2ldICYmIHF1YWRbaV0uciA+IHF1YWQucikge1xuICAgICAgICAgIHF1YWQuciA9IHF1YWRbaV0ucjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgaSwgbiA9IChub2RlcyA9IF8pLmxlbmd0aDsgcmFkaWkgPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSByYWRpaVtpXSA9ICtyYWRpdXMobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9O1xuXG4gICAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9ICtfLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgICB9O1xuXG4gICAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgZm9yY2UpIDogcmFkaXVzO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleCQyKGQsIGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmsobGlua3MpIHtcbiAgICB2YXIgaWQgPSBpbmRleCQyLFxuICAgICAgICBzdHJlbmd0aCA9IGRlZmF1bHRTdHJlbmd0aCxcbiAgICAgICAgc3RyZW5ndGhzLFxuICAgICAgICBkaXN0YW5jZSA9IGNvbnN0YW50JDYoMzApLFxuICAgICAgICBkaXN0YW5jZXMsXG4gICAgICAgIG5vZGVzLFxuICAgICAgICBjb3VudCxcbiAgICAgICAgYmlhcyxcbiAgICAgICAgaXRlcmF0aW9ucyA9IDE7XG5cbiAgICBpZiAobGlua3MgPT0gbnVsbCkgbGlua3MgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRTdHJlbmd0aChsaW5rKSB7XG4gICAgICByZXR1cm4gMSAvIE1hdGgubWluKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSwgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgICAgZm9yICh2YXIgayA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbmssIHNvdXJjZSwgdGFyZ2V0LCB4LCB5LCBsLCBiOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgbGluayA9IGxpbmtzW2ldLCBzb3VyY2UgPSBsaW5rLnNvdXJjZSwgdGFyZ2V0ID0gbGluay50YXJnZXQ7XG4gICAgICAgICAgeCA9IHRhcmdldC54ICsgdGFyZ2V0LnZ4IC0gc291cmNlLnggLSBzb3VyY2UudnggfHwgamlnZ2xlKCk7XG4gICAgICAgICAgeSA9IHRhcmdldC55ICsgdGFyZ2V0LnZ5IC0gc291cmNlLnkgLSBzb3VyY2UudnkgfHwgamlnZ2xlKCk7XG4gICAgICAgICAgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgICBsID0gKGwgLSBkaXN0YW5jZXNbaV0pIC8gbCAqIGFscGhhICogc3RyZW5ndGhzW2ldO1xuICAgICAgICAgIHggKj0gbCwgeSAqPSBsO1xuICAgICAgICAgIHRhcmdldC52eCAtPSB4ICogKGIgPSBiaWFzW2ldKTtcbiAgICAgICAgICB0YXJnZXQudnkgLT0geSAqIGI7XG4gICAgICAgICAgc291cmNlLnZ4ICs9IHggKiAoYiA9IDEgLSBiKTtcbiAgICAgICAgICBzb3VyY2UudnkgKz0geSAqIGI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIG0gPSBsaW5rcy5sZW5ndGgsXG4gICAgICAgICAgbm9kZUJ5SWQgPSBtYXAkMShub2RlcywgaWQpLFxuICAgICAgICAgIGxpbms7XG5cbiAgICAgIGZvciAoaSA9IDAsIGNvdW50ID0gbmV3IEFycmF5KG4pOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGNvdW50W2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuICAgICAgICBsaW5rID0gbGlua3NbaV0sIGxpbmsuaW5kZXggPSBpO1xuICAgICAgICBpZiAodHlwZW9mIGxpbmsuc291cmNlICE9PSBcIm9iamVjdFwiKSBsaW5rLnNvdXJjZSA9IG5vZGVCeUlkLmdldChsaW5rLnNvdXJjZSk7XG4gICAgICAgIGlmICh0eXBlb2YgbGluay50YXJnZXQgIT09IFwib2JqZWN0XCIpIGxpbmsudGFyZ2V0ID0gbm9kZUJ5SWQuZ2V0KGxpbmsudGFyZ2V0KTtcbiAgICAgICAgKytjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0sICsrY291bnRbbGluay50YXJnZXQuaW5kZXhdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBiaWFzID0gbmV3IEFycmF5KG0pOyBpIDwgbTsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgYmlhc1tpXSA9IGNvdW50W2xpbmsuc291cmNlLmluZGV4XSAvIChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gKyBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgICAgfVxuXG4gICAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVTdHJlbmd0aCgpO1xuICAgICAgZGlzdGFuY2VzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplRGlzdGFuY2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplU3RyZW5ndGgoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHN0cmVuZ3Roc1tpXSA9ICtzdHJlbmd0aChsaW5rc1tpXSwgaSwgbGlua3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVEaXN0YW5jZSgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgZGlzdGFuY2VzW2ldID0gK2Rpc3RhbmNlKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIG5vZGVzID0gXztcbiAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9O1xuXG4gICAgZm9yY2UubGlua3MgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsaW5rcyA9IF8sIGluaXRpYWxpemUoKSwgZm9yY2UpIDogbGlua3M7XG4gICAgfTtcblxuICAgIGZvcmNlLmlkID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSBfLCBmb3JjZSkgOiBpZDtcbiAgICB9O1xuXG4gICAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemVTdHJlbmd0aCgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgICB9O1xuXG4gICAgZm9yY2UuZGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemVEaXN0YW5jZSgpLCBmb3JjZSkgOiBkaXN0YW5jZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcmNlO1xuICB9XG5cbiAgZnVuY3Rpb24geCQyKGQpIHtcbiAgICByZXR1cm4gZC54O1xuICB9XG5cbiAgZnVuY3Rpb24geSQyKGQpIHtcbiAgICByZXR1cm4gZC55O1xuICB9XG5cbiAgdmFyIGluaXRpYWxSYWRpdXMgPSAxMDtcbiAgdmFyIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG4gIGZ1bmN0aW9uIHNpbXVsYXRpb24obm9kZXMpIHtcbiAgICB2YXIgc2ltdWxhdGlvbixcbiAgICAgICAgYWxwaGEgPSAxLFxuICAgICAgICBhbHBoYU1pbiA9IDAuMDAxLFxuICAgICAgICBhbHBoYURlY2F5ID0gMSAtIE1hdGgucG93KGFscGhhTWluLCAxIC8gMzAwKSxcbiAgICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgICB2ZWxvY2l0eURlY2F5ID0gMC42LFxuICAgICAgICBmb3JjZXMgPSBtYXAkMSgpLFxuICAgICAgICBzdGVwcGVyID0gdGltZXIoc3RlcCksXG4gICAgICAgIGV2ZW50ID0gZGlzcGF0Y2goXCJ0aWNrXCIsIFwiZW5kXCIpO1xuXG4gICAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgICBmdW5jdGlvbiBzdGVwKCkge1xuICAgICAgdGljaygpO1xuICAgICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xuICAgICAgICBzdGVwcGVyLnN0b3AoKTtcbiAgICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG5cbiAgICAgIGFscGhhICs9IChhbHBoYVRhcmdldCAtIGFscGhhKSAqIGFscGhhRGVjYXk7XG5cbiAgICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICAgIGZvcmNlKGFscGhhKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUuZnggPT0gbnVsbCkgbm9kZS54ICs9IG5vZGUudnggKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcbiAgICAgICAgaWYgKG5vZGUuZnkgPT0gbnVsbCkgbm9kZS55ICs9IG5vZGUudnkgKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnkgPSBub2RlLmZ5LCBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZXMoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUuaW5kZXggPSBpO1xuICAgICAgICBpZiAoaXNOYU4obm9kZS54KSB8fCBpc05hTihub2RlLnkpKSB7XG4gICAgICAgICAgdmFyIHJhZGl1cyA9IGluaXRpYWxSYWRpdXMgKiBNYXRoLnNxcnQoaSksIGFuZ2xlID0gaSAqIGluaXRpYWxBbmdsZTtcbiAgICAgICAgICBub2RlLnggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgICAgbm9kZS55ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05hTihub2RlLnZ4KSB8fCBpc05hTihub2RlLnZ5KSkge1xuICAgICAgICAgIG5vZGUudnggPSBub2RlLnZ5ID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVGb3JjZShmb3JjZSkge1xuICAgICAgaWYgKGZvcmNlLmluaXRpYWxpemUpIGZvcmNlLmluaXRpYWxpemUobm9kZXMpO1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVOb2RlcygpO1xuXG4gICAgcmV0dXJuIHNpbXVsYXRpb24gPSB7XG4gICAgICB0aWNrOiB0aWNrLFxuXG4gICAgICByZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXBwZXIucmVzdGFydChzdGVwKSwgc2ltdWxhdGlvbjtcbiAgICAgIH0sXG5cbiAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RlcHBlci5zdG9wKCksIHNpbXVsYXRpb247XG4gICAgICB9LFxuXG4gICAgICBub2RlczogZnVuY3Rpb24oXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlcyA9IF8sIGluaXRpYWxpemVOb2RlcygpLCBmb3JjZXMuZWFjaChpbml0aWFsaXplRm9yY2UpLCBzaW11bGF0aW9uKSA6IG5vZGVzO1xuICAgICAgfSxcblxuICAgICAgYWxwaGE6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYTtcbiAgICAgIH0sXG5cbiAgICAgIGFscGhhTWluOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhTWluID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFNaW47XG4gICAgICB9LFxuXG4gICAgICBhbHBoYURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhRGVjYXkgPSArXywgc2ltdWxhdGlvbikgOiArYWxwaGFEZWNheTtcbiAgICAgIH0sXG5cbiAgICAgIGFscGhhVGFyZ2V0OiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhVGFyZ2V0ID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFUYXJnZXQ7XG4gICAgICB9LFxuXG4gICAgICB2ZWxvY2l0eURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZlbG9jaXR5RGVjYXkgPSAxIC0gXywgc2ltdWxhdGlvbikgOiAxIC0gdmVsb2NpdHlEZWNheTtcbiAgICAgIH0sXG5cbiAgICAgIGZvcmNlOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/ICgoXyA9PSBudWxsID8gZm9yY2VzLnJlbW92ZShuYW1lKSA6IGZvcmNlcy5zZXQobmFtZSwgaW5pdGlhbGl6ZUZvcmNlKF8pKSksIHNpbXVsYXRpb24pIDogZm9yY2VzLmdldChuYW1lKTtcbiAgICAgIH0sXG5cbiAgICAgIGZpbmQ6IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgICAgZHgsXG4gICAgICAgICAgICBkeSxcbiAgICAgICAgICAgIGQyLFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIGNsb3Nlc3Q7XG5cbiAgICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgICAgZWxzZSByYWRpdXMgKj0gcmFkaXVzO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgZHggPSB4IC0gbm9kZS54O1xuICAgICAgICAgIGR5ID0geSAtIG5vZGUueTtcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICAgIGlmIChkMiA8IHJhZGl1cykgY2xvc2VzdCA9IG5vZGUsIHJhZGl1cyA9IGQyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgICB9LFxuXG4gICAgICBvbjogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hbnlCb2R5KCkge1xuICAgIHZhciBub2RlcyxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgYWxwaGEsXG4gICAgICAgIHN0cmVuZ3RoID0gY29uc3RhbnQkNigtMzApLFxuICAgICAgICBzdHJlbmd0aHMsXG4gICAgICAgIGRpc3RhbmNlTWluMiA9IDEsXG4gICAgICAgIGRpc3RhbmNlTWF4MiA9IEluZmluaXR5LFxuICAgICAgICB0aGV0YTIgPSAwLjgxO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoXykge1xuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCQyLCB5JDIpLnZpc2l0QWZ0ZXIoYWNjdW11bGF0ZSk7XG4gICAgICBmb3IgKGFscGhhID0gXywgaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgdHJlZS52aXNpdChhcHBseSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZShxdWFkKSB7XG4gICAgICB2YXIgc3RyZW5ndGggPSAwLCBxLCBjLCB4LCB5LCBpO1xuXG4gICAgICAvLyBGb3IgaW50ZXJuYWwgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY2hpbGQgcXVhZHJhbnRzLlxuICAgICAgaWYgKHF1YWQubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoeCA9IHkgPSBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICAgIGlmICgocSA9IHF1YWRbaV0pICYmIChjID0gcS52YWx1ZSkpIHtcbiAgICAgICAgICAgIHN0cmVuZ3RoICs9IGMsIHggKz0gYyAqIHEueCwgeSArPSBjICogcS55O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWFkLnggPSB4IC8gc3RyZW5ndGg7XG4gICAgICAgIHF1YWQueSA9IHkgLyBzdHJlbmd0aDtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgICBlbHNlIHtcbiAgICAgICAgcSA9IHF1YWQ7XG4gICAgICAgIHEueCA9IHEuZGF0YS54O1xuICAgICAgICBxLnkgPSBxLmRhdGEueTtcbiAgICAgICAgZG8gc3RyZW5ndGggKz0gc3RyZW5ndGhzW3EuZGF0YS5pbmRleF07XG4gICAgICAgIHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICAgIH1cblxuICAgICAgcXVhZC52YWx1ZSA9IHN0cmVuZ3RoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgxLCBfLCB4Mikge1xuICAgICAgaWYgKCFxdWFkLnZhbHVlKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgdmFyIHggPSBxdWFkLnggLSBub2RlLngsXG4gICAgICAgICAgeSA9IHF1YWQueSAtIG5vZGUueSxcbiAgICAgICAgICB3ID0geDIgLSB4MSxcbiAgICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgICAgLy8gQXBwbHkgdGhlIEJhcm5lcy1IdXQgYXBwcm94aW1hdGlvbiBpZiBwb3NzaWJsZS5cbiAgICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xuICAgICAgICBpZiAobCA8IGRpc3RhbmNlTWF4Mikge1xuICAgICAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICAgICAgICBub2RlLnZ4ICs9IHggKiBxdWFkLnZhbHVlICogYWxwaGEgLyBsO1xuICAgICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgcHJvY2VzcyBwb2ludHMgZGlyZWN0bHkuXG4gICAgICBlbHNlIGlmIChxdWFkLmxlbmd0aCB8fCBsID49IGRpc3RhbmNlTWF4MikgcmV0dXJuO1xuXG4gICAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICAgIGlmIChxdWFkLmRhdGEgIT09IG5vZGUgfHwgcXVhZC5uZXh0KSB7XG4gICAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgICAgfVxuXG4gICAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XG4gICAgICAgIHcgPSBzdHJlbmd0aHNbcXVhZC5kYXRhLmluZGV4XSAqIGFscGhhIC8gbDtcbiAgICAgICAgbm9kZS52eCArPSB4ICogdztcbiAgICAgICAgbm9kZS52eSArPSB5ICogdztcbiAgICAgIH0gd2hpbGUgKHF1YWQgPSBxdWFkLm5leHQpO1xuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBub2RlcyA9IF87XG4gICAgICBpbml0aWFsaXplKCk7XG4gICAgfTtcblxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS5kaXN0YW5jZU1pbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWluMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yKTtcbiAgICB9O1xuXG4gICAgZm9yY2UuZGlzdGFuY2VNYXggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1heDIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWF4Mik7XG4gICAgfTtcblxuICAgIGZvcmNlLnRoZXRhID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhldGEyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydCh0aGV0YTIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBmdW5jdGlvbiB4JDMoeCkge1xuICAgIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50JDYoMC4xKSxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIHN0cmVuZ3RocyxcbiAgICAgICAgeHo7XG5cbiAgICBpZiAodHlwZW9mIHggIT09IFwiZnVuY3Rpb25cIikgeCA9IGNvbnN0YW50JDYoeCA9PSBudWxsID8gMCA6ICt4KTtcblxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnggKz0gKHh6W2ldIC0gbm9kZS54KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICAgIHh6ID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih4eltpXSA9ICt4KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBub2RlcyA9IF87XG4gICAgICBpbml0aWFsaXplKCk7XG4gICAgfTtcblxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcmNlO1xuICB9XG5cbiAgZnVuY3Rpb24geSQzKHkpIHtcbiAgICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCQ2KDAuMSksXG4gICAgICAgIG5vZGVzLFxuICAgICAgICBzdHJlbmd0aHMsXG4gICAgICAgIHl6O1xuXG4gICAgaWYgKHR5cGVvZiB5ICE9PSBcImZ1bmN0aW9uXCIpIHkgPSBjb25zdGFudCQ2KHkgPT0gbnVsbCA/IDAgOiAreSk7XG5cbiAgICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ5ICs9ICh5eltpXSAtIG5vZGUueSkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgICB5eiA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4oeXpbaV0gPSAreShub2Rlc1tpXSwgaSwgbm9kZXMpKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH07XG5cbiAgICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgICB9O1xuXG4gICAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHk7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gICAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZXZlbnQoKSB7XG4gICAgZXhwb3J0cy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBmdW5jdGlvbiBkcmFnRGlzYWJsZSh2aWV3KSB7XG4gICAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWdFbmFibGUodmlldywgbm9jbGljaykge1xuICAgIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICAgIGlmIChub2NsaWNrKSB7XG4gICAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gICAgfVxuICAgIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDcoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBEcmFnRXZlbnQodGFyZ2V0LCB0eXBlLCBzdWJqZWN0LCBpZCwgYWN0aXZlLCB4LCB5LCBkeCwgZHksIGRpc3BhdGNoKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICAgIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICAgIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmR4ID0gZHg7XG4gICAgdGhpcy5keSA9IGR5O1xuICAgIHRoaXMuXyA9IGRpc3BhdGNoO1xuICB9XG5cbiAgRHJhZ0V2ZW50LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl8gPyB0aGlzIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG4gIGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gICAgcmV0dXJuICFleHBvcnRzLmV2ZW50LmJ1dHRvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGQpIHtcbiAgICByZXR1cm4gZCA9PSBudWxsID8ge3g6IGV4cG9ydHMuZXZlbnQueCwgeTogZXhwb3J0cy5ldmVudC55fSA6IGQ7XG4gIH1cblxuICBmdW5jdGlvbiBkcmFnKCkge1xuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgICBjb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLFxuICAgICAgICBzdWJqZWN0ID0gZGVmYXVsdFN1YmplY3QsXG4gICAgICAgIGdlc3R1cmVzID0ge30sXG4gICAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJkcmFnXCIsIFwiZW5kXCIpLFxuICAgICAgICBhY3RpdmUgPSAwLFxuICAgICAgICBtb3VzZW1vdmluZyxcbiAgICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgICBmdW5jdGlvbiBkcmFnKHNlbGVjdGlvbikge1xuICAgICAgc2VsZWN0aW9uXG4gICAgICAgICAgLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duZWQpXG4gICAgICAgICAgLm9uKFwidG91Y2hzdGFydC5kcmFnXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgICAub24oXCJ0b3VjaG1vdmUuZHJhZ1wiLCB0b3VjaG1vdmVkKVxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLmRyYWcgdG91Y2hjYW5jZWwuZHJhZ1wiLCB0b3VjaGVuZGVkKVxuICAgICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgICB2YXIgZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KFwibW91c2VcIiwgY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIG1vdXNlLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG4gICAgICBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC5kcmFnXCIsIG1vdXNldXBwZWQsIHRydWUpO1xuICAgICAgZHJhZ0Rpc2FibGUoZXhwb3J0cy5ldmVudC52aWV3KTtcbiAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgIG1vdXNlbW92aW5nID0gZmFsc2U7XG4gICAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIG1vdXNlbW92aW5nID0gdHJ1ZTtcbiAgICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgICAgc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZyBtb3VzZXVwLmRyYWdcIiwgbnVsbCk7XG4gICAgICBkcmFnRW5hYmxlKGV4cG9ydHMuZXZlbnQudmlldywgbW91c2Vtb3ZpbmcpO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIHRvdWNoZXMgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGMgPSBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0b3VjaGVzW2ldLmlkZW50aWZpZXIsIGMsIHRvdWNoLCB0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgIG5vZXZlbnQoKTtcbiAgICAgICAgICBnZXN0dXJlKFwiZHJhZ1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZ2VzdHVyZShcImVuZFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KGlkLCBjb250YWluZXIsIHBvaW50LCB0aGF0LCBhcmdzKSB7XG4gICAgICB2YXIgcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBzLCBkeCwgZHksXG4gICAgICAgICAgc3VibGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvcHkoKTtcblxuICAgICAgaWYgKCFjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIFwiYmVmb3Jlc3RhcnRcIiwgcywgaWQsIGFjdGl2ZSwgcFswXSwgcFsxXSwgMCwgMCwgc3VibGlzdGVuZXJzKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgoZXhwb3J0cy5ldmVudC5zdWJqZWN0ID0gcyA9IHN1YmplY3QuYXBwbHkodGhhdCwgYXJncykpID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pKSByZXR1cm47XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZXN0dXJlKHR5cGUpIHtcbiAgICAgICAgdmFyIHAwID0gcCwgbjtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBcInN0YXJ0XCI6IGdlc3R1cmVzW2lkXSA9IGdlc3R1cmUsIG4gPSBhY3RpdmUrKzsgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImVuZFwiOiBkZWxldGUgZ2VzdHVyZXNbaWRdLCAtLWFjdGl2ZTsgLy8gbm9icmVha1xuICAgICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCB0eXBlLCBzLCBpZCwgbiwgcFswXSArIGR4LCBwWzFdICsgZHksIHBbMF0gLSBwMFswXSwgcFsxXSAtIHAwWzFdLCBzdWJsaXN0ZW5lcnMpLCBzdWJsaXN0ZW5lcnMuYXBwbHksIHN1Ymxpc3RlbmVycywgW3R5cGUsIHRoYXQsIGFyZ3NdKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZHJhZy5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDcoISFfKSwgZHJhZykgOiBmaWx0ZXI7XG4gICAgfTtcblxuICAgIGRyYWcuY29udGFpbmVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGFpbmVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KF8pLCBkcmFnKSA6IGNvbnRhaW5lcjtcbiAgICB9O1xuXG4gICAgZHJhZy5zdWJqZWN0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNyhfKSwgZHJhZykgOiBzdWJqZWN0O1xuICAgIH07XG5cbiAgICBkcmFnLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gICAgfTtcblxuICAgIHJldHVybiBkcmFnO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkOCh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHgkNChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cblxuICBmdW5jdGlvbiB5JDQoZCkge1xuICAgIHJldHVybiBkWzFdO1xuICB9XG5cbiAgZnVuY3Rpb24gUmVkQmxhY2tUcmVlKCkge1xuICAgIHRoaXMuXyA9IG51bGw7IC8vIHJvb3Qgbm9kZVxuICB9XG5cbiAgZnVuY3Rpb24gUmVkQmxhY2tOb2RlKG5vZGUpIHtcbiAgICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxuICAgIG5vZGUuQyA9IC8vIGNvbG9yIC0gdHJ1ZSBmb3IgcmVkLCBmYWxzZSBmb3IgYmxhY2tcbiAgICBub2RlLkwgPSAvLyBsZWZ0IG5vZGVcbiAgICBub2RlLlIgPSAvLyByaWdodCBub2RlXG4gICAgbm9kZS5QID0gLy8gcHJldmlvdXMgbm9kZVxuICAgIG5vZGUuTiA9IG51bGw7IC8vIG5leHQgbm9kZVxuICB9XG5cbiAgUmVkQmxhY2tUcmVlLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogUmVkQmxhY2tUcmVlLFxuXG4gICAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XG5cbiAgICAgIGlmIChhZnRlcikge1xuICAgICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcbiAgICAgICAgaWYgKGFmdGVyLk4pIGFmdGVyLk4uUCA9IG5vZGU7XG4gICAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgICBpZiAoYWZ0ZXIuUikge1xuICAgICAgICAgIGFmdGVyID0gYWZ0ZXIuUjtcbiAgICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICAgIGFmdGVyLkwgPSBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgICAgYWZ0ZXIgPSBSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICAgIG5vZGUuUCA9IG51bGw7XG4gICAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgICAgdGhpcy5fID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5vZGUuTCA9IG5vZGUuUiA9IG51bGw7XG4gICAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgICBub2RlLkMgPSB0cnVlO1xuXG4gICAgICBhZnRlciA9IG5vZGU7XG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgfVxuICAgICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcbiAgICAgIGlmIChub2RlLlApIG5vZGUuUC5OID0gbm9kZS5OO1xuICAgICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblxuICAgICAgdmFyIHBhcmVudCA9IG5vZGUuVSxcbiAgICAgICAgICBzaWJsaW5nLFxuICAgICAgICAgIGxlZnQgPSBub2RlLkwsXG4gICAgICAgICAgcmlnaHQgPSBub2RlLlIsXG4gICAgICAgICAgbmV4dCxcbiAgICAgICAgICByZWQ7XG5cbiAgICAgIGlmICghbGVmdCkgbmV4dCA9IHJpZ2h0O1xuICAgICAgZWxzZSBpZiAoIXJpZ2h0KSBuZXh0ID0gbGVmdDtcbiAgICAgIGVsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQuTCA9PT0gbm9kZSkgcGFyZW50LkwgPSBuZXh0O1xuICAgICAgICBlbHNlIHBhcmVudC5SID0gbmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuXyA9IG5leHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICAgIHJlZCA9IG5leHQuQztcbiAgICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgICBsZWZ0LlUgPSBuZXh0O1xuICAgICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgICAgbmV4dC5VID0gbm9kZS5VO1xuICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICAgIG5leHQuUiA9IHJpZ2h0O1xuICAgICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQuVSA9IHBhcmVudDtcbiAgICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgICBpZiAocmVkKSByZXR1cm47XG4gICAgICBpZiAobm9kZSAmJiBub2RlLkMpIHsgbm9kZS5DID0gZmFsc2U7IHJldHVybjsgfVxuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLl8pIGJyZWFrO1xuICAgICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMpXG4gICAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgICBpZiAoIXNpYmxpbmcuUiB8fCAhc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgICAgc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHNpYmxpbmcuUi5DID0gZmFsc2U7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xuICAgICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgICBpZiAoIXNpYmxpbmcuTCB8fCAhc2libGluZy5MLkMpIHtcbiAgICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LlU7XG4gICAgICB9IHdoaWxlICghbm9kZS5DKTtcblxuICAgICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBSZWRCbGFja1JvdGF0ZUxlZnQodHJlZSwgbm9kZSkge1xuICAgIHZhciBwID0gbm9kZSxcbiAgICAgICAgcSA9IG5vZGUuUixcbiAgICAgICAgcGFyZW50ID0gcC5VO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZS5fID0gcTtcbiAgICB9XG5cbiAgICBxLlUgPSBwYXJlbnQ7XG4gICAgcC5VID0gcTtcbiAgICBwLlIgPSBxLkw7XG4gICAgaWYgKHAuUikgcC5SLlUgPSBwO1xuICAgIHEuTCA9IHA7XG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsXG4gICAgICAgIHEgPSBub2RlLkwsXG4gICAgICAgIHBhcmVudCA9IHAuVTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuXG4gICAgcS5VID0gcGFyZW50O1xuICAgIHAuVSA9IHE7XG4gICAgcC5MID0gcS5SO1xuICAgIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgICBxLlIgPSBwO1xuICB9XG5cbiAgZnVuY3Rpb24gUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVkZ2UobGVmdCwgcmlnaHQsIHYwLCB2MSkge1xuICAgIHZhciBlZGdlID0gW251bGwsIG51bGxdLFxuICAgICAgICBpbmRleCA9IGVkZ2VzLnB1c2goZWRnZSkgLSAxO1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICAgIGlmICh2MCkgc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdjApO1xuICAgIGlmICh2MSkgc2V0RWRnZUVuZChlZGdlLCByaWdodCwgbGVmdCwgdjEpO1xuICAgIGNlbGxzW2xlZnQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgICBjZWxsc1tyaWdodC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICAgIHJldHVybiBlZGdlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQm9yZGVyRWRnZShsZWZ0LCB2MCwgdjEpIHtcbiAgICB2YXIgZWRnZSA9IFt2MCwgdjFdO1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2ZXJ0ZXgpIHtcbiAgICBpZiAoIWVkZ2VbMF0gJiYgIWVkZ2VbMV0pIHtcbiAgICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gICAgICBlZGdlLmxlZnQgPSBsZWZ0O1xuICAgICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICAgIH0gZWxzZSBpZiAoZWRnZS5sZWZ0ID09PSByaWdodCkge1xuICAgICAgZWRnZVsxXSA9IHZlcnRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRnZVswXSA9IHZlcnRleDtcbiAgICB9XG4gIH1cblxuICAvLyBMaWFuZ+KAk0JhcnNreSBsaW5lIGNsaXBwaW5nLlxuICBmdW5jdGlvbiBjbGlwRWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBhID0gZWRnZVswXSxcbiAgICAgICAgYiA9IGVkZ2VbMV0sXG4gICAgICAgIGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgdDAgPSAwLFxuICAgICAgICB0MSA9IDEsXG4gICAgICAgIGR4ID0gYnggLSBheCxcbiAgICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgICByO1xuXG4gICAgciA9IHgwIC0gYXg7XG4gICAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICAgIHIgLz0gZHg7XG4gICAgaWYgKGR4IDwgMCkge1xuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfVxuXG4gICAgciA9IHgxIC0gYXg7XG4gICAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICAgIHIgLz0gZHg7XG4gICAgaWYgKGR4IDwgMCkge1xuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfVxuXG4gICAgciA9IHkwIC0gYXk7XG4gICAgaWYgKCFkeSAmJiByID4gMCkgcmV0dXJuO1xuICAgIHIgLz0gZHk7XG4gICAgaWYgKGR5IDwgMCkge1xuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfVxuXG4gICAgciA9IHkxIC0gYXk7XG4gICAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICAgIHIgLz0gZHk7XG4gICAgaWYgKGR5IDwgMCkge1xuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfVxuXG4gICAgaWYgKCEodDAgPiAwKSAmJiAhKHQxIDwgMSkpIHJldHVybiB0cnVlOyAvLyBUT0RPIEJldHRlciBjaGVjaz9cblxuICAgIGlmICh0MCA+IDApIGVkZ2VbMF0gPSBbYXggKyB0MCAqIGR4LCBheSArIHQwICogZHldO1xuICAgIGlmICh0MSA8IDEpIGVkZ2VbMV0gPSBbYXggKyB0MSAqIGR4LCBheSArIHQxICogZHldO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29ubmVjdEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgdjEgPSBlZGdlWzFdO1xuICAgIGlmICh2MSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgdjAgPSBlZGdlWzBdLFxuICAgICAgICBsZWZ0ID0gZWRnZS5sZWZ0LFxuICAgICAgICByaWdodCA9IGVkZ2UucmlnaHQsXG4gICAgICAgIGx4ID0gbGVmdFswXSxcbiAgICAgICAgbHkgPSBsZWZ0WzFdLFxuICAgICAgICByeCA9IHJpZ2h0WzBdLFxuICAgICAgICByeSA9IHJpZ2h0WzFdLFxuICAgICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICAgIGZ5ID0gKGx5ICsgcnkpIC8gMixcbiAgICAgICAgZm0sXG4gICAgICAgIGZiO1xuXG4gICAgaWYgKHJ5ID09PSBseSkge1xuICAgICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MF07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgIHYxID0gW2Z4LCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTFdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gW2Z4LCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZtID0gKGx4IC0gcngpIC8gKHJ5IC0gbHkpO1xuICAgICAgZmIgPSBmeSAtIGZtICogZng7XG4gICAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO1xuICAgICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgICAgdjEgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgICB2MSA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobHkgPCByeSkge1xuICAgICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICAgIGVsc2UgaWYgKHYwWzBdID49IHgxKSByZXR1cm47XG4gICAgICAgICAgdjEgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICAgICAgZWxzZSBpZiAodjBbMF0gPCB4MCkgcmV0dXJuO1xuICAgICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRnZVswXSA9IHYwO1xuICAgIGVkZ2VbMV0gPSB2MTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgICBlZGdlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICAgIHx8ICFjbGlwRWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSlcbiAgICAgICAgICB8fCAhKE1hdGguYWJzKGVkZ2VbMF1bMF0gLSBlZGdlWzFdWzBdKSA+IGVwc2lsb24kM1xuICAgICAgICAgICAgICB8fCBNYXRoLmFicyhlZGdlWzBdWzFdIC0gZWRnZVsxXVsxXSkgPiBlcHNpbG9uJDMpKSB7XG4gICAgICAgIGRlbGV0ZSBlZGdlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDZWxsKHNpdGUpIHtcbiAgICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgICBzaXRlOiBzaXRlLFxuICAgICAgaGFsZmVkZ2VzOiBbXVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlKSB7XG4gICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICAgIHZhID0gZWRnZS5sZWZ0LFxuICAgICAgICB2YiA9IGVkZ2UucmlnaHQ7XG4gICAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gICAgaWYgKHZiKSByZXR1cm4gTWF0aC5hdGFuMih2YlsxXSAtIHZhWzFdLCB2YlswXSAtIHZhWzBdKTtcbiAgICBpZiAoc2l0ZSA9PT0gdmEpIHZhID0gZWRnZVsxXSwgdmIgPSBlZGdlWzBdO1xuICAgIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gICAgcmV0dXJuIE1hdGguYXRhbjIodmFbMF0gLSB2YlswXSwgdmJbMV0gLSB2YVsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlKSB7XG4gICAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgIT09IGNlbGwuc2l0ZSldO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcbiAgICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCA9PT0gY2VsbC5zaXRlKV07XG4gIH1cblxuICBmdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgaGFsZmVkZ2VzLCBqLCBtOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGNlbGwgPSBjZWxsc1tpXSkgJiYgKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgICAgYXJyYXkgPSBuZXcgQXJyYXkobSk7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGluZGV4W2pdID0gaiwgYXJyYXlbal0gPSBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlc1toYWxmZWRnZXNbal1dKTtcbiAgICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgYXJyYXlbal0gPSBoYWxmZWRnZXNbaW5kZXhbal1dO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBoYWxmZWRnZXNbal0gPSBhcnJheVtqXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgbkNlbGxzID0gY2VsbHMubGVuZ3RoLFxuICAgICAgICBpQ2VsbCxcbiAgICAgICAgY2VsbCxcbiAgICAgICAgc2l0ZSxcbiAgICAgICAgaUhhbGZlZGdlLFxuICAgICAgICBoYWxmZWRnZXMsXG4gICAgICAgIG5IYWxmZWRnZXMsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBzdGFydFgsXG4gICAgICAgIHN0YXJ0WSxcbiAgICAgICAgZW5kLFxuICAgICAgICBlbmRYLFxuICAgICAgICBlbmRZLFxuICAgICAgICBjb3ZlciA9IHRydWU7XG5cbiAgICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzO1xuICAgICAgICBpSGFsZmVkZ2UgPSBoYWxmZWRnZXMubGVuZ3RoO1xuXG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cbiAgICAgICAgd2hpbGUgKGlIYWxmZWRnZS0tKSB7XG4gICAgICAgICAgaWYgKCFlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pIHtcbiAgICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgYW55IGJvcmRlciBlZGdlcyBhcyBuZWNlc3NhcnkuXG4gICAgICAgIGlIYWxmZWRnZSA9IDAsIG5IYWxmZWRnZXMgPSBoYWxmZWRnZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaUhhbGZlZGdlIDwgbkhhbGZlZGdlcykge1xuICAgICAgICAgIGVuZCA9IGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pLCBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgICAgICAgIHN0YXJ0ID0gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzWysraUhhbGZlZGdlICUgbkhhbGZlZGdlc11dKSwgc3RhcnRYID0gc3RhcnRbMF0sIHN0YXJ0WSA9IHN0YXJ0WzFdO1xuICAgICAgICAgIGlmIChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSA+IGVwc2lsb24kMyB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24kMykge1xuICAgICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDAsIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCBlbmQsXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24kMyAmJiB5MSAtIGVuZFkgPiBlcHNpbG9uJDMgPyBbeDAsIE1hdGguYWJzKHN0YXJ0WCAtIHgwKSA8IGVwc2lsb24kMyA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkxKSA8IGVwc2lsb24kMyAmJiB4MSAtIGVuZFggPiBlcHNpbG9uJDMgPyBbTWF0aC5hYnMoc3RhcnRZIC0geTEpIDwgZXBzaWxvbiQzID8gc3RhcnRYIDogeDEsIHkxXVxuICAgICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWCAtIHgxKSA8IGVwc2lsb24kMyAmJiBlbmRZIC0geTAgPiBlcHNpbG9uJDMgPyBbeDEsIE1hdGguYWJzKHN0YXJ0WCAtIHgxKSA8IGVwc2lsb24kMyA/IHN0YXJ0WSA6IHkwXVxuICAgICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24kMyAmJiBlbmRYIC0geDAgPiBlcHNpbG9uJDMgPyBbTWF0aC5hYnMoc3RhcnRZIC0geTApIDwgZXBzaWxvbiQzID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICAgIDogbnVsbCkpIC0gMSk7XG4gICAgICAgICAgICArK25IYWxmZWRnZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5IYWxmZWRnZXMpIGNvdmVyID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgd2VyZW7igJl0IGFueSBlZGdlcywgaGF2ZSB0aGUgY2xvc2VzdCBzaXRlIGNvdmVyIHRoZSBleHRlbnQuXG4gICAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICAgIGlmIChjb3Zlcikge1xuICAgICAgdmFyIGR4LCBkeSwgZDIsIGRjID0gSW5maW5pdHk7XG5cbiAgICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgICBkeSA9IHNpdGVbMV0gLSB5MDtcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNvdmVyKSB7XG4gICAgICAgIHZhciB2MDAgPSBbeDAsIHkwXSwgdjAxID0gW3gwLCB5MV0sIHYxMSA9IFt4MSwgeTFdLCB2MTAgPSBbeDEsIHkwXTtcbiAgICAgICAgY292ZXIuaGFsZmVkZ2VzLnB1c2goXG4gICAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjAxLCB2MTEpKSAtIDEsXG4gICAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMSwgdjEwKSkgLSAxLFxuICAgICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIExhc3RseSBkZWxldGUgYW55IGNlbGxzIHdpdGggbm8gZWRnZXM7IHRoZXNlIHdlcmUgZW50aXJlbHkgY2xpcHBlZC5cbiAgICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICAgIGlmICghY2VsbC5oYWxmZWRnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZGVsZXRlIGNlbGxzW2lDZWxsXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBjaXJjbGVQb29sID0gW107XG5cbiAgdmFyIGZpcnN0Q2lyY2xlO1xuXG4gIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICBSZWRCbGFja05vZGUodGhpcyk7XG4gICAgdGhpcy54ID1cbiAgICB0aGlzLnkgPVxuICAgIHRoaXMuYXJjID1cbiAgICB0aGlzLnNpdGUgPVxuICAgIHRoaXMuY3kgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0YWNoQ2lyY2xlKGFyYykge1xuICAgIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICAgIHJBcmMgPSBhcmMuTjtcblxuICAgIGlmICghbEFyYyB8fCAhckFyYykgcmV0dXJuO1xuXG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgICBjU2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgICByU2l0ZSA9IHJBcmMuc2l0ZTtcblxuICAgIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcblxuICAgIHZhciBieCA9IGNTaXRlWzBdLFxuICAgICAgICBieSA9IGNTaXRlWzFdLFxuICAgICAgICBheCA9IGxTaXRlWzBdIC0gYngsXG4gICAgICAgIGF5ID0gbFNpdGVbMV0gLSBieSxcbiAgICAgICAgY3ggPSByU2l0ZVswXSAtIGJ4LFxuICAgICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XG5cbiAgICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICAgIGlmIChkID49IC1lcHNpbG9uMiQxKSByZXR1cm47XG5cbiAgICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgICAgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLFxuICAgICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgICB2YXIgY2lyY2xlID0gY2lyY2xlUG9vbC5wb3AoKSB8fCBuZXcgQ2lyY2xlO1xuICAgIGNpcmNsZS5hcmMgPSBhcmM7XG4gICAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgICBjaXJjbGUueCA9IHggKyBieDtcbiAgICBjaXJjbGUueSA9IChjaXJjbGUuY3kgPSB5ICsgYnkpICsgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpOyAvLyB5IGJvdHRvbVxuXG4gICAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICAgIHZhciBiZWZvcmUgPSBudWxsLFxuICAgICAgICBub2RlID0gY2lyY2xlcy5fO1xuXG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGlmIChjaXJjbGUueSA8IG5vZGUueSB8fCAoY2lyY2xlLnkgPT09IG5vZGUueSAmJiBjaXJjbGUueCA8PSBub2RlLngpKSB7XG4gICAgICAgIGlmIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gICAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SO1xuICAgICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gICAgaWYgKCFiZWZvcmUpIGZpcnN0Q2lyY2xlID0gY2lyY2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGV0YWNoQ2lyY2xlKGFyYykge1xuICAgIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICAgIGlmIChjaXJjbGUpIHtcbiAgICAgIGlmICghY2lyY2xlLlApIGZpcnN0Q2lyY2xlID0gY2lyY2xlLk47XG4gICAgICBjaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgICAgY2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgICBSZWRCbGFja05vZGUoY2lyY2xlKTtcbiAgICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiZWFjaFBvb2wgPSBbXTtcblxuICBmdW5jdGlvbiBCZWFjaCgpIHtcbiAgICBSZWRCbGFja05vZGUodGhpcyk7XG4gICAgdGhpcy5lZGdlID1cbiAgICB0aGlzLnNpdGUgPVxuICAgIHRoaXMuY2lyY2xlID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICAgIGJlYWNoLnNpdGUgPSBzaXRlO1xuICAgIHJldHVybiBiZWFjaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRldGFjaEJlYWNoKGJlYWNoKSB7XG4gICAgZGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gICAgYmVhY2hQb29sLnB1c2goYmVhY2gpO1xuICAgIFJlZEJsYWNrTm9kZShiZWFjaCk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVCZWFjaChiZWFjaCkge1xuICAgIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXG4gICAgICAgIHggPSBjaXJjbGUueCxcbiAgICAgICAgeSA9IGNpcmNsZS5jeSxcbiAgICAgICAgdmVydGV4ID0gW3gsIHldLFxuICAgICAgICBwcmV2aW91cyA9IGJlYWNoLlAsXG4gICAgICAgIG5leHQgPSBiZWFjaC5OLFxuICAgICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xuXG4gICAgZGV0YWNoQmVhY2goYmVhY2gpO1xuXG4gICAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgICB3aGlsZSAobEFyYy5jaXJjbGVcbiAgICAgICAgJiYgTWF0aC5hYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQzXG4gICAgICAgICYmIE1hdGguYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uJDMpIHtcbiAgICAgIHByZXZpb3VzID0gbEFyYy5QO1xuICAgICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgICBkZXRhY2hCZWFjaChsQXJjKTtcbiAgICAgIGxBcmMgPSBwcmV2aW91cztcbiAgICB9XG5cbiAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG5cbiAgICB2YXIgckFyYyA9IG5leHQ7XG4gICAgd2hpbGUgKHJBcmMuY2lyY2xlXG4gICAgICAgICYmIE1hdGguYWJzKHggLSByQXJjLmNpcmNsZS54KSA8IGVwc2lsb24kM1xuICAgICAgICAmJiBNYXRoLmFicyh5IC0gckFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbiQzKSB7XG4gICAgICBuZXh0ID0gckFyYy5OO1xuICAgICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICAgIHJBcmMgPSBuZXh0O1xuICAgIH1cblxuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGRldGFjaENpcmNsZShyQXJjKTtcblxuICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsXG4gICAgICAgIGlBcmM7XG4gICAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbaUFyY107XG4gICAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICAgIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgICB9XG5cbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcbiAgICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgckFyYy5zaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuXG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgICB2YXIgeCA9IHNpdGVbMF0sXG4gICAgICAgIGRpcmVjdHJpeCA9IHNpdGVbMV0sXG4gICAgICAgIGxBcmMsXG4gICAgICAgIHJBcmMsXG4gICAgICAgIGR4bCxcbiAgICAgICAgZHhyLFxuICAgICAgICBub2RlID0gYmVhY2hlcy5fO1xuXG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgICAgaWYgKGR4bCA+IGVwc2lsb24kMykgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICAgIGR4ciA9IHggLSByaWdodEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KTtcbiAgICAgICAgaWYgKGR4ciA+IGVwc2lsb24kMykge1xuICAgICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlID0gbm9kZS5SO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChkeGwgPiAtZXBzaWxvbiQzKSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuICAgICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeHIgPiAtZXBzaWxvbiQzKSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICAgIHJBcmMgPSBub2RlLk47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxBcmMgPSByQXJjID0gbm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDZWxsKHNpdGUpO1xuICAgIHZhciBuZXdBcmMgPSBjcmVhdGVCZWFjaChzaXRlKTtcbiAgICBiZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuXG4gICAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XG5cbiAgICBpZiAobEFyYyA9PT0gckFyYykge1xuICAgICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgICAgckFyYyA9IGNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgICBiZWFjaGVzLmluc2VydChuZXdBcmMsIHJBcmMpO1xuICAgICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghckFyYykgeyAvLyAmJiBsQXJjXG4gICAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZWxzZSBsQXJjICE9PSByQXJjXG4gICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGRldGFjaENpcmNsZShyQXJjKTtcblxuICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcbiAgICAgICAgYXggPSBsU2l0ZVswXSxcbiAgICAgICAgYXkgPSBsU2l0ZVsxXSxcbiAgICAgICAgYnggPSBzaXRlWzBdIC0gYXgsXG4gICAgICAgIGJ5ID0gc2l0ZVsxXSAtIGF5LFxuICAgICAgICByU2l0ZSA9IHJBcmMuc2l0ZSxcbiAgICAgICAgY3ggPSByU2l0ZVswXSAtIGF4LFxuICAgICAgICBjeSA9IHJTaXRlWzFdIC0gYXksXG4gICAgICAgIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSxcbiAgICAgICAgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSxcbiAgICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgICAgdmVydGV4ID0gWyhjeSAqIGhiIC0gYnkgKiBoYykgLyBkICsgYXgsIChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXldO1xuXG4gICAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KTtcbiAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG4gICAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShzaXRlLCByU2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgICByZm9jeCA9IHNpdGVbMF0sXG4gICAgICAgIHJmb2N5ID0gc2l0ZVsxXSxcbiAgICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXG4gICAgaWYgKCFwYnkyKSByZXR1cm4gcmZvY3g7XG5cbiAgICB2YXIgbEFyYyA9IGFyYy5QO1xuICAgIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcblxuICAgIHNpdGUgPSBsQXJjLnNpdGU7XG4gICAgdmFyIGxmb2N4ID0gc2l0ZVswXSxcbiAgICAgICAgbGZvY3kgPSBzaXRlWzFdLFxuICAgICAgICBwbGJ5MiA9IGxmb2N5IC0gZGlyZWN0cml4O1xuXG4gICAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xuXG4gICAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCxcbiAgICAgICAgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLFxuICAgICAgICBiID0gaGwgLyBwbGJ5MjtcblxuICAgIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcblxuICAgIHJldHVybiAocmZvY3ggKyBsZm9jeCkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gcmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gICAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgICBpZiAockFyYykgcmV0dXJuIGxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gICAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgICByZXR1cm4gc2l0ZVsxXSA9PT0gZGlyZWN0cml4ID8gc2l0ZVswXSA6IEluZmluaXR5O1xuICB9XG5cbiAgdmFyIGVwc2lsb24kMyA9IDFlLTY7XG4gIHZhciBlcHNpbG9uMiQxID0gMWUtMTI7XG4gIHZhciBiZWFjaGVzO1xuICB2YXIgY2VsbHM7XG4gIHZhciBjaXJjbGVzO1xuICB2YXIgZWRnZXM7XG5cbiAgZnVuY3Rpb24gdHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxleGljb2dyYXBoaWMoYSwgYikge1xuICAgIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgICB8fCBiWzBdIC0gYVswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICAgIHZhciBzaXRlID0gc2l0ZXMuc29ydChsZXhpY29ncmFwaGljKS5wb3AoKSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgY2lyY2xlO1xuXG4gICAgZWRnZXMgPSBbXTtcbiAgICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICAgIGJlYWNoZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xuICAgIGNpcmNsZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNpcmNsZSA9IGZpcnN0Q2lyY2xlO1xuICAgICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZVsxXSA8IGNpcmNsZS55IHx8IChzaXRlWzFdID09PSBjaXJjbGUueSAmJiBzaXRlWzBdIDwgY2lyY2xlLngpKSkge1xuICAgICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgICAgYWRkQmVhY2goc2l0ZSk7XG4gICAgICAgICAgeCA9IHNpdGVbMF0sIHkgPSBzaXRlWzFdO1xuICAgICAgICB9XG4gICAgICAgIHNpdGUgPSBzaXRlcy5wb3AoKTtcbiAgICAgIH0gZWxzZSBpZiAoY2lyY2xlKSB7XG4gICAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc29ydENlbGxIYWxmZWRnZXMoKTtcblxuICAgIGlmIChleHRlbnQpIHtcbiAgICAgIHZhciB4MCA9ICtleHRlbnRbMF1bMF0sXG4gICAgICAgICAgeTAgPSArZXh0ZW50WzBdWzFdLFxuICAgICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgICB5MSA9ICtleHRlbnRbMV1bMV07XG4gICAgICBjbGlwRWRnZXMoeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgICB9XG5cbiAgICB0aGlzLmVkZ2VzID0gZWRnZXM7XG4gICAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gICAgYmVhY2hlcyA9XG4gICAgY2lyY2xlcyA9XG4gICAgZWRnZXMgPVxuICAgIGNlbGxzID0gbnVsbDtcbiAgfVxuXG4gIERpYWdyYW0ucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBEaWFncmFtLFxuXG4gICAgcG9seWdvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgICAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKGZ1bmN0aW9uKGNlbGwpIHtcbiAgICAgICAgdmFyIHBvbHlnb24gPSBjZWxsLmhhbGZlZGdlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaV0pOyB9KTtcbiAgICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICAgIHJldHVybiBwb2x5Z29uO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHRyaWFuZ2xlczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdHJpYW5nbGVzID0gW10sXG4gICAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgICB0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgaSkge1xuICAgICAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzLFxuICAgICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgICAgbSA9IGhhbGZlZGdlcy5sZW5ndGgsXG4gICAgICAgICAgICBzMCxcbiAgICAgICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW20gLSAxXV0sXG4gICAgICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG5cbiAgICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW2pdXTtcbiAgICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgICAgaWYgKGkgPCBzMC5pbmRleCAmJiBpIDwgczEuaW5kZXggJiYgdHJpYW5nbGVBcmVhKHNpdGUsIHMwLCBzMSkgPCAwKSB7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChbc2l0ZS5kYXRhLCBzMC5kYXRhLCBzMS5kYXRhXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgICB9LFxuXG4gICAgbGlua3M6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgICAgcmV0dXJuIGVkZ2UucmlnaHQ7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogZWRnZS5sZWZ0LmRhdGEsXG4gICAgICAgICAgdGFyZ2V0OiBlZGdlLnJpZ2h0LmRhdGFcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHZvcm9ub2koKSB7XG4gICAgdmFyIHggPSB4JDQsXG4gICAgICAgIHkgPSB5JDQsXG4gICAgICAgIGV4dGVudCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgRGlhZ3JhbShkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHZhciBzID0gW01hdGgucm91bmQoeChkLCBpLCBkYXRhKSAvIGVwc2lsb24kMykgKiBlcHNpbG9uJDMsIE1hdGgucm91bmQoeShkLCBpLCBkYXRhKSAvIGVwc2lsb24kMykgKiBlcHNpbG9uJDNdO1xuICAgICAgICBzLmluZGV4ID0gaTtcbiAgICAgICAgcy5kYXRhID0gZDtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9KSwgZXh0ZW50KTtcbiAgICB9XG5cbiAgICB2b3Jvbm9pLnBvbHlnb25zID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHZvcm9ub2koZGF0YSkucG9seWdvbnMoKTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS5saW5rcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLmxpbmtzKCk7XG4gICAgfTtcblxuICAgIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHZvcm9ub2koZGF0YSkudHJpYW5nbGVzKCk7XG4gICAgfTtcblxuICAgIHZvcm9ub2kueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDgoK18pLCB2b3Jvbm9pKSA6IHg7XG4gICAgfTtcblxuICAgIHZvcm9ub2kueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDgoK18pLCB2b3Jvbm9pKSA6IHk7XG4gICAgfTtcblxuICAgIHZvcm9ub2kuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbW2V4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdXSwgW2V4dGVudFsxXVswXSwgZXh0ZW50WzFdWzFdXV07XG4gICAgfTtcblxuICAgIHZvcm9ub2kuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IF8gPT0gbnVsbCA/IG51bGwgOiBbWzAsIDBdLCBbK19bMF0sICtfWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0sIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXV07XG4gICAgfTtcblxuICAgIHJldHVybiB2b3Jvbm9pO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkOSh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFpvb21FdmVudCh0YXJnZXQsIHR5cGUsIHRyYW5zZm9ybSkge1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH1cblxuICBmdW5jdGlvbiBUcmFuc2Zvcm0oaywgeCwgeSkge1xuICAgIHRoaXMuayA9IGs7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxuICAgIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gayA9PT0gMSA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuayAqIGssIHRoaXMueCwgdGhpcy55KTtcbiAgICB9LFxuICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgICB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICAgIH0sXG4gICAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCAqIHRoaXMuayArIHRoaXMueDtcbiAgICB9LFxuICAgIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIHkgKiB0aGlzLmsgKyB0aGlzLnk7XG4gICAgfSxcbiAgICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICAgIH0sXG4gICAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuICh4IC0gdGhpcy54KSAvIHRoaXMuaztcbiAgICB9LFxuICAgIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHJldHVybiAoeSAtIHRoaXMueSkgLyB0aGlzLms7XG4gICAgfSxcbiAgICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHguY29weSgpLmRvbWFpbih4LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WCwgdGhpcykubWFwKHguaW52ZXJ0LCB4KSk7XG4gICAgfSxcbiAgICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIHkuY29weSgpLmRvbWFpbih5LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WSwgdGhpcykubWFwKHkuaW52ZXJ0LCB5KSk7XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnggKyBcIixcIiArIHRoaXMueSArIFwiKSBzY2FsZShcIiArIHRoaXMuayArIFwiKVwiO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaWRlbnRpdHkkNiA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbiAgdHJhbnNmb3JtLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5fX3pvb20gfHwgaWRlbnRpdHkkNjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24kMSgpIHtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ldmVudCQxKCkge1xuICAgIGV4cG9ydHMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG4gIGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIkMSgpIHtcbiAgICByZXR1cm4gIWV4cG9ydHMuZXZlbnQuYnV0dG9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgICB2YXIgZSA9IHRoaXMsIHcsIGg7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgICBlID0gZS5vd25lclNWR0VsZW1lbnQgfHwgZTtcbiAgICAgIHcgPSBlLndpZHRoLmJhc2VWYWwudmFsdWU7XG4gICAgICBoID0gZS5oZWlnaHQuYmFzZVZhbC52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdyA9IGUuY2xpZW50V2lkdGg7XG4gICAgICBoID0gZS5jbGllbnRIZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBbWzAsIDBdLCBbdywgaF1dO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHkkNjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHpvb20oKSB7XG4gICAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIkMSxcbiAgICAgICAgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgICAgazAgPSAwLFxuICAgICAgICBrMSA9IEluZmluaXR5LFxuICAgICAgICB4MCA9IC1rMSxcbiAgICAgICAgeDEgPSBrMSxcbiAgICAgICAgeTAgPSB4MCxcbiAgICAgICAgeTEgPSB4MSxcbiAgICAgICAgZHVyYXRpb24gPSAyNTAsXG4gICAgICAgIGdlc3R1cmVzID0gW10sXG4gICAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJ6b29tXCIsIFwiZW5kXCIpLFxuICAgICAgICB0b3VjaHN0YXJ0aW5nLFxuICAgICAgICB0b3VjaGVuZGluZyxcbiAgICAgICAgdG91Y2hEZWxheSA9IDUwMCxcbiAgICAgICAgd2hlZWxEZWxheSA9IDE1MDtcblxuICAgIGZ1bmN0aW9uIHpvb20oc2VsZWN0aW9uKSB7XG4gICAgICBzZWxlY3Rpb25cbiAgICAgICAgICAub24oXCJ3aGVlbC56b29tXCIsIHdoZWVsZWQpXG4gICAgICAgICAgLm9uKFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vkb3duZWQpXG4gICAgICAgICAgLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKVxuICAgICAgICAgIC5vbihcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgICAgLm9uKFwidG91Y2htb3ZlLnpvb21cIiwgdG91Y2htb3ZlZClcbiAgICAgICAgICAub24oXCJ0b3VjaGVuZC56b29tIHRvdWNoY2FuY2VsLnpvb21cIiwgdG91Y2hlbmRlZClcbiAgICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgICAgLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgIH1cblxuICAgIHpvb20udHJhbnNmb3JtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgdHJhbnNmb3JtKSB7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gY29sbGVjdGlvbi5zZWxlY3Rpb24gPyBjb2xsZWN0aW9uLnNlbGVjdGlvbigpIDogY29sbGVjdGlvbjtcbiAgICAgIHNlbGVjdGlvbi5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKTtcbiAgICAgIGlmIChjb2xsZWN0aW9uICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgICAgc2NoZWR1bGUoY29sbGVjdGlvbiwgdHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGlvbi5pbnRlcnJ1cHQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgICAgICAuem9vbShudWxsLCB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRyYW5zZm9ybSlcbiAgICAgICAgICAgICAgLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgem9vbS5zY2FsZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrKSB7XG4gICAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGswID0gdGhpcy5fX3pvb20uayxcbiAgICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICAgIHJldHVybiBrMCAqIGsxO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHpvb20uc2NhbGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaykge1xuICAgICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgICBwMCA9IGNlbnRyb2lkKGUpLFxuICAgICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgICAgcmV0dXJuIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgem9vbS50cmFuc2xhdGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSkge1xuICAgICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cmFpbih0aGlzLl9fem9vbS50cmFuc2xhdGUoXG4gICAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXG4gICAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHlcbiAgICAgICAgKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHRyYW5zZm9ybSwgaykge1xuICAgICAgayA9IE1hdGgubWF4KGswLCBNYXRoLm1pbihrMSwgaykpO1xuICAgICAgcmV0dXJuIGsgPT09IHRyYW5zZm9ybS5rID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybShrLCB0cmFuc2Zvcm0ueCwgdHJhbnNmb3JtLnkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0cmFuc2Zvcm0sIHAwLCBwMSkge1xuICAgICAgdmFyIHggPSBwMFswXSAtIHAxWzBdICogdHJhbnNmb3JtLmssIHkgPSBwMFsxXSAtIHAxWzFdICogdHJhbnNmb3JtLms7XG4gICAgICByZXR1cm4geCA9PT0gdHJhbnNmb3JtLnggJiYgeSA9PT0gdHJhbnNmb3JtLnkgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybS5rLCB4LCB5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdHJhaW4odHJhbnNmb3JtLCBleHRlbnQpIHtcbiAgICAgIHZhciBkeCA9IE1hdGgubWluKDAsIHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFswXVswXSkgLSB4MCkgfHwgTWF0aC5tYXgoMCwgdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzFdWzBdKSAtIHgxKSxcbiAgICAgICAgICBkeSA9IE1hdGgubWluKDAsIHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFswXVsxXSkgLSB5MCkgfHwgTWF0aC5tYXgoMCwgdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHkxKTtcbiAgICAgIHJldHVybiBkeCB8fCBkeSA/IHRyYW5zZm9ybS50cmFuc2xhdGUoZHgsIGR5KSA6IHRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjZW50cm9pZChleHRlbnQpIHtcbiAgICAgIHJldHVybiBbKCtleHRlbnRbMF1bMF0gKyArZXh0ZW50WzFdWzBdKSAvIDIsICgrZXh0ZW50WzBdWzFdICsgK2V4dGVudFsxXVsxXSkgLyAyXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2hlZHVsZSh0cmFuc2l0aW9uLCB0cmFuc2Zvcm0sIGNlbnRlcikge1xuICAgICAgdHJhbnNpdGlvblxuICAgICAgICAgIC5vbihcInN0YXJ0Lnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5zdGFydCgpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC56b29tIGVuZC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7IH0pXG4gICAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIGcgPSBnZXN0dXJlKHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgICAgcCA9IGNlbnRlciB8fCBjZW50cm9pZChlKSxcbiAgICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoZVsxXVswXSAtIGVbMF1bMF0sIGVbMV1bMV0gLSBlWzBdWzFdKSxcbiAgICAgICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICAgICAgYiA9IHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGF0LCBhcmdzKSA6IHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGVab29tKGEuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYS5rKSwgYi5pbnZlcnQocCkuY29uY2F0KHcgLyBiLmspKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIGlmICh0ID09PSAxKSB0ID0gYjsgLy8gQXZvaWQgcm91bmRpbmcgZXJyb3Igb24gZW5kLlxuICAgICAgICAgICAgICBlbHNlIHsgdmFyIGwgPSBpKHQpLCBrID0gdyAvIGxbMl07IHQgPSBuZXcgVHJhbnNmb3JtKGssIHBbMF0gLSBsWzBdICogaywgcFsxXSAtIGxbMV0gKiBrKTsgfVxuICAgICAgICAgICAgICBnLnpvb20obnVsbCwgdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBnZXN0dXJlcy5sZW5ndGgsIGc7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChnID0gZ2VzdHVyZXNbaV0pLnRoYXQgPT09IHRoYXQpIHtcbiAgICAgICAgICByZXR1cm4gZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBHZXN0dXJlKHRoYXQsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEdlc3R1cmUodGhhdCwgYXJncykge1xuICAgICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgICB0aGlzLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9XG5cbiAgICBHZXN0dXJlLnByb3RvdHlwZSA9IHtcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gZ2VzdHVyZXMucHVzaCh0aGlzKSAtIDE7XG4gICAgICAgICAgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgem9vbTogZnVuY3Rpb24oa2V5LCB0cmFuc2Zvcm0pIHtcbiAgICAgICAgaWYgKHRoaXMubW91c2UgJiYga2V5ICE9PSBcIm1vdXNlXCIpIHRoaXMubW91c2VbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMubW91c2VbMF0pO1xuICAgICAgICBpZiAodGhpcy50b3VjaDAgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gwWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMFswXSk7XG4gICAgICAgIGlmICh0aGlzLnRvdWNoMSAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDFbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gxWzBdKTtcbiAgICAgICAgdGhpcy50aGF0Ll9fem9vbSA9IHRyYW5zZm9ybTtcbiAgICAgICAgdGhpcy5lbWl0KFwiem9vbVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICBnZXN0dXJlcy5zcGxpY2UodGhpcy5pbmRleCwgMSk7XG4gICAgICAgICAgdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIGN1c3RvbUV2ZW50KG5ldyBab29tRXZlbnQoem9vbSwgdHlwZSwgdGhpcy50aGF0Ll9fem9vbSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gd2hlZWxlZCgpIHtcbiAgICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBrID0gTWF0aC5tYXgoazAsIE1hdGgubWluKGsxLCB0LmsgKiBNYXRoLnBvdygyLCAtZXhwb3J0cy5ldmVudC5kZWx0YVkgKiAoZXhwb3J0cy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKSAvIDUwMCkpKSxcbiAgICAgICAgICBwID0gbW91c2UodGhpcyk7XG5cbiAgICAgIC8vIElmIHRoZSBtb3VzZSBpcyBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhcyBiZWZvcmUsIHJldXNlIGl0LlxuICAgICAgLy8gSWYgdGhlcmUgd2VyZSByZWNlbnQgd2hlZWwgZXZlbnRzLCByZXNldCB0aGUgd2hlZWwgaWRsZSB0aW1lb3V0LlxuICAgICAgaWYgKGcud2hlZWwpIHtcbiAgICAgICAgaWYgKGcubW91c2VbMF1bMF0gIT09IHBbMF0gfHwgZy5tb3VzZVswXVsxXSAhPT0gcFsxXSkge1xuICAgICAgICAgIGcubW91c2VbMV0gPSB0LmludmVydChnLm1vdXNlWzBdID0gcCk7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJUaW1lb3V0KGcud2hlZWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGlzIHdoZWVsIGV2ZW50IHdvbuKAmXQgdHJpZ2dlciBhIHRyYW5zZm9ybSBjaGFuZ2UsIGlnbm9yZSBpdC5cbiAgICAgIGVsc2UgaWYgKHQuayA9PT0gaykgcmV0dXJuO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGNhcHR1cmUgdGhlIG1vdXNlIHBvaW50IGFuZCBsb2NhdGlvbiBhdCB0aGUgc3RhcnQuXG4gICAgICBlbHNlIHtcbiAgICAgICAgZy5tb3VzZSA9IFtwLCB0LmludmVydChwKV07XG4gICAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgICAgZy5zdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBub2V2ZW50JDEoKTtcbiAgICAgIGcud2hlZWwgPSBzZXRUaW1lb3V0KHdoZWVsaWRsZWQsIHdoZWVsRGVsYXkpO1xuICAgICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0LCBrKSwgZy5tb3VzZVswXSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHdoZWVsaWRsZWQoKSB7XG4gICAgICAgIGcud2hlZWwgPSBudWxsO1xuICAgICAgICBnLmVuZCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdiA9IHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLnpvb21cIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLnpvb21cIiwgbW91c2V1cHBlZCwgdHJ1ZSksXG4gICAgICAgICAgcCA9IG1vdXNlKHRoaXMpO1xuXG4gICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgICAgbm9wcm9wYWdhdGlvbiQxKCk7XG4gICAgICBnLm1vdXNlID0gW3AsIHRoaXMuX196b29tLmludmVydChwKV07XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG5cbiAgICAgIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgICAgIG5vZXZlbnQkMSgpO1xuICAgICAgICBnLm1vdmVkID0gdHJ1ZTtcbiAgICAgICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShnLnRoYXQuX196b29tLCBnLm1vdXNlWzBdID0gbW91c2UoZy50aGF0KSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgICAgIHYub24oXCJtb3VzZW1vdmUuem9vbSBtb3VzZXVwLnpvb21cIiwgbnVsbCk7XG4gICAgICAgIGRyYWdFbmFibGUoZXhwb3J0cy5ldmVudC52aWV3LCBnLm1vdmVkKTtcbiAgICAgICAgbm9ldmVudCQxKCk7XG4gICAgICAgIGcuZW5kKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGJsY2xpY2tlZCgpIHtcbiAgICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gbW91c2UodGhpcyksXG4gICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgIGsxID0gdDAuayAqIChleHBvcnRzLmV2ZW50LnNoaWZ0S2V5ID8gMC41IDogMiksXG4gICAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgICAgbm9ldmVudCQxKCk7XG4gICAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDApO1xuICAgICAgZWxzZSBzZWxlY3QodGhpcykuY2FsbCh6b29tLnRyYW5zZm9ybSwgdDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHRvdWNoZXMgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdCwgcDtcblxuICAgICAgbm9wcm9wYWdhdGlvbiQxKCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gdG91Y2godGhpcywgdG91Y2hlcywgdC5pZGVudGlmaWVyKTtcbiAgICAgICAgcCA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCksIHQuaWRlbnRpZmllcl07XG4gICAgICAgIGlmICghZy50b3VjaDApIGcudG91Y2gwID0gcDtcbiAgICAgICAgZWxzZSBpZiAoIWcudG91Y2gxKSBnLnRvdWNoMSA9IHA7XG4gICAgICB9XG4gICAgICBpZiAodG91Y2hzdGFydGluZykge1xuICAgICAgICB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuICAgICAgICBpZiAoIWcudG91Y2gxKSByZXR1cm4gZy5lbmQoKSwgZGJsY2xpY2tlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IG4pIHtcbiAgICAgICAgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoc3RhcnRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgICBnLnN0YXJ0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHRvdWNoZXMgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdCwgcCwgbDtcblxuICAgICAgbm9ldmVudCQxKCk7XG4gICAgICBpZiAodG91Y2hzdGFydGluZykgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDBbMF0gPSBwO1xuICAgICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMVswXSA9IHA7XG4gICAgICB9XG4gICAgICB0ID0gZy50aGF0Ll9fem9vbTtcbiAgICAgIGlmIChnLnRvdWNoMSkge1xuICAgICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICAgIHAxID0gZy50b3VjaDFbMF0sIGwxID0gZy50b3VjaDFbMV0sXG4gICAgICAgICAgICBkcCA9IChkcCA9IHAxWzBdIC0gcDBbMF0pICogZHAgKyAoZHAgPSBwMVsxXSAtIHAwWzFdKSAqIGRwLFxuICAgICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgICAgdCA9IHNjYWxlKHQsIE1hdGguc3FydChkcCAvIGRsKSk7XG4gICAgICAgIHAgPSBbKHAwWzBdICsgcDFbMF0pIC8gMiwgKHAwWzFdICsgcDFbMV0pIC8gMl07XG4gICAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMCkgcCA9IGcudG91Y2gwWzBdLCBsID0gZy50b3VjaDBbMV07XG4gICAgICBlbHNlIHJldHVybjtcbiAgICAgIGcuem9vbShcInRvdWNoXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUodCwgcCwgbCksIGcuZXh0ZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHRvdWNoZXMgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdDtcblxuICAgICAgbm9wcm9wYWdhdGlvbiQxKCk7XG4gICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHQgPSB0b3VjaGVzW2ldO1xuICAgICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gwO1xuICAgICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDE7XG4gICAgICB9XG4gICAgICBpZiAoZy50b3VjaDEgJiYgIWcudG91Y2gwKSBnLnRvdWNoMCA9IGcudG91Y2gxLCBkZWxldGUgZy50b3VjaDE7XG4gICAgICBpZiAoIWcudG91Y2gwKSBnLmVuZCgpO1xuICAgIH1cblxuICAgIHpvb20uZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ5KCEhXyksIHpvb20pIDogZmlsdGVyO1xuICAgIH07XG5cbiAgICB6b29tLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkOShbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIHpvb20pIDogZXh0ZW50O1xuICAgIH07XG5cbiAgICB6b29tLnNjYWxlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoazAgPSArX1swXSwgazEgPSArX1sxXSwgem9vbSkgOiBbazAsIGsxXTtcbiAgICB9O1xuXG4gICAgem9vbS50cmFuc2xhdGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdLCB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdLCB6b29tKSA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH07XG5cbiAgICB6b29tLmR1cmF0aW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHVyYXRpb24gPSArXywgem9vbSkgOiBkdXJhdGlvbjtcbiAgICB9O1xuXG4gICAgem9vbS5vbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gem9vbSA6IHZhbHVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gem9vbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDEwKHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gQnJ1c2hFdmVudCh0YXJnZXQsIHR5cGUsIHNlbGVjdGlvbikge1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gIH1cblxuICBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uJDIoKSB7XG4gICAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZXZlbnQkMigpIHtcbiAgICBleHBvcnRzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIHZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9O1xuICB2YXIgTU9ERV9TUEFDRSA9IHtuYW1lOiBcInNwYWNlXCJ9O1xuICB2YXIgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn07XG4gIHZhciBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcbiAgdmFyIFggPSB7XG4gICAgbmFtZTogXCJ4XCIsXG4gICAgaGFuZGxlczogW1wiZVwiLCBcIndcIl0ubWFwKHR5cGUkMSksXG4gICAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggJiYgW1t4WzBdLCBlWzBdWzFdXSwgW3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxuICB9O1xuXG4gIHZhciBZID0ge1xuICAgIG5hbWU6IFwieVwiLFxuICAgIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlJDEpLFxuICAgIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ICYmIFtbZVswXVswXSwgeVswXV0sIFtlWzFdWzBdLCB5WzFdXV07IH0sXG4gICAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbiAgfTtcblxuICB2YXIgWFkgPSB7XG4gICAgbmFtZTogXCJ4eVwiLFxuICAgIGhhbmRsZXM6IFtcIm5cIiwgXCJlXCIsIFwic1wiLCBcIndcIiwgXCJud1wiLCBcIm5lXCIsIFwic2VcIiwgXCJzd1wiXS5tYXAodHlwZSQxKSxcbiAgICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9LFxuICAgIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG4gIH07XG5cbiAgdmFyIGN1cnNvcnMgPSB7XG4gICAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgICBzZWxlY3Rpb246IFwibW92ZVwiLFxuICAgIG46IFwibnMtcmVzaXplXCIsXG4gICAgZTogXCJldy1yZXNpemVcIixcbiAgICBzOiBcIm5zLXJlc2l6ZVwiLFxuICAgIHc6IFwiZXctcmVzaXplXCIsXG4gICAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICAgIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gICAgc3c6IFwibmVzdy1yZXNpemVcIlxuICB9O1xuXG4gIHZhciBmbGlwWCA9IHtcbiAgICBlOiBcIndcIixcbiAgICB3OiBcImVcIixcbiAgICBudzogXCJuZVwiLFxuICAgIG5lOiBcIm53XCIsXG4gICAgc2U6IFwic3dcIixcbiAgICBzdzogXCJzZVwiXG4gIH07XG5cbiAgdmFyIGZsaXBZID0ge1xuICAgIG46IFwic1wiLFxuICAgIHM6IFwiblwiLFxuICAgIG53OiBcInN3XCIsXG4gICAgbmU6IFwic2VcIixcbiAgICBzZTogXCJuZVwiLFxuICAgIHN3OiBcIm53XCJcbiAgfTtcblxuICB2YXIgc2lnbnNYID0ge1xuICAgIG92ZXJsYXk6ICsxLFxuICAgIHNlbGVjdGlvbjogKzEsXG4gICAgbjogbnVsbCxcbiAgICBlOiArMSxcbiAgICBzOiBudWxsLFxuICAgIHc6IC0xLFxuICAgIG53OiAtMSxcbiAgICBuZTogKzEsXG4gICAgc2U6ICsxLFxuICAgIHN3OiAtMVxuICB9O1xuXG4gIHZhciBzaWduc1kgPSB7XG4gICAgb3ZlcmxheTogKzEsXG4gICAgc2VsZWN0aW9uOiArMSxcbiAgICBuOiAtMSxcbiAgICBlOiBudWxsLFxuICAgIHM6ICsxLFxuICAgIHc6IG51bGwsXG4gICAgbnc6IC0xLFxuICAgIG5lOiAtMSxcbiAgICBzZTogKzEsXG4gICAgc3c6ICsxXG4gIH07XG5cbiAgZnVuY3Rpb24gdHlwZSQxKHQpIHtcbiAgICByZXR1cm4ge3R5cGU6IHR9O1xuICB9XG5cbiAgLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG4gIGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIkMigpIHtcbiAgICByZXR1cm4gIWV4cG9ydHMuZXZlbnQuYnV0dG9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdEV4dGVudCQxKCkge1xuICAgIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICAgIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xuICB9XG5cbiAgLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUg4oCcX19icnVzaOKAnSByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbiAgZnVuY3Rpb24gbG9jYWwkMShub2RlKSB7XG4gICAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gICAgcmV0dXJuIG5vZGUuX19icnVzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5JDEoZXh0ZW50KSB7XG4gICAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICAgIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICAgIHJldHVybiBicnVzaCQxKFgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICAgIHJldHVybiBicnVzaCQxKFkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2goKSB7XG4gICAgcmV0dXJuIGJydXNoJDEoWFkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2gkMShkaW0pIHtcbiAgICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCQxLFxuICAgICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyJDIsXG4gICAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKGJydXNoLCBcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgICB0b3VjaGVuZGluZztcblxuICAgIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgICAgLmRhdGEoW3R5cGUkMShcIm92ZXJsYXlcIildKTtcblxuICAgICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsJDEodGhpcykuZXh0ZW50O1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgLmRhdGEoW3R5cGUkMShcInNlbGVjdGlvblwiKV0pXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaCB0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpO1xuICAgIH1cblxuICAgIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uKSB7XG4gICAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XG4gICAgICAgIGdyb3VwXG4gICAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCkuc3RhcnQoKTsgfSlcbiAgICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24wID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBlbXB0eSQxKHNlbGVjdGlvbjEpID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgJiYgc2VsZWN0aW9uMSA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PSBudWxsIHx8IGVtcHR5JDEoc2VsZWN0aW9uMSkgPyBudWxsIDogc2VsZWN0aW9uMTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCQxKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICAgIH1cblxuICAgICAgZWxzZSB7XG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiB0aGF0Ll9fYnJ1c2guZW1pdHRlciB8fCBuZXcgRW1pdHRlcih0aGF0LCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB9XG5cbiAgICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICAgIGJlZm9yZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBicnVzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIGN1c3RvbUV2ZW50KG5ldyBCcnVzaEV2ZW50KGJydXNoLCB0eXBlLCBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3RhcnRlZCgpIHtcbiAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHsgaWYgKGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgZXhwb3J0cy5ldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuIG5vZXZlbnQkMigpOyB9XG4gICAgICBlbHNlIGlmICh0b3VjaGVuZGluZykgcmV0dXJuO1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgdHlwZSA9IGV4cG9ydHMuZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgICAgbW9kZSA9IChleHBvcnRzLmV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChleHBvcnRzLmV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgICAgc3RhdGUgPSBsb2NhbCQxKHRoYXQpLFxuICAgICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIG1vdmluZyxcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGV4cG9ydHMuZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgbG9ja1gsXG4gICAgICAgICAgbG9ja1ksXG4gICAgICAgICAgcG9pbnQwID0gbW91c2UodGhhdCksXG4gICAgICAgICAgcG9pbnQgPSBwb2ludDAsXG4gICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uID0gW1xuICAgICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgICAgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgICBuMCA9IHNlbGVjdGlvblswXVsxXTtcbiAgICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgICAgfVxuXG4gICAgICB3MSA9IHcwO1xuICAgICAgbjEgPSBuMDtcbiAgICAgIGUxID0gZTA7XG4gICAgICBzMSA9IHMwO1xuXG4gICAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKTtcblxuICAgICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGdyb3VwXG4gICAgICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmlldyA9IHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpXG4gICAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuICAgICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG5cbiAgICAgICAgZHJhZ0Rpc2FibGUoZXhwb3J0cy5ldmVudC52aWV3KTtcbiAgICAgIH1cblxuICAgICAgbm9wcm9wYWdhdGlvbiQyKCk7XG4gICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuc3RhcnQoKTtcblxuICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBtb3VzZSh0aGF0KTtcbiAgICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgICAgZWxzZSBsb2NrWCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICAgIG5vZXZlbnQkMigpO1xuICAgICAgICBtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICAgIHZhciB0O1xuXG4gICAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gTWF0aC5tYXgoVyAtIGUwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcblxuICAgICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgICAgaWYgKHNlbGVjdGlvblswXVswXSAhPT0gdzFcbiAgICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZW5kZWQoKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24kMigpO1xuICAgICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzKSB7XG4gICAgICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgICAgICBncm91cC5vbihcInRvdWNobW92ZS5icnVzaCB0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkcmFnRW5hYmxlKGV4cG9ydHMuZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgICBpZiAoZW1wdHkkMShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5lbmQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24ga2V5ZG93bmVkKCkge1xuICAgICAgICBzd2l0Y2ggKGV4cG9ydHMuZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMSAtIGR4OyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzEgLSBkeDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbik7XG4gICAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbm9ldmVudCQyKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGtleXVwcGVkKCkge1xuICAgICAgICBzd2l0Y2ggKGV4cG9ydHMuZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICAgIGlmIChleHBvcnRzLmV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbm9ldmVudCQyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICAgIHN0YXRlLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgc3RhdGUuZGltID0gZGltO1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCBicnVzaCkgOiBleHRlbnQ7XG4gICAgfTtcblxuICAgIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICAgIH07XG5cbiAgICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICAgIH07XG5cbiAgICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGJydXNoO1xuICB9XG5cbiAgdmFyIGNvcyA9IE1hdGguY29zO1xuICB2YXIgc2luID0gTWF0aC5zaW47XG4gIHZhciBwaSQzID0gTWF0aC5QSTtcbiAgdmFyIGhhbGZQaSQyID0gcGkkMyAvIDI7XG4gIHZhciB0YXUkMyA9IHBpJDMgKiAyO1xuICB2YXIgbWF4JDEgPSBNYXRoLm1heDtcblxuICBmdW5jdGlvbiBjb21wYXJlVmFsdWUoY29tcGFyZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gY29tcGFyZShcbiAgICAgICAgYS5zb3VyY2UudmFsdWUgKyBhLnRhcmdldC52YWx1ZSxcbiAgICAgICAgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZVxuICAgICAgKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2hvcmQoKSB7XG4gICAgdmFyIHBhZEFuZ2xlID0gMCxcbiAgICAgICAgc29ydEdyb3VwcyA9IG51bGwsXG4gICAgICAgIHNvcnRTdWJncm91cHMgPSBudWxsLFxuICAgICAgICBzb3J0Q2hvcmRzID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGNob3JkKG1hdHJpeCkge1xuICAgICAgdmFyIG4gPSBtYXRyaXgubGVuZ3RoLFxuICAgICAgICAgIGdyb3VwU3VtcyA9IFtdLFxuICAgICAgICAgIGdyb3VwSW5kZXggPSByYW5nZShuKSxcbiAgICAgICAgICBzdWJncm91cEluZGV4ID0gW10sXG4gICAgICAgICAgY2hvcmRzID0gW10sXG4gICAgICAgICAgZ3JvdXBzID0gY2hvcmRzLmdyb3VwcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBzdWJncm91cHMgPSBuZXcgQXJyYXkobiAqIG4pLFxuICAgICAgICAgIGssXG4gICAgICAgICAgeCxcbiAgICAgICAgICB4MCxcbiAgICAgICAgICBkeCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGo7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHN1bS5cbiAgICAgIGsgPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHggPSAwLCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgeCArPSBtYXRyaXhbaV1bal07XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG4gICAgICAgIHN1Ymdyb3VwSW5kZXgucHVzaChyYW5nZShuKSk7XG4gICAgICAgIGsgKz0geDtcbiAgICAgIH1cblxuICAgICAgLy8gU29ydCBncm91cHPigKZcbiAgICAgIGlmIChzb3J0R3JvdXBzKSBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gc29ydEdyb3Vwcyhncm91cFN1bXNbYV0sIGdyb3VwU3Vtc1tiXSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU29ydCBzdWJncm91cHPigKZcbiAgICAgIGlmIChzb3J0U3ViZ3JvdXBzKSBzdWJncm91cEluZGV4LmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICBkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ29udmVydCB0aGUgc3VtIHRvIHNjYWxpbmcgZmFjdG9yIGZvciBbMCwgMnBpXS5cbiAgICAgIC8vIFRPRE8gQWxsb3cgc3RhcnQgYW5kIGVuZCBhbmdsZSB0byBiZSBzcGVjaWZpZWQ/XG4gICAgICAvLyBUT0RPIEFsbG93IHBhZGRpbmcgdG8gYmUgc3BlY2lmaWVkIGFzIHBlcmNlbnRhZ2U/XG4gICAgICBrID0gbWF4JDEoMCwgdGF1JDMgLSBwYWRBbmdsZSAqIG4pIC8gaztcbiAgICAgIGR4ID0gayA/IHBhZEFuZ2xlIDogdGF1JDMgLyBuO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBzdGFydCBhbmQgZW5kIGFuZ2xlIGZvciBlYWNoIGdyb3VwIGFuZCBzdWJncm91cC5cbiAgICAgIC8vIE5vdGU6IE9wZXJhIGhhcyBhIGJ1ZyByZW9yZGVyaW5nIG9iamVjdCBsaXRlcmFsIHByb3BlcnRpZXMhXG4gICAgICB4ID0gMCwgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICB4MCA9IHgsIGogPSAtMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxuICAgICAgICAgICAgICBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLFxuICAgICAgICAgICAgICB2ID0gbWF0cml4W2RpXVtkal0sXG4gICAgICAgICAgICAgIGEwID0geCxcbiAgICAgICAgICAgICAgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICAgIHN1Ymdyb3Vwc1tkaiAqIG4gKyBkaV0gPSB7XG4gICAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgICBzdWJpbmRleDogZGosXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICAgIHZhbHVlOiB2XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBncm91cHNbZGldID0ge1xuICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgICBlbmRBbmdsZTogeCxcbiAgICAgICAgICB2YWx1ZTogZ3JvdXBTdW1zW2RpXVxuICAgICAgICB9O1xuICAgICAgICB4ICs9IGR4O1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSBjaG9yZHMgZm9yIGVhY2ggKG5vbi1lbXB0eSkgc3ViZ3JvdXAtc3ViZ3JvdXAgbGluay5cbiAgICAgIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaiA9IGkgLSAxOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaiAqIG4gKyBpXSxcbiAgICAgICAgICAgICAgdGFyZ2V0ID0gc3ViZ3JvdXBzW2kgKiBuICsgal07XG4gICAgICAgICAgaWYgKHNvdXJjZS52YWx1ZSB8fCB0YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgID8ge3NvdXJjZTogdGFyZ2V0LCB0YXJnZXQ6IHNvdXJjZX1cbiAgICAgICAgICAgICAgICA6IHtzb3VyY2U6IHNvdXJjZSwgdGFyZ2V0OiB0YXJnZXR9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNvcnRDaG9yZHMgPyBjaG9yZHMuc29ydChzb3J0Q2hvcmRzKSA6IGNob3JkcztcbiAgICB9XG5cbiAgICBjaG9yZC5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gbWF4JDEoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xuICAgIH07XG5cbiAgICBjaG9yZC5zb3J0R3JvdXBzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gICAgfTtcblxuICAgIGNob3JkLnNvcnRTdWJncm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0U3ViZ3JvdXBzID0gXywgY2hvcmQpIDogc29ydFN1Ymdyb3VwcztcbiAgICB9O1xuXG4gICAgY2hvcmQuc29ydENob3JkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNob3JkO1xuICB9XG5cbiAgdmFyIHNsaWNlJDUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMTEoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0U291cmNlKGQpIHtcbiAgICByZXR1cm4gZC5zb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0VGFyZ2V0KGQpIHtcbiAgICByZXR1cm4gZC50YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0UmFkaXVzJDEoZCkge1xuICAgIHJldHVybiBkLnJhZGl1cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTdGFydEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdEVuZEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5lbmRBbmdsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpYmJvbigpIHtcbiAgICB2YXIgc291cmNlID0gZGVmYXVsdFNvdXJjZSxcbiAgICAgICAgdGFyZ2V0ID0gZGVmYXVsdFRhcmdldCxcbiAgICAgICAgcmFkaXVzID0gZGVmYXVsdFJhZGl1cyQxLFxuICAgICAgICBzdGFydEFuZ2xlID0gZGVmYXVsdFN0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlID0gZGVmYXVsdEVuZEFuZ2xlLFxuICAgICAgICBjb250ZXh0ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHJpYmJvbigpIHtcbiAgICAgIHZhciBidWZmZXIsXG4gICAgICAgICAgYXJndiA9IHNsaWNlJDUuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICAgIHMgPSBzb3VyY2UuYXBwbHkodGhpcywgYXJndiksXG4gICAgICAgICAgdCA9IHRhcmdldC5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgICBzciA9ICtyYWRpdXMuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSBzLCBhcmd2KSksXG4gICAgICAgICAgc2EwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQyLFxuICAgICAgICAgIHNhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDIsXG4gICAgICAgICAgc3gwID0gc3IgKiBjb3Moc2EwKSxcbiAgICAgICAgICBzeTAgPSBzciAqIHNpbihzYTApLFxuICAgICAgICAgIHRyID0gK3JhZGl1cy5hcHBseSh0aGlzLCAoYXJndlswXSA9IHQsIGFyZ3YpKSxcbiAgICAgICAgICB0YTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDIsXG4gICAgICAgICAgdGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMjtcblxuICAgICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgICBjb250ZXh0Lm1vdmVUbyhzeDAsIHN5MCk7XG4gICAgICBjb250ZXh0LmFyYygwLCAwLCBzciwgc2EwLCBzYTEpO1xuICAgICAgaWYgKHNhMCAhPT0gdGEwIHx8IHNhMSAhPT0gdGExKSB7IC8vIFRPRE8gc3IgIT09IHRyP1xuICAgICAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oMCwgMCwgdHIgKiBjb3ModGEwKSwgdHIgKiBzaW4odGEwKSk7XG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHRyLCB0YTAsIHRhMSk7XG4gICAgICB9XG4gICAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oMCwgMCwgc3gwLCBzeTApO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gICAgfVxuXG4gICAgcmliYm9uLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTEoK18pLCByaWJib24pIDogcmFkaXVzO1xuICAgIH07XG5cbiAgICByaWJib24uc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDExKCtfKSwgcmliYm9uKSA6IHN0YXJ0QW5nbGU7XG4gICAgfTtcblxuICAgIHJpYmJvbi5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMSgrXyksIHJpYmJvbikgOiBlbmRBbmdsZTtcbiAgICB9O1xuXG4gICAgcmliYm9uLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIHJpYmJvbikgOiBzb3VyY2U7XG4gICAgfTtcblxuICAgIHJpYmJvbi50YXJnZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCByaWJib24pIDogdGFyZ2V0O1xuICAgIH07XG5cbiAgICByaWJib24uY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCByaWJib24pIDogY29udGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJpYmJvbjtcbiAgfVxuXG4gIC8vIEFkZHMgZmxvYXRpbmcgcG9pbnQgbnVtYmVycyB3aXRoIHR3aWNlIHRoZSBub3JtYWwgcHJlY2lzaW9uLlxuICAvLyBSZWZlcmVuY2U6IEouIFIuIFNoZXdjaHVrLCBBZGFwdGl2ZSBQcmVjaXNpb24gRmxvYXRpbmctUG9pbnQgQXJpdGhtZXRpYyBhbmRcbiAgLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxuICAvLyAzMDXigJMzNjMgKDE5OTcpLlxuICAvLyBDb2RlIGFkYXB0ZWQgZnJvbSBHZW9ncmFwaGljTGliIGJ5IENoYXJsZXMgRi4gRi4gS2FybmV5LFxuICAvLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXG5cbiAgZnVuY3Rpb24gYWRkZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBBZGRlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFkZGVyKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIEFkZGVyLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQWRkZXIsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zID0gLy8gcm91bmRlZCB2YWx1ZVxuICAgICAgdGhpcy50ID0gMDsgLy8gZXhhY3QgZXJyb3JcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24oeSkge1xuICAgICAgYWRkJDEodGVtcCwgeSwgdGhpcy50KTtcbiAgICAgIGFkZCQxKHRoaXMsIHRlbXAucywgdGhpcy5zKTtcbiAgICAgIGlmICh0aGlzLnMpIHRoaXMudCArPSB0ZW1wLnQ7XG4gICAgICBlbHNlIHRoaXMucyA9IHRlbXAudDtcbiAgICB9LFxuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucztcbiAgICB9XG4gIH07XG5cbiAgdmFyIHRlbXAgPSBuZXcgQWRkZXI7XG5cbiAgZnVuY3Rpb24gYWRkJDEoYWRkZXIsIGEsIGIpIHtcbiAgICB2YXIgeCA9IGFkZGVyLnMgPSBhICsgYixcbiAgICAgICAgYnYgPSB4IC0gYSxcbiAgICAgICAgYXYgPSB4IC0gYnY7XG4gICAgYWRkZXIudCA9IChhIC0gYXYpICsgKGIgLSBidik7XG4gIH1cblxuICB2YXIgZXBzaWxvbiQ0ID0gMWUtNjtcbiAgdmFyIGVwc2lsb24yJDIgPSAxZS0xMjtcbiAgdmFyIHBpJDQgPSBNYXRoLlBJO1xuICB2YXIgaGFsZlBpJDMgPSBwaSQ0IC8gMjtcbiAgdmFyIHF1YXJ0ZXJQaSA9IHBpJDQgLyA0O1xuICB2YXIgdGF1JDQgPSBwaSQ0ICogMjtcblxuICB2YXIgZGVncmVlcyQxID0gMTgwIC8gcGkkNDtcbiAgdmFyIHJhZGlhbnMgPSBwaSQ0IC8gMTgwO1xuXG4gIHZhciBhYnMgPSBNYXRoLmFicztcbiAgdmFyIGF0YW4gPSBNYXRoLmF0YW47XG4gIHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG4gIHZhciBjb3MkMSA9IE1hdGguY29zO1xuICB2YXIgY2VpbCA9IE1hdGguY2VpbDtcbiAgdmFyIGV4cCA9IE1hdGguZXhwO1xuICB2YXIgbG9nJDEgPSBNYXRoLmxvZztcbiAgdmFyIHBvdyQxID0gTWF0aC5wb3c7XG4gIHZhciBzaW4kMSA9IE1hdGguc2luO1xuICB2YXIgc2lnbiQxID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xuICB2YXIgc3FydCQxID0gTWF0aC5zcXJ0O1xuICB2YXIgdGFuID0gTWF0aC50YW47XG5cbiAgZnVuY3Rpb24gYWNvcyh4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpJDQgOiBNYXRoLmFjb3MoeCk7XG4gIH1cblxuICBmdW5jdGlvbiBhc2luJDEoeCkge1xuICAgIHJldHVybiB4ID4gMSA/IGhhbGZQaSQzIDogeCA8IC0xID8gLWhhbGZQaSQzIDogTWF0aC5hc2luKHgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGF2ZXJzaW4oeCkge1xuICAgIHJldHVybiAoeCA9IHNpbiQxKHggLyAyKSkgKiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9vcCQyKCkge31cblxuICBmdW5jdGlvbiBzdHJlYW1HZW9tZXRyeShnZW9tZXRyeSwgc3RyZWFtKSB7XG4gICAgaWYgKGdlb21ldHJ5ICYmIHN0cmVhbUdlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKSkge1xuICAgICAgc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBzdHJlYW0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdHJlYW1PYmplY3RUeXBlID0ge1xuICAgIEZlYXR1cmU6IGZ1bmN0aW9uKGZlYXR1cmUsIHN0cmVhbSkge1xuICAgICAgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZS5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgICB9LFxuICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHN0cmVhbSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzdHJlYW1HZW9tZXRyeVR5cGUgPSB7XG4gICAgU3BoZXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgc3RyZWFtLnNwaGVyZSgpO1xuICAgIH0sXG4gICAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICBvYmplY3QgPSBvYmplY3QuY29vcmRpbmF0ZXM7XG4gICAgICBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgb2JqZWN0ID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgICB9LFxuICAgIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICBzdHJlYW1MaW5lKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtLCAwKTtcbiAgICB9LFxuICAgIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMCk7XG4gICAgfSxcbiAgICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgc3RyZWFtUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSk7XG4gICAgfSxcbiAgICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0pO1xuICAgIH0sXG4gICAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgc3RyZWFtKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RyZWFtTGluZShjb29yZGluYXRlcywgc3RyZWFtLCBjbG9zZWQpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB3aGlsZSAoKytpIDwgbikgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQoY29vcmRpbmF0ZVswXSwgY29vcmRpbmF0ZVsxXSwgY29vcmRpbmF0ZVsyXSk7XG4gICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXMsIHN0cmVhbSkge1xuICAgIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0sIDEpO1xuICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdHJlYW0ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBpZiAob2JqZWN0ICYmIHN0cmVhbU9iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpKSB7XG4gICAgICBzdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIHN0cmVhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdCwgc3RyZWFtKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXJlYVJpbmdTdW07XG5cbiAgdmFyIGFyZWFTdW07XG4gIHZhciBsYW1iZGEwMDtcbiAgdmFyIHBoaTAwO1xuICB2YXIgbGFtYmRhMDtcbiAgdmFyIGNvc1BoaTA7XG4gIHZhciBzaW5QaGkwO1xuICB2YXIgYXJlYVN0cmVhbSA9IHtcbiAgICBwb2ludDogbm9vcCQyLFxuICAgIGxpbmVTdGFydDogbm9vcCQyLFxuICAgIGxpbmVFbmQ6IG5vb3AkMixcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJlYVJpbmcgPSArYXJlYVJpbmdTdW07XG4gICAgICBhcmVhU3VtLmFkZChhcmVhUmluZyA8IDAgPyB0YXUkNCArIGFyZWFSaW5nIDogYXJlYVJpbmcpO1xuICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmxpbmVFbmQgPSB0aGlzLnBvaW50ID0gbm9vcCQyO1xuICAgIH0sXG4gICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICAgIGFyZWFTdW0uYWRkKHRhdSQ0KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgICBhcmVhUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gICAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3MkMShwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpKSwgc2luUGhpMCA9IHNpbiQxKHBoaSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgcGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaTsgLy8gaGFsZiB0aGUgYW5ndWxhciBkaXN0YW5jZSBmcm9tIHNvdXRoIHBvbGVcblxuICAgIC8vIFNwaGVyaWNhbCBleGNlc3MgRSBmb3IgYSBzcGhlcmljYWwgdHJpYW5nbGUgd2l0aCB2ZXJ0aWNlczogc291dGggcG9sZSxcbiAgICAvLyBwcmV2aW91cyBwb2ludCwgY3VycmVudCBwb2ludC4gIFVzZXMgYSBmb3JtdWxhIGRlcml2ZWQgZnJvbSBDYWdub2xp4oCZc1xuICAgIC8vIHRoZW9yZW0uICBTZWUgVG9kaHVudGVyLCBTcGhlcmljYWwgVHJpZy4gKDE4NzEpLCBTZWMuIDEwMywgRXEuICgyKS5cbiAgICB2YXIgZExhbWJkYSA9IGxhbWJkYSAtIGxhbWJkYTAsXG4gICAgICAgIHNkTGFtYmRhID0gZExhbWJkYSA+PSAwID8gMSA6IC0xLFxuICAgICAgICBhZExhbWJkYSA9IHNkTGFtYmRhICogZExhbWJkYSxcbiAgICAgICAgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgICAgc2luUGhpID0gc2luJDEocGhpKSxcbiAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGksXG4gICAgICAgIHUgPSBjb3NQaGkwICogY29zUGhpICsgayAqIGNvcyQxKGFkTGFtYmRhKSxcbiAgICAgICAgdiA9IGsgKiBzZExhbWJkYSAqIHNpbiQxKGFkTGFtYmRhKTtcbiAgICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xuXG4gICAgLy8gQWR2YW5jZSB0aGUgcHJldmlvdXMgcG9pbnRzLlxuICAgIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3NQaGksIHNpblBoaTAgPSBzaW5QaGk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhJDIob2JqZWN0KSB7XG4gICAgaWYgKGFyZWFTdW0pIGFyZWFTdW0ucmVzZXQoKTtcbiAgICBlbHNlIGFyZWFTdW0gPSBhZGRlcigpLCBhcmVhUmluZ1N1bSA9IGFkZGVyKCk7XG4gICAgc3RyZWFtKG9iamVjdCwgYXJlYVN0cmVhbSk7XG4gICAgcmV0dXJuIGFyZWFTdW0gKiAyO1xuICB9XG5cbiAgZnVuY3Rpb24gc3BoZXJpY2FsKGNhcnRlc2lhbikge1xuICAgIHJldHVybiBbYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pLCBhc2luJDEoY2FydGVzaWFuWzJdKV07XG4gIH1cblxuICBmdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gICAgdmFyIGxhbWJkYSA9IHNwaGVyaWNhbFswXSwgcGhpID0gc3BoZXJpY2FsWzFdLCBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICAgIHJldHVybiBbY29zUGhpICogY29zJDEobGFtYmRhKSwgY29zUGhpICogc2luJDEobGFtYmRhKSwgc2luJDEocGhpKV07XG4gIH1cblxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gIH1cblxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XG4gICAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbiAgfVxuXG4gIC8vIFRPRE8gcmV0dXJuIGFcbiAgZnVuY3Rpb24gY2FydGVzaWFuQWRkSW5QbGFjZShhLCBiKSB7XG4gICAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICAgIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG4gIH1cblxuICAvLyBUT0RPIHJldHVybiBkXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoZCkge1xuICAgIHZhciBsID0gc3FydCQxKGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0gKyBkWzJdICogZFsyXSk7XG4gICAgZFswXSAvPSBsLCBkWzFdIC89IGwsIGRbMl0gLz0gbDtcbiAgfVxuXG52YXIgICBsYW1iZGEwJDE7XG4gIHZhciBwaGkwO1xuICB2YXIgbGFtYmRhMTtcbiAgdmFyIHBoaTE7XG4gIHZhciBsYW1iZGEyO1xudmFyICAgbGFtYmRhMDAkMTtcbnZhciAgIHBoaTAwJDE7XG4gIHZhciBwMDtcbiAgdmFyIGRlbHRhU3VtO1xuICB2YXIgcmFuZ2VzO1xudmFyICAgcmFuZ2UkMTtcbiAgdmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgICBwb2ludDogYm91bmRzUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBib3VuZHNMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUmluZ1BvaW50O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzUmluZ0VuZDtcbiAgICAgIGRlbHRhU3VtLnJlc2V0KCk7XG4gICAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1BvaW50O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc0xpbmVTdGFydDtcbiAgICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICAgIGlmIChhcmVhUmluZ1N1bSA8IDApIGxhbWJkYTAkMSA9IC0obGFtYmRhMSA9IDE4MCksIHBoaTAgPSAtKHBoaTEgPSA5MCk7XG4gICAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24kNCkgcGhpMSA9IDkwO1xuICAgICAgZWxzZSBpZiAoZGVsdGFTdW0gPCAtZXBzaWxvbiQ0KSBwaGkwID0gLTkwO1xuICAgICAgcmFuZ2UkMVswXSA9IGxhbWJkYTAkMSwgcmFuZ2UkMVsxXSA9IGxhbWJkYTE7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGJvdW5kc1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgcmFuZ2VzLnB1c2gocmFuZ2UkMSA9IFtsYW1iZGEwJDEgPSBsYW1iZGEsIGxhbWJkYTEgPSBsYW1iZGFdKTtcbiAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gICAgaWYgKHAwKSB7XG4gICAgICB2YXIgbm9ybWFsID0gY2FydGVzaWFuQ3Jvc3MocDAsIHApLFxuICAgICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgICBpbmZsZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcbiAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoaW5mbGVjdGlvbik7XG4gICAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgICAgdmFyIGRlbHRhID0gbGFtYmRhIC0gbGFtYmRhMixcbiAgICAgICAgICBzaWduID0gZGVsdGEgPiAwID8gMSA6IC0xLFxuICAgICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyQxICogc2lnbixcbiAgICAgICAgICBwaGlpLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgICAgcGhpaSA9IGluZmxlY3Rpb25bMV0gKiBkZWdyZWVzJDE7XG4gICAgICAgIGlmIChwaGlpID4gcGhpMSkgcGhpMSA9IHBoaWk7XG4gICAgICB9IGVsc2UgaWYgKGxhbWJkYWkgPSAobGFtYmRhaSArIDM2MCkgJSAzNjAgLSAxODAsIGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXMkMTtcbiAgICAgICAgaWYgKHBoaWkgPCBwaGkwKSBwaGkwID0gcGhpaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICAgICAgICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgICAgIH1cbiAgICAgIGlmIChhbnRpbWVyaWRpYW4pIHtcbiAgICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTIpIHtcbiAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCQxLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhLCBsYW1iZGExKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTAkMSA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCQxKSB7XG4gICAgICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTAkMSkgbGFtYmRhMCQxID0gbGFtYmRhO1xuICAgICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGExKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGEyKSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCQxLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwJDEsIGxhbWJkYTEpKSBsYW1iZGEwJDEgPSBsYW1iZGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kc1BvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG4gICAgcDAgPSBwLCBsYW1iZGEyID0gbGFtYmRhO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzTGluZVN0YXJ0KCkge1xuICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5kc0xpbmVFbmQoKSB7XG4gICAgcmFuZ2UkMVswXSA9IGxhbWJkYTAkMSwgcmFuZ2UkMVsxXSA9IGxhbWJkYTE7XG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gICAgcDAgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgaWYgKHAwKSB7XG4gICAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyO1xuICAgICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhMDAkMSA9IGxhbWJkYSwgcGhpMDAkMSA9IHBoaTtcbiAgICB9XG4gICAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgbGluZVBvaW50KGxhbWJkYSwgcGhpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgICBib3VuZHNSaW5nUG9pbnQobGFtYmRhMDAkMSwgcGhpMDAkMSk7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kKCk7XG4gICAgaWYgKGFicyhkZWx0YVN1bSkgPiBlcHNpbG9uJDQpIGxhbWJkYTAkMSA9IC0obGFtYmRhMSA9IDE4MCk7XG4gICAgcmFuZ2UkMVswXSA9IGxhbWJkYTAkMSwgcmFuZ2UkMVsxXSA9IGxhbWJkYTE7XG4gICAgcDAgPSBudWxsO1xuICB9XG5cbiAgLy8gRmluZHMgdGhlIGxlZnQtcmlnaHQgZGlzdGFuY2UgYmV0d2VlbiB0d28gbG9uZ2l0dWRlcy5cbiAgLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbiAgLy8gdGhlIGRpc3RhbmNlIGJldHdlZW4gwrExODDCsCB0byBiZSAzNjDCsC5cbiAgZnVuY3Rpb24gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkge1xuICAgIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhbmdlQ29tcGFyZShhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFuZ2VDb250YWlucyhyYW5nZSwgeCkge1xuICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuZHMoZmVhdHVyZSkge1xuICAgIHZhciBpLCBuLCBhLCBiLCBtZXJnZWQsIGRlbHRhTWF4LCBkZWx0YTtcblxuICAgIGlmIChkZWx0YVN1bSkgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICBlbHNlIGRlbHRhU3VtID0gYWRkZXIoKTtcbiAgICBwaGkxID0gbGFtYmRhMSA9IC0obGFtYmRhMCQxID0gcGhpMCA9IEluZmluaXR5KTtcbiAgICByYW5nZXMgPSBbXTtcbiAgICBzdHJlYW0oZmVhdHVyZSwgYm91bmRzU3RyZWFtKTtcblxuICAgIC8vIEZpcnN0LCBzb3J0IHJhbmdlcyBieSB0aGVpciBtaW5pbXVtIGxvbmdpdHVkZXMuXG4gICAgaWYgKG4gPSByYW5nZXMubGVuZ3RoKSB7XG4gICAgICByYW5nZXMuc29ydChyYW5nZUNvbXBhcmUpO1xuXG4gICAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cbiAgICAgIGZvciAoaSA9IDEsIGEgPSByYW5nZXNbMF0sIG1lcmdlZCA9IFthXTsgaSA8IG47ICsraSkge1xuICAgICAgICBiID0gcmFuZ2VzW2ldO1xuICAgICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGFbMF0sIGJbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMV0gPSBiWzFdO1xuICAgICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXJnZWQucHVzaChhID0gYik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmluYWxseSwgZmluZCB0aGUgbGFyZ2VzdCBnYXAgYmV0d2VlbiB0aGUgbWVyZ2VkIHJhbmdlcy5cbiAgICAgIC8vIFRoZSBmaW5hbCBib3VuZGluZyBib3ggd2lsbCBiZSB0aGUgaW52ZXJzZSBvZiB0aGlzIGdhcC5cbiAgICAgIGZvciAoZGVsdGFNYXggPSAtSW5maW5pdHksIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl07IGkgPD0gbjsgYSA9IGIsICsraSkge1xuICAgICAgICBiID0gbWVyZ2VkW2ldO1xuICAgICAgICBpZiAoKGRlbHRhID0gYW5nbGUoYVsxXSwgYlswXSkpID4gZGVsdGFNYXgpIGRlbHRhTWF4ID0gZGVsdGEsIGxhbWJkYTAkMSA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJhbmdlcyA9IHJhbmdlJDEgPSBudWxsO1xuXG4gICAgcmV0dXJuIGxhbWJkYTAkMSA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgICAgPyBbW05hTiwgTmFOXSwgW05hTiwgTmFOXV1cbiAgICAgICAgOiBbW2xhbWJkYTAkMSwgcGhpMF0sIFtsYW1iZGExLCBwaGkxXV07XG4gIH1cblxuICB2YXIgVzA7XG4gIHZhciBXMTtcbiAgdmFyIFgwO1xuICB2YXIgWTA7XG4gIHZhciBaMDtcbiAgdmFyIFgxO1xuICB2YXIgWTE7XG4gIHZhciBaMTtcbiAgdmFyIFgyO1xuICB2YXIgWTI7XG4gIHZhciBaMjtcbnZhciAgIGxhbWJkYTAwJDI7XG52YXIgICBwaGkwMCQyO1xuICB2YXIgeDA7XG4gIHZhciB5MDtcbiAgdmFyIHowO1xuICAvLyBwcmV2aW91cyBwb2ludFxuXG4gIHZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgICBzcGhlcmU6IG5vb3AkMixcbiAgICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQ7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFyaXRobWV0aWMgbWVhbiBvZiBDYXJ0ZXNpYW4gdmVjdG9ycy5cbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKTtcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksIGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksIHNpbiQxKHBoaSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludENhcnRlc2lhbih4LCB5LCB6KSB7XG4gICAgKytXMDtcbiAgICBYMCArPSAoeCAtIFgwKSAvIFcwO1xuICAgIFkwICs9ICh5IC0gWTApIC8gVzA7XG4gICAgWjAgKz0gKHogLSBaMCkgLyBXMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnRGaXJzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gICAgeDAgPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpO1xuICAgIHkwID0gY29zUGhpICogc2luJDEobGFtYmRhKTtcbiAgICB6MCA9IHNpbiQxKHBoaSk7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludDtcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgIHggPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpLFxuICAgICAgICB5ID0gY29zUGhpICogc2luJDEobGFtYmRhKSxcbiAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgIHcgPSBhdGFuMihzcXJ0JDEoKHcgPSB5MCAqIHogLSB6MCAqIHkpICogdyArICh3ID0gejAgKiB4IC0geDAgKiB6KSAqIHcgKyAodyA9IHgwICogeSAtIHkwICogeCkgKiB3KSwgeDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6KTtcbiAgICBXMSArPSB3O1xuICAgIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xuICB9XG5cbiAgLy8gU2VlIEouIEUuIEJyb2NrLCBUaGUgSW5lcnRpYSBUZW5zb3IgZm9yIGEgU3BoZXJpY2FsIFRyaWFuZ2xlLFxuICAvLyBKLiBBcHBsaWVkIE1lY2hhbmljcyA0MiwgMjM5ICgxOTc1KS5cbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludEZpcnN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICAgIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYTAwJDIsIHBoaTAwJDIpO1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEwMCQyID0gbGFtYmRhLCBwaGkwMCQyID0gcGhpO1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50O1xuICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICAgIHgwID0gY29zUGhpICogY29zJDEobGFtYmRhKTtcbiAgICB5MCA9IGNvc1BoaSAqIHNpbiQxKGxhbWJkYSk7XG4gICAgejAgPSBzaW4kMShwaGkpO1xuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgICAgeCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksXG4gICAgICAgIHkgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLFxuICAgICAgICB6ID0gc2luJDEocGhpKSxcbiAgICAgICAgY3ggPSB5MCAqIHogLSB6MCAqIHksXG4gICAgICAgIGN5ID0gejAgKiB4IC0geDAgKiB6LFxuICAgICAgICBjeiA9IHgwICogeSAtIHkwICogeCxcbiAgICAgICAgbSA9IHNxcnQkMShjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLFxuICAgICAgICB1ID0geDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6LFxuICAgICAgICB2ID0gbSAmJiAtYWNvcyh1KSAvIG0sIC8vIGFyZWEgd2VpZ2h0XG4gICAgICAgIHcgPSBhdGFuMihtLCB1KTsgLy8gbGluZSB3ZWlnaHRcbiAgICBYMiArPSB2ICogY3g7XG4gICAgWTIgKz0gdiAqIGN5O1xuICAgIFoyICs9IHYgKiBjejtcbiAgICBXMSArPSB3O1xuICAgIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZCQxKG9iamVjdCkge1xuICAgIFcwID0gVzEgPVxuICAgIFgwID0gWTAgPSBaMCA9XG4gICAgWDEgPSBZMSA9IFoxID1cbiAgICBYMiA9IFkyID0gWjIgPSAwO1xuICAgIHN0cmVhbShvYmplY3QsIGNlbnRyb2lkU3RyZWFtKTtcblxuICAgIHZhciB4ID0gWDIsXG4gICAgICAgIHkgPSBZMixcbiAgICAgICAgeiA9IFoyLFxuICAgICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuXG4gICAgLy8gSWYgdGhlIGFyZWEtd2VpZ2h0ZWQgY2NlbnRyb2lkIGlzIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIGxlbmd0aC13ZWlnaHRlZCBjY2VudHJvaWQuXG4gICAgaWYgKG0gPCBlcHNpbG9uMiQyKSB7XG4gICAgICB4ID0gWDEsIHkgPSBZMSwgeiA9IFoxO1xuICAgICAgLy8gSWYgdGhlIGZlYXR1cmUgaGFzIHplcm8gbGVuZ3RoLCBmYWxsIGJhY2sgdG8gYXJpdGhtZXRpYyBtZWFuIG9mIHBvaW50IHZlY3RvcnMuXG4gICAgICBpZiAoVzEgPCBlcHNpbG9uJDQpIHggPSBYMCwgeSA9IFkwLCB6ID0gWjA7XG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgICAgLy8gSWYgdGhlIGZlYXR1cmUgc3RpbGwgaGFzIGFuIHVuZGVmaW5lZCBjY2VudHJvaWQsIHRoZW4gcmV0dXJuLlxuICAgICAgaWYgKG0gPCBlcHNpbG9uMiQyKSByZXR1cm4gW05hTiwgTmFOXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2F0YW4yKHksIHgpICogZGVncmVlcyQxLCBhc2luJDEoeiAvIHNxcnQkMShtKSkgKiBkZWdyZWVzJDFdO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMTIoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb21wb3NlKGEsIGIpIHtcblxuICAgIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xuICAgICAgcmV0dXJuIHggPSBhKHgsIHkpLCBiKHhbMF0sIHhbMV0pO1xuICAgIH1cblxuICAgIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29tcG9zZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xhbWJkYSA+IHBpJDQgPyBsYW1iZGEgLSB0YXUkNCA6IGxhbWJkYSA8IC1waSQ0ID8gbGFtYmRhICsgdGF1JDQgOiBsYW1iZGEsIHBoaV07XG4gIH1cblxuICByb3RhdGlvbklkZW50aXR5LmludmVydCA9IHJvdGF0aW9uSWRlbnRpdHk7XG5cbiAgZnVuY3Rpb24gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgICByZXR1cm4gKGRlbHRhTGFtYmRhICU9IHRhdSQ0KSA/IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gY29tcG9zZShyb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSksIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpKVxuICAgICAgOiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkpXG4gICAgICA6IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSlcbiAgICAgIDogcm90YXRpb25JZGVudGl0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICAgIHJldHVybiBsYW1iZGEgKz0gZGVsdGFMYW1iZGEsIFtsYW1iZGEgPiBwaSQ0ID8gbGFtYmRhIC0gdGF1JDQgOiBsYW1iZGEgPCAtcGkkNCA/IGxhbWJkYSArIHRhdSQ0IDogbGFtYmRhLCBwaGldO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICAgIHZhciByb3RhdGlvbiA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSk7XG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKC1kZWx0YUxhbWJkYSk7XG4gICAgcmV0dXJuIHJvdGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICAgIHZhciBjb3NEZWx0YVBoaSA9IGNvcyQxKGRlbHRhUGhpKSxcbiAgICAgICAgc2luRGVsdGFQaGkgPSBzaW4kMShkZWx0YVBoaSksXG4gICAgICAgIGNvc0RlbHRhR2FtbWEgPSBjb3MkMShkZWx0YUdhbW1hKSxcbiAgICAgICAgc2luRGVsdGFHYW1tYSA9IHNpbiQxKGRlbHRhR2FtbWEpO1xuXG4gICAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICAgIHggPSBjb3MkMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICAgIHkgPSBzaW4kMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICAgIHogPSBzaW4kMShwaGkpLFxuICAgICAgICAgIGsgPSB6ICogY29zRGVsdGFQaGkgKyB4ICogc2luRGVsdGFQaGk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSAtIGsgKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgLSB6ICogc2luRGVsdGFQaGkpLFxuICAgICAgICBhc2luJDEoayAqIGNvc0RlbHRhR2FtbWEgKyB5ICogc2luRGVsdGFHYW1tYSlcbiAgICAgIF07XG4gICAgfVxuXG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICAgIHggPSBjb3MkMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICAgIHkgPSBzaW4kMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICAgIHogPSBzaW4kMShwaGkpLFxuICAgICAgICAgIGsgPSB6ICogY29zRGVsdGFHYW1tYSAtIHkgKiBzaW5EZWx0YUdhbW1hO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgKyB6ICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpICsgayAqIHNpbkRlbHRhUGhpKSxcbiAgICAgICAgYXNpbiQxKGsgKiBjb3NEZWx0YVBoaSAtIHggKiBzaW5EZWx0YVBoaSlcbiAgICAgIF07XG4gICAgfTtcblxuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uKHJvdGF0ZSkge1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMocm90YXRlWzBdICogcmFkaWFucywgcm90YXRlWzFdICogcmFkaWFucywgcm90YXRlLmxlbmd0aCA+IDIgPyByb3RhdGVbMl0gKiByYWRpYW5zIDogMCk7XG5cbiAgICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG4gICAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzO1xuICAgIH1cblxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlLmludmVydChjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuXG4gIC8vIEdlbmVyYXRlcyBhIGNpcmNsZSBjZW50ZXJlZCBhdCBbMMKwLCAwwrBdLCB3aXRoIGEgZ2l2ZW4gcmFkaXVzIGFuZCBwcmVjaXNpb24uXG4gIGZ1bmN0aW9uIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgdDAsIHQxKSB7XG4gICAgaWYgKCFkZWx0YSkgcmV0dXJuO1xuICAgIHZhciBjb3NSYWRpdXMgPSBjb3MkMShyYWRpdXMpLFxuICAgICAgICBzaW5SYWRpdXMgPSBzaW4kMShyYWRpdXMpLFxuICAgICAgICBzdGVwID0gZGlyZWN0aW9uICogZGVsdGE7XG4gICAgaWYgKHQwID09IG51bGwpIHtcbiAgICAgIHQwID0gcmFkaXVzICsgZGlyZWN0aW9uICogdGF1JDQ7XG4gICAgICB0MSA9IHJhZGl1cyAtIHN0ZXAgLyAyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0MCA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQwKTtcbiAgICAgIHQxID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDEpO1xuICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgPyB0MCA8IHQxIDogdDAgPiB0MSkgdDAgKz0gZGlyZWN0aW9uICogdGF1JDQ7XG4gICAgfVxuICAgIGZvciAodmFyIHBvaW50LCB0ID0gdDA7IGRpcmVjdGlvbiA+IDAgPyB0ID4gdDEgOiB0IDwgdDE7IHQgLT0gc3RlcCkge1xuICAgICAgcG9pbnQgPSBzcGhlcmljYWwoW2Nvc1JhZGl1cywgLXNpblJhZGl1cyAqIGNvcyQxKHQpLCAtc2luUmFkaXVzICogc2luJDEodCldKTtcbiAgICAgIHN0cmVhbS5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIHNpZ25lZCBhbmdsZSBvZiBhIGNhcnRlc2lhbiBwb2ludCByZWxhdGl2ZSB0byBbY29zUmFkaXVzLCAwLCAwXS5cbiAgZnVuY3Rpb24gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgcG9pbnQpIHtcbiAgICBwb2ludCA9IGNhcnRlc2lhbihwb2ludCksIHBvaW50WzBdIC09IGNvc1JhZGl1cztcbiAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKHBvaW50KTtcbiAgICB2YXIgcmFkaXVzID0gYWNvcygtcG9pbnRbMV0pO1xuICAgIHJldHVybiAoKC1wb2ludFsyXSA8IDAgPyAtcmFkaXVzIDogcmFkaXVzKSArIHRhdSQ0IC0gZXBzaWxvbiQ0KSAlIHRhdSQ0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlJDEoKSB7XG4gICAgdmFyIGNlbnRlciA9IGNvbnN0YW50JDEyKFswLCAwXSksXG4gICAgICAgIHJhZGl1cyA9IGNvbnN0YW50JDEyKDkwKSxcbiAgICAgICAgcHJlY2lzaW9uID0gY29uc3RhbnQkMTIoNiksXG4gICAgICAgIHJpbmcsXG4gICAgICAgIHJvdGF0ZSxcbiAgICAgICAgc3RyZWFtID0ge3BvaW50OiBwb2ludH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgICB4WzBdICo9IGRlZ3JlZXMkMSwgeFsxXSAqPSBkZWdyZWVzJDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgICAgdmFyIGMgPSBjZW50ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICByID0gcmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zLFxuICAgICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XG4gICAgICByaW5nID0gW107XG4gICAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKC1jWzBdICogcmFkaWFucywgLWNbMV0gKiByYWRpYW5zLCAwKS5pbnZlcnQ7XG4gICAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcbiAgICAgIGMgPSB7dHlwZTogXCJQb2x5Z29uXCIsIGNvb3JkaW5hdGVzOiBbcmluZ119O1xuICAgICAgcmluZyA9IHJvdGF0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBjaXJjbGUuY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMihbK19bMF0sICtfWzFdXSksIGNpcmNsZSkgOiBjZW50ZXI7XG4gICAgfTtcblxuICAgIGNpcmNsZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEyKCtfKSwgY2lyY2xlKSA6IHJhZGl1cztcbiAgICB9O1xuXG4gICAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNpc2lvbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoK18pLCBjaXJjbGUpIDogcHJlY2lzaW9uO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2lyY2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcEJ1ZmZlcigpIHtcbiAgICB2YXIgbGluZXMgPSBbXSxcbiAgICAgICAgbGluZTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgbGluZS5wdXNoKFt4LCB5XSk7XG4gICAgICB9LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IG5vb3AkMixcbiAgICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGxpbmVzO1xuICAgICAgICBsaW5lcyA9IFtdO1xuICAgICAgICBsaW5lID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcExpbmUoYSwgYiwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICB0MCA9IDAsXG4gICAgICAgIHQxID0gMSxcbiAgICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICAgIHI7XG5cbiAgICByID0geDAgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geDEgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICByID0geTAgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geTEgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xuICAgIGlmICh0MSA8IDEpIGJbMF0gPSBheCArIHQxICogZHgsIGJbMV0gPSBheSArIHQxICogZHk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludEVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24kNCAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbiQ0O1xuICB9XG5cbiAgZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xuICAgIHRoaXMueCA9IHBvaW50O1xuICAgIHRoaXMueiA9IHBvaW50cztcbiAgICB0aGlzLm8gPSBvdGhlcjsgLy8gYW5vdGhlciBpbnRlcnNlY3Rpb25cbiAgICB0aGlzLmUgPSBlbnRyeTsgLy8gaXMgYW4gZW50cnk/XG4gICAgdGhpcy52ID0gZmFsc2U7IC8vIHZpc2l0ZWRcbiAgICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsOyAvLyBuZXh0ICYgcHJldmlvdXNcbiAgfVxuXG4gIC8vIEEgZ2VuZXJhbGl6ZWQgcG9seWdvbiBjbGlwcGluZyBhbGdvcml0aG06IGdpdmVuIGEgcG9seWdvbiB0aGF0IGhhcyBiZWVuIGN1dFxuICAvLyBpbnRvIGl0cyB2aXNpYmxlIGxpbmUgc2VnbWVudHMsIGFuZCByZWpvaW5zIHRoZSBzZWdtZW50cyBieSBpbnRlcnBvbGF0aW5nXG4gIC8vIGFsb25nIHRoZSBjbGlwIGVkZ2UuXG4gIGZ1bmN0aW9uIGNsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSkge1xuICAgIHZhciBzdWJqZWN0ID0gW10sXG4gICAgICAgIGNsaXAgPSBbXSxcbiAgICAgICAgaSxcbiAgICAgICAgbjtcblxuICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgICAgaWYgKChuID0gc2VnbWVudC5sZW5ndGggLSAxKSA8PSAwKSByZXR1cm47XG4gICAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl0sIHg7XG5cbiAgICAgIC8vIElmIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHMgb2YgYSBzZWdtZW50IGFyZSBjb2luY2lkZW50LCB0aGVuIHRyZWF0IGFzIGFcbiAgICAgIC8vIGNsb3NlZCByaW5nLiBUT0RPIGlmIGFsbCByaW5ncyBhcmUgY2xvc2VkLCB0aGVuIHRoZSB3aW5kaW5nIG9yZGVyIG9mIHRoZVxuICAgICAgLy8gZXh0ZXJpb3IgcmluZyBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIHNlZ21lbnQsIG51bGwsIHRydWUpKTtcbiAgICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBudWxsLCB4LCBmYWxzZSkpO1xuICAgICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSkpO1xuICAgICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIG51bGwsIHgsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblxuICAgIGNsaXAuc29ydChjb21wYXJlSW50ZXJzZWN0aW9uKTtcbiAgICBsaW5rJDEoc3ViamVjdCk7XG4gICAgbGluayQxKGNsaXApO1xuXG4gICAgZm9yIChpID0gMCwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBjbGlwW2ldLmUgPSBzdGFydEluc2lkZSA9ICFzdGFydEluc2lkZTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQgPSBzdWJqZWN0WzBdLFxuICAgICAgICBwb2ludHMsXG4gICAgICAgIHBvaW50O1xuXG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIC8vIEZpbmQgZmlyc3QgdW52aXNpdGVkIGludGVyc2VjdGlvbi5cbiAgICAgIHZhciBjdXJyZW50ID0gc3RhcnQsXG4gICAgICAgICAgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQudiA9IGN1cnJlbnQuby52ID0gdHJ1ZTtcbiAgICAgICAgaWYgKGN1cnJlbnQuZSkge1xuICAgICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBzdHJlYW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICAgIHBvaW50cyA9IGN1cnJlbnQucC56O1xuICAgICAgICAgICAgZm9yIChpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQucC54LCAtMSwgc3RyZWFtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGluayQxKGFycmF5KSB7XG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbixcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGEgPSBhcnJheVswXSxcbiAgICAgICAgYjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgICAgYi5wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XG4gICAgYi5wID0gYTtcbiAgfVxuXG4gIHZhciBjbGlwTWF4ID0gMWU5O1xuICB2YXIgY2xpcE1pbiA9IC1jbGlwTWF4O1xuICAvLyBUT0RPIFVzZSBkMy1wb2x5Z29u4oCZcyBwb2x5Z29uQ29udGFpbnMgaGVyZSBmb3IgdGhlIHJpbmcgY2hlY2s/XG4gIC8vIFRPRE8gRWxpbWluYXRlIGR1cGxpY2F0ZSBidWZmZXJpbmcgaW4gY2xpcEJ1ZmZlciBhbmQgcG9seWdvbi5wdXNoP1xuXG4gIGZ1bmN0aW9uIGNsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcblxuICAgIGZ1bmN0aW9uIHZpc2libGUoeCwgeSkge1xuICAgICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgICB2YXIgYSA9IDAsIGExID0gMDtcbiAgICAgIGlmIChmcm9tID09IG51bGxcbiAgICAgICAgICB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKVxuICAgICAgICAgIHx8IGNvbXBhcmVQb2ludChmcm9tLCB0bykgPCAwIF4gZGlyZWN0aW9uID4gMCkge1xuICAgICAgICBkbyBzdHJlYW0ucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgICAgd2hpbGUgKChhID0gKGEgKyBkaXJlY3Rpb24gKyA0KSAlIDQpICE9PSBhMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYWJzKHBbMF0gLSB4MCkgPCBlcHNpbG9uJDQgPyBkaXJlY3Rpb24gPiAwID8gMCA6IDNcbiAgICAgICAgICA6IGFicyhwWzBdIC0geDEpIDwgZXBzaWxvbiQ0ID8gZGlyZWN0aW9uID4gMCA/IDIgOiAxXG4gICAgICAgICAgOiBhYnMocFsxXSAtIHkwKSA8IGVwc2lsb24kNCA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxuICAgICAgICAgIDogZGlyZWN0aW9uID4gMCA/IDMgOiAyOyAvLyBhYnMocFsxXSAtIHkxKSA8IGVwc2lsb25cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBjb21wYXJlUG9pbnQoYS54LCBiLngpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVQb2ludChhLCBiKSB7XG4gICAgICB2YXIgY2EgPSBjb3JuZXIoYSwgMSksXG4gICAgICAgICAgY2IgPSBjb3JuZXIoYiwgMSk7XG4gICAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYlxuICAgICAgICAgIDogY2EgPT09IDAgPyBiWzFdIC0gYVsxXVxuICAgICAgICAgIDogY2EgPT09IDEgPyBhWzBdIC0gYlswXVxuICAgICAgICAgIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXVxuICAgICAgICAgIDogYlswXSAtIGFbMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgdmFyIGFjdGl2ZVN0cmVhbSA9IHN0cmVhbSxcbiAgICAgICAgICBidWZmZXJTdHJlYW0gPSBjbGlwQnVmZmVyKCksXG4gICAgICAgICAgc2VnbWVudHMsXG4gICAgICAgICAgcG9seWdvbixcbiAgICAgICAgICByaW5nLFxuICAgICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XG4gICAgICAgICAgeF8sIHlfLCB2XywgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgICBmaXJzdCxcbiAgICAgICAgICBjbGVhbjtcblxuICAgICAgdmFyIGNsaXBTdHJlYW0gPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogcG9seWdvblN0YXJ0LFxuICAgICAgICBwb2x5Z29uRW5kOiBwb2x5Z29uRW5kXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICAgIGlmICh2aXNpYmxlKHgsIHkpKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvbHlnb25JbnNpZGUoKSB7XG4gICAgICAgIHZhciB3aW5kaW5nID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZm9yICh2YXIgcmluZyA9IHBvbHlnb25baV0sIGogPSAxLCBtID0gcmluZy5sZW5ndGgsIHBvaW50ID0gcmluZ1swXSwgYTAsIGExLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgICBhMCA9IGIwLCBhMSA9IGIxLCBwb2ludCA9IHJpbmdbal0sIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07XG4gICAgICAgICAgICBpZiAoYTEgPD0geTEpIHsgaWYgKGIxID4geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpID4gKGIxIC0gYTEpICogKHgwIC0gYTApKSArK3dpbmRpbmc7IH1cbiAgICAgICAgICAgIGVsc2UgeyBpZiAoYjEgPD0geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpIDwgKGIxIC0gYTEpICogKHgwIC0gYTApKSAtLXdpbmRpbmc7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gd2luZGluZztcbiAgICAgIH1cblxuICAgICAgLy8gQnVmZmVyIGdlb21ldHJ5IHdpdGhpbiBhIHBvbHlnb24gYW5kIHRoZW4gY2xpcCBpdCBlbiBtYXNzZS5cbiAgICAgIGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkluc2lkZSgpLFxuICAgICAgICAgICAgY2xlYW5JbnNpZGUgPSBjbGVhbiAmJiBzdGFydEluc2lkZSxcbiAgICAgICAgICAgIHZpc2libGUgPSAoc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cykpLmxlbmd0aDtcbiAgICAgICAgaWYgKGNsZWFuSW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgaWYgKGNsZWFuSW5zaWRlKSB7XG4gICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzdHJlYW0pO1xuICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgIGNsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZlU3RyZWFtID0gc3RyZWFtLCBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICBjbGlwU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgICBpZiAocG9seWdvbikgcG9seWdvbi5wdXNoKHJpbmcgPSBbXSk7XG4gICAgICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgdl8gPSBmYWxzZTtcbiAgICAgICAgeF8gPSB5XyA9IE5hTjtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETyByYXRoZXIgdGhhbiBzcGVjaWFsLWNhc2UgcG9seWdvbnMsIHNpbXBseSBoYW5kbGUgdGhlbSBzZXBhcmF0ZWx5LlxuICAgICAgLy8gSWRlYWxseSwgY29pbmNpZGVudCBpbnRlcnNlY3Rpb24gcG9pbnRzIHNob3VsZCBiZSBqaXR0ZXJlZCB0byBhdm9pZFxuICAgICAgLy8gY2xpcHBpbmcgaXNzdWVzLlxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgICAgbGluZVBvaW50KHhfXywgeV9fKTtcbiAgICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJTdHJlYW0ucmVqb2luKCk7XG4gICAgICAgICAgc2VnbWVudHMucHVzaChidWZmZXJTdHJlYW0ucmVzdWx0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgICAgaWYgKHZfKSBhY3RpdmVTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lUG9pbnQoeCwgeSkge1xuICAgICAgICB2YXIgdiA9IHZpc2libGUoeCwgeSk7XG4gICAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goW3gsIHldKTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgeF9fID0geCwgeV9fID0geSwgdl9fID0gdjtcbiAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2ICYmIHZfKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYSA9IFt4XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHhfKSksIHlfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeV8pKV0sXG4gICAgICAgICAgICAgICAgYiA9IFt4ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeCkpLCB5ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeSkpXTtcbiAgICAgICAgICAgIGlmIChjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkpIHtcbiAgICAgICAgICAgICAgaWYgKCF2Xykge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYVswXSwgYVsxXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KGJbMF0sIGJbMV0pO1xuICAgICAgICAgICAgICBpZiAoIXYpIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHYpIHtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGlwU3RyZWFtO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbnQkMSgpIHtcbiAgICB2YXIgeDAgPSAwLFxuICAgICAgICB5MCA9IDAsXG4gICAgICAgIHgxID0gOTYwLFxuICAgICAgICB5MSA9IDUwMCxcbiAgICAgICAgY2FjaGUsXG4gICAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgICBjbGlwO1xuXG4gICAgcmV0dXJuIGNsaXAgPSB7XG4gICAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBjbGlwRXh0ZW50KHgwLCB5MCwgeDEsIHkxKShjYWNoZVN0cmVhbSA9IHN0cmVhbSk7XG4gICAgICB9LFxuICAgICAgZXh0ZW50OiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0sIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsLCBjbGlwKSA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgbGVuZ3RoU3VtO1xudmFyICAgbGFtYmRhMCQyO1xudmFyICAgc2luUGhpMCQxO1xudmFyICAgY29zUGhpMCQxO1xuICB2YXIgbGVuZ3RoU3RyZWFtID0ge1xuICAgIHNwaGVyZTogbm9vcCQyLFxuICAgIHBvaW50OiBub29wJDIsXG4gICAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogbm9vcCQyLFxuICAgIHBvbHlnb25TdGFydDogbm9vcCQyLFxuICAgIHBvbHlnb25FbmQ6IG5vb3AkMlxuICB9O1xuXG4gIGZ1bmN0aW9uIGxlbmd0aExpbmVTdGFydCgpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICAgIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlbmd0aExpbmVFbmQoKSB7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wJDI7XG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIGxhbWJkYTAkMiA9IGxhbWJkYSwgc2luUGhpMCQxID0gc2luJDEocGhpKSwgY29zUGhpMCQxID0gY29zJDEocGhpKTtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlbmd0aFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHZhciBzaW5QaGkgPSBzaW4kMShwaGkpLFxuICAgICAgICBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGEgLSBsYW1iZGEwJDIpLFxuICAgICAgICBjb3NEZWx0YSA9IGNvcyQxKGRlbHRhKSxcbiAgICAgICAgc2luRGVsdGEgPSBzaW4kMShkZWx0YSksXG4gICAgICAgIHggPSBjb3NQaGkgKiBzaW5EZWx0YSxcbiAgICAgICAgeSA9IGNvc1BoaTAkMSAqIHNpblBoaSAtIHNpblBoaTAkMSAqIGNvc1BoaSAqIGNvc0RlbHRhLFxuICAgICAgICB6ID0gc2luUGhpMCQxICogc2luUGhpICsgY29zUGhpMCQxICogY29zUGhpICogY29zRGVsdGE7XG4gICAgbGVuZ3RoU3VtLmFkZChhdGFuMihzcXJ0JDEoeCAqIHggKyB5ICogeSksIHopKTtcbiAgICBsYW1iZGEwJDIgPSBsYW1iZGEsIHNpblBoaTAkMSA9IHNpblBoaSwgY29zUGhpMCQxID0gY29zUGhpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoJDIob2JqZWN0KSB7XG4gICAgaWYgKGxlbmd0aFN1bSkgbGVuZ3RoU3VtLnJlc2V0KCk7XG4gICAgZWxzZSBsZW5ndGhTdW0gPSBhZGRlcigpO1xuICAgIHN0cmVhbShvYmplY3QsIGxlbmd0aFN0cmVhbSk7XG4gICAgcmV0dXJuICtsZW5ndGhTdW07XG4gIH1cblxuICB2YXIgY29vcmRpbmF0ZXMgPSBbbnVsbCwgbnVsbF07XG52YXIgICBvYmplY3QkMSA9IHt0eXBlOiBcIkxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzfTtcbiAgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICAgIGNvb3JkaW5hdGVzWzBdID0gYTtcbiAgICBjb29yZGluYXRlc1sxXSA9IGI7XG4gICAgcmV0dXJuIGxlbmd0aCQyKG9iamVjdCQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZVgoeTAsIHkxLCBkeSkge1xuICAgIHZhciB5ID0gcmFuZ2UoeTAsIHkxIC0gZXBzaWxvbiQ0LCBkeSkuY29uY2F0KHkxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4geS5tYXAoZnVuY3Rpb24oeSkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuICAgIHZhciB4ID0gcmFuZ2UoeDAsIHgxIC0gZXBzaWxvbiQ0LCBkeCkuY29uY2F0KHgxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oeSkgeyByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICB2YXIgeDEsIHgwLCBYMSwgWDAsXG4gICAgICAgIHkxLCB5MCwgWTEsIFkwLFxuICAgICAgICBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCxcbiAgICAgICAgeCwgeSwgWCwgWSxcbiAgICAgICAgcHJlY2lzaW9uID0gMi41O1xuXG4gICAgZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuICAgICAgcmV0dXJuIHt0eXBlOiBcIk11bHRpTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogbGluZXMoKX07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZXMoKSB7XG4gICAgICByZXR1cm4gcmFuZ2UoY2VpbChYMCAvIERYKSAqIERYLCBYMSwgRFgpLm1hcChYKVxuICAgICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSlcbiAgICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeDAgLyBkeCkgKiBkeCwgeDEsIGR4KS5maWx0ZXIoZnVuY3Rpb24oeCkgeyByZXR1cm4gYWJzKHggJSBEWCkgPiBlcHNpbG9uJDQ7IH0pLm1hcCh4KSlcbiAgICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoZnVuY3Rpb24oeSkgeyByZXR1cm4gYWJzKHkgJSBEWSkgPiBlcHNpbG9uJDQ7IH0pLm1hcCh5KSk7XG4gICAgfVxuXG4gICAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbGluZXMoKS5tYXAoZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHsgcmV0dXJuIHt0eXBlOiBcIkxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzfTsgfSk7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5vdXRsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIlBvbHlnb25cIixcbiAgICAgICAgY29vcmRpbmF0ZXM6IFtcbiAgICAgICAgICBYKFgwKS5jb25jYXQoXG4gICAgICAgICAgWShZMSkuc2xpY2UoMSksXG4gICAgICAgICAgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLFxuICAgICAgICAgIFkoWTApLnJldmVyc2UoKS5zbGljZSgxKSlcbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNaW5vcigpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNYWpvcihfKS5leHRlbnRNaW5vcihfKTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLmV4dGVudE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1tYMCwgWTBdLCBbWDEsIFkxXV07XG4gICAgICBYMCA9ICtfWzBdWzBdLCBYMSA9ICtfWzFdWzBdO1xuICAgICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcbiAgICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcbiAgICAgIGlmIChZMCA+IFkxKSBfID0gWTAsIFkwID0gWTEsIFkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5leHRlbnRNaW5vciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgICAgeDAgPSArX1swXVswXSwgeDEgPSArX1sxXVswXTtcbiAgICAgIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV07XG4gICAgICBpZiAoeDAgPiB4MSkgXyA9IHgwLCB4MCA9IHgxLCB4MSA9IF87XG4gICAgICBpZiAoeTAgPiB5MSkgXyA9IHkwLCB5MCA9IHkxLCB5MSA9IF87XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuc3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWlub3IoKTtcbiAgICAgIHJldHVybiBncmF0aWN1bGUuc3RlcE1ham9yKF8pLnN0ZXBNaW5vcihfKTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLnN0ZXBNYWpvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtEWCwgRFldO1xuICAgICAgRFggPSArX1swXSwgRFkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5zdGVwTWlub3IgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICAgIGR4ID0gK19bMF0sIGR5ID0gK19bMV07XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgcHJlY2lzaW9uID0gK187XG4gICAgICB4ID0gZ3JhdGljdWxlWCh5MCwgeTEsIDkwKTtcbiAgICAgIHkgPSBncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcbiAgICAgIFggPSBncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuICAgICAgWSA9IGdyYXRpY3VsZVkoWDAsIFgxLCBwcmVjaXNpb24pO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGdyYXRpY3VsZVxuICAgICAgICAuZXh0ZW50TWFqb3IoW1stMTgwLCAtOTAgKyBlcHNpbG9uJDRdLCBbMTgwLCA5MCAtIGVwc2lsb24kNF1dKVxuICAgICAgICAuZXh0ZW50TWlub3IoW1stMTgwLCAtODAgLSBlcHNpbG9uJDRdLCBbMTgwLCA4MCArIGVwc2lsb24kNF1dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlJDIoYSwgYikge1xuICAgIHZhciB4MCA9IGFbMF0gKiByYWRpYW5zLFxuICAgICAgICB5MCA9IGFbMV0gKiByYWRpYW5zLFxuICAgICAgICB4MSA9IGJbMF0gKiByYWRpYW5zLFxuICAgICAgICB5MSA9IGJbMV0gKiByYWRpYW5zLFxuICAgICAgICBjeTAgPSBjb3MkMSh5MCksXG4gICAgICAgIHN5MCA9IHNpbiQxKHkwKSxcbiAgICAgICAgY3kxID0gY29zJDEoeTEpLFxuICAgICAgICBzeTEgPSBzaW4kMSh5MSksXG4gICAgICAgIGt4MCA9IGN5MCAqIGNvcyQxKHgwKSxcbiAgICAgICAga3kwID0gY3kwICogc2luJDEoeDApLFxuICAgICAgICBreDEgPSBjeTEgKiBjb3MkMSh4MSksXG4gICAgICAgIGt5MSA9IGN5MSAqIHNpbiQxKHgxKSxcbiAgICAgICAgZCA9IDIgKiBhc2luJDEoc3FydCQxKGhhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogaGF2ZXJzaW4oeDEgLSB4MCkpKSxcbiAgICAgICAgayA9IHNpbiQxKGQpO1xuXG4gICAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBCID0gc2luJDEodCAqPSBkKSAvIGssXG4gICAgICAgICAgQSA9IHNpbiQxKGQgLSB0KSAvIGssXG4gICAgICAgICAgeCA9IEEgKiBreDAgKyBCICoga3gxLFxuICAgICAgICAgIHkgPSBBICoga3kwICsgQiAqIGt5MSxcbiAgICAgICAgICB6ID0gQSAqIHN5MCArIEIgKiBzeTE7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBhdGFuMih5LCB4KSAqIGRlZ3JlZXMkMSxcbiAgICAgICAgYXRhbjIoeiwgc3FydCQxKHggKiB4ICsgeSAqIHkpKSAqIGRlZ3JlZXMkMVxuICAgICAgXTtcbiAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW3gwICogZGVncmVlcyQxLCB5MCAqIGRlZ3JlZXMkMV07XG4gICAgfTtcblxuICAgIGludGVycG9sYXRlLmRpc3RhbmNlID0gZDtcblxuICAgIHJldHVybiBpbnRlcnBvbGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlkZW50aXR5JDcoeCkge1xuICAgIHJldHVybiB4O1xuICB9XG5cbnZhciAgIGFyZWFTdW0kMSA9IGFkZGVyKCk7XG52YXIgICBhcmVhUmluZ1N1bSQxID0gYWRkZXIoKTtcbiAgdmFyIHgwMDtcbiAgdmFyIHkwMDtcbnZhciAgIHgwJDE7XG52YXIgICB5MCQxO1xuICB2YXIgYXJlYVN0cmVhbSQxID0ge1xuICAgIHBvaW50OiBub29wJDIsXG4gICAgbGluZVN0YXJ0OiBub29wJDIsXG4gICAgbGluZUVuZDogbm9vcCQyLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBhcmVhU3RyZWFtJDEubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydCQxO1xuICAgICAgYXJlYVN0cmVhbSQxLmxpbmVFbmQgPSBhcmVhUmluZ0VuZCQxO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBhcmVhU3RyZWFtJDEubGluZVN0YXJ0ID0gYXJlYVN0cmVhbSQxLmxpbmVFbmQgPSBhcmVhU3RyZWFtJDEucG9pbnQgPSBub29wJDI7XG4gICAgICBhcmVhU3VtJDEuYWRkKGFicyhhcmVhUmluZ1N1bSQxKSk7XG4gICAgICBhcmVhUmluZ1N1bSQxLnJlc2V0KCk7XG4gICAgfSxcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZWEgPSBhcmVhU3VtJDEgLyAyO1xuICAgICAgYXJlYVN1bSQxLnJlc2V0KCk7XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYXJlYVJpbmdTdGFydCQxKCkge1xuICAgIGFyZWFTdHJlYW0kMS5wb2ludCA9IGFyZWFQb2ludEZpcnN0JDE7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUG9pbnRGaXJzdCQxKHgsIHkpIHtcbiAgICBhcmVhU3RyZWFtJDEucG9pbnQgPSBhcmVhUG9pbnQkMTtcbiAgICB4MDAgPSB4MCQxID0geCwgeTAwID0geTAkMSA9IHk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUG9pbnQkMSh4LCB5KSB7XG4gICAgYXJlYVJpbmdTdW0kMS5hZGQoeTAkMSAqIHggLSB4MCQxICogeSk7XG4gICAgeDAkMSA9IHgsIHkwJDEgPSB5O1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYVJpbmdFbmQkMSgpIHtcbiAgICBhcmVhUG9pbnQkMSh4MDAsIHkwMCk7XG4gIH1cblxudmFyICAgeDAkMiA9IEluZmluaXR5O1xudmFyICAgeTAkMiA9IHgwJDI7XG4gIHZhciB4MSA9IC14MCQyO1xuICB2YXIgeTEgPSB4MTtcbiAgdmFyIGJvdW5kc1N0cmVhbSQxID0ge1xuICAgIHBvaW50OiBib3VuZHNQb2ludCQxLFxuICAgIGxpbmVTdGFydDogbm9vcCQyLFxuICAgIGxpbmVFbmQ6IG5vb3AkMixcbiAgICBwb2x5Z29uU3RhcnQ6IG5vb3AkMixcbiAgICBwb2x5Z29uRW5kOiBub29wJDIsXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBib3VuZHMgPSBbW3gwJDIsIHkwJDJdLCBbeDEsIHkxXV07XG4gICAgICB4MSA9IHkxID0gLSh5MCQyID0geDAkMiA9IEluZmluaXR5KTtcbiAgICAgIHJldHVybiBib3VuZHM7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGJvdW5kc1BvaW50JDEoeCwgeSkge1xuICAgIGlmICh4IDwgeDAkMikgeDAkMiA9IHg7XG4gICAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICAgIGlmICh5IDwgeTAkMikgeTAkMiA9IHk7XG4gICAgaWYgKHkgPiB5MSkgeTEgPSB5O1xuICB9XG5cbnZhciAgIFgwJDEgPSAwO1xudmFyICAgWTAkMSA9IDA7XG52YXIgICBaMCQxID0gMDtcbnZhciAgIFgxJDEgPSAwO1xudmFyICAgWTEkMSA9IDA7XG52YXIgICBaMSQxID0gMDtcbnZhciAgIFgyJDEgPSAwO1xudmFyICAgWTIkMSA9IDA7XG52YXIgICBaMiQxID0gMDtcbnZhciAgIHgwMCQxO1xudmFyICAgeTAwJDE7XG52YXIgICB4MCQzO1xudmFyICAgeTAkMztcbiAgdmFyIGNlbnRyb2lkU3RyZWFtJDEgPSB7XG4gICAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQkMSxcbiAgICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0JDEsXG4gICAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kJDEsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGNlbnRyb2lkU3RyZWFtJDEubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQkMTtcbiAgICAgIGNlbnRyb2lkU3RyZWFtJDEubGluZUVuZCA9IGNlbnRyb2lkUmluZ0VuZCQxO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludCQxO1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydCQxO1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kJDE7XG4gICAgfSxcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNlbnRyb2lkID0gWjIkMSA/IFtYMiQxIC8gWjIkMSwgWTIkMSAvIFoyJDFdXG4gICAgICAgICAgOiBaMSQxID8gW1gxJDEgLyBaMSQxLCBZMSQxIC8gWjEkMV1cbiAgICAgICAgICA6IFowJDEgPyBbWDAkMSAvIFowJDEsIFkwJDEgLyBaMCQxXVxuICAgICAgICAgIDogW05hTiwgTmFOXTtcbiAgICAgIFgwJDEgPSBZMCQxID0gWjAkMSA9XG4gICAgICBYMSQxID0gWTEkMSA9IFoxJDEgPVxuICAgICAgWDIkMSA9IFkyJDEgPSBaMiQxID0gMDtcbiAgICAgIHJldHVybiBjZW50cm9pZDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludCQxKHgsIHkpIHtcbiAgICBYMCQxICs9IHg7XG4gICAgWTAkMSArPSB5O1xuICAgICsrWjAkMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0JDEoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdExpbmU7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50Rmlyc3RMaW5lKHgsIHkpIHtcbiAgICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludExpbmU7XG4gICAgY2VudHJvaWRQb2ludCQxKHgwJDMgPSB4LCB5MCQzID0geSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50TGluZSh4LCB5KSB7XG4gICAgdmFyIGR4ID0geCAtIHgwJDMsIGR5ID0geSAtIHkwJDMsIHogPSBzcXJ0JDEoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIFgxJDEgKz0geiAqICh4MCQzICsgeCkgLyAyO1xuICAgIFkxJDEgKz0geiAqICh5MCQzICsgeSkgLyAyO1xuICAgIFoxJDEgKz0gejtcbiAgICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCQxKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50JDE7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCQxKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RSaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kJDEoKSB7XG4gICAgY2VudHJvaWRQb2ludFJpbmcoeDAwJDEsIHkwMCQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50UmluZztcbiAgICBjZW50cm9pZFBvaW50JDEoeDAwJDEgPSB4MCQzID0geCwgeTAwJDEgPSB5MCQzID0geSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50UmluZyh4LCB5KSB7XG4gICAgdmFyIGR4ID0geCAtIHgwJDMsXG4gICAgICAgIGR5ID0geSAtIHkwJDMsXG4gICAgICAgIHogPSBzcXJ0JDEoZHggKiBkeCArIGR5ICogZHkpO1xuXG4gICAgWDEkMSArPSB6ICogKHgwJDMgKyB4KSAvIDI7XG4gICAgWTEkMSArPSB6ICogKHkwJDMgKyB5KSAvIDI7XG4gICAgWjEkMSArPSB6O1xuXG4gICAgeiA9IHkwJDMgKiB4IC0geDAkMyAqIHk7XG4gICAgWDIkMSArPSB6ICogKHgwJDMgKyB4KTtcbiAgICBZMiQxICs9IHogKiAoeTAkMyArIHkpO1xuICAgIFoyJDEgKz0geiAqIDM7XG4gICAgY2VudHJvaWRQb2ludCQxKHgwJDMgPSB4LCB5MCQzID0geSk7XG4gIH1cblxuICBmdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gICAgdmFyIHBvaW50UmFkaXVzID0gNC41O1xuXG4gICAgdmFyIHN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcblxuICAgICAgLy8gV2hpbGUgaW5zaWRlIGEgbGluZSwgb3ZlcnJpZGUgcG9pbnQgdG8gbW92ZVRvIHRoZW4gbGluZVRvLlxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lU3RhcnQ7IH0sXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuXG4gICAgICAvLyBXaGlsZSBpbnNpZGUgYSBwb2x5Z29uLCBvdmVycmlkZSBsaW5lRW5kIHRvIGNsb3NlUGF0aC5cbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHN0cmVhbS5saW5lRW5kID0gbGluZUVuZFBvbHlnb247IH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kOyBzdHJlYW0ucG9pbnQgPSBwb2ludDsgfSxcblxuICAgICAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcG9pbnRSYWRpdXMgPSBfO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSxcblxuICAgICAgcmVzdWx0OiBub29wJDJcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oeCArIHBvaW50UmFkaXVzLCB5KTtcbiAgICAgIGNvbnRleHQuYXJjKHgsIHksIHBvaW50UmFkaXVzLCAwLCB0YXUkNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lU3RhcnQoeCwgeSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lKHgsIHkpIHtcbiAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmVhbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFBhdGhTdHJpbmcoKSB7XG4gICAgdmFyIHBvaW50Q2lyY2xlID0gY2lyY2xlJDIoNC41KSxcbiAgICAgICAgc3RyaW5nID0gW107XG5cbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kUG9seWdvbjtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIH0sXG4gICAgICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgICAgICBwb2ludENpcmNsZSA9IGNpcmNsZSQyKF8pO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSxcbiAgICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHN0cmluZy5qb2luKFwiXCIpO1xuICAgICAgICAgIHN0cmluZyA9IFtdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCBwb2ludENpcmNsZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lU3RhcnQoeCwgeSkge1xuICAgICAgc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgc3RyaW5nLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmVTdGFydDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZFBvbHlnb24oKSB7XG4gICAgICBzdHJpbmcucHVzaChcIlpcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmVhbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNpcmNsZSQyKHJhZGl1cykge1xuICAgIHJldHVybiBcIm0wLFwiICsgcmFkaXVzXG4gICAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1c1xuICAgICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgMiAqIHJhZGl1c1xuICAgICAgICArIFwielwiO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5kZXgkMygpIHtcbiAgICB2YXIgcG9pbnRSYWRpdXMgPSA0LjUsXG4gICAgICAgIHByb2plY3Rpb24sXG4gICAgICAgIHByb2plY3Rpb25TdHJlYW0sXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNvbnRleHRTdHJlYW07XG5cbiAgICBmdW5jdGlvbiBwYXRoKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK3BvaW50UmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGNvbnRleHRTdHJlYW0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICAgIH1cblxuICAgIHBhdGguYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShhcmVhU3RyZWFtJDEpKTtcbiAgICAgIHJldHVybiBhcmVhU3RyZWFtJDEucmVzdWx0KCk7XG4gICAgfTtcblxuICAgIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGJvdW5kc1N0cmVhbSQxKSk7XG4gICAgICByZXR1cm4gYm91bmRzU3RyZWFtJDEucmVzdWx0KCk7XG4gICAgfTtcblxuICAgIHBhdGguY2VudHJvaWQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY2VudHJvaWRTdHJlYW0kMSkpO1xuICAgICAgcmV0dXJuIGNlbnRyb2lkU3RyZWFtJDEucmVzdWx0KCk7XG4gICAgfTtcblxuICAgIHBhdGgucHJvamVjdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3Rpb25TdHJlYW0gPSAocHJvamVjdGlvbiA9IF8pID09IG51bGwgPyBpZGVudGl0eSQ3IDogXy5zdHJlYW0sIHBhdGgpIDogcHJvamVjdGlvbjtcbiAgICB9O1xuXG4gICAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICAgIGNvbnRleHRTdHJlYW0gPSAoY29udGV4dCA9IF8pID09IG51bGwgPyBuZXcgUGF0aFN0cmluZyA6IG5ldyBQYXRoQ29udGV4dChfKTtcbiAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cyhwb2ludFJhZGl1cyk7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuXG4gICAgcGF0aC5wb2ludFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuICAgICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfTtcblxuICAgIHJldHVybiBwYXRoLnByb2plY3Rpb24obnVsbCkuY29udGV4dChudWxsKTtcbiAgfVxuXG4gIHZhciBzdW0kMiA9IGFkZGVyKCk7XG5cbiAgZnVuY3Rpb24gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHBvaW50KSB7XG4gICAgdmFyIGxhbWJkYSA9IHBvaW50WzBdLFxuICAgICAgICBwaGkgPSBwb2ludFsxXSxcbiAgICAgICAgbm9ybWFsID0gW3NpbiQxKGxhbWJkYSksIC1jb3MkMShsYW1iZGEpLCAwXSxcbiAgICAgICAgYW5nbGUgPSAwLFxuICAgICAgICB3aW5kaW5nID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgICAgdmFyIHJpbmcsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgICBsYW1iZGEwID0gcG9pbnQwWzBdLFxuICAgICAgICAgIHBoaTAgPSBwb2ludDBbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTAgPSBzaW4kMShwaGkwKSxcbiAgICAgICAgICBjb3NQaGkwID0gY29zJDEocGhpMCk7XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXG4gICAgICAgICAgICBsYW1iZGExID0gcG9pbnQxWzBdLFxuICAgICAgICAgICAgcGhpMSA9IHBvaW50MVsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgICAgICBzaW5QaGkxID0gc2luJDEocGhpMSksXG4gICAgICAgICAgICBjb3NQaGkxID0gY29zJDEocGhpMSksXG4gICAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgICAgc2lnbiA9IGRlbHRhID49IDAgPyAxIDogLTEsXG4gICAgICAgICAgICBhYnNEZWx0YSA9IHNpZ24gKiBkZWx0YSxcbiAgICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGkkNCxcbiAgICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcblxuICAgICAgICBzdW0kMi5hZGQoYXRhbjIoayAqIHNpZ24gKiBzaW4kMShhYnNEZWx0YSksIGNvc1BoaTAgKiBjb3NQaGkxICsgayAqIGNvcyQxKGFic0RlbHRhKSkpO1xuICAgICAgICBhbmdsZSArPSBhbnRpbWVyaWRpYW4gPyBkZWx0YSArIHNpZ24gKiB0YXUkNCA6IGRlbHRhO1xuXG4gICAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgICAvLyBhbmQgYXJlIHRoZSBsYXRpdHVkZXMgc21hbGxlciB0aGFuIHRoZSBwYXJhbGxlbCAocGhpKT9cbiAgICAgICAgaWYgKGFudGltZXJpZGlhbiBeIGxhbWJkYTAgPj0gbGFtYmRhIF4gbGFtYmRhMSA+PSBsYW1iZGEpIHtcbiAgICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGFyYyk7XG4gICAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKG5vcm1hbCwgYXJjKTtcbiAgICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgICAgdmFyIHBoaUFyYyA9IChhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gLTEgOiAxKSAqIGFzaW4kMShpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgICB3aW5kaW5nICs9IGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAxIDogLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAgIC8vXG4gICAgLy8gSXQgaXMgaW5zaWRlIGlmOlxuICAgIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgICAvLyAqIHRoZSBwb2x5Z29uIGRvZXMgbm90IChjdW11bGF0aXZlbHkpIHdpbmQgYXJvdW5kIGl0LCBidXQgaGFzIGEgbmVnYXRpdmVcbiAgICAvLyAgIChjb3VudGVyLWNsb2Nrd2lzZSkgYXJlYS5cbiAgICAvL1xuICAgIC8vIFNlY29uZCwgY291bnQgdGhlIChzaWduZWQpIG51bWJlciBvZiB0aW1lcyBhIHNlZ21lbnQgY3Jvc3NlcyBhIGxhbWJkYVxuICAgIC8vIGZyb20gdGhlIHBvaW50IHRvIHRoZSBTb3V0aCBwb2xlLiAgSWYgaXQgaXMgemVybywgdGhlbiB0aGUgcG9pbnQgaXMgdGhlXG4gICAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gICAgdmFyIGNvbnRhaW5zID0gKGFuZ2xlIDwgLWVwc2lsb24kNCB8fCBhbmdsZSA8IGVwc2lsb24kNCAmJiBzdW0kMiA8IC1lcHNpbG9uJDQpIF4gKHdpbmRpbmcgJiAxKTtcbiAgICBzdW0kMi5yZXNldCgpO1xuICAgIHJldHVybiBjb250YWlucztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXAocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHN0YXJ0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHJvdGF0ZSwgc2luaykge1xuICAgICAgdmFyIGxpbmUgPSBjbGlwTGluZShzaW5rKSxcbiAgICAgICAgICByb3RhdGVkU3RhcnQgPSByb3RhdGUuaW52ZXJ0KHN0YXJ0WzBdLCBzdGFydFsxXSksXG4gICAgICAgICAgcmluZ0J1ZmZlciA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgICByaW5nU2luayA9IGNsaXBMaW5lKHJpbmdCdWZmZXIpLFxuICAgICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgICAgcG9seWdvbixcbiAgICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgICByaW5nO1xuXG4gICAgICB2YXIgY2xpcCA9IHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICAgIGNsaXAubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICAgIGNsaXAubGluZUVuZCA9IHJpbmdFbmQ7XG4gICAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgICBwb2x5Z29uID0gW107XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IGxpbmVTdGFydDtcbiAgICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICAgIHNlZ21lbnRzID0gbWVyZ2Uoc2VnbWVudHMpO1xuICAgICAgICAgIHZhciBzdGFydEluc2lkZSA9IHBvbHlnb25Db250YWlucyhwb2x5Z29uLCByb3RhdGVkU3RhcnQpO1xuICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRJbnNpZGUpIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2luay5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBwb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xuICAgICAgICBpZiAocG9pbnRWaXNpYmxlKGxhbWJkYSA9IHBvaW50WzBdLCBwaGkgPSBwb2ludFsxXSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb2ludExpbmUobGFtYmRhLCBwaGkpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKGxhbWJkYSwgcGhpKTtcbiAgICAgICAgbGluZS5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG4gICAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgICAgbGluZS5saW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgICByaW5nLnB1c2goW2xhbWJkYSwgcGhpXSk7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZShsYW1iZGEsIHBoaSk7XG4gICAgICAgIHJpbmdTaW5rLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgICAgcmluZ1NpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgIHJpbmcgPSBbXTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuICAgICAgICByaW5nU2luay5saW5lRW5kKCk7XG5cbiAgICAgICAgdmFyIGNsZWFuID0gcmluZ1NpbmsuY2xlYW4oKSxcbiAgICAgICAgICAgIHJpbmdTZWdtZW50cyA9IHJpbmdCdWZmZXIucmVzdWx0KCksXG4gICAgICAgICAgICBpLCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCwgbSxcbiAgICAgICAgICAgIHNlZ21lbnQsXG4gICAgICAgICAgICBwb2ludDtcblxuICAgICAgICByaW5nLnBvcCgpO1xuICAgICAgICBwb2x5Z29uLnB1c2gocmluZyk7XG4gICAgICAgIHJpbmcgPSBudWxsO1xuXG4gICAgICAgIGlmICghbikgcmV0dXJuO1xuXG4gICAgICAgIC8vIE5vIGludGVyc2VjdGlvbnMuXG4gICAgICAgIGlmIChjbGVhbiAmIDEpIHtcbiAgICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICAgIGlmICgobSA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPiAwKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc2luay5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXG4gICAgICAgIC8vIFRPRE8gcmV1c2UgcmluZ0J1ZmZlci5yZWpvaW4oKT9cbiAgICAgICAgaWYgKG4gPiAxICYmIGNsZWFuICYgMikgcmluZ1NlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLnBvcCgpLmNvbmNhdChyaW5nU2VnbWVudHMuc2hpZnQoKSkpO1xuXG4gICAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcih2YWxpZFNlZ21lbnQpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsaXA7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkU2VnbWVudChzZWdtZW50KSB7XG4gICAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbiAgfVxuXG4gIC8vIEludGVyc2VjdGlvbnMgYXJlIHNvcnRlZCBhbG9uZyB0aGUgY2xpcCBlZGdlLiBGb3IgYm90aCBhbnRpbWVyaWRpYW4gY3V0dGluZ1xuICAvLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG4gIGZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmUGkkMyAtIGVwc2lsb24kNCA6IGhhbGZQaSQzIC0gYVsxXSlcbiAgICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpJDMgLSBlcHNpbG9uJDQgOiBoYWxmUGkkMyAtIGJbMV0pO1xuICB9XG5cbiAgdmFyIGNsaXBBbnRpbWVyaWRpYW4gPSBjbGlwKFxuICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBjbGlwQW50aW1lcmlkaWFuTGluZSxcbiAgICBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsXG4gICAgWy1waSQ0LCAtaGFsZlBpJDNdXG4gICk7XG5cbiAgLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlczogMCAtIHRoZXJlIHdlcmVcbiAgLy8gaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBubyBpbnRlcnNlY3Rpb25zOyAyIC0gdGhlcmUgd2VyZVxuICAvLyBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkxpbmUoc3RyZWFtKSB7XG4gICAgdmFyIGxhbWJkYTAgPSBOYU4sXG4gICAgICAgIHBoaTAgPSBOYU4sXG4gICAgICAgIHNpZ24wID0gTmFOLFxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGExLCBwaGkxKSB7XG4gICAgICAgIHZhciBzaWduMSA9IGxhbWJkYTEgPiAwID8gcGkkNCA6IC1waSQ0LFxuICAgICAgICAgICAgZGVsdGEgPSBhYnMobGFtYmRhMSAtIGxhbWJkYTApO1xuICAgICAgICBpZiAoYWJzKGRlbHRhIC0gcGkkNCkgPCBlcHNpbG9uJDQpIHsgLy8gbGluZSBjcm9zc2VzIGEgcG9sZVxuICAgICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwLCBwaGkwID0gKHBoaTAgKyBwaGkxKSAvIDIgPiAwID8gaGFsZlBpJDMgOiAtaGFsZlBpJDMpO1xuICAgICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMSwgcGhpMCk7XG4gICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSQ0KSB7IC8vIGxpbmUgY3Jvc3NlcyBhbnRpbWVyaWRpYW5cbiAgICAgICAgICBpZiAoYWJzKGxhbWJkYTAgLSBzaWduMCkgPCBlcHNpbG9uJDQpIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uJDQ7IC8vIGhhbmRsZSBkZWdlbmVyYWNpZXNcbiAgICAgICAgICBpZiAoYWJzKGxhbWJkYTEgLSBzaWduMSkgPCBlcHNpbG9uJDQpIGxhbWJkYTEgLT0gc2lnbjEgKiBlcHNpbG9uJDQ7XG4gICAgICAgICAgcGhpMCA9IGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSk7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgICAgc2lnbjAgPSBzaWduMTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgbGFtYmRhMCA9IHBoaTAgPSBOYU47XG4gICAgICB9LFxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMiAtIGNsZWFuOyAvLyBpZiBpbnRlcnNlY3Rpb25zLCByZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gICAgdmFyIGNvc1BoaTAsXG4gICAgICAgIGNvc1BoaTEsXG4gICAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luJDEobGFtYmRhMCAtIGxhbWJkYTEpO1xuICAgIHJldHVybiBhYnMoc2luTGFtYmRhMExhbWJkYTEpID4gZXBzaWxvbiQ0XG4gICAgICAgID8gYXRhbigoc2luJDEocGhpMCkgKiAoY29zUGhpMSA9IGNvcyQxKHBoaTEpKSAqIHNpbiQxKGxhbWJkYTEpXG4gICAgICAgICAgICAtIHNpbiQxKHBoaTEpICogKGNvc1BoaTAgPSBjb3MkMShwaGkwKSkgKiBzaW4kMShsYW1iZGEwKSlcbiAgICAgICAgICAgIC8gKGNvc1BoaTAgKiBjb3NQaGkxICogc2luTGFtYmRhMExhbWJkYTEpKVxuICAgICAgICA6IChwaGkwICsgcGhpMSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIHZhciBwaGk7XG4gICAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgICAgcGhpID0gZGlyZWN0aW9uICogaGFsZlBpJDM7XG4gICAgICBzdHJlYW0ucG9pbnQoLXBpJDQsIHBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludChwaSQ0LCBwaGkpO1xuICAgICAgc3RyZWFtLnBvaW50KHBpJDQsIDApO1xuICAgICAgc3RyZWFtLnBvaW50KHBpJDQsIC1waGkpO1xuICAgICAgc3RyZWFtLnBvaW50KDAsIC1waGkpO1xuICAgICAgc3RyZWFtLnBvaW50KC1waSQ0LCAtcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkNCwgMCk7XG4gICAgICBzdHJlYW0ucG9pbnQoLXBpJDQsIHBoaSk7XG4gICAgfSBlbHNlIGlmIChhYnMoZnJvbVswXSAtIHRvWzBdKSA+IGVwc2lsb24kNCkge1xuICAgICAgdmFyIGxhbWJkYSA9IGZyb21bMF0gPCB0b1swXSA/IHBpJDQgOiAtcGkkNDtcbiAgICAgIHBoaSA9IGRpcmVjdGlvbiAqIGxhbWJkYSAvIDI7XG4gICAgICBzdHJlYW0ucG9pbnQoLWxhbWJkYSwgcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xpcENpcmNsZShyYWRpdXMsIGRlbHRhKSB7XG4gICAgdmFyIGNyID0gY29zJDEocmFkaXVzKSxcbiAgICAgICAgc21hbGxSYWRpdXMgPSBjciA+IDAsXG4gICAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbiQ0OyAvLyBUT0RPIG9wdGltaXNlIGZvciB0aGlzIGNvbW1vbiBjYXNlXG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgZnJvbSwgdG8pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpc2libGUobGFtYmRhLCBwaGkpIHtcbiAgICAgIHJldHVybiBjb3MkMShsYW1iZGEpICogY29zJDEocGhpKSA+IGNyO1xuICAgIH1cblxuICAgIC8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXMgdXNlZCBmb3IgcG9seWdvblxuICAgIC8vIGNsaXBwaW5nOiAwIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vXG4gICAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gICAgLy8gc2hvdWxkIGJlIHJlam9pbmVkLlxuICAgIGZ1bmN0aW9uIGNsaXBMaW5lKHN0cmVhbSkge1xuICAgICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgICBjMCwgLy8gY29kZSBmb3IgcHJldmlvdXMgcG9pbnRcbiAgICAgICAgICB2MCwgLy8gdmlzaWJpbGl0eSBvZiBwcmV2aW91cyBwb2ludFxuICAgICAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgICAgIGNsZWFuOyAvLyBubyBpbnRlcnNlY3Rpb25zXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHYwMCA9IHYwID0gZmFsc2U7XG4gICAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgICB9LFxuICAgICAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICAgICAgICB2YXIgcG9pbnQxID0gW2xhbWJkYSwgcGhpXSxcbiAgICAgICAgICAgICAgcG9pbnQyLFxuICAgICAgICAgICAgICB2ID0gdmlzaWJsZShsYW1iZGEsIHBoaSksXG4gICAgICAgICAgICAgIGMgPSBzbWFsbFJhZGl1c1xuICAgICAgICAgICAgICAgID8gdiA/IDAgOiBjb2RlKGxhbWJkYSwgcGhpKVxuICAgICAgICAgICAgICAgIDogdiA/IGNvZGUobGFtYmRhICsgKGxhbWJkYSA8IDAgPyBwaSQ0IDogLXBpJDQpLCBwaGkpIDogMDtcbiAgICAgICAgICBpZiAoIXBvaW50MCAmJiAodjAwID0gdjAgPSB2KSkgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIC8vIEhhbmRsZSBkZWdlbmVyYWNpZXMuXG4gICAgICAgICAgLy8gVE9ETyBpZ25vcmUgaWYgbm90IGNsaXBwaW5nIHBvbHlnb25zLlxuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIGlmIChwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fCBwb2ludEVxdWFsKHBvaW50MSwgcG9pbnQyKSkge1xuICAgICAgICAgICAgICBwb2ludDFbMF0gKz0gZXBzaWxvbiQ0O1xuICAgICAgICAgICAgICBwb2ludDFbMV0gKz0gZXBzaWxvbiQ0O1xuICAgICAgICAgICAgICB2ID0gdmlzaWJsZShwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgLy8gb3V0c2lkZSBnb2luZyBpblxuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBpbnNpZGUgZ29pbmcgb3V0XG4gICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNvZGVzIGZvciB0d28gcG9pbnRzIGFyZSBkaWZmZXJlbnQsIG9yIGFyZSBib3RoIHplcm8sXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgdGhpcyBzZWdtZW50IGludGVyc2VjdHMgd2l0aCB0aGUgc21hbGwgY2lyY2xlLlxuICAgICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2ICYmICghcG9pbnQwIHx8ICFwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh2MCkgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICBwb2ludDAgPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICAvLyBSZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgaWYgdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIGFuZCB0aGUgZmlyc3RcbiAgICAgICAgLy8gYW5kIGxhc3QgcG9pbnRzIHdlcmUgdmlzaWJsZS5cbiAgICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjbGVhbiB8ICgodjAwICYmIHYwKSA8PCAxKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJbnRlcnNlY3RzIHRoZSBncmVhdCBjaXJjbGUgYmV0d2VlbiBhIGFuZCBiIHdpdGggdGhlIGNsaXAgY2lyY2xlLlxuICAgIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICAgIHZhciBwYSA9IGNhcnRlc2lhbihhKSxcbiAgICAgICAgICBwYiA9IGNhcnRlc2lhbihiKTtcblxuICAgICAgLy8gV2UgaGF2ZSB0d28gcGxhbmVzLCBuMS5wID0gZDEgYW5kIG4yLnAgPSBkMi5cbiAgICAgIC8vIEZpbmQgaW50ZXJzZWN0aW9uIGxpbmUgcCh0KSA9IGMxIG4xICsgYzIgbjIgKyB0IChuMSDiqK8gbjIpLlxuICAgICAgdmFyIG4xID0gWzEsIDAsIDBdLCAvLyBub3JtYWxcbiAgICAgICAgICBuMiA9IGNhcnRlc2lhbkNyb3NzKHBhLCBwYiksXG4gICAgICAgICAgbjJuMiA9IGNhcnRlc2lhbkRvdChuMiwgbjIpLFxuICAgICAgICAgIG4xbjIgPSBuMlswXSwgLy8gY2FydGVzaWFuRG90KG4xLCBuMiksXG4gICAgICAgICAgZGV0ZXJtaW5hbnQgPSBuMm4yIC0gbjFuMiAqIG4xbjI7XG5cbiAgICAgIC8vIFR3byBwb2xhciBwb2ludHMuXG4gICAgICBpZiAoIWRldGVybWluYW50KSByZXR1cm4gIXR3byAmJiBhO1xuXG4gICAgICB2YXIgYzEgPSAgY3IgKiBuMm4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgbjF4bjIgPSBjYXJ0ZXNpYW5Dcm9zcyhuMSwgbjIpLFxuICAgICAgICAgIEEgPSBjYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLFxuICAgICAgICAgIEIgPSBjYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgICAgY2FydGVzaWFuQWRkSW5QbGFjZShBLCBCKTtcblxuICAgICAgLy8gU29sdmUgfHAodCl8XjIgPSAxLlxuICAgICAgdmFyIHUgPSBuMXhuMixcbiAgICAgICAgICB3ID0gY2FydGVzaWFuRG90KEEsIHUpLFxuICAgICAgICAgIHV1ID0gY2FydGVzaWFuRG90KHUsIHUpLFxuICAgICAgICAgIHQyID0gdyAqIHcgLSB1dSAqIChjYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcblxuICAgICAgaWYgKHQyIDwgMCkgcmV0dXJuO1xuXG4gICAgICB2YXIgdCA9IHNxcnQkMSh0MiksXG4gICAgICAgICAgcSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyAtIHQpIC8gdXUpO1xuICAgICAgY2FydGVzaWFuQWRkSW5QbGFjZShxLCBBKTtcbiAgICAgIHEgPSBzcGhlcmljYWwocSk7XG5cbiAgICAgIGlmICghdHdvKSByZXR1cm4gcTtcblxuICAgICAgLy8gVHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gICAgICB2YXIgbGFtYmRhMCA9IGFbMF0sXG4gICAgICAgICAgbGFtYmRhMSA9IGJbMF0sXG4gICAgICAgICAgcGhpMCA9IGFbMV0sXG4gICAgICAgICAgcGhpMSA9IGJbMV0sXG4gICAgICAgICAgejtcblxuICAgICAgaWYgKGxhbWJkYTEgPCBsYW1iZGEwKSB6ID0gbGFtYmRhMCwgbGFtYmRhMCA9IGxhbWJkYTEsIGxhbWJkYTEgPSB6O1xuXG4gICAgICB2YXIgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgICBwb2xhciA9IGFicyhkZWx0YSAtIHBpJDQpIDwgZXBzaWxvbiQ0LFxuICAgICAgICAgIG1lcmlkaWFuID0gcG9sYXIgfHwgZGVsdGEgPCBlcHNpbG9uJDQ7XG5cbiAgICAgIGlmICghcG9sYXIgJiYgcGhpMSA8IHBoaTApIHogPSBwaGkwLCBwaGkwID0gcGhpMSwgcGhpMSA9IHo7XG5cbiAgICAgIC8vIENoZWNrIHRoYXQgdGhlIGZpcnN0IHBvaW50IGlzIGJldHdlZW4gYSBhbmQgYi5cbiAgICAgIGlmIChtZXJpZGlhblxuICAgICAgICAgID8gcG9sYXJcbiAgICAgICAgICAgID8gcGhpMCArIHBoaTEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIGxhbWJkYTApIDwgZXBzaWxvbiQ0ID8gcGhpMCA6IHBoaTEpXG4gICAgICAgICAgICA6IHBoaTAgPD0gcVsxXSAmJiBxWzFdIDw9IHBoaTFcbiAgICAgICAgICA6IGRlbHRhID4gcGkkNCBeIChsYW1iZGEwIDw9IHFbMF0gJiYgcVswXSA8PSBsYW1iZGExKSkge1xuICAgICAgICB2YXIgcTEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgKyB0KSAvIHV1KTtcbiAgICAgICAgY2FydGVzaWFuQWRkSW5QbGFjZShxMSwgQSk7XG4gICAgICAgIHJldHVybiBbcSwgc3BoZXJpY2FsKHExKV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSBzbWFsbCBjaXJjbGUncyBib3VuZGluZyBib3guXG4gICAgZnVuY3Rpb24gY29kZShsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpJDQgLSByYWRpdXMsXG4gICAgICAgICAgY29kZSA9IDA7XG4gICAgICBpZiAobGFtYmRhIDwgLXIpIGNvZGUgfD0gMTsgLy8gbGVmdFxuICAgICAgZWxzZSBpZiAobGFtYmRhID4gcikgY29kZSB8PSAyOyAvLyByaWdodFxuICAgICAgaWYgKHBoaSA8IC1yKSBjb2RlIHw9IDQ7IC8vIGJlbG93XG4gICAgICBlbHNlIGlmIChwaGkgPiByKSBjb2RlIHw9IDg7IC8vIGFib3ZlXG4gICAgICByZXR1cm4gY29kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcCh2aXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHNtYWxsUmFkaXVzID8gWzAsIC1yYWRpdXNdIDogWy1waSQ0LCByYWRpdXMgLSBwaSQ0XSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0kMShwcm90b3R5cGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyZWFtOiB0cmFuc2Zvcm0kMihwcm90b3R5cGUpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSQyKHByb3RvdHlwZSkge1xuICAgIGZ1bmN0aW9uIFQoKSB7fVxuICAgIHZhciBwID0gVC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRyYW5zZm9ybSQxLnByb3RvdHlwZSk7XG4gICAgZm9yICh2YXIgayBpbiBwcm90b3R5cGUpIHBba10gPSBwcm90b3R5cGVba107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgdmFyIHQgPSBuZXcgVDtcbiAgICAgIHQuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybSQxKCkge31cblxuICBUcmFuc2Zvcm0kMS5wcm90b3R5cGUgPSB7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5zdHJlYW0ucG9pbnQoeCwgeSk7IH0sXG4gICAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZVN0YXJ0KCk7IH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVFbmQoKTsgfSxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpOyB9XG4gIH07XG5cbiAgdmFyIG1heERlcHRoID0gMTY7XG4gIHZhciBjb3NNaW5EaXN0YW5jZSA9IGNvcyQxKDMwICogcmFkaWFucyk7XG4gIC8vIGNvcyhtaW5pbXVtIGFuZ3VsYXIgZGlzdGFuY2UpXG5cbiAgZnVuY3Rpb24gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSB7XG4gICAgcmV0dXJuICtkZWx0YTIgPyByZXNhbXBsZSQxKHByb2plY3QsIGRlbHRhMikgOiByZXNhbXBsZU5vbmUocHJvamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNhbXBsZU5vbmUocHJvamVjdCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm0kMih7XG4gICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgdGhpcy5zdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNhbXBsZSQxKHByb2plY3QsIGRlbHRhMikge1xuXG4gICAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pIHtcbiAgICAgIHZhciBkeCA9IHgxIC0geDAsXG4gICAgICAgICAgZHkgPSB5MSAtIHkwLFxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPiA0ICogZGVsdGEyICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFyIGEgPSBhMCArIGExLFxuICAgICAgICAgICAgYiA9IGIwICsgYjEsXG4gICAgICAgICAgICBjID0gYzAgKyBjMSxcbiAgICAgICAgICAgIG0gPSBzcXJ0JDEoYSAqIGEgKyBiICogYiArIGMgKiBjKSxcbiAgICAgICAgICAgIHBoaTIgPSBhc2luJDEoYyAvPSBtKSxcbiAgICAgICAgICAgIGxhbWJkYTIgPSBhYnMoYWJzKGMpIC0gMSkgPCBlcHNpbG9uJDQgfHwgYWJzKGxhbWJkYTAgLSBsYW1iZGExKSA8IGVwc2lsb24kNCA/IChsYW1iZGEwICsgbGFtYmRhMSkgLyAyIDogYXRhbjIoYiwgYSksXG4gICAgICAgICAgICBwID0gcHJvamVjdChsYW1iZGEyLCBwaGkyKSxcbiAgICAgICAgICAgIHgyID0gcFswXSxcbiAgICAgICAgICAgIHkyID0gcFsxXSxcbiAgICAgICAgICAgIGR4MiA9IHgyIC0geDAsXG4gICAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxuICAgICAgICAgICAgZHogPSBkeSAqIGR4MiAtIGR4ICogZHkyO1xuICAgICAgICBpZiAoZHogKiBkeiAvIGQyID4gZGVsdGEyIC8vIHBlcnBlbmRpY3VsYXIgcHJvamVjdGVkIGRpc3RhbmNlXG4gICAgICAgICAgICB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAwLjUpID4gMC4zIC8vIG1pZHBvaW50IGNsb3NlIHRvIGFuIGVuZFxuICAgICAgICAgICAgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHsgLy8gYW5ndWxhciBkaXN0YW5jZVxuICAgICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDIsIHkyLCBsYW1iZGEyLCBhIC89IG0sIGIgLz0gbSwgYywgZGVwdGgsIHN0cmVhbSk7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XG4gICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCBsYW1iZGEyLCBhLCBiLCBjLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgICAgICAgbGFtYmRhMCwgeDAsIHkwLCBhMCwgYjAsIGMwOyAvLyBwcmV2aW91cyBwb2ludFxuXG4gICAgICB2YXIgcmVzYW1wbGVTdHJlYW0gPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gcmluZ1N0YXJ0OyB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25FbmQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gbGluZVN0YXJ0OyB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgeDAgPSBOYU47XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgICB2YXIgYyA9IGNhcnRlc2lhbihbbGFtYmRhLCBwaGldKSwgcCA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwID0gcFswXSwgeTAgPSBwWzFdLCBsYW1iZGEwID0gbGFtYmRhLCBhMCA9IGNbMF0sIGIwID0gY1sxXSwgYzAgPSBjWzJdLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgICAgbGluZVN0YXJ0KCk7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcmluZ1BvaW50O1xuICAgICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIGxpbmVQb2ludChsYW1iZGEwMCA9IGxhbWJkYSwgcGhpKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuICAgICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgbGFtYmRhMDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgbGluZUVuZCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzYW1wbGVTdHJlYW07XG4gICAgfTtcbiAgfVxuXG4gIHZhciB0cmFuc2Zvcm1SYWRpYW5zID0gdHJhbnNmb3JtJDIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICogcmFkaWFucywgeSAqIHJhZGlhbnMpO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbihwcm9qZWN0KSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkgeyByZXR1cm4gcHJvamVjdDsgfSkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuICAgIHZhciBwcm9qZWN0LFxuICAgICAgICBrID0gMTUwLCAvLyBzY2FsZVxuICAgICAgICB4ID0gNDgwLCB5ID0gMjUwLCAvLyB0cmFuc2xhdGVcbiAgICAgICAgZHgsIGR5LCBsYW1iZGEgPSAwLCBwaGkgPSAwLCAvLyBjZW50ZXJcbiAgICAgICAgZGVsdGFMYW1iZGEgPSAwLCBkZWx0YVBoaSA9IDAsIGRlbHRhR2FtbWEgPSAwLCByb3RhdGUsIHByb2plY3RSb3RhdGUsIC8vIHJvdGF0ZVxuICAgICAgICB0aGV0YSA9IG51bGwsIHByZWNsaXAgPSBjbGlwQW50aW1lcmlkaWFuLCAvLyBjbGlwIGFuZ2xlXG4gICAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgcG9zdGNsaXAgPSBpZGVudGl0eSQ3LCAvLyBjbGlwIGV4dGVudFxuICAgICAgICBkZWx0YTIgPSAwLjUsIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiksIC8vIHByZWNpc2lvblxuICAgICAgICBjYWNoZSxcbiAgICAgICAgY2FjaGVTdHJlYW07XG5cbiAgICBmdW5jdGlvbiBwcm9qZWN0aW9uKHBvaW50KSB7XG4gICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUocG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnMpO1xuICAgICAgcmV0dXJuIFtwb2ludFswXSAqIGsgKyBkeCwgZHkgLSBwb2ludFsxXSAqIGtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlLmludmVydCgocG9pbnRbMF0gLSBkeCkgLyBrLCAoZHkgLSBwb2ludFsxXSkgLyBrKTtcbiAgICAgIHJldHVybiBwb2ludCAmJiBbcG9pbnRbMF0gKiBkZWdyZWVzJDEsIHBvaW50WzFdICogZGVncmVlcyQxXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9qZWN0VHJhbnNmb3JtKHgsIHkpIHtcbiAgICAgIHJldHVybiB4ID0gcHJvamVjdCh4LCB5KSwgW3hbMF0gKiBrICsgZHgsIGR5IC0geFsxXSAqIGtdO1xuICAgIH1cblxuICAgIHByb2plY3Rpb24uc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm1SYWRpYW5zKHByZWNsaXAocm90YXRlLCBwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKSkpO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLmNsaXBBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSArXyA/IGNsaXBDaXJjbGUodGhldGEgPSBfICogcmFkaWFucywgNiAqIHJhZGlhbnMpIDogKHRoZXRhID0gbnVsbCwgY2xpcEFudGltZXJpZGlhbiksIHJlc2V0KCkpIDogdGhldGEgKiBkZWdyZWVzJDE7XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkkNykgOiBjbGlwRXh0ZW50KHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrID0gK18sIHJlY2VudGVyKCkpIDogaztcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK19bMF0sIHkgPSArX1sxXSwgcmVjZW50ZXIoKSkgOiBbeCwgeV07XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzJDEsIHBoaSAqIGRlZ3JlZXMkMV07XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24ucm90YXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVsdGFMYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgZGVsdGFQaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgZGVsdGFHYW1tYSA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiByYWRpYW5zIDogMCwgcmVjZW50ZXIoKSkgOiBbZGVsdGFMYW1iZGEgKiBkZWdyZWVzJDEsIGRlbHRhUGhpICogZGVncmVlcyQxLCBkZWx0YUdhbW1hICogZGVncmVlcyQxXTtcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIgPSBfICogXyksIHJlc2V0KCkpIDogc3FydCQxKGRlbHRhMik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlY2VudGVyKCkge1xuICAgICAgcHJvamVjdFJvdGF0ZSA9IGNvbXBvc2Uocm90YXRlID0gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpLCBwcm9qZWN0KTtcbiAgICAgIHZhciBjZW50ZXIgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcbiAgICAgIGR4ID0geCAtIGNlbnRlclswXSAqIGs7XG4gICAgICBkeSA9IHkgKyBjZW50ZXJbMV0gKiBrO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHByb2plY3QgPSBwcm9qZWN0QXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgICAgcmV0dXJuIHJlY2VudGVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmljUHJvamVjdGlvbihwcm9qZWN0QXQpIHtcbiAgICB2YXIgcGhpMCA9IDAsXG4gICAgICAgIHBoaTEgPSBwaSQ0IC8gMyxcbiAgICAgICAgbSA9IHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCksXG4gICAgICAgIHAgPSBtKHBoaTAsIHBoaTEpO1xuXG4gICAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IG0ocGhpMCA9IF9bMF0gKiByYWRpYW5zLCBwaGkxID0gX1sxXSAqIHJhZGlhbnMpIDogW3BoaTAgKiBkZWdyZWVzJDEsIHBoaTEgKiBkZWdyZWVzJDFdO1xuICAgIH07XG5cbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhUmF3KHkwLCB5MSkge1xuICAgIHZhciBzeTAgPSBzaW4kMSh5MCksXG4gICAgICAgIG4gPSAoc3kwICsgc2luJDEoeTEpKSAvIDIsXG4gICAgICAgIGMgPSAxICsgc3kwICogKDIgKiBuIC0gc3kwKSxcbiAgICAgICAgcjAgPSBzcXJ0JDEoYykgLyBuO1xuXG4gICAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgICB2YXIgciA9IHNxcnQkMShjIC0gMiAqIG4gKiBzaW4kMSh5KSkgLyBuO1xuICAgICAgcmV0dXJuIFtyICogc2luJDEoeCAqPSBuKSwgcjAgLSByICogY29zJDEoeCldO1xuICAgIH1cblxuICAgIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIHIweSA9IHIwIC0geTtcbiAgICAgIHJldHVybiBbYXRhbjIoeCwgcjB5KSAvIG4sIGFzaW4kMSgoYyAtICh4ICogeCArIHIweSAqIHIweSkgKiBuICogbikgLyAoMiAqIG4pKV07XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNFcXVhbEFyZWEoKSB7XG4gICAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0VxdWFsQXJlYVJhdylcbiAgICAgICAgLnNjYWxlKDE1NS40MjQpXG4gICAgICAgIC5jZW50ZXIoWzAsIDMzLjY0NDJdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsYmVycygpIHtcbiAgICByZXR1cm4gY29uaWNFcXVhbEFyZWEoKVxuICAgICAgICAucGFyYWxsZWxzKFsyOS41LCA0NS41XSlcbiAgICAgICAgLnNjYWxlKDEwNzApXG4gICAgICAgIC50cmFuc2xhdGUoWzQ4MCwgMjUwXSlcbiAgICAgICAgLnJvdGF0ZShbOTYsIDBdKVxuICAgICAgICAuY2VudGVyKFstMC42LCAzOC43XSk7XG4gIH1cblxuICAvLyBUaGUgcHJvamVjdGlvbnMgbXVzdCBoYXZlIG11dHVhbGx5IGV4Y2x1c2l2ZSBjbGlwIHJlZ2lvbnMgb24gdGhlIHNwaGVyZSxcbiAgLy8gYXMgdGhpcyB3aWxsIGF2b2lkIGVtaXR0aW5nIGludGVybGVhdmluZyBsaW5lcyBhbmQgcG9seWdvbnMuXG4gIGZ1bmN0aW9uIG11bHRpcGxleChzdHJlYW1zKSB7XG4gICAgdmFyIG4gPSBzdHJlYW1zLmxlbmd0aDtcbiAgICByZXR1cm4ge1xuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9pbnQoeCwgeSk7IH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5zcGhlcmUoKTsgfSxcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVTdGFydCgpOyB9LFxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVFbmQoKTsgfSxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25TdGFydCgpOyB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25FbmQoKTsgfVxuICAgIH07XG4gIH1cblxuICAvLyBBIGNvbXBvc2l0ZSBwcm9qZWN0aW9uIGZvciB0aGUgVW5pdGVkIFN0YXRlcywgY29uZmlndXJlZCBieSBkZWZhdWx0IGZvclxuICAvLyA5NjDDlzUwMC4gVGhlIHByb2plY3Rpb24gYWxzbyB3b3JrcyBxdWl0ZSB3ZWxsIGF0IDk2MMOXNjAwIGlmIHlvdSBjaGFuZ2UgdGhlXG4gIC8vIHNjYWxlIHRvIDEyODUgYW5kIGFkanVzdCB0aGUgdHJhbnNsYXRlIGFjY29yZGluZ2x5LiBUaGUgc2V0IG9mIHN0YW5kYXJkXG4gIC8vIHBhcmFsbGVscyBmb3IgZWFjaCByZWdpb24gY29tZXMgZnJvbSBVU0dTLCB3aGljaCBpcyBwdWJsaXNoZWQgaGVyZTpcbiAgLy8gaHR0cDovL2Vnc2MudXNncy5nb3YvaXNiL3B1YnMvTWFwUHJvamVjdGlvbnMvcHJvamVjdGlvbnMuaHRtbCNhbGJlcnNcbiAgZnVuY3Rpb24gYWxiZXJzVXNhKCkge1xuICAgIHZhciBjYWNoZSxcbiAgICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICAgIGxvd2VyNDggPSBhbGJlcnMoKSwgbG93ZXI0OFBvaW50LFxuICAgICAgICBhbGFza2EgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LCAwXSkuY2VudGVyKFstMiwgNTguNV0pLnBhcmFsbGVscyhbNTUsIDY1XSksIGFsYXNrYVBvaW50LCAvLyBFUFNHOjMzMzhcbiAgICAgICAgaGF3YWlpID0gY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWzE1NywgMF0pLmNlbnRlcihbLTMsIDE5LjldKS5wYXJhbGxlbHMoWzgsIDE4XSksIGhhd2FpaVBvaW50LCAvLyBFU1JJOjEwMjAwN1xuICAgICAgICBwb2ludCwgcG9pbnRTdHJlYW0gPSB7cG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHsgcG9pbnQgPSBbeCwgeV07IH19O1xuXG4gICAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLCB5ID0gY29vcmRpbmF0ZXNbMV07XG4gICAgICByZXR1cm4gcG9pbnQgPSBudWxsLFxuICAgICAgICAgIChsb3dlcjQ4UG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICAgIHx8IChhbGFza2FQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpXG4gICAgICAgICAgfHwgKGhhd2FpaVBvaW50LnBvaW50KHgsIHkpLCBwb2ludCk7XG4gICAgfVxuXG4gICAgYWxiZXJzVXNhLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSxcbiAgICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgICB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLFxuICAgICAgICAgIHkgPSAoY29vcmRpbmF0ZXNbMV0gLSB0WzFdKSAvIGs7XG4gICAgICByZXR1cm4gKHkgPj0gMC4xMjAgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuNDI1ICYmIHggPCAtMC4yMTQgPyBhbGFza2FcbiAgICAgICAgICA6IHkgPj0gMC4xNjYgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuMjE0ICYmIHggPCAtMC4xMTUgPyBoYXdhaWlcbiAgICAgICAgICA6IGxvd2VyNDgpLmludmVydChjb29yZGluYXRlcyk7XG4gICAgfTtcblxuICAgIGFsYmVyc1VzYS5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IG11bHRpcGxleChbbG93ZXI0OC5zdHJlYW0oY2FjaGVTdHJlYW0gPSBzdHJlYW0pLCBhbGFza2Euc3RyZWFtKHN0cmVhbSksIGhhd2FpaS5zdHJlYW0oc3RyZWFtKV0pO1xuICAgIH07XG5cbiAgICBhbGJlcnNVc2EucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5wcmVjaXNpb24oKTtcbiAgICAgIGxvd2VyNDgucHJlY2lzaW9uKF8pLCBhbGFza2EucHJlY2lzaW9uKF8pLCBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuXG4gICAgYWxiZXJzVXNhLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5zY2FsZSgpO1xuICAgICAgbG93ZXI0OC5zY2FsZShfKSwgYWxhc2thLnNjYWxlKF8gKiAwLjM1KSwgaGF3YWlpLnNjYWxlKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYS50cmFuc2xhdGUobG93ZXI0OC50cmFuc2xhdGUoKSk7XG4gICAgfTtcblxuICAgIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnRyYW5zbGF0ZSgpO1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHggPSArX1swXSwgeSA9ICtfWzFdO1xuXG4gICAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4XG4gICAgICAgICAgLnRyYW5zbGF0ZShfKVxuICAgICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuNDU1ICogaywgeSAtIDAuMjM4ICoga10sIFt4ICsgMC40NTUgKiBrLCB5ICsgMC4yMzggKiBrXV0pXG4gICAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICAgIGFsYXNrYVBvaW50ID0gYWxhc2thXG4gICAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMzA3ICogaywgeSArIDAuMjAxICoga10pXG4gICAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40MjUgKiBrICsgZXBzaWxvbiQ0LCB5ICsgMC4xMjAgKiBrICsgZXBzaWxvbiQ0XSwgW3ggLSAwLjIxNCAqIGsgLSBlcHNpbG9uJDQsIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uJDRdXSlcbiAgICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgICAgaGF3YWlpUG9pbnQgPSBoYXdhaWlcbiAgICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4yMDUgKiBrLCB5ICsgMC4yMTIgKiBrXSlcbiAgICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjIxNCAqIGsgKyBlcHNpbG9uJDQsIHkgKyAwLjE2NiAqIGsgKyBlcHNpbG9uJDRdLCBbeCAtIDAuMTE1ICogayAtIGVwc2lsb24kNCwgeSArIDAuMjM0ICogayAtIGVwc2lsb24kNF1dKVxuICAgICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgICByZXR1cm4gYWxiZXJzVXNhO1xuICAgIH07XG5cbiAgICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xuICB9XG5cbiAgZnVuY3Rpb24gYXppbXV0aGFsUmF3KHNjYWxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciBjeCA9IGNvcyQxKHgpLFxuICAgICAgICAgIGN5ID0gY29zJDEoeSksXG4gICAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgayAqIGN5ICogc2luJDEoeCksXG4gICAgICAgIGsgKiBzaW4kMSh5KVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhemltdXRoYWxJbnZlcnQoYW5nbGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIHogPSBzcXJ0JDEoeCAqIHggKyB5ICogeSksXG4gICAgICAgICAgYyA9IGFuZ2xlKHopLFxuICAgICAgICAgIHNjID0gc2luJDEoYyksXG4gICAgICAgICAgY2MgPSBjb3MkMShjKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcbiAgICAgICAgYXNpbiQxKHogJiYgeSAqIHNjIC8geilcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgdmFyIGF6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjeGN5KSB7XG4gICAgcmV0dXJuIHNxcnQkMSgyIC8gKDEgKyBjeGN5KSk7XG4gIH0pO1xuXG4gIGF6aW11dGhhbEVxdWFsQXJlYVJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICAgIHJldHVybiAyICogYXNpbiQxKHogLyAyKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYXppbXV0aGFsRXF1YWxBcmVhKCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcbiAgICAgICAgLnNjYWxlKDEyNC43NSlcbiAgICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbiAgfVxuXG4gIHZhciBhemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIChjID0gYWNvcyhjKSkgJiYgYyAvIHNpbiQxKGMpO1xuICB9KTtcblxuICBhemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICAgIHJldHVybiB6O1xuICB9KTtcblxuICBmdW5jdGlvbiBhemltdXRoYWxFcXVpZGlzdGFudCgpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVpZGlzdGFudFJhdylcbiAgICAgICAgLnNjYWxlKDc5LjQxODgpXG4gICAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhLCBsb2ckMSh0YW4oKGhhbGZQaSQzICsgcGhpKSAvIDIpKV07XG4gIH1cblxuICBtZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFt4LCAyICogYXRhbihleHAoeSkpIC0gaGFsZlBpJDNdO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1lcmNhdG9yKCkge1xuICAgIHJldHVybiBtZXJjYXRvclByb2plY3Rpb24obWVyY2F0b3JSYXcpXG4gICAgICAgIC5zY2FsZSg5NjEgLyB0YXUkNCk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJjYXRvclByb2plY3Rpb24ocHJvamVjdCkge1xuICAgIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcbiAgICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgICB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSxcbiAgICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcbiAgICAgICAgY2xpcEF1dG87XG5cbiAgICBtLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUoXyksIGNsaXBBdXRvICYmIG0uY2xpcEV4dGVudChudWxsKSwgbSkgOiBzY2FsZSgpO1xuICAgIH07XG5cbiAgICBtLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZShfKSwgY2xpcEF1dG8gJiYgbS5jbGlwRXh0ZW50KG51bGwpLCBtKSA6IHRyYW5zbGF0ZSgpO1xuICAgIH07XG5cbiAgICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwQXV0byA/IG51bGwgOiBjbGlwRXh0ZW50KCk7XG4gICAgICBpZiAoY2xpcEF1dG8gPSBfID09IG51bGwpIHtcbiAgICAgICAgdmFyIGsgPSBwaSQ0ICogc2NhbGUoKSxcbiAgICAgICAgICAgIHQgPSB0cmFuc2xhdGUoKTtcbiAgICAgICAgXyA9IFtbdFswXSAtIGssIHRbMV0gLSBrXSwgW3RbMF0gKyBrLCB0WzFdICsga11dO1xuICAgICAgfVxuICAgICAgY2xpcEV4dGVudChfKTtcbiAgICAgIHJldHVybiBtO1xuICAgIH07XG5cbiAgICByZXR1cm4gbS5jbGlwRXh0ZW50KG51bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFueSh5KSB7XG4gICAgcmV0dXJuIHRhbigoaGFsZlBpJDMgKyB5KSAvIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgbiA9IHkwID09PSB5MSA/IHNpbiQxKHkwKSA6IGxvZyQxKGN5MCAvIGNvcyQxKHkxKSkgLyBsb2ckMSh0YW55KHkxKSAvIHRhbnkoeTApKSxcbiAgICAgICAgZiA9IGN5MCAqIHBvdyQxKHRhbnkoeTApLCBuKSAvIG47XG5cbiAgICBpZiAoIW4pIHJldHVybiBtZXJjYXRvclJhdztcblxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgICAgaWYgKGYgPiAwKSB7IGlmICh5IDwgLWhhbGZQaSQzICsgZXBzaWxvbiQ0KSB5ID0gLWhhbGZQaSQzICsgZXBzaWxvbiQ0OyB9XG4gICAgICBlbHNlIHsgaWYgKHkgPiBoYWxmUGkkMyAtIGVwc2lsb24kNCkgeSA9IGhhbGZQaSQzIC0gZXBzaWxvbiQ0OyB9XG4gICAgICB2YXIgciA9IGYgLyBwb3ckMSh0YW55KHkpLCBuKTtcbiAgICAgIHJldHVybiBbciAqIHNpbiQxKG4gKiB4KSwgZiAtIHIgKiBjb3MkMShuICogeCldO1xuICAgIH1cblxuICAgIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIGZ5ID0gZiAtIHksIHIgPSBzaWduJDEobikgKiBzcXJ0JDEoeCAqIHggKyBmeSAqIGZ5KTtcbiAgICAgIHJldHVybiBbYXRhbjIoeCwgZnkpIC8gbiwgMiAqIGF0YW4ocG93JDEoZiAvIHIsIDEgLyBuKSkgLSBoYWxmUGkkM107XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNDb25mb3JtYWwoKSB7XG4gICAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0NvbmZvcm1hbFJhdylcbiAgICAgICAgLnNjYWxlKDEwOS41KVxuICAgICAgICAucGFyYWxsZWxzKFszMCwgMzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhclJhdyhsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhLCBwaGldO1xuICB9XG5cbiAgZXF1aXJlY3Rhbmd1bGFyUmF3LmludmVydCA9IGVxdWlyZWN0YW5ndWxhclJhdztcblxuICBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXIoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oZXF1aXJlY3Rhbmd1bGFyUmF3KVxuICAgICAgICAuc2NhbGUoMTUyLjYzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgbiA9IHkwID09PSB5MSA/IHNpbiQxKHkwKSA6IChjeTAgLSBjb3MkMSh5MSkpIC8gKHkxIC0geTApLFxuICAgICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gICAgaWYgKGFicyhuKSA8IGVwc2lsb24kNCkgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclJhdztcblxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgICAgdmFyIGd5ID0gZyAtIHksIG54ID0gbiAqIHg7XG4gICAgICByZXR1cm4gW2d5ICogc2luJDEobngpLCBnIC0gZ3kgKiBjb3MkMShueCldO1xuICAgIH1cblxuICAgIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIGd5ID0gZyAtIHk7XG4gICAgICByZXR1cm4gW2F0YW4yKHgsIGd5KSAvIG4sIGcgLSBzaWduJDEobikgKiBzcXJ0JDEoeCAqIHggKyBneSAqIGd5KV07XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNFcXVpZGlzdGFudCgpIHtcbiAgICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1aWRpc3RhbnRSYXcpXG4gICAgICAgIC5zY2FsZSgxMzEuMTU0KVxuICAgICAgICAuY2VudGVyKFswLCAxMy45Mzg5XSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbm9tb25pY1Jhdyh4LCB5KSB7XG4gICAgdmFyIGN5ID0gY29zJDEoeSksIGsgPSBjb3MkMSh4KSAqIGN5O1xuICAgIHJldHVybiBbY3kgKiBzaW4kMSh4KSAvIGssIHNpbiQxKHkpIC8ga107XG4gIH1cblxuICBnbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XG5cbiAgZnVuY3Rpb24gZ25vbW9uaWMoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXG4gICAgICAgIC5zY2FsZSgxNDQuMDQ5KVxuICAgICAgICAuY2xpcEFuZ2xlKDYwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ydGhvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gICAgcmV0dXJuIFtjb3MkMSh5KSAqIHNpbiQxKHgpLCBzaW4kMSh5KV07XG4gIH1cblxuICBvcnRob2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGFzaW4kMSk7XG5cbiAgZnVuY3Rpb24gb3J0aG9ncmFwaGljKCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgICAgLnNjYWxlKDI0OS41KVxuICAgICAgICAuY2xpcEFuZ2xlKDkwICsgZXBzaWxvbiQ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWNSYXcoeCwgeSkge1xuICAgIHZhciBjeSA9IGNvcyQxKHkpLCBrID0gMSArIGNvcyQxKHgpICogY3k7XG4gICAgcmV0dXJuIFtjeSAqIHNpbiQxKHgpIC8gaywgc2luJDEoeSkgLyBrXTtcbiAgfVxuXG4gIHN0ZXJlb2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgICByZXR1cm4gMiArIGF0YW4oeik7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWMoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcbiAgICAgICAgLnNjYWxlKDI1MClcbiAgICAgICAgLmNsaXBBbmdsZSgxNDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnN2ZXJzZU1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIFtsb2ckMSh0YW4oKGhhbGZQaSQzICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG4gIH1cblxuICB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbLXksIDIgKiBhdGFuKGV4cCh4KSkgLSBoYWxmUGkkM107XG4gIH07XG5cbiAgZnVuY3Rpb24gdHJhbnN2ZXJzZU1lcmNhdG9yKCkge1xuICAgIHZhciBtID0gbWVyY2F0b3JQcm9qZWN0aW9uKHRyYW5zdmVyc2VNZXJjYXRvclJhdyksXG4gICAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgICByb3RhdGUgPSBtLnJvdGF0ZTtcblxuICAgIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjZW50ZXIoWy1fWzFdLCBfWzBdXSkgOiAoXyA9IGNlbnRlcigpLCBbX1sxXSwgLV9bMF1dKTtcbiAgICB9O1xuXG4gICAgbS5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJvdGF0ZShbX1swXSwgX1sxXSwgXy5sZW5ndGggPiAyID8gX1syXSArIDkwIDogOTBdKSA6IChfID0gcm90YXRlKCksIFtfWzBdLCBfWzFdLCBfWzJdIC0gOTBdKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJvdGF0ZShbMCwgMCwgOTBdKVxuICAgICAgICAuc2NhbGUoMTU5LjE1NSk7XG4gIH1cblxuICBleHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICBleHBvcnRzLmJpc2VjdCA9IGJpc2VjdFJpZ2h0O1xuICBleHBvcnRzLmJpc2VjdFJpZ2h0ID0gYmlzZWN0UmlnaHQ7XG4gIGV4cG9ydHMuYmlzZWN0TGVmdCA9IGJpc2VjdExlZnQ7XG4gIGV4cG9ydHMuYXNjZW5kaW5nID0gYXNjZW5kaW5nO1xuICBleHBvcnRzLmJpc2VjdG9yID0gYmlzZWN0b3I7XG4gIGV4cG9ydHMuZGVzY2VuZGluZyA9IGRlc2NlbmRpbmc7XG4gIGV4cG9ydHMuZGV2aWF0aW9uID0gZGV2aWF0aW9uO1xuICBleHBvcnRzLmV4dGVudCA9IGV4dGVudDtcbiAgZXhwb3J0cy5oaXN0b2dyYW0gPSBoaXN0b2dyYW07XG4gIGV4cG9ydHMudGhyZXNob2xkRnJlZWRtYW5EaWFjb25pcyA9IGZyZWVkbWFuRGlhY29uaXM7XG4gIGV4cG9ydHMudGhyZXNob2xkU2NvdHQgPSBzY290dDtcbiAgZXhwb3J0cy50aHJlc2hvbGRTdHVyZ2VzID0gc3R1cmdlcztcbiAgZXhwb3J0cy5tYXggPSBtYXg7XG4gIGV4cG9ydHMubWVhbiA9IG1lYW47XG4gIGV4cG9ydHMubWVkaWFuID0gbWVkaWFuO1xuICBleHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4gIGV4cG9ydHMubWluID0gbWluO1xuICBleHBvcnRzLnBhaXJzID0gcGFpcnM7XG4gIGV4cG9ydHMucGVybXV0ZSA9IHBlcm11dGU7XG4gIGV4cG9ydHMucXVhbnRpbGUgPSB0aHJlc2hvbGQ7XG4gIGV4cG9ydHMucmFuZ2UgPSByYW5nZTtcbiAgZXhwb3J0cy5zY2FuID0gc2NhbjtcbiAgZXhwb3J0cy5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgZXhwb3J0cy5zdW0gPSBzdW07XG4gIGV4cG9ydHMudGlja3MgPSB0aWNrcztcbiAgZXhwb3J0cy50aWNrU3RlcCA9IHRpY2tTdGVwO1xuICBleHBvcnRzLnRyYW5zcG9zZSA9IHRyYW5zcG9zZTtcbiAgZXhwb3J0cy52YXJpYW5jZSA9IHZhcmlhbmNlO1xuICBleHBvcnRzLnppcCA9IHppcDtcbiAgZXhwb3J0cy5lbnRyaWVzID0gZW50cmllcztcbiAgZXhwb3J0cy5rZXlzID0ga2V5cztcbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG4gIGV4cG9ydHMubWFwID0gbWFwJDE7XG4gIGV4cG9ydHMuc2V0ID0gc2V0O1xuICBleHBvcnRzLm5lc3QgPSBuZXN0O1xuICBleHBvcnRzLnJhbmRvbVVuaWZvcm0gPSB1bmlmb3JtO1xuICBleHBvcnRzLnJhbmRvbU5vcm1hbCA9IG5vcm1hbDtcbiAgZXhwb3J0cy5yYW5kb21Mb2dOb3JtYWwgPSBsb2dOb3JtYWw7XG4gIGV4cG9ydHMucmFuZG9tQmF0ZXMgPSBiYXRlcztcbiAgZXhwb3J0cy5yYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGw7XG4gIGV4cG9ydHMucmFuZG9tRXhwb25lbnRpYWwgPSBleHBvbmVudGlhbDtcbiAgZXhwb3J0cy5lYXNlTGluZWFyID0gbGluZWFyO1xuICBleHBvcnRzLmVhc2VRdWFkID0gcXVhZEluT3V0O1xuICBleHBvcnRzLmVhc2VRdWFkSW4gPSBxdWFkSW47XG4gIGV4cG9ydHMuZWFzZVF1YWRPdXQgPSBxdWFkT3V0O1xuICBleHBvcnRzLmVhc2VRdWFkSW5PdXQgPSBxdWFkSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUN1YmljID0gZWFzZUN1YmljSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUN1YmljSW4gPSBjdWJpY0luO1xuICBleHBvcnRzLmVhc2VDdWJpY091dCA9IGN1YmljT3V0O1xuICBleHBvcnRzLmVhc2VDdWJpY0luT3V0ID0gZWFzZUN1YmljSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHkgPSBwb2x5SW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHlJbiA9IHBvbHlJbjtcbiAgZXhwb3J0cy5lYXNlUG9seU91dCA9IHBvbHlPdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHlJbk91dCA9IHBvbHlJbk91dDtcbiAgZXhwb3J0cy5lYXNlU2luID0gc2luSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVNpbkluID0gc2luSW47XG4gIGV4cG9ydHMuZWFzZVNpbk91dCA9IHNpbk91dDtcbiAgZXhwb3J0cy5lYXNlU2luSW5PdXQgPSBzaW5Jbk91dDtcbiAgZXhwb3J0cy5lYXNlRXhwID0gZXhwSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUV4cEluID0gZXhwSW47XG4gIGV4cG9ydHMuZWFzZUV4cE91dCA9IGV4cE91dDtcbiAgZXhwb3J0cy5lYXNlRXhwSW5PdXQgPSBleHBJbk91dDtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlID0gY2lyY2xlSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUNpcmNsZUluID0gY2lyY2xlSW47XG4gIGV4cG9ydHMuZWFzZUNpcmNsZU91dCA9IGNpcmNsZU91dDtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlSW5PdXQgPSBjaXJjbGVJbk91dDtcbiAgZXhwb3J0cy5lYXNlQm91bmNlID0gYm91bmNlT3V0O1xuICBleHBvcnRzLmVhc2VCb3VuY2VJbiA9IGJvdW5jZUluO1xuICBleHBvcnRzLmVhc2VCb3VuY2VPdXQgPSBib3VuY2VPdXQ7XG4gIGV4cG9ydHMuZWFzZUJvdW5jZUluT3V0ID0gYm91bmNlSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2sgPSBiYWNrSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2tJbiA9IGJhY2tJbjtcbiAgZXhwb3J0cy5lYXNlQmFja091dCA9IGJhY2tPdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2tJbk91dCA9IGJhY2tJbk91dDtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpYyA9IGVsYXN0aWNPdXQ7XG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNJbiA9IGVsYXN0aWNJbjtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpY091dCA9IGVsYXN0aWNPdXQ7XG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNJbk91dCA9IGVsYXN0aWNJbk91dDtcbiAgZXhwb3J0cy5wb2x5Z29uQXJlYSA9IGFyZWE7XG4gIGV4cG9ydHMucG9seWdvbkNlbnRyb2lkID0gY2VudHJvaWQ7XG4gIGV4cG9ydHMucG9seWdvbkh1bGwgPSBodWxsO1xuICBleHBvcnRzLnBvbHlnb25Db250YWlucyA9IGNvbnRhaW5zO1xuICBleHBvcnRzLnBvbHlnb25MZW5ndGggPSBsZW5ndGgkMTtcbiAgZXhwb3J0cy5wYXRoID0gcGF0aDtcbiAgZXhwb3J0cy5xdWFkdHJlZSA9IHF1YWR0cmVlO1xuICBleHBvcnRzLnF1ZXVlID0gcXVldWU7XG4gIGV4cG9ydHMuYXJjID0gYXJjO1xuICBleHBvcnRzLmFyZWEgPSBhcmVhJDE7XG4gIGV4cG9ydHMubGluZSA9IGxpbmU7XG4gIGV4cG9ydHMucGllID0gcGllO1xuICBleHBvcnRzLnJhZGlhbEFyZWEgPSByYWRpYWxBcmVhO1xuICBleHBvcnRzLnJhZGlhbExpbmUgPSByYWRpYWxMaW5lJDE7XG4gIGV4cG9ydHMuc3ltYm9sID0gc3ltYm9sO1xuICBleHBvcnRzLnN5bWJvbHMgPSBzeW1ib2xzO1xuICBleHBvcnRzLnN5bWJvbENpcmNsZSA9IGNpcmNsZTtcbiAgZXhwb3J0cy5zeW1ib2xDcm9zcyA9IGNyb3NzJDE7XG4gIGV4cG9ydHMuc3ltYm9sRGlhbW9uZCA9IGRpYW1vbmQ7XG4gIGV4cG9ydHMuc3ltYm9sU3F1YXJlID0gc3F1YXJlO1xuICBleHBvcnRzLnN5bWJvbFN0YXIgPSBzdGFyO1xuICBleHBvcnRzLnN5bWJvbFRyaWFuZ2xlID0gdHJpYW5nbGU7XG4gIGV4cG9ydHMuc3ltYm9sV3llID0gd3llO1xuICBleHBvcnRzLmN1cnZlQmFzaXNDbG9zZWQgPSBiYXNpc0Nsb3NlZDtcbiAgZXhwb3J0cy5jdXJ2ZUJhc2lzT3BlbiA9IGJhc2lzT3BlbjtcbiAgZXhwb3J0cy5jdXJ2ZUJhc2lzID0gYmFzaXM7XG4gIGV4cG9ydHMuY3VydmVCdW5kbGUgPSBidW5kbGU7XG4gIGV4cG9ydHMuY3VydmVDYXJkaW5hbENsb3NlZCA9IGNhcmRpbmFsQ2xvc2VkO1xuICBleHBvcnRzLmN1cnZlQ2FyZGluYWxPcGVuID0gY2FyZGluYWxPcGVuO1xuICBleHBvcnRzLmN1cnZlQ2FyZGluYWwgPSBjYXJkaW5hbDtcbiAgZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb21DbG9zZWQgPSBjYXRtdWxsUm9tQ2xvc2VkO1xuICBleHBvcnRzLmN1cnZlQ2F0bXVsbFJvbU9wZW4gPSBjYXRtdWxsUm9tT3BlbjtcbiAgZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb20gPSBjYXRtdWxsUm9tO1xuICBleHBvcnRzLmN1cnZlTGluZWFyQ2xvc2VkID0gbGluZWFyQ2xvc2VkO1xuICBleHBvcnRzLmN1cnZlTGluZWFyID0gY3VydmVMaW5lYXI7XG4gIGV4cG9ydHMuY3VydmVNb25vdG9uZVggPSBtb25vdG9uZVg7XG4gIGV4cG9ydHMuY3VydmVNb25vdG9uZVkgPSBtb25vdG9uZVk7XG4gIGV4cG9ydHMuY3VydmVOYXR1cmFsID0gbmF0dXJhbDtcbiAgZXhwb3J0cy5jdXJ2ZVN0ZXAgPSBzdGVwO1xuICBleHBvcnRzLmN1cnZlU3RlcEFmdGVyID0gc3RlcEFmdGVyO1xuICBleHBvcnRzLmN1cnZlU3RlcEJlZm9yZSA9IHN0ZXBCZWZvcmU7XG4gIGV4cG9ydHMuc3RhY2sgPSBzdGFjaztcbiAgZXhwb3J0cy5zdGFja09mZnNldEV4cGFuZCA9IGV4cGFuZDtcbiAgZXhwb3J0cy5zdGFja09mZnNldE5vbmUgPSBub25lO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSA9IHNpbGhvdWV0dGU7XG4gIGV4cG9ydHMuc3RhY2tPZmZzZXRXaWdnbGUgPSB3aWdnbGU7XG4gIGV4cG9ydHMuc3RhY2tPcmRlckFzY2VuZGluZyA9IGFzY2VuZGluZyQxO1xuICBleHBvcnRzLnN0YWNrT3JkZXJEZXNjZW5kaW5nID0gZGVzY2VuZGluZyQyO1xuICBleHBvcnRzLnN0YWNrT3JkZXJJbnNpZGVPdXQgPSBpbnNpZGVPdXQ7XG4gIGV4cG9ydHMuc3RhY2tPcmRlck5vbmUgPSBub25lJDE7XG4gIGV4cG9ydHMuc3RhY2tPcmRlclJldmVyc2UgPSByZXZlcnNlO1xuICBleHBvcnRzLmNvbG9yID0gY29sb3I7XG4gIGV4cG9ydHMucmdiID0gY29sb3JSZ2I7XG4gIGV4cG9ydHMuaHNsID0gY29sb3JIc2w7XG4gIGV4cG9ydHMubGFiID0gbGFiO1xuICBleHBvcnRzLmhjbCA9IGNvbG9ySGNsO1xuICBleHBvcnRzLmN1YmVoZWxpeCA9IGN1YmVoZWxpeDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlO1xuICBleHBvcnRzLmludGVycG9sYXRlQXJyYXkgPSBhcnJheSQxO1xuICBleHBvcnRzLmludGVycG9sYXRlRGF0ZSA9IGRhdGU7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVOdW1iZXIgPSBpbnRlcnBvbGF0ZU51bWJlcjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU9iamVjdCA9IG9iamVjdDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJvdW5kID0gaW50ZXJwb2xhdGVSb3VuZDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVN0cmluZyA9IGludGVycG9sYXRlU3RyaW5nO1xuICBleHBvcnRzLmludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtJDI7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVab29tID0gaW50ZXJwb2xhdGVab29tO1xuICBleHBvcnRzLmludGVycG9sYXRlUmdiID0gaW50ZXJwb2xhdGVSZ2I7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpcyA9IHJnYkJhc2lzO1xuICBleHBvcnRzLmludGVycG9sYXRlUmdiQmFzaXNDbG9zZWQgPSByZ2JCYXNpc0Nsb3NlZDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUhzbCA9IGhzbCQxO1xuICBleHBvcnRzLmludGVycG9sYXRlSHNsTG9uZyA9IGhzbExvbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVMYWIgPSBsYWIkMTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUhjbCA9IGhjbCQxO1xuICBleHBvcnRzLmludGVycG9sYXRlSGNsTG9uZyA9IGhjbExvbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDdWJlaGVsaXggPSBjdWJlaGVsaXgkMjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpcyA9IGJhc2lzJDI7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpc0Nsb3NlZCA9IGJhc2lzQ2xvc2VkJDE7XG4gIGV4cG9ydHMucXVhbnRpemUgPSBxdWFudGl6ZTtcbiAgZXhwb3J0cy5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICBleHBvcnRzLmRzdkZvcm1hdCA9IGRzdjtcbiAgZXhwb3J0cy5jc3ZQYXJzZSA9IGNzdlBhcnNlO1xuICBleHBvcnRzLmNzdlBhcnNlUm93cyA9IGNzdlBhcnNlUm93cztcbiAgZXhwb3J0cy5jc3ZGb3JtYXQgPSBjc3ZGb3JtYXQ7XG4gIGV4cG9ydHMuY3N2Rm9ybWF0Um93cyA9IGNzdkZvcm1hdFJvd3M7XG4gIGV4cG9ydHMudHN2UGFyc2UgPSB0c3ZQYXJzZTtcbiAgZXhwb3J0cy50c3ZQYXJzZVJvd3MgPSB0c3ZQYXJzZVJvd3M7XG4gIGV4cG9ydHMudHN2Rm9ybWF0ID0gdHN2Rm9ybWF0O1xuICBleHBvcnRzLnRzdkZvcm1hdFJvd3MgPSB0c3ZGb3JtYXRSb3dzO1xuICBleHBvcnRzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBleHBvcnRzLmh0bWwgPSBodG1sO1xuICBleHBvcnRzLmpzb24gPSBqc29uO1xuICBleHBvcnRzLnRleHQgPSB0ZXh0O1xuICBleHBvcnRzLnhtbCA9IHhtbDtcbiAgZXhwb3J0cy5jc3YgPSBjc3YkMTtcbiAgZXhwb3J0cy50c3YgPSB0c3YkMTtcbiAgZXhwb3J0cy5ub3cgPSBub3c7XG4gIGV4cG9ydHMudGltZXIgPSB0aW1lcjtcbiAgZXhwb3J0cy50aW1lckZsdXNoID0gdGltZXJGbHVzaDtcbiAgZXhwb3J0cy50aW1lb3V0ID0gdGltZW91dCQxO1xuICBleHBvcnRzLmludGVydmFsID0gaW50ZXJ2YWwkMTtcbiAgZXhwb3J0cy50aW1lSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcbiAgZXhwb3J0cy50aW1lTWlsbGlzZWNvbmQgPSBtaWxsaXNlY29uZDtcbiAgZXhwb3J0cy50aW1lTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICBleHBvcnRzLnRpbWVTZWNvbmQgPSBzZWNvbmQ7XG4gIGV4cG9ydHMudGltZVNlY29uZHMgPSBzZWNvbmRzO1xuICBleHBvcnRzLnRpbWVNaW51dGUgPSBtaW51dGU7XG4gIGV4cG9ydHMudGltZU1pbnV0ZXMgPSBtaW51dGVzO1xuICBleHBvcnRzLnRpbWVIb3VyID0gaG91cjtcbiAgZXhwb3J0cy50aW1lSG91cnMgPSBob3VycztcbiAgZXhwb3J0cy50aW1lRGF5ID0gZGF5O1xuICBleHBvcnRzLnRpbWVEYXlzID0gZGF5cztcbiAgZXhwb3J0cy50aW1lV2VlayA9IHRpbWVXZWVrO1xuICBleHBvcnRzLnRpbWVXZWVrcyA9IHN1bmRheXM7XG4gIGV4cG9ydHMudGltZVN1bmRheSA9IHRpbWVXZWVrO1xuICBleHBvcnRzLnRpbWVTdW5kYXlzID0gc3VuZGF5cztcbiAgZXhwb3J0cy50aW1lTW9uZGF5ID0gdGltZU1vbmRheTtcbiAgZXhwb3J0cy50aW1lTW9uZGF5cyA9IG1vbmRheXM7XG4gIGV4cG9ydHMudGltZVR1ZXNkYXkgPSB0dWVzZGF5O1xuICBleHBvcnRzLnRpbWVUdWVzZGF5cyA9IHR1ZXNkYXlzO1xuICBleHBvcnRzLnRpbWVXZWRuZXNkYXkgPSB3ZWRuZXNkYXk7XG4gIGV4cG9ydHMudGltZVdlZG5lc2RheXMgPSB3ZWRuZXNkYXlzO1xuICBleHBvcnRzLnRpbWVUaHVyc2RheSA9IHRodXJzZGF5O1xuICBleHBvcnRzLnRpbWVUaHVyc2RheXMgPSB0aHVyc2RheXM7XG4gIGV4cG9ydHMudGltZUZyaWRheSA9IGZyaWRheTtcbiAgZXhwb3J0cy50aW1lRnJpZGF5cyA9IGZyaWRheXM7XG4gIGV4cG9ydHMudGltZVNhdHVyZGF5ID0gc2F0dXJkYXk7XG4gIGV4cG9ydHMudGltZVNhdHVyZGF5cyA9IHNhdHVyZGF5cztcbiAgZXhwb3J0cy50aW1lTW9udGggPSBtb250aDtcbiAgZXhwb3J0cy50aW1lTW9udGhzID0gbW9udGhzO1xuICBleHBvcnRzLnRpbWVZZWFyID0geWVhcjtcbiAgZXhwb3J0cy50aW1lWWVhcnMgPSB5ZWFycztcbiAgZXhwb3J0cy51dGNNaWxsaXNlY29uZCA9IG1pbGxpc2Vjb25kO1xuICBleHBvcnRzLnV0Y01pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbiAgZXhwb3J0cy51dGNTZWNvbmQgPSBzZWNvbmQ7XG4gIGV4cG9ydHMudXRjU2Vjb25kcyA9IHNlY29uZHM7XG4gIGV4cG9ydHMudXRjTWludXRlID0gdXRjTWludXRlO1xuICBleHBvcnRzLnV0Y01pbnV0ZXMgPSB1dGNNaW51dGVzO1xuICBleHBvcnRzLnV0Y0hvdXIgPSB1dGNIb3VyO1xuICBleHBvcnRzLnV0Y0hvdXJzID0gdXRjSG91cnM7XG4gIGV4cG9ydHMudXRjRGF5ID0gdXRjRGF5O1xuICBleHBvcnRzLnV0Y0RheXMgPSB1dGNEYXlzO1xuICBleHBvcnRzLnV0Y1dlZWsgPSB1dGNXZWVrO1xuICBleHBvcnRzLnV0Y1dlZWtzID0gdXRjU3VuZGF5cztcbiAgZXhwb3J0cy51dGNTdW5kYXkgPSB1dGNXZWVrO1xuICBleHBvcnRzLnV0Y1N1bmRheXMgPSB1dGNTdW5kYXlzO1xuICBleHBvcnRzLnV0Y01vbmRheSA9IHV0Y01vbmRheTtcbiAgZXhwb3J0cy51dGNNb25kYXlzID0gdXRjTW9uZGF5cztcbiAgZXhwb3J0cy51dGNUdWVzZGF5ID0gdXRjVHVlc2RheTtcbiAgZXhwb3J0cy51dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXlzO1xuICBleHBvcnRzLnV0Y1dlZG5lc2RheSA9IHV0Y1dlZG5lc2RheTtcbiAgZXhwb3J0cy51dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5cztcbiAgZXhwb3J0cy51dGNUaHVyc2RheSA9IHV0Y1RodXJzZGF5O1xuICBleHBvcnRzLnV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5cztcbiAgZXhwb3J0cy51dGNGcmlkYXkgPSB1dGNGcmlkYXk7XG4gIGV4cG9ydHMudXRjRnJpZGF5cyA9IHV0Y0ZyaWRheXM7XG4gIGV4cG9ydHMudXRjU2F0dXJkYXkgPSB1dGNTYXR1cmRheTtcbiAgZXhwb3J0cy51dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheXM7XG4gIGV4cG9ydHMudXRjTW9udGggPSB1dGNNb250aDtcbiAgZXhwb3J0cy51dGNNb250aHMgPSB1dGNNb250aHM7XG4gIGV4cG9ydHMudXRjWWVhciA9IHV0Y1llYXI7XG4gIGV4cG9ydHMudXRjWWVhcnMgPSB1dGNZZWFycztcbiAgZXhwb3J0cy5mb3JtYXRMb2NhbGUgPSBmb3JtYXRMb2NhbGU7XG4gIGV4cG9ydHMuZm9ybWF0RGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGU7XG4gIGV4cG9ydHMuZm9ybWF0U3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyO1xuICBleHBvcnRzLnByZWNpc2lvbkZpeGVkID0gcHJlY2lzaW9uRml4ZWQ7XG4gIGV4cG9ydHMucHJlY2lzaW9uUHJlZml4ID0gcHJlY2lzaW9uUHJlZml4O1xuICBleHBvcnRzLnByZWNpc2lvblJvdW5kID0gcHJlY2lzaW9uUm91bmQ7XG4gIGV4cG9ydHMuaXNvRm9ybWF0ID0gZm9ybWF0SXNvO1xuICBleHBvcnRzLmlzb1BhcnNlID0gcGFyc2VJc287XG4gIGV4cG9ydHMudGltZUZvcm1hdExvY2FsZSA9IGZvcm1hdExvY2FsZSQxO1xuICBleHBvcnRzLnRpbWVGb3JtYXREZWZhdWx0TG9jYWxlID0gZGVmYXVsdExvY2FsZSQxO1xuICBleHBvcnRzLnNjYWxlQmFuZCA9IGJhbmQ7XG4gIGV4cG9ydHMuc2NhbGVQb2ludCA9IHBvaW50JDQ7XG4gIGV4cG9ydHMuc2NhbGVJZGVudGl0eSA9IGlkZW50aXR5JDQ7XG4gIGV4cG9ydHMuc2NhbGVMaW5lYXIgPSBsaW5lYXIkMjtcbiAgZXhwb3J0cy5zY2FsZUxvZyA9IGxvZztcbiAgZXhwb3J0cy5zY2FsZU9yZGluYWwgPSBvcmRpbmFsO1xuICBleHBvcnRzLnNjYWxlSW1wbGljaXQgPSBpbXBsaWNpdDtcbiAgZXhwb3J0cy5zY2FsZVBvdyA9IHBvdztcbiAgZXhwb3J0cy5zY2FsZVNxcnQgPSBzcXJ0O1xuICBleHBvcnRzLnNjYWxlUXVhbnRpbGUgPSBxdWFudGlsZTtcbiAgZXhwb3J0cy5zY2FsZVF1YW50aXplID0gcXVhbnRpemUkMTtcbiAgZXhwb3J0cy5zY2FsZVRocmVzaG9sZCA9IHRocmVzaG9sZCQxO1xuICBleHBvcnRzLnNjYWxlVGltZSA9IHRpbWU7XG4gIGV4cG9ydHMuc2NhbGVVdGMgPSB1dGNUaW1lO1xuICBleHBvcnRzLnNjaGVtZUNhdGVnb3J5MTAgPSBjYXRlZ29yeTEwO1xuICBleHBvcnRzLnNjaGVtZUNhdGVnb3J5MjBiID0gY2F0ZWdvcnkyMGI7XG4gIGV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMGMgPSBjYXRlZ29yeTIwYztcbiAgZXhwb3J0cy5zY2hlbWVDYXRlZ29yeTIwID0gY2F0ZWdvcnkyMDtcbiAgZXhwb3J0cy5zY2FsZVNlcXVlbnRpYWwgPSBzZXF1ZW50aWFsO1xuICBleHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4RGVmYXVsdCA9IGN1YmVoZWxpeCQzO1xuICBleHBvcnRzLmludGVycG9sYXRlUmFpbmJvdyA9IHJhaW5ib3ckMTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVdhcm0gPSB3YXJtO1xuICBleHBvcnRzLmludGVycG9sYXRlQ29vbCA9IGNvb2w7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVWaXJpZGlzID0gdmlyaWRpcztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU1hZ21hID0gbWFnbWE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVJbmZlcm5vID0gaW5mZXJubztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVBsYXNtYSA9IHBsYXNtYTtcbiAgZXhwb3J0cy5jcmVhdG9yID0gY3JlYXRvcjtcbiAgZXhwb3J0cy5jdXN0b21FdmVudCA9IGN1c3RvbUV2ZW50O1xuICBleHBvcnRzLmxvY2FsID0gbG9jYWw7XG4gIGV4cG9ydHMubWF0Y2hlciA9IG1hdGNoZXIkMTtcbiAgZXhwb3J0cy5tb3VzZSA9IG1vdXNlO1xuICBleHBvcnRzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZXhwb3J0cy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcbiAgZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG4gIGV4cG9ydHMuc2VsZWN0QWxsID0gc2VsZWN0QWxsO1xuICBleHBvcnRzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgZXhwb3J0cy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICBleHBvcnRzLnNlbGVjdG9yQWxsID0gc2VsZWN0b3JBbGw7XG4gIGV4cG9ydHMudG91Y2ggPSB0b3VjaDtcbiAgZXhwb3J0cy50b3VjaGVzID0gdG91Y2hlcztcbiAgZXhwb3J0cy53aW5kb3cgPSB3aW5kb3c7XG4gIGV4cG9ydHMuYWN0aXZlID0gYWN0aXZlO1xuICBleHBvcnRzLmludGVycnVwdCA9IGludGVycnVwdDtcbiAgZXhwb3J0cy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgZXhwb3J0cy5heGlzVG9wID0gYXhpc1RvcDtcbiAgZXhwb3J0cy5heGlzUmlnaHQgPSBheGlzUmlnaHQ7XG4gIGV4cG9ydHMuYXhpc0JvdHRvbSA9IGF4aXNCb3R0b207XG4gIGV4cG9ydHMuYXhpc0xlZnQgPSBheGlzTGVmdDtcbiAgZXhwb3J0cy5jbHVzdGVyID0gY2x1c3RlcjtcbiAgZXhwb3J0cy5oaWVyYXJjaHkgPSBoaWVyYXJjaHk7XG4gIGV4cG9ydHMucGFjayA9IGluZGV4O1xuICBleHBvcnRzLnBhY2tTaWJsaW5ncyA9IHNpYmxpbmdzO1xuICBleHBvcnRzLnBhY2tFbmNsb3NlID0gZW5jbG9zZTtcbiAgZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gIGV4cG9ydHMuc3RyYXRpZnkgPSBzdHJhdGlmeTtcbiAgZXhwb3J0cy50cmVlID0gdHJlZTtcbiAgZXhwb3J0cy50cmVlbWFwID0gaW5kZXgkMTtcbiAgZXhwb3J0cy50cmVlbWFwQmluYXJ5ID0gYmluYXJ5O1xuICBleHBvcnRzLnRyZWVtYXBEaWNlID0gdHJlZW1hcERpY2U7XG4gIGV4cG9ydHMudHJlZW1hcFNsaWNlID0gdHJlZW1hcFNsaWNlO1xuICBleHBvcnRzLnRyZWVtYXBTbGljZURpY2UgPSBzbGljZURpY2U7XG4gIGV4cG9ydHMudHJlZW1hcFNxdWFyaWZ5ID0gc3F1YXJpZnk7XG4gIGV4cG9ydHMudHJlZW1hcFJlc3F1YXJpZnkgPSByZXNxdWFyaWZ5O1xuICBleHBvcnRzLmZvcmNlQ2VudGVyID0gY2VudGVyJDE7XG4gIGV4cG9ydHMuZm9yY2VDb2xsaWRlID0gY29sbGlkZTtcbiAgZXhwb3J0cy5mb3JjZUxpbmsgPSBsaW5rO1xuICBleHBvcnRzLmZvcmNlTWFueUJvZHkgPSBtYW55Qm9keTtcbiAgZXhwb3J0cy5mb3JjZVNpbXVsYXRpb24gPSBzaW11bGF0aW9uO1xuICBleHBvcnRzLmZvcmNlWCA9IHgkMztcbiAgZXhwb3J0cy5mb3JjZVkgPSB5JDM7XG4gIGV4cG9ydHMuZHJhZyA9IGRyYWc7XG4gIGV4cG9ydHMuZHJhZ0Rpc2FibGUgPSBkcmFnRGlzYWJsZTtcbiAgZXhwb3J0cy5kcmFnRW5hYmxlID0gZHJhZ0VuYWJsZTtcbiAgZXhwb3J0cy52b3Jvbm9pID0gdm9yb25vaTtcbiAgZXhwb3J0cy56b29tID0gem9vbTtcbiAgZXhwb3J0cy56b29tSWRlbnRpdHkgPSBpZGVudGl0eSQ2O1xuICBleHBvcnRzLnpvb21UcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIGV4cG9ydHMuYnJ1c2ggPSBicnVzaDtcbiAgZXhwb3J0cy5icnVzaFggPSBicnVzaFg7XG4gIGV4cG9ydHMuYnJ1c2hZID0gYnJ1c2hZO1xuICBleHBvcnRzLmJydXNoU2VsZWN0aW9uID0gYnJ1c2hTZWxlY3Rpb247XG4gIGV4cG9ydHMuY2hvcmQgPSBjaG9yZDtcbiAgZXhwb3J0cy5yaWJib24gPSByaWJib247XG4gIGV4cG9ydHMuZ2VvQWxiZXJzID0gYWxiZXJzO1xuICBleHBvcnRzLmdlb0FsYmVyc1VzYSA9IGFsYmVyc1VzYTtcbiAgZXhwb3J0cy5nZW9BcmVhID0gYXJlYSQyO1xuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWFsQXJlYSA9IGF6aW11dGhhbEVxdWFsQXJlYTtcbiAgZXhwb3J0cy5nZW9BemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxFcXVhbEFyZWFSYXc7XG4gIGV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQgPSBhemltdXRoYWxFcXVpZGlzdGFudDtcbiAgZXhwb3J0cy5nZW9BemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbEVxdWlkaXN0YW50UmF3O1xuICBleHBvcnRzLmdlb0JvdW5kcyA9IGJvdW5kcztcbiAgZXhwb3J0cy5nZW9DZW50cm9pZCA9IGNlbnRyb2lkJDE7XG4gIGV4cG9ydHMuZ2VvQ2lyY2xlID0gY2lyY2xlJDE7XG4gIGV4cG9ydHMuZ2VvQ2xpcEV4dGVudCA9IGV4dGVudCQxO1xuICBleHBvcnRzLmdlb0NvbmljQ29uZm9ybWFsID0gY29uaWNDb25mb3JtYWw7XG4gIGV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWxSYXcgPSBjb25pY0NvbmZvcm1hbFJhdztcbiAgZXhwb3J0cy5nZW9Db25pY0VxdWFsQXJlYSA9IGNvbmljRXF1YWxBcmVhO1xuICBleHBvcnRzLmdlb0NvbmljRXF1YWxBcmVhUmF3ID0gY29uaWNFcXVhbEFyZWFSYXc7XG4gIGV4cG9ydHMuZ2VvQ29uaWNFcXVpZGlzdGFudCA9IGNvbmljRXF1aWRpc3RhbnQ7XG4gIGV4cG9ydHMuZ2VvQ29uaWNFcXVpZGlzdGFudFJhdyA9IGNvbmljRXF1aWRpc3RhbnRSYXc7XG4gIGV4cG9ydHMuZ2VvRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgZXhwb3J0cy5nZW9FcXVpcmVjdGFuZ3VsYXIgPSBlcXVpcmVjdGFuZ3VsYXI7XG4gIGV4cG9ydHMuZ2VvRXF1aXJlY3Rhbmd1bGFyUmF3ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuICBleHBvcnRzLmdlb0dub21vbmljID0gZ25vbW9uaWM7XG4gIGV4cG9ydHMuZ2VvR25vbW9uaWNSYXcgPSBnbm9tb25pY1JhdztcbiAgZXhwb3J0cy5nZW9HcmF0aWN1bGUgPSBncmF0aWN1bGU7XG4gIGV4cG9ydHMuZ2VvSW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZSQyO1xuICBleHBvcnRzLmdlb0xlbmd0aCA9IGxlbmd0aCQyO1xuICBleHBvcnRzLmdlb01lcmNhdG9yID0gbWVyY2F0b3I7XG4gIGV4cG9ydHMuZ2VvTWVyY2F0b3JSYXcgPSBtZXJjYXRvclJhdztcbiAgZXhwb3J0cy5nZW9PcnRob2dyYXBoaWMgPSBvcnRob2dyYXBoaWM7XG4gIGV4cG9ydHMuZ2VvT3J0aG9ncmFwaGljUmF3ID0gb3J0aG9ncmFwaGljUmF3O1xuICBleHBvcnRzLmdlb1BhdGggPSBpbmRleCQzO1xuICBleHBvcnRzLmdlb1Byb2plY3Rpb24gPSBwcm9qZWN0aW9uO1xuICBleHBvcnRzLmdlb1Byb2plY3Rpb25NdXRhdG9yID0gcHJvamVjdGlvbk11dGF0b3I7XG4gIGV4cG9ydHMuZ2VvUm90YXRpb24gPSByb3RhdGlvbjtcbiAgZXhwb3J0cy5nZW9TdGVyZW9ncmFwaGljID0gc3RlcmVvZ3JhcGhpYztcbiAgZXhwb3J0cy5nZW9TdGVyZW9ncmFwaGljUmF3ID0gc3RlcmVvZ3JhcGhpY1JhdztcbiAgZXhwb3J0cy5nZW9TdHJlYW0gPSBzdHJlYW07XG4gIGV4cG9ydHMuZ2VvVHJhbnNmb3JtID0gdHJhbnNmb3JtJDE7XG4gIGV4cG9ydHMuZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yID0gdHJhbnN2ZXJzZU1lcmNhdG9yO1xuICBleHBvcnRzLmdlb1RyYW5zdmVyc2VNZXJjYXRvclJhdyA9IHRyYW5zdmVyc2VNZXJjYXRvclJhdztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7IiwiaW1wb3J0IHtQbG9pZHl9IGZyb20gJy4vcGxvaWR5JztcblxuZXhwb3J0IGNsYXNzIENvbG9yIHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgIC8vIElkZW9ncmFtIGNvbmZpZ1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9wbG9pZHkgPSBuZXcgUGxvaWR5KHRoaXMuX2NvbmZpZyk7XG4gIH1cblxuICBnZXRBcm1Db2xvcihjaHJTZXROdW1iZXIsIGNock51bWJlciwgYXJtTnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hcm1Db2xvcnMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb25maWcuYXJtQ29sb3JzW2FybU51bWJlcl07XG4gICAgfSBlbHNlIGlmICh0aGlzLl9jb25maWcuYW5jZXN0b3JzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0UG9seXBsb2lkQXJtQ29sb3IoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGdldEJvcmRlckNvbG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBhcm1OdW1iZXIpIHtcbiAgICBpZiAoY2hyTnVtYmVyIDwgdGhpcy5fY29uZmlnLnBsb2lkeSkge1xuICAgICAgcmV0dXJuICcjMDAwJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3Bsb2lkeS5leGlzdHMoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcikpIHtcbiAgICAgIHJldHVybiAnIzAwMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnI2ZmZic7XG4gICAgfVxuICB9XG5cbiAgX2dldFBvbHlwbG9pZEFybUNvbG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBhcm1OdW1iZXIpIHtcbiAgICBpZiAoIXRoaXMuX3Bsb2lkeS5leGlzdHMoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcikpIHtcbiAgICAgIHJldHVybiAndHJhbnNwYXJlbnQnO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPVxuICAgICAgICB0aGlzLl9wbG9pZHkuZ2V0QW5jZXN0b3IoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcik7XG4gICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmFuY2VzdG9yc1thbmNlc3Rvcl07XG4gICAgfVxuICB9XG5cbn1cbiIsIi8vIERldmVsb3BlZCBieSBFcmljIFdlaXR6IChodHRwczovL2dpdGh1Yi5jb20vZXdlaXR6KVxuXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5cbmltcG9ydCB7UGxvaWR5fSBmcm9tICcuL3Bsb2lkeSc7XG5pbXBvcnQge0xheW91dH0gZnJvbSAnLi9sYXlvdXRzL2xheW91dCc7XG5pbXBvcnQge01vZGVsQWRhcHRlcn0gZnJvbSAnLi9tb2RlbC1hZGFwdGVyJztcbmltcG9ydCB7Q2hyb21vc29tZX0gZnJvbSAnLi92aWV3cy9jaHJvbW9zb21lJztcblxuZXhwb3J0IGNsYXNzIElkZW9ncmFtIHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgb3JpZW50YXRpb24sXG4gICAgICBjaHJXaWR0aCwgY2hySGVpZ2h0LFxuICAgICAgY29udGFpbmVyLCByZWN0O1xuXG4gICAgLy8gQ2xvbmUgdGhlIGNvbmZpZyBvYmplY3QsIHRvIGFsbG93IG11bHRpcGxlIGluc3RhbnRpYXRpb25zXG4gICAgLy8gd2l0aG91dCBwaWNraW5nIHVwIHByaW9yIGlkZW9ncmFtJ3Mgc2V0dGluZ3NcbiAgICB0aGlzLmNvbmZpZyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XG5cbiAgICAvLyBUT0RPOiBEb2N1bWVudCB0aGlzXG4gICAgdGhpcy5fYmFuZHNYT2Zmc2V0ID0gMzA7XG5cbiAgICB0aGlzLmRlYnVnID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLmRhdGFEaXIpIHtcbiAgICAgIHRoaXMuY29uZmlnLmRhdGFEaXIgPSAnLi4vZGF0YS9iYW5kcy9uYXRpdmUvJztcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnBsb2lkeSkge1xuICAgICAgdGhpcy5jb25maWcucGxvaWR5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcucGxvaWR5ID4gMSkge1xuICAgICAgdGhpcy5zZXhDaHJvbW9zb21lcyA9IHt9O1xuICAgICAgaWYgKCF0aGlzLmNvbmZpZy5zZXgpIHtcbiAgICAgICAgLy8gRGVmYXVsdCB0byAnbWFsZScgcGVyIGh1bWFuLCBtb3VzZSByZWZlcmVuY2UgZ2Vub21lcy5cbiAgICAgICAgLy8gVE9ETzogVGhlIGRlZmF1bHQgc2V4IHZhbHVlIHNob3VsZCBwcm9iYWJseSBiZSB0aGUgaGV0ZXJvZ2FtZXRpYyBzZXgsXG4gICAgICAgIC8vIGkuZS4gd2hpY2hldmVyIHNleCBoYXMgYWxsb3NvbWVzIHRoYXQgZGlmZmVyIGluIG1vcnBob2xvZ3kuXG4gICAgICAgIC8vIEluIG1hbW1hbHMgYW5kIG1vc3QgaW5zZWN0cyB0aGF0IGlzIHRoZSBtYWxlLlxuICAgICAgICAvLyBIb3dldmVyLCBpbiBiaXJkcyBhbmQgcmVwdGlsZXMsIHRoYXQgaXMgZmVtYWxlLlxuICAgICAgICB0aGlzLmNvbmZpZy5zZXggPSAnbWFsZSc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb25maWcucGxvaWR5ID09PSAyICYmICF0aGlzLmNvbmZpZy5hbmNlc3RvcnMpIHtcbiAgICAgICAgdGhpcy5jb25maWcuYW5jZXN0b3JzID0ge006ICcjZmZiNmMxJywgUDogJyNhZGQ4ZTYnfTtcbiAgICAgICAgdGhpcy5jb25maWcucGxvaWR5RGVzYyA9ICdNUCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuY29uZmlnLmNvbnRhaW5lciA9ICdib2R5JztcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdG9yID0gdGhpcy5jb25maWcuY29udGFpbmVyICsgJyAjX2lkZW9ncmFtJztcblxuICAgIGlmICghdGhpcy5jb25maWcucmVzb2x1dGlvbikge1xuICAgICAgdGhpcy5jb25maWcucmVzb2x1dGlvbiA9IDg1MDtcbiAgICB9XG5cbiAgICBpZiAoJ3Nob3dDaHJvbW9zb21lTGFiZWxzJyBpbiB0aGlzLmNvbmZpZyA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dDaHJvbW9zb21lTGFiZWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLm9yaWVudGF0aW9uKSB7XG4gICAgICBvcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gICAgICB0aGlzLmNvbmZpZy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25maWcuY2hySGVpZ2h0KSB7XG4gICAgICBjb250YWluZXIgPSB0aGlzLmNvbmZpZy5jb250YWluZXI7XG4gICAgICByZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgY2hySGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaHJIZWlnaHQgPSByZWN0LndpZHRoO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGFpbmVyID09PSAnYm9keScpIHtcbiAgICAgICAgY2hySGVpZ2h0ID0gNDAwO1xuICAgICAgfVxuICAgICAgdGhpcy5jb25maWcuY2hySGVpZ2h0ID0gY2hySGVpZ2h0O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25maWcuY2hyV2lkdGgpIHtcbiAgICAgIGNocldpZHRoID0gMTA7XG4gICAgICBjaHJIZWlnaHQgPSB0aGlzLmNvbmZpZy5jaHJIZWlnaHQ7XG5cbiAgICAgIGlmIChjaHJIZWlnaHQgPCA5MDAgJiYgY2hySGVpZ2h0ID4gNTAwKSB7XG4gICAgICAgIGNocldpZHRoID0gTWF0aC5yb3VuZChjaHJIZWlnaHQgLyA0MCk7XG4gICAgICB9IGVsc2UgaWYgKGNockhlaWdodCA+PSA5MDApIHtcbiAgICAgICAgY2hyV2lkdGggPSBNYXRoLnJvdW5kKGNockhlaWdodCAvIDQ1KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29uZmlnLmNocldpZHRoID0gY2hyV2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5jaHJNYXJnaW4pIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5wbG9pZHkgPT09IDEpIHtcbiAgICAgICAgdGhpcy5jb25maWcuY2hyTWFyZ2luID0gMTA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0cyBwb2x5cGxvaWQgY2hyb21vc29tZXMgdG8gcmVsYXRpdmVseSBzbWFsbCBpbnRlcmNocm9tYXRpZCBnYXBcbiAgICAgICAgdGhpcy5jb25maWcuY2hyTWFyZ2luID0gTWF0aC5yb3VuZCh0aGlzLmNvbmZpZy5jaHJXaWR0aCAvIDQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25maWcuc2hvd0JhbmRMYWJlbHMpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dCYW5kTGFiZWxzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCdzaG93RnVsbHlCYW5kZWQnIGluIHRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZy5zaG93RnVsbHlCYW5kZWQgPSB0aGlzLmNvbmZpZy5zaG93RnVsbHlCYW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dGdWxseUJhbmRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5icnVzaCkge1xuICAgICAgdGhpcy5jb25maWcuYnJ1c2ggPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnJvd3MpIHtcbiAgICAgIHRoaXMuY29uZmlnLnJvd3MgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuYnVtcCA9IE1hdGgucm91bmQodGhpcy5jb25maWcuY2hySGVpZ2h0IC8gMTI1KTtcbiAgICB0aGlzLmFkanVzdGVkQnVtcCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmNvbmZpZy5jaHJIZWlnaHQgPCAyMDApIHtcbiAgICAgIHRoaXMuYWRqdXN0ZWRCdW1wID0gdHJ1ZTtcbiAgICAgIHRoaXMuYnVtcCA9IDQ7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5zaG93QmFuZExhYmVscykge1xuICAgICAgdGhpcy5jb25maWcuY2hyTWFyZ2luICs9IDIwO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2hyb21vc29tZSkge1xuICAgICAgdGhpcy5jb25maWcuY2hyb21vc29tZXMgPSBbY29uZmlnLmNocm9tb3NvbWVdO1xuICAgICAgaWYgKCdzaG93QmFuZExhYmVscycgaW4gY29uZmlnID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5zaG93QmFuZExhYmVscyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoJ3JvdGF0YWJsZScgaW4gY29uZmlnID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5yb3RhdGFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnNob3dOb25OdWNsZWFyQ2hyb21vc29tZXMpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNob3dOb25OdWNsZWFyQ2hyb21vc29tZXMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRBbm5vdFNldHRpbmdzKCk7XG5cbiAgICB0aGlzLmNvbmZpZy5jaHJNYXJnaW4gPSAoXG4gICAgdGhpcy5jb25maWcuY2hyTWFyZ2luICtcbiAgICB0aGlzLmNvbmZpZy5jaHJXaWR0aCArXG4gICAgdGhpcy5jb25maWcuYW5ub3RUcmFja3NIZWlnaHQgKiAyXG4gICk7XG5cbiAgICBpZiAoY29uZmlnLm9uTG9hZCkge1xuICAgICAgdGhpcy5vbkxvYWRDYWxsYmFjayA9IGNvbmZpZy5vbkxvYWQ7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5vbkRyYXdBbm5vdHMpIHtcbiAgICAgIHRoaXMub25EcmF3QW5ub3RzQ2FsbGJhY2sgPSBjb25maWcub25EcmF3QW5ub3RzO1xuICAgIH1cblxuICAgIGlmIChjb25maWcub25CcnVzaE1vdmUpIHtcbiAgICAgIHRoaXMub25CcnVzaE1vdmVDYWxsYmFjayA9IGNvbmZpZy5vbkJydXNoTW92ZTtcbiAgICB9XG5cbiAgICB0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSAnaXNjbic7XG5cbiAgICB0aGlzLm1heExlbmd0aCA9IHtcbiAgICAgIGJwOiAwLFxuICAgICAgaXNjbjogMFxuICAgIH07XG5cbiAgICAvLyBUaGUgRS1VdGlsaWVzIEluIERlcHRoOiBQYXJhbWV0ZXJzLCBTeW50YXggYW5kIE1vcmU6XG4gICAgLy8gaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9ib29rcy9OQksyNTQ5OS9cbiAgICB0aGlzLmV1dGlscyA9ICdodHRwczovL2V1dGlscy5uY2JpLm5sbS5uaWguZ292L2VudHJlei9ldXRpbHMvJztcbiAgICB0aGlzLmVzZWFyY2ggPSB0aGlzLmV1dGlscyArICdlc2VhcmNoLmZjZ2k/cmV0bW9kZT1qc29uJztcbiAgICB0aGlzLmVzdW1tYXJ5ID0gdGhpcy5ldXRpbHMgKyAnZXN1bW1hcnkuZmNnaT9yZXRtb2RlPWpzb24nO1xuICAgIHRoaXMuZWxpbmsgPSB0aGlzLmV1dGlscyArICdlbGluay5mY2dpP3JldG1vZGU9anNvbic7XG5cbiAgICB0aGlzLm9yZ2FuaXNtcyA9IHtcbiAgICAgIDk2MDY6IHtcbiAgICAgICAgY29tbW9uTmFtZTogJ0h1bWFuJyxcbiAgICAgICAgc2NpZW50aWZpY05hbWU6ICdIb21vIHNhcGllbnMnLFxuICAgICAgICBzY2llbnRpZmljTmFtZUFiYnI6ICdILiBzYXBpZW5zJyxcbiAgICAgICAgYXNzZW1ibGllczoge1xuICAgICAgICAgIGRlZmF1bHQ6ICdHQ0ZfMDAwMDAxNDA1LjI2JywgLy8gR1JDaDM4XG4gICAgICAgICAgR1JDaDM4OiAnR0NGXzAwMDAwMTQwNS4yNicsXG4gICAgICAgICAgR1JDaDM3OiAnR0NGXzAwMDAwMTQwNS4xMydcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIDEwMDkwOiB7XG4gICAgICAgIGNvbW1vbk5hbWU6ICdNb3VzZScsXG4gICAgICAgIHNjaWVudGlmaWNOYW1lOiAnTXVzIG11c2N1bHVzJyxcbiAgICAgICAgc2NpZW50aWZpY05hbWVBYmJyOiAnTS4gbXVzY3VsdXMnLFxuICAgICAgICBhc3NlbWJsaWVzOiB7XG4gICAgICAgICAgZGVmYXVsdDogJ0dDRl8wMDAwMDE2MzUuMjAnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICA0NjQxOiB7XG4gICAgICAgIGNvbW1vbk5hbWU6ICdiYW5hbmEnLFxuICAgICAgICBzY2llbnRpZmljTmFtZTogJ011c2EgYWN1bWluYXRhJyxcbiAgICAgICAgc2NpZW50aWZpY05hbWVBYmJyOiAnTS4gYWN1bWluYXRhJyxcbiAgICAgICAgYXNzZW1ibGllczoge1xuICAgICAgICAgIGRlZmF1bHQ6ICdtb2NrJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEEgZmxhdCBhcnJheSBvZiBjaHJvbW9zb21lc1xuICAgIC8vICh0aGlzLmNocm9tb3NvbWVzIGlzIGFuIG9iamVjdCBvZlxuICAgIC8vIGFycmF5cyBvZiBjaHJvbW9zb21lcywga2V5ZWQgYnkgb3JnYW5pc20pXG4gICAgdGhpcy5jaHJvbW9zb21lc0FycmF5ID0gW107XG5cbiAgICB0aGlzLmJhbmRzVG9TaG93ID0gW107XG5cbiAgICB0aGlzLmNocm9tb3NvbWVzID0ge307XG4gICAgdGhpcy5udW1DaHJvbW9zb21lcyA9IDA7XG4gICAgdGhpcy5iYW5kRGF0YSA9IHt9O1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgKiBHZXRzIGNocm9tb3NvbWUgYmFuZCBkYXRhIGZyb20gYVxuICAqIFRTViBmaWxlLCBvciwgaWYgYmFuZCBkYXRhIGlzIHByZWZldGNoZWQsIGZyb20gYW4gYXJyYXlcbiAgKlxuICAqIFVDU0M6ICNjaHJvbSBjaHJvbVN0YXJ0ICBjaHJvbUVuZCAgbmFtZSAgZ2llU3RhaW5cbiAgKiBodHRwOi8vZ2Vub21lLnVjc2MuZWR1L2NnaS1iaW4vaGdUYWJsZXNcbiAgKiAgLSBncm91cDogTWFwcGluZyBhbmQgU2VxdWVuY2luZ1xuICAqICAtIHRyYWNrOiBDaHJvbW9zb21lIEJhbmQgKElkZW9ncmFtKVxuICAqXG4gICogTkNCSTogI2Nocm9tb3NvbWUgIGFybSBiYW5kICBpc2NuX3N0YXJ0ICBpc2NuX3N0b3AgYnBfc3RhcnQgIGJwX3N0b3Agc3RhaW4gZGVuc2l0eVxuICAqIGZ0cDovL2Z0cC5uY2JpLm5sbS5uaWguZ292L3B1Yi9nZHAvaWRlb2dyYW1fOTYwNl9HQ0ZfMDAwMDAxMzA1LjE0XzU1MF9WMVxuICAqL1xuICBnZXRCYW5kcyhjb250ZW50LCB0YXhpZCwgY2hyb21vc29tZXMpIHtcbiAgICB2YXIgbGluZXMgPSB7fSxcbiAgICAgIGRlbGltaXRlciwgdHN2TGluZXMsIGNvbHVtbnMsIGxpbmUsIHN0YWluLCBjaHIsXG4gICAgICBpLCBpbml0LCB0c3ZMaW5lc0xlbmd0aCwgc291cmNlLFxuICAgICAgc3RhcnQsIHN0b3AsIGZpcnN0Q29sdW1uLCB0bXA7XG5cbiAgICBpZiAoY29udGVudC5zbGljZSgwLCA4KSA9PT0gJ2NockJhbmRzJykge1xuICAgICAgc291cmNlID0gJ25hdGl2ZSc7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgIGNocm9tb3NvbWVzIGluc3RhbmNlb2YgQXJyYXkgJiZcbiAgICB0eXBlb2YgY2hyb21vc29tZXNbMF0gPT09ICdvYmplY3QnXG4gICkge1xuICAgICAgdG1wID0gW107XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2hyb21vc29tZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdG1wLnB1c2goY2hyb21vc29tZXNbaV0ubmFtZSk7XG4gICAgICB9XG4gICAgICBjaHJvbW9zb21lcyA9IHRtcDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNockJhbmRzID09PSAndW5kZWZpbmVkJyAmJiBzb3VyY2UgIT09ICduYXRpdmUnKSB7XG4gICAgICBkZWxpbWl0ZXIgPSAvXFx0LztcbiAgICAgIHRzdkxpbmVzID0gY29udGVudC5zcGxpdCgvXFxyXFxufFxcbi8pO1xuICAgICAgaW5pdCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGltaXRlciA9IC8gLztcbiAgICAgIGlmIChzb3VyY2UgPT09ICduYXRpdmUnKSB7XG4gICAgICAgIHRzdkxpbmVzID0gZXZhbChjb250ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRzdkxpbmVzID0gY29udGVudDtcbiAgICAgIH1cbiAgICAgIGluaXQgPSAwO1xuICAgIH1cblxuICAgIGZpcnN0Q29sdW1uID0gdHN2TGluZXNbMF0uc3BsaXQoZGVsaW1pdGVyKVswXTtcbiAgICBpZiAoZmlyc3RDb2x1bW4gPT09ICcjY2hyb21vc29tZScpIHtcbiAgICAgIHNvdXJjZSA9ICduY2JpJztcbiAgICB9IGVsc2UgaWYgKGZpcnN0Q29sdW1uID09PSAnI2Nocm9tJykge1xuICAgICAgc291cmNlID0gJ3Vjc2MnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2UgPSAnbmF0aXZlJztcbiAgICB9XG5cbiAgICB0c3ZMaW5lc0xlbmd0aCA9IHRzdkxpbmVzLmxlbmd0aDtcblxuICAgIGlmIChzb3VyY2UgPT09ICduY2JpJyB8fCBzb3VyY2UgPT09ICduYXRpdmUnKSB7XG4gICAgICBmb3IgKGkgPSBpbml0OyBpIDwgdHN2TGluZXNMZW5ndGg7IGkrKykge1xuICAgICAgICBjb2x1bW5zID0gdHN2TGluZXNbaV0uc3BsaXQoZGVsaW1pdGVyKTtcblxuICAgICAgICBjaHIgPSBjb2x1bW5zWzBdO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gSWYgYSBzcGVjaWZpYyBzZXQgb2YgY2hyb21vc29tZXMgaGFzIGJlZW4gcmVxdWVzdGVkLCBhbmRcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgY2hyb21vc29tZVxuICAgICAgICB0eXBlb2YgKGNocm9tb3NvbWVzKSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgY2hyb21vc29tZXMuaW5kZXhPZihjaHIpID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hyIGluIGxpbmVzID09PSBmYWxzZSkge1xuICAgICAgICAgIGxpbmVzW2Nocl0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YWluID0gY29sdW1uc1s3XTtcbiAgICAgICAgaWYgKGNvbHVtbnNbOF0pIHtcbiAgICAgICAgICAvLyBGb3IgZS5nLiBhY2VuIGFuZCBndmFyLCBjb2x1bW5zWzhdIChkZW5zaXR5KSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBzdGFpbiArPSBjb2x1bW5zWzhdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGluZSA9IHtcbiAgICAgICAgICBjaHI6IGNocixcbiAgICAgICAgICBicDoge1xuICAgICAgICAgICAgc3RhcnQ6IHBhcnNlSW50KGNvbHVtbnNbNV0sIDEwKSxcbiAgICAgICAgICAgIHN0b3A6IHBhcnNlSW50KGNvbHVtbnNbNl0sIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaXNjbjoge1xuICAgICAgICAgICAgc3RhcnQ6IHBhcnNlSW50KGNvbHVtbnNbM10sIDEwKSxcbiAgICAgICAgICAgIHN0b3A6IHBhcnNlSW50KGNvbHVtbnNbNF0sIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHg6IHtcbiAgICAgICAgICAgIHN0YXJ0OiAtMSxcbiAgICAgICAgICAgIHN0b3A6IC0xLFxuICAgICAgICAgICAgd2lkdGg6IC0xXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiBjb2x1bW5zWzFdICsgY29sdW1uc1syXSxcbiAgICAgICAgICBzdGFpbjogc3RhaW4sXG4gICAgICAgICAgdGF4aWQ6IHRheGlkXG4gICAgICAgIH07XG5cbiAgICAgICAgbGluZXNbY2hyXS5wdXNoKGxpbmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc291cmNlID09PSAndWNzYycpIHtcbiAgICAgIGZvciAoaSA9IGluaXQ7IGkgPCB0c3ZMaW5lc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vICNjaHJvbSBjaHJvbVN0YXJ0ICBjaHJvbUVuZCAgbmFtZSAgZ2llU3RhaW5cbiAgICAgICAgLy8gZS5nLiBmb3IgZmx5OlxuICAgICAgICAvLyBjaHI0XHQ2OTUwOFx0MTA4Mjk2XHQxMDJBMVx0bi9hXG4gICAgICAgIGNvbHVtbnMgPSB0c3ZMaW5lc1tpXS5zcGxpdChkZWxpbWl0ZXIpO1xuXG4gICAgICAgIGlmIChjb2x1bW5zWzBdICE9PSAnY2hyJyArIGNocm9tb3NvbWVOYW1lKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFpbiA9IGNvbHVtbnNbNF07XG4gICAgICAgIGlmIChzdGFpbiA9PT0gJ24vYScpIHtcbiAgICAgICAgICBzdGFpbiA9ICdncG9zMTAwJztcbiAgICAgICAgfVxuICAgICAgICBzdGFydCA9IHBhcnNlSW50KGNvbHVtbnNbMV0sIDEwKTtcbiAgICAgICAgc3RvcCA9IHBhcnNlSW50KGNvbHVtbnNbMl0sIDEwKTtcblxuICAgICAgICBsaW5lID0ge1xuICAgICAgICAgIGNocjogY29sdW1uc1swXS5zcGxpdCgnY2hyJylbMV0sXG4gICAgICAgICAgYnA6IHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgIHN0b3A6IHN0b3BcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzY246IHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgIHN0b3A6IHN0b3BcbiAgICAgICAgICB9LFxuICAgICAgICAgIHB4OiB7XG4gICAgICAgICAgICBzdGFydDogLTEsXG4gICAgICAgICAgICBzdG9wOiAtMSxcbiAgICAgICAgICAgIHdpZHRoOiAtMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogY29sdW1uc1szXSxcbiAgICAgICAgICBzdGFpbjogc3RhaW4sXG4gICAgICAgICAgdGF4aWQ6IHRheGlkXG4gICAgICAgIH07XG5cbiAgICAgICAgbGluZXNbY2hyXS5wdXNoKGxpbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsaW5lcztcbiAgfVxuXG4gIC8qKlxuICAqIEdlbmVyYXRlcyBhIG1vZGVsIG9iamVjdCBmb3IgZWFjaCBjaHJvbW9zb21lXG4gICogY29udGFpbmluZyBpbmZvcm1hdGlvbiBvbiBpdHMgbmFtZSwgRE9NIElELFxuICAqIGxlbmd0aCBpbiBiYXNlIHBhaXJzIG9yIElTQ04gY29vcmRpbmF0ZXMsXG4gICogY3l0b2dlbmV0aWMgYmFuZHMsIGNlbnRyb21lcmUgcG9zaXRpb24sIGV0Yy5cbiAgKi9cbiAgZ2V0Q2hyb21vc29tZU1vZGVsKGJhbmRzLCBjaHJvbW9zb21lLCB0YXhpZCwgY2hySW5kZXgpIHtcbiAgICB2YXIgY2hyID0ge30sXG4gICAgICBiYW5kLFxuICAgICAgd2lkdGgsIHB4U3RvcCxcbiAgICAgIGNockhlaWdodCA9IHRoaXMuY29uZmlnLmNockhlaWdodCxcbiAgICAgIG1heExlbmd0aCA9IHRoaXMubWF4TGVuZ3RoLFxuICAgICAgY2hyTGVuZ3RoLFxuICAgICAgY3MsIGhhc0JhbmRzO1xuXG4gICAgY3MgPSB0aGlzLmNvb3JkaW5hdGVTeXN0ZW07XG4gICAgaGFzQmFuZHMgPSAodHlwZW9mIGJhbmRzICE9PSAndW5kZWZpbmVkJyk7XG5cbiAgICBpZiAoaGFzQmFuZHMpIHtcbiAgICAgIGNoci5uYW1lID0gY2hyb21vc29tZTtcbiAgICAgIGNoci5sZW5ndGggPSBiYW5kc1tiYW5kcy5sZW5ndGggLSAxXVtjc10uc3RvcDtcbiAgICAgIGNoci50eXBlID0gJ251Y2xlYXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaHIgPSBjaHJvbW9zb21lO1xuICAgIH1cblxuICAgIGNoci5jaHJJbmRleCA9IGNockluZGV4O1xuXG4gICAgY2hyLmlkID0gJ2NocicgKyBjaHIubmFtZSArICctJyArIHRheGlkO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmZ1bGxDaHJvbW9zb21lTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICB2YXIgb3JnTmFtZSA9IHRoaXMub3JnYW5pc21zW3RheGlkXS5zY2llbnRpZmljTmFtZUFiYnI7XG4gICAgICBjaHIubmFtZSA9IG9yZ05hbWUgKyAnIGNocicgKyBjaHIubmFtZTtcbiAgICB9XG5cbiAgICBjaHJMZW5ndGggPSBjaHIubGVuZ3RoO1xuXG4gICAgcHhTdG9wID0gMDtcblxuICAgIGlmIChoYXNCYW5kcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBiYW5kID0gYmFuZHNbaV07XG4gICAgICAgIHZhciBjc0xlbmd0aCA9IGJhbmRbY3NdLnN0b3AgLSBiYW5kW2NzXS5zdGFydDtcbiAgICAgICAgd2lkdGggPSBjaHJIZWlnaHQgKiBjaHIubGVuZ3RoIC8gbWF4TGVuZ3RoW2NzXSAqIGNzTGVuZ3RoIC8gY2hyTGVuZ3RoO1xuXG4gICAgICAgIGJhbmRzW2ldLnB4ID0ge3N0YXJ0OiBweFN0b3AsIHN0b3A6IHB4U3RvcCArIHdpZHRoLCB3aWR0aDogd2lkdGh9O1xuXG4gICAgICAgIHB4U3RvcCA9IGJhbmRzW2ldLnB4LnN0b3A7XG5cbiAgICAgICAgaWYgKGhhc0JhbmRzICYmIGJhbmQuc3RhaW4gPT09ICdhY2VuJyAmJiBiYW5kLm5hbWVbMF0gPT09ICdwJykge1xuICAgICAgICAgIGNoci5wY2VuSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB4U3RvcCA9IGNockhlaWdodCAqIGNoci5sZW5ndGggLyBtYXhMZW5ndGhbY3NdO1xuICAgIH1cblxuICAgIGNoci53aWR0aCA9IHB4U3RvcDtcblxuICAgIGNoci5zY2FsZSA9IHt9O1xuXG4gICAgLy8gVE9ETzpcbiAgICAvL1xuICAgIC8vIEEgY2hyb21vc29tZS1sZXZlbCBzY2FsZSBwcm9wZXJ0eSBpcyBsaWtlbHlcbiAgICAvLyBub25zZW5zaWNhbCBmb3IgYW55IGNocm9tb3NvbWVzIHRoYXQgaGF2ZSBjeXRvZ2VuZXRpYyBiYW5kIGRhdGEuXG4gICAgLy8gRGlmZmVyZW50IGJhbmRzIHRlbmQgdG8gaGF2ZSByYXRpb3MgYmV0d2VlbiBudW1iZXIgb2YgYmFzZSBwYWlyc1xuICAgIC8vIGFuZCBwaHlzaWNhbCBsZW5ndGguXG4gICAgLy9cbiAgICAvLyBIb3dldmVyLCBhIGNocm9tb3NvbWUtbGV2ZWwgc2NhbGUgcHJvcGVydHkgaXMgbGlrZWx5XG4gICAgLy8gbmVjZXNzYXJ5IGZvciBjaHJvbW9zb21lcyB0aGF0IGRvIG5vdCBoYXZlIGJhbmQgZGF0YS5cbiAgICAvL1xuICAgIC8vIFRoaXMgbmVlZHMgZnVydGhlciByZXZpZXcuXG4gICAgaWYgKHRoaXMuY29uZmlnLm11bHRpb3JnYW5pc20gPT09IHRydWUpIHtcbiAgICAgIGNoci5zY2FsZS5icCA9IDE7XG4gICAgICAvLyBjaHIuc2NhbGUuYnAgPSBiYW5kLmlzY24uc3RvcCAvIGJhbmQuYnAuc3RvcDtcbiAgICAgIGNoci5zY2FsZS5pc2NuID0gY2hySGVpZ2h0ICogY2hyTGVuZ3RoIC8gbWF4TGVuZ3RoLmJwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaHIuc2NhbGUuYnAgPSBjaHJIZWlnaHQgLyBtYXhMZW5ndGguYnA7XG4gICAgICBpZiAoaGFzQmFuZHMpIHtcbiAgICAgICAgY2hyLnNjYWxlLmlzY24gPSBjaHJIZWlnaHQgLyBtYXhMZW5ndGguaXNjbjtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hyLmJhbmRzID0gYmFuZHM7XG5cbiAgICBjaHIuY2VudHJvbWVyZVBvc2l0aW9uID0gJyc7XG4gICAgaWYgKFxuICAgIGhhc0JhbmRzICYmIGJhbmRzWzBdLm5hbWVbMF0gPT09ICdwJyAmJiBiYW5kc1sxXS5uYW1lWzBdID09PSAncScgJiZcbiAgICBiYW5kc1swXS5icC5zdG9wIC0gYmFuZHNbMF0uYnAuc3RhcnQgPCAyRTZcbiAgKSB7XG4gICAgICAvLyBBcyB3aXRoIGFsbW9zdCBhbGwgbW91c2UgY2hyb21vc29tZSwgY2hpbXBhbnplZSBjaHIyMlxuICAgICAgY2hyLmNlbnRyb21lcmVQb3NpdGlvbiA9ICd0ZWxvY2VudHJpYyc7XG5cbiAgICAgIC8vIFJlbW92ZSBwbGFjZWhvbGRlciBwdGVyIGJhbmRcbiAgICAgIGNoci5iYW5kcyA9IGNoci5iYW5kcy5zbGljZSgxKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzQmFuZHMgJiYgY2hyLmJhbmRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gRW5jb3VudGVyZWQgd2hlbiBwcm9jZXNzaW5nIGFuIGFzc2VtYmx5IHRoYXQgaGFzIGNocm9tb3NvbWVzIHdpdGhcbiAgICAgIC8vIGNlbnRyb21lcmUgZGF0YSwgYnV0IHRoaXMgY2hyb21vc29tZSBkb2VzIG5vdC5cbiAgICAgIC8vIEV4YW1wbGU6IGNocm9tb3NvbWUgRjEgaW4gRmVsaXMgY2F0dXMuXG4gICAgICBkZWxldGUgY2hyLmJhbmRzO1xuICAgIH1cblxuICAgIHJldHVybiBjaHI7XG4gIH1cblxuICAvKipcbiAgKiBEcmF3cyBsYWJlbHMgZm9yIGVhY2ggY2hyb21vc29tZSwgZS5nLiBcIjFcIiwgXCIyXCIsIFwiWFwiLlxuICAqIElmIGlkZW9ncmFtIGNvbmZpZ3VyYXRpb24gaGFzICdmdWxsQ2hyb21vc29tZUxhYmVsczogVHJ1ZScsXG4gICogdGhlbiBsYWJlbHMgaW5jbHVkZXMgbmFtZSBvZiB0YXhvbiwgd2hpY2ggY2FuIGhlbHAgd2hlblxuICAqIGRlcGljdGluZyBvcnRob2xvZ3MuXG4gICovXG4gIGRyYXdDaHJvbW9zb21lTGFiZWxzKCkge1xuICAgIHZhciBpZGVvID0gdGhpcztcblxuICAgIHZhciBjaHJvbW9zb21lTGFiZWxDbGFzcyA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lTGFiZWxDbGFzcygpO1xuXG4gICAgdmFyIGNoclNldExhYmVsWFBvc2l0aW9uID0gaWRlby5fbGF5b3V0LmdldENocm9tb3NvbWVTZXRMYWJlbFhQb3NpdGlvbigpO1xuICAgIHZhciBjaHJTZXRMYWJlbFRyYW5zbGF0ZSA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKTtcblxuICAgIC8vIEFwcGVuZCBjaHJvbW9zb21lcyBzZXQncyBsYWJlbHNcbiAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUtc2V0LWNvbnRhaW5lcicpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5kYXRhKGlkZW8uY2hyb21vc29tZXNBcnJheSlcbiAgICAgIC5hdHRyKCdjbGFzcycsICdjaHJvbW9zb21lLXNldC1sYWJlbCAnICsgY2hyb21vc29tZUxhYmVsQ2xhc3MpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgY2hyU2V0TGFiZWxUcmFuc2xhdGUpXG4gICAgICAuYXR0cigneCcsIGNoclNldExhYmVsWFBvc2l0aW9uKVxuICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldExhYmVsWVBvc2l0aW9uKGkpO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxBbmNob3IoKSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAvLyBHZXQgbGFiZWwgbGluZXNcbiAgICAgICAgdmFyIGxpbmVzO1xuICAgICAgICBpZiAoZC5uYW1lLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgICBsaW5lcyA9IFtkLm5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpbmVzID0gZC5uYW1lLm1hdGNoKC9eKC4qKVxccysoW15cXHNdKykkLykuc2xpY2UoMSkucmV2ZXJzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICdzZXgnIGluIGlkZW8uY29uZmlnICYmXG4gICAgICAgICAgaWRlby5jb25maWcucGxvaWR5ID09PSAyICYmXG4gICAgICAgICAgaSA9PT0gaWRlby5zZXhDaHJvbW9zb21lcy5pbmRleFxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaWRlby5jb25maWcuc2V4ID09PSAnbWFsZScpIHtcbiAgICAgICAgICAgIGxpbmVzID0gWydYWSddO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lcyA9IFsnWFgnXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW5kZXIgbGFiZWwgbGluZXNcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbCgndHNwYW4nKVxuICAgICAgICAgIC5kYXRhKGxpbmVzKVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZCgndHNwYW4nKVxuICAgICAgICAgIC5hdHRyKCdkeScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpICogLTEuMiArICdlbSc7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cigneCcsIGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxYUG9zaXRpb24oKSlcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihhLCBpKSB7XG4gICAgICAgICAgICB2YXIgZnVsbExhYmVscyA9IGlkZW8uY29uZmlnLmZ1bGxDaHJvbW9zb21lTGFiZWxzO1xuICAgICAgICAgICAgcmV0dXJuIGkgPT09IDEgJiYgZnVsbExhYmVscyA/ICdpdGFsaWMnIDogbnVsbDtcbiAgICAgICAgICB9KS50ZXh0KFN0cmluZyk7XG4gICAgICB9KTtcblxuICAgIHZhciBzZXRMYWJlbFRyYW5zbGF0ZSA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKTtcblxuICAgIC8vIEFwcGVuZCBjaHJvbW9zb21lcyBsYWJlbHNcbiAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUtc2V0LWNvbnRhaW5lcicpXG4gICAgICAuZWFjaChmdW5jdGlvbihhLCBjaHJTZXROdW1iZXIpIHtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbCgnLmNocm9tb3NvbWUnKVxuICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjaHJMYWJlbCcpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHNldExhYmVsVHJhbnNsYXRlKVxuICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lTGFiZWxYUG9zaXRpb24oaSk7XG4gICAgICAgICAgfSkuYXR0cigneScsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZUxhYmVsWVBvc2l0aW9uKGkpO1xuICAgICAgICAgIH0pLnRleHQoZnVuY3Rpb24oZCwgY2hyTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gaWRlby5fcGxvaWR5LmdldEFuY2VzdG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyKTtcbiAgICAgICAgICB9KS5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogRHJhd3MgbGFiZWxzIGFuZCBzdGFsa3MgZm9yIGN5dG9nZW5ldGljIGJhbmRzLlxuICAqXG4gICogQmFuZCBsYWJlbHMgYXJlIHRleHQgbGlrZSBcInAxMS4xMVwiLlxuICAqIFN0YWxrcyBhcmUgc21hbGwgbGluZXMgdGhhdCB2aXN1YWxseSBjb25uZWN0IGxhYmVscyB0byB0aGVpciBiYW5kcy5cbiAgKi9cbiAgZHJhd0JhbmRMYWJlbHMoY2hyb21vc29tZXMpIHtcbiAgICB2YXIgaSwgY2hyLCBjaHJzLCB0YXhpZCwgaWRlbywgY2hyTW9kZWwsIGNockluZGV4LCB0ZXh0T2Zmc2V0cztcblxuICAgIGlkZW8gPSB0aGlzO1xuXG4gICAgY2hycyA9IFtdO1xuXG4gICAgZm9yICh0YXhpZCBpbiBjaHJvbW9zb21lcykge1xuICAgICAgZm9yIChjaHIgaW4gY2hyb21vc29tZXNbdGF4aWRdKSB7XG4gICAgICAgIGNocnMucHVzaChjaHJvbW9zb21lc1t0YXhpZF1bY2hyXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGV4dE9mZnNldHMgPSB7fTtcblxuICAgIGNockluZGV4ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY2hycy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hySW5kZXggKz0gMTtcblxuICAgICAgY2hyTW9kZWwgPSBjaHJzW2ldO1xuXG4gICAgICBjaHIgPSBkMy5zZWxlY3QoaWRlby5zZWxlY3RvciArICcgIycgKyBjaHJNb2RlbC5pZCk7XG5cbiAgICAgIC8vIHZhciBjaHJNYXJnaW4gPSB0aGlzLmNvbmZpZy5jaHJNYXJnaW4gKiBjaHJJbmRleCxcbiAgICAgIC8vICAgbGluZVkxLCBsaW5lWTI7XG4gICAgICAvL1xuICAgICAgLy8gbGluZVkxID0gY2hyTWFyZ2luO1xuICAgICAgLy8gbGluZVkyID0gY2hyTWFyZ2luIC0gODtcbiAgICAgIC8vXG4gICAgICAvLyBpZiAoXG4gICAgICAvLyAgIGNockluZGV4ID09PSAxICYmXG4gICAgICAvLyAgIFwicGVyc3BlY3RpdmVcIiBpbiB0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5wZXJzcGVjdGl2ZSA9PT0gXCJjb21wYXJhdGl2ZVwiXG4gICAgICAvLyApIHtcbiAgICAgIC8vICAgbGluZVkxICs9IDE4O1xuICAgICAgLy8gICBsaW5lWTIgKz0gMTg7XG4gICAgICAvLyB9XG5cbiAgICAgIHRleHRPZmZzZXRzW2Nock1vZGVsLmlkXSA9IFtdO1xuXG4gICAgICBjaHIuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgIC5kYXRhKGNock1vZGVsLmJhbmRzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgcmV0dXJuICdiYW5kTGFiZWwgYnNic2wtJyArIGk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIHRyYW5zZm9ybSA9IGlkZW8uX2xheW91dC5nZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlKGQsIGkpO1xuXG4gICAgICAgICAgdmFyIHggPSB0cmFuc2Zvcm0ueDtcbiAgICAgICAgICAvLyB2YXIgeSA9IHRyYW5zZm9ybS55O1xuXG4gICAgICAgICAgdGV4dE9mZnNldHNbY2hyTW9kZWwuaWRdLnB1c2goeCArIDEzKTtcblxuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm0udHJhbnNsYXRlO1xuICAgICAgICB9KVxuICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgaWRlby5fbGF5b3V0LmdldENocm9tb3NvbWVCYW5kTGFiZWxBbmNob3IoaSkpXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gZC5uYW1lO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gdmFyIGFkYXB0ZXIgPSBNb2RlbEFkYXB0ZXIuZ2V0SW5zdGFuY2UoaWRlby5jaHJvbW9zb21lc0FycmF5W2ldKTtcbiAgICAgIC8vIHZhciB2aWV3ID0gQ2hyb21vc29tZS5nZXRJbnN0YW5jZShhZGFwdGVyLCBpZGVvLmNvbmZpZywgaWRlbyk7XG5cbiAgICAgIGNoci5zZWxlY3RBbGwoJ2xpbmUuYmFuZExhYmVsU3RhbGsnKVxuICAgICAgICAuZGF0YShjaHJNb2RlbC5iYW5kcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICByZXR1cm4gJ2JhbmRMYWJlbFN0YWxrIGJzYnNsLScgKyBpO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciB4LCB5O1xuXG4gICAgICAgICAgeCA9IGlkZW8ucm91bmQoZC5weC5zdGFydCArIGQucHgud2lkdGggLyAyKTtcblxuICAgICAgICAgIHRleHRPZmZzZXRzW2Nock1vZGVsLmlkXS5wdXNoKHggKyAxMyk7XG4gICAgICAgICAgeSA9IC0xMDtcblxuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB4ICsgJywnICsgeSArICcpJztcbiAgICAgICAgfSlcbiAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgIC5hdHRyKCd4MScsIDApXG4gICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTEoaSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCd4MicsIDApXG4gICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTIoaSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjaHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaHJNb2RlbCA9IGNocnNbaV07XG5cbiAgICAgIHZhciB0ZXh0c0xlbmd0aCA9IHRleHRPZmZzZXRzW2Nock1vZGVsLmlkXS5sZW5ndGgsXG4gICAgICAgIG92ZXJsYXBwaW5nTGFiZWxYUmlnaHQsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBpbmRleGVzVG9TaG93ID0gW10sXG4gICAgICAgIHByZXZIaWRkZW5Cb3hJbmRleCxcbiAgICAgICAgeExlZnQsXG4gICAgICAgIHByZXZMYWJlbFhSaWdodCxcbiAgICAgICAgcHJldlRleHRCb3hMZWZ0LFxuICAgICAgICBwcmV2VGV4dEJveFdpZHRoLFxuICAgICAgICB0ZXh0UGFkZGluZztcblxuICAgICAgb3ZlcmxhcHBpbmdMYWJlbFhSaWdodCA9IDA7XG5cbiAgICAgIHRleHRQYWRkaW5nID0gNTtcblxuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGV4dHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgLy8gRW5zdXJlcyBiYW5kIGxhYmVscyBkb24ndCBvdmVybGFwXG5cbiAgICAgICAgeExlZnQgPSB0ZXh0T2Zmc2V0c1tjaHJNb2RlbC5pZF1baW5kZXhdO1xuXG4gICAgICAgIGlmICh4TGVmdCA8IG92ZXJsYXBwaW5nTGFiZWxYUmlnaHQgKyB0ZXh0UGFkZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpbmRleGVzVG9TaG93LnB1c2goaW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZIaWRkZW5Cb3hJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG92ZXJsYXBwaW5nTGFiZWxYUmlnaHQgPSBwcmV2TGFiZWxYUmlnaHQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldkhpZGRlbkJveEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgICAgIC8vIFRoaXMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgZm9yY2VzIENocm9tZSdzXG4gICAgICAgICAgLy8gJ1JlY2FsY3VsYXRlIFN0eWxlJyBhbmQgJ0xheW91dCcsIHdoaWNoIHRha2VzIDMwLTQwIG1zIG9uIENocm9tZS5cbiAgICAgICAgICAvLyBUT0RPOiBUaGlzIGZvcmNlZCBzeW5jaHJvbm91cyBsYXlvdXQgd291bGQgYmUgbmljZSB0byBlbGltaW5hdGUuXG4gICAgICAgICAgLy8gcHJldlRleHRCb3ggPSB0ZXh0c1tpbmRleF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgLy8gcHJldkxhYmVsWFJpZ2h0ID0gcHJldlRleHRCb3gubGVmdCArIHByZXZUZXh0Qm94LndpZHRoO1xuXG4gICAgICAgICAgLy8gVE9ETzogQWNjb3VudCBmb3IgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gcHJldlRleHRCb3hXaWR0aCxcbiAgICAgICAgICAvLyBtYXliZSBhbHNvIHpvb20uXG4gICAgICAgICAgcHJldlRleHRCb3hMZWZ0ID0gdGV4dE9mZnNldHNbY2hyTW9kZWwuaWRdW2luZGV4XTtcbiAgICAgICAgICBwcmV2VGV4dEJveFdpZHRoID0gMzY7XG5cbiAgICAgICAgICBwcmV2TGFiZWxYUmlnaHQgPSBwcmV2VGV4dEJveExlZnQgKyBwcmV2VGV4dEJveFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHhMZWZ0IDwgcHJldkxhYmVsWFJpZ2h0ICsgdGV4dFBhZGRpbmdcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJldkhpZGRlbkJveEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgb3ZlcmxhcHBpbmdMYWJlbFhSaWdodCA9IHByZXZMYWJlbFhSaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmRleGVzVG9TaG93LnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RvcnNUb1Nob3cgPSBbXSxcbiAgICAgICAgaXRoTGVuZ3RoID0gaW5kZXhlc1RvU2hvdy5sZW5ndGgsXG4gICAgICAgIGo7XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBpdGhMZW5ndGg7IGorKykge1xuICAgICAgICBpbmRleCA9IGluZGV4ZXNUb1Nob3dbal07XG4gICAgICAgIHNlbGVjdG9yc1RvU2hvdy5wdXNoKCcjJyArIGNock1vZGVsLmlkICsgJyAuYnNic2wtJyArIGluZGV4KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5iYW5kc1RvU2hvdyA9IHRoaXMuYmFuZHNUb1Nob3cuY29uY2F0KHNlbGVjdG9yc1RvU2hvdyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUm90YXRlcyBjaHJvbW9zb21lIGxhYmVscyBieSA5MCBkZWdyZWVzLCBlLmcuIHVwb24gY2xpY2tpbmcgYSBjaHJvbW9zb21lIHRvIGZvY3VzLlxuICByb3RhdGVDaHJvbW9zb21lTGFiZWxzKGNociwgY2hySW5kZXgsIG9yaWVudGF0aW9uLCBzY2FsZSkge1xuICAgIHZhciBjaHJNYXJnaW4sIGNocldpZHRoLCBpZGVvLCB4LCB5LFxuICAgICAgbnVtQW5ub3RUcmFja3MsIHNjYWxlU3ZnLCB0cmFja3NIZWlnaHQsIGNock1hcmdpbjI7XG5cbiAgICBjaHJXaWR0aCA9IHRoaXMuY29uZmlnLmNocldpZHRoO1xuICAgIGNock1hcmdpbiA9IHRoaXMuY29uZmlnLmNock1hcmdpbiAqIGNockluZGV4O1xuICAgIG51bUFubm90VHJhY2tzID0gdGhpcy5jb25maWcubnVtQW5ub3RUcmFja3M7XG5cbiAgICBpZGVvID0gdGhpcztcblxuICAgIGlmIChcbiAgICB0eXBlb2YgKHNjYWxlKSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBzY2FsZS5oYXNPd25Qcm9wZXJ0eSgneCcpICYmXG4gICAgIShzY2FsZS54ID09PSAxICYmIHNjYWxlLnkgPT09IDEpXG4gICkge1xuICAgICAgc2NhbGVTdmcgPSAnc2NhbGUoJyArIHNjYWxlLnggKyAnLCcgKyBzY2FsZS55ICsgJyknO1xuICAgICAgeCA9IC02O1xuICAgICAgeSA9IChzY2FsZSA9PT0gJycgPyAtMTYgOiAtMTQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gLTg7XG4gICAgICB5ID0gLTE2O1xuICAgICAgc2NhbGUgPSB7eDogMSwgeTogMX07XG4gICAgICBzY2FsZVN2ZyA9ICcnO1xuICAgIH1cblxuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyB8fCBvcmllbnRhdGlvbiA9PT0gJycpIHtcbiAgICAgIHZhciBjaSA9IGNockluZGV4IC0gMTtcblxuICAgICAgaWYgKG51bUFubm90VHJhY2tzID4gMSB8fCBvcmllbnRhdGlvbiA9PT0gJycpIHtcbiAgICAgICAgY2kgLT0gMTtcbiAgICAgIH1cblxuICAgICAgY2hyTWFyZ2luMiA9IC00O1xuICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dCYW5kTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICAgIGNock1hcmdpbjIgPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKyBjaHJXaWR0aCArIDI2O1xuICAgICAgfVxuXG4gICAgICBjaHJNYXJnaW4gPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKiBjaTtcblxuICAgICAgaWYgKG51bUFubm90VHJhY2tzID4gMSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2hyTWFyZ2luICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHkgPSBjaHJNYXJnaW4gKyBjaHJNYXJnaW4yO1xuXG4gICAgICBjaHIuc2VsZWN0QWxsKCd0ZXh0LmNockxhYmVsJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHNjYWxlU3ZnKVxuICAgICAgICAuc2VsZWN0QWxsKCd0c3BhbicpXG4gICAgICAgICAgLmF0dHIoJ3gnLCB4KVxuICAgICAgICAgIC5hdHRyKCd5JywgeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNockluZGV4IC09IDE7XG5cbiAgICAgIGNock1hcmdpbjIgPSAtY2hyV2lkdGggLSAyO1xuICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dCYW5kTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICAgIGNock1hcmdpbjIgPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKyA4O1xuICAgICAgfVxuXG4gICAgICB0cmFja3NIZWlnaHQgPSBpZGVvLmNvbmZpZy5hbm5vdFRyYWNrc0hlaWdodDtcbiAgICAgIGlmIChpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc0xheW91dCAhPT0gJ292ZXJsYXknKSB7XG4gICAgICAgIHRyYWNrc0hlaWdodCAqPSAyO1xuICAgICAgfVxuXG4gICAgICBjaHJNYXJnaW4gPSBpZGVvLmNvbmZpZy5jaHJNYXJnaW4gKiBjaHJJbmRleDtcbiAgICAgIHggPSAtKGNock1hcmdpbiArIGNock1hcmdpbjIpICsgMyArIHRyYWNrc0hlaWdodDtcbiAgICAgIHggLz0gc2NhbGUueDtcblxuICAgICAgY2hyLnNlbGVjdEFsbCgndGV4dC5jaHJMYWJlbCcpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAncm90YXRlKC05MCknICsgc2NhbGVTdmcpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RzcGFuJylcbiAgICAgICAgLmF0dHIoJ3gnLCB4KVxuICAgICAgICAuYXR0cigneScsIHkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFJvdGF0ZXMgYmFuZCBsYWJlbHMgYnkgOTAgZGVncmVlcywgZS5nLiB1cG9uIGNsaWNraW5nIGEgY2hyb21vc29tZSB0byBmb2N1cy5cbiAgKlxuICAqIFRoaXMgbWV0aG9kIGluY2x1ZGVzIHByb3BvcnRpb25hbCBzY2FsaW5nLCB3aGljaCBlbnN1cmVzIHRoYXRcbiAgKiB3aGlsZSB0aGUgcGFyZW50IGNocm9tb3NvbWUgZ3JvdXAgaXMgc2NhbGVkIHN0cm9uZ2x5IGluIG9uZSBkaW1lbnNpb24gdG8gZmlsbFxuICAqIGF2YWlsYWJsZSBzcGFjZSwgdGhlIHRleHQgaW4gdGhlIGNocm9tb3NvbWUncyBiYW5kIGxhYmVscyBpc1xuICAqIG5vdCBzaW1pbGFybHkgZGlzdG9ydGVkLCBhbmQgcmVtYWlucyByZWFkYWJsZS5cbiAgKi9cbiAgcm90YXRlQmFuZExhYmVscyhjaHIsIGNockluZGV4LCBzY2FsZSkge1xuICAgIHZhciBjaHJNYXJnaW4sIHNjYWxlU3ZnLFxuICAgICAgb3JpZW50YXRpb24sIGJhbmRMYWJlbHMsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIGJhbmRMYWJlbHMgPSBjaHIuc2VsZWN0QWxsKCcuYmFuZExhYmVsJyk7XG5cbiAgICBjaHJXaWR0aCA9IHRoaXMuY29uZmlnLmNocldpZHRoO1xuICAgIGNock1hcmdpbiA9IHRoaXMuY29uZmlnLmNock1hcmdpbiAqIGNockluZGV4O1xuXG4gICAgb3JpZW50YXRpb24gPSBjaHIuYXR0cignZGF0YS1vcmllbnRhdGlvbicpO1xuXG4gICAgaWYgKHR5cGVvZiAoc2NhbGUpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc2NhbGUgPSB7eDogMSwgeTogMX07XG4gICAgICBzY2FsZVN2ZyA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZVN2ZyA9ICdzY2FsZSgnICsgc2NhbGUueCArICcsJyArIHNjYWxlLnkgKyAnKSc7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY2hySW5kZXggPT09IDEgJiZcbiAgICAgICdwZXJzcGVjdGl2ZScgaW4gdGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcucGVyc3BlY3RpdmUgPT09ICdjb21wYXJhdGl2ZSdcbiAgICApIHtcbiAgICAgIGJhbmRMYWJlbHNcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgeCwgeTtcbiAgICAgICAgICB4ID0gKDggLSBjaHJNYXJnaW4pIC0gMjY7XG4gICAgICAgICAgeSA9IGlkZW8ucm91bmQoMiArIGQucHguc3RhcnQgKyBkLnB4LndpZHRoIC8gMik7XG4gICAgICAgICAgcmV0dXJuICdyb3RhdGUoLTkwKXRyYW5zbGF0ZSgnICsgeCArICcsJyArIHkgKyAnKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdlbmQnKTtcbiAgICB9IGVsc2UgaWYgKG9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICBiYW5kTGFiZWxzXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIHgsIHk7XG4gICAgICAgICAgeCA9IDggLSBjaHJNYXJnaW47XG4gICAgICAgICAgeSA9IGlkZW8ucm91bmQoMiArIGQucHguc3RhcnQgKyBkLnB4LndpZHRoIC8gMik7XG4gICAgICAgICAgcmV0dXJuICdyb3RhdGUoLTkwKXRyYW5zbGF0ZSgnICsgeCArICcsJyArIHkgKyAnKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBzY2FsZVN2Zyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhbmRMYWJlbHNcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgeCwgeTtcbiAgICAgICAgICB4ID0gaWRlby5yb3VuZCgtOCAqIHNjYWxlLnggKyBkLnB4LnN0YXJ0ICsgZC5weC53aWR0aCAvIDIpO1xuICAgICAgICAgIHkgPSBjaHJNYXJnaW4gLSAxMDtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgeCArICcsJyArIHkgKyAnKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBzY2FsZVN2Zyk7XG5cbiAgICAgIGNoci5zZWxlY3RBbGwoJy5iYW5kTGFiZWxTdGFsayBsaW5lJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHNjYWxlU3ZnKTtcbiAgICB9XG4gIH1cblxuICByb3VuZChjb29yZCkge1xuICAgIC8vIFJvdW5kcyBhbiBTVkcgY29vcmRpbmF0ZXMgdG8gdHdvIGRlY2ltYWwgcGxhY2VzXG4gICAgLy8gZS5nLiA0Mi4xMjM0NTY3ODkwIC0+IDQyLjEyXG4gICAgLy8gUGVyIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzk0NTM0NDcsIGJlbG93IG1ldGhvZCBpcyBmYXN0ZXN0XG4gICAgcmV0dXJuIE1hdGgucm91bmQoY29vcmQgKiAxMDApIC8gMTAwO1xuICB9XG5cbiAgLyoqXG4gICogUmVuZGVycyBhbGwgdGhlIGJhbmRzIGFuZCBvdXRsaW5pbmcgYm91bmRhcmllcyBvZiBhIGNocm9tb3NvbWUuXG4gICovXG4gIGRyYXdDaHJvbW9zb21lKGNock1vZGVsLCBjaHJJbmRleCwgY29udGFpbmVyLCBrKSB7XG4gICAgdmFyIGNock1hcmdpbiA9IHRoaXMuY29uZmlnLmNock1hcmdpbjtcblxuICAgIC8vIEdldCBjaHJvbW9zb21lIG1vZGVsIGFkYXB0ZXIgY2xhc3NcbiAgICB2YXIgYWRhcHRlciA9IE1vZGVsQWRhcHRlci5nZXRJbnN0YW5jZShjaHJNb2RlbCk7XG5cbiAgICAvLyBBcHBlbmQgY2hyb21vc29tZSdzIGNvbnRhaW5lclxuICAgIHZhciBjaHJvbW9zb21lID0gY29udGFpbmVyXG4gICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignaWQnLCBjaHJNb2RlbC5pZClcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Nocm9tb3NvbWUgJyArIGFkYXB0ZXIuZ2V0Q3NzQ2xhc3MoKSlcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwgJyArIGsgKiBjaHJNYXJnaW4gKyAnKScpO1xuXG4gICAgLy8gUmVuZGVyIGNocm9tb3NvbWVcbiAgICByZXR1cm4gQ2hyb21vc29tZS5nZXRJbnN0YW5jZShhZGFwdGVyLCB0aGlzLmNvbmZpZywgdGhpcylcbiAgICAgICAgLnJlbmRlcihjaHJvbW9zb21lLCBjaHJJbmRleCwgayk7XG4gIH1cblxuICAvKipcbiAgKiBSb3RhdGVzIGEgY2hyb21vc29tZSA5MCBkZWdyZWVzIGFuZCBzaG93cyBvciBoaWRlcyBhbGwgb3RoZXIgY2hyb21vc29tZXNcbiAgKiBVc2VmdWwgZm9yIGZvY3VzaW5nIG9yIGRlZm9jdXNpbmcgYSBwYXJ0aWN1bGFyIGNocm9tb3NvbWVcbiAgKi9cbiAgcm90YXRlQW5kVG9nZ2xlRGlzcGxheShjaHJvbW9zb21lKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiB0YXhJZCBub3QgZGVmaW5lZC4gQnV0IGl0IHNob3VsZCBiZSBkZWZpbmVkLlxuICAgIC8vIFRvIGZpeCB0aGF0IGJ1ZyB3ZSBzaG91bGQgaGF2ZSBhIHdheSB0byBmaW5kIGNocm9tb3NvbWUgc2V0IG51bWJlci5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnRheGlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoclNldE51bWJlciA9XG4gICAgICBOdW1iZXIoZDMuc2VsZWN0KGNocm9tb3NvbWUucGFyZW50Tm9kZSkuYXR0cignZGF0YS1zZXQtbnVtYmVyJykpO1xuXG4gICAgdmFyIGNock51bWJlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuICAgICAgICAgIGQzLnNlbGVjdChjaHJvbW9zb21lLnBhcmVudE5vZGUpLnNlbGVjdEFsbCgnZy5jaHJvbW9zb21lJykuX2dyb3Vwc1swXVxuICAgICAgKS5pbmRleE9mKGNocm9tb3NvbWUpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xheW91dC5yb3RhdGUoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNocm9tb3NvbWUpO1xuICB9XG5cbiAgLyoqXG4gICogQ29udmVydHMgYmFzZSBwYWlyIGNvb3JkaW5hdGVzIHRvIHBpeGVsIG9mZnNldHMuXG4gICogQnAtdG8tcGl4ZWwgc2NhbGVzIGRpZmZlciBhbW9uZyBjeXRvZ2VuZXRpYyBiYW5kcy5cbiAgKi9cbiAgY29udmVydEJwVG9QeChjaHIsIGJwKSB7XG4gICAgdmFyIGksIGJhbmQsIGJwVG9Jc2NuU2NhbGUsIGlzY24sIHB4LCBvZmZzZXQsIHB4U3RhcnQsIHB4TGVuZ3RoLCBpc2NuU3RhcnQsXG4gICAgICBpc2NuU3RvcCwgaXNjbkxlbmd0aCwgYnBTdGFydCwgYnBTdG9wLCBicExlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjaHIuYmFuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhbmQgPSBjaHIuYmFuZHNbaV07XG5cbiAgICAgIG9mZnNldCA9IHRoaXMuX2JhbmRzWE9mZnNldDtcbiAgICAgIGJwU3RhcnQgPSBiYW5kLmJwLnN0YXJ0O1xuICAgICAgYnBTdG9wID0gYmFuZC5icC5zdG9wO1xuICAgICAgYnBMZW5ndGggPSBicFN0b3AgLSBicFN0YXJ0O1xuICAgICAgaXNjblN0YXJ0ID0gYmFuZC5pc2NuLnN0YXJ0O1xuICAgICAgaXNjblN0b3AgPSBiYW5kLmlzY24uc3RvcDtcbiAgICAgIGlzY25MZW5ndGggPSBpc2NuU3RvcCAtIGlzY25TdGFydDtcbiAgICAgIHB4U3RhcnQgPSBiYW5kLnB4LnN0YXJ0O1xuICAgICAgcHhMZW5ndGggPSBiYW5kLnB4LndpZHRoO1xuXG4gICAgICBpZiAoYnAgPj0gYnBTdGFydCAmJiBicCA8PSBicFN0b3ApIHtcbiAgICAgICAgYnBUb0lzY25TY2FsZSA9IGlzY25MZW5ndGggLyBicExlbmd0aDtcbiAgICAgICAgaXNjbiA9IGlzY25TdGFydCArIChicCAtIGJwU3RhcnQpICogYnBUb0lzY25TY2FsZTtcblxuICAgICAgICBweCA9IG9mZnNldCArIHB4U3RhcnQgKyAocHhMZW5ndGggKiAoaXNjbiAtIGlzY25TdGFydCkgLyAoaXNjbkxlbmd0aCkpO1xuXG4gICAgICAgIHJldHVybiBweDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQmFzZSBwYWlyIG91dCBvZiByYW5nZS4gICcgK1xuICAgICAgJ2JwOiAnICsgYnAgKyAnOyBsZW5ndGggb2YgY2hyJyArIGNoci5uYW1lICsgJzogJyArIGJhbmQuYnAuc3RvcFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgKiBDb252ZXJ0cyBiYXNlIHBhaXIgY29vcmRpbmF0ZXMgdG8gcGl4ZWwgb2Zmc2V0cy5cbiAgKiBCcC10by1waXhlbCBzY2FsZXMgZGlmZmVyIGFtb25nIGN5dG9nZW5ldGljIGJhbmRzLlxuICAqL1xuICBjb252ZXJ0UHhUb0JwKGNociwgcHgpIHtcbiAgICB2YXIgaSwgYmFuZCwgcHhUb0lzY25TY2FsZSwgaXNjbixcbiAgICAgIHB4U3RhcnQsIHB4U3RvcCwgaXNjblN0YXJ0LCBpc2NuU3RvcCwgYnBMZW5ndGgsIGlzY25MZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY2hyLmJhbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBiYW5kID0gY2hyLmJhbmRzW2ldO1xuXG4gICAgICBweFN0YXJ0ID0gYmFuZC5weC5zdGFydDtcbiAgICAgIHB4U3RvcCA9IGJhbmQucHguc3RvcDtcbiAgICAgIGlzY25TdGFydCA9IGJhbmQuaXNjbi5zdGFydDtcbiAgICAgIGlzY25TdG9wID0gYmFuZC5pc2NuLnN0b3A7XG5cbiAgICAgIGlmIChweCA+PSBweFN0YXJ0ICYmIHB4IDw9IHB4U3RvcCkge1xuICAgICAgICBpc2NuTGVuZ3RoID0gaXNjblN0b3AgLSBpc2NuU3RhcnQ7XG4gICAgICAgIHB4TGVuZ3RoID0gcHhTdG9wIC0gcHhTdGFydDtcbiAgICAgICAgYnBMZW5ndGggPSBiYW5kLmJwLnN0b3AgLSBiYW5kLmJwLnN0YXJ0O1xuXG4gICAgICAgIHB4VG9Jc2NuU2NhbGUgPSBpc2NuTGVuZ3RoIC8gcHhMZW5ndGg7XG4gICAgICAgIGlzY24gPSBpc2NuU3RhcnQgKyAocHggLSBweFN0YXJ0KSAqIHB4VG9Jc2NuU2NhbGU7XG5cbiAgICAgICAgYnAgPSBiYW5kLmJwLnN0YXJ0ICsgKGJwTGVuZ3RoICogKGlzY24gLSBpc2NuU3RhcnQpIC8gaXNjbkxlbmd0aCk7XG5cbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYnApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdQaXhlbCBvdXQgb2YgcmFuZ2UuICAnICtcbiAgICAgICdweDogJyArIGJwICsgJzsgbGVuZ3RoIG9mIGNocicgKyBjaHIubmFtZSArICc6ICcgKyBweFN0b3BcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICogRHJhd3MgYSB0cmFwZXpvaWQgY29ubmVjdGluZyBhIGdlbm9taWMgcmFuZ2Ugb25cbiAgKiBvbmUgY2hyb21vc29tZSB0byBhIGdlbm9taWMgcmFuZ2Ugb24gYW5vdGhlciBjaHJvbW9zb21lO1xuICAqIGEgc3ludGVuaWMgcmVnaW9uLlxuICAqL1xuICBkcmF3U3ludGVueShzeW50ZW5pY1JlZ2lvbnMpIHtcbiAgICB2YXIgdDAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIHZhciByMSwgcjIsXG4gICAgICBzeW50ZW5pZXMsXG4gICAgICBpLCBjb2xvciwgb3BhY2l0eSxcbiAgICAgIHJlZ2lvbklELCByZWdpb25zLCBzeW50ZW5pY1JlZ2lvbixcbiAgICAgIGlkZW8gPSB0aGlzO1xuXG4gICAgc3ludGVuaWVzID0gZDMuc2VsZWN0KGlkZW8uc2VsZWN0b3IpXG4gICAgLmluc2VydCgnZycsICc6Zmlyc3QtY2hpbGQnKVxuICAgIC5hdHRyKCdjbGFzcycsICdzeW50ZW55Jyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3ludGVuaWNSZWdpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZWdpb25zID0gc3ludGVuaWNSZWdpb25zW2ldO1xuXG4gICAgICByMSA9IHJlZ2lvbnMucjE7XG4gICAgICByMiA9IHJlZ2lvbnMucjI7XG5cbiAgICAgIGNvbG9yID0gJyNDRkMnO1xuICAgICAgaWYgKCdjb2xvcicgaW4gcmVnaW9ucykge1xuICAgICAgICBjb2xvciA9IHJlZ2lvbnMuY29sb3I7XG4gICAgICB9XG5cbiAgICAgIG9wYWNpdHkgPSAxO1xuICAgICAgaWYgKCdvcGFjaXR5JyBpbiByZWdpb25zKSB7XG4gICAgICAgIG9wYWNpdHkgPSByZWdpb25zLm9wYWNpdHk7XG4gICAgICB9XG5cbiAgICAgIHIxLnN0YXJ0UHggPSB0aGlzLmNvbnZlcnRCcFRvUHgocjEuY2hyLCByMS5zdGFydCk7XG4gICAgICByMS5zdG9wUHggPSB0aGlzLmNvbnZlcnRCcFRvUHgocjEuY2hyLCByMS5zdG9wKTtcbiAgICAgIHIyLnN0YXJ0UHggPSB0aGlzLmNvbnZlcnRCcFRvUHgocjIuY2hyLCByMi5zdGFydCk7XG4gICAgICByMi5zdG9wUHggPSB0aGlzLmNvbnZlcnRCcFRvUHgocjIuY2hyLCByMi5zdG9wKTtcblxuICAgICAgcmVnaW9uSUQgPSAoXG4gICAgICByMS5jaHIuaWQgKyAnXycgKyByMS5zdGFydCArICdfJyArIHIxLnN0b3AgKyAnXycgK1xuICAgICAgJ19fJyArXG4gICAgICByMi5jaHIuaWQgKyAnXycgKyByMi5zdGFydCArICdfJyArIHIyLnN0b3BcbiAgICApO1xuXG4gICAgICBzeW50ZW5pY1JlZ2lvbiA9IHN5bnRlbmllcy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnc3ludGVuaWNSZWdpb24nKVxuICAgICAgICAuYXR0cignaWQnLCByZWdpb25JRClcbiAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhY3RpdmVSZWdpb24gPSB0aGlzO1xuICAgICAgICAgIHZhciBvdGhlcnMgPSBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLnN5bnRlbmljUmVnaW9uJylcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAodGhpcyAhPT0gYWN0aXZlUmVnaW9uKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgb3RoZXJzLmNsYXNzZWQoJ2hpZGRlbicsICFvdGhlcnMuY2xhc3NlZCgnaGlkZGVuJykpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhY3RpdmVSZWdpb24gPSB0aGlzO1xuICAgICAgICAgIGQzLnNlbGVjdEFsbChpZGVvLnNlbGVjdG9yICsgJyAuc3ludGVuaWNSZWdpb24nKVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICh0aGlzICE9PSBhY3RpdmVSZWdpb24pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jbGFzc2VkKCdnaG9zdCcsIHRydWUpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZDMuc2VsZWN0QWxsKGlkZW8uc2VsZWN0b3IgKyAnIC5zeW50ZW5pY1JlZ2lvbicpXG4gICAgICAgICAgICAuY2xhc3NlZCgnZ2hvc3QnLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgdmFyIGNocldpZHRoID0gaWRlby5jb25maWcuY2hyV2lkdGg7XG4gICAgICB2YXIgeDEgPSB0aGlzLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoMCk7XG4gICAgICB2YXIgeDIgPSB0aGlzLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoMSkgLSBjaHJXaWR0aDtcblxuICAgICAgc3ludGVuaWNSZWdpb24uYXBwZW5kKCdwb2x5Z29uJylcbiAgICAgICAgLmF0dHIoJ3BvaW50cycsXG4gICAgICAgICAgeDEgKyAnLCAnICsgcjEuc3RhcnRQeCArICcgJyArXG4gICAgICAgICAgeDEgKyAnLCAnICsgcjEuc3RvcFB4ICsgJyAnICtcbiAgICAgICAgICB4MiArICcsICcgKyByMi5zdG9wUHggKyAnICcgK1xuICAgICAgICAgIHgyICsgJywgJyArIHIyLnN0YXJ0UHhcbiAgICAgICAgKVxuICAgICAgICAuYXR0cignc3R5bGUnLCAnZmlsbDogJyArIGNvbG9yICsgJzsgZmlsbC1vcGFjaXR5OiAnICsgb3BhY2l0eSk7XG5cbiAgICAgIHN5bnRlbmljUmVnaW9uLmFwcGVuZCgnbGluZScpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdzeW50ZW55Qm9yZGVyJylcbiAgICAgICAgLmF0dHIoJ3gxJywgeDEpXG4gICAgICAgIC5hdHRyKCd4MicsIHgyKVxuICAgICAgICAuYXR0cigneTEnLCByMS5zdGFydFB4KVxuICAgICAgICAuYXR0cigneTInLCByMi5zdGFydFB4KTtcblxuICAgICAgc3ludGVuaWNSZWdpb24uYXBwZW5kKCdsaW5lJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3N5bnRlbnlCb3JkZXInKVxuICAgICAgICAuYXR0cigneDEnLCB4MSlcbiAgICAgICAgLmF0dHIoJ3gyJywgeDIpXG4gICAgICAgIC5hdHRyKCd5MScsIHIxLnN0b3BQeClcbiAgICAgICAgLmF0dHIoJ3kyJywgcjIuc3RvcFB4KTtcbiAgICB9XG5cbiAgICB2YXIgdDEgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoaWRlby5kZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coJ1RpbWUgaW4gZHJhd1N5bnRlbmljUmVnaW9uczogJyArICh0MSAtIHQwKSArICcgbXMnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBJbml0aWFsaXplcyB2YXJpb3VzIGFubm90YXRpb24gc2V0dGluZ3MuICBDb25zdHJ1Y3RvciBoZWxwIGZ1bmN0aW9uLlxuICAqL1xuICBpbml0QW5ub3RTZXR0aW5ncygpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbmZpZy5hbm5vdGF0aW9uc1BhdGggfHxcbiAgICAgIHRoaXMuY29uZmlnLmxvY2FsQW5ub3RhdGlvbnNQYXRoIHx8XG4gICAgICB0aGlzLmFubm90cyB8fCB0aGlzLmNvbmZpZy5hbm5vdGF0aW9uc1xuICAgICkge1xuICAgICAgaWYgKCF0aGlzLmNvbmZpZy5hbm5vdGF0aW9uSGVpZ2h0KSB7XG4gICAgICAgIHZhciBhbm5vdEhlaWdodCA9IE1hdGgucm91bmQodGhpcy5jb25maWcuY2hySGVpZ2h0IC8gMTAwKTtcbiAgICAgICAgdGhpcy5jb25maWcuYW5ub3RhdGlvbkhlaWdodCA9IGFubm90SGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb25maWcuYW5ub3RhdGlvblRyYWNrcykge1xuICAgICAgICB0aGlzLmNvbmZpZy5udW1Bbm5vdFRyYWNrcyA9IHRoaXMuY29uZmlnLmFubm90YXRpb25UcmFja3MubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb25maWcubnVtQW5ub3RUcmFja3MgPSAxO1xuICAgICAgfVxuICAgICAgdGhpcy5jb25maWcuYW5ub3RUcmFja3NIZWlnaHQgPVxuICAgICAgdGhpcy5jb25maWcuYW5ub3RhdGlvbkhlaWdodCAqIHRoaXMuY29uZmlnLm51bUFubm90VHJhY2tzO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlnLmJhcldpZHRoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmNvbmZpZy5iYXJXaWR0aCA9IDM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29uZmlnLmFubm90VHJhY2tzSGVpZ2h0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlnLmFubm90YXRpb25zQ29sb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmNvbmZpZy5hbm5vdGF0aW9uc0NvbG9yID0gJyNGMDAnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIERyYXdzIGFubm90YXRpb25zIGRlZmluZWQgYnkgdXNlclxuICAqL1xuICBkcmF3QW5ub3RzKGZyaWVuZGx5QW5ub3RzKSB7XG4gICAgdmFyIGlkZW8gPSB0aGlzLFxuICAgICAgaSwgaiwgYW5ub3QsXG4gICAgICByYXdBbm5vdHMgPSBbXSxcbiAgICAgIHJhd0Fubm90LCBrZXlzLFxuICAgICAgY2hyLFxuICAgICAgY2hycyA9IGlkZW8uY2hyb21vc29tZXNbaWRlby5jb25maWcudGF4aWRdOyAvLyBUT0RPOiBtdWx0aW9yZ2FuaXNtXG5cbiAgICAvLyBPY2N1cnMgd2hlbiBmaWx0ZXJpbmdcbiAgICBpZiAoJ2Fubm90cycgaW4gZnJpZW5kbHlBbm5vdHNbMF0pIHtcbiAgICAgIHJldHVybiBpZGVvLmRyYXdQcm9jZXNzZWRBbm5vdHMoZnJpZW5kbHlBbm5vdHMpO1xuICAgIH1cblxuICAgIGZvciAoY2hyIGluIGNocnMpIHtcbiAgICAgIHJhd0Fubm90cy5wdXNoKHtjaHI6IGNociwgYW5ub3RzOiBbXX0pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBmcmllbmRseUFubm90cy5sZW5ndGg7IGkrKykge1xuICAgICAgYW5ub3QgPSBmcmllbmRseUFubm90c1tpXTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IHJhd0Fubm90cy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoYW5ub3QuY2hyID09PSByYXdBbm5vdHNbal0uY2hyKSB7XG4gICAgICAgICAgcmF3QW5ub3QgPSBbXG4gICAgICAgICAgICBhbm5vdC5uYW1lLFxuICAgICAgICAgICAgYW5ub3Quc3RhcnQsXG4gICAgICAgICAgICBhbm5vdC5zdG9wIC0gYW5ub3Quc3RhcnRcbiAgICAgICAgICBdO1xuICAgICAgICAgIGlmICgnY29sb3InIGluIGFubm90KSB7XG4gICAgICAgICAgICByYXdBbm5vdC5wdXNoKGFubm90LmNvbG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdzaGFwZScgaW4gYW5ub3QpIHtcbiAgICAgICAgICAgIHJhd0Fubm90LnB1c2goYW5ub3Quc2hhcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByYXdBbm5vdHNbal0uYW5ub3RzLnB1c2gocmF3QW5ub3QpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAga2V5cyA9IFsnbmFtZScsICdzdGFydCcsICdsZW5ndGgnXTtcbiAgICBpZiAoJ2NvbG9yJyBpbiBmcmllbmRseUFubm90c1swXSkge1xuICAgICAga2V5cy5wdXNoKCdjb2xvcicpO1xuICAgIH1cbiAgICBpZiAoJ3NoYXBlJyBpbiBmcmllbmRseUFubm90c1swXSkge1xuICAgICAga2V5cy5wdXNoKCdzaGFwZScpO1xuICAgIH1cbiAgICBpZGVvLnJhd0Fubm90cyA9IHtrZXlzOiBrZXlzLCBhbm5vdHM6IHJhd0Fubm90c307XG5cbiAgICBpZGVvLmFubm90cyA9IGlkZW8ucHJvY2Vzc0Fubm90RGF0YShpZGVvLnJhd0Fubm90cyk7XG5cbiAgICBpZGVvLmRyYXdQcm9jZXNzZWRBbm5vdHMoaWRlby5hbm5vdHMpO1xuICB9XG5cbiAgLyoqXG4gICogUHJvY2Nlc3NlcyBnZW5vbWUgYW5ub3RhdGlvbiBkYXRhLlxuICAqIEdlbm9tZSBhbm5vdGF0aW9ucyByZXByZXNlbnQgZmVhdHVyZXMgbGlrZSBhIGdlbmUsIFNOUCwgZXRjLiBhc1xuICAqIGEgc21hbGwgZ3JhcGhpY2FsIG9iamVjdCBvbiBvciBiZXNpZGUgYSBjaHJvbW9zb21lLlxuICAqIENvbnZlcnRzIHJhdyBhbm5vdGF0aW9uIGRhdGEgZnJvbSBzZXJ2ZXIsIHdoaWNoIGlzIHN0cnVjdHVyZWQgYXNcbiAgKiBhbiBhcnJheSBvZiBhcnJheXMsIGludG8gYSBtb3JlIHZlcmJvc2UgZGF0YSBzdHJ1Y3R1cmUgY29uc2lzdGluZ1xuICAqIG9mIGFuIGFycmF5IG9mIG9iamVjdHMuXG4gICogQWxzbyBhZGRzIHBpeGVsIG9mZnNldCBpbmZvcm1hdGlvbi5cbiAgKi9cbiAgcHJvY2Vzc0Fubm90RGF0YShyYXdBbm5vdHMpIHtcbiAgICB2YXIga2V5cyxcbiAgICAgIGksIGosIGFubm90LCBhbm5vdHMsIGFubm90c0J5Q2hyLFxuICAgICAgY2hyLFxuICAgICAgY2hyTW9kZWwsIHJhLFxuICAgICAgc3RhcnRQeCwgc3RvcFB4LCBweCxcbiAgICAgIGNvbG9yLFxuICAgICAgaWRlbyA9IHRoaXM7XG5cbiAgICBrZXlzID0gcmF3QW5ub3RzLmtleXM7XG4gICAgcmF3QW5ub3RzID0gcmF3QW5ub3RzLmFubm90cztcblxuICAgIGFubm90cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHJhd0Fubm90cy5sZW5ndGg7IGkrKykge1xuICAgICAgYW5ub3RzQnlDaHIgPSByYXdBbm5vdHNbaV07XG5cbiAgICAgIGFubm90cy5wdXNoKHtjaHI6IGFubm90c0J5Q2hyLmNociwgYW5ub3RzOiBbXX0pO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgYW5ub3RzQnlDaHIuYW5ub3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNociA9IGFubm90c0J5Q2hyLmNocjtcbiAgICAgICAgcmEgPSBhbm5vdHNCeUNoci5hbm5vdHNbal07XG4gICAgICAgIGFubm90ID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgYW5ub3Rba2V5c1trXV0gPSByYVtrXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFubm90LnN0b3AgPSBhbm5vdC5zdGFydCArIGFubm90Lmxlbmd0aDtcblxuICAgICAgICBjaHJNb2RlbCA9IGlkZW8uY2hyb21vc29tZXNbaWRlby5jb25maWcudGF4aWRdW2Nocl07XG5cbiAgICAgICAgc3RhcnRQeCA9IGlkZW8uY29udmVydEJwVG9QeChjaHJNb2RlbCwgYW5ub3Quc3RhcnQpO1xuICAgICAgICBzdG9wUHggPSBpZGVvLmNvbnZlcnRCcFRvUHgoY2hyTW9kZWwsIGFubm90LnN0b3ApO1xuXG4gICAgICAgIHB4ID0gTWF0aC5yb3VuZCgoc3RhcnRQeCArIHN0b3BQeCkgLyAyKSAtIDI4O1xuXG4gICAgICAgIGNvbG9yID0gaWRlby5jb25maWcuYW5ub3RhdGlvbnNDb2xvcjtcbiAgICAgICAgaWYgKGlkZW8uY29uZmlnLmFubm90YXRpb25UcmFja3MpIHtcbiAgICAgICAgICBhbm5vdC50cmFja0luZGV4ID0gcmFbM107XG4gICAgICAgICAgY29sb3IgPSBpZGVvLmNvbmZpZy5hbm5vdGF0aW9uVHJhY2tzW2Fubm90LnRyYWNrSW5kZXhdLmNvbG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFubm90LnRyYWNrSW5kZXggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdjb2xvcicgaW4gYW5ub3QpIHtcbiAgICAgICAgICBjb2xvciA9IGFubm90LmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5ub3QuY2hyID0gY2hyO1xuICAgICAgICBhbm5vdC5jaHJJbmRleCA9IGk7XG4gICAgICAgIGFubm90LnB4ID0gcHg7XG4gICAgICAgIGFubm90LnN0YXJ0UHggPSBzdGFydFB4IC0gMzA7XG4gICAgICAgIGFubm90LnN0b3BQeCA9IHN0b3BQeCAtIDMwO1xuICAgICAgICBhbm5vdC5jb2xvciA9IGNvbG9yO1xuXG4gICAgICAgIGFubm90c1tpXS5hbm5vdHMucHVzaChhbm5vdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFubm90cztcbiAgfVxuXG4gIC8qXG4gICogQ2FuIGJlIHVzZWQgZm9yIGJhciBjaGFydCBvciBzcGFya2xpbmVcbiAgKi9cbiAgZ2V0SGlzdG9ncmFtQmFycyhhbm5vdHMpIHtcbiAgICB2YXIgdDAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIHZhciBpLCBqLCBjaHIsXG4gICAgICBjaHJNb2RlbHMsIGNoclB4U3RvcCwgcHgsXG4gICAgICBjaHJBbm5vdHMsIGNock5hbWUsIGNockluZGV4LCBhbm5vdCxcbiAgICAgIGJhcnMsIGJhciwgYmFyUHgsIG5leHRCYXJQeCwgYmFyV2lkdGgsXG4gICAgICBtYXhBbm5vdHNQZXJCYXIsIGNvbG9yLFxuICAgICAgZmlyc3RHZXQgPSBmYWxzZSxcbiAgICAgIGhpc3RvZ3JhbVNjYWxpbmcsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIGJhcnMgPSBbXTtcblxuICAgIGJhcldpZHRoID0gaWRlby5jb25maWcuYmFyV2lkdGg7XG4gICAgY2hyTW9kZWxzID0gaWRlby5jaHJvbW9zb21lc1tpZGVvLmNvbmZpZy50YXhpZF07XG4gICAgY29sb3IgPSBpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc0NvbG9yO1xuXG4gICAgaWYgKCdoaXN0b2dyYW1TY2FsaW5nJyBpbiBpZGVvLmNvbmZpZykge1xuICAgICAgaGlzdG9ncmFtU2NhbGluZyA9IGlkZW8uY29uZmlnLmhpc3RvZ3JhbVNjYWxpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpc3RvZ3JhbVNjYWxpbmcgPSAncmVsYXRpdmUnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaWRlby5tYXhBbm5vdHNQZXJCYXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZGVvLm1heEFubm90c1BlckJhciA9IHt9O1xuICAgICAgZmlyc3RHZXQgPSB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoY2hyIGluIGNock1vZGVscykge1xuICAgICAgY2hyTW9kZWwgPSBjaHJNb2RlbHNbY2hyXTtcbiAgICAgIGNockluZGV4ID0gY2hyTW9kZWwuY2hySW5kZXg7XG4gICAgICBsYXN0QmFuZCA9IGNock1vZGVsLmJhbmRzW2Nock1vZGVsLmJhbmRzLmxlbmd0aCAtIDFdO1xuICAgICAgY2hyUHhTdG9wID0gbGFzdEJhbmQucHguc3RvcDtcbiAgICAgIG51bUJpbnMgPSBNYXRoLnJvdW5kKGNoclB4U3RvcCAvIGJhcldpZHRoKTtcbiAgICAgIGJhciA9IHtjaHI6IGNociwgYW5ub3RzOiBbXX07XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQmluczsgaSsrKSB7XG4gICAgICAgIHB4ID0gaSAqIGJhcldpZHRoIC0gaWRlby5idW1wO1xuICAgICAgICBicCA9IGlkZW8uY29udmVydFB4VG9CcChjaHJNb2RlbCwgcHggKyBpZGVvLmJ1bXApO1xuICAgICAgICBiYXIuYW5ub3RzLnB1c2goe1xuICAgICAgICAgIGJwOiBicCxcbiAgICAgICAgICBweDogcHggLSBpZGVvLmJ1bXAsXG4gICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgY2hySW5kZXg6IGNockluZGV4LFxuICAgICAgICAgIGNock5hbWU6IGNocixcbiAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgYW5ub3RzOiBbXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGJhcnMucHVzaChiYXIpO1xuICAgIH1cblxuICAgIGZvciAoY2hyIGluIGFubm90cykge1xuICAgICAgY2hyQW5ub3RzID0gYW5ub3RzW2Nocl0uYW5ub3RzO1xuICAgICAgY2hyTmFtZSA9IGFubm90c1tjaHJdLmNocjtcbiAgICAgIGNock1vZGVsID0gY2hyTW9kZWxzW2Nock5hbWVdO1xuICAgICAgY2hySW5kZXggPSBjaHJNb2RlbC5jaHJJbmRleCAtIDE7XG4gICAgICBiYXJBbm5vdHMgPSBiYXJzW2NockluZGV4XS5hbm5vdHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2hyQW5ub3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFubm90ID0gY2hyQW5ub3RzW2ldO1xuICAgICAgICBweCA9IGFubm90LnB4IC0gaWRlby5idW1wO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgYmFyQW5ub3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgYmFyUHggPSBiYXJBbm5vdHNbal0ucHg7XG4gICAgICAgICAgbmV4dEJhclB4ID0gYmFyUHggKyBiYXJXaWR0aDtcbiAgICAgICAgICBpZiAoaiA9PT0gYmFyQW5ub3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIG5leHRCYXJQeCArPSBiYXJXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHB4ID49IGJhclB4ICYmIHB4IDwgbmV4dEJhclB4KSB7XG4gICAgICAgICAgICBiYXJzW2NockluZGV4XS5hbm5vdHNbal0uY291bnQgKz0gMTtcbiAgICAgICAgICAgIGJhcnNbY2hySW5kZXhdLmFubm90c1tqXS5hbm5vdHMucHVzaChhbm5vdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmlyc3RHZXQgPT09IHRydWUgfHwgaGlzdG9ncmFtU2NhbGluZyA9PT0gJ3JlbGF0aXZlJykge1xuICAgICAgbWF4QW5ub3RzUGVyQmFyID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBiYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFubm90cyA9IGJhcnNbaV0uYW5ub3RzO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgYW5ub3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgYmFyQ291bnQgPSBhbm5vdHNbal0uY291bnQ7XG4gICAgICAgICAgaWYgKGJhckNvdW50ID4gbWF4QW5ub3RzUGVyQmFyKSB7XG4gICAgICAgICAgICBtYXhBbm5vdHNQZXJCYXIgPSBiYXJDb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlkZW8ubWF4QW5ub3RzUGVyQmFyW2Nocl0gPSBtYXhBbm5vdHNQZXJCYXI7XG4gICAgfVxuXG4gIC8vIFNldCBlYWNoIGJhcidzIGhlaWdodCB0byBiZSBwcm9wb3J0aW9uYWwgdG9cbiAgLy8gdGhlIGhlaWdodCBvZiB0aGUgYmFyIHdpdGggdGhlIG1vc3QgYW5ub3RhdGlvbnNcbiAgICBmb3IgKGkgPSAwOyBpIDwgYmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgYW5ub3RzID0gYmFyc1tpXS5hbm5vdHM7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgYW5ub3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGJhckNvdW50ID0gYW5ub3RzW2pdLmNvdW50O1xuICAgICAgICBoZWlnaHQgPSAoYmFyQ291bnQgLyBpZGVvLm1heEFubm90c1BlckJhcltjaHJdKSAqIGlkZW8uY29uZmlnLmNock1hcmdpbjtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGhlaWdodClcbiAgICAgICAgYmFyc1tpXS5hbm5vdHNbal0uaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0MSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChpZGVvLmRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZygnVGltZSBzcGVudCBpbiBnZXRIaXN0b2dyYW1CYXJzOiAnICsgKHQxIC0gdDApICsgJyBtcycpO1xuICAgIH1cblxuICAgIGlkZW8uYmFycyA9IGJhcnM7XG5cbiAgICByZXR1cm4gYmFycztcbiAgfVxuXG4vKipcbiogRmlsbHMgb3V0IGFubm90YXRpb25zIGRhdGEgc3RydWN0dXJlIHN1Y2ggdGhhdCBpdHMgdG9wLWxldmVsIGxpc3Qgb2YgYXJyYXlzXG4qIG1hdGNoZXMgdGhhdCBvZiB0aGlzIGlkZW9ncmFtJ3MgY2hyb21vc29tZXMgbGlzdCBpbiBvcmRlciBhbmQgbnVtYmVyXG4qIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9ld2VpdHovaWRlb2dyYW0vaXNzdWVzLzY2XG4qL1xuICBmaWxsQW5ub3RzKGFubm90cykge1xuICAgIHZhciBmaWxsZWRBbm5vdHMsIGNocnMsIGNockFycmF5LCBpLCBjaHIsIGFubm90LCBjaHJJbmRleDtcblxuICAgIGZpbGxlZEFubm90cyA9IFtdO1xuICAgIGNocnMgPSBbXTtcbiAgICBjaHJBcnJheSA9IHRoaXMuY2hyb21vc29tZXNBcnJheTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjaHJBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY2hyID0gY2hyQXJyYXlbaV0ubmFtZTtcbiAgICAgIGNocnMucHVzaChjaHIpO1xuICAgICAgZmlsbGVkQW5ub3RzLnB1c2goe2NocjogY2hyLCBhbm5vdHM6IFtdfSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGFubm90cy5sZW5ndGg7IGkrKykge1xuICAgICAgYW5ub3QgPSBhbm5vdHNbaV07XG4gICAgICBjaHJJbmRleCA9IGNocnMuaW5kZXhPZihhbm5vdC5jaHIpO1xuICAgICAgaWYgKGNockluZGV4ICE9PSAtMSkge1xuICAgICAgICBmaWxsZWRBbm5vdHNbY2hySW5kZXhdID0gYW5ub3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGxlZEFubm90cztcbiAgfVxuXG4vKipcbiogRHJhd3MgZ2Vub21lIGFubm90YXRpb25zIG9uIGNocm9tb3NvbWVzLlxuKiBBbm5vdGF0aW9ucyBjYW4gYmUgcmVuZGVyZWQgYXMgZWl0aGVyIG92ZXJsYWlkIGRpcmVjdGx5XG4qIG9uIGEgY2hyb21vc29tZSwgb3IgYWxvbmcgb25lIG9yIG1vcmUgXCJ0cmFja3NcIlxuKiBydW5uaW5nIHBhcmFsbGVsIHRvIGVhY2ggY2hyb21vc29tZS5cbiovXG4gIGRyYXdQcm9jZXNzZWRBbm5vdHMoYW5ub3RzKSB7XG4gICAgdmFyIGNocldpZHRoLCBsYXlvdXQsXG4gICAgICBhbm5vdEhlaWdodCwgdHJpYW5nbGUsIGNpcmNsZSwgciwgY2hyQW5ub3QsXG4gICAgICB4MSwgeDIsIHkxLCB5MixcbiAgICAgIGZpbGxlZEFubm90cyxcbiAgICAgIGlkZW8gPSB0aGlzO1xuXG4gICAgY2hyTWFyZ2luID0gdGhpcy5jb25maWcuY2hyTWFyZ2luO1xuICAgIGNocldpZHRoID0gdGhpcy5jb25maWcuY2hyV2lkdGg7XG5cbiAgICBsYXlvdXQgPSAndHJhY2tzJztcbiAgICBpZiAodGhpcy5jb25maWcuYW5ub3RhdGlvbnNMYXlvdXQpIHtcbiAgICAgIGxheW91dCA9IHRoaXMuY29uZmlnLmFubm90YXRpb25zTGF5b3V0O1xuICAgIH1cblxuICAgIGlmIChsYXlvdXQgPT09ICdoaXN0b2dyYW0nKSB7XG4gICAgICBhbm5vdHMgPSBpZGVvLmdldEhpc3RvZ3JhbUJhcnMoYW5ub3RzKTtcbiAgICB9XG5cbiAgICBhbm5vdEhlaWdodCA9IGlkZW8uY29uZmlnLmFubm90YXRpb25IZWlnaHQ7XG5cbiAgICB0cmlhbmdsZSA9XG4gICAgJ2wgLScgKyBhbm5vdEhlaWdodCArICcgJyArXG4gICAgKDIgKiBhbm5vdEhlaWdodCkgK1xuICAgICcgbCAnICsgKDIgKiBhbm5vdEhlaWdodCkgKyAnIDAgeic7XG5cbiAgLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMDQ3NzMzNCwgd2l0aCBhIG1pbm9yIGNoYW5nZSAoXCJtIC1yLCByXCIpXG4gIC8vIENpcmNsZXMgYXJlIHN1cHBvcnRlZCBuYXRpdmVseSB2aWEgPGNpcmNsZT4sIGJ1dCBoYXZpbmcgaXQgYXMgYSBwYXRoXG4gIC8vIHNpbXBsaWZpZXMgaGFuZGxpbmcgdHJpYW5nbGVzLCBjaXJjbGVzIGFuZCBvdGhlciBzaGFwZXMgaW4gdGhlIHNhbWVcbiAgLy8gRDMgY2FsbFxuICAgIHIgPSBhbm5vdEhlaWdodDtcbiAgICBjaXJjbGUgPVxuICAgICdtIC0nICsgciArICcsICcgKyByICtcbiAgICAnYSAnICsgciArICcsJyArIHIgKyAnIDAgMSwwICcgKyAociAqIDIpICsgJywwJyArXG4gICAgJ2EgJyArIHIgKyAnLCcgKyByICsgJyAwIDEsMCAtJyArIChyICogMikgKyAnLDAnO1xuXG4gICAgZmlsbGVkQW5ub3RzID0gaWRlby5maWxsQW5ub3RzKGFubm90cyk7XG5cbiAgICBjaHJBbm5vdCA9IGQzLnNlbGVjdEFsbChpZGVvLnNlbGVjdG9yICsgJyAuY2hyb21vc29tZScpXG4gICAgLmRhdGEoZmlsbGVkQW5ub3RzKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aC5hbm5vdCcpXG4gICAgICAuZGF0YShmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLmFubm90cztcbiAgICAgIH0pXG4gICAgICAuZW50ZXIoKTtcblxuICAgIGlmIChsYXlvdXQgPT09ICd0cmFja3MnKSB7XG4gICAgICBjaHJBbm5vdFxuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignaWQnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLmlkO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCdjbGFzcycsICdhbm5vdCcpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgeSA9IGlkZW8uY29uZmlnLmNocldpZHRoICsgKGQudHJhY2tJbmRleCAqIGFubm90SGVpZ2h0ICogMik7XG4gICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBkLnB4ICsgJywnICsgeSArICcpJztcbiAgICAgIH0pXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICBpZiAoIWQuc2hhcGUgfHwgZC5zaGFwZSA9PT0gJ3RyaWFuZ2xlJykge1xuICAgICAgICAgIHJldHVybiAnbTAsMCcgKyB0cmlhbmdsZTtcbiAgICAgICAgfSBlbHNlIGlmIChkLnNoYXBlID09PSAnY2lyY2xlJykge1xuICAgICAgICAgIHJldHVybiBjaXJjbGU7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuY29sb3I7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGxheW91dCA9PT0gJ292ZXJsYXknKSB7XG4gICAgICAvLyBPdmVybGFpZCBhbm5vdGF0aW9ucyBhcHBlYXIgZGlyZWN0bHkgb24gY2hyb21vc29tZXNcblxuICAgICAgY2hyQW5ub3QuYXBwZW5kKCdwb2x5Z29uJylcbiAgICAgICAgLmF0dHIoJ2lkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkLmlkO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnYW5ub3QnKVxuICAgICAgICAuYXR0cigncG9pbnRzJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGlmIChkLnN0b3BQeCAtIGQuc3RhcnRQeCA+IDEpIHtcbiAgICAgICAgICAgIHgxID0gZC5zdGFydFB4O1xuICAgICAgICAgICAgeDIgPSBkLnN0b3BQeDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeDEgPSBkLnB4IC0gMC41O1xuICAgICAgICAgICAgeDIgPSBkLnB4ICsgMC41O1xuICAgICAgICAgIH1cbiAgICAgICAgICB5MSA9IGNocldpZHRoO1xuICAgICAgICAgIHkyID0gMDtcblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB4MSArICcsJyArIHkxICsgJyAnICtcbiAgICAgICAgICAgIHgyICsgJywnICsgeTEgKyAnICcgK1xuICAgICAgICAgICAgeDIgKyAnLCcgKyB5MiArICcgJyArXG4gICAgICAgICAgICB4MSArICcsJyArIHkyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQuY29sb3I7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobGF5b3V0ID09PSAnaGlzdG9ncmFtJykge1xuICAgICAgY2hyQW5ub3QuYXBwZW5kKCdwb2x5Z29uJylcbiAgICAgICAgLy8gLmF0dHIoJ2lkJywgZnVuY3Rpb24oZCwgaSkgeyByZXR1cm4gZC5pZDsgfSlcbiAgICAgICAgLmF0dHIoJ3pjbGFzcycsICdhbm5vdCcpXG4gICAgICAgIC5hdHRyKCdwb2ludHMnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgeDEgPSBkLnB4ICsgaWRlby5idW1wO1xuICAgICAgICAgIHgyID0gZC5weCArIGlkZW8uY29uZmlnLmJhcldpZHRoICsgaWRlby5idW1wO1xuICAgICAgICAgIHkxID0gY2hyV2lkdGg7XG4gICAgICAgICAgeTIgPSBjaHJXaWR0aCArIGQuaGVpZ2h0O1xuXG4gICAgICAgICAgdmFyIHRoaXNDaHJXaWR0aCA9IGlkZW8uY2hyb21vc29tZXNBcnJheVtkLmNockluZGV4IC0gMV0ud2lkdGg7XG5cbiAgICAgICAgICBpZiAoeDIgPiB0aGlzQ2hyV2lkdGgpIHtcbiAgICAgICAgICAgIHgyID0gdGhpc0NocldpZHRoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB4MSArICcsJyArIHkxICsgJyAnICtcbiAgICAgICAgICAgIHgyICsgJywnICsgeTEgKyAnICcgK1xuICAgICAgICAgICAgeDIgKyAnLCcgKyB5MiArICcgJyArXG4gICAgICAgICAgICB4MSArICcsJyArIHkyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQuY29sb3I7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpZGVvLm9uRHJhd0Fubm90c0NhbGxiYWNrKSB7XG4gICAgICBpZGVvLm9uRHJhd0Fubm90c0NhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgb25CcnVzaE1vdmUoKSB7XG4gICAgY2FsbCh0aGlzLm9uQnJ1c2hNb3ZlQ2FsbGJhY2spO1xuICB9XG5cbiAgY3JlYXRlQnJ1c2goZnJvbSwgdG8pIHtcbiAgICB2YXIgaWRlbyA9IHRoaXMsXG4gICAgICB3aWR0aCA9IGlkZW8uY29uZmlnLmNocldpZHRoICsgNi41LFxuICAgICAgbGVuZ3RoID0gaWRlby5jb25maWcuY2hySGVpZ2h0LFxuICAgICAgY2hyID0gaWRlby5jaHJvbW9zb21lc0FycmF5WzBdLFxuICAgICAgY2hyTGVuZ3RoQnAgPSBjaHIuYmFuZHNbY2hyLmJhbmRzLmxlbmd0aCAtIDFdLmJwLnN0b3AsXG4gICAgICB4MCwgeDEsXG4gICAgICB4T2Zmc2V0ID0gdGhpcy5fbGF5b3V0LmdldE1hcmdpbigpLmxlZnQsXG4gICAgICB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgLmRvbWFpbihbMCwgZDMubWF4KGNoci5iYW5kcywgZnVuY3Rpb24oYmFuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJhbmQuYnAuc3RvcDtcbiAgICAgICAgICB9KV0pLnJhbmdlKFt4T2Zmc2V0LCBkMy5tYXgoY2hyLmJhbmRzLCBmdW5jdGlvbihiYW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFuZC5weC5zdG9wO1xuICAgICAgICAgIH0pICsgeE9mZnNldF0pO1xuXG4gICAgaWYgKHR5cGVvZiBmcm9tID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZnJvbSA9IE1hdGguZmxvb3IoY2hyTGVuZ3RoQnAgLyAxMCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByaWdodCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRvID0gTWF0aC5jZWlsKGZyb20gKiAyKTtcbiAgICB9XG5cbiAgICB4MCA9IGlkZW8uY29udmVydEJwVG9QeChjaHIsIGZyb20pO1xuICAgIHgxID0gaWRlby5jb252ZXJ0QnBUb1B4KGNociwgdG8pO1xuXG4gICAgaWRlby5zZWxlY3RlZFJlZ2lvbiA9IHtmcm9tOiBmcm9tLCB0bzogdG8sIGV4dGVudDogKHRvIC0gZnJvbSl9O1xuXG4gICAgaWRlby5icnVzaCA9IGQzLmJydXNoWCgpXG4gICAgLmV4dGVudChbW3hPZmZzZXQsIDBdLCBbbGVuZ3RoICsgeE9mZnNldCwgd2lkdGhdXSlcbiAgICAub24oJ2JydXNoJywgb25CcnVzaE1vdmUpO1xuXG4gICAgdmFyIHlUcmFuc2xhdGUgPSB0aGlzLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoMCk7XG4gICAgdmFyIHlPZmZzZXQgPSB5VHJhbnNsYXRlICsgKGlkZW8uY29uZmlnLmNocldpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICBkMy5zZWxlY3QoaWRlby5zZWxlY3RvcikuYXBwZW5kKCdnJylcbiAgICAuYXR0cignY2xhc3MnLCAnYnJ1c2gnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsICcgKyB5T2Zmc2V0ICsgJyknKVxuICAgIC5jYWxsKGlkZW8uYnJ1c2gpXG4gICAgLmNhbGwoaWRlby5icnVzaC5tb3ZlLCBbeDAsIHgxXSk7XG5cbiAgICBmdW5jdGlvbiBvbkJydXNoTW92ZSgpIHtcbiAgICAgIHZhciBleHRlbnQgPSBkMy5ldmVudC5zZWxlY3Rpb24ubWFwKHhTY2FsZS5pbnZlcnQpLFxuICAgICAgICBmcm9tID0gTWF0aC5mbG9vcihleHRlbnRbMF0pLFxuICAgICAgICB0byA9IE1hdGguY2VpbChleHRlbnRbMV0pO1xuXG4gICAgICBpZGVvLnNlbGVjdGVkUmVnaW9uID0ge2Zyb206IGZyb20sIHRvOiB0bywgZXh0ZW50OiAodG8gLSBmcm9tKX07XG5cbiAgICAgIGlmIChpZGVvLm9uQnJ1c2hNb3ZlKSB7XG4gICAgICAgIGlkZW8ub25CcnVzaE1vdmVDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4vKipcbiogQ2FsbGVkIHdoZW4gSWRlb2dyYW0gaGFzIGZpbmlzaGVkIGluaXRpYWxpemluZy5cbiogQWNjb3VudHMgZm9yIGNlcnRhaW4gaWRlb2dyYW0gcHJvcGVydGllcyBub3QgYmVpbmcgc2V0IHVudGlsXG4qIGFzeW5jaHJvbm91cyByZXF1ZXN0cyBzdWNjZWVkLCBldGMuXG4qL1xuICBvbkxvYWQoKSB7XG4gICAgY2FsbCh0aGlzLm9uTG9hZENhbGxiYWNrKTtcbiAgfVxuXG4gIG9uRHJhd0Fubm90cygpIHtcbiAgICBjYWxsKHRoaXMub25EcmF3QW5ub3RzQ2FsbGJhY2spO1xuICB9XG5cbi8qXG4qIFJldHVybnMgU1ZHIGdyYWRpZW50cyB0aGF0IGdpdmUgY2hyb21vc29tZXMgYSBwb2xpc2hlZCBsb29rXG4qL1xuICBnZXRCYW5kQ29sb3JHcmFkaWVudHMoKSB7XG4gICAgdmFyIGNvbG9ycyxcbiAgICAgIHN0YWluLCBjb2xvcjEsIGNvbG9yMiwgY29sb3IzLFxuICAgICAgY3NzLFxuICAgICAgZ3JhZGllbnRzID0gJyc7XG5cbiAgICBjb2xvcnMgPSBbXG4gICAgWydnbmVnJywgJyNGRkYnLCAnI0ZGRicsICcjREREJ10sXG4gICAgWydncG9zMjUnLCAnI0M4QzhDOCcsICcjREREJywgJyNCQkInXSxcbiAgICBbJ2dwb3MzMycsICcjQkJCJywgJyNCQkInLCAnI0FBQSddLFxuICAgIFsnZ3BvczUwJywgJyM5OTknLCAnI0FBQScsICcjODg4J10sXG4gICAgWydncG9zNjYnLCAnIzg4OCcsICcjODg4JywgJyM2NjYnXSxcbiAgICBbJ2dwb3M3NScsICcjNzc3JywgJyM3NzcnLCAnIzQ0NCddLFxuICAgIFsnZ3BvczEwMCcsICcjNDQ0JywgJyM2NjYnLCAnIzAwMCddLFxuICAgIFsnYWNlbicsICcjRkVFJywgJyNGRUUnLCAnI0ZERCddLFxuICAgIFsnbm9CYW5kcycsICcjQkJCJywgJyNCQkInLCAnI0FBQSddXG4gICAgXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdGFpbiA9IGNvbG9yc1tpXVswXTtcbiAgICAgIGNvbG9yMSA9IGNvbG9yc1tpXVsxXTtcbiAgICAgIGNvbG9yMiA9IGNvbG9yc1tpXVsyXTtcbiAgICAgIGNvbG9yMyA9IGNvbG9yc1tpXVszXTtcbiAgICAgIGdyYWRpZW50cyArPVxuICAgICAgJzxsaW5lYXJHcmFkaWVudCBpZD1cIicgKyBzdGFpbiArICdcIiB4MT1cIjAlXCIgeTE9XCIwJVwiIHgyPVwiMCVcIiB5Mj1cIjEwMCVcIj4nO1xuICAgICAgaWYgKHN0YWluID09PSBcImduZWdcIikge1xuICAgICAgICBncmFkaWVudHMgKz1cbiAgICAgICAgJzxzdG9wIG9mZnNldD1cIjcwJVwiIHN0b3AtY29sb3I9XCInICsgY29sb3IyICsgJ1wiIC8+JyArXG4gICAgICAgICc8c3RvcCBvZmZzZXQ9XCI5NSVcIiBzdG9wLWNvbG9yPVwiJyArIGNvbG9yMyArICdcIiAvPicgK1xuICAgICAgICAnPHN0b3Agb2Zmc2V0PVwiMTAwJVwiIHN0b3AtY29sb3I9XCInICsgY29sb3IxICsgJ1wiIC8+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyYWRpZW50cyArPVxuICAgICAgICAnPHN0b3Agb2Zmc2V0PVwiNSVcIiBzdG9wLWNvbG9yPVwiJyArIGNvbG9yMSArICdcIiAvPicgK1xuICAgICAgICAnPHN0b3Agb2Zmc2V0PVwiMTUlXCIgc3RvcC1jb2xvcj1cIicgKyBjb2xvcjIgKyAnXCIgLz4nICtcbiAgICAgICAgJzxzdG9wIG9mZnNldD1cIjYwJVwiIHN0b3AtY29sb3I9XCInICsgY29sb3IzICsgJ1wiIC8+JztcbiAgICAgIH1cbiAgICAgIGdyYWRpZW50cyArPVxuICAgICAgJzwvbGluZWFyR3JhZGllbnQ+JztcbiAgICB9XG5cbiAgICBncmFkaWVudHMgKz1cbiAgICAnPHBhdHRlcm4gaWQ9XCJzdGFsa1wiIHdpZHRoPVwiMlwiIGhlaWdodD1cIjFcIiBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiICcgK1xuICAgICAgJ3BhdHRlcm5UcmFuc2Zvcm09XCJyb3RhdGUoMzAgMCAwKVwiPicgK1xuICAgICAgJzxyZWN0IHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjEwXCIgaGVpZ2h0PVwiMlwiIGZpbGw9XCIjQ0NFXCIgLz4gJyArXG4gICAgICAgJzxsaW5lIHgxPVwiMFwiIHkxPVwiMFwiIHgyPVwiMFwiIHkyPVwiMTAwJVwiIHN0eWxlPVwic3Ryb2tlOiM4OEI7ICcgK1xuICAgICAgICAnc3Ryb2tlLXdpZHRoOjAuNztcIiAvPicgK1xuICAgICc8L3BhdHRlcm4+JyArXG4gICAgJzxwYXR0ZXJuIGlkPVwiZ3ZhclwiIHdpZHRoPVwiMlwiIGhlaWdodD1cIjFcIiBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiICcgK1xuICAgICAgJ3BhdHRlcm5UcmFuc2Zvcm09XCJyb3RhdGUoLTMwIDAgMClcIj4nICtcbiAgICAgICc8cmVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMFwiIGhlaWdodD1cIjJcIiBmaWxsPVwiI0RERlwiIC8+ICcgK1xuICAgICAgICc8bGluZSB4MT1cIjBcIiB5MT1cIjBcIiB4Mj1cIjBcIiB5Mj1cIjEwMCVcIiBzdHlsZT1cInN0cm9rZTojOTlDOyAnICtcbiAgICAgICAgICAnc3Ryb2tlLXdpZHRoOjAuNztcIiAvPicgK1xuICAgICc8L3BhdHRlcm4+JztcblxuICAgIGdyYWRpZW50cyA9IFwiPGRlZnM+XCIgKyBncmFkaWVudHMgKyBcIjwvZGVmcz5cIjtcbiAgICBjc3MgPSBcIjxzdHlsZT5cIiArXG4gICAgJy5nbmVnIHtmaWxsOiB1cmwoXCIjZ25lZ1wiKX0gJyArXG4gICAgJy5ncG9zMjUge2ZpbGw6IHVybChcIiNncG9zMjVcIil9ICcgK1xuICAgICcuZ3BvczMzIHtmaWxsOiB1cmwoXCIjZ3BvczMzXCIpfSAnICtcbiAgICAnLmdwb3M1MCB7ZmlsbDogdXJsKFwiI2dwb3M1MFwiKX0gJyArXG4gICAgJy5ncG9zNjYge2ZpbGw6IHVybChcIiNncG9zNjZcIil9ICcgK1xuICAgICcuZ3Bvczc1IHtmaWxsOiB1cmwoXCIjZ3Bvczc1XCIpfSAnICtcbiAgICAnLmdwb3MxMDAge2ZpbGw6IHVybChcIiNncG9zMTAwXCIpfSAnICtcbiAgICAnLmdwb3Mge2ZpbGw6IHVybChcIiNncG9zMTAwXCIpfSAnICtcbiAgICAnLmFjZW4ge2ZpbGw6IHVybChcIiNhY2VuXCIpfSAnICtcbiAgICAnLnN0YWxrIHtmaWxsOiB1cmwoXCIjc3RhbGtcIil9ICcgK1xuICAgICcuZ3ZhciB7ZmlsbDogdXJsKFwiI2d2YXJcIil9ICcgK1xuICAgICcubm9CYW5kcyB7ZmlsbDogdXJsKFwiI25vQmFuZHNcIil9ICcgK1xuICAgICcuY2hyb21vc29tZSB7ZmlsbDogdXJsKFwiI25vQmFuZHNcIil9ICcgK1xuICAnPC9zdHlsZT4nO1xuICAgIGdyYWRpZW50cyA9IGNzcyArIGdyYWRpZW50cztcblxuICAvLyBhbGVydChncmFkaWVudHMpXG5cbiAgICByZXR1cm4gZ3JhZGllbnRzO1xuICB9XG5cbi8qXG4qICBSZXR1cm5zIGFuIE5DQkkgdGF4b25vbXkgaWRlbnRpZmllciAodGF4aWQpIGZvciB0aGUgY29uZmlndXJlZCBvcmdhbmlzbVxuKi9cbiAgZ2V0VGF4aWRGcm9tRXV0aWxzKGNhbGxiYWNrKSB7XG4gICAgdmFyIG9yZ2FuaXNtLCB0YXhvbm9teVNlYXJjaCwgdGF4aWQsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIG9yZ2FuaXNtID0gaWRlby5jb25maWcub3JnYW5pc207XG5cbiAgICB0YXhvbm9teVNlYXJjaCA9IGlkZW8uZXNlYXJjaCArICcmZGI9dGF4b25vbXkmdGVybT0nICsgb3JnYW5pc207XG5cbiAgICBkMy5qc29uKHRheG9ub215U2VhcmNoLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB0YXhpZCA9IGRhdGEuZXNlYXJjaHJlc3VsdC5pZGxpc3RbMF07XG4gICAgICByZXR1cm4gY2FsbGJhY2sodGF4aWQpO1xuICAgIH0pO1xuICB9XG5cbi8qKlxuKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRheGlkcyBmb3IgdGhlIGN1cnJlbnQgaWRlb2dyYW1cbiogQWxzbyBzZXRzIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyByZWxhdGVkIHRvIHRheGlkKHMpLCB3aGV0aGVyIGlkZW9ncmFtIGlzXG4qIG11bHRpb3JnYW5pc20sIGFuZCBhZGp1c3RzIGNocm9tb3NvbWVzIHBhcmFtZXRlcnMgYXMgbmVlZGVkXG4qKi9cbiAgZ2V0VGF4aWRzKGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkZW8gPSB0aGlzLFxuICAgICAgdGF4aWQsIHRheGlkcyxcbiAgICAgIG9yZywgb3JncywgaSxcbiAgICAgIHRheGlkSW5pdCwgdG1wQ2hycyxcbiAgICAgIGFzc2VtYmx5LCBjaHJvbW9zb21lcyxcbiAgICAgIG11bHRpb3JnYW5pc20sIHByb21pc2U7XG5cbiAgICB0YXhpZEluaXQgPSAndGF4aWQnIGluIGlkZW8uY29uZmlnO1xuXG4gICAgaWRlby5jb25maWcubXVsdGlvcmdhbmlzbSA9IChcbiAgICAoJ29yZ2FuaXNtJyBpbiBpZGVvLmNvbmZpZyAmJiBpZGVvLmNvbmZpZy5vcmdhbmlzbSBpbnN0YW5jZW9mIEFycmF5KSB8fFxuICAgICh0YXhpZEluaXQgJiYgaWRlby5jb25maWcudGF4aWQgaW5zdGFuY2VvZiBBcnJheSlcbiAgKTtcblxuICAgIG11bHRpb3JnYW5pc20gPSBpZGVvLmNvbmZpZy5tdWx0aW9yZ2FuaXNtO1xuXG4gICAgaWYgKCdvcmdhbmlzbScgaW4gaWRlby5jb25maWcpIHtcbiAgICAvLyBJZGVvZ3JhbSBpbnN0YW5jZSB3YXMgY29uc3RydWN0ZWQgdXNpbmcgY29tbW9uIG9yZ2FuaXNtIG5hbWUocylcbiAgICAgIGlmIChtdWx0aW9yZ2FuaXNtKSB7XG4gICAgICAgIG9yZ3MgPSBpZGVvLmNvbmZpZy5vcmdhbmlzbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yZ3MgPSBbaWRlby5jb25maWcub3JnYW5pc21dO1xuICAgICAgfVxuXG4gICAgICB0YXhpZHMgPSBbXTtcbiAgICAgIHRtcENocnMgPSB7fTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBHZXRzIGEgbGlzdCBvZiB0YXhpZHMgZnJvbSBjb21tb24gb3JnYW5pc20gbmFtZXNcbiAgICAgICAgb3JnID0gb3Jnc1tpXTtcbiAgICAgICAgZm9yICh0YXhpZCBpbiBpZGVvLm9yZ2FuaXNtcykge1xuICAgICAgICAgIGlmIChpZGVvLm9yZ2FuaXNtc1t0YXhpZF0uY29tbW9uTmFtZS50b0xvd2VyQ2FzZSgpID09PSBvcmcpIHtcbiAgICAgICAgICAgIHRheGlkcy5wdXNoKHRheGlkKTtcbiAgICAgICAgICAgIGlmIChtdWx0aW9yZ2FuaXNtKSB7XG4gICAgICAgICAgICAvLyBBZGp1c3RzICdjaHJvbW9zb21lcycgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIgdG8gbWFrZSBvYmplY3RcbiAgICAgICAgICAgIC8vIGtleXMgdXNlIHRheGlkIGluc3RlYWQgb2YgY29tbW9uIG9yZ2FuaXNtIG5hbWVcbiAgICAgICAgICAgICAgdG1wQ2hyc1t0YXhpZF0gPSBpZGVvLmNvbmZpZy5jaHJvbW9zb21lc1tvcmddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGF4aWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgIGlkZW8uZ2V0VGF4aWRGcm9tRXV0aWxzKHJlc29sdmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHZhciBvcmdhbmlzbSA9IGlkZW8uY29uZmlnLm9yZ2FuaXNtLFxuICAgICAgICAgICAgZGF0YURpciA9IGlkZW8uY29uZmlnLmRhdGFEaXIsXG4gICAgICAgICAgICB1cmxPcmcgPSBvcmdhbmlzbS5yZXBsYWNlKCcgJywgJy0nKTtcblxuICAgICAgICAgIHRheGlkID0gZGF0YTtcbiAgICAgICAgICB0YXhpZHMucHVzaCh0YXhpZCk7XG5cbiAgICAgICAgICBpZGVvLmNvbmZpZy50YXhpZHMgPSB0YXhpZHM7XG4gICAgICAgICAgaWRlby5vcmdhbmlzbXNbdGF4aWRdID0ge1xuICAgICAgICAgICAgY29tbW9uTmFtZTogJycsXG4gICAgICAgICAgICBzY2llbnRpZmljTmFtZTogaWRlby5jb25maWcub3JnYW5pc20sXG4gICAgICAgICAgICBzY2llbnRpZmljTmFtZUFiYnI6ICcnXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBmdWxseUJhbmRlZFRheGlkcyA9IFsnOTYwNicsICcxMDA5MCcsICcxMDExNiddO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICBmdWxseUJhbmRlZFRheGlkcy5pbmRleE9mKHRheGlkKSAhPT0gLTEgJiZcbiAgICAgICAgICBpZGVvLmNvbmZpZy5zaG93RnVsbHlCYW5kZWQgPT09IGZhbHNlXG4gICAgICAgICkge1xuICAgICAgICAgICAgdXJsT3JnICs9ICctbm8tYmFuZHMnO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2hyb21vc29tZXNVcmwgPSBkYXRhRGlyICsgdXJsT3JnICsgJy5qcyc7XG5cbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgZDMucmVxdWVzdChjaHJvbW9zb21lc1VybCkuZ2V0KGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XG4gICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcihlcnJvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBwcm9taXNlXG4gICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIC8vIENoZWNrIGlmIGNocm9tb3NvbWUgZGF0YSBleGlzdHMgbG9jYWxseS5cbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyB1c2VkIGZvciBwcmUtcHJvY2Vzc2VkIGNlbnRyb21lcmUgZGF0YSxcbiAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgbm90IGFjY2Vzc2libGUgdmlhIEVVdGlscy4gIFNlZSBnZXRfY2hyb21vc29tZXMucHkuXG5cbiAgICAgICAgICAgICAgdmFyIGFzbUFuZENockFycmF5ID0gW10sXG4gICAgICAgICAgICAgICAgY2hyb21vc29tZXMgPSBbXSxcbiAgICAgICAgICAgICAgICBzZWVuQ2hycyA9IHt9LFxuICAgICAgICAgICAgICAgIGNocjtcblxuICAgICAgICAgICAgICBldmFsKGRhdGEucmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgIGFzbUFuZENockFycmF5LnB1c2goJycpO1xuXG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hyQmFuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaHIgPSBjaHJCYW5kc1tpXS5zcGxpdCgnICcpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChjaHIgaW4gc2VlbkNocnMpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjaHJvbW9zb21lcy5wdXNoKHtuYW1lOiBjaHIsIHR5cGU6ICdudWNsZWFyJ30pO1xuICAgICAgICAgICAgICAgICAgc2VlbkNocnNbY2hyXSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNocm9tb3NvbWVzID0gY2hyb21vc29tZXMuc29ydChpZGVvLnNvcnRDaHJvbW9zb21lcyk7XG4gICAgICAgICAgICAgIGFzbUFuZENockFycmF5LnB1c2goY2hyb21vc29tZXMpO1xuICAgICAgICAgICAgICBpZGVvLmNvb3JkaW5hdGVTeXN0ZW0gPSAnaXNjbic7XG4gICAgICAgICAgICAgIHJldHVybiBhc21BbmRDaHJBcnJheTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBpZGVvLmNvb3JkaW5hdGVTeXN0ZW0gPSAnYnAnO1xuICAgICAgICAgICAgICAgIGlkZW8uZ2V0QXNzZW1ibHlBbmRDaHJvbW9zb21lc0Zyb21FdXRpbHMocmVzb2x2ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbihhc21DaHJBcnJheSkge1xuICAgICAgICBhc3NlbWJseSA9IGFzbUNockFycmF5WzBdO1xuICAgICAgICBjaHJvbW9zb21lcyA9IGFzbUNockFycmF5WzFdO1xuXG4gICAgICAgIGlkZW8uY29uZmlnLmNocm9tb3NvbWVzID0gY2hyb21vc29tZXM7XG4gICAgICAgIGlkZW8ub3JnYW5pc21zW3RheGlkXS5hc3NlbWJsaWVzID0ge1xuICAgICAgICAgIGRlZmF1bHQ6IGFzc2VtYmx5XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FsbGJhY2sodGF4aWRzKTtcbiAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWRlby5jb25maWcudGF4aWRzID0gdGF4aWRzO1xuICAgICAgICBpZiAobXVsdGlvcmdhbmlzbSkge1xuICAgICAgICAgIGlkZW8uY29uZmlnLmNocm9tb3NvbWVzID0gdG1wQ2hycztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKHRheGlkcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtdWx0aW9yZ2FuaXNtKSB7XG4gICAgICAgIGlkZW8uY29vcmRpbmF0ZVN5c3RlbSA9ICdicCc7XG4gICAgICAgIGlmICh0YXhpZEluaXQpIHtcbiAgICAgICAgICB0YXhpZHMgPSBpZGVvLmNvbmZpZy50YXhpZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRheGlkSW5pdCkge1xuICAgICAgICAgIHRheGlkcyA9IFtpZGVvLmNvbmZpZy50YXhpZF07XG4gICAgICAgIH1cbiAgICAgICAgaWRlby5jb25maWcudGF4aWRzID0gdGF4aWRzO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayh0YXhpZHMpO1xuICAgIH1cbiAgfVxuXG4gIHNvcnRDaHJvbW9zb21lcyhhLCBiKSB7XG4gICAgdmFyIGFJc051Y2xlYXIgPSBhLnR5cGUgPT09ICdudWNsZWFyJyxcbiAgICAgIGJJc051Y2xlYXIgPSBiLnR5cGUgPT09ICdudWNsZWFyJyxcbiAgICAgIGFJc0NQID0gYS50eXBlID09PSAnY2hsb3JvcGxhc3QnLFxuICAgICAgYklzQ1AgPSBiLnR5cGUgPT09ICdjaGxvcm9wbGFzdCcsXG4gICAgICBhSXNNVCA9IGEudHlwZSA9PT0gJ21pdG9jaG9uZHJpb24nLFxuICAgICAgYklzTVQgPSBiLnR5cGUgPT09ICdtaXRvY2hvbmRyaW9uJztcbiAgICAvLyBhSXNQbGFzdGlkID0gYUlzTVQgJiYgYS5uYW1lICE9PSAnTVQnLCAvLyBlLmcuIEIxIGluIHJpY2UgZ2Vub21lIEdDRl8wMDE0MzM5MzUuMVxuICAgIC8vIGJJc1BsYXN0aWQgPSBiSXNNVCAmJiBiLm5hbWUgIT09ICdNVCc7XG5cbiAgICBpZiAoYUlzTnVjbGVhciAmJiBiSXNOdWNsZWFyKSB7XG4gICAgICByZXR1cm4gbmF0dXJhbFNvcnQoYS5uYW1lLCBiLm5hbWUpO1xuICAgIH0gZWxzZSBpZiAoIWFJc051Y2xlYXIgJiYgYklzTnVjbGVhcikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChhSXNNVCAmJiBiSXNDUCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChhSXNDUCAmJiBiSXNNVCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoIWFJc01UICYmICFhSXNDUCAmJiAoYklzTVQgfHwgYklzQ1ApKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbi8qXG4qICBSZXR1cm5zIG5hbWVzIGFuZCBsZW5ndGhzIG9mIGNocm9tb3NvbWVzIGZvciBhbiBvcmdhbmlzbSdzIGJlc3Qta25vd25cbiogIGdlbm9tZSBhc3NlbWJseS4gIEdldHMgZGF0YSBmcm9tIE5DQkkgRVV0aWxzIHdlYiBBUEkuXG4qL1xuICBnZXRBc3NlbWJseUFuZENocm9tb3NvbWVzRnJvbUV1dGlscyhjYWxsYmFjaykge1xuICAgIHZhciBhc21BbmRDaHJBcnJheSwgLy8gW2Fzc2VtYmx5X2FjY2Vzc2lvbiwgY2hyb21vc29tZV9vYmplY3RzX2FycmF5XVxuICAgICAgb3JnYW5pc20sIGFzc2VtYmx5QWNjZXNzaW9uLCBjaHJvbW9zb21lcywgYXNtU2VhcmNoLFxuICAgICAgYXNtVWlkLCBhc21TdW1tYXJ5LFxuICAgICAgcnNVaWQsIG51Y2NvcmVMaW5rLFxuICAgICAgbGlua3MsIG50U3VtbWFyeSxcbiAgICAgIHJlc3VsdHMsIHJlc3VsdCwgY25JbmRleCwgY2hyTmFtZSwgY2hyTGVuZ3RoLCBjaHJvbW9zb21lLCB0eXBlLFxuICAgICAgaWRlbyA9IHRoaXM7XG5cbiAgICBvcmdhbmlzbSA9IGlkZW8uY29uZmlnLm9yZ2FuaXNtO1xuXG4gICAgYXNtQW5kQ2hyQXJyYXkgPSBbXTtcbiAgICBjaHJvbW9zb21lcyA9IFtdO1xuXG4gICAgYXNtU2VhcmNoID1cbiAgICAgIGlkZW8uZXNlYXJjaCArXG4gICAgICAnJmRiPWFzc2VtYmx5JyArXG4gICAgICAnJnRlcm09JTIyJyArIG9yZ2FuaXNtICsgJyUyMltvcmdhbmlzbV0nICtcbiAgICAgICAgJ0FORCUyMCglMjJsYXRlc3QlMjByZWZzZXElMjJbZmlsdGVyXSklMjAnICtcbiAgICAgICAgJ0FORCUyMCglMjJjaHJvbW9zb21lJTIwbGV2ZWwlMjJbZmlsdGVyXSUyMCcgK1xuICAgICAgICAnT1IlMjAlMjJjb21wbGV0ZSUyMGdlbm9tZSUyMltmaWx0ZXJdKSc7XG5cbiAgICB2YXIgcHJvbWlzZSA9IGQzLnByb21pc2UuanNvbihhc21TZWFyY2gpO1xuXG4gICAgcHJvbWlzZVxuICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAvLyBOQ0JJIEFzc2VtYmx5IGRhdGFiYXNlJ3MgaW50ZXJuYWwgaWRlbnRpZmllciAodWlkKSBmb3IgdGhpcyBhc3NlbWJseVxuICAgICAgICBhc21VaWQgPSBkYXRhLmVzZWFyY2hyZXN1bHQuaWRsaXN0WzBdO1xuICAgICAgICBhc21TdW1tYXJ5ID0gaWRlby5lc3VtbWFyeSArICcmZGI9YXNzZW1ibHkmaWQ9JyArIGFzbVVpZDtcblxuICAgICAgICByZXR1cm4gZDMucHJvbWlzZS5qc29uKGFzbVN1bW1hcnkpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgLy8gUmVmU2VxIFVJRCBmb3IgdGhpcyBhc3NlbWJseVxuICAgICAgICByc1VpZCA9IGRhdGEucmVzdWx0W2FzbVVpZF0ucnN1aWQ7XG4gICAgICAgIGFzc2VtYmx5QWNjZXNzaW9uID0gZGF0YS5yZXN1bHRbYXNtVWlkXS5hc3NlbWJseWFjY2Vzc2lvbjtcblxuICAgICAgICBhc21BbmRDaHJBcnJheS5wdXNoKGFzc2VtYmx5QWNjZXNzaW9uKTtcblxuICAgICAgICAvLyBHZXQgYSBsaXN0IG9mIElEcyBmb3IgdGhlIGNocm9tb3NvbWVzIGluIHRoaXMgZ2Vub21lLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGluZm9ybWF0aW9uIGRvZXMgbm90IHNlZW0gdG8gYmUgYXZhaWxhYmxlIGZyb20gd2VsbC1rbm93blxuICAgICAgICAvLyBOQ0JJIGRhdGFiYXNlcyBsaWtlIEFzc2VtYmx5IG9yIE51Y2xlb3RpZGUsIHNvIHdlIHVzZSBHZW5Db2xsLFxuICAgICAgICAvLyBhIGxlc3Nlci1rbm93biBOQ0JJIGRhdGFiYXNlLlxuICAgICAgICB2YXIgcXMgPSAnJmRiPW51Y2NvcmUmbGlua25hbWU9Z2VuY29sbF9udWNjb3JlX2NociZmcm9tX3VpZD0nICsgcnNVaWQ7XG4gICAgICAgIG51Y2NvcmVMaW5rID0gaWRlby5lbGluayArIHFzO1xuXG4gICAgICAgIHJldHVybiBkMy5wcm9taXNlLmpzb24obnVjY29yZUxpbmspO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgbGlua3MgPSBkYXRhLmxpbmtzZXRzWzBdLmxpbmtzZXRkYnNbMF0ubGlua3Muam9pbignLCcpO1xuICAgICAgICBudFN1bW1hcnkgPSBpZGVvLmVzdW1tYXJ5ICsgJyZkYj1udWNsZW90aWRlJmlkPScgKyBsaW5rcztcblxuICAgICAgICByZXR1cm4gZDMucHJvbWlzZS5qc29uKG50U3VtbWFyeSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICByZXN1bHRzID0gZGF0YS5yZXN1bHQ7XG5cbiAgICAgICAgZm9yICh2YXIgeCBpbiByZXN1bHRzKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1t4XTtcblxuICAgICAgICAgIC8vIG9taXQgbGlzdCBvZiByZXVsdCB1aWRzXG4gICAgICAgICAgaWYgKHggPT09ICd1aWRzJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdC5nZW5vbWUgPT09ICdtaXRvY2hvbmRyaW9uJykge1xuICAgICAgICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dOb25OdWNsZWFyQ2hyb21vc29tZXMpIHtcbiAgICAgICAgICAgICAgdHlwZSA9IHJlc3VsdC5nZW5vbWU7XG4gICAgICAgICAgICAgIGNuSW5kZXggPSByZXN1bHQuc3VidHlwZS5zcGxpdCgnfCcpLmluZGV4T2YoJ3BsYXNtaWQnKTtcbiAgICAgICAgICAgICAgaWYgKGNuSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY2hyTmFtZSA9ICdNVCc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2VlbiBpbiBlLmcuIHJpY2UgZ2Vub21lIElSR1NQLTEuMCAoR0NGXzAwMTQzMzkzNS4xKSxcbiAgICAgICAgICAgICAgICAvLyBGcm9tIGh0dHBzOi8vZXV0aWxzLm5jYmkubmxtLm5paC5nb3YvZW50cmV6L2V1dGlscy9lc3VtbWFyeS5mY2dpP3JldG1vZGU9anNvbiZkYj1udWNsZW90aWRlJmlkPTk5NjcwMzQzMiw5OTY3MDM0MzEsOTk2NzAzNDMwLDk5NjcwMzQyOSw5OTY3MDM0MjgsOTk2NzAzNDI3LDk5NjcwMzQyNiw5OTY3MDM0MjUsOTk2NzAzNDI0LDk5NjcwMzQyMyw5OTY3MDM0MjIsOTk2NzAzNDIxLDE5NDAzMzIxMCwxMTQ2Njc2Myw3NTI0NzU1XG4gICAgICAgICAgICAgICAgLy8gZ2Vub21lOiAnbWl0b2Nob25kcmlvbicsXG4gICAgICAgICAgICAgICAgLy8gc3VidHlwZTogJ2NlbGxfbGluZXxwbGFzbWlkJyxcbiAgICAgICAgICAgICAgICAvLyBzdWJuYW1lOiAnQS01OCBDTVN8QjEnLFxuICAgICAgICAgICAgICAgIGNock5hbWUgPSByZXN1bHQuc3VibmFtZS5zcGxpdCgnfCcpW2NuSW5kZXhdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgcmVzdWx0Lmdlbm9tZSA9PT0gJ2NobG9yb3BsYXN0JyB8fFxuICAgICAgICAgICAgcmVzdWx0Lmdlbm9tZSA9PT0gJ3BsYXN0aWQnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0eXBlID0gJ2NobG9yb3BsYXN0JztcbiAgICAgICAgICAgIC8vIFBsYXN0aWQgZW5jb3VudGVyZWQgd2l0aCByaWNlIGdlbm9tZSBJUkdTUC0xLjAgKEdDRl8wMDE0MzM5MzUuMSlcbiAgICAgICAgICAgIGlmIChpZGVvLmNvbmZpZy5zaG93Tm9uTnVjbGVhckNocm9tb3NvbWVzKSB7XG4gICAgICAgICAgICAgIGNock5hbWUgPSAnQ1AnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPSAnbnVjbGVhcic7XG4gICAgICAgICAgICBjbkluZGV4ID0gcmVzdWx0LnN1YnR5cGUuc3BsaXQoJ3wnKS5pbmRleE9mKCdjaHJvbW9zb21lJyk7XG5cbiAgICAgICAgICAgIGNock5hbWUgPSByZXN1bHQuc3VibmFtZS5zcGxpdCgnfCcpW2NuSW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHR5cGVvZiBjaHJOYW1lICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICBjaHJOYW1lLnN1YnN0cigwLCAzKSA9PT0gJ2NocidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBDb252ZXJ0IFwiY2hyMTJcIiB0byBcIjEyXCIsIGUuZy4gZm9yIGJhbmFuYSAoR0NGXzAwMDMxMzg1NS4yKVxuICAgICAgICAgICAgICBjaHJOYW1lID0gY2hyTmFtZS5zdWJzdHIoMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hyTGVuZ3RoID0gcmVzdWx0LnNsZW47XG5cbiAgICAgICAgICBjaHJvbW9zb21lID0ge1xuICAgICAgICAgICAgbmFtZTogY2hyTmFtZSxcbiAgICAgICAgICAgIGxlbmd0aDogY2hyTGVuZ3RoLFxuICAgICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjaHJvbW9zb21lcy5wdXNoKGNocm9tb3NvbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hyb21vc29tZXMgPSBjaHJvbW9zb21lcy5zb3J0KGlkZW8uc29ydENocm9tb3NvbWVzKTtcbiAgICAgICAgYXNtQW5kQ2hyQXJyYXkucHVzaChjaHJvbW9zb21lcyk7XG5cbiAgICAgICAgaWRlby5jb29yZGluYXRlU3lzdGVtID0gJ2JwJztcblxuICAgICAgICByZXR1cm4gY2FsbGJhY2soYXNtQW5kQ2hyQXJyYXkpO1xuICAgICAgfSk7XG4gIH1cblxuICBkcmF3U2V4Q2hyb21vc29tZXMoYmFuZHNBcnJheSwgdGF4aWQsIGNvbnRhaW5lciwgZGVmcywgaiwgY2hycykge1xuICAgIHZhciBjaHJvbW9zb21lLCBiYW5kcywgY2hyTW9kZWwsIHNoYXBlLCBzY2ksIGssXG4gICAgICBzZXhDaHJvbW9zb21lSW5kZXhlcyxcbiAgICAgIGlkZW8gPSB0aGlzO1xuXG4gICAgaWYgKGlkZW8uY29uZmlnLnNleCA9PT0gJ21hbGUnKSB7XG4gICAgICBzZXhDaHJvbW9zb21lSW5kZXhlcyA9IFsxLCAwXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V4Q2hyb21vc29tZUluZGV4ZXMgPSBbMCwgMF07XG4gICAgfVxuXG4gICAgZm9yIChrID0gMDsgayA8IHNleENocm9tb3NvbWVJbmRleGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICBzY2kgPSBzZXhDaHJvbW9zb21lSW5kZXhlc1trXSArIGo7XG4gICAgICBjaHJvbW9zb21lID0gY2hyc1tzY2ldO1xuICAgICAgYmFuZHMgPSBiYW5kc0FycmF5W3NjaV07XG4gICAgICBjaHJNb2RlbCA9IGlkZW8uZ2V0Q2hyb21vc29tZU1vZGVsKGJhbmRzLCBjaHJvbW9zb21lLCB0YXhpZCwgc2NpKTtcbiAgICAgIHNoYXBlID0gaWRlby5kcmF3Q2hyb21vc29tZShjaHJNb2RlbCwgaiwgY29udGFpbmVyLCBrKTtcbiAgICAgIGRlZnMuYXBwZW5kKCdjbGlwUGF0aCcpXG4gICAgICAgIC5hdHRyKCdpZCcsIGNock1vZGVsLmlkICsgJy1jaHJvbW9zb21lLXNldC1jbGlwcGF0aCcpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgICAuZGF0YShzaGFwZSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkLnBhdGg7XG4gICAgICAgIH0pLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkLmNsYXNzO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAqIENvbmZpZ3VyZXMgY2hyb21vc29tZSBkYXRhIGFuZCBjYWxscyBkb3duc3RyZWFtIGNocm9tb3NvbWUgZHJhd2luZyBmdW5jdGlvbnNcbiAgKi9cbiAgaW5pdERyYXdDaHJvbW9zb21lcyhiYW5kc0FycmF5KSB7XG4gICAgdmFyIGlkZW8gPSB0aGlzLFxuICAgICAgdGF4aWRzID0gaWRlby5jb25maWcudGF4aWRzLFxuICAgICAgcGxvaWR5ID0gaWRlby5jb25maWcucGxvaWR5LFxuICAgICAgdGF4aWQsXG4gICAgICBjaHJJbmRleCA9IDAsXG4gICAgICBjaHJTZXROdW1iZXIgPSAwLFxuICAgICAgYmFuZHMsXG4gICAgICBpLCBqLCBjaHJzLCBjaHJvbW9zb21lLCBjaHJNb2RlbCxcbiAgICAgIGRlZnMsIHRyYW5zZm9ybTtcblxuICAgIGRlZnMgPSBkMy5zZWxlY3QoaWRlby5zZWxlY3RvciArICcgZGVmcycpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRheGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGF4aWQgPSB0YXhpZHNbaV07XG4gICAgICBjaHJzID0gaWRlby5jb25maWcuY2hyb21vc29tZXNbdGF4aWRdO1xuXG4gICAgICBpZGVvLmNocm9tb3NvbWVzW3RheGlkXSA9IHt9O1xuXG4gICAgICBpZGVvLnNldFNleENocm9tb3NvbWVzKGNocnMpO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgY2hycy5sZW5ndGg7IGorKykge1xuICAgICAgICBjaHJvbW9zb21lID0gY2hyc1tqXTtcbiAgICAgICAgYmFuZHMgPSBiYW5kc0FycmF5W2NockluZGV4XTtcbiAgICAgICAgY2hySW5kZXggKz0gMTtcblxuICAgICAgICBjaHJNb2RlbCA9IGlkZW8uZ2V0Q2hyb21vc29tZU1vZGVsKGJhbmRzLCBjaHJvbW9zb21lLCB0YXhpZCwgY2hySW5kZXgpO1xuXG4gICAgICAgIGlkZW8uY2hyb21vc29tZXNbdGF4aWRdW2Nocm9tb3NvbWVdID0gY2hyTW9kZWw7XG4gICAgICAgIGlkZW8uY2hyb21vc29tZXNBcnJheS5wdXNoKGNock1vZGVsKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgJ3NleCcgaW4gaWRlby5jb25maWcgJiZcbiAgICAgICAgICAoXG4gICAgICAgICAgICBwbG9pZHkgPT09IDIgJiYgaWRlby5zZXhDaHJvbW9zb21lcy5pbmRleCArIDIgPT09IGNockluZGV4IHx8XG4gICAgICAgICAgICBpZGVvLmNvbmZpZy5zZXggPT09ICdmZW1hbGUnICYmIGNock1vZGVsLm5hbWUgPT09ICdZJ1xuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2Zvcm0gPSBpZGVvLl9sYXlvdXQuZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZShjaHJTZXROdW1iZXIpO1xuICAgICAgICBjaHJTZXROdW1iZXIgKz0gMTtcblxuICAgICAgICAvLyBBcHBlbmQgY2hyb21vc29tZSBzZXQgY29udGFpbmVyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkMy5zZWxlY3QoaWRlby5zZWxlY3RvcilcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2hyb21vc29tZS1zZXQtY29udGFpbmVyJylcbiAgICAgICAgICAuYXR0cignZGF0YS1zZXQtbnVtYmVyJywgailcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKVxuICAgICAgICAgIC5hdHRyKCdpZCcsIGNock1vZGVsLmlkICsgJy1jaHJvbW9zb21lLXNldCcpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAnc2V4JyBpbiBpZGVvLmNvbmZpZyAmJlxuICAgICAgICAgIHBsb2lkeSA9PT0gMiAmJlxuICAgICAgICAgIGlkZW8uc2V4Q2hyb21vc29tZXMuaW5kZXggKyAxID09PSBjaHJJbmRleFxuICAgICAgICApIHtcbiAgICAgICAgICBpZGVvLmRyYXdTZXhDaHJvbW9zb21lcyhiYW5kc0FycmF5LCB0YXhpZCwgY29udGFpbmVyLCBkZWZzLCBqLCBjaHJzKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaGFwZTtcbiAgICAgICAgdmFyIG51bUNocnNJblNldCA9IDE7XG4gICAgICAgIGlmIChwbG9pZHkgPiAxKSB7XG4gICAgICAgICAgbnVtQ2hyc0luU2V0ID0gdGhpcy5fcGxvaWR5LmdldENocm9tb3NvbWVzTnVtYmVyKGopO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbnVtQ2hyc0luU2V0OyBrKyspIHtcbiAgICAgICAgICBzaGFwZSA9IGlkZW8uZHJhd0Nocm9tb3NvbWUoY2hyTW9kZWwsIGNockluZGV4IC0gMSwgY29udGFpbmVyLCBrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZnMuYXBwZW5kKCdjbGlwUGF0aCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgY2hyTW9kZWwuaWQgKyAnLWNocm9tb3NvbWUtc2V0LWNsaXBwYXRoJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgICAuZGF0YShzaGFwZSlcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQucGF0aDtcbiAgICAgICAgICB9KS5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLmNsYXNzO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWRlby5jb25maWcuc2hvd0JhbmRMYWJlbHMgPT09IHRydWUpIHtcbiAgICAgICAgaWRlby5kcmF3QmFuZExhYmVscyhpZGVvLmNocm9tb3NvbWVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBHZXQgaWRlb2dyYW0gU1ZHIGNvbnRhaW5lclxuICBnZXRTdmcoKSB7XG4gICAgcmV0dXJuIGQzLnNlbGVjdCh0aGlzLnNlbGVjdG9yKS5ub2RlKCk7XG4gIH1cblxuICAvKlxuICAqIFNldHMgaW5zdGFuY2UgcHJvcGVydGllcyByZWdhcmRpbmcgc2V4IGNocm9tb3NvbWVzLlxuICAqIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBmb3IgbWFtbWFscy5cbiAgKiBUT0RPOiBTdXBwb3J0IGFsbCBzZXh1YWxseSByZXByb2R1Y2luZyB0YXhhXG4gICogICBYWSBzZXgtZGV0ZXJtaW5hdGlvbiAobWFtbWFscyk6XG4gICogICAgIC0gTWFsZTogWFkgPC0gaGV0ZXJvZ2FtZXRpY1xuICAqICAgICAtIEZlbWFsZTogWFhcbiAgKiAgIFpXIHNleC1kZXRlcm1pbmF0aW9uIChiaXJkcyk6XG4gICogICAgIC0gTWFsZTogWlpcbiAgKiAgICAgLSBGZW1hbGU6IFpXIDwtIGhldGVyb2dhbWV0aWNcbiAgKiAgIFgwIHNleC1kZXRlcm1pbmF0aW9uIChzb21lIGluc2VjdHMpOlxuICAqICAgICAtIE1hbGU6IFgwLCBpLmUuIG9ubHkgWCA8LSBoZXRlcm9nYW1ldGljP1xuICAqICAgICAtIEZlbWFsZTogWFhcbiAgKiBUT0RPOiBTdXBwb3J0IHNleCBjaHJvbW9zb21lIGFuZXVwbG9pZGllcyBpbiBtYW1tYWxzXG4gICogICAgIC0gVHVybmVyIHN5bmRyb21lOiBYMFxuICAqICAgICAtIEtsaW5lZmVsdGVyIHN5bmRvbWU6IFhYWVxuICAqICBNb3JlIHR5cGVzOlxuICAqICBodHRwczoqZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhdGVnb3J5OlNleF9jaHJvbW9zb21lX2FuZXVwbG9pZGllc1xuICAqL1xuICBzZXRTZXhDaHJvbW9zb21lcyhjaHJzKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLnBsb2lkeSAhPT0gMiB8fCAhdGhpcy5jb25maWcuc2V4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlkZW8gPSB0aGlzLFxuICAgICAgc2V4Q2hycyA9IHtYOiAxLCBZOiAxfSxcbiAgICAgIGNociwgaTtcblxuICAgIGlkZW8uc2V4Q2hyb21vc29tZXMubGlzdCA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNocnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNociA9IGNocnNbaV07XG5cbiAgICAgIGlmIChpZGVvLmNvbmZpZy5zZXggPT09ICdtYWxlJyAmJiBjaHIgaW4gc2V4Q2hycykge1xuICAgICAgICBpZGVvLnNleENocm9tb3NvbWVzLmxpc3QucHVzaChjaHIpO1xuICAgICAgICBpZiAoIWlkZW8uc2V4Q2hyb21vc29tZXMuaW5kZXgpIHtcbiAgICAgICAgICBpZGVvLnNleENocm9tb3NvbWVzLmluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaHIgPT09ICdYJykge1xuICAgICAgICBpZGVvLnNleENocm9tb3NvbWVzLmxpc3QucHVzaChjaHIsIGNocik7XG4gICAgICAgIGlkZW8uc2V4Q2hyb21vc29tZXMuaW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qXG4gICogQ29tcGxldGVzIGRlZmF1bHQgaWRlb2dyYW0gaW5pdGlhbGl6YXRpb25cbiAgKiBieSBjYWxsaW5nIGRvd25zdHJlYW0gZnVuY3Rpb25zIHRvXG4gICogcHJvY2VzcyByYXcgYmFuZCBkYXRhIGludG8gZnVsbCBKU09OIG9iamVjdHMsXG4gICogcmVuZGVyIGNocm9tb3NvbWUgYW5kIGN5dG9iYW5kIGZpZ3VyZXMgYW5kIGxhYmVscyxcbiAgKiBhcHBseSBpbml0aWFsIGdyYXBoaWNhbCB0cmFuc2Zvcm1hdGlvbnMsXG4gICogaGlkZSBvdmVybGFwcGluZyBiYW5kIGxhYmVscywgYW5kXG4gICogZXhlY3V0ZSBjYWxsYmFja3MgZGVmaW5lZCBieSBjbGllbnQgY29kZVxuICAqL1xuICBwcm9jZXNzQmFuZERhdGEoKSB7XG4gICAgdmFyIGJhbmRzQXJyYXksIG1heExlbmd0aCwgaiwgaywgY2hyb21vc29tZSwgYmFuZHMsXG4gICAgICBjaHJMZW5ndGgsIGNocixcbiAgICAgIGJhbmREYXRhLCBiYW5kc0J5Q2hyLFxuICAgICAgdGF4aWQsIHRheGlkcywgY2hycywgY2hyc0J5VGF4aWQsXG4gICAgICBpZGVvID0gdGhpcztcblxuICAgIGJhbmRzQXJyYXkgPSBbXTtcbiAgICBtYXhMZW5ndGggPSAwO1xuXG4gICAgaWYgKGlkZW8uY29uZmlnLm11bHRpb3JnYW5pc20gPT09IHRydWUpIHtcbiAgICAgIGlkZW8uY29vcmRpbmF0ZVN5c3RlbSA9ICdicCc7XG4gICAgICB0YXhpZHMgPSBpZGVvLmNvbmZpZy50YXhpZHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGF4aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRheGlkID0gdGF4aWRzW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGlkZW8uY29uZmlnLnRheGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZGVvLmNvbmZpZy50YXhpZCA9IGlkZW8uY29uZmlnLnRheGlkc1swXTtcbiAgICAgIH1cbiAgICAgIHRheGlkID0gaWRlby5jb25maWcudGF4aWQ7XG4gICAgICB0YXhpZHMgPSBbdGF4aWRdO1xuICAgICAgaWRlby5jb25maWcudGF4aWRzID0gdGF4aWRzO1xuICAgIH1cblxuICAgIGlmICgnY2hyb21vc29tZXMnIGluIGlkZW8uY29uZmlnKSB7XG4gICAgICBjaHJzID0gaWRlby5jb25maWcuY2hyb21vc29tZXM7XG4gICAgfVxuICAgIGlmIChpZGVvLmNvbmZpZy5tdWx0aW9yZ2FuaXNtKSB7XG4gICAgICBjaHJzQnlUYXhpZCA9IGNocnM7XG4gICAgfVxuXG4gICAgaWRlby5jb25maWcuY2hyb21vc29tZXMgPSB7fTtcblxuICAgIHZhciB0MEIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGZvciAoaiA9IDA7IGogPCB0YXhpZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHRheGlkID0gdGF4aWRzW2pdO1xuXG4gICAgICBpZiAoaWRlby5jb25maWcubXVsdGlvcmdhbmlzbSkge1xuICAgICAgICBjaHJzID0gY2hyc0J5VGF4aWRbdGF4aWRdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWRlby5jb29yZGluYXRlU3lzdGVtID09PSAnaXNjbicgfHwgaWRlby5jb25maWcubXVsdGlvcmdhbmlzbSkge1xuICAgICAgICBiYW5kRGF0YSA9IGlkZW8uYmFuZERhdGFbdGF4aWRdO1xuXG4gICAgICAgIGJhbmRzQnlDaHIgPSBpZGVvLmdldEJhbmRzKGJhbmREYXRhLCB0YXhpZCwgY2hycyk7XG5cbiAgICAgICAgY2hycyA9IE9iamVjdC5rZXlzKGJhbmRzQnlDaHIpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBuYXR1cmFsU29ydChhLCBiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWRlby5jb25maWcuY2hyb21vc29tZXNbdGF4aWRdID0gY2hycy5zbGljZSgpO1xuICAgICAgICBpZGVvLm51bUNocm9tb3NvbWVzICs9IGlkZW8uY29uZmlnLmNocm9tb3NvbWVzW3RheGlkXS5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChrID0gMDsgayA8IGNocnMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBjaHJvbW9zb21lID0gY2hyc1trXTtcbiAgICAgICAgICBiYW5kcyA9IGJhbmRzQnlDaHJbY2hyb21vc29tZV07XG4gICAgICAgICAgYmFuZHNBcnJheS5wdXNoKGJhbmRzKTtcblxuICAgICAgICAgIGNockxlbmd0aCA9IHtcbiAgICAgICAgICAgIGlzY246IGJhbmRzW2JhbmRzLmxlbmd0aCAtIDFdLmlzY24uc3RvcCxcbiAgICAgICAgICAgIGJwOiBiYW5kc1tiYW5kcy5sZW5ndGggLSAxXS5icC5zdG9wXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChjaHJMZW5ndGguaXNjbiA+IGlkZW8ubWF4TGVuZ3RoLmlzY24pIHtcbiAgICAgICAgICAgIGlkZW8ubWF4TGVuZ3RoLmlzY24gPSBjaHJMZW5ndGguaXNjbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2hyTGVuZ3RoLmJwID4gaWRlby5tYXhMZW5ndGguYnApIHtcbiAgICAgICAgICAgIGlkZW8ubWF4TGVuZ3RoLmJwID0gY2hyTGVuZ3RoLmJwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZGVvLmNvb3JkaW5hdGVTeXN0ZW0gPT09ICdicCcpIHtcbiAgICAgICAgLy8gSWYgbGFja2luZyBiYW5kLWxldmVsIGRhdGFcblxuICAgICAgICBpZGVvLmNvbmZpZy5jaHJvbW9zb21lc1t0YXhpZF0gPSBjaHJzLnNsaWNlKCk7XG4gICAgICAgIGlkZW8ubnVtQ2hyb21vc29tZXMgKz0gaWRlby5jb25maWcuY2hyb21vc29tZXNbdGF4aWRdLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY2hycy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgIGNociA9IGNocnNba107XG4gICAgICAgICAgaWYgKGNoci5sZW5ndGggPiBpZGVvLm1heExlbmd0aC5icCkge1xuICAgICAgICAgICAgaWRlby5tYXhMZW5ndGguYnAgPSBjaHIubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0MUIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoaWRlby5kZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coJ1RpbWUgaW4gcHJvY2Vzc0JhbmREYXRhOiAnICsgKHQxQiAtIHQwQikgKyAnIG1zJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhbmRzQXJyYXk7XG4gIH1cblxuICAvKipcbiAgKiBJbml0aWFsaXplcyBhbiBpZGVvZ3JhbS5cbiAgKiBTZXRzIHNvbWUgaGlnaC1sZXZlbCBwcm9wZXJ0aWVzIGJhc2VkIG9uIGluc3RhbmNlIGNvbmZpZ3VyYXRpb24sXG4gICogZmV0Y2hlcyBiYW5kIGFuZCBhbm5vdGF0aW9uIGRhdGEgaWYgbmVlZGVkLCBhbmRcbiAgKiB3cml0ZXMgYW4gU1ZHIGVsZW1lbnQgdG8gdGhlIGRvY3VtZW50IHRvIGNvbnRhaW4gdGhlIGlkZW9ncmFtXG4gICovXG4gIGluaXQoKSB7XG4gICAgdmFyIHRheGlkLCBpLCBzdmdDbGFzcztcblxuICAgIHZhciBpZGVvID0gdGhpcztcblxuICAgIHZhciB0MCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgdmFyIGJhbmRzQXJyYXkgPSBbXSxcbiAgICAgIG51bUJhbmREYXRhUmVzcG9uc2VzID0gMCxcbiAgICAgIHJlc29sdXRpb24gPSB0aGlzLmNvbmZpZy5yZXNvbHV0aW9uLFxuICAgICAgYWNjZXNzaW9uO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICBpZGVvLmdldFRheGlkcyhyZXNvbHZlKTtcbiAgICB9KTtcblxuICAgIHByb21pc2UudGhlbihmdW5jdGlvbih0YXhpZHMpIHtcbiAgICAgIHRheGlkID0gdGF4aWRzWzBdO1xuICAgICAgaWRlby5jb25maWcudGF4aWQgPSB0YXhpZDtcbiAgICAgIGlkZW8uY29uZmlnLnRheGlkcyA9IHRheGlkcztcblxuICAgICAgdmFyIGFzc2VtYmxpZXMsXG4gICAgICAgIGJhbmRGaWxlTmFtZTtcblxuICAgICAgdmFyIGJhbmREYXRhRmlsZU5hbWVzID0ge1xuICAgICAgICA5NjA2OiAnJyxcbiAgICAgICAgMTAwOTA6ICcnXG4gICAgICB9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGF4aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRheGlkID0gU3RyaW5nKHRheGlkc1tpXSk7XG5cbiAgICAgICAgaWYgKCFpZGVvLmNvbmZpZy5hc3NlbWJseSkge1xuICAgICAgICAgIGlkZW8uY29uZmlnLmFzc2VtYmx5ID0gJ2RlZmF1bHQnO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VtYmxpZXMgPSBpZGVvLm9yZ2FuaXNtc1t0YXhpZF0uYXNzZW1ibGllcztcbiAgICAgICAgYWNjZXNzaW9uID0gYXNzZW1ibGllc1tpZGVvLmNvbmZpZy5hc3NlbWJseV07XG5cbiAgICAgICAgYmFuZEZpbGVOYW1lID0gW107XG4gICAgICAgIGJhbmRGaWxlTmFtZS5wdXNoKHNsdWdpZnkoaWRlby5vcmdhbmlzbXNbdGF4aWRdLnNjaWVudGlmaWNOYW1lKSk7XG4gICAgICAgIGlmIChhY2Nlc3Npb24gIT09IGFzc2VtYmxpZXMuZGVmYXVsdCkge1xuICAgICAgICAgIGJhbmRGaWxlTmFtZS5wdXNoKGFjY2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRheGlkID09PSAnOTYwNicgJiZcbiAgICAgICAgICAoYWNjZXNzaW9uICE9PSBhc3NlbWJsaWVzLmRlZmF1bHQgfHwgcmVzb2x1dGlvbiAhPT0gODUwKVxuICAgICAgICApIHtcbiAgICAgICAgICBiYW5kRmlsZU5hbWUucHVzaChyZXNvbHV0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBiYW5kRmlsZU5hbWUgPSBiYW5kRmlsZU5hbWUuam9pbignLScpICsgJy5qcyc7XG5cbiAgICAgICAgaWYgKHRheGlkID09PSAnOTYwNicgfHwgdGF4aWQgPT09ICcxMDA5MCcpIHtcbiAgICAgICAgICBiYW5kRGF0YUZpbGVOYW1lc1t0YXhpZF0gPSBiYW5kRmlsZU5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNockJhbmRzID09PSAndW5kZWZpbmVkJyAmJiB0YXhpZCBpbiBiYW5kRGF0YUZpbGVOYW1lcykge1xuICAgICAgICAgIGQzLnJlcXVlc3QoaWRlby5jb25maWcuZGF0YURpciArIGJhbmREYXRhRmlsZU5hbWVzW3RheGlkXSlcbiAgICAgICAgICAgIC5vbignYmVmb3Jlc2VuZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgLy8gRW5zdXJlcyBjb3JyZWN0IHRheGlkIGlzIHByb2Nlc3NlZCBpbiByZXNwb25zZSBjYWxsYmFjazsgdXNpbmdcbiAgICAgICAgICAgICAgLy8gc2ltcGx5ICd0YXhpZCcgdmFyaWFibGUgZ2l2ZXMgdGhlIGxhc3QgKnJlcXVlc3RlZCogdGF4aWQsIHdoaWNoXG4gICAgICAgICAgICAgIC8vIGZhaWxzIHdoZW4gZGVhbGluZyB3aXRoIG11bHRpcGxlIHRheGEuXG4gICAgICAgICAgICAgIGRhdGEudGF4aWQgPSB0YXhpZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZ2V0KGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XG4gICAgICAgICAgICAgIGV2YWwoZGF0YS5yZXNwb25zZSk7XG5cbiAgICAgICAgICAgICAgaWRlby5iYW5kRGF0YVtkYXRhLnRheGlkXSA9IGNockJhbmRzO1xuICAgICAgICAgICAgICBudW1CYW5kRGF0YVJlc3BvbnNlcyArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChudW1CYW5kRGF0YVJlc3BvbnNlcyA9PT0gdGF4aWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGJhbmRzQXJyYXkgPSBpZGVvLnByb2Nlc3NCYW5kRGF0YSgpO1xuICAgICAgICAgICAgICAgIHdyaXRlQ29udGFpbmVyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgY2hyQmFuZHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gSWYgYmFuZHMgYWxyZWFkeSBhdmFpbGFibGUsXG4gICAgICAgICAgLy8gZS5nLiB2aWEgPHNjcmlwdD4gdGFnIGluIGluaXRpYWwgcGFnZSBsb2FkXG4gICAgICAgICAgICBpZGVvLmJhbmREYXRhW3RheGlkXSA9IGNockJhbmRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiYW5kc0FycmF5ID0gaWRlby5wcm9jZXNzQmFuZERhdGEoKTtcbiAgICAgICAgICB3cml0ZUNvbnRhaW5lcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB3cml0ZUNvbnRhaW5lcigpIHtcbiAgICAgIGlmIChpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc1BhdGgpIHtcbiAgICAgICAgZDMuanNvbihcbiAgICAgICAgaWRlby5jb25maWcuYW5ub3RhdGlvbnNQYXRoLCAvLyBVUkxcbiAgICAgICAgZnVuY3Rpb24oZGF0YSkgeyAvLyBDYWxsYmFja1xuICAgICAgICAgIGlkZW8ucmF3QW5ub3RzID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgcGxvaWR5IGRlc2NyaXB0aW9uIGlzIGEgc3RyaW5nLCB0aGVuIGNvbnZlcnQgaXQgdG8gdGhlIGNhbm9uaWNhbFxuICAgICAgLy8gYXJyYXkgZm9ybWF0LiAgU3RyaW5nIHBsb2lkeURlc2MgaXMgdXNlZCB3aGVuIGRlcGljdGluZyBlLmcuIHBhcmVudGFsXG4gICAgICAvLyBvcmlnaW4gZWFjaCBtZW1iZXIgb2YgY2hyb21vc29tZSBwYWlyIGluIGEgaHVtYW4gZ2Vub21lLlxuICAgICAgLy8gU2VlIHBsb2lkeV9iYXNpYy5odG1sIGZvciB1c2FnZSBleGFtcGxlLlxuICAgICAgaWYgKFxuICAgICAgICAncGxvaWR5RGVzYycgaW4gaWRlby5jb25maWcgJiZcbiAgICAgICAgdHlwZW9mIGlkZW8uY29uZmlnLnBsb2lkeURlc2MgPT09ICdzdHJpbmcnXG4gICAgICApIHtcbiAgICAgICAgdmFyIHRtcCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkZW8ubnVtQ2hyb21vc29tZXM7IGkrKykge1xuICAgICAgICAgIHRtcC5wdXNoKGlkZW8uY29uZmlnLnBsb2lkeURlc2MpO1xuICAgICAgICB9XG4gICAgICAgIGlkZW8uY29uZmlnLnBsb2lkeURlc2MgPSB0bXA7XG4gICAgICB9XG4gICAgICAvLyBPcmdhbmlzbSBwbG9pZHkgZGVzY3JpcHRpb25cbiAgICAgIGlkZW8uX3Bsb2lkeSA9IG5ldyBQbG9pZHkoaWRlby5jb25maWcpO1xuXG4gICAgICAvLyBDaHJvbW9zb21lJ3MgbGF5b3V0XG4gICAgICBpZGVvLl9sYXlvdXQgPSBMYXlvdXQuZ2V0SW5zdGFuY2UoaWRlby5jb25maWcsIGlkZW8pO1xuXG4gICAgICBzdmdDbGFzcyA9ICcnO1xuICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dDaHJvbW9zb21lTGFiZWxzKSB7XG4gICAgICAgIGlmIChpZGVvLmNvbmZpZy5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc3ZnQ2xhc3MgKz0gJ2xhYmVsZWRMZWZ0ICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ZnQ2xhc3MgKz0gJ2xhYmVsZWQgJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICBpZGVvLmNvbmZpZy5hbm5vdGF0aW9uc0xheW91dCAmJlxuICAgICAgaWRlby5jb25maWcuYW5ub3RhdGlvbnNMYXlvdXQgPT09ICdvdmVybGF5J1xuICAgICkge1xuICAgICAgICBzdmdDbGFzcyArPSAnZmFpbnQnO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ3JhZGllbnRzID0gaWRlby5nZXRCYW5kQ29sb3JHcmFkaWVudHMoKTtcbiAgICAgIHZhciBzdmdXaWR0aCA9IGlkZW8uX2xheW91dC5nZXRXaWR0aCh0YXhpZCk7XG4gICAgICB2YXIgc3ZnSGVpZ2h0ID0gaWRlby5fbGF5b3V0LmdldEhlaWdodCh0YXhpZCk7XG5cbiAgICAgIGQzLnNlbGVjdChpZGVvLmNvbmZpZy5jb250YWluZXIpXG4gICAgICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgICAgICAgLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICdfaWRlb2dyYW0nKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgc3ZnQ2xhc3MpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBzdmdXaWR0aClcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBzdmdIZWlnaHQpXG4gICAgICAgICAgICAuaHRtbChncmFkaWVudHMpO1xuXG4gICAgICBmaW5pc2hJbml0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluaXNoSW5pdCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciB0MEEgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgICB2YXIgaTtcblxuICAgICAgICBpZGVvLmluaXREcmF3Q2hyb21vc29tZXMoYmFuZHNBcnJheSk7XG5cbiAgICAgICAgLy8gV2FpdHMgZm9yIHBvdGVudGlhbGx5IGxhcmdlIGFubm90YXRpb24gZGF0YXNldFxuICAgICAgICAvLyB0byBiZSByZWNlaXZlZCBieSB0aGUgY2xpZW50LCB0aGVuIHRyaWdnZXJzIGFubm90YXRpb24gcHJvY2Vzc2luZ1xuICAgICAgICBpZiAoaWRlby5jb25maWcuYW5ub3RhdGlvbnNQYXRoKSB7XG4gICAgICAgICAgZnVuY3Rpb24gcGEoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlkZW8udGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChpZGVvLnRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZGVvLmFubm90cyA9IGlkZW8ucHJvY2Vzc0Fubm90RGF0YShpZGVvLnJhd0Fubm90cyk7XG4gICAgICAgICAgICBpZGVvLmRyYXdQcm9jZXNzZWRBbm5vdHMoaWRlby5hbm5vdHMpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNyb3NzZmlsdGVyICE9PSAndW5kZWZpbmVkJyAmJiBpZGVvLmluaXRDcm9zc0ZpbHRlcikge1xuICAgICAgICAgICAgICBpZGVvLmluaXRDcm9zc0ZpbHRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpZGVvLnJhd0Fubm90cykge1xuICAgICAgICAgICAgcGEoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKGZ1bmN0aW9uIGNoZWNrQW5ub3REYXRhKCkge1xuICAgICAgICAgICAgICBpZGVvLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICghaWRlby5yYXdBbm5vdHMpIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrQW5ub3REYXRhKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgNTBcbiAgICAgICAgICApO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaWRlby5jb25maWcuc2hvd0JhbmRMYWJlbHMgPT09IHRydWUpIHtcbiAgICAgICAgICB2YXIgYmFuZHNUb1Nob3cgPSBpZGVvLmJhbmRzVG9TaG93LmpvaW4oJywnKTtcblxuICAgICAgICAgIC8vIGQzLnNlbGVjdEFsbCByZXNvbHZlcyB0byBxdWVyeVNlbGVjdG9yQWxsIChRU0EpLlxuICAgICAgICAgIC8vIFFTQSB0YWtlcyBhIHN1cnByaXNpbmdseSBsb25nIHRpbWUgdG8gY29tcGxldGUsXG4gICAgICAgICAgLy8gYW5kIHNjYWxlcyB3aXRoIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzLlxuICAgICAgICAgIC8vIE1vc3QgYmFuZHMgYXJlIGhpZGRlbiwgc28gd2UgY2FuIG9wdGltaXplIGJ5XG4gICAgICAgICAgLy8gSGlkaW5nIGFsbCBiYW5kcywgdGhlbiBRU0EnaW5nIGFuZCBkaXNwbGF5aW5nIHRoZVxuICAgICAgICAgIC8vIHJlbGF0aXZlbHkgZmV3IGJhbmRzIHRoYXQgYXJlIHNob3duLlxuICAgICAgICAgIHZhciB0MEMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmJhbmRMYWJlbCwgLmJhbmRMYWJlbFN0YWxrJylcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgIGQzLnNlbGVjdEFsbChiYW5kc1RvU2hvdykuc3R5bGUoJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgdmFyIHQxQyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgIGlmIChpZGVvLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVGltZSBpbiBzaG93aW5nIGJhbmRzOiAnICsgKHQxQyAtIHQwQykgKyAnIG1zJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlkZW8uY29uZmlnLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICB2YXIgY2hySUQ7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWRlby5jaHJvbW9zb21lc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNocklEID0gJyMnICsgaWRlby5jaHJvbW9zb21lc0FycmF5W2ldLmlkO1xuICAgICAgICAgICAgICBpZGVvLnJvdGF0ZUNocm9tb3NvbWVMYWJlbHMoZDMuc2VsZWN0KGNocklEKSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlkZW8uY29uZmlnLnNob3dDaHJvbW9zb21lTGFiZWxzID09PSB0cnVlKSB7XG4gICAgICAgICAgaWRlby5kcmF3Q2hyb21vc29tZUxhYmVscyhpZGVvLmNocm9tb3NvbWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZGVvLmNvbmZpZy5icnVzaCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlkZW8uY3JlYXRlQnJ1c2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZGVvLmNvbmZpZy5hbm5vdGF0aW9ucykge1xuICAgICAgICAgIGlkZW8uZHJhd0Fubm90cyhpZGVvLmNvbmZpZy5hbm5vdGF0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdDFBID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGlmIChpZGVvLmRlYnVnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1RpbWUgaW4gZHJhd0Nocm9tb3NvbWU6ICcgKyAodDFBIC0gdDBBKSArICcgbXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0MSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoaWRlby5kZWJ1Zykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdUaW1lIGNvbnN0cnVjdGluZyBpZGVvZ3JhbTogJyArICh0MSAtIHQwKSArICcgbXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZGVvLm9uTG9hZENhbGxiYWNrKSB7XG4gICAgICAgICAgaWRlby5vbkxvYWRDYWxsYmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEoJ3JvdGF0YWJsZScgaW4gaWRlby5jb25maWcgJiYgaWRlby5jb25maWcucm90YXRhYmxlID09PSBmYWxzZSkpIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlkZW8ucm90YXRlQW5kVG9nZ2xlRGlzcGxheSh0aGlzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNocm9tb3NvbWUnKVxuICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAnZGVmYXVsdCcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iLCJcbmltcG9ydCB7SWRlb2dyYW19IGZyb20gJy4vY29yZSdcbi8vIGltcG9ydCBmcm9tICcuL2ZpbHRlcidcblxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlXG4vLyAoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR8fFwib2JqZWN0XCI9PXR5cGVvZiB0JiZudWxsIT09dH1mdW5jdGlvbiBlKHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR9ZnVuY3Rpb24gbih0KXtHPXR9ZnVuY3Rpb24gcih0KXtRPXR9ZnVuY3Rpb24gbygpe3JldHVybiBmdW5jdGlvbigpe3Byb2Nlc3MubmV4dFRpY2soYSl9fWZ1bmN0aW9uIGkoKXtyZXR1cm4gZnVuY3Rpb24oKXtCKGEpfX1mdW5jdGlvbiBzKCl7dmFyIHQ9MCxlPW5ldyBYKGEpLG49ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7cmV0dXJuIGUub2JzZXJ2ZShuLHtjaGFyYWN0ZXJEYXRhOiEwfSksZnVuY3Rpb24oKXtuLmRhdGE9dD0rK3QlMn19ZnVuY3Rpb24gdSgpe3ZhciB0PW5ldyBNZXNzYWdlQ2hhbm5lbDtyZXR1cm4gdC5wb3J0MS5vbm1lc3NhZ2U9YSxmdW5jdGlvbigpe3QucG9ydDIucG9zdE1lc3NhZ2UoMCl9fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGEsMSl9fWZ1bmN0aW9uIGEoKXtmb3IodmFyIHQ9MDtKPnQ7dCs9Mil7dmFyIGU9dHRbdF0sbj10dFt0KzFdO2UobiksdHRbdF09dm9pZCAwLHR0W3QrMV09dm9pZCAwfUo9MH1mdW5jdGlvbiBmKCl7dHJ5e3ZhciB0PXJlcXVpcmUsZT10KFwidmVydHhcIik7cmV0dXJuIEI9ZS5ydW5Pbkxvb3B8fGUucnVuT25Db250ZXh0LGkoKX1jYXRjaChuKXtyZXR1cm4gYygpfX1mdW5jdGlvbiBsKHQsZSl7dmFyIG49dGhpcyxyPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHApO3ZvaWQgMD09PXJbcnRdJiZrKHIpO3ZhciBvPW4uX3N0YXRlO2lmKG8pe3ZhciBpPWFyZ3VtZW50c1tvLTFdO1EoZnVuY3Rpb24oKXt4KG8scixpLG4uX3Jlc3VsdCl9KX1lbHNlIEUobixyLHQsZSk7cmV0dXJuIHJ9ZnVuY3Rpb24gaCh0KXt2YXIgZT10aGlzO2lmKHQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0LmNvbnN0cnVjdG9yPT09ZSlyZXR1cm4gdDt2YXIgbj1uZXcgZShwKTtyZXR1cm4gZyhuLHQpLG59ZnVuY3Rpb24gcCgpe31mdW5jdGlvbiBfKCl7cmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpfWZ1bmN0aW9uIGQoKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihcIkEgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS5cIil9ZnVuY3Rpb24gdih0KXt0cnl7cmV0dXJuIHQudGhlbn1jYXRjaChlKXtyZXR1cm4gdXQuZXJyb3I9ZSx1dH19ZnVuY3Rpb24geSh0LGUsbixyKXt0cnl7dC5jYWxsKGUsbixyKX1jYXRjaChvKXtyZXR1cm4gb319ZnVuY3Rpb24gbSh0LGUsbil7UShmdW5jdGlvbih0KXt2YXIgcj0hMSxvPXkobixlLGZ1bmN0aW9uKG4pe3J8fChyPSEwLGUhPT1uP2codCxuKTpTKHQsbikpfSxmdW5jdGlvbihlKXtyfHwocj0hMCxqKHQsZSkpfSxcIlNldHRsZTogXCIrKHQuX2xhYmVsfHxcIiB1bmtub3duIHByb21pc2VcIikpOyFyJiZvJiYocj0hMCxqKHQsbykpfSx0KX1mdW5jdGlvbiBiKHQsZSl7ZS5fc3RhdGU9PT1pdD9TKHQsZS5fcmVzdWx0KTplLl9zdGF0ZT09PXN0P2oodCxlLl9yZXN1bHQpOkUoZSx2b2lkIDAsZnVuY3Rpb24oZSl7Zyh0LGUpfSxmdW5jdGlvbihlKXtqKHQsZSl9KX1mdW5jdGlvbiB3KHQsbixyKXtuLmNvbnN0cnVjdG9yPT09dC5jb25zdHJ1Y3RvciYmcj09PWV0JiZjb25zdHJ1Y3Rvci5yZXNvbHZlPT09bnQ/Yih0LG4pOnI9PT11dD9qKHQsdXQuZXJyb3IpOnZvaWQgMD09PXI/Uyh0LG4pOmUocik/bSh0LG4scik6Uyh0LG4pfWZ1bmN0aW9uIGcoZSxuKXtlPT09bj9qKGUsXygpKTp0KG4pP3coZSxuLHYobikpOlMoZSxuKX1mdW5jdGlvbiBBKHQpe3QuX29uZXJyb3ImJnQuX29uZXJyb3IodC5fcmVzdWx0KSxUKHQpfWZ1bmN0aW9uIFModCxlKXt0Ll9zdGF0ZT09PW90JiYodC5fcmVzdWx0PWUsdC5fc3RhdGU9aXQsMCE9PXQuX3N1YnNjcmliZXJzLmxlbmd0aCYmUShULHQpKX1mdW5jdGlvbiBqKHQsZSl7dC5fc3RhdGU9PT1vdCYmKHQuX3N0YXRlPXN0LHQuX3Jlc3VsdD1lLFEoQSx0KSl9ZnVuY3Rpb24gRSh0LGUsbixyKXt2YXIgbz10Ll9zdWJzY3JpYmVycyxpPW8ubGVuZ3RoO3QuX29uZXJyb3I9bnVsbCxvW2ldPWUsb1tpK2l0XT1uLG9baStzdF09ciwwPT09aSYmdC5fc3RhdGUmJlEoVCx0KX1mdW5jdGlvbiBUKHQpe3ZhciBlPXQuX3N1YnNjcmliZXJzLG49dC5fc3RhdGU7aWYoMCE9PWUubGVuZ3RoKXtmb3IodmFyIHIsbyxpPXQuX3Jlc3VsdCxzPTA7czxlLmxlbmd0aDtzKz0zKXI9ZVtzXSxvPWVbcytuXSxyP3gobixyLG8saSk6byhpKTt0Ll9zdWJzY3JpYmVycy5sZW5ndGg9MH19ZnVuY3Rpb24gTSgpe3RoaXMuZXJyb3I9bnVsbH1mdW5jdGlvbiBQKHQsZSl7dHJ5e3JldHVybiB0KGUpfWNhdGNoKG4pe3JldHVybiBjdC5lcnJvcj1uLGN0fX1mdW5jdGlvbiB4KHQsbixyLG8pe3ZhciBpLHMsdSxjLGE9ZShyKTtpZihhKXtpZihpPVAocixvKSxpPT09Y3Q/KGM9ITAscz1pLmVycm9yLGk9bnVsbCk6dT0hMCxuPT09aSlyZXR1cm4gdm9pZCBqKG4sZCgpKX1lbHNlIGk9byx1PSEwO24uX3N0YXRlIT09b3R8fChhJiZ1P2cobixpKTpjP2oobixzKTp0PT09aXQ/UyhuLGkpOnQ9PT1zdCYmaihuLGkpKX1mdW5jdGlvbiBDKHQsZSl7dHJ5e2UoZnVuY3Rpb24oZSl7Zyh0LGUpfSxmdW5jdGlvbihlKXtqKHQsZSl9KX1jYXRjaChuKXtqKHQsbil9fWZ1bmN0aW9uIE8oKXtyZXR1cm4gYXQrK31mdW5jdGlvbiBrKHQpe3RbcnRdPWF0KyssdC5fc3RhdGU9dm9pZCAwLHQuX3Jlc3VsdD12b2lkIDAsdC5fc3Vic2NyaWJlcnM9W119ZnVuY3Rpb24gWSh0KXtyZXR1cm4gbmV3IF90KHRoaXMsdCkucHJvbWlzZX1mdW5jdGlvbiBxKHQpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBlKEkodCk/ZnVuY3Rpb24obixyKXtmb3IodmFyIG89dC5sZW5ndGgsaT0wO28+aTtpKyspZS5yZXNvbHZlKHRbaV0pLnRoZW4obixyKX06ZnVuY3Rpb24odCxlKXtlKG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIHJhY2UuXCIpKX0pfWZ1bmN0aW9uIEYodCl7dmFyIGU9dGhpcyxuPW5ldyBlKHApO3JldHVybiBqKG4sdCksbn1mdW5jdGlvbiBEKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3JcIil9ZnVuY3Rpb24gSygpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIil9ZnVuY3Rpb24gTCh0KXt0aGlzW3J0XT1PKCksdGhpcy5fcmVzdWx0PXRoaXMuX3N0YXRlPXZvaWQgMCx0aGlzLl9zdWJzY3JpYmVycz1bXSxwIT09dCYmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJkQoKSx0aGlzIGluc3RhbmNlb2YgTD9DKHRoaXMsdCk6SygpKX1mdW5jdGlvbiBOKHQsZSl7dGhpcy5faW5zdGFuY2VDb25zdHJ1Y3Rvcj10LHRoaXMucHJvbWlzZT1uZXcgdChwKSx0aGlzLnByb21pc2VbcnRdfHxrKHRoaXMucHJvbWlzZSksSShlKT8odGhpcy5faW5wdXQ9ZSx0aGlzLmxlbmd0aD1lLmxlbmd0aCx0aGlzLl9yZW1haW5pbmc9ZS5sZW5ndGgsdGhpcy5fcmVzdWx0PW5ldyBBcnJheSh0aGlzLmxlbmd0aCksMD09PXRoaXMubGVuZ3RoP1ModGhpcy5wcm9taXNlLHRoaXMuX3Jlc3VsdCk6KHRoaXMubGVuZ3RoPXRoaXMubGVuZ3RofHwwLHRoaXMuX2VudW1lcmF0ZSgpLDA9PT10aGlzLl9yZW1haW5pbmcmJlModGhpcy5wcm9taXNlLHRoaXMuX3Jlc3VsdCkpKTpqKHRoaXMucHJvbWlzZSxVKCkpfWZ1bmN0aW9uIFUoKXtyZXR1cm4gbmV3IEVycm9yKFwiQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5XCIpfWZ1bmN0aW9uIFcoKXt2YXIgdDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsKXQ9Z2xvYmFsO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYpdD1zZWxmO2Vsc2UgdHJ5e3Q9RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpfWNhdGNoKGUpe3Rocm93IG5ldyBFcnJvcihcInBvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKX12YXIgbj10LlByb21pc2U7KCFufHxcIltvYmplY3QgUHJvbWlzZV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuLnJlc29sdmUoKSl8fG4uY2FzdCkmJih0LlByb21pc2U9cHQpfXZhciB6O3o9QXJyYXkuaXNBcnJheT9BcnJheS5pc0FycmF5OmZ1bmN0aW9uKHQpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX07dmFyIEIsRyxILEk9eixKPTAsUT1mdW5jdGlvbih0LGUpe3R0W0pdPXQsdHRbSisxXT1lLEorPTIsMj09PUomJihHP0coYSk6SCgpKX0sUj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp2b2lkIDAsVj1SfHx7fSxYPVYuTXV0YXRpb25PYnNlcnZlcnx8Vi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLFo9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZcIltvYmplY3QgcHJvY2Vzc11cIj09PXt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcyksJD1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhDbGFtcGVkQXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbXBvcnRTY3JpcHRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgTWVzc2FnZUNoYW5uZWwsdHQ9bmV3IEFycmF5KDFlMyk7SD1aP28oKTpYP3MoKTokP3UoKTp2b2lkIDA9PT1SJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlP2YoKTpjKCk7dmFyIGV0PWwsbnQ9aCxydD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpLG90PXZvaWQgMCxpdD0xLHN0PTIsdXQ9bmV3IE0sY3Q9bmV3IE0sYXQ9MCxmdD1ZLGx0PXEsaHQ9RixwdD1MO0wuYWxsPWZ0LEwucmFjZT1sdCxMLnJlc29sdmU9bnQsTC5yZWplY3Q9aHQsTC5fc2V0U2NoZWR1bGVyPW4sTC5fc2V0QXNhcD1yLEwuX2FzYXA9USxMLnByb3RvdHlwZT17Y29uc3RydWN0b3I6TCx0aGVuOmV0LFwiY2F0Y2hcIjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aGVuKG51bGwsdCl9fTt2YXIgX3Q9TjtOLnByb3RvdHlwZS5fZW51bWVyYXRlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMubGVuZ3RoLGU9dGhpcy5faW5wdXQsbj0wO3RoaXMuX3N0YXRlPT09b3QmJnQ+bjtuKyspdGhpcy5fZWFjaEVudHJ5KGVbbl0sbil9LE4ucHJvdG90eXBlLl9lYWNoRW50cnk9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yLHI9bi5yZXNvbHZlO2lmKHI9PT1udCl7dmFyIG89dih0KTtpZihvPT09ZXQmJnQuX3N0YXRlIT09b3QpdGhpcy5fc2V0dGxlZEF0KHQuX3N0YXRlLGUsdC5fcmVzdWx0KTtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG8pdGhpcy5fcmVtYWluaW5nLS0sdGhpcy5fcmVzdWx0W2VdPXQ7ZWxzZSBpZihuPT09cHQpe3ZhciBpPW5ldyBuKHApO3coaSx0LG8pLHRoaXMuX3dpbGxTZXR0bGVBdChpLGUpfWVsc2UgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBuKGZ1bmN0aW9uKGUpe2UodCl9KSxlKX1lbHNlIHRoaXMuX3dpbGxTZXR0bGVBdChyKHQpLGUpfSxOLnByb3RvdHlwZS5fc2V0dGxlZEF0PWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLnByb21pc2U7ci5fc3RhdGU9PT1vdCYmKHRoaXMuX3JlbWFpbmluZy0tLHQ9PT1zdD9qKHIsbik6dGhpcy5fcmVzdWx0W2VdPW4pLDA9PT10aGlzLl9yZW1haW5pbmcmJlMocix0aGlzLl9yZXN1bHQpfSxOLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztFKHQsdm9pZCAwLGZ1bmN0aW9uKHQpe24uX3NldHRsZWRBdChpdCxlLHQpfSxmdW5jdGlvbih0KXtuLl9zZXR0bGVkQXQoc3QsZSx0KX0pfTt2YXIgZHQ9Vyx2dD17UHJvbWlzZTpwdCxwb2x5ZmlsbDpkdH07XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShmdW5jdGlvbigpe3JldHVybiB2dH0pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXZ0OlwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzJiYodGhpcy5FUzZQcm9taXNlPXZ0KSxkdCgpfSkuY2FsbCh0aGlzKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0dy9kMy5wcm9taXNlXG4vLyAhZnVuY3Rpb24oYSxiKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImQzXCJdLGIpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWIocmVxdWlyZShcImQzXCIpKTphLmQzLnByb21pc2U9YihhLmQzKX0odGhpcyxmdW5jdGlvbihhKXt2YXIgYj1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihkLGUpe3ZhciBmPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE/dm9pZCBlKEVycm9yKGEpKTp2b2lkIGQoYil9O2IuYXBwbHkoYSxjLmNvbmNhdChmKSl9KX19dmFyIGM9e307cmV0dXJuW1wiY3N2XCIsXCJ0c3ZcIixcImpzb25cIixcInhtbFwiLFwidGV4dFwiLFwiaHRtbFwiLFwiZ2V0XCJdLmZvckVhY2goZnVuY3Rpb24oZCl7Y1tkXT1iKGEsYVtkXSl9KSxjfSgpO3JldHVybiBhLnByb21pc2U9YixifSk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vdmVyc2V0L2phdmFzY3JpcHQtbmF0dXJhbC1zb3J0XG5mdW5jdGlvbiBuYXR1cmFsU29ydChhLGIpe3ZhciBxLHIsYz0vKF4oWytcXC1dP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPyg/PVxcRHxcXHN8JCkpfF4weFtcXGRhLWZBLUZdKyR8XFxkKykvZyxkPS9eXFxzK3xcXHMrJC9nLGU9L1xccysvZyxmPS8oXihbXFx3IF0rLD9bXFx3IF0rKT9bXFx3IF0rLD9bXFx3IF0rXFxkKzpcXGQrKDpcXGQrKT9bXFx3IF0/fF5cXGR7MSw0fVtcXC9cXC1dXFxkezEsNH1bXFwvXFwtXVxcZHsxLDR9fF5cXHcrLCBcXHcrIFxcZCssIFxcZHs0fSkvLGc9L14weFswLTlhLWZdKyQvaSxoPS9eMC8saT1mdW5jdGlvbihhKXtyZXR1cm4obmF0dXJhbFNvcnQuaW5zZW5zaXRpdmUmJihcIlwiK2EpLnRvTG93ZXJDYXNlKCl8fFwiXCIrYSkucmVwbGFjZShkLFwiXCIpfSxqPWkoYSksaz1pKGIpLGw9ai5yZXBsYWNlKGMsXCJcXDAkMVxcMFwiKS5yZXBsYWNlKC9cXDAkLyxcIlwiKS5yZXBsYWNlKC9eXFwwLyxcIlwiKS5zcGxpdChcIlxcMFwiKSxtPWsucmVwbGFjZShjLFwiXFwwJDFcXDBcIikucmVwbGFjZSgvXFwwJC8sXCJcIikucmVwbGFjZSgvXlxcMC8sXCJcIikuc3BsaXQoXCJcXDBcIiksbj1wYXJzZUludChqLm1hdGNoKGcpLDE2KXx8MSE9PWwubGVuZ3RoJiZEYXRlLnBhcnNlKGopLG89cGFyc2VJbnQoay5tYXRjaChnKSwxNil8fG4mJmsubWF0Y2goZikmJkRhdGUucGFyc2Uoayl8fG51bGwscD1mdW5jdGlvbihhLGIpe3JldHVybighYS5tYXRjaChoKXx8MT09YikmJnBhcnNlRmxvYXQoYSl8fGEucmVwbGFjZShlLFwiIFwiKS5yZXBsYWNlKGQsXCJcIil8fDB9O2lmKG8pe2lmKG48bylyZXR1cm4tMTtpZihuPm8pcmV0dXJuIDF9Zm9yKHZhciBzPTAsdD1sLmxlbmd0aCx1PW0ubGVuZ3RoLHY9TWF0aC5tYXgodCx1KTtzPHY7cysrKXtpZihxPXAobFtzXXx8XCJcIix0KSxyPXAobVtzXXx8XCJcIix1KSxpc05hTihxKSE9PWlzTmFOKHIpKXJldHVybiBpc05hTihxKT8xOi0xO2lmKC9bXlxceDAwLVxceDgwXS8udGVzdChxK3IpJiZxLmxvY2FsZUNvbXBhcmUpe3ZhciB3PXEubG9jYWxlQ29tcGFyZShyKTtyZXR1cm4gdy9NYXRoLmFicyh3KX1pZihxPHIpcmV0dXJuLTE7aWYocT5yKXJldHVybiAxfX1cblxuLy8gZS5nLiBcIkhvbW8gc2FwaWVuc1wiIC0+IFwiaG9tby1zYXBpZW5zXCJcbmZ1bmN0aW9uIHNsdWdpZnkodmFsdWUpe3JldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJyAnLCAnLScpfTtcblxud2luZG93Lm5hdHVyYWxTb3J0ID0gbmF0dXJhbFNvcnQ7XG53aW5kb3cuc2x1Z2lmeSA9IHNsdWdpZnk7XG5cbndpbmRvdy5JZGVvZ3JhbSA9IElkZW9ncmFtO1xuIiwiXG4vLyBpbXBvcnQge1ZlcnRpY2FsTGF5b3V0fSBmcm9tICcuL3ZlcnRpY2FsLWxheW91dCc7XG4vLyBpbXBvcnQge0hvcml6b250YWxMYXlvdXR9IGZyb20gJy4vaG9yaXpvbnRhbC1sYXlvdXQnO1xuLy8gaW1wb3J0IHtQYWlyZWRMYXlvdXR9IGZyb20gJy4vcGFpcmVkLWxheW91dCc7XG4vLyBpbXBvcnQge1NtYWxsTGF5b3V0fSBmcm9tICcuL3NtYWxsLWxheW91dCc7XG5cbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuaW1wb3J0IHtDaHJvbW9zb21lVXRpbH0gZnJvbSAnLi8uLi92aWV3cy9jaHJvbW9zb21lLXV0aWwnO1xuXG5leHBvcnQgY2xhc3MgTGF5b3V0IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGlkZW8pIHtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5faWRlbyA9IGlkZW87XG4gICAgdGhpcy5fcGxvaWR5ID0gdGhpcy5faWRlby5fcGxvaWR5O1xuICAgIHRoaXMuX3RyYW5zbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgIGlmICgnY2hyU2V0TWFyZ2luJyBpbiBjb25maWcpIHtcbiAgICAgIHRoaXMuY2hyU2V0TWFyZ2luID0gY29uZmlnLmNoclNldE1hcmdpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGsgPSB0aGlzLl9jb25maWcuY2hyTWFyZ2luO1xuICAgICAgdGhpcy5jaHJTZXRNYXJnaW4gPSAodGhpcy5fY29uZmlnLnBsb2lkeSA+IDEgPyBrIDogMCk7XG4gICAgfVxuXG4gICAgLy8gQ2hyb21vc29tZSBiYW5kJ3Mgc2l6ZS5cbiAgICB0aGlzLl90aWNrU2l6ZSA9IDg7XG5cbiAgICAvLyBDaHJvbW9zb21lIHJvdGF0aW9uIHN0YXRlLlxuICAgIHRoaXMuX2lzUm90YXRlZCA9IGZhbHNlO1xuICB9XG5cbiAgLy8gRmFjdG9yeSBtZXRob2RcbiAgc3RhdGljIGdldEluc3RhbmNlKGNvbmZpZywgaWRlbykge1xuICAgIGlmICgncGVyc3BlY3RpdmUnIGluIGNvbmZpZyAmJiBjb25maWcucGVyc3BlY3RpdmUgPT09ICdjb21wYXJhdGl2ZScpIHtcbiAgICAgIHJldHVybiBuZXcgUGFpcmVkTGF5b3V0KGNvbmZpZywgaWRlbyk7XG4gICAgfSBlbHNlIGlmICgncm93cycgaW4gY29uZmlnICYmIGNvbmZpZy5yb3dzID4gMSkge1xuICAgICAgcmV0dXJuIG5ldyBTbWFsbExheW91dChjb25maWcsIGlkZW8pO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gbmV3IFZlcnRpY2FsTGF5b3V0KGNvbmZpZywgaWRlbyk7XG4gICAgfSBlbHNlIGlmIChjb25maWcub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgcmV0dXJuIG5ldyBIb3Jpem9udGFsTGF5b3V0KGNvbmZpZywgaWRlbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgVmVydGljYWxMYXlvdXQoY29uZmlnLCBpZGVvKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgY2hhcnQgbGVmdCBtYXJnaW5cbiAgX2dldExlZnRNYXJnaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcmdpbi5sZWZ0O1xuICB9XG5cbiAgLy8gR2V0IHJvdGF0ZWQgY2hyb21vc29tZSB5IHNjYWxlXG4gIF9nZXRZU2NhbGUoKSB7XG4gICAgICAvLyAyMCBpcyB3aWR0aCBvZiByb3RhdGVkIGNocm9tb3NvbWUuXG4gICAgcmV0dXJuIDIwIC8gdGhpcy5fY29uZmlnLmNocldpZHRoO1xuICB9XG5cbiAgLy8gR2V0IGNocm9tb3NvbWUgbGFiZWxzXG4gIGdldENocm9tb3NvbWVMYWJlbHMoY2hyRWxlbWVudCkge1xuICAgIHZhciB1dGlsID0gbmV3IENocm9tb3NvbWVVdGlsKGNockVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIFt1dGlsLmdldFNldExhYmVsKCksIHV0aWwuZ2V0TGFiZWwoKV0uZmlsdGVyKGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLmxlbmd0aCA+IDA7XG4gICAgfSk7XG4gIH1cblxuICAvLyBSb3RhdGUgY2hyb21vc29tZSB0byBvcmlnaW5hbCBwb3NpdGlvblxuICByb3RhdGVCYWNrKCkge1xuICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9jbGFzcyArICcjcm90YXRlQmFjayBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8vIFJvdGF0ZSBjaHJvbW9zb21lIHRvIG9wcG9zaXRlIHBvc2l0aW9uXG4gIHJvdGF0ZUZvcndhcmQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuX2NsYXNzICsgJyNyb3RhdGVGb3J3YXJkIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgcm90YXRlKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBjaHJFbGVtZW50KSB7XG4gICAgdmFyIGlkZW8gPSB0aGlzLl9pZGVvO1xuXG4gICAgICAvLyBGaW5kIGNocm9tb3NvbWVzIHdoaWNoIHNob3VsZCBiZSBoaWRkZW5cbiAgICB2YXIgb3RoZXJDaHJzID0gZDMuc2VsZWN0QWxsKGlkZW8uc2VsZWN0b3IgKyAnIGcuY2hyb21vc29tZScpXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcyAhPT0gY2hyRWxlbWVudDtcbiAgICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuX2lzUm90YXRlZCkge1xuICAgICAgICAgIC8vIFJlc2V0IF9pc1JvdGF0ZWQgZmxhZ1xuICAgICAgdGhpcy5faXNSb3RhdGVkID0gZmFsc2U7XG4gICAgICAgICAgLy8gUm90YXRlIGNocm9tb3NvbWUgYmFja1xuICAgICAgdGhpcy5yb3RhdGVCYWNrKGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBjaHJFbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gU2hvdyBhbGwgb3RoZXIgY2hyb21vc29tZXMgYW5kIGNocm9tb3NvbWUgbGFiZWxzXG4gICAgICAgIG90aGVyQ2hycy5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3RvciArICcgLmNoclNldExhYmVsLCAuY2hyTGFiZWwnKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTZXQgX2lzUm90YXRlZCBmbGFnXG4gICAgICB0aGlzLl9pc1JvdGF0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gSGlkZSBhbGwgb3RoZXIgY2hyb21vc29tZXMgYW5kIGNocm9tb3NvbWUgbGFiZWxzXG4gICAgICBvdGhlckNocnMuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgZDMuc2VsZWN0QWxsKGlkZW8uc2VsZWN0b3IgKyAnIC5jaHJTZXRMYWJlbCwgLmNockxhYmVsJylcbiAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgICAgICAgIC8vIFJvdGF0ZSBjaHJvbW9zb21lXG4gICAgICB0aGlzLnJvdGF0ZUZvcndhcmQoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGdldENocm9tb3NvbWVMYWJlbENsYXNzKCkge1xuICAgIGlmICh0aGlzLl9jb25maWcucGxvaWR5ID09PSAxKSB7XG4gICAgICByZXR1cm4gJ2NockxhYmVsJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdjaHJTZXRMYWJlbCc7XG4gICAgfVxuICB9XG5cbiAgX2dldEFkZGl0aW9uYWxPZmZzZXQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICh0aGlzLl9jb25maWcuYW5ub3RhdGlvbkhlaWdodCB8fCAwKSAqICh0aGlzLl9jb25maWcubnVtQW5ub3RUcmFja3MgfHwgMSlcbiAgICApO1xuICB9XG5cbiAgX2dldENocm9tb3NvbWVTZXRTaXplKGNoclNldE51bWJlcikge1xuICAgIC8vIEdldCBsYXN0IGNocm9tb3NvbWUgc2V0IHNpemUuXG4gICAgdmFyIHNldFNpemUgPSB0aGlzLl9wbG9pZHkuZ2V0U2V0U2l6ZShjaHJTZXROdW1iZXIpO1xuXG4gICAgLy8gSW5jcmVhc2Ugb2Zmc2V0IGJ5IGxhc3QgY2hyb21vc29tZSBzZXQgc2l6ZVxuICAgIHJldHVybiAoXG4gICAgICBzZXRTaXplICogdGhpcy5fY29uZmlnLmNocldpZHRoICogMiArICh0aGlzLmNoclNldE1hcmdpbilcbiAgICApO1xuICB9XG5cbiAgLy8gR2V0IGxheW91dCBtYXJnaW5cbiAgZ2V0TWFyZ2luKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXJnaW47XG4gIH1cblxuICAvLyBHZXQgU1ZHIGVsZW1lbnQgaGVpZ2h0XG4gIGdldEhlaWdodCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fY2xhc3MgKyAnI2dldEhlaWdodCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kVGlja1kxKCkge1xuICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9jbGFzcyArICcjZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTEgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lQmFuZFRpY2tZMigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fY2xhc3MgKyAnI2dldENocm9tb3NvbWVCYW5kVGlja1kyIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLy8gR2V0IGNocm9tb3NvbWUncyBiYW5kIHRyYW5zbGF0ZSBhdHRyaWJ1dGVcbiAgZ2V0Q2hyb21vc29tZUJhbmRMYWJlbFRyYW5zbGF0ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICB0aGlzLl9jbGFzcyArICcjZ2V0Q2hyb21vc29tZUJhbmRMYWJlbFRyYW5zbGF0ZSBub3QgaW1wbGVtZW50ZWQnXG4gICAgKTtcbiAgfVxuXG4gIC8vIEdldCBjaHJvbW9zb21lIHNldCBsYWJlbCBhbmNob3IgcHJvcGVydHlcbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsQW5jaG9yKCkge1xuICAgIHJldHVybiAnbWlkZGxlJztcbiAgfVxuXG4gIC8vIEdldCBjaHJvbW9zb21lJ3MgYmFuZCBsYWJlbCB0ZXh0LWFuY2hvciB2YWx1ZVxuICBnZXRDaHJvbW9zb21lQmFuZExhYmVsQW5jaG9yKCkge1xuICAgIHRocm93IChcbiAgICAgIG5ldyBFcnJvcih0aGlzLl9jbGFzcyArICcjZ2V0Q2hyb21vc29tZUJhbmRMYWJlbEFuY2hvciBub3QgaW1wbGVtZW50ZWQnKVxuICAgICk7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lTGFiZWxYUG9zaXRpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgdGhpcy5fY2xhc3MgKyAnI2dldENocm9tb3NvbWVMYWJlbFhQb3NpdGlvbiBub3QgaW1wbGVtZW50ZWQnXG4gICAgKTtcbiAgfVxuXG4gIC8vIEdldCBjaHJvbW9zb21lIGxhYmVsIHkgcG9zaXRpb24uXG4gIGdldENocm9tb3NvbWVMYWJlbFlQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gLTUuNTtcbiAgfVxuXG4gIC8vIFwiaVwiIGlzIGNocm9tb3NvbWUgbnVtYmVyXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFlQb3NpdGlvbihpKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5wbG9pZHkgPT09IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENocm9tb3NvbWVMYWJlbFlQb3NpdGlvbihpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0yICogdGhpcy5fY29uZmlnLmNocldpZHRoO1xuICAgIH1cbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFhQb3NpdGlvbigpIHtcbiAgICB0aHJvdyAoXG4gICAgICBuZXcgRXJyb3IoXG4gICAgICAgIHRoaXMuX2NsYXNzICsgJyNnZXRDaHJvbW9zb21lU2V0TGFiZWxYUG9zaXRpb24gbm90IGltcGxlbWVudGVkJ1xuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKSB7XG4gICAgdGhyb3cgKFxuICAgICAgbmV3IEVycm9yKHRoaXMuX2NsYXNzICsgJyNnZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUgbm90IGltcGxlbWVudGVkJylcbiAgICApO1xuICB9XG5cbiAgLy8gR2V0IGNocm9tb3NvbWUgc2V0IHRyYW5zbGF0ZSBhdHRyaWJ1dGVcbiAgZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fY2xhc3MgKyAnI2dldENocm9tb3NvbWVTZXRUcmFuc2xhdGUgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvLyBHZXQgY2hyb21vc29tZSBzZXQgdHJhbnNsYXRlJ3MgeSBvZmZzZXRcbiAgZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgdGhpcy5fY2xhc3MgKyAnI2dldENocm9tb3NvbWVTZXRZVHJhbnNsYXRlIG5vdCBpbXBsZW1lbnRlZCdcbiAgICApO1xuICB9XG59XG5cblxuXG5leHBvcnQgY2xhc3MgSG9yaXpvbnRhbExheW91dCBleHRlbmRzIExheW91dCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnLCBpZGVvKSB7XG4gICAgc3VwZXIoY29uZmlnLCBpZGVvKTtcbiAgICB0aGlzLl9jbGFzcyA9ICdIb3Jpem9udGFsTGF5b3V0JztcbiAgICB0aGlzLl9tYXJnaW4gPSB7XG4gICAgICBsZWZ0OiAyMCxcbiAgICAgIHRvcDogMzBcbiAgICB9O1xuICB9XG5cbiAgX2dldExlZnRNYXJnaW4oKSB7XG4gICAgdmFyIG1hcmdpbiA9IExheW91dC5wcm90b3R5cGUuX2dldExlZnRNYXJnaW4uY2FsbCh0aGlzKTtcbiAgICBpZiAodGhpcy5fY29uZmlnLnBsb2lkeSA+IDEpIHtcbiAgICAgIG1hcmdpbiAqPSAxLjg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmdpbjtcbiAgfVxuXG4gIHJvdGF0ZUZvcndhcmQoc2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHhPZmZzZXQgPSAzMDtcblxuICAgIHZhciBpZGVvQm94ID0gZDMuc2VsZWN0KHRoaXMuX2lkZW8uc2VsZWN0b3IpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgY2hyQm94ID0gY2hyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIHZhciBzY2FsZVggPSAoaWRlb0JveC5oZWlnaHQgLyAoY2hyQm94LndpZHRoICsgeE9mZnNldCAvIDIpKSAqIDAuOTtcbiAgICB2YXIgc2NhbGVZID0gdGhpcy5fZ2V0WVNjYWxlKCk7XG5cbiAgICB2YXIgeU9mZnNldCA9IChjaHJOdW1iZXIgKyAxKSAqICgodGhpcy5fY29uZmlnLmNocldpZHRoICogMikgKiBzY2FsZVkpO1xuXG4gICAgdmFyIHRyYW5zZm9ybSA9IChcbiAgICAgICdyb3RhdGUoOTApICcgK1xuICAgICAgJ3RyYW5zbGF0ZSgnICsgeE9mZnNldCArICcsIC0nICsgeU9mZnNldCArICcpICcgK1xuICAgICAgJ3NjYWxlKCcgKyBzY2FsZVggKyAnLCAnICsgc2NhbGVZICsgJyknXG4gICAgKTtcblxuICAgIGQzLnNlbGVjdChjaHJFbGVtZW50LnBhcmVudE5vZGUpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0pXG4gICAgICAub24oJ2VuZCcsIGNhbGxiYWNrKTtcblxuICAgIC8vIEFwcGVuZCBuZXcgY2hyb21vc29tZSBsYWJlbHNcbiAgICB2YXIgbGFiZWxzID0gdGhpcy5nZXRDaHJvbW9zb21lTGFiZWxzKGNockVsZW1lbnQpO1xuICAgIGQzLnNlbGVjdCh0aGlzLl9pZGVvLmdldFN2ZygpKVxuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAndG1wJylcbiAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgLmRhdGEobGFiZWxzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4gaSA9PT0gMCAmJiBsYWJlbHMubGVuZ3RoID09PSAyID8gJ2NoclNldExhYmVsJyA6IG51bGw7XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ3gnLCAzMClcbiAgICAgIC5hdHRyKCd5JywgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4gKGkgKyAxICsgbGFiZWxzLmxlbmd0aCAlIDIpICogMTI7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICAgIC50ZXh0KFN0cmluZylcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuICB9XG5cbiAgcm90YXRlQmFjayhzZXROdW1iZXIsIGNock51bWJlcixcbiAgICAgICAgICAgICBjaHJFbGVtZW50LCBjYWxsYmFjaykge1xuICAgIHZhciB0cmFuc2xhdGUgPSB0aGlzLmdldENocm9tb3NvbWVTZXRUcmFuc2xhdGUoc2V0TnVtYmVyKTtcblxuICAgIGQzLnNlbGVjdChjaHJFbGVtZW50LnBhcmVudE5vZGUpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2xhdGUpXG4gICAgICAub24oJ2VuZCcsIGNhbGxiYWNrKTtcblxuICAgIGQzLnNlbGVjdEFsbCh0aGlzLl9pZGVvLnNlbGVjdG9yICsgJyBnLnRtcCcpXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgICAgLnJlbW92ZSgpO1xuICB9XG5cbiAgZ2V0SGVpZ2h0KHRheElkKSB7XG4gICAgLy8gR2V0IGxhc3QgY2hyb21vc29tZSBzZXQgb2Zmc2V0LlxuICAgIHZhciBudW1DaHJvbW9zb21lcyA9IHRoaXMuX2NvbmZpZy5jaHJvbW9zb21lc1t0YXhJZF0ubGVuZ3RoO1xuICAgIHZhciBsYXN0U2V0T2Zmc2V0ID0gdGhpcy5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShudW1DaHJvbW9zb21lcyAtIDEpO1xuXG4gICAgLy8gR2V0IGxhc3QgY2hyb21vc29tZSBzZXQgc2l6ZS5cbiAgICB2YXIgbGFzdFNldFNpemUgPSB0aGlzLl9nZXRDaHJvbW9zb21lU2V0U2l6ZShudW1DaHJvbW9zb21lcyAtIDEpO1xuXG4gICAgLy8gSW5jcmVhc2Ugb2Zmc2V0IGJ5IGxhc3QgY2hyb21vc29tZSBzZXQgc2l6ZVxuICAgIGxhc3RTZXRPZmZzZXQgKz0gbGFzdFNldFNpemU7XG5cbiAgICByZXR1cm4gbGFzdFNldE9mZnNldCArIHRoaXMuX2dldEFkZGl0aW9uYWxPZmZzZXQoKSAqIDI7XG4gIH1cblxuICBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNockhlaWdodCArIHRoaXMuX21hcmdpbi50b3AgKiAxLjU7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxBbmNob3IoKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRMYWJlbEFuY2hvcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kVGlja1kxKCkge1xuICAgIHJldHVybiAyO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRUaWNrWTIoKSB7XG4gICAgcmV0dXJuIDEwO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUJhbmRMYWJlbFRyYW5zbGF0ZShiYW5kKSB7XG4gICAgdmFyIHggPVxuICAgICAgdGhpcy5faWRlby5yb3VuZCgtdGhpcy5fdGlja1NpemUgKyBiYW5kLnB4LnN0YXJ0ICsgYmFuZC5weC53aWR0aCAvIDIpO1xuICAgIHZhciB5ID0gLTEwO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5LFxuICAgICAgdHJhbnNsYXRlOiAndHJhbnNsYXRlKCcgKyB4ICsgJywnICsgeSArICcpJ1xuICAgIH07XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0VHJhbnNsYXRlKHNldE51bWJlcikge1xuICAgIHZhciBsZWZ0TWFyZ2luID0gdGhpcy5fZ2V0TGVmdE1hcmdpbigpO1xuICAgIHZhciBjaHJvbW9zb21lU2V0WVRyYW5zbGF0ZSA9IHRoaXMuZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoc2V0TnVtYmVyKTtcbiAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgbGVmdE1hcmdpbiArICcsICcgKyBjaHJvbW9zb21lU2V0WVRyYW5zbGF0ZSArICcpJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRZVHJhbnNsYXRlKHNldE51bWJlcikge1xuICAgIC8vIElmIG5vIGRldGFpbGVkIGRlc2NyaXB0aW9uIHByb3ZpZGVkIGp1c3QgdXNlIG9uZSBmb3JtdWxhIGZvciBhbGwgY2FzZXMuXG4gICAgaWYgKCF0aGlzLl9jb25maWcucGxvaWR5RGVzYykge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5jaHJNYXJnaW4gKiAoc2V0TnVtYmVyICsgMSk7XG4gICAgfVxuXG4gICAgLy8gSWQgZGV0YWlsZWQgZGVzY3JpcHRpb24gcHJvdmlkZWQgc3RhcnQgdG8gY2FsY3VsYXRlIG9mZnNldHNcbiAgICAvLyAgZm9yIGVhY2ggY2hyb21vc29tZSBzZXQgc2VwYXJhdGVseS4gVGhpcyBzaG91bGQgYmUgZG9uZSBvbmx5IG9uY2UuXG4gICAgaWYgKCF0aGlzLl90cmFuc2xhdGUpIHtcbiAgICAgIC8vIEZpcnN0IG9mZnNldCBlcXVhbHMgdG8gemVyby5cbiAgICAgIHRoaXMuX3RyYW5zbGF0ZSA9IFsxXTtcblxuICAgICAgLy8gTG9vcCB0aHJvdWdoIGRlc2NyaXB0aW9uIHNldFxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLl9jb25maWcucGxvaWR5RGVzYy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLl90cmFuc2xhdGVbaV0gPVxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZVtpIC0gMV0gKyB0aGlzLl9nZXRDaHJvbW9zb21lU2V0U2l6ZShpIC0gMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0ZVtzZXROdW1iZXJdO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsWFBvc2l0aW9uKGkpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLnBsb2lkeSA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hyb21vc29tZUxhYmVsWFBvc2l0aW9uKGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTIwO1xuICAgIH1cbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFlQb3NpdGlvbihpKSB7XG4gICAgdmFyIHNldFNpemUgPSB0aGlzLl9wbG9pZHkuZ2V0U2V0U2l6ZShpKSxcbiAgICAgIGNvbmZpZyA9IHRoaXMuX2NvbmZpZyxcbiAgICAgIGNock1hcmdpbiA9IGNvbmZpZy5jaHJNYXJnaW4sXG4gICAgICBjaHJXaWR0aCA9IGNvbmZpZy5jaHJXaWR0aCxcbiAgICAgIHk7XG5cbiAgICBpZiAoY29uZmlnLnBsb2lkeSA9PT0gMSkge1xuICAgICAgeSA9IGNocldpZHRoIC8gMiArIDM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSAoc2V0U2l6ZSAqIGNock1hcmdpbikgLyAyO1xuICAgIH1cblxuICAgIHJldHVybiB5O1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZUxhYmVsWFBvc2l0aW9uKCkge1xuICAgIHJldHVybiAtODtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVMYWJlbFlQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNocldpZHRoO1xuICB9XG5cbn1cblxuXG5cblxuZXhwb3J0IGNsYXNzIFBhaXJlZExheW91dCBleHRlbmRzIExheW91dCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnLCBpZGVvKSB7XG4gICAgc3VwZXIoY29uZmlnLCBpZGVvKTtcblxuICAgIHRoaXMuX2NsYXNzID0gJ1BhaXJlZExheW91dCc7XG5cbiAgICB0aGlzLl9tYXJnaW4gPSB7XG4gICAgICBsZWZ0OiAzMFxuICAgIH07XG4gIH1cblxuICByb3RhdGVGb3J3YXJkKHNldE51bWJlciwgY2hyTnVtYmVyLCBjaHJFbGVtZW50LCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgaWRlbyA9IHRoaXMuX2lkZW87XG5cbiAgICAvLyBHZXQgaWRlbyBjb250YWluZXIgYW5kIGNocm9tb3NvbWUgc2V0IGRpbWVuc2lvbnNcbiAgICB2YXIgaWRlb0JveCA9IGQzLnNlbGVjdChpZGVvLnNlbGVjdG9yKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIGNockJveCA9IGNockVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAvLyBFdmFsdWF0ZSBkaW1lbnNpb25zIHNjYWxlIGNvZWZmaWNpZW50c1xuICAgIHZhciBzY2FsZVggPSAoaWRlb0JveC53aWR0aCAvIGNockJveC5oZWlnaHQpICogMC45NztcbiAgICB2YXIgc2NhbGVZID0gdGhpcy5fZ2V0WVNjYWxlKCk7XG5cbiAgICAvLyBFdmFsdWF0ZSB5IG9mZnNldCBvZiBjaHJvbW9zb21lLlxuICAgIC8vIEl0IGlzIGRpZmZlcmVudCBmb3IgZmlyc3QgYW5kIHRoZSBzZWNvbmQgb25lXG4gICAgdmFyIHlPZmZzZXQgPSBzZXROdW1iZXIgPyAxNTAgOiAyNTtcblxuICAgIHZhciB0cmFuc2Zvcm0gPVxuICAgICAgJ3RyYW5zbGF0ZSgxNSwgJyArIHlPZmZzZXQgKyAnKSBzY2FsZSgnICsgc2NhbGVYICsgJywgJyArIHNjYWxlWSArICcpJztcblxuICAgIC8vIFJ1biByb3RhdGlvbiBwcm9jZWR1cmVcbiAgICBkMy5zZWxlY3QoY2hyRWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKVxuICAgICAgLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gUnVuIGNhbGxiYWNrIGZ1bmN0aW9uIGlmIHByb3ZpZGVkXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNsYXRlWSA9ICg2ICogTnVtYmVyKCFzZXROdW1iZXIpKTtcblxuICAgICAgICAvLyBSb3RhdGUgYmFuZCBsYWJlbHNcbiAgICAgICAgZDMuc2VsZWN0KGNockVsZW1lbnQucGFyZW50Tm9kZSkuc2VsZWN0QWxsKCdnLmJhbmRMYWJlbCB0ZXh0JylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3JvdGF0ZSg5MCkgdHJhbnNsYXRlKDAsICcgKyB0cmFuc2xhdGVZICsgJyknKVxuICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcblxuICAgICAgICAvLyBIaWRlIHN5bnRlbmljIHJlZ2lvbnNcbiAgICAgICAgZDMuc2VsZWN0QWxsKGlkZW8uc2VsZWN0b3IgKyAnIC5zeW50ZW5pY1JlZ2lvbicpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIH0pO1xuXG4gICAgLy8gQXBwZW5kIG5ldyBjaHJvbW9zb21lIGxhYmVsc1xuICAgIHZhciBsYWJlbHMgPSB0aGlzLmdldENocm9tb3NvbWVMYWJlbHMoY2hyRWxlbWVudCk7XG5cbiAgICBkMy5zZWxlY3QodGhpcy5faWRlby5nZXRTdmcoKSlcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RtcCcpXG4gICAgICAuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgIC5kYXRhKHRoaXMuZ2V0Q2hyb21vc29tZUxhYmVscyhjaHJFbGVtZW50KSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgcmV0dXJuIGkgPT09IDAgJiYgbGFiZWxzLmxlbmd0aCA9PT0gMiA/ICdjaHJTZXRMYWJlbCcgOiBudWxsO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgIC5hdHRyKCd5JywgeU9mZnNldCArIChzZWxmLl9jb25maWcuY2hyV2lkdGggKiBzY2FsZVggLyAyKSAqIDEuMTUpXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgICAgLnRleHQoU3RyaW5nKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG4gIH1cblxuICByb3RhdGVCYWNrKHNldE51bWJlciwgY2hyTnVtYmVyLCBjaHJFbGVtZW50LCBjYWxsYmFjaykge1xuICAgIHZhciBpZGVvID0gdGhpcy5faWRlbztcblxuICAgIC8vIEdldCBpbnRpYWwgdHJhbnNmb3JtYXRpb24gc3RyaW5nIGZvciBjaHJvbW9zb21lIHNldFxuICAgIHZhciB0cmFuc2xhdGUgPSB0aGlzLmdldENocm9tb3NvbWVTZXRUcmFuc2xhdGUoc2V0TnVtYmVyKTtcblxuICAgIC8vIFJ1biByb3RhdGlvbiBwcm9jZWR1cmVcbiAgICBkMy5zZWxlY3QoY2hyRWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZSlcbiAgICAgIC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFJ1biBjYWxsYmFjayBmbnVjdGlvbiBpZiBwcm92aWRlZFxuICAgICAgICBjYWxsYmFjaygpO1xuXG4gICAgICAgIC8vIFNob3cgc3ludGVuaWMgcmVnaW9uc1xuICAgICAgICBkMy5zZWxlY3RBbGwoaWRlby5zZWxlY3QgKyAnIC5zeW50ZW5pY1JlZ2lvbicpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG5cbiAgICAgICAgLy8gUmVzZXQgY2hhbmdlZCBhdHRyaWJ1dGVzIHRvIG9yaWdpbmFsIHN0YXRlXG4gICAgICAgIGQzLnNlbGVjdChjaHJFbGVtZW50LnBhcmVudE5vZGUpLnNlbGVjdEFsbCgnZy5iYW5kTGFiZWwgdGV4dCcpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIG51bGwpXG4gICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgc2V0TnVtYmVyID8gbnVsbCA6ICdlbmQnKTtcbiAgICAgIH0pO1xuXG4gICAgZDMuc2VsZWN0QWxsKGlkZW8uc2VsZWN0b3IgKyAnIGcudG1wJylcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAucmVtb3ZlKCk7XG4gIH1cblxuICBnZXRIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5jaHJIZWlnaHQgKyB0aGlzLl9tYXJnaW4ubGVmdCAqIDEuNTtcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIHJldHVybiAnOTclJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kVGlja1kxKGNock51bWJlcikge1xuICAgIHJldHVybiBjaHJOdW1iZXIgJSAyID8gdGhpcy5fY29uZmlnLmNocldpZHRoIDogdGhpcy5fY29uZmlnLmNocldpZHRoICogMjtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kVGlja1kyKGNock51bWJlcikge1xuICAgIHZhciB3aWR0aCA9IHRoaXMuX2NvbmZpZy5jaHJXaWR0aDtcbiAgICByZXR1cm4gY2hyTnVtYmVyICUgMiA/IHdpZHRoIC0gdGhpcy5fdGlja1NpemUgOiB3aWR0aCAqIDIgKyB0aGlzLl90aWNrU2l6ZTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVCYW5kTGFiZWxBbmNob3IoY2hyTnVtYmVyKSB7XG4gICAgcmV0dXJuIGNock51bWJlciAlIDIgPyBudWxsIDogJ2VuZCc7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlKGJhbmQsIGNock51bWJlcikge1xuICAgIHZhciB4ID0gY2hyTnVtYmVyICUgMiA/IDEwIDogLXRoaXMuX2NvbmZpZy5jaHJXaWR0aCAtIDEwO1xuICAgIHZhciB5ID0gdGhpcy5faWRlby5yb3VuZChiYW5kLnB4LnN0YXJ0ICsgYmFuZC5weC53aWR0aCAvIDIpICsgMztcblxuICAgIHJldHVybiB7XG4gICAgICB4OiB5LFxuICAgICAgeTogeSxcbiAgICAgIHRyYW5zbGF0ZTogJ3JvdGF0ZSgtOTApIHRyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknXG4gICAgfTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVMYWJlbFhQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gLXRoaXMuX3RpY2tTaXplO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsWFBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuY2hyV2lkdGggLyAtMjtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFRyYW5zbGF0ZSgpIHtcbiAgICByZXR1cm4gJ3JvdGF0ZSgtOTApJztcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRUcmFuc2xhdGUoc2V0TnVtYmVyKSB7XG4gICAgdmFyIGNocm9tb3NvbWVTZXRZVHJhbnNsYXRlID0gdGhpcy5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShzZXROdW1iZXIpO1xuICAgIHJldHVybiAoXG4gICAgICAncm90YXRlKDkwKSAnICtcbiAgICAgICd0cmFuc2xhdGUoJyArIHRoaXMuX21hcmdpbi5sZWZ0ICsgJywgLScgKyBjaHJvbW9zb21lU2V0WVRyYW5zbGF0ZSArICcpJ1xuICAgICk7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShzZXROdW1iZXIpIHtcbiAgICByZXR1cm4gMjAwICogKHNldE51bWJlciArIDEpO1xuICB9XG5cbn1cblxuXG5cbmV4cG9ydCBjbGFzcyBTbWFsbExheW91dCBleHRlbmRzIExheW91dCB7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnLCBpZGVvKSB7XG4gICAgc3VwZXIoY29uZmlnLCBpZGVvKTtcblxuICAgIHRoaXMuX2NsYXNzID0gJ1NtYWxsTGF5b3V0JztcblxuICAgIHRoaXMuX21hcmdpbiA9IHtcbiAgICAgIGxlZnQ6IDM2LjUsXG4gICAgICB0b3A6IDEwXG4gICAgfTtcbiAgfVxuXG4gIHJvdGF0ZUZvcndhcmQoc2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkZW9Cb3ggPSBkMy5zZWxlY3QodGhpcy5faWRlby5zZWxlY3Rvcikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBjaHJCb3ggPSBjaHJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgdmFyIHNjYWxlWCA9IChpZGVvQm94LndpZHRoIC8gY2hyQm94LmhlaWdodCkgKiAwLjk3O1xuICAgIHZhciBzY2FsZVkgPSB0aGlzLl9nZXRZU2NhbGUoKTtcblxuICAgIHRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoNSwgMjUpIHNjYWxlKCcgKyBzY2FsZVggKyAnLCAnICsgc2NhbGVZICsgJyknO1xuXG4gICAgZDMuc2VsZWN0KGNockVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pXG4gICAgICAub24oJ2VuZCcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJvdGF0ZUJhY2soc2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXMuZ2V0Q2hyb21vc29tZVNldFRyYW5zbGF0ZShzZXROdW1iZXIpO1xuXG4gICAgZDMuc2VsZWN0KGNockVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCB0cmFuc2xhdGUpXG4gICAgICAub24oJ2VuZCcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldEhlaWdodCgpIHtcbiAgICB2YXIgY2hySGVpZ2h0ID0gdGhpcy5fY29uZmlnLmNockhlaWdodDtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnJvd3MgKiAoY2hySGVpZ2h0ICsgdGhpcy5fbWFyZ2luLnRvcCAqIDEuNSk7XG4gIH1cblxuICBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gJzk3JSc7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlKCkge1xuXG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKSB7XG4gICAgcmV0dXJuICdyb3RhdGUoLTkwKSc7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0VHJhbnNsYXRlKHNldE51bWJlcikge1xuICAgIC8vIEdldCBvcmdhbmlzbXMgaWQgbGlzdFxuICAgIHZhciBvcmdhbmlzbXMgPSBbXTtcbiAgICB0aGlzLl9pZGVvLmdldFRheGlkcyhmdW5jdGlvbih0YXhJZExpc3QpIHtcbiAgICAgIG9yZ2FuaXNtcyA9IHRheElkTGlzdDtcbiAgICB9KTtcbiAgICAvLyBHZXQgZmlyc3Qgb3JnYW5pc20gY2hyb21vc29tZXMgYW1vdW50XG4gICAgdmFyIHNpemUgPSB0aGlzLl9pZGVvLmNvbmZpZy5jaHJvbW9zb21lc1tvcmdhbmlzbXNbMF1dLmxlbmd0aDtcbiAgICAvLyBBbW91bnQgb2YgY2hyb21vc29tZXMgcGVyIG51bWJlclxuICAgIHZhciByb3dTaXplID0gc2l6ZSAvIHRoaXMuX2NvbmZpZy5yb3dzO1xuXG4gICAgdmFyIHhPZmZzZXQ7XG4gICAgdmFyIHlPZmZzZXQ7XG5cbiAgICBpZiAoc2V0TnVtYmVyID4gcm93U2l6ZSAtIDEpIHtcbiAgICAgIHhPZmZzZXQgPSB0aGlzLl9tYXJnaW4ubGVmdCArIHRoaXMuX2NvbmZpZy5jaHJIZWlnaHQgKiAxLjQ7XG4gICAgICB5T2Zmc2V0ID0gdGhpcy5nZXRDaHJvbW9zb21lU2V0WVRyYW5zbGF0ZShzZXROdW1iZXIgLSByb3dTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeE9mZnNldCA9IHRoaXMuX21hcmdpbi5sZWZ0O1xuICAgICAgeU9mZnNldCA9IHRoaXMuZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoc2V0TnVtYmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJ3JvdGF0ZSg5MCkgdHJhbnNsYXRlKCcgKyB4T2Zmc2V0ICsgJywgLScgKyB5T2Zmc2V0ICsgJyknO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoc2V0TnVtYmVyKSB7XG4gICAgLy8gR2V0IGFkZGl0aW9uYWwgcGFkZGluZyBjYXVzZWQgYnkgYW5ub3RhdGlvbiB0cmFja3NcbiAgICB2YXIgYWRkaXRpb25hbFBhZGRpbmcgPSB0aGlzLl9nZXRBZGRpdGlvbmFsT2Zmc2V0KCk7XG4gICAgLy8gSWYgbm8gZGV0YWlsZWQgZGVzY3JpcHRpb24gcHJvdmlkZWQganVzdCB1c2Ugb25lIGZvcm11bGEgZm9yIGFsbCBjYXNlc1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLl9tYXJnaW4ubGVmdCAqIChzZXROdW1iZXIpICsgdGhpcy5fY29uZmlnLmNocldpZHRoICtcbiAgICAgIGFkZGl0aW9uYWxQYWRkaW5nICogMiArIGFkZGl0aW9uYWxQYWRkaW5nICogc2V0TnVtYmVyXG4gICAgKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRMYWJlbFhQb3NpdGlvbihzZXROdW1iZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKCh0aGlzLl9wbG9pZHkuZ2V0U2V0U2l6ZShzZXROdW1iZXIpICogdGhpcy5fY29uZmlnLmNocldpZHRoICsgMjApIC8gLTIpICtcbiAgICAgICh0aGlzLl9jb25maWcucGxvaWR5ID4gMSA/IDAgOiB0aGlzLl9jb25maWcuY2hyV2lkdGgpXG4gICAgKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVMYWJlbFhQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNocldpZHRoIC8gLTI7XG4gIH1cblxufVxuXG5cblxuXG5leHBvcnQgY2xhc3MgVmVydGljYWxMYXlvdXQgZXh0ZW5kcyBMYXlvdXQge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZywgaWRlbykge1xuICAgIHN1cGVyKGNvbmZpZywgaWRlbyk7XG4gICAgdGhpcy5fY2xhc3MgPSAnVmVydGljYWxMYXlvdXQnO1xuICAgIC8vIExheW91dCBtYXJnaW5zXG4gICAgdGhpcy5fbWFyZ2luID0ge1xuICAgICAgdG9wOiAzMCxcbiAgICAgIGxlZnQ6IDE1XG4gICAgfTtcbiAgfVxuXG4gIHJvdGF0ZUZvcndhcmQoc2V0TnVtYmVyLCBjaHJOdW1iZXIsIGNockVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHhPZmZzZXQgPSAyMDtcblxuICAgIHZhciBpZGVvQm94ID0gZDMuc2VsZWN0KHRoaXMuX2lkZW8uc2VsZWN0b3IpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgY2hyQm94ID0gY2hyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIHZhciBzY2FsZVggPSAoaWRlb0JveC53aWR0aCAvIGNockJveC5oZWlnaHQpICogMC45NztcbiAgICB2YXIgc2NhbGVZID0gdGhpcy5fZ2V0WVNjYWxlKCk7XG5cbiAgICB2YXIgdHJhbnNmb3JtID1cbiAgICAgICd0cmFuc2xhdGUoJyArIHhPZmZzZXQgKyAnLCAyNSkgc2NhbGUoJyArIHNjYWxlWCArICcsICcgKyBzY2FsZVkgKyAnKSc7XG5cbiAgICBkMy5zZWxlY3QoY2hyRWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSlcbiAgICAgIC5vbignZW5kJywgY2FsbGJhY2spO1xuXG4gICAgLy8gQXBwZW5kIG5ldyBjaHJvbW9zb21lIGxhYmVsc1xuICAgIHZhciBsYWJlbHMgPSB0aGlzLmdldENocm9tb3NvbWVMYWJlbHMoY2hyRWxlbWVudCk7XG4gICAgdmFyIHkgPSAoeE9mZnNldCArIHNlbGYuX2NvbmZpZy5jaHJXaWR0aCkgKiAxLjM7XG4gICAgZDMuc2VsZWN0KHRoaXMuX2lkZW8uZ2V0U3ZnKCkpXG4gICAgICAuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICd0bXAnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXG4gICAgICAuZGF0YShsYWJlbHMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cignY2xhc3MnLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiBpID09PSAwICYmIGxhYmVscy5sZW5ndGggPT09IDIgPyAnY2hyU2V0TGFiZWwnIDogbnVsbDtcbiAgICAgIH0pXG4gICAgICAuYXR0cigneCcsIDApXG4gICAgICAuYXR0cigneScsIHkpLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICAgIC50ZXh0KFN0cmluZylcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuICB9XG5cbiAgcm90YXRlQmFjayhzZXROdW1iZXIsIGNock51bWJlcixcbiAgICAgICAgICAgICBjaHJFbGVtZW50LCBjYWxsYmFjaykge1xuICAgIHZhciB0cmFuc2xhdGUgPSB0aGlzLmdldENocm9tb3NvbWVTZXRUcmFuc2xhdGUoc2V0TnVtYmVyKTtcblxuICAgIGQzLnNlbGVjdChjaHJFbGVtZW50LnBhcmVudE5vZGUpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNsYXRlKVxuICAgICAgLm9uKCdlbmQnLCBjYWxsYmFjayk7XG5cbiAgICBkMy5zZWxlY3RBbGwodGhpcy5faWRlby5zZWxlY3RvciArICcgZy50bXAnKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICAgIC5yZW1vdmUoKTtcbiAgfVxuXG4gIGdldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNockhlaWdodCArIHRoaXMuX21hcmdpbi50b3AgKiAxLjU7XG4gIH1cblxuICBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gJzk3JSc7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lQmFuZExhYmVsVHJhbnNsYXRlKCkge1xuXG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0TGFiZWxUcmFuc2xhdGUoKSB7XG4gICAgcmV0dXJuICdyb3RhdGUoLTkwKSc7XG4gIH1cblxuICBnZXRDaHJvbW9zb21lU2V0VHJhbnNsYXRlKHNldE51bWJlcikge1xuICAgIHZhciBtYXJnaW5Ub3AgPSB0aGlzLl9tYXJnaW4udG9wO1xuICAgIHZhciBjaHJvbW9zb21lU2V0WVRyYW5zbGF0ZSA9IHRoaXMuZ2V0Q2hyb21vc29tZVNldFlUcmFuc2xhdGUoc2V0TnVtYmVyKTtcbiAgICByZXR1cm4gKFxuICAgICAgJ3JvdGF0ZSg5MCkgJyArXG4gICAgICAndHJhbnNsYXRlKCcgKyBtYXJnaW5Ub3AgKyAnLCAtJyArIGNocm9tb3NvbWVTZXRZVHJhbnNsYXRlICsgJyknXG4gICAgKTtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVTZXRZVHJhbnNsYXRlKHNldE51bWJlcikge1xuICAgIC8vIEdldCBhZGRpdGlvbmFsIHBhZGRpbmcgY2F1c2VkIGJ5IGFubm90YXRpb24vaGlzdG9ncmFtIHRyYWNrc1xuICAgIHZhciBwYWQgPSB0aGlzLl9nZXRBZGRpdGlvbmFsT2Zmc2V0KCksXG4gICAgICBtYXJnaW4gPSB0aGlzLl9jb25maWcuY2hyTWFyZ2luLFxuICAgICAgd2lkdGggPSB0aGlzLl9jb25maWcuY2hyV2lkdGgsXG4gICAgICB0cmFuc2xhdGU7XG5cbiAgICAvLyBJZiBubyBkZXRhaWxlZCBkZXNjcmlwdGlvbiBwcm92aWRlZCBqdXN0IHVzZSBvbmUgZm9ybXVsYSBmb3IgYWxsIGNhc2VzXG4gICAgaWYgKCF0aGlzLl9jb25maWcucGxvaWR5RGVzYykge1xuICAgICAgLy8gVE9ETzpcbiAgICAgIC8vIFRoaXMgcGFydCBvZiBjb2RlIGNvbnRhaW5zIGEgbG90IG1hZ2ljIG51bWJlcnMgYW5kIGlmXG4gICAgICAvLyBzdGF0ZW1lbnRzIGZvciBleGFjdGx5IGNvcnJlc3BvbmluZyB0byBvcmlnaW5hbCBpZGVvZ3JhbSBleGFtcGxlcy5cbiAgICAgIC8vIEJ1dCBhbGwgdGhpcyBzdHVmZiBzaG91bGQgYmUgcmVtb3ZlZC4gQ2FsY3VsYXRpb24gb2YgdHJhbnNsYXRlXG4gICAgICAvLyBzaG91bGQgYmUgYSBzaW1wbGUgZm9ybXVsYSBhcHBsaWVkIGZvciBhbGwgY2FzZXMgbGlzdGVkIGJlbG93LlxuICAgICAgLy8gTm93IHRoZXkgYXJlIGRpZmZpcmVudCBiZWNhdXNlIG9mIExheW91dDpfZ2V0QWRkaXRpb25hbE9mZnNldCBkb1xuICAgICAgLy8gbm90IG1lZXQgZm9yIGNhc2VzIHdoZW4gbm8gYW5ub3RhdGlvbiwgd2hlbiBhbm5vdGF0aW9uIGV4aXN0cyBhbmRcbiAgICAgIC8vIHdoZW4gaGlzdG9ncmFtIHVzZWRcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbm5vdGF0aW9uc0xheW91dCA9PT0gJ2hpc3RvZ3JhbScpIHtcbiAgICAgICAgcmV0dXJuIG1hcmdpbiAvIDIgKyBzZXROdW1iZXIgKiAobWFyZ2luICsgd2lkdGggKyAyKSArIHBhZCAqIDIgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlID0gd2lkdGggKyBzZXROdW1iZXIgKiAobWFyZ2luICsgd2lkdGgpICsgcGFkICogMjtcbiAgICAgICAgaWYgKHBhZCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUgKyA0ICsgKDIgKiBzZXROdW1iZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgZGV0YWlsZWQgZGVzY3JpcHRpb24gcHJvdmlkZWQgc3RhcnQgdG8gY2FsY3VsYXRlIG9mZnNldHNcbiAgICAvLyBmb3IgZWFjaCBjaHJvbW9zb21lIHNldCBzZXBhcmF0ZWx5LiBUaGlzIHNob3VsZCBiZSBkb25lIG9ubHkgb25jZVxuICAgIGlmICghdGhpcy5fdHJhbnNsYXRlKSB7XG4gICAgICAvLyBGaXJzdCBvZmZzZXQgZXF1YWxzIHRvIHplcm9cbiAgICAgIHRoaXMuX3RyYW5zbGF0ZSA9IFt0aGlzLl9wbG9pZHkuZ2V0U2V0U2l6ZSgwKSAqIHdpZHRoICogMl07XG4gICAgICB2YXIgcHJldlRyYW5zbGF0ZTtcbiAgICAgIC8vIExvb3AgdGhyb3VnaCBkZXNjcmlwdGlvbiBzZXRcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5fY29uZmlnLnBsb2lkeURlc2MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcHJldlRyYW5zbGF0ZSA9IHRoaXMuX3RyYW5zbGF0ZVtpIC0gMV07XG4gICAgICAgIHRoaXMuX3RyYW5zbGF0ZVtpXSA9IHByZXZUcmFuc2xhdGUgKyB0aGlzLl9nZXRDaHJvbW9zb21lU2V0U2l6ZShpIC0gMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0ZVtzZXROdW1iZXJdO1xuICB9XG5cbiAgZ2V0Q2hyb21vc29tZVNldExhYmVsWFBvc2l0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5fY29uZmlnLmNocldpZHRoICogdGhpcy5fY29uZmlnLnBsb2lkeSkgLyAtMjtcbiAgfVxuXG4gIGdldENocm9tb3NvbWVMYWJlbFhQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNocldpZHRoIC8gLTI7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBNb2RlbEFkYXB0ZXIge1xuXG4gIGNvbnN0cnVjdG9yKG1vZGVsKSB7XG4gICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcbiAgICB0aGlzLl9jbGFzcyA9ICdNb2RlbEFkYXB0ZXInO1xuICB9XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKG1vZGVsKSB7XG4gICAgaWYgKG1vZGVsLmJhbmRzKSB7XG4gICAgICByZXR1cm4gbmV3IE1vZGVsQWRhcHRlcihtb2RlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgTW9kZWxOb0JhbmRzQWRhcHRlcihtb2RlbCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0TW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgZ2V0Q3NzQ2xhc3MoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgUGxvaWR5IHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5fZGVzY3JpcHRpb24gPSB0aGlzLl9ub3JtYWxpemUodGhpcy5fY29uZmlnLnBsb2lkeURlc2MpO1xuICB9XG5cbiAgLy8gR2V0IG51bWJlciBvZiBjaHJvbW9zb21lcyBpbiBhIGNocm9tb3NvbWUgc2V0XG4gIGdldENocm9tb3NvbWVzTnVtYmVyKHNldE51bWJlcikge1xuICAgIGlmICh0aGlzLl9jb25maWcucGxvaWR5RGVzYykge1xuICAgICAgdmFyIGNoclNldENvZGUgPSB0aGlzLl9jb25maWcucGxvaWR5RGVzY1tzZXROdW1iZXJdO1xuICAgICAgaWYgKGNoclNldENvZGUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGNoclNldENvZGUpWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaHJTZXRDb2RlLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbG9pZHkgfHwgMTtcbiAgICB9XG4gIH1cblxuICAvLyBOb3JtYWxpemUgdXNlIGRlZmluZWQgZGVzY3JpcHRpb25cbiAgX25vcm1hbGl6ZShkZXNjcmlwdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkLCBrZXksIGRlc2NWYWx1ZTtcblxuICAgIC8vIFJldHVybiB0aGUgc2FtZSBpZiBubyBkZXNjcmlwdGlvbiBwcm92aWRlZFxuICAgIGlmICghZGVzY3JpcHRpb24pIHtcbiAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICB9XG5cbiAgICAvLyBBcnJheSBvZiBub3JtYWxpemVkIGRlc2NyaXB0aW9uIG9iamVjdHNcbiAgICBub3JtYWxpemVkID0gW107XG5cbiAgICAvLyBMb29wIHRocm91Z2ggZGVzY3JpcHRpb24gYW5kIG5vcm1hbGl6ZVxuICAgIGZvciAoa2V5IGluIGRlc2NyaXB0aW9uKSB7XG4gICAgICBkZXNjVmFsdWUgPSBkZXNjcmlwdGlvbltrZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZXNjVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICBkZXNjVmFsdWUgPSBkZXNjVmFsdWUuc3BsaXQoJycpLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBub3JtYWxpemVkLnB1c2goe1xuICAgICAgICAgIGFuY2VzdG9yczogZGVzY1ZhbHVlLFxuICAgICAgICAgIGV4aXN0ZW5jZTogdGhpcy5fZ2V0ZXhpc3RlbmNlQXJyYXkoZGVzY1ZhbHVlLmxlbmd0aClcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtYWxpemVkLnB1c2goe1xuICAgICAgICAgIGFuY2VzdG9yczogT2JqZWN0LmtleXMoZGVzY1ZhbHVlKVswXSxcbiAgICAgICAgICBleGlzdGVuY2U6IGRlc2NWYWx1ZVtPYmplY3Qua2V5cyhkZXNjVmFsdWUpWzBdXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgfVxuXG4gIC8vIEdldCBhcnJheSBmaWxsZWQgYnkgJzExJyBlbGVtZW50c1xuICBfZ2V0ZXhpc3RlbmNlQXJyYXkobGVuZ3RoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJheS5wdXNoKCcxMScpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIGdldFNldFNpemUoY2hyU2V0TnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2Rlc2NyaXB0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb25bY2hyU2V0TnVtYmVyXS5hbmNlc3RvcnMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgYW5jZXN0b3IgbGV0dGVyXG4gIGdldEFuY2VzdG9yKGNoclNldE51bWJlciwgY2hyTnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2Rlc2NyaXB0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb25bY2hyU2V0TnVtYmVyXS5hbmNlc3RvcnNbY2hyTnVtYmVyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGlmIGNocm9tb3NvbWUncyBhcm0gc2hvdWxkIGJlIHJlbmRlcmVkLlxuICAvLyBJZiBubyBkZXNjcmlwdGlvbiB3YXMgcHJvdmlkZWQsIG1ldGhvZCByZXR1cm5zIHRydWUgYW5kXG4gIC8vIHNvbWV0aGluZyBhbm90aGVyIGRlcGVuZGluZyBvbiB1c2VyIHByb3ZpZGVkIGRlc2NyaXB0aW9uLlxuICBleGlzdHMoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcikge1xuICAgIGlmICh0aGlzLl9kZXNjcmlwdGlvbikge1xuICAgICAgdmFyIGRlc2MgPVxuICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbltjaHJTZXROdW1iZXJdLmV4aXN0ZW5jZVtjaHJOdW1iZXJdW2FybU51bWJlcl07XG4gICAgICByZXR1cm4gTnVtYmVyKGRlc2MpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuLy8gQ2hyb21vc29tZSdzIHZpZXcgdXRpbGl0eSBjbGFzc1xuZXhwb3J0IGNsYXNzIENocm9tb3NvbWVVdGlsIHtcblxuICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIH1cblxuICBnZXRMYWJlbCgpIHtcbiAgICB2YXIgbGFiZWwgPVxuICAgICAgZDNcbiAgICAgICAgLnNlbGVjdCh0aGlzLl9ub2RlKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0LmNockxhYmVsJylcbiAgICAgICAgLnRleHQoKTtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICAvLyBHZXQgY2hyb21vc29tZSBzZXQgbGFiZWxcbiAgZ2V0U2V0TGFiZWwoKSB7XG4gICAgdmFyIHNldExhYmVsID1cbiAgICAgIGQzXG4gICAgICAgIC5zZWxlY3QodGhpcy5fbm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0LmNocm9tb3NvbWUtc2V0LWxhYmVsJylcbiAgICAgICAgLnRleHQoKTtcbiAgICByZXR1cm4gc2V0TGFiZWw7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29sb3J9IGZyb20gJy4vLi4vY29sb3InO1xuXG5leHBvcnQgY2xhc3MgQ2hyb21vc29tZSB7XG5cbiAgY29uc3RydWN0b3IoYWRhcHRlciwgY29uZmlnLCBpZGVvKSB7XG4gICAgdGhpcy5fYWRhcHRlciA9IGFkYXB0ZXI7XG4gICAgdGhpcy5fbW9kZWwgPSB0aGlzLl9hZGFwdGVyLmdldE1vZGVsKCk7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuX2lkZW8gPSBpZGVvO1xuICAgIHRoaXMuX2NvbG9yID0gbmV3IENvbG9yKHRoaXMuX2NvbmZpZyk7XG4gICAgdGhpcy5fYnVtcENvZWZmaWNpZW50ID0gNTtcbiAgfVxuXG4gIC8vIEZhY3RvcnkgbWV0aG9kXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShhZGFwdGVyLCBjb25maWcsIGlkZW8pIHtcbiAgICBpZiAoYWRhcHRlci5nZXRNb2RlbCgpLmNlbnRyb21lcmVQb3NpdGlvbiA9PT0gJ3RlbG9jZW50cmljJykge1xuICAgICAgcmV0dXJuIG5ldyBUZWxvY2VudHJpY0Nocm9tb3NvbWUoYWRhcHRlciwgY29uZmlnLCBpZGVvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBNZXRhY2VudHJpY0Nocm9tb3NvbWUoYWRhcHRlciwgY29uZmlnLCBpZGVvKTtcbiAgICB9XG4gIH07XG5cbiAgX2FkZFBBcm1TaGFwZShjbGlwUGF0aCwgaXNQQXJtUmVuZGVyZWQpIHtcbiAgICBpZiAoaXNQQXJtUmVuZGVyZWQpIHtcbiAgICAgIHJldHVybiBjbGlwUGF0aC5jb25jYXQodGhpcy5fZ2V0UEFybVNoYXBlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2xpcFBhdGg7XG4gICAgfVxuICB9O1xuXG4gIF9hZGRRQXJtU2hhcGUoY2xpcFBhdGgsIGlzUUFybVJlbmRlcmVkKSB7XG4gICAgaWYgKGlzUUFybVJlbmRlcmVkKSB7XG4gICAgICByZXR1cm4gY2xpcFBhdGguY29uY2F0KHRoaXMuX2dldFFBcm1TaGFwZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNsaXBQYXRoO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoY29udGFpbmVyLCBjaHJTZXROdW1iZXIsIGNock51bWJlcikge1xuICAgICAgLy8gQXBwZW5kIGJhbmRzIGNvbnRhaW5lciBhbmQgYXBwbHkgY2xpcC1wYXRoIG9uIGl0XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBjb250YWluZXIgPSBjb250YWluZXIuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdiYW5kcycpXG4gICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBcInVybCgjXCIgKyB0aGlzLl9tb2RlbC5pZCArIFwiLWNocm9tb3NvbWUtc2V0LWNsaXBwYXRoKVwiKTtcblxuICAgICAgLy8gUmVuZGVyIGNocm9tb3NvbWUgYXJtc1xuICAgIHZhciBpc1BBcm1SZW5kZXJlZCA9IHRoaXMuX3JlbmRlclBBcm0oY29udGFpbmVyLCBjaHJTZXROdW1iZXIsIGNock51bWJlcik7XG4gICAgdmFyIGlzUUFybVJlbmRlcmVkID0gdGhpcy5fcmVuZGVyUUFybShjb250YWluZXIsIGNoclNldE51bWJlciwgY2hyTnVtYmVyKTtcblxuICAgICAgLy8gUmVuZGVyIHJhbmdlIHNldFxuICAgIHRoaXMuX3JlbmRlclJhbmdlU2V0KGNvbnRhaW5lciwgY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIpO1xuXG4gICAgICAvLyBQdXNoIGFybXMgc2hhcGUgc3RyaW5nIGludG8gY2xpcFBhdGggYXJyYXlcbiAgICB2YXIgY2xpcFBhdGggPSBbXTtcbiAgICBjbGlwUGF0aCA9IHRoaXMuX2FkZFBBcm1TaGFwZShjbGlwUGF0aCwgaXNQQXJtUmVuZGVyZWQpO1xuICAgIGNsaXBQYXRoID0gdGhpcy5fYWRkUUFybVNoYXBlKGNsaXBQYXRoLCBpc1FBcm1SZW5kZXJlZCk7XG5cbiAgICB2YXIgb3BhY2l0eSA9ICcwJztcbiAgICB2YXIgZmlsbCA9ICcnO1xuICAgIHZhciBpc0Z1bGx5QmFuZGVkID0gdGhpcy5pc0Z1bGx5QmFuZGVkKCk7XG4gICAgaWYgKCdhbmNlc3RvcnMnIGluIHRoaXMuX2lkZW8uY29uZmlnICYmICEoJ3JhbmdlU2V0JyBpbiB0aGlzLl9pZGVvLmNvbmZpZykpIHtcbiAgICAgIC8vIEUuZy4gZGlwbG9pZCBodW1hbiBnZW5vbWUgKHdpdGggdHJhbnNsdWNlbnQgb3ZlcmxheSlcbiAgICAgIGZpbGwgPSBzZWxmLl9jb2xvci5nZXRBcm1Db2xvcihjaHJTZXROdW1iZXIsIGNock51bWJlciwgMCk7XG4gICAgICBpZiAoaXNGdWxseUJhbmRlZCkge1xuICAgICAgICBvcGFjaXR5ID0gJzAuNSc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0Z1bGx5QmFuZGVkKSB7XG4gICAgICAvLyBFLmcuIG1vdXNlIHJlZmVyZW5jZSBnZW5vbWVcbiAgICAgIG9wYWNpdHkgPSBudWxsO1xuICAgICAgZmlsbCA9ICd0cmFuc3BhcmVudCc7XG4gICAgfSBlbHNlIGlmICghKCdhbmNlc3RvcnMnIGluIHRoaXMuX2lkZW8uY29uZmlnKSkge1xuICAgICAgLy8gRS5nLiBjaGltcGFuemVlIGFzc2VtYmx5IFBhbl90cm8gMy4wXG4gICAgICBvcGFjaXR5ID0gJzEnO1xuICAgIH1cblxuICAgIC8vIFJlbmRlciBjaHJvbW9zb21lIGJvcmRlclxuICAgIGNvbnRhaW5lci5hcHBlbmQoJ2cnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjaHJvbW9zb21lLWJvcmRlcicpXG4gICAgICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAgICAgLmRhdGEoY2xpcFBhdGgpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAuYXR0cignZmlsbCcsIGZpbGwpXG4gICAgICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBvcGFjaXR5KVxuICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fY29sb3IuZ2V0Qm9yZGVyQ29sb3IoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGkpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiAoJ3N0cm9rZVdpZHRoJyBpbiBkID8gZC5zdHJva2VXaWR0aCA6IDEpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC5wYXRoO1xuICAgICAgICAgIH0pLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQuY2xhc3M7XG4gICAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gY2xpcFBhdGg7XG4gIH07XG5cbiAgX3JlbmRlclJhbmdlU2V0KGNvbnRhaW5lciwgY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIpIHtcbiAgICBpZiAoISgncmFuZ2VTZXQnIGluIHRoaXMuX2NvbmZpZykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmFuZ2VTZXQgPSB0aGlzLl9jb25maWcucmFuZ2VTZXQuZmlsdGVyKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICByZXR1cm4gcmFuZ2UuY2hyIC0gMSA9PT0gY2hyU2V0TnVtYmVyO1xuICAgIH0pLm1hcChmdW5jdGlvbihyYW5nZSkge1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZSk7XG4gICAgfSk7XG5cbiAgICB2YXIgcmFuZ2VzQ29udGFpbmVyID0gY29udGFpbmVyLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3JhbmdlLXNldCcpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpZGVvID0gc2VsZi5faWRlbztcbiAgICB2YXIgYmFuZHNYT2Zmc2V0ID0gaWRlby5fYmFuZHNYT2Zmc2V0O1xuXG4gICAgcmFuZ2VzQ29udGFpbmVyLnNlbGVjdEFsbCgncmVjdC5yYW5nZScpXG4gICAgICAgICAgLmRhdGEocmFuZ2VTZXQpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAncmFuZ2UnKVxuICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBzdGFydFB4ID0gaWRlby5jb252ZXJ0QnBUb1B4KHNlbGYuX21vZGVsLCByYW5nZS5nZXRTdGFydCgpKTtcbiAgICAgICAgICAgIHJldHVybiBzdGFydFB4IC0gYmFuZHNYT2Zmc2V0O1xuICAgICAgICAgIH0pLmF0dHIoJ3knLCAwKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoUHggPSBpZGVvLmNvbnZlcnRCcFRvUHgoc2VsZi5fbW9kZWwsIHJhbmdlLmdldExlbmd0aCgpKTtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGhQeCAtIGJhbmRzWE9mZnNldDtcbiAgICAgICAgICB9KS5hdHRyKCdoZWlnaHQnLCB0aGlzLl9jb25maWcuY2hyV2lkdGgpXG4gICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiByYW5nZS5nZXRDb2xvcihjaHJOdW1iZXIpO1xuICAgICAgICAgIH0pO1xuICB9O1xuXG4gIC8vIEdldCBjaHJvbW9zb21lJ3Mgc2hhcGUgbWFpbiB2YWx1ZXNcbiAgX2dldFNoYXBlRGF0YSgpIHtcbiAgICAgIC8vIEZpcnN0IHEgYmFuZCBmcm9tIGJhbmRzIHNlcXVlbmNlXG4gICAgdmFyIGZpcnN0UUJhbmQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbC5iYW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX21vZGVsLmJhbmRzW2ldLm5hbWVbMF0gPT09ICdxJykge1xuICAgICAgICBmaXJzdFFCYW5kID0gdGhpcy5fbW9kZWwuYmFuZHNbaV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENocm9tb3NvbWUncyByaWdodCBwb3NpdGlvblxuICAgIHZhciBsYXN0QmFuZCA9IHRoaXMuX21vZGVsLmJhbmRzLmxlbmd0aCAtIDE7XG4gICAgdmFyIHJpZ2h0VGVybWluYWxQb3NpdGlvbiA9IHRoaXMuX21vZGVsLmJhbmRzW2xhc3RCYW5kXS5weC5zdG9wO1xuXG4gICAgICAvLyBQcm9wZXJ0aWVzIGRlc2NyaXB0aW9uOlxuICAgICAgLy8geDEgLSBsZWZ0IHRlcm1pbmFsIHN0YXJ0IHBvc2l0aW9uXG4gICAgICAvLyB4MiAtIGNlbnRyb21lcmUgcG9zaXRpb25cbiAgICAgIC8vIHgzIC0gcmlnaHQgdGVybWluYWwgZW5kIHBvc2l0aW9uXG4gICAgICAvLyB3IC0gY2hyb21vc29tZSB3aWR0aFxuICAgICAgLy8gYiAtIGJ1bXAgc2l6ZVxuICAgIHJldHVybiB7XG4gICAgICB4MTogMCxcbiAgICAgIHgyOiBmaXJzdFFCYW5kID8gZmlyc3RRQmFuZC5weC5zdGFydCA6IHJpZ2h0VGVybWluYWxQb3NpdGlvbixcbiAgICAgIHgzOiByaWdodFRlcm1pbmFsUG9zaXRpb24sXG4gICAgICB3OiB0aGlzLl9jb25maWcuY2hyV2lkdGgsXG4gICAgICBiOiB0aGlzLl9jb25maWcuY2hyV2lkdGggLyB0aGlzLl9idW1wQ29lZmZpY2llbnRcbiAgICB9O1xuICB9O1xuXG4gIF9nZXRQQXJtU2hhcGUoKSB7XG4gICAgdmFyIGQgPSB0aGlzLl9nZXRTaGFwZURhdGEoKSxcbiAgICAgIHggPSBkLngyIC0gZC5iO1xuXG4gICAgaWYgKHRoaXMuaXNGdWxseUJhbmRlZCgpIHx8ICdhbmNlc3RvcnMnIGluIHRoaXMuX2lkZW8uY29uZmlnKSB7XG4gICAgICAvLyBFbmNvdW50ZXJlZCB3aGVuIGNocm9tb3NvbWUgaGFzIGFueSBvZjpcbiAgICAgIC8vICAtIE9uZSBwbGFjZWhvbGRlciBcImJhbmRcIiwgZS5nLiBwaWcgZ2Vub21lIEdDRl8wMDAwMDMwMjUuNVxuICAgICAgLy8gIC0gTWFueSAoPiAyKSBiYW5kcywgZS5nLiBodW1hbiByZWZlcmVuY2UgZ2Vub21lXG4gICAgICAvLyAgLSBBbmNlc3RvciBjb2xvcnMgaW4gcGxvaWR5IGNvbmZpZ3VyYXRpb24sIGFzIGluIHBsb2lkeV9iYXNpYy5odG1sXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjbGFzczogJycsXG4gICAgICAgIHBhdGg6XG4gICAgICAgICAgJ00nICsgZC5iICsgJywwICcgK1xuICAgICAgICAgICdMJyArIHggKyAnLDAgJyArXG4gICAgICAgICAgJ1EnICsgKGQueDIgKyBkLmIpICsgJywnICsgKGQudyAvIDIpICsgJywnICsgeCArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgZC5iICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICAgICAnUS0nICsgZC5iICsgJywnICsgKGQudyAvIDIpICsgJywnICsgZC5iICsgJywwJ1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZS5nLiBjaGltcGFuemVlIGFzc2VtYmx5IFBhbl90cm8gMy4wXG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgY2xhc3M6ICcnLFxuICAgICAgICBwYXRoOlxuICAgICAgICAgICdNJyArIGQuYiArICcsMCAnICtcbiAgICAgICAgICAnTCcgKyAoeCAtIDIpICsgJywwICcgK1xuICAgICAgICAgICdMJyArICh4IC0gMikgKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgICAgICdMJyArIGQuYiArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ1EtJyArIGQuYiArICcsJyArIChkLncgLyAyKSArICcsJyArIGQuYiArICcsMCdcbiAgICAgIH0sIHtcbiAgICAgICAgY2xhc3M6ICdhY2VuJyxcbiAgICAgICAgcGF0aDpcbiAgICAgICAgICAnTScgKyB4ICsgJywwICcgK1xuICAgICAgICAgICdRJyArIChkLngyICsgZC5iKSArICcsJyArIChkLncgLyAyKSArICcsJyArIHggKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgICAgICdMJyArIHggKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgICAgICdMJyArICh4IC0gMikgKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgICAgICdMJyArICh4IC0gMikgKyAnLDAnXG4gICAgICB9XTtcbiAgICB9XG4gIH07XG5cbiAgX2dldFFBcm1TaGFwZSgpIHtcbiAgICB2YXIgZCA9IHRoaXMuX2dldFNoYXBlRGF0YSgpLFxuICAgICAgeCA9IGQueDMgLSBkLmIsXG4gICAgICB4MmIgPSBkLngyICsgZC5iO1xuXG4gICAgaWYgKHRoaXMuaXNGdWxseUJhbmRlZCgpIHx8ICdhbmNlc3RvcnMnIGluIHRoaXMuX2lkZW8uY29uZmlnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjbGFzczogJycsXG4gICAgICAgIHBhdGg6XG4gICAgICAgICAgJ00nICsgeDJiICsgJywwICcgK1xuICAgICAgICAgICdMJyArIHggKyAnLDAgJyArXG4gICAgICAgICAgJ1EnICsgKGQueDMgKyBkLmIpICsgJywnICsgKGQudyAvIDIpICsgJywnICsgeCArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgeDJiICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICAgICAnUScgKyAoZC54MiAtIGQuYikgKyAnLCcgKyAoZC53IC8gMikgKyAnLCcgKyB4MmIgKyAnLDAnXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlLmcuIGNoaW1wYW56ZWUgYXNzZW1ibHkgUGFuX3RybyAzLjBcbiAgICAgIHJldHVybiBbe1xuICAgICAgICBwYXRoOlxuICAgICAgICAgICdNJyArIHgyYiArICcsMCAnICtcbiAgICAgICAgICAnTCcgKyB4ICsgJywwICcgK1xuICAgICAgICAgICdRJyArIChkLngzICsgZC5iKSArICcsJyArIChkLncgLyAyKSArICcsJyArIHggKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgICAgICdMJyArIHgyYiArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgeDJiICsgJywwJ1xuICAgICAgfSwge1xuICAgICAgICBjbGFzczogJ2FjZW4nLFxuICAgICAgICBwYXRoOlxuICAgICAgICAgICdNJyArIHgyYiArICcsMCcgK1xuICAgICAgICAgICdRJyArIChkLngyIC0gZC5iKSArICcsJyArIChkLncgLyAyKSArICcsJyArIHgyYiArICcsJyArIGQudyArICcgJyArXG4gICAgICAgICAgJ0wnICsgeDJiICsgJywnICsgZC53ICtcbiAgICAgICAgICAnTCcgKyAoeDJiICsgMikgKyAnLCcgKyBkLncgK1xuICAgICAgICAgICdMJyArICh4MmIgKyAyKSArICcsMCdcbiAgICAgIH1dO1xuICAgIH1cbiAgfTtcblxuICBpc0Z1bGx5QmFuZGVkKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLl9tb2RlbC5iYW5kcyAmJlxuICAgICAgKHRoaXMuX21vZGVsLmJhbmRzLmxlbmd0aCAhPT0gMiB8fCB0aGlzLl9tb2RlbC5iYW5kc1swXS5uYW1lWzBdID09PSAncScpXG4gICAgKTtcbiAgfTtcblxuICAvLyBSZW5kZXIgYXJtIGJhbmRzXG4gIF9yZW5kZXJCYW5kcyhjb250YWluZXIsIGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBiYW5kcywgYXJtKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhcm1OdW1iZXIgPSBhcm0gPT09ICdwJyA/IDAgOiAxO1xuICAgIHZhciBmaWxsID0gJyc7XG4gICAgaWYgKCdhbmNlc3RvcnMnIGluIHRoaXMuX2lkZW8uY29uZmlnICYmICEodGhpcy5pc0Z1bGx5QmFuZGVkKCkpKSB7XG4gICAgICBmaWxsID0gc2VsZi5fY29sb3IuZ2V0QXJtQ29sb3IoY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIsIGFybU51bWJlcik7XG4gICAgfVxuXG4gICAgY29udGFpbmVyLnNlbGVjdEFsbChcInBhdGguYmFuZC5cIiArIGFybSlcbiAgICAgIC5kYXRhKGJhbmRzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAuYXR0cihcImlkXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX21vZGVsLmlkICsgXCItXCIgKyBkLm5hbWUucmVwbGFjZShcIi5cIiwgXCItXCIpO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gJ2JhbmQgJyArIGFybSArICctYmFuZCAnICsgZC5zdGFpbjtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgc3RhcnQgPSBzZWxmLl9pZGVvLnJvdW5kKGQucHguc3RhcnQpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gc2VsZi5faWRlby5yb3VuZChkLnB4LndpZHRoKTtcblxuICAgICAgICB2YXIgeCA9IHN0YXJ0ICsgbGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBcIk0gXCIgKyBzdGFydCArIFwiLCAwXCIgK1xuICAgICAgICAgICAgICBcImwgXCIgKyBsZW5ndGggKyBcIiAwIFwiICtcbiAgICAgICAgICAgICAgXCJsIDAgXCIgKyBzZWxmLl9jb25maWcuY2hyV2lkdGggKyBcIiBcIiArXG4gICAgICAgICAgICAgIFwibCAtXCIgKyBsZW5ndGggKyBcIiAwIHpcIjtcbiAgICAgIH0pXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBmaWxsKTtcbiAgfTtcblxuICAvLyBSZW5kZXIgY2hyb21vc29tZSdzIHAgYXJtLlxuICAvLyBSZXR1cm5zIGJvb2xlYW4gd2hpY2ggaW5kaWNhdGVzIGlzIGFueSBiYW5kcyB3YXMgcmVuZGVyZWRcbiAgX3JlbmRlclBBcm0oY29udGFpbmVyLCBjaHJTZXROdW1iZXIsIGNock51bWJlcikge1xuICAgIHZhciBiYW5kcyA9IHRoaXMuX21vZGVsLmJhbmRzLmZpbHRlcihmdW5jdGlvbihiYW5kKSB7XG4gICAgICByZXR1cm4gYmFuZC5uYW1lWzBdID09PSAncCc7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZW5kZXJCYW5kcyhjb250YWluZXIsIGNoclNldE51bWJlciwgY2hyTnVtYmVyLCBiYW5kcywgJ3AnKTtcblxuICAgIHJldHVybiBCb29sZWFuKGJhbmRzLmxlbmd0aCk7XG4gIH07XG5cbiAgLy8gUmVuZGVyIGNocm9tb3NvbWUncyBxIGFybS5cbiAgLy8gUmV0dXJucyBib29sZWFuIHdoaWNoIGluZGljYXRlcyBpcyBhbnkgYmFuZHMgd2FzIHJlbmRlcmVkXG4gIF9yZW5kZXJRQXJtKGNvbnRhaW5lciwgY2hyU2V0TnVtYmVyLCBjaHJOdW1iZXIpIHtcbiAgICB2YXIgYmFuZHMgPSB0aGlzLl9tb2RlbC5iYW5kcy5maWx0ZXIoZnVuY3Rpb24oYmFuZCkge1xuICAgICAgcmV0dXJuIGJhbmQubmFtZVswXSA9PT0gJ3EnO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVuZGVyQmFuZHMoY29udGFpbmVyLCBjaHJTZXROdW1iZXIsIGNock51bWJlciwgYmFuZHMsICdxJyk7XG5cbiAgICByZXR1cm4gQm9vbGVhbihiYW5kcy5sZW5ndGgpO1xuICB9O1xufVxuXG5cblxuZXhwb3J0IGNsYXNzIE1ldGFjZW50cmljQ2hyb21vc29tZSBleHRlbmRzIENocm9tb3NvbWUge1xuXG4gIGNvbnN0cnVjdG9yKG1vZGVsLCBjb25maWcsIGlkZW8pIHtcbiAgICBzdXBlcihtb2RlbCwgY29uZmlnLCBpZGVvKTtcbiAgICB0aGlzLl9jbGFzcyA9ICdNZXRhY2VudHJpY0Nocm9tb3NvbWUnO1xuICB9XG59XG5cblxuXG5leHBvcnQgY2xhc3MgVGVsb2NlbnRyaWNDaHJvbW9zb21lIGV4dGVuZHMgQ2hyb21vc29tZSB7XG5cbiAgY29uc3RydWN0b3IobW9kZWwsIGNvbmZpZywgaWRlbykge1xuICAgIHN1cGVyKG1vZGVsLCBjb25maWcsIGlkZW8pO1xuICAgIHRoaXMuX2NsYXNzID0gJ1RlbG9jZW50cmljQ2hyb21vc29tZSc7XG4gICAgdGhpcy5fcEFybU9mZnNldCA9IDM7XG4gIH1cblxuICBfYWRkUEFybVNoYXBlKGNsaXBQYXRoKSB7XG4gICAgcmV0dXJuIGNsaXBQYXRoLmNvbmNhdCh0aGlzLl9nZXRQQXJtU2hhcGUoKSk7XG4gIH07XG5cbiAgX2dldFBBcm1TaGFwZSgpIHtcbiAgICB2YXIgZCA9IHRoaXMuX2dldFNoYXBlRGF0YSgpO1xuICAgIGQubyA9IHRoaXMuX3BBcm1PZmZzZXQ7XG5cbiAgICByZXR1cm4gW3tcbiAgICAgIGNsYXNzOiAnYWNlbicsXG4gICAgICBwYXRoOiAnTScgKyAoZC54MiArIDIpICsgJywxJyArXG4gICAgICAnTCcgKyAoZC54MiArIGQubyArIDMuMjUpICsgJywxICcgK1xuICAgICAgJ0wnICsgKGQueDIgKyBkLm8gKyAzLjI1KSArICcsJyArIChkLncgLSAxKSArICcgJyArXG4gICAgICAnTCcgKyAoZC54MiArIDIpICsgJywnICsgKGQudyAtIDEpXG4gICAgfSwge1xuICAgICAgY2xhc3M6ICdncG9zNjYnLFxuICAgICAgcGF0aDogJ00nICsgKGQueDIgLSBkLm8gKyA1KSArICcsMCcgK1xuICAgICAgJ0wnICsgKGQueDIgLSBkLm8gKyAzKSArICcsMCAnICtcbiAgICAgICdMJyArIChkLngyIC0gZC5vICsgMykgKyAnLCcgKyBkLncgKyAnICcgK1xuICAgICAgJ0wnICsgKGQueDIgLSBkLm8gKyA1KSArICcsJyArIGQudyxcbiAgICAgIHN0cm9rZVdpZHRoOiAwLjVcbiAgICB9XTtcbiAgfTtcblxuICBfZ2V0UUFybVNoYXBlKCkge1xuICAgIHZhciBkID0gdGhpcy5fZ2V0U2hhcGVEYXRhKCksXG4gICAgICB4ID0gZC54MyAtIGQuYixcbiAgICAgIG8gPSB0aGlzLl9wQXJtT2Zmc2V0ICsgMztcblxuICAgIHJldHVybiB7XG4gICAgICBjbGFzczogJycsXG4gICAgICBwYXRoOlxuICAgICAgJ00nICsgKGQueDIgKyBvKSArICcsMCAnICtcbiAgICAgICdMJyArIHggKyAnLDAgJyArXG4gICAgICAnUScgKyAoZC54MyArIGQuYikgKyAnLCcgKyAoZC53IC8gMikgKyAnLCcgKyB4ICsgJywnICsgZC53ICsgJyAnICtcbiAgICAgICdMJyArIChkLngyICsgbykgKyAnLCcgKyBkLndcbiAgICB9O1xuICB9O1xufVxuIl19"}